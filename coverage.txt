/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/Build/Intermediates.noindex/SwiftDate.build/Debug/SwiftDate.build/DerivedSources/resource_bundle_accessor.swift:
    1|       |import class Foundation.Bundle
    2|       |
    3|       |private class BundleFinder {}
    4|       |
    5|       |extension Foundation.Bundle {
    6|       |    /// Returns the resource bundle associated with the current Swift module.
    7|      0|    static var module: Bundle = {
    8|      0|        let bundleName = "SwiftDate_SwiftDate"
    9|      0|
   10|      0|        let candidates = [
   11|      0|            // Bundle should be present here when the package is linked into an App.
   12|      0|            Bundle.main.resourceURL,
   13|      0|
   14|      0|            // Bundle should be present here when the package is linked into a framework.
   15|      0|            Bundle(for: BundleFinder.self).resourceURL,
   16|      0|
   17|      0|            // For command-line tools.
   18|      0|            Bundle.main.bundleURL,
   19|      0|        ]
   20|      0|
   21|      0|        for candidate in candidates {
   22|      0|            let bundlePath = candidate?.appendingPathComponent(bundleName + ".bundle")
   23|      0|            if let bundle = bundlePath.flatMap(Bundle.init(url:)) {
   24|      0|                return bundle
   25|      0|            }
   26|      0|        }
   27|      0|        fatalError("unable to find bundle named SwiftDate_SwiftDate")
   28|      0|    }()
   29|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/AttributedText/Sources/AttributedText/AttributedText.swift:
    1|       |import SwiftUI
    2|       |
    3|       |/// A view that displays styled attributed text.
    4|       |public struct AttributedText: View {
    5|      8|  @StateObject private var textSizeViewModel = TextSizeViewModel()
  ------------------
  | $s14AttributedTextAAV18_textSizeViewModel33_D10F78907B6B7FA5342A75D7BBF82D4CLL7SwiftUI11StateObjectVyAA0bdeF0CGvpfi:
  |    5|      6|  @StateObject private var textSizeViewModel = TextSizeViewModel()
  ------------------
  | $s14AttributedTextAAV18_textSizeViewModel33_D10F78907B6B7FA5342A75D7BBF82D4CLL7SwiftUI11StateObjectVyAA0bdeF0CGvpfiAIycfu_AIycfu0_:
  |    5|      2|  @StateObject private var textSizeViewModel = TextSizeViewModel()
  ------------------
    6|       |
    7|       |  private let attributedText: NSAttributedString
    8|       |  private let onOpenLink: ((URL) -> Void)?
    9|       |
   10|       |  /// Creates an attributed text view.
   11|       |  /// - Parameters:
   12|       |  ///   - attributedText: An attributed string to display.
   13|       |  ///   - onOpenLink: The action to perform when the user opens a link in the text. When not specified,
   14|       |  ///                 the  view opens the links using the `OpenURLAction` from the environment.
   15|      6|  public init(_ attributedText: NSAttributedString, onOpenLink: ((URL) -> Void)? = nil) {
   16|      6|    self.attributedText = attributedText
   17|      6|    self.onOpenLink = onOpenLink
   18|      6|  }
   19|       |
   20|       |  /// Creates an attributed text view.
   21|       |  /// - Parameters:
   22|       |  ///   - attributedText: A closure that creates the attributed string to display.
   23|       |  ///   - onOpenLink: The action to perform when the user opens a link in the text. When not specified,
   24|       |  ///                 the  view opens the links using the `OpenURLAction` from the environment.
   25|      0|  public init(attributedText: () -> NSAttributedString, onOpenLink: ((URL) -> Void)? = nil) {
   26|      0|    self.init(attributedText(), onOpenLink: onOpenLink)
   27|      0|  }
   28|       |
   29|     46|  public var body: some View {
   30|     84|    GeometryReader { geometry in
   31|     84|      AttributedTextImpl(
   32|     84|        attributedText: attributedText,
   33|     84|        maxLayoutWidth: geometry.maxWidth,
   34|     84|        textSizeViewModel: textSizeViewModel,
   35|     84|        onOpenLink: onOpenLink
   36|     84|      )
   37|     84|    }
   38|     46|    .frame(
   39|     46|      idealWidth: textSizeViewModel.textSize?.width,
   40|     46|      idealHeight: textSizeViewModel.textSize?.height
   41|     46|    )
   42|     46|    .fixedSize(horizontal: false, vertical: true)
   43|     46|  }
   44|       |}
   45|       |
   46|       |extension GeometryProxy {
   47|     84|  fileprivate var maxWidth: CGFloat {
   48|     84|    size.width - safeAreaInsets.leading - safeAreaInsets.trailing
   49|     84|  }
   50|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/AttributedText/Sources/AttributedText/AttributedTextImpl+macOS.swift:
    1|       |#if os(macOS)
    2|       |  import SwiftUI
    3|       |
    4|       |  extension AttributedTextImpl: NSViewRepresentable {
    5|      2|    func makeNSView(context: Context) -> TextView {
    6|      2|      let nsView = TextView(frame: .zero)
    7|      2|
    8|      2|      nsView.drawsBackground = false
    9|      2|      nsView.textContainerInset = .zero
   10|      2|      nsView.isEditable = false
   11|      2|      nsView.isRichText = false
   12|      2|      nsView.textContainer?.lineFragmentPadding = 0
   13|      2|      // we are setting the container's width manually
   14|      2|      nsView.textContainer?.widthTracksTextView = false
   15|      2|      nsView.delegate = context.coordinator
   16|      2|
   17|      2|      return nsView
   18|      2|    }
   19|       |
   20|     42|    func updateNSView(_ nsView: TextView, context: Context) {
   21|     42|      nsView.textStorage?.setAttributedString(attributedText)
   22|     42|      nsView.maxLayoutWidth = maxLayoutWidth
   23|     42|
   24|     42|      nsView.textContainer?.maximumNumberOfLines = context.environment.lineLimit ?? 0
   25|     42|      nsView.textContainer?.lineBreakMode = NSLineBreakMode(
   26|     42|        truncationMode: context.environment.truncationMode
   27|     42|      )
   28|     42|      context.coordinator.openLink = onOpenLink ?? { context.environment.openURL($0) }
  ------------------
  | $s14AttributedText0aB4ImplV12updateNSView_7contextyAC0B4ViewC_7SwiftUI0E20RepresentableContextVyACGtFy10Foundation3URLVcyKXEfu0_:
  |   28|     42|      context.coordinator.openLink = onOpenLink ?? { context.environment.openURL($0) }
  ------------------
  | Unexecuted instantiation: $s14AttributedText0aB4ImplV12updateNSView_7contextyAC0B4ViewC_7SwiftUI0E20RepresentableContextVyACGtFy10Foundation3URLVcyKXEfu0_yANcfU_
  ------------------
   29|     42|      textSizeViewModel.didUpdateTextView(nsView)
   30|     42|    }
   31|       |
   32|      2|    func makeCoordinator() -> Coordinator {
   33|      2|      Coordinator()
   34|      2|    }
   35|       |  }
   36|       |
   37|       |  extension AttributedTextImpl {
   38|       |    final class TextView: NSTextView {
   39|       |      var maxLayoutWidth: CGFloat {
   40|     86|        get { textContainer?.containerSize.width ?? 0 }
   41|     42|        set {
   42|     42|          guard textContainer?.containerSize.width != newValue else { return }
   43|     40|          textContainer?.containerSize.width = newValue
   44|     40|          invalidateIntrinsicContentSize()
   45|     40|        }
   46|       |      }
   47|       |
   48|     86|      override var intrinsicContentSize: NSSize {
   49|     86|        guard maxLayoutWidth > 0,
   50|     86|          let textContainer = self.textContainer,
   51|     86|          let layoutManager = self.layoutManager
   52|     86|        else {
   53|      0|          return super.intrinsicContentSize
   54|     86|        }
   55|     86|
   56|     86|        layoutManager.ensureLayout(for: textContainer)
   57|     86|        return layoutManager.usedRect(for: textContainer).size
   58|     86|      }
   59|       |    }
   60|       |
   61|       |    final class Coordinator: NSObject, NSTextViewDelegate {
   62|       |      var openLink: ((URL) -> Void)?
   63|       |
   64|      0|      func textView(_: NSTextView, clickedOnLink link: Any, at _: Int) -> Bool {
   65|      0|        guard let openLink = self.openLink,
   66|      0|          let url = (link as? URL) ?? (link as? String).flatMap(URL.init(string:))
   67|      0|        else {
   68|      0|          return false
   69|      0|        }
   70|      0|
   71|      0|        openLink(url)
   72|      0|        return true
   73|      0|      }
   74|       |    }
   75|       |  }
   76|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/AttributedText/Sources/AttributedText/NSLineBreakMode+TruncationMode.swift:
    1|       |import SwiftUI
    2|       |
    3|       |extension NSLineBreakMode {
    4|     42|  init(truncationMode: Text.TruncationMode) {
    5|     42|    switch truncationMode {
    6|     42|    case .head:
    7|      0|      self = .byTruncatingHead
    8|     42|    case .tail:
    9|     42|      self = .byTruncatingTail
   10|     42|    case .middle:
   11|      0|      self = .byTruncatingMiddle
   12|     42|    @unknown default:
   13|      0|      self = .byWordWrapping
   14|     42|    }
   15|     42|  }
   16|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/AttributedText/Sources/AttributedText/TextSizeViewModel.swift:
    1|       |import SwiftUI
    2|       |
    3|       |final class TextSizeViewModel: ObservableObject {
    4|       |  @Published var textSize: CGSize?
    5|       |
    6|     42|  func didUpdateTextView(_ textView: AttributedTextImpl.TextView) {
    7|     42|    textSize = textView.intrinsicContentSize
    8|     42|  }
    9|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/CodeEditor.swift:
    1|       |//
    2|       |//  CodeEditor.swift
    3|       |//
    4|       |//  Created by Manuel M T Chakravarty on 23/08/2020.
    5|       |//
    6|       |//  SwiftUI 'CodeEditor' view
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |
   11|       |/// SwiftUI code editor based on TextKit.
   12|       |///
   13|       |/// SwiftUI `Environment`:
   14|       |/// * Environment value `codeEditorTheme`: determines the code highlighting theme to use
   15|       |/// * Text-related values: affect the rendering of message views
   16|       |///
   17|       |public struct CodeEditor {
   18|       |
   19|       |  /// Specification of the editor layout.
   20|       |  ///
   21|       |  public struct LayoutConfiguration: Equatable {
   22|       |
   23|       |    /// Show the minimap if possible. (Currently only supported on macOS.)
   24|       |    ///
   25|       |    public let showMinimap: Bool
   26|       |
   27|       |    /// Creates a layout configuration.
   28|       |    ///
   29|       |    /// - Parameter showMinimap: Whether to show the minimap if possible. It may not be possible on all supported OSes.
   30|       |    ///
   31|      0|    public init(showMinimap: Bool) {
   32|      0|      self.showMinimap = showMinimap
   33|      0|    }
   34|       |
   35|       |    public static let standard = LayoutConfiguration(showMinimap: true)
   36|       |  }
   37|       |
   38|       |  /// Specification of a text editing location; i.e., text selection and scroll position.
   39|       |  ///
   40|       |  public struct Location {
   41|       |
   42|       |    /// Specification of a list of selection ranges.
   43|       |    ///
   44|       |    /// * A range with a zero length indicates an insertion point.
   45|       |    /// * An empty array, corresponds to an insertion point at position 0.
   46|       |    /// * On iOS, this can only always be one range.
   47|       |    ///
   48|       |    public var selections: [NSRange]
   49|       |
   50|       |    /// The editor vertical scroll position. The value is between 0 and 1, which represent the completely scrolled up
   51|       |    /// and down position, respectively.
   52|       |    ///
   53|       |    public var verticalScrollFraction: CGFloat
   54|       |
   55|      0|    public init(selections: [NSRange], verticalScrollFraction: CGFloat) {
   56|      0|      self.selections             = selections
   57|      0|      self.verticalScrollFraction = verticalScrollFraction
   58|      0|    }
   59|       |
   60|      0|    public init() {
   61|      0|      self.init(selections: [NSRange(location: 0, length: 0)], verticalScrollFraction: 0)
   62|      0|    }
   63|       |  }
   64|       |
   65|       |  let language: LanguageConfiguration
   66|       |  let layout  : LayoutConfiguration
   67|       |
   68|       |  @Binding private var text:     String
   69|       |  @Binding private var location: Location
   70|       |  @Binding private var messages: Set<Located<Message>>
   71|       |
   72|       |  /// Creates a fully configured code editor.
   73|       |  ///
   74|       |  /// - Parameters:
   75|       |  ///   - text: Binding to the edited text.
   76|       |  ///   - location: Optional binding to the current edit location.
   77|       |  ///   - messages: Binding to the messages reported at the appropriate lines of the edited text. NB: Messages
   78|       |  ///               processing and display is relatively expensive. Hence, there should only be a limited number of
   79|       |  ///               simultaneous messages and they shouldn't change to frequently.
   80|       |  ///   - language: Language configuration for highlighting and similar.
   81|       |  ///   - layout: Layout configuration determining the visible elements of the editor view.
   82|       |  ///
   83|       |  public init(text:     Binding<String>,
   84|       |              location: Binding<Location>? = nil,
   85|       |              messages: Binding<Set<Located<Message>>>,
   86|       |              language: LanguageConfiguration = .none,
   87|       |              layout:   LayoutConfiguration = .standard)
   88|      0|  {
   89|      0|    self._text     = text
   90|      0|    self._location = location ?? Binding {  Location() } set: { _ in }
   91|      0|    self._messages = messages
   92|      0|    self.language  = language
   93|      0|    self.layout    = layout
   94|      0|  }
   95|       |
   96|       |  public class _Coordinator {
   97|       |    @Binding fileprivate var text:     String
   98|       |    @Binding fileprivate var location: Location
   99|       |
  100|       |    /// In order to avoid update cycles, where view code tries to update SwiftUI state variables (such as the view's
  101|       |    /// bindings) during a SwiftUI view update, we use `updatingView` as a flag that indicates whether the view is
  102|       |    /// being updated, and hence, whether state updates ought to be avoided or delayed.
  103|       |    ///
  104|       |    fileprivate var updatingView = false
  105|       |
  106|       |    /// This is the last observed value of `messages`, to enable us to compute the difference in the next update.
  107|       |    ///
  108|      0|    fileprivate var lastMessages: Set<Located<Message>> = Set()
  109|       |
  110|      0|    init(_ text: Binding<String>, _ location: Binding<Location>) {
  111|      0|      self._text     = text
  112|      0|      self._location = location
  113|      0|    }
  114|       |  }
  115|       |}
  116|       |
  117|       |#if os(iOS)
  118|       |
  119|       |// MARK: -
  120|       |// MARK: UIKit version
  121|       |
  122|       |extension CodeEditor: UIViewRepresentable {
  123|       |
  124|       |  public func makeUIView(context: Context) -> UITextView {
  125|       |    let codeView = CodeView(frame: CGRect(x: 0, y: 0, width: 100, height: 40),
  126|       |                            with: language,
  127|       |                            viewLayout: layout,
  128|       |                            theme: context.environment.codeEditorTheme)
  129|       |
  130|       |    codeView.text = text
  131|       |    if let delegate = codeView.delegate as? CodeViewDelegate {
  132|       |
  133|       |      delegate.textDidChange      = context.coordinator.textDidChange
  134|       |      delegate.selectionDidChange = { textView in
  135|       |        selectionDidChange(textView)
  136|       |        context.coordinator.selectionDidChange(textView)
  137|       |      }
  138|       |      delegate.didScroll = context.coordinator.scrollPositionDidChange
  139|       |
  140|       |    }
  141|       |    codeView.selectedRange = location.selections.first ?? NSRange(location: 0, length: 0)
  142|       |
  143|       |    // We can't set the scroll position right away as the views are not properly sized yet. Thus, this needs to be
  144|       |    // delayed.
  145|       |    // TODO: The scroll fraction assignment still happens to soon if the initialisisation takes a long time, because we loaded a large file. It be better if we could deterministically determine when initialisation is entirely finished and then set the scroll fraction at that point.
  146|       |    DispatchQueue.main.async {
  147|       |      codeView.verticalScrollFraction = location.verticalScrollFraction
  148|       |    }
  149|       |
  150|       |    // Report the initial message set
  151|       |    DispatchQueue.main.async { updateMessages(in: codeView, with: context) }
  152|       |
  153|       |    return codeView
  154|       |  }
  155|       |
  156|       |  public func updateUIView(_ textView: UITextView, context: Context) {
  157|       |    guard let codeView = textView as? CodeView else { return }
  158|       |    context.coordinator.updatingView = true
  159|       |
  160|       |    let theme     = context.environment.codeEditorTheme,
  161|       |        selection = location.selections.first ?? NSRange(location: 0, length: 0)
  162|       |
  163|       |    updateMessages(in: codeView, with: context)
  164|       |    if text != textView.text { textView.text = text }  // Hoping for the string comparison fast path...
  165|       |    if selection != codeView.selectedRange { codeView.selectedRange = selection }
  166|       |    if abs(location.verticalScrollFraction - textView.verticalScrollFraction) > 0.0001 {
  167|       |      textView.verticalScrollFraction = location.verticalScrollFraction
  168|       |    }
  169|       |    if theme.id != codeView.theme.id { codeView.theme = theme }
  170|       |    if layout != codeView.viewLayout { codeView.viewLayout = layout }
  171|       |
  172|       |    context.coordinator.updatingView = false
  173|       |  }
  174|       |
  175|       |  public func makeCoordinator() -> Coordinator {
  176|       |    return Coordinator($text, $location)
  177|       |  }
  178|       |
  179|       |  public final class Coordinator: _Coordinator {
  180|       |
  181|       |    func textDidChange(_ textView: UITextView) {
  182|       |      guard !updatingView else { return }
  183|       |
  184|       |      if self.text != textView.text { self.text = textView.text }
  185|       |    }
  186|       |
  187|       |    func selectionDidChange(_ textView: UITextView) {
  188|       |      guard !updatingView else { return }
  189|       |
  190|       |      let newValue = [textView.selectedRange]
  191|       |      if self.location.selections != newValue { self.location.selections = newValue }
  192|       |    }
  193|       |
  194|       |    func scrollPositionDidChange(_ scrollView: UIScrollView) {
  195|       |      guard !updatingView else { return }
  196|       |
  197|       |      if abs(location.verticalScrollFraction - scrollView.verticalScrollFraction) > 0.0001 {
  198|       |        location.verticalScrollFraction = scrollView.verticalScrollFraction
  199|       |      }
  200|       |    }
  201|       |  }
  202|       |}
  203|       |
  204|       |#elseif os(macOS)
  205|       |
  206|       |// MARK: -
  207|       |// MARK: AppKit version
  208|       |
  209|       |extension CodeEditor: NSViewRepresentable {
  210|       |
  211|      0|  public func makeNSView(context: Context) -> NSScrollView {
  212|      0|
  213|      0|    // Set up scroll view
  214|      0|    let scrollView = NSScrollView(frame: CGRect(x: 0, y: 0, width: 100, height: 40))
  215|      0|    scrollView.borderType          = .noBorder
  216|      0|    scrollView.hasVerticalScroller = true
  217|      0|    scrollView.hasHorizontalRuler  = false
  218|      0|    scrollView.autoresizingMask    = [.width, .height]
  219|      0|
  220|      0|    // Set up text view with gutter
  221|      0|    let codeView = CodeView(frame: CGRect(x: 0, y: 0, width: 100, height: 40),
  222|      0|                            with: language,
  223|      0|                            viewLayout: layout,
  224|      0|                            theme: context.environment.codeEditorTheme)
  225|      0|    codeView.isVerticallyResizable   = true
  226|      0|    codeView.isHorizontallyResizable = false
  227|      0|    codeView.autoresizingMask        = .width
  228|      0|
  229|      0|    // Embed text view in scroll view
  230|      0|    scrollView.documentView = codeView
  231|      0|
  232|      0|    codeView.string = text
  233|      0|    if let delegate = codeView.delegate as? CodeViewDelegate {
  234|      0|
  235|      0|      delegate.textDidChange      = context.coordinator.textDidChange
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView0aB0V10makeNSView7contextSo08NSScrollC0C7SwiftUI0E20RepresentableContextVyACG_tFySo06NSTextC0CcAC11CoordinatorCcfu_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView0aB0V10makeNSView7contextSo08NSScrollC0C7SwiftUI0E20RepresentableContextVyACG_tFySo06NSTextC0CcAC11CoordinatorCcfu_yAMcfu0_
  ------------------
  236|      0|      delegate.selectionDidChange = { textView in
  237|      0|        selectionDidChange(textView)
  238|      0|        context.coordinator.selectionDidChange(textView)
  239|      0|      }
  240|      0|
  241|      0|    }
  242|      0|    codeView.selectedRanges = location.selections.map{ NSValue(range: $0) }
  243|      0|
  244|      0|    // We can't set the scroll position right away as the views are not properly sized yet. Thus, this needs to be
  245|      0|    // delayed.
  246|      0|    // TODO: The scroll fraction assignment still happens to soon if the initialisisation takes a long time, because we loaded a large file. It be better if we could deterministically determine when initialisation is entirely finished and then set the scroll fraction at that point.
  247|      0|    DispatchQueue.main.async {
  248|      0|      scrollView.verticalScrollFraction = location.verticalScrollFraction
  249|      0|    }
  250|      0|
  251|      0|    // The minimap needs to be vertically positioned in dependence on the scroll position of the main code view and
  252|      0|    // we need to keep track of the scroll position.
  253|      0|    context.coordinator.boundsChangedNotificationObserver
  254|      0|      = NotificationCenter.default.addObserver(forName: NSView.boundsDidChangeNotification,
  255|      0|                                               object: scrollView.contentView,
  256|      0|                                               queue: .main){ _ in
  257|      0|
  258|      0|        codeView.adjustScrollPositionOfMinimap()
  259|      0|        context.coordinator.scrollPositionDidChange(scrollView)
  260|      0|      }
  261|      0|
  262|      0|    // Report the initial message set
  263|      0|    DispatchQueue.main.async{ updateMessages(in: codeView, with: context) }
  264|      0|
  265|      0|    return scrollView
  266|      0|  }
  267|       |
  268|      0|  public func updateNSView(_ scrollView: NSScrollView, context: Context) {
  269|      0|    guard let codeView = scrollView.documentView as? CodeView else { return }
  270|      0|    context.coordinator.updatingView = true
  271|      0|    
  272|      0|    let theme                      = context.environment.codeEditorTheme,
  273|      0|        selections                 = location.selections.map{ NSValue(range: $0) }
  274|      0|
  275|      0|    updateMessages(in: codeView, with: context)
  276|      0|    if text != codeView.string { codeView.string = text }  // Hoping for the string comparison fast path...
  277|      0|    if selections != codeView.selectedRanges { codeView.selectedRanges = selections }
  278|      0|    if abs(location.verticalScrollFraction - scrollView.verticalScrollFraction) > 0.0001 {
  279|      0|      scrollView.verticalScrollFraction = location.verticalScrollFraction
  280|      0|    }
  281|      0|    if theme.id != codeView.theme.id { codeView.theme = theme }
  282|      0|    if layout != codeView.viewLayout { codeView.viewLayout = layout }
  283|      0|
  284|      0|    context.coordinator.updatingView = false
  285|      0|  }
  286|       |
  287|      0|  public func makeCoordinator() -> Coordinator {
  288|      0|    return Coordinator($text, $location)
  289|      0|  }
  290|       |
  291|       |  public final class Coordinator: _Coordinator {
  292|       |    var boundsChangedNotificationObserver: NSObjectProtocol?
  293|       |
  294|      0|    deinit {
  295|      0|      if let observer = boundsChangedNotificationObserver { NotificationCenter.default.removeObserver(observer) }
  296|      0|    }
  297|       |
  298|      0|    func textDidChange(_ textView: NSTextView) {
  299|      0|      guard !updatingView else { return }
  300|      0|
  301|      0|      if self.text != textView.string { self.text = textView.string }
  302|      0|    }
  303|       |
  304|      0|    func selectionDidChange(_ textView: NSTextView) {
  305|      0|      guard !updatingView else { return }
  306|      0|
  307|      0|      let newValue = textView.selectedRanges.map{ $0.rangeValue }
  308|      0|      if self.location.selections != newValue { self.location.selections = newValue }
  309|      0|    }
  310|       |
  311|      0|    func scrollPositionDidChange(_ scrollView: NSScrollView) {
  312|      0|      guard !updatingView else { return }
  313|      0|
  314|      0|      if abs(location.verticalScrollFraction - scrollView.verticalScrollFraction) > 0.0001 {
  315|      0|        location.verticalScrollFraction = scrollView.verticalScrollFraction
  316|      0|      }
  317|      0|    }
  318|       |  }
  319|       |}
  320|       |
  321|       |#endif
  322|       |
  323|       |
  324|       |// MARK: -
  325|       |// MARK: Shared code
  326|       |
  327|       |extension CodeEditor {
  328|       |  /// Update messages for a code view in the given context.
  329|       |  ///
  330|      0|  private func updateMessages(in codeView: CodeView, with context: Context) {
  331|      0|    update(oldMessages: context.coordinator.lastMessages, to: messages, in: codeView)
  332|      0|    context.coordinator.lastMessages = messages
  333|      0|  }
  334|       |
  335|       |  /// Update the message set of the given code view.
  336|       |  ///
  337|       |  private func update(oldMessages: Set<Located<Message>>,
  338|       |                      to updatedMessages: Set<Located<Message>>,
  339|       |                      in codeView: CodeView)
  340|      0|  {
  341|      0|    let messagesToAdd    = updatedMessages.subtracting(oldMessages),
  342|      0|        messagesToRemove = oldMessages.subtracting(updatedMessages)
  343|      0|
  344|      0|    for message in messagesToRemove { codeView.retract(message: message.entity) }
  345|      0|    for message in messagesToAdd    { codeView.report(message: message) }
  346|      0|  }
  347|       |}
  348|       |
  349|       |/// Environment key for the current code editor theme.
  350|       |///
  351|       |public struct CodeEditorTheme: EnvironmentKey {
  352|       |  public static var defaultValue: Theme = Theme.defaultLight
  353|       |}
  354|       |
  355|       |extension EnvironmentValues {
  356|       |  /// The current code editor theme.
  357|       |  ///
  358|       |  public var codeEditorTheme: Theme {
  359|      0|    get { self[CodeEditorTheme.self] }
  360|      0|    set { self[CodeEditorTheme.self] = newValue }
  361|       |  }
  362|       |}
  363|       |
  364|       |extension CodeEditor.Location: RawRepresentable, Codable {
  365|       |
  366|      0|  public init?(rawValue: String) {
  367|      0|
  368|      0|    func parseNSRange(lexeme: String) -> NSRange? {
  369|      0|      let components = lexeme.components(separatedBy: ":")
  370|      0|      guard components.count == 2,
  371|      0|            let location = Int(components[0]),
  372|      0|            let length   = Int(components[1])
  373|      0|      else { return nil }
  374|      0|      return NSRange(location: location, length: length)
  375|      0|    }
  376|      0|
  377|      0|    let components = rawValue.components(separatedBy: "|")
  378|      0|    if components.count == 2 {
  379|      0|
  380|      0|      selections             = components[0].components(separatedBy: ";").compactMap{ parseNSRange(lexeme: $0) }
  381|      0|      verticalScrollFraction = CGFloat(Double(components[1]) ?? 0)
  382|      0|
  383|      0|    } else { self = CodeEditor.Location() }
  384|      0|  }
  385|       |
  386|      0|  public var rawValue: String {
  387|      0|    let selectionsString             = selections.map{ "\($0.location):\($0.length)" }.joined(separator: ";"),
  388|      0|        verticalScrollFractionString = String(describing: verticalScrollFraction)
  389|      0|    return selectionsString + "|" + verticalScrollFractionString
  390|      0|  }
  391|       |}
  392|       |
  393|       |
  394|       |// MARK: -
  395|       |// MARK: Previews
  396|       |
  397|       |struct CodeEditor_Previews: PreviewProvider {
  398|       |
  399|      0|  static var previews: some View {
  400|      0|    CodeEditor(text: .constant("-- Hello World!"), location: nil, messages: .constant(Set()), language: .haskell)
  401|      0|  }
  402|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/CodeStorage.swift:
    1|       |//
    2|       |//  CodeStorage.swift
    3|       |//
    4|       |//  Created by Manuel M T Chakravarty on 09/01/2021.
    5|       |//
    6|       |//  This file contains `NSTextStorage` extensions for code editing.
    7|       |
    8|       |#if os(iOS)
    9|       |
   10|       |import UIKit
   11|       |
   12|       |#elseif os(macOS)
   13|       |
   14|       |import AppKit
   15|       |
   16|       |#endif
   17|       |
   18|       |
   19|       |// MARK: -
   20|       |// MARK: `NSTextStorage` subclass
   21|       |
   22|       |// `NSTextStorage` is a class cluster; hence, we realise our subclass by decorating an embeded vanilla text storage.
   23|       |class CodeStorage: NSTextStorage {
   24|       |
   25|      0|  let textStorage: NSTextStorage = NSTextStorage()
   26|       |
   27|       |  var theme: Theme
   28|       |
   29|      0|  override var string: String { textStorage.string }
   30|       |
   31|      0|  init(theme: Theme) {
   32|      0|    self.theme = theme
   33|      0|    super.init()
   34|      0|  }
   35|       |
   36|      0|  required init?(coder: NSCoder) {
   37|      0|    fatalError("init(coder:) has not been implemented")
   38|      0|  }
   39|       |
   40|       |  #if os(macOS)
   41|      0|  required init?(pasteboardPropertyList propertyList: Any, ofType type: NSPasteboard.PasteboardType) {
   42|      0|    fatalError("init(pasteboardPropertyList:ofType:) has not been implemented")
   43|      0|  }
   44|       |  #endif
   45|       |
   46|      0|  override func attributes(at location: Int, effectiveRange range: NSRangePointer?) -> [NSAttributedString.Key : Any] {
   47|      0|    var attributes       = textStorage.attributes(at: location, effectiveRange: range)
   48|      0|    var foregroundColour = theme.textColour
   49|      0|
   50|      0|    // Translate attributes indicating text highlighting to the foreground colour determined by the current theme.
   51|      0|    if attributes[.comment] != nil { foregroundColour = theme.commentColour }
   52|      0|    else if let tokenAttr = attributes[.token] as? TokenAttribute<LanguageConfiguration.Token> {
   53|      0|
   54|      0|      switch tokenAttr.token {
   55|      0|      case .string:     foregroundColour = theme.stringColour
   56|      0|      case .character:  foregroundColour = theme.characterColour
   57|      0|      case .number:     foregroundColour = theme.numberColour
   58|      0|      case .identifier: foregroundColour = theme.identifierColour
   59|      0|      case .keyword:    foregroundColour = theme.keywordColour
   60|      0|      default: ()
   61|      0|      }
   62|      0|    }
   63|      0|
   64|      0|    attributes[.foregroundColor] = foregroundColour
   65|      0|    return attributes
   66|      0|  }
   67|       |
   68|       |  // Extended to handle auto-deletion of adjcent matching brackets
   69|      0|  override func replaceCharacters(in range: NSRange, with str: String) {
   70|      0|
   71|      0|    beginEditing()
   72|      0|
   73|      0|    // We are deleting one character => check whether it is a one-character bracket and if so also delete its matching
   74|      0|    // bracket if it is directly adjascent
   75|      0|    if range.length == 1 && str == "",
   76|      0|       let token = tokenAttribute(at: range.location),
   77|      0|       let language = (delegate as? CodeStorageDelegate)?.language
   78|      0|    {
   79|      0|
   80|      0|      let isOpen    = token.token.isOpenBracket,
   81|      0|          isBracket = isOpen || token.token.isCloseBracket,
   82|      0|          isSafe    = (isOpen && range.location + 1 < string.utf16.count) || range.location > 0,
   83|      0|          offset    = isOpen ? 1 : -1
   84|      0|      if isBracket && isSafe && language.lexeme(of: token.token)?.count == 1 &&
   85|      0|          tokenAttribute(at: range.location + offset)?.token == token.token.matchingBracket
   86|      0|      {
   87|      0|
   88|      0|        let extendedRange = NSRange(location: isOpen ? range.location : range.location - 1, length: 2)
   89|      0|        textStorage.replaceCharacters(in: extendedRange, with: "")
   90|      0|        edited(.editedCharacters, range: extendedRange, changeInLength: -2)
   91|      0|        setInsertionPointAfterDeletion(of: extendedRange)
   92|      0|
   93|      0|      } else {
   94|      0|
   95|      0|        textStorage.replaceCharacters(in: range, with: str)
   96|      0|        edited(.editedCharacters, range: range, changeInLength: (str as NSString).length - range.length)
   97|      0|
   98|      0|      }
   99|      0|
  100|      0|    } else {
  101|      0|
  102|      0|      textStorage.replaceCharacters(in: range, with: str)
  103|      0|      edited(.editedCharacters, range: range, changeInLength: (str as NSString).length - range.length)
  104|      0|
  105|      0|    }
  106|      0|    endEditing()
  107|      0|  }
  108|       |
  109|      0|  override func setAttributes(_ attrs: [NSAttributedString.Key : Any]?, range: NSRange) {
  110|      0|    beginEditing()
  111|      0|    textStorage.setAttributes(attrs, range: range)
  112|      0|    edited(.editedAttributes, range: range, changeInLength: 0)
  113|      0|    endEditing()
  114|      0|  }
  115|       |}
  116|       |
  117|       |
  118|       |// MARK: -
  119|       |// MARK: Custom handling of the insertion point
  120|       |
  121|       |extension CodeStorage {
  122|       |
  123|       |  /// Insert the given string, such that it safe in an ongoing insertion cycle and does leave the cursor (insertion
  124|       |  /// point) in place if the insertion is at the location of the insertion point.
  125|       |  ///
  126|      0|  func cursorInsert(string: String, at index: Int) {
  127|      0|
  128|      0|    Dispatch.DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + DispatchTimeInterval.milliseconds(10)){
  129|      0|
  130|      0|      #if os(iOS)
  131|      0|
  132|      0|      self.replaceCharacters(in: NSRange(location: index, length: 0), with: string)
  133|      0|
  134|      0|      #elseif os(macOS)
  135|      0|
  136|      0|      // Collect the text views, where we insert at the insertion point
  137|      0|      var affectedTextViews: [NSTextView] = []
  138|      0|      for layoutManager in self.layoutManagers {
  139|      0|        for textContainer in layoutManager.textContainers {
  140|      0|
  141|      0|          if let textView = textContainer.textView, textView.selectedRange() == NSRange(location: index, length: 0) {
  142|      0|            affectedTextViews.append(textView)
  143|      0|          }
  144|      0|        }
  145|      0|      }
  146|      0|
  147|      0|      self.replaceCharacters(in: NSRange(location: index, length: 0), with: string)
  148|      0|
  149|      0|      // Reset the insertion point to the original (pre-insertion) position (as it will move after the inserted text on
  150|      0|      // macOS otherwise)
  151|      0|      for textView in affectedTextViews { textView.setSelectedRange(NSRange(location: index, length: 0)) }
  152|      0|
  153|      0|      #endif
  154|      0|    }
  155|      0|  }
  156|       |
  157|       |  /// Set the insertion point of all attached text views, where the selection intersects the given range, to the start
  158|       |  /// of the range. This is safe in an editing cycle, as the selection setting is deferred until completion.
  159|       |  ///
  160|       |  /// - Parameter range: The deleted chracter range.
  161|       |  ///
  162|      0|  func setInsertionPointAfterDeletion(of range: NSRange) {
  163|      0|
  164|      0|    for layoutManager in self.layoutManagers {
  165|      0|      for textContainer in layoutManager.textContainers {
  166|      0|
  167|      0|        if let codeContainer = textContainer as? CodeContainer,
  168|      0|           let textView      = codeContainer.textView,
  169|      0|           NSIntersectionRange(textView.selectedRange, range).length != 0
  170|      0|        {
  171|      0|          Dispatch.DispatchQueue.main.async{ textView.selectedRange = NSRange(location: range.location, length: 0) }
  172|      0|        }
  173|      0|      }
  174|      0|    }
  175|      0|  }
  176|       |}
  177|       |
  178|       |
  179|       |// MARK: -
  180|       |// MARK: Token attributes
  181|       |
  182|       |extension CodeStorage {
  183|       |
  184|       |  /// Determine the token attribute value at the given character index. This will be `.tokenBody` if the indexed
  185|       |  /// character is a body character (i.e., second or later) of a token lexeme.
  186|       |  ///
  187|      0|  func tokenAttribute(at location: Int) -> TokenAttribute<LanguageConfiguration.Token>? {
  188|      0|
  189|      0|    // Use the concrete text storage here as `CodeStorage.attributes(_:at:effectiveRange:)` does attribute synthesis
  190|      0|    // that we don't want here.
  191|      0|    return textStorage.attribute(.token, at: location, effectiveRange: nil)
  192|      0|      as? TokenAttribute<LanguageConfiguration.Token>
  193|      0|  }
  194|       |
  195|       |  /// Determine the type and range of the token to which the character at the given index belongs, if it is part of a
  196|       |  /// token at all.
  197|       |  ///
  198|      0|  func token(at location: Int) -> (type: LanguageConfiguration.Token, range: NSRange)? {
  199|      0|
  200|      0|    func determineTokenLength(type: LanguageConfiguration.Token, start: Int)
  201|      0|      -> (type: LanguageConfiguration.Token, range: NSRange)?
  202|      0|    {
  203|      0|      var idx = location + 1
  204|      0|      while idx < length, tokenAttribute(at: idx)?.isHead == false { idx += 1 }
  205|      0|      return (type: type, range: NSRange(location: start, length: idx - start))
  206|      0|    }
  207|      0|
  208|      0|    var idx = location
  209|      0|    while idx >= 0 && idx < length {
  210|      0|
  211|      0|      if let attribute = tokenAttribute(at: idx) {
  212|      0|
  213|      0|        if !attribute.isHead { idx -= 1 }   // still looking for the first character of the lexeme
  214|      0|        else {                              // we found the first character of a token
  215|      0|
  216|      0|          return determineTokenLength(type: attribute.token, start: idx)
  217|      0|
  218|      0|        }
  219|      0|      } else { return nil }   // no token (head) attribute => character is not part of a token lexeme
  220|      0|    }
  221|      0|    return nil      // this shouldn't happen...
  222|      0|  }
  223|       |
  224|       |  /// Executes the specified closure for each token in the given range.
  225|       |  ///
  226|       |  /// - Parameters:
  227|       |  ///   - enumerationRange: The range overwhich tokens are enumerated.
  228|       |  ///   - reverseEnumeration: Pass `true` if the enumeration should proceed in reverse.
  229|       |  ///   - block: The closure to apply to the token types and ranges found.
  230|       |  ///
  231|       |  /// See `NSAttributedString.enumerateAttribute(_:in:options:using:)` for further details of the parameters.
  232|       |  ///
  233|       |  func enumerateTokens(in enumerationRange: NSRange,
  234|       |                       reverse reverseEnumeration: Bool = false,
  235|       |                       using block: (LanguageConfiguration.Token, NSRange, UnsafeMutablePointer<ObjCBool>) -> Void)
  236|      0|  {
  237|      0|    let opts: NSAttributedString.EnumerationOptions = reverseEnumeration ? [.longestEffectiveRangeNotRequired, .reverse]
  238|      0|                                                                         : [.longestEffectiveRangeNotRequired]
  239|      0|    enumerateAttribute(.token, in: enumerationRange, options: opts){ (value, range, stop) in
  240|      0|
  241|      0|      // we are only interested in non-token body matches
  242|      0|      guard let tokenType = value as? TokenAttribute<LanguageConfiguration.Token>, tokenType.isHead else { return }
  243|      0|
  244|      0|      theSwitch: switch range.length {
  245|      0|      case 0:
  246|      0|        break
  247|      0|
  248|      0|      case 1:   // we report one token (that possibly extents across mutliple characters
  249|      0|        guard let theToken = token(at: range.location) else { break theSwitch }
  250|      0|        block(theToken.type, theToken.range, stop)
  251|      0|
  252|      0|      default:  // we report as many one-character tokens as the length of the `range` specifies
  253|      0|        guard let theRange: Range<Int> = Range(range) else { break theSwitch }
  254|      0|
  255|      0|        forLoop: for idx in reverseEnumeration ? theRange.reversed() : Array(theRange) {
  256|      0|
  257|      0|          block(tokenType.token, NSRange(location: idx, length: 1), stop)
  258|      0|          if stop.pointee.boolValue { break forLoop }
  259|      0|
  260|      0|        }
  261|      0|      }
  262|      0|    }
  263|      0|  }
  264|       |
  265|       |  /// If there is a bracket at the given location, return its matching bracket's location if it exists and is within
  266|       |  /// the given range.
  267|       |  ///
  268|       |  /// - Parameters:
  269|       |  ///   - location: Location of the original bracket (maybe opening or closing).
  270|       |  ///   - range: Range of locations to consider for the matching bracket.
  271|       |  /// - Returns: Character range of the lexeme of the matching bracket if it exists in the given `range`.
  272|       |  ///
  273|      0|  func matchingBracket(forLocationAt location: Int, in range: NSRange) -> NSRange? {
  274|      0|    guard let bracketToken = token(at: location),
  275|      0|          bracketToken.type.isOpenBracket || bracketToken.type.isCloseBracket
  276|      0|    else { return nil }
  277|      0|
  278|      0|    let matchingBracketTokenType = bracketToken.type.matchingBracket
  279|      0|    let searchRange: NSRange
  280|      0|    if bracketToken.type.isOpenBracket {
  281|      0|
  282|      0|      // searching to the right
  283|      0|      searchRange = NSRange(location: location + 1, length: max(NSMaxRange(range) - location - 1, 0))
  284|      0|
  285|      0|    } else {
  286|      0|
  287|      0|      // searching to the left
  288|      0|      searchRange = NSRange(location: range.location, length: max(location - range.location, 0))
  289|      0|
  290|      0|    }
  291|      0|
  292|      0|    var level                   = 1
  293|      0|    var matchingRange: NSRange? = nil
  294|      0|    enumerateTokens(in: searchRange, reverse: bracketToken.type.isCloseBracket){ (tokenType, range, stop) in
  295|      0|
  296|      0|      if tokenType == bracketToken.type { level += 1 }  // nesting just got deeper
  297|      0|      else if tokenType == matchingBracketTokenType {   // matching bracket found
  298|      0|
  299|      0|        if level > 1 { level -= 1 }     // but we are not yet at the topmost nesting level
  300|      0|        else {                          // this is the one actually matching the original bracket
  301|      0|
  302|      0|          matchingRange = range
  303|      0|          stop.pointee = true
  304|      0|
  305|      0|        }
  306|      0|      }
  307|      0|    }
  308|      0|    return matchingRange
  309|      0|  }
  310|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/CodeStorageDelegate.swift:
    1|       |//
    2|       |//  CodeStorageDelegate.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 29/09/2020.
    6|       |//
    7|       |//  'NSTextStorageDelegate' for code views compute, collect, store, and update additional information about the text
    8|       |//  stored in the 'NSTextStorage' that they serve. This is needed to quickly navigate the text (e.g., at which character
    9|       |//  position does a particular line start) and to support code-specific rendering (e.g., syntax highlighting).
   10|       |
   11|       |// FIXME: the aliases ought to be moved to some central place for os impedance matching
   12|       |#if os(iOS)
   13|       |import UIKit
   14|       |#elseif os(macOS)
   15|       |import AppKit
   16|       |#endif
   17|       |
   18|       |
   19|       |// MARK: -
   20|       |// MARK: Visual debugging support
   21|       |
   22|       |// FIXME: It should be possible to enable this via a defaults setting.
   23|       |private let visualDebugging               = false
   24|       |private let visualDebuggingEditedColour   = OSColor(red: 0.5, green: 1.0, blue: 0.5, alpha: 0.3)
   25|       |private let visualDebuggingLinesColour    = OSColor(red: 0.5, green: 0.5, blue: 1.0, alpha: 0.3)
   26|       |private let visualDebuggingTrailingColour = OSColor(red: 1.0, green: 0.5, blue: 0.5, alpha: 0.3)
   27|       |private let visualDebuggingTokenColour    = OSColor(red: 1.0, green: 0.0, blue: 0.0, alpha: 0.5)
   28|       |
   29|       |
   30|       |// MARK: -
   31|       |// MARK: Tokens
   32|       |
   33|       |// Custom token attributes
   34|       |//
   35|       |extension NSAttributedString.Key {
   36|       |
   37|       |  /// Custom attribute marking comment ranges.
   38|       |  ///
   39|       |  static let comment = NSAttributedString.Key("comment")
   40|       |
   41|       |  /// Custom attribute marking lexical tokens.
   42|       |  ///
   43|       |  static let token = NSAttributedString.Key("token")
   44|       |}
   45|       |
   46|       |/// The supported comment styles.
   47|       |///
   48|       |enum CommentStyle {
   49|       |  case singleLineComment
   50|       |  case nestedComment
   51|       |}
   52|       |
   53|       |/// Information that is tracked on a line by line basis in the line map.
   54|       |///
   55|       |/// NB: We need the comment depth at the start and the end of each line as, during editing, lines are replaced in the
   56|       |///     line map before comment attributes are recalculated. During this replacement, we lose the line info of all the
   57|       |///     replaced lines.
   58|       |///
   59|       |struct LineInfo {
   60|       |
   61|       |  /// Structure characterising a bundle of messages reported for a single line. It features a stable identity to be able
   62|       |  /// to associate display information in separate structures.
   63|       |  ///
   64|       |  /// NB: We don't identify a message bundle by the line number on which it appears, because edits further up can
   65|       |  ///     increase and decrease the line number of a given bundle. We need a stable identifier.
   66|       |  ///
   67|       |  struct MessageBundle: Identifiable {
   68|       |    let id:       UUID
   69|       |    var messages: [Message]
   70|       |
   71|      0|    init(messages: [Message]) {
   72|      0|      self.id       = UUID()
   73|      0|      self.messages = messages
   74|      0|    }
   75|       |  }
   76|       |
   77|       |  var commentDepthStart: Int   // nesting depth for nested comments at the start of this line
   78|       |  var commentDepthEnd:   Int   // nesting depth for nested comments at the end of this line
   79|       |
   80|       |  // FIXME: we are not currently using the following three variables (they are maintained, but they are never useful).
   81|       |  var roundBracketDiff:  Int   // increase or decrease of the nesting level of round brackets on this line
   82|       |  var squareBracketDiff: Int   // increase or decrease of the nesting level of square brackets on this line
   83|       |  var curlyBracketDiff:  Int   // increase or decrease of the nesting level of curly brackets on this line
   84|       |
   85|       |  /// The messages reported for this line.
   86|       |  ///
   87|       |  /// NB: The bundle may be non-nil, but still contain no messages (after all messages have been removed).
   88|       |  ///
   89|       |  var messages: MessageBundle? = nil
   90|       |}
   91|       |
   92|       |
   93|       |// MARK: -
   94|       |// MARK: Delegate class
   95|       |
   96|       |class CodeStorageDelegate: NSObject, NSTextStorageDelegate {
   97|       |
   98|       |  let language:          LanguageConfiguration
   99|       |  private let tokeniser: Tokeniser<LanguageConfiguration.Token, LanguageConfiguration.State>? // cache the tokeniser
  100|       |
  101|      0|  private(set) var lineMap = LineMap<LineInfo>(string: "")
  102|       |
  103|       |  /// The message bundle IDs that got invalidated by the last editing operation because the lines to which they were
  104|       |  /// attached got changed.
  105|       |  ///
  106|      0|  private(set) var lastEvictedMessageIDs: [LineInfo.MessageBundle.ID] = []
  107|       |
  108|       |  /// If the last text change was a one-character addition, which completed a token, then that token is remembered here
  109|       |  /// together with its range until the next text change.
  110|       |  ///
  111|       |  private var lastTypedToken: (type: LanguageConfiguration.Token, range: NSRange)?
  112|       |
  113|       |  /// Flag that indicates that the current editing round is for a one-character addition to the text. This property
  114|       |  /// needs to be determined before attribute fixing and the like.
  115|       |  ///
  116|       |  private var processingOneCharacterEdit: Bool?
  117|       |
  118|      0|  init(with language: LanguageConfiguration) {
  119|      0|    self.language  = language
  120|      0|    self.tokeniser = NSMutableAttributedString.tokeniser(for: language.tokenDictionary)
  121|      0|    super.init()
  122|      0|  }
  123|       |
  124|       |  func textStorage(_ textStorage: NSTextStorage,
  125|       |                   willProcessEditing editedMask: TextStorageEditActions,
  126|       |                   range editedRange: NSRange,
  127|       |                   changeInLength delta: Int)
  128|      0|  {
  129|      0|    processingOneCharacterEdit = delta == 1 && editedRange.length == 1
  130|      0|  }
  131|       |
  132|       |  // NB: The choice of `didProcessEditing` versus `willProcessEditing` is crucial on macOS. The reason is that
  133|       |  //     the text storage performs "attribute fixing" between `willProcessEditing` and `didProcessEditing`. If we
  134|       |  //     modify attributes outside of `editedRange` (which we often do), then this triggers the movement of the
  135|       |  //     current selection to the end of the entire text.
  136|       |  //
  137|       |  //     By doing the highlighting work *after* attribute fixing, we avoid affecting the selection. However, it now
  138|       |  //     becomes *very* important to (a) refrain from any character changes and (b) from any attribute changes that
  139|       |  //     result in attributes that need to be fixed; otherwise, we end up with an inconsistent attributed string.
  140|       |  //     (In particular, changing the font attribute at this point is potentially dangerous.)
  141|       |  func textStorage(_ textStorage: NSTextStorage,
  142|       |                   didProcessEditing editedMask: TextStorageEditActions,
  143|       |                   range editedRange: NSRange,  // Apple docs are incorrect here: this is the range *after* editing
  144|       |                   changeInLength delta: Int)
  145|      0|  {
  146|      0|    guard let codeStorage = textStorage as? CodeStorage else { return }
  147|      0|
  148|      0|    // If only attributes change, the line map and syntax highlighting remains the same => nothing for us to do
  149|      0|    guard editedMask.contains(.editedCharacters) else { return }
  150|      0|
  151|      0|    if visualDebugging {
  152|      0|      let wholeTextRange = NSRange(location: 0, length: textStorage.length)
  153|      0|      textStorage.removeAttribute(.backgroundColor, range: wholeTextRange)
  154|      0|      textStorage.removeAttribute(.underlineColor, range: wholeTextRange)
  155|      0|      textStorage.removeAttribute(.underlineStyle, range: wholeTextRange)
  156|      0|    }
  157|      0|
  158|      0|    // Determine the ids of message bundles that are removed by this edit.
  159|      0|    let lines = lineMap.linesAffected(by: editedRange, changeInLength: delta)
  160|      0|    lastEvictedMessageIDs = lines.compactMap{ lineMap.lookup(line: $0)?.info?.messages?.id  }
  161|      0|
  162|      0|    lineMap.updateAfterEditing(string: textStorage.string, range: editedRange, changeInLength: delta)
  163|      0|    tokeniseAttributesFor(range: editedRange, in: textStorage)
  164|      0|
  165|      0|    if visualDebugging {
  166|      0|      textStorage.addAttribute(.backgroundColor, value: visualDebuggingEditedColour, range: editedRange)
  167|      0|    }
  168|      0|
  169|      0|    // If a single character was added, process token-level completion steps.
  170|      0|    if delta == 1 && processingOneCharacterEdit == true {
  171|      0|      tokenCompletion(for: codeStorage, at: editedRange.location)
  172|      0|    }
  173|      0|    processingOneCharacterEdit = nil
  174|      0|  }
  175|       |}
  176|       |
  177|       |
  178|       |// MARK: -
  179|       |// MARK: Tokenisation
  180|       |
  181|       |extension CodeStorageDelegate {
  182|       |
  183|       |  /// Tokenise the substring of the given text storage that contains the specified lines and set token attributes as
  184|       |  /// needed.
  185|       |  ///
  186|       |  /// - Parameters:
  187|       |  ///   - originalRange: The character range that contains all characters that have changed.
  188|       |  ///   - textStorage: The text storage that contains the changed characters.
  189|       |  ///
  190|       |  /// Tokenisation happens at line granularity. Hence, the range is correspondingly extended.
  191|       |  ///
  192|      0|  func tokeniseAttributesFor(range originalRange: NSRange, in textStorage: NSTextStorage) {
  193|      0|    guard let codeStorage = textStorage as? CodeStorage else { return }
  194|      0|
  195|      0|    func tokeniseAndUpdateInfo(for line: Int, commentDepth: inout Int, lastCommentStart: inout Int?) {
  196|      0|
  197|      0|      if let lineRange = lineMap.lookup(line: line)?.range {
  198|      0|
  199|      0|        // Remove any existing `.comment` attribute on this line
  200|      0|        textStorage.removeAttribute(.comment, range: lineRange)
  201|      0|
  202|      0|        // Collect all tokens on this line.
  203|      0|        // (NB: In the block, we are not supposed to mutate outside the attribute range; hence, we only collect tokens.)
  204|      0|        var tokens = Array<(token: LanguageConfiguration.Token, range: NSRange)>()
  205|      0|        codeStorage.enumerateTokens(in: lineRange){ (tokenValue, range, _) in
  206|      0|
  207|      0|          tokens.append((token: tokenValue, range: range))
  208|      0|
  209|      0|          if visualDebugging {
  210|      0|
  211|      0|            textStorage.addAttribute(.underlineColor, value: visualDebuggingTokenColour, range: range)
  212|      0|            if range.length > 0 {
  213|      0|              textStorage.addAttribute(.underlineStyle,
  214|      0|                                       value: NSNumber(value: NSUnderlineStyle.double.rawValue),
  215|      0|                                       range: NSRange(location: range.location, length: 1))
  216|      0|            }
  217|      0|            if range.length > 1 {
  218|      0|              textStorage.addAttribute(.underlineStyle,
  219|      0|                                       value: NSNumber(value: NSUnderlineStyle.single.rawValue),
  220|      0|                                       range: NSRange(location: range.location + 1, length: range.length - 1))
  221|      0|            }
  222|      0|          }
  223|      0|        }
  224|      0|
  225|      0|        var lineInfo = LineInfo(commentDepthStart: commentDepth,
  226|      0|                                commentDepthEnd: 0,
  227|      0|                                roundBracketDiff: 0,
  228|      0|                                squareBracketDiff: 0,
  229|      0|                                curlyBracketDiff: 0)
  230|      0|        tokenLoop: for token in tokens {
  231|      0|
  232|      0|          switch token.token {
  233|      0|
  234|      0|          case .roundBracketOpen:
  235|      0|            lineInfo.roundBracketDiff += 1
  236|      0|
  237|      0|          case .roundBracketClose:
  238|      0|            lineInfo.roundBracketDiff -= 1
  239|      0|
  240|      0|          case .squareBracketOpen:
  241|      0|            lineInfo.squareBracketDiff += 1
  242|      0|
  243|      0|          case .squareBracketClose:
  244|      0|            lineInfo.squareBracketDiff -= 1
  245|      0|
  246|      0|          case .curlyBracketOpen:
  247|      0|            lineInfo.curlyBracketDiff += 1
  248|      0|
  249|      0|          case .curlyBracketClose:
  250|      0|            lineInfo.curlyBracketDiff -= 1
  251|      0|
  252|      0|          case .singleLineComment:  // set comment attribute from token start token to the end of this line
  253|      0|            let commentStart = token.range.location,
  254|      0|                commentRange = NSRange(location: commentStart, length: NSMaxRange(lineRange) - commentStart)
  255|      0|            textStorage.addAttribute(.comment, value: CommentStyle.singleLineComment, range: commentRange)
  256|      0|            break tokenLoop   // the rest of the tokens are ignored as they are commented out and we'll rescan on change
  257|      0|
  258|      0|          case .nestedCommentOpen:
  259|      0|            if commentDepth == 0 { lastCommentStart = token.range.location }    // start of an outermost nested comment
  260|      0|            commentDepth += 1
  261|      0|
  262|      0|          case .nestedCommentClose:
  263|      0|            if commentDepth > 0 {
  264|      0|
  265|      0|              commentDepth -= 1
  266|      0|
  267|      0|              // If we just closed an outermost nested comment, attribute the comment range
  268|      0|              if let start = lastCommentStart, commentDepth == 0
  269|      0|              {
  270|      0|                textStorage.addAttribute(.comment,
  271|      0|                                         value: CommentStyle.nestedComment,
  272|      0|                                         range: NSRange(location: start, length: NSMaxRange(token.range) - start))
  273|      0|                lastCommentStart = nil
  274|      0|              }
  275|      0|            }
  276|      0|
  277|      0|          default:
  278|      0|            break
  279|      0|          }
  280|      0|        }
  281|      0|
  282|      0|        // If the line ends while we are still in an open comment, we need a comment attribute up to the end of the line
  283|      0|        if let start = lastCommentStart, commentDepth > 0 {
  284|      0|
  285|      0|          textStorage.addAttribute(.comment,
  286|      0|                                   value: CommentStyle.nestedComment,
  287|      0|                                   range: NSRange(location: start, length: NSMaxRange(lineRange) - start))
  288|      0|
  289|      0|        }
  290|      0|
  291|      0|        // Retain computed line information
  292|      0|        lineInfo.commentDepthEnd = commentDepth
  293|      0|        lineMap.setInfoOf(line: line, to: lineInfo)
  294|      0|      }
  295|      0|    }
  296|      0|
  297|      0|    guard let tokeniser = tokeniser else { return }
  298|      0|
  299|      0|    // Extend the range to line boundaries. Because we cannot parse partial tokens, we at least need to go to word
  300|      0|    // boundaries, but because we have line bounded constructs like comments to the end of the line and it is easier to
  301|      0|    // determine the line boundaries, we use those.
  302|      0|    let lines = lineMap.linesContaining(range: originalRange),
  303|      0|        range = lineMap.charRangeOf(lines: lines)
  304|      0|
  305|      0|    // Determine the comment depth as determined by the preceeeding code. This is needed to determine the correct
  306|      0|    // tokeniser and to compute attribute information from the resulting tokens. NB: We need to get that info from
  307|      0|    // the previous line, because the line info of the current line was set to `nil` during updating the line map.
  308|      0|    let initialCommentDepth  = lineMap.lookup(line: lines.startIndex - 1)?.info?.commentDepthEnd ?? 0
  309|      0|
  310|      0|    // Set the token attribute in range.
  311|      0|    let initialTokeniserState: LanguageConfiguration.State
  312|      0|      = initialCommentDepth > 0 ? .tokenisingComment(initialCommentDepth) : .tokenisingCode
  313|      0|    textStorage.tokeniseAndSetTokenAttribute(attribute: .token,
  314|      0|                                             with: tokeniser,
  315|      0|                                             state: initialTokeniserState,
  316|      0|                                             in: range)
  317|      0|
  318|      0|    // For all lines in range, collect the tokens line by line, while keeping track of nested comments
  319|      0|    //
  320|      0|    // - `lastCommentStart` keeps track of the last start of an *outermost* nested comment.
  321|      0|    //
  322|      0|    var commentDepth     = initialCommentDepth
  323|      0|    var lastCommentStart = initialCommentDepth > 0 ? lineMap.lookup(line: lines.startIndex)?.range.location : nil
  324|      0|    for line in lines {
  325|      0|      tokeniseAndUpdateInfo(for: line, commentDepth: &commentDepth, lastCommentStart: &lastCommentStart)
  326|      0|    }
  327|      0|
  328|      0|    // Continue to re-process line by line until there is no longer a change in the comment depth before and after
  329|      0|    // re-processing
  330|      0|    //
  331|      0|    var currentLine       = lines.endIndex
  332|      0|    var highlightingRange = range
  333|      0|    trailingLineLoop: while currentLine < lineMap.lines.count {
  334|      0|
  335|      0|      if let lineEntry = lineMap.lookup(line: currentLine) {
  336|      0|
  337|      0|        // If this line has got a line info entry and the expected comment depth at the start of the line matches
  338|      0|        // the current comment depth, we reached the end of the range of lines affected by this edit => break the loop
  339|      0|        if let depth = lineEntry.info?.commentDepthStart, depth == commentDepth { break trailingLineLoop }
  340|      0|
  341|      0|        // Re-tokenise line
  342|      0|        let initialTokeniserState: LanguageConfiguration.State
  343|      0|          = commentDepth > 0 ? .tokenisingComment(commentDepth) : .tokenisingCode
  344|      0|        textStorage.tokeniseAndSetTokenAttribute(attribute: .token,
  345|      0|                                                 with: tokeniser,
  346|      0|                                                 state: initialTokeniserState,
  347|      0|                                                 in: lineEntry.range)
  348|      0|
  349|      0|        // Collect the tokens and update line info
  350|      0|        tokeniseAndUpdateInfo(for: currentLine, commentDepth: &commentDepth, lastCommentStart: &lastCommentStart)
  351|      0|
  352|      0|        // Keep track of the trailing range for debugging purpose
  353|      0|        highlightingRange = NSUnionRange(highlightingRange, lineEntry.range)
  354|      0|
  355|      0|      }
  356|      0|      currentLine += 1
  357|      0|    }
  358|      0|
  359|      0|    if visualDebugging {
  360|      0|      textStorage.addAttribute(.backgroundColor, value: visualDebuggingTrailingColour, range: highlightingRange)
  361|      0|      textStorage.addAttribute(.backgroundColor, value: visualDebuggingLinesColour, range: range)
  362|      0|    }
  363|      0|  }
  364|       |}
  365|       |
  366|       |
  367|       |// MARK: -
  368|       |// MARK: Token completion
  369|       |
  370|       |extension CodeStorageDelegate {
  371|       |
  372|       |  /// Handle token completion actions after a single character was inserted.
  373|       |  ///
  374|       |  /// - Parameters:
  375|       |  ///   - textStorage: The text storage where the edit action occured.
  376|       |  ///   - index: The location within the text storage where the single chracter was inserted.
  377|       |  ///
  378|       |  /// Any change to the `textStorage` is deferred, so that this function can also be used in the middle of an
  379|       |  /// in-progress, but not yet completed edit.
  380|       |  ///
  381|      0|  func tokenCompletion(for codeStorage: CodeStorage, at index: Int) {
  382|      0|
  383|      0|    /// If the given token is an opening bracket, return the lexeme of its matching closing bracket.
  384|      0|    ///
  385|      0|    func matchingLexemeForOpeningBracket(_ token: LanguageConfiguration.Token) -> String? {
  386|      0|      if token.isOpenBracket, let matching = token.matchingBracket, let lexeme = language.lexeme(of: matching)
  387|      0|      {
  388|      0|        return lexeme
  389|      0|      } else {
  390|      0|        return nil
  391|      0|      }
  392|      0|    }
  393|      0|
  394|      0|    /// Determine whether the ranges of the two tokens are overlapping.
  395|      0|    ///
  396|      0|    func overlapping(_ previousToken: (type: LanguageConfiguration.Token, range: NSRange),
  397|      0|                     _ currentToken: (type: LanguageConfiguration.Token, range: NSRange)?) -> Bool
  398|      0|    {
  399|      0|      if let currentToken = currentToken {
  400|      0|        return NSIntersectionRange(previousToken.range, currentToken.range).length != 0
  401|      0|      } else { return false }
  402|      0|    }
  403|      0|
  404|      0|
  405|      0|    let string             = codeStorage.string,
  406|      0|        char               = string.utf16[string.index(string.startIndex, offsetBy: index)],
  407|      0|        previousTypedToken = lastTypedToken,
  408|      0|        currentTypedToken  : (type: LanguageConfiguration.Token, range: NSRange)?
  409|      0|
  410|      0|    // Determine the token (if any) that the right now inserted character belongs to
  411|      0|    currentTypedToken = codeStorage.token(at: index)
  412|      0|
  413|      0|    lastTypedToken = currentTypedToken    // this is the default outcome, unless explicitly overridden below
  414|      0|
  415|      0|    // The just entered character is right after the previous token and it doesn't belong to a token overlapping with
  416|      0|    // the previous token
  417|      0|    if let previousToken = previousTypedToken, NSMaxRange(previousToken.range) == index,
  418|      0|       !overlapping(previousToken, currentTypedToken) {
  419|      0|
  420|      0|      let completingString: String?
  421|      0|
  422|      0|      // If the previous token was an opening bracket, we may have to autocomplete by inserting a matching closing
  423|      0|      // bracket
  424|      0|      if let matchingPreviousLexeme = matchingLexemeForOpeningBracket(previousToken.type)
  425|      0|      {
  426|      0|
  427|      0|        if let currentToken = currentTypedToken {
  428|      0|
  429|      0|          if currentToken.type == previousToken.type.matchingBracket {
  430|      0|
  431|      0|            // The current token is a matching closing bracket for the opening bracket of the last token => nothing to do
  432|      0|            completingString = nil
  433|      0|
  434|      0|          } else if let matchingCurrentLexeme = matchingLexemeForOpeningBracket(currentToken.type) {
  435|      0|
  436|      0|            // The current token is another opening bracket => insert matching closing for the current and previous
  437|      0|            // opening bracket
  438|      0|            completingString = matchingCurrentLexeme + matchingPreviousLexeme
  439|      0|
  440|      0|          } else {
  441|      0|
  442|      0|            // Insertion of a unrelated or non-bracket token => just complete the previous opening bracket
  443|      0|            completingString = matchingPreviousLexeme
  444|      0|
  445|      0|          }
  446|      0|
  447|      0|        } else {
  448|      0|
  449|      0|          // If a opening curly brace or nested comment bracket is followed by a line break, add another line break
  450|      0|          // before the matching closing bracket.
  451|      0|          if let unichar = Unicode.Scalar(char),
  452|      0|             CharacterSet.newlines.contains(unichar),
  453|      0|             previousToken.type == .curlyBracketOpen || previousToken.type == .nestedCommentOpen
  454|      0|          {
  455|      0|
  456|      0|            // Insertion of a newline after a curly bracket => complete the previous opening bracket prefixed with an extra newline
  457|      0|            completingString = String(unichar) + matchingPreviousLexeme
  458|      0|
  459|      0|          } else {
  460|      0|
  461|      0|          // Insertion of a character that doesn't complete a token => just complete the previous opening bracket
  462|      0|          completingString = matchingPreviousLexeme
  463|      0|
  464|      0|          }
  465|      0|        }
  466|      0|
  467|      0|      } else { completingString = nil }
  468|      0|
  469|      0|      // Defer inserting the completion
  470|      0|      if let string = completingString {
  471|      0|
  472|      0|        lastTypedToken = nil    // A completion renders the last token void
  473|      0|        codeStorage.cursorInsert(string: string, at: index + 1)
  474|      0|
  475|      0|      }
  476|      0|    }
  477|      0|  }
  478|       |}
  479|       |
  480|       |
  481|       |// MARK: -
  482|       |// MARK: Messages
  483|       |
  484|       |extension CodeStorageDelegate {
  485|       |
  486|       |  /// Add the given message to the line info of the line where the message is located.
  487|       |  ///
  488|       |  /// - Parameter message: The message to add.
  489|       |  /// - Returns: The message bundle to which the message was added, or `nil` if the line for which the message is
  490|       |  ///     intended doesn't exist.
  491|       |  ///
  492|       |  /// NB: Ignores messages for lines that do not exist in the line map. A message may not be added to multiple lines.
  493|       |  ///
  494|      0|  func add(message: Located<Message>) -> LineInfo.MessageBundle? {
  495|      0|    guard var info = lineMap.lookup(line: message.location.line)?.info else { return nil }
  496|      0|
  497|      0|    if info.messages != nil {
  498|      0|
  499|      0|      // Add a message to an existing message bundle for this line
  500|      0|      info.messages?.messages.append(message.entity)
  501|      0|
  502|      0|    } else {
  503|      0|
  504|      0|      // Create a new message bundle for this line with the new message
  505|      0|      info.messages = LineInfo.MessageBundle(messages: [message.entity])
  506|      0|
  507|      0|    }
  508|      0|    lineMap.setInfoOf(line: message.location.line, to: info)
  509|      0|    return info.messages
  510|      0|  }
  511|       |
  512|       |  /// Remove the given message from the line info in which it is located. This function is quite expensive.
  513|       |  ///
  514|       |  /// - Parameter message: The message to remove.
  515|       |  /// - Returns: The updated message bundle from which the message was removed together with the line where it occured,
  516|       |  ///     or `nil` if the message occurs in no line bundle.
  517|       |  ///
  518|       |  /// NB: Ignores messages that do not exist in the line map. It is considered an error if a message exists at multiple
  519|       |  ///     lines. In this case, the occurences at the first such line will be used.
  520|       |  ///
  521|      0|  func remove(message: Message) -> (LineInfo.MessageBundle, Int)? {
  522|      0|
  523|      0|    for line in lineMap.lines.indices {
  524|      0|
  525|      0|      if var info = lineMap.lines[line].info {
  526|      0|        if let idx = info.messages?.messages.firstIndex(of: message) {
  527|      0|
  528|      0|          info.messages?.messages.remove(at: idx)
  529|      0|          lineMap.setInfoOf(line: line, to: info)
  530|      0|          if let messages = info.messages { return (messages, line) } else { return nil }
  531|      0|
  532|      0|        }
  533|      0|      }
  534|      0|    }
  535|      0|    return nil
  536|      0|  }
  537|       |
  538|       |  /// Returns the message bundle associated with the given line if it exists.
  539|       |  ///
  540|       |  /// - Parameter line: The line for which we want to know the associated message bundle.
  541|       |  /// - Returns: The message bundle associated with the given line or `nil`.
  542|       |  ///
  543|       |  /// NB: In case that the line does not exist, an empty array is returned.
  544|       |  ///
  545|      0|  func messages(at line: Int) -> LineInfo.MessageBundle? { return lineMap.lookup(line: line)?.info?.messages }
  546|       |
  547|       |  /// Remove all messages associated with a given line.
  548|       |  ///
  549|       |  /// - Parameter line: The line whose messages ought ot be removed.
  550|       |  ///
  551|      0|  func removeMessages(at line: Int) {
  552|      0|    guard var info = lineMap.lookup(line: line)?.info else  { return }
  553|      0|
  554|      0|    info.messages = nil
  555|      0|    lineMap.setInfoOf(line: line, to: info)
  556|      0|  }
  557|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/CodeView.swift:
    1|       |//
    2|       |//  CodeView.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 05/05/2021.
    6|       |//
    7|       |//  This file contains both the macOS and iOS versions of the subclass for `NSTextView` and `UITextView`, respectively,
    8|       |//  which forms the heart of the code editor.
    9|       |
   10|       |import SwiftUI
   11|       |
   12|       |
   13|       |// MARK: -
   14|       |// MARK: Message info
   15|       |
   16|       |/// Information required to layout message views.
   17|       |///
   18|       |/// NB: This information is computed incrementally. We get the `lineFragementRect` from the text container during the
   19|       |///     type setting processes. This indicates that the message layout may have to change (if it was already
   20|       |///     computed), but at this point, we cannot determine the new geometry yet; hence, `geometry` will be `nil`.
   21|       |///     The `geomtry` will be determined after text layout is complete.
   22|       |///
   23|       |struct MessageInfo {
   24|       |  let view:               StatefulMessageView.HostingView
   25|       |  var lineFragementRect:  CGRect                            // The *full* line fragement rectangle (incl. message)
   26|       |  var geometry:           MessageView.Geometry?
   27|       |  var colour:             OSColor                           // The category colour of the most severe category
   28|       |
   29|       |  var topAnchorConstraint:   NSLayoutConstraint?
   30|       |  var rightAnchorConstraint: NSLayoutConstraint?
   31|       |}
   32|       |
   33|       |/// Dictionary of message views.
   34|       |///
   35|       |typealias MessageViews = [LineInfo.MessageBundle.ID: MessageInfo]
   36|       |
   37|       |
   38|       |#if os(iOS)
   39|       |
   40|       |// MARK: -
   41|       |// MARK: UIKit version
   42|       |
   43|       |/// `UITextView` with a gutter
   44|       |///
   45|       |class CodeView: UITextView {
   46|       |
   47|       |  // Delegates
   48|       |  fileprivate var codeViewDelegate:           CodeViewDelegate?
   49|       |  fileprivate var codeStorageDelegate:        CodeStorageDelegate
   50|       |  fileprivate let codeLayoutManagerDelegate = CodeLayoutManagerDelegate()
   51|       |
   52|       |  // Subviews
   53|       |  fileprivate var gutterView: GutterView?
   54|       |
   55|       |  /// The current highlighting theme
   56|       |  ///
   57|       |  var theme: Theme {
   58|       |    didSet {
   59|       |      font                                 = UIFont(name: theme.fontName, size: theme.fontSize)
   60|       |      backgroundColor                      = theme.backgroundColour
   61|       |      tintColor                            = theme.tintColour
   62|       |      (textStorage as? CodeStorage)?.theme = theme
   63|       |      gutterView?.theme                    = theme
   64|       |      setNeedsDisplay(bounds)
   65|       |    }
   66|       |  }
   67|       |
   68|       |  /// The current view layout.
   69|       |  ///
   70|       |  var viewLayout: CodeEditor.LayoutConfiguration {
   71|       |    didSet {
   72|       |      // Nothing to do, but that may change in the future
   73|       |    }
   74|       |  }
   75|       |
   76|       |  /// Keeps track of the set of message views.
   77|       |  ///
   78|       |  var messageViews: MessageViews = [:]
   79|       |
   80|       |  /// Designated initializer for code views with a gutter.
   81|       |  ///
   82|       |  init(frame: CGRect, with language: LanguageConfiguration, viewLayout: CodeEditor.LayoutConfiguration, theme: Theme) {
   83|       |
   84|       |    self.viewLayout = viewLayout
   85|       |    self.theme      = theme
   86|       |
   87|       |    // Use custom components that are gutter-aware and support code-specific editing actions and highlighting.
   88|       |    let codeLayoutManager         = CodeLayoutManager(),
   89|       |        codeContainer             = CodeContainer(),
   90|       |        codeStorage               = CodeStorage(theme: theme)
   91|       |    codeStorage.addLayoutManager(codeLayoutManager)
   92|       |    codeContainer.layoutManager = codeLayoutManager
   93|       |    codeLayoutManager.addTextContainer(codeContainer)
   94|       |    codeLayoutManager.delegate = codeLayoutManagerDelegate
   95|       |
   96|       |    codeStorageDelegate = CodeStorageDelegate(with: language)
   97|       |
   98|       |    super.init(frame: frame, textContainer: codeContainer)
   99|       |    codeContainer.textView = self
  100|       |
  101|       |    // Set basic display and input properties
  102|       |    font                   = theme.font
  103|       |    backgroundColor        = theme.backgroundColour
  104|       |    tintColor              = theme.tintColour
  105|       |    autocapitalizationType = .none
  106|       |    autocorrectionType     = .no
  107|       |    spellCheckingType      = .no
  108|       |    smartQuotesType        = .no
  109|       |    smartDashesType        = .no
  110|       |    smartInsertDeleteType  = .no
  111|       |
  112|       |    // Add the view delegate
  113|       |    codeViewDelegate = CodeViewDelegate(codeView: self)
  114|       |    delegate         = codeViewDelegate
  115|       |
  116|       |    // Add a text storage delegate that maintains a line map
  117|       |    codeStorage.delegate = self.codeStorageDelegate
  118|       |
  119|       |    // Add a gutter view
  120|       |    let gutterWidth = ceil(theme.fontSize) * 3,
  121|       |        gutterView  = GutterView(frame: CGRect(x: 0,
  122|       |                                               y: 0,
  123|       |                                               width: gutterWidth,
  124|       |                                               height: CGFloat.greatestFiniteMagnitude),
  125|       |                                 textView: self,
  126|       |                                 theme: theme,
  127|       |                                 getMessageViews: { self.messageViews })
  128|       |    addSubview(gutterView)
  129|       |    self.gutterView              = gutterView
  130|       |    codeLayoutManager.gutterView = gutterView
  131|       |  }
  132|       |
  133|       |  required init?(coder: NSCoder) {
  134|       |    fatalError("init(coder:) has not been implemented")
  135|       |  }
  136|       |
  137|       |  override func layoutSubviews() {
  138|       |    gutterView?.frame.size.height = contentSize.height
  139|       |  }
  140|       |}
  141|       |
  142|       |class CodeViewDelegate: NSObject, UITextViewDelegate {
  143|       |
  144|       |  // Hooks for events
  145|       |  //
  146|       |  var textDidChange:      ((UITextView) -> ())?
  147|       |  var selectionDidChange: ((UITextView) -> ())?
  148|       |  var didScroll:          ((UIScrollView) -> ())?
  149|       |
  150|       |  /// Caching the last set selected range.
  151|       |  ///
  152|       |  var oldSelectedRange: NSRange
  153|       |
  154|       |  init(codeView: CodeView) {
  155|       |    oldSelectedRange = codeView.selectedRange
  156|       |  }
  157|       |
  158|       |  // MARK: -
  159|       |  // MARK: UITextViewDelegate protocol
  160|       |
  161|       |  func textViewDidChange(_ textView: UITextView) { textDidChange?(textView) }
  162|       |
  163|       |  func textViewDidChangeSelection(_ textView: UITextView) {
  164|       |    guard let codeView = textView as? CodeView else { return }
  165|       |
  166|       |    selectionDidChange?(textView)
  167|       |
  168|       |    // NB: Invalidation of the two ranges needs to happen separately. If we were to union them, an insertion point
  169|       |    //     (range length = 0) at the start of a line would be absorbed into the previous line, which results in a lack
  170|       |    //     of invalidation of the line on which the insertion point is located.
  171|       |    codeView.gutterView?.invalidateGutter(forCharRange: codeView.selectedRange)
  172|       |    codeView.gutterView?.invalidateGutter(forCharRange: oldSelectedRange)
  173|       |    oldSelectedRange = textView.selectedRange
  174|       |  }
  175|       |
  176|       |  func scrollViewDidScroll(_ scrollView: UIScrollView) { didScroll?(scrollView) }
  177|       |}
  178|       |
  179|       |#elseif os(macOS)
  180|       |
  181|       |// MARK: -
  182|       |// MARK: AppKit version
  183|       |
  184|       |/// `NSTextView` with a gutter
  185|       |///
  186|       |class CodeView: NSTextView {
  187|       |
  188|       |  // Delegates
  189|      0|  fileprivate let codeViewDelegate =          CodeViewDelegate()
  190|      0|  fileprivate let codeLayoutManagerDelegate = CodeLayoutManagerDelegate()
  191|       |  fileprivate var codeStorageDelegate:        CodeStorageDelegate
  192|       |
  193|       |  // Subviews
  194|       |  var gutterView:         GutterView?
  195|       |  var minimapView:        NSTextView?
  196|       |  var minimapGutterView:  GutterView?
  197|       |  var documentVisibleBox: NSBox?
  198|       |  var minimapDividerView: NSBox?
  199|       |
  200|       |  /// Contains the line on which the insertion point was located, the last time the selection range got set (if the
  201|       |  /// selection was an insetion point at all; i.e., it's length was 0).
  202|       |  ///
  203|      0|  var oldLastLineOfInsertionPoint: Int? = 1
  204|       |
  205|       |  /// The current highlighting theme
  206|       |  ///
  207|       |  var theme: Theme {
  208|      0|    didSet {
  209|      0|      font                                 = theme.font
  210|      0|      backgroundColor                      = theme.backgroundColour
  211|      0|      insertionPointColor                  = theme.cursorColour
  212|      0|      selectedTextAttributes               = [.backgroundColor: theme.selectionColour]
  213|      0|      (textStorage as? CodeStorage)?.theme = theme
  214|      0|      gutterView?.theme                    = theme
  215|      0|      minimapView?.backgroundColor         = theme.backgroundColour
  216|      0|      minimapGutterView?.theme             = theme
  217|      0|      documentVisibleBox?.fillColor        = theme.textColour.withAlphaComponent(0.1)
  218|      0|      tile()
  219|      0|      setNeedsDisplay(visibleRect)
  220|      0|    }
  221|       |  }
  222|       |
  223|       |  /// The current view layout.
  224|       |  ///
  225|       |  var viewLayout: CodeEditor.LayoutConfiguration {
  226|      0|    didSet { tile() }
  227|       |  }
  228|       |
  229|       |  /// Keeps track of the set of message views.
  230|       |  ///
  231|      0|  var messageViews: MessageViews = [:]
  232|       |
  233|       |  /// Designated initialiser for code views with a gutter.
  234|       |  ///
  235|      0|  init(frame: CGRect, with language: LanguageConfiguration, viewLayout: CodeEditor.LayoutConfiguration, theme: Theme) {
  236|      0|
  237|      0|    self.theme      = theme
  238|      0|    self.viewLayout = viewLayout
  239|      0|
  240|      0|    // Use custom components that are gutter-aware and support code-specific editing actions and highlighting.
  241|      0|    let codeLayoutManager = CodeLayoutManager(),
  242|      0|        codeContainer     = CodeContainer(),
  243|      0|        codeStorage       = CodeStorage(theme: theme)
  244|      0|    codeStorage.addLayoutManager(codeLayoutManager)
  245|      0|    codeContainer.layoutManager = codeLayoutManager
  246|      0|    codeLayoutManager.addTextContainer(codeContainer)
  247|      0|    codeLayoutManager.delegate = codeLayoutManagerDelegate
  248|      0|
  249|      0|    codeStorageDelegate  = CodeStorageDelegate(with: language)
  250|      0|
  251|      0|    super.init(frame: frame, textContainer: codeContainer)
  252|      0|
  253|      0|    // Set basic display and input properties
  254|      0|    font                                 = theme.font
  255|      0|    backgroundColor                      = theme.backgroundColour
  256|      0|    insertionPointColor                  = theme.cursorColour
  257|      0|    selectedTextAttributes               = [.backgroundColor: theme.selectionColour]
  258|      0|    isRichText                           = false
  259|      0|    isAutomaticQuoteSubstitutionEnabled  = false
  260|      0|    isAutomaticLinkDetectionEnabled      = false
  261|      0|    smartInsertDeleteEnabled             = false
  262|      0|    isContinuousSpellCheckingEnabled     = false
  263|      0|    isGrammarCheckingEnabled             = false
  264|      0|    isAutomaticDashSubstitutionEnabled   = false
  265|      0|    isAutomaticDataDetectionEnabled      = false
  266|      0|    isAutomaticSpellingCorrectionEnabled = false
  267|      0|    isAutomaticTextReplacementEnabled    = false
  268|      0|    usesFontPanel                        = false
  269|      0|
  270|      0|    // Line wrapping
  271|      0|    isHorizontallyResizable             = false
  272|      0|    isVerticallyResizable               = true
  273|      0|    textContainerInset                  = CGSize(width: 0, height: 0)
  274|      0|    textContainer?.widthTracksTextView  = false   // we need to be able to control the size (see `tile()`)
  275|      0|    textContainer?.heightTracksTextView = false
  276|      0|    textContainer?.lineBreakMode        = .byWordWrapping
  277|      0|
  278|      0|    // FIXME: properties that ought to be configurable
  279|      0|    usesFindBar                   = true
  280|      0|    isIncrementalSearchingEnabled = true
  281|      0|
  282|      0|    // Add the view delegate
  283|      0|    delegate = codeViewDelegate
  284|      0|
  285|      0|    // Add a text storage delegate that maintains a line map
  286|      0|    codeStorage.delegate = codeStorageDelegate
  287|      0|
  288|      0|    // Add a gutter view
  289|      0|    let gutterView = GutterView(frame: CGRect.zero,
  290|      0|                                textView: self,
  291|      0|                                theme: theme,
  292|      0|                                getMessageViews: { self.messageViews },
  293|      0|                                isMinimapGutter: false)
  294|      0|    gutterView.autoresizingMask = .none
  295|      0|    addSubview(gutterView)
  296|      0|    self.gutterView              = gutterView
  297|      0|    codeLayoutManager.gutterView = gutterView
  298|      0|
  299|      0|    // Add the minimap with its own gutter, but sharing the code storage with the code view
  300|      0|    //
  301|      0|    let minimapLayoutManager = MinimapLayoutManager(),
  302|      0|        minimapView          = MinimapView(),
  303|      0|        minimapGutterView    = GutterView(frame: CGRect.zero,
  304|      0|                                          textView: minimapView,
  305|      0|                                          theme: theme,
  306|      0|                                          getMessageViews: { self.messageViews },
  307|      0|                                          isMinimapGutter: true),
  308|      0|        minimapDividerView   = NSBox()
  309|      0|    minimapView.codeView = self
  310|      0|
  311|      0|    minimapDividerView.boxType = .separator
  312|      0|    addSubview(minimapDividerView)
  313|      0|    self.minimapDividerView = minimapDividerView
  314|      0|
  315|      0|    minimapView.textContainer?.replaceLayoutManager(minimapLayoutManager)
  316|      0|    codeStorage.addLayoutManager(minimapLayoutManager)
  317|      0|    minimapView.backgroundColor                     = backgroundColor
  318|      0|    minimapView.autoresizingMask                    = .none
  319|      0|    minimapView.isEditable                          = false
  320|      0|    minimapView.isSelectable                        = false
  321|      0|    minimapView.isHorizontallyResizable             = false
  322|      0|    minimapView.isVerticallyResizable               = true
  323|      0|    minimapView.textContainerInset                  = CGSize(width: 0, height: 0)
  324|      0|    minimapView.textContainer?.widthTracksTextView  = true
  325|      0|    minimapView.textContainer?.heightTracksTextView = false
  326|      0|    minimapView.textContainer?.lineBreakMode        = .byWordWrapping
  327|      0|    addSubview(minimapView)
  328|      0|    self.minimapView = minimapView
  329|      0|
  330|      0|    minimapView.addSubview(minimapGutterView)
  331|      0|    self.minimapGutterView = minimapGutterView
  332|      0|
  333|      0|    minimapView.layoutManager?.typesetter = MinimapTypeSetter()
  334|      0|
  335|      0|    let documentVisibleBox = NSBox()
  336|      0|    documentVisibleBox.boxType     = .custom
  337|      0|    documentVisibleBox.fillColor   = theme.textColour.withAlphaComponent(0.1)
  338|      0|    documentVisibleBox.borderWidth = 0
  339|      0|    minimapView.addSubview(documentVisibleBox)
  340|      0|    self.documentVisibleBox = documentVisibleBox
  341|      0|
  342|      0|    tile()
  343|      0|  }
  344|       |
  345|      0|  required init?(coder: NSCoder) {
  346|      0|    fatalError("init(coder:) has not been implemented")
  347|      0|  }
  348|       |
  349|      0|  override func layout() {
  350|      0|    super.layout()
  351|      0|
  352|      0|    // Lay out the various subviews and text containers
  353|      0|    tile()
  354|      0|
  355|      0|    // Redraw the visible part of the gutter
  356|      0|    gutterView?.setNeedsDisplay(documentVisibleRect)
  357|      0|  }
  358|       |
  359|       |  override func setSelectedRanges(_ ranges: [NSValue],
  360|       |                                  affinity: NSSelectionAffinity,
  361|       |                                  stillSelecting stillSelectingFlag: Bool)
  362|      0|  {
  363|      0|    let oldSelectedRanges = selectedRanges
  364|      0|    super.setSelectedRanges(ranges, affinity: affinity, stillSelecting: stillSelectingFlag)
  365|      0|    minimapView?.selectedRanges = selectedRanges    // minimap mirrors the selection of the main code view
  366|      0|
  367|      0|    let lineOfInsertionPoint = insertionPoint.flatMap{ optLineMap?.lineOf(index: $0) }
  368|      0|
  369|      0|    // If the insertion point changed lines, we need to redraw at the old and new location to fix the line highlighting.
  370|      0|    // NB: We retain the last line and not the character index as the latter may be inaccurate due to editing that let
  371|      0|    //     to the selected range change.
  372|      0|    if lineOfInsertionPoint != oldLastLineOfInsertionPoint {
  373|      0|
  374|      0|      if let oldLine      = oldLastLineOfInsertionPoint,
  375|      0|         let oldLineRange = optLineMap?.lookup(line: oldLine)?.range
  376|      0|      {
  377|      0|
  378|      0|        // We need to invalidate the whole background (incl message views); hence, we need to employ
  379|      0|        // `lineBackgroundRect(_:)`, which is why `NSLayoutManager.invalidateDisplay(forCharacterRange:)` is not
  380|      0|        // sufficient.
  381|      0|        layoutManager?.enumerateFragmentRects(forLineContaining: oldLineRange.location){ fragmentRect in
  382|      0|
  383|      0|          self.setNeedsDisplay(self.lineBackgroundRect(fragmentRect))
  384|      0|        }
  385|      0|        minimapGutterView?.optLayoutManager?.invalidateDisplay(forCharacterRange: oldLineRange)
  386|      0|
  387|      0|      }
  388|      0|      if let newLine      = lineOfInsertionPoint,
  389|      0|         let newLineRange = optLineMap?.lookup(line: newLine)?.range
  390|      0|      {
  391|      0|
  392|      0|        // We need to invalidate the whole background (incl message views); hence, we need to employ
  393|      0|        // `lineBackgroundRect(_:)`, which is why `NSLayoutManager.invalidateDisplay(forCharacterRange:)` is not
  394|      0|        // sufficient.
  395|      0|        layoutManager?.enumerateFragmentRects(forLineContaining: newLineRange.location){ fragmentRect in
  396|      0|
  397|      0|          self.setNeedsDisplay(self.lineBackgroundRect(fragmentRect))
  398|      0|        }
  399|      0|        minimapGutterView?.optLayoutManager?.invalidateDisplay(forCharacterRange: newLineRange)
  400|      0|
  401|      0|      }
  402|      0|    }
  403|      0|    oldLastLineOfInsertionPoint = lineOfInsertionPoint
  404|      0|
  405|      0|    // NB: This needs to happen after calling `super`, as it depends on the correctly set new set of ranges.
  406|      0|    DispatchQueue.main.async {
  407|      0|
  408|      0|      // Needed as the selection affects line number highlighting.
  409|      0|      // NB: Invalidation of the old and new ranges needs to happen separately. If we were to union them, an insertion
  410|      0|      //     point (range length = 0) at the start of a line would be absorbed into the previous line, which results in
  411|      0|      //     a lack of invalidation of the line on which the insertion point is located.
  412|      0|      self.gutterView?.invalidateGutter(forCharRange: combinedRanges(ranges: oldSelectedRanges))
  413|      0|      self.gutterView?.invalidateGutter(forCharRange: combinedRanges(ranges: ranges))
  414|      0|      self.minimapGutterView?.invalidateGutter(forCharRange: combinedRanges(ranges: oldSelectedRanges))
  415|      0|      self.minimapGutterView?.invalidateGutter(forCharRange: combinedRanges(ranges: ranges))
  416|      0|    }
  417|      0|
  418|      0|    collapseMessageViews()
  419|      0|  }
  420|       |
  421|      0|  override func drawBackground(in rect: NSRect) {
  422|      0|    super.drawBackground(in: rect)
  423|      0|
  424|      0|    guard let layoutManager = layoutManager,
  425|      0|          let textContainer = textContainer
  426|      0|    else { return }
  427|      0|
  428|      0|    let glyphRange = layoutManager.glyphRange(forBoundingRectWithoutAdditionalLayout: rect, in: textContainer),
  429|      0|        charRange  = layoutManager.characterRange(forGlyphRange: glyphRange, actualGlyphRange: nil)
  430|      0|
  431|      0|    // If the selection is an insertion point, highlight the corresponding line
  432|      0|    if let location = insertionPoint, charRange.contains(location) || location == NSMaxRange(charRange) {
  433|      0|
  434|      0|      drawBackgroundHighlight(in: rect, forLineContaining: location, withColour: theme.currentLineColour)
  435|      0|
  436|      0|    }
  437|      0|
  438|      0|    // Highlight each line that has a message view
  439|      0|    for messageView in messageViews {
  440|      0|
  441|      0|      let glyphRange = layoutManager.glyphRange(forBoundingRect: messageView.value.lineFragementRect, in: textContainer),
  442|      0|          index      = layoutManager.characterIndexForGlyph(at: glyphRange.location)
  443|      0|
  444|      0|// This seems like a worthwhile optimisation, but sometimes we are called in a situation, where `charRange` computes
  445|      0|// to be the empty range although the whole visible area is being redrawn.
  446|      0|//      if charRange.contains(index) {
  447|      0|
  448|      0|        drawBackgroundHighlight(in: rect,
  449|      0|                                forLineContaining: index,
  450|      0|                                withColour: messageView.value.colour.withAlphaComponent(0.1))
  451|      0|
  452|      0|//      }
  453|      0|    }
  454|      0|  }
  455|       |
  456|       |  /// Draw the background of an entire line of text with a highlight colour, including below any messages views.
  457|       |  ///
  458|      0|  private func drawBackgroundHighlight(in rect: NSRect, forLineContaining charIndex: Int, withColour colour: NSColor) {
  459|      0|    guard let layoutManager = layoutManager else { return }
  460|      0|
  461|      0|    colour.setFill()
  462|      0|    layoutManager.enumerateFragmentRects(forLineContaining: charIndex){ fragmentRect in
  463|      0|
  464|      0|      let drawRect = self.lineBackgroundRect(fragmentRect).intersection(rect)
  465|      0|      if !drawRect.isNull { NSBezierPath(rect: drawRect).fill() }
  466|      0|    }
  467|      0|  }
  468|       |
  469|       |  /// Compute the background rect from a line's fragement rect. On lines that contain a message view, the fragement
  470|       |  /// rect doesn't cover the entire background.
  471|       |  ///
  472|      0|  private func lineBackgroundRect(_ lineFragementRect: CGRect) -> CGRect {
  473|      0|
  474|      0|    if let textContainerWidth = textContainer?.size.width {
  475|      0|
  476|      0|      return CGRect(origin: lineFragementRect.origin,
  477|      0|                    size: CGSize(width: textContainerWidth - lineFragementRect.minX, height: lineFragementRect.height))
  478|      0|
  479|      0|    } else {
  480|      0|
  481|      0|      return lineFragementRect
  482|      0|
  483|      0|    }
  484|      0|  }
  485|       |
  486|       |  /// Position and size the gutter and minimap and set the text container sizes and exclusion paths. Take the current
  487|       |  /// view layout in `viewLayout` into account.
  488|       |  ///
  489|       |  /// * The main text view contains three subviews: (1) the main gutter on its left side, (2) the minimap on its right
  490|       |  ///   side, and (3) a divide in between the code view and the minimap gutter.
  491|       |  /// * Both the main text view and the minimap text view (or rather their text container) uses an exclusion path to
  492|       |  ///   keep text out of the gutter view. The main text view is sized to avoid overlap with the minimap even without an
  493|       |  ///   exclusion path.
  494|       |  /// * The main text view and the minimap text view need to be able to accomodate exactly the same number of
  495|       |  ///   characters, so that line breaking procceds in the exact same way.
  496|       |  ///
  497|       |  /// NB: We don't use a ruler view for the gutter on macOS to be able to use the same setup on macOS and iOS.
  498|       |  ///
  499|      0|  private func tile() {
  500|      0|
  501|      0|    // Compute size of the main view gutter
  502|      0|    //
  503|      0|    let theFont                = font ?? NSFont.systemFont(ofSize: 0),
  504|      0|        fontSize               = theFont.pointSize,
  505|      0|        fontWidth              = theFont.maximumAdvancement.width,  // NB: we deal only with fixed width fonts
  506|      0|        gutterWithInCharacters = CGFloat(6),
  507|      0|        gutterWidth            = ceil(fontWidth * gutterWithInCharacters),
  508|      0|        gutterRect             = CGRect(origin: CGPoint.zero, size: CGSize(width: gutterWidth, height: frame.height)),
  509|      0|        gutterExclusionPath    = OSBezierPath(rect: gutterRect),
  510|      0|        minLineFragmentPadding = CGFloat(6)
  511|      0|
  512|      0|    gutterView?.frame = gutterRect
  513|      0|
  514|      0|    // Compute sizes of the minimap text view and gutter
  515|      0|    //
  516|      0|    let minimapFontWidth     = minimapFontSize(for: fontSize) / 2,
  517|      0|        minimapGutterWidth   = minimapFontWidth * gutterWithInCharacters,
  518|      0|        dividerWidth         = CGFloat(1),
  519|      0|        minimapGutterRect    = CGRect(origin: CGPoint.zero,
  520|      0|                                      size: CGSize(width: minimapGutterWidth, height: frame.height)),
  521|      0|        widthWithoutGutters  = frame.width - gutterWidth - minimapGutterWidth
  522|      0|                                           - minLineFragmentPadding * 2 + minimapFontWidth * 2 - dividerWidth,
  523|      0|        numberOfCharacters   = codeWidthInCharacters(for: widthWithoutGutters,
  524|      0|                                                     with: theFont,
  525|      0|                                                     withMinimap: viewLayout.showMinimap),
  526|      0|        minimapWidth         = minimapGutterWidth + minimapFontWidth * 2 + numberOfCharacters * minimapFontWidth,
  527|      0|        codeViewWidth        = viewLayout.showMinimap ? frame.width - minimapWidth - dividerWidth : frame.width,
  528|      0|        padding              = codeViewWidth - (gutterWidth + ceil(numberOfCharacters * fontWidth)),
  529|      0|        minimapX             = floor(frame.width - minimapWidth),
  530|      0|        minimapRect          = CGRect(x: minimapX, y: 0, width: minimapWidth, height: frame.height),
  531|      0|        minimapExclusionPath = OSBezierPath(rect: minimapGutterRect),
  532|      0|        minimapDividerRect   = CGRect(x: minimapX - dividerWidth, y: 0, width: dividerWidth, height: frame.height)
  533|      0|
  534|      0|    minimapDividerView?.isHidden = !viewLayout.showMinimap
  535|      0|    minimapView?.isHidden        = !viewLayout.showMinimap
  536|      0|    if viewLayout.showMinimap {
  537|      0|
  538|      0|      minimapDividerView?.frame = minimapDividerRect
  539|      0|      minimapView?.frame        = minimapRect
  540|      0|      minimapGutterView?.frame  = minimapGutterRect
  541|      0|
  542|      0|    }
  543|      0|
  544|      0|    minSize = CGSize(width: 0, height: documentVisibleRect.height)
  545|      0|    maxSize = CGSize(width: codeViewWidth, height: CGFloat.greatestFiniteMagnitude)
  546|      0|
  547|      0|    // Set the text container area of the main text view to reach up to the minimap
  548|      0|    // NB: We use the `lineFragmentPadding` to capture the slack that arises when the window width admits a fractional
  549|      0|    //     number of characters. Adding the slack to the code view's text container doesn't work as the line breaks
  550|      0|    //     of the minimap and main code view are then sometimes not entirely in sync.
  551|      0|    textContainerInset                 = NSSize(width: 0, height: 0)
  552|      0|    textContainer?.size                = NSSize(width: codeViewWidth, height: CGFloat.greatestFiniteMagnitude)
  553|      0|    textContainer?.lineFragmentPadding = padding / 2
  554|      0|    textContainer?.exclusionPaths      = [gutterExclusionPath]
  555|      0|
  556|      0|    // Set the text container area of the minimap text view
  557|      0|    minimapView?.textContainer?.exclusionPaths      = [minimapExclusionPath]
  558|      0|    minimapView?.textContainer?.size                = CGSize(width: minimapWidth,
  559|      0|                                                             height: CGFloat.greatestFiniteMagnitude)
  560|      0|    minimapView?.textContainer?.lineFragmentPadding = minimapFontWidth
  561|      0|
  562|      0|    // NB: We can't set the height of the box highlighting the document visible area here as it depends on the document
  563|      0|    //     and minimap height, which requires document layout to be completed. Hence, we delay that.
  564|      0|    DispatchQueue.main.async { self.adjustScrollPositionOfMinimap() }
  565|      0|  }
  566|       |
  567|       |  /// Sets the scrolling position of the minimap in dependence of the scroll position of the main code view.
  568|       |  ///
  569|      0|  func adjustScrollPositionOfMinimap() {
  570|      0|    guard viewLayout.showMinimap else { return }
  571|      0|
  572|      0|    let codeViewHeight = frame.size.height,
  573|      0|        minimapHeight  = minimapView?.frame.size.height ?? 0,
  574|      0|        visibleHeight  = documentVisibleRect.size.height
  575|      0|
  576|      0|    let scrollFactor: CGFloat
  577|      0|    if minimapHeight < visibleHeight { scrollFactor = 1 } else {
  578|      0|
  579|      0|      scrollFactor = 1 - (minimapHeight - visibleHeight) / (codeViewHeight - visibleHeight)
  580|      0|
  581|      0|    }
  582|      0|
  583|      0|    // We box the positioning of the minimap at the top and the bottom of the code view (with the `max` and `min`
  584|      0|    // expessions. This is necessary as the minimap will otherwise be partially cut off by the enclosing clip view.
  585|      0|    // If we want an Xcode-like behaviour, where the minimap sticks to the top, it probably would need to be a floating
  586|      0|    // view outside of the clip view.
  587|      0|    let newOriginY = floor(min(max(documentVisibleRect.origin.y * scrollFactor, 0),
  588|      0|                               frame.size.height - (minimapView?.frame.size.height ?? 0)))
  589|      0|    if minimapView?.frame.origin.y != newOriginY { minimapView?.frame.origin.y = newOriginY }  // don't update frames in vain
  590|      0|
  591|      0|    let minimapVisibleY      = (visibleRect.origin.y / frame.size.height) * minimapHeight,
  592|      0|        minimapVisibleHeight = documentVisibleRect.size.height * minimapHeight / frame.size.height,
  593|      0|        documentVisibleFrame = CGRect(x: 0,
  594|      0|                                      y: minimapVisibleY,
  595|      0|                                      width: minimapView?.bounds.size.width ?? 0,
  596|      0|                                      height: minimapVisibleHeight).integral
  597|      0|    if documentVisibleBox?.frame != documentVisibleFrame { documentVisibleBox?.frame = documentVisibleFrame }
  598|      0|  }
  599|       |
  600|       |}
  601|       |
  602|       |class CodeViewDelegate: NSObject, NSTextViewDelegate {
  603|       |
  604|       |  // Hooks for events
  605|       |  //
  606|       |  var textDidChange:      ((NSTextView) -> ())?
  607|       |  var selectionDidChange: ((NSTextView) -> ())?
  608|       |
  609|       |
  610|       |  // MARK: -
  611|       |  // MARK: NSTextViewDelegate protocol
  612|       |
  613|      0|  func textDidChange(_ notification: Notification) {
  614|      0|    guard let textView = notification.object as? NSTextView else { return }
  615|      0|
  616|      0|    textDidChange?(textView)
  617|      0|  }
  618|       |
  619|      0|  func textViewDidChangeSelection(_ notification: Notification) {
  620|      0|    guard let textView = notification.object as? NSTextView else { return }
  621|      0|
  622|      0|    selectionDidChange?(textView)
  623|      0|  }
  624|       |}
  625|       |
  626|       |#endif
  627|       |
  628|       |
  629|       |// MARK: -
  630|       |// MARK: Shared code
  631|       |
  632|       |extension CodeView {
  633|       |
  634|       |  /// Update the layout of the specified message view if its geometry got invalidated by
  635|       |  /// `CodeTextContainer.lineFragmentRect(forProposedRect:at:writingDirection:remaining:)`.
  636|       |  ///
  637|      0|  fileprivate func layoutMessageView(identifiedBy id: UUID) {
  638|      0|    guard let codeLayoutManager = layoutManager as? CodeLayoutManager,
  639|      0|          let codeStorage       = textStorage as? CodeStorage,
  640|      0|          let codeContainer     = optTextContainer,
  641|      0|          let messageBundle     = messageViews[id]
  642|      0|    else { return }
  643|      0|
  644|      0|    if messageBundle.geometry == nil {
  645|      0|
  646|      0|      let glyphRange = codeLayoutManager.glyphRange(forBoundingRect: messageBundle.lineFragementRect, in: codeContainer),
  647|      0|          charRange  = codeLayoutManager.characterRange(forGlyphRange: glyphRange, actualGlyphRange: nil),
  648|      0|          lineRange  = (codeStorage.string as NSString).lineRange(for: charRange),
  649|      0|          lineGlyphs = codeLayoutManager.glyphRange(forCharacterRange: lineRange, actualCharacterRange: nil),
  650|      0|          usedRect   = codeLayoutManager.lineFragmentUsedRect(forGlyphAt: glyphRange.location, effectiveRange: nil),
  651|      0|          lineRect   = codeLayoutManager.boundingRect(forGlyphRange: lineGlyphs, in: codeContainer)
  652|      0|
  653|      0|      // Compute the message view geometry from the text layout information
  654|      0|      let geometry = MessageView.Geometry(lineWidth: messageBundle.lineFragementRect.width - usedRect.width,
  655|      0|                                          lineHeight: messageBundle.lineFragementRect.height,
  656|      0|                                          popupWidth:
  657|      0|                                            (codeContainer.size.width - MessageView.popupRightSideOffset) * 0.75,
  658|      0|                                          popupOffset: lineRect.height + 2)
  659|      0|      messageViews[id]?.geometry = geometry
  660|      0|
  661|      0|      // Configure the view with the new geometry
  662|      0|      messageBundle.view.geometry = geometry
  663|      0|      if messageBundle.view.superview == nil {
  664|      0|
  665|      0|        // Add the messages view
  666|      0|        addSubview(messageBundle.view)
  667|      0|        let topOffset = textContainerOrigin.y + messageBundle.lineFragementRect.minY,
  668|      0|            topAnchorConstraint = messageBundle.view.topAnchor.constraint(equalTo: self.topAnchor,
  669|      0|                                                                          constant: topOffset)
  670|      0|        let leftOffset = textContainerOrigin.x + messageBundle.lineFragementRect.maxX,
  671|      0|            rightAnchorConstraint = messageBundle.view.rightAnchor.constraint(equalTo: self.leftAnchor,
  672|      0|                                                                              constant: leftOffset)
  673|      0|        messageViews[id]?.topAnchorConstraint   = topAnchorConstraint
  674|      0|        messageViews[id]?.rightAnchorConstraint = rightAnchorConstraint
  675|      0|        NSLayoutConstraint.activate([topAnchorConstraint, rightAnchorConstraint])
  676|      0|
  677|      0|
  678|      0|      } else {
  679|      0|
  680|      0|        // Update the messages view constraints
  681|      0|        messageViews[id]?.topAnchorConstraint?.constant   = messageBundle.lineFragementRect.minY
  682|      0|        messageViews[id]?.rightAnchorConstraint?.constant = messageBundle.lineFragementRect.maxX
  683|      0|
  684|      0|      }
  685|      0|    }
  686|      0|  }
  687|       |
  688|       |  /// Adds a new message to the set of messages for this code view.
  689|       |  ///
  690|      0|  func report(message: Located<Message>) {
  691|      0|    guard let messageBundle = codeStorageDelegate.add(message: message) else { return }
  692|      0|
  693|      0|    updateMessageView(for: messageBundle, at: message.location.line)
  694|      0|  }
  695|       |
  696|       |  /// Removes a given message. If it doesn't exist, do nothing. This function is quite expensive.
  697|       |  ///
  698|      0|  func retract(message: Message) {
  699|      0|    guard let (messageBundle, line) = codeStorageDelegate.remove(message: message) else { return }
  700|      0|
  701|      0|    updateMessageView(for: messageBundle, at: line)
  702|      0|  }
  703|       |
  704|       |  /// Given a new or updated message bundle, update the corresponding message view appropriately. This includes covering
  705|       |  /// the two special cases, where we create a new view or we remove a view for good (as its last message was deleted).
  706|       |  ///
  707|      0|  private func updateMessageView(for messageBundle: LineInfo.MessageBundle, at line: Int) {
  708|      0|    guard let charRange = codeStorageDelegate.lineMap.lookup(line: line)?.range else { return }
  709|      0|
  710|      0|    removeMessageViews(withIDs: [messageBundle.id])
  711|      0|
  712|      0|    // If we removed the last message of this view, we don't need to create a new version
  713|      0|    if messageBundle.messages.isEmpty { return }
  714|      0|
  715|      0|    // TODO: CodeEditor needs to be parameterised by message theme
  716|      0|    let theme = Message.defaultTheme
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView0aC0C013updateMessageC033_3322771732ACF4D0B45E4F52D3D9D12CLL3for2atyAA8LineInfoV0E6BundleV_SitFSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0E0V8CategoryOcATmcfu_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView0aC0C013updateMessageC033_3322771732ACF4D0B45E4F52D3D9D12CLL3for2atyAA8LineInfoV0E6BundleV_SitFSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0E0V8CategoryOcATmcfu_AmN_AqRtAVcfu0_
  ------------------
  717|      0|
  718|      0|    let messageView = StatefulMessageView.HostingView(messages: messageBundle.messages,
  719|      0|                                                      theme: theme,
  720|      0|                                                      geometry: MessageView.Geometry(lineWidth: 100,
  721|      0|                                                                                     lineHeight: 15,
  722|      0|                                                                                     popupWidth: 300,
  723|      0|                                                                                     popupOffset: 16),
  724|      0|                                                      fontSize: font?.pointSize ?? OSFont.systemFontSize),
  725|      0|        principalCategory = messagesByCategory(messageBundle.messages)[0].key,
  726|      0|        colour            = theme(principalCategory).colour
  727|      0|
  728|      0|    messageViews[messageBundle.id] = MessageInfo(view: messageView,
  729|      0|                                                 lineFragementRect: CGRect.zero,
  730|      0|                                                 geometry: nil,
  731|      0|                                                 colour: colour)
  732|      0|
  733|      0|    // We invalidate the layout of the line where the message belongs as their may be less space for the text now and
  734|      0|    // because the layout process for the text fills the `lineFragmentRect` property of the above `MessageInfo`.
  735|      0|    optLayoutManager?.invalidateLayout(forCharacterRange: charRange, actualCharacterRange: nil)
  736|      0|    self.optLayoutManager?.invalidateDisplay(forCharacterRange: charRange)
  737|      0|    gutterView?.invalidateGutter(forCharRange: charRange)
  738|      0|  }
  739|       |
  740|       |  /// Remove the messages associated with a specified range of lines.
  741|       |  ///
  742|       |  /// - Parameter onLines: The line range where messages are to be removed. If `nil`, all messages on this code view are
  743|       |  ///     to be removed.
  744|       |  ///
  745|      0|  func retractMessages(onLines lines: Range<Int>? = nil) {
  746|      0|    var messageIds: [LineInfo.MessageBundle.ID] = []
  747|      0|
  748|      0|    // Remove all message bundles in the line map and collect their ids for subsequent view removal.
  749|      0|    for line in lines ?? 1..<codeStorageDelegate.lineMap.lines.count {
  750|      0|
  751|      0|      if let messageBundle = codeStorageDelegate.messages(at: line) {
  752|      0|
  753|      0|        messageIds.append(messageBundle.id)
  754|      0|        codeStorageDelegate.removeMessages(at: line)
  755|      0|
  756|      0|      }
  757|      0|
  758|      0|    }
  759|      0|
  760|      0|    // Make sure to remove all views that are still around if necessary.
  761|      0|    if lines == nil { removeMessageViews() } else { removeMessageViews(withIDs: messageIds) }
  762|      0|  }
  763|       |
  764|       |  /// Remove the message views with the given ids.
  765|       |  ///
  766|       |  /// - Parameter ids: The IDs of the message bundles that ought to be removed. If `nil`, remove all.
  767|       |  ///
  768|       |  /// IDs that do not have no associated message view cause no harm.
  769|       |  ///
  770|      0|  fileprivate func removeMessageViews(withIDs ids: [LineInfo.MessageBundle.ID]? = nil) {
  771|      0|
  772|      0|    for id in ids ?? Array<LineInfo.MessageBundle.ID>(messageViews.keys) {
  773|      0|
  774|      0|      if let info = messageViews[id] { info.view.removeFromSuperview() }
  775|      0|      messageViews.removeValue(forKey: id)
  776|      0|
  777|      0|    }
  778|      0|  }
  779|       |
  780|       |  /// Ensure that all message views are in their collapsed state.
  781|       |  ///
  782|      0|  func collapseMessageViews() {
  783|      0|    for messageView in messageViews {
  784|      0|      messageView.value.view.unfolded = false
  785|      0|    }
  786|      0|  }
  787|       |
  788|       |}
  789|       |
  790|       |class CodeContainer: NSTextContainer {
  791|       |
  792|       |  #if os(iOS)
  793|       |  weak var textView: UITextView?
  794|       |  #endif
  795|       |
  796|       |  override func lineFragmentRect(forProposedRect proposedRect: CGRect,
  797|       |                                 at characterIndex: Int,
  798|       |                                 writingDirection baseWritingDirection: NSWritingDirection,
  799|       |                                 remaining remainingRect: UnsafeMutablePointer<CGRect>?)
  800|       |  -> CGRect
  801|      0|  {
  802|      0|    let calculatedRect = super.lineFragmentRect(forProposedRect: proposedRect,
  803|      0|                                                at: characterIndex,
  804|      0|                                                writingDirection: baseWritingDirection,
  805|      0|                                                remaining: remainingRect)
  806|      0|
  807|      0|    guard let codeView    = textView as? CodeView,
  808|      0|          let codeStorage = layoutManager?.textStorage as? CodeStorage,
  809|      0|          let delegate    = codeStorage.delegate as? CodeStorageDelegate,
  810|      0|          let line        = delegate.lineMap.lineOf(index: characterIndex),
  811|      0|          let oneLine     = delegate.lineMap.lookup(line: line),
  812|      0|          characterIndex == oneLine.range.location    // we are only interested in the first line fragment of a line
  813|      0|    else { return calculatedRect }
  814|      0|
  815|      0|    // On lines that contain messages, we reduce the width of the available line fragement rect such that there is
  816|      0|    // always space for a minimal truncated message (provided the text container is wide enough to accomodate that).
  817|      0|    if let messageBundleId = delegate.messages(at: line)?.id,
  818|      0|       calculatedRect.width > 2 * MessageView.minimumInlineWidth
  819|      0|    {
  820|      0|
  821|      0|      codeView.messageViews[messageBundleId]?.lineFragementRect = calculatedRect
  822|      0|      codeView.messageViews[messageBundleId]?.geometry = nil                      // invalidate the geometry
  823|      0|
  824|      0|      // To fully determine the layout of the message view, typesetting needs to complete for this line; hence, we defer
  825|      0|      // configuring the view.
  826|      0|      DispatchQueue.main.async { codeView.layoutMessageView(identifiedBy: messageBundleId) }
  827|      0|
  828|      0|      return CGRect(origin: calculatedRect.origin,
  829|      0|                    size: CGSize(width: calculatedRect.width - MessageView.minimumInlineWidth,
  830|      0|                                 height: calculatedRect.height))
  831|      0|
  832|      0|    } else { return calculatedRect }
  833|      0|  }
  834|       |}
  835|       |
  836|       |/// Customised layout manager for code layout.
  837|       |///
  838|       |class CodeLayoutManager: NSLayoutManager {
  839|       |
  840|       |  weak var gutterView: GutterView?
  841|       |
  842|       |  override func processEditing(for textStorage: NSTextStorage,
  843|       |                               edited editMask: TextStorageEditActions,
  844|       |                               range newCharRange: NSRange,
  845|       |                               changeInLength delta: Int,
  846|      0|                               invalidatedRange invalidatedCharRange: NSRange) {
  847|      0|    super.processEditing(for: textStorage,
  848|      0|                         edited: editMask,
  849|      0|                         range: newCharRange,
  850|      0|                         changeInLength: delta,
  851|      0|                         invalidatedRange: invalidatedCharRange)
  852|      0|
  853|      0|    // NB: Gutter drawing must be asynchronous, as the glyph generation that may be triggered in that process,
  854|      0|    //     is not permitted until the enclosing editing block has completed; otherwise, we run into an internal
  855|      0|    //     error in the layout manager.
  856|      0|    if let gutterView = gutterView {
  857|      0|      Dispatch.DispatchQueue.main.async { gutterView.invalidateGutter(forCharRange: invalidatedCharRange) }
  858|      0|    }
  859|      0|
  860|      0|    // Remove all messages in the edited range.
  861|      0|    if let codeStorageDelegate = textStorage.delegate as? CodeStorageDelegate,
  862|      0|       let codeView            = gutterView?.textView as? CodeView
  863|      0|    {
  864|      0|
  865|      0|      codeView.removeMessageViews(withIDs: codeStorageDelegate.lastEvictedMessageIDs)
  866|      0|
  867|      0|    }
  868|      0|  }
  869|       |}
  870|       |
  871|       |class CodeLayoutManagerDelegate: NSObject, NSLayoutManagerDelegate {
  872|       |
  873|       |  func layoutManager(_ layoutManager: NSLayoutManager,
  874|       |                     didCompleteLayoutFor textContainer: NSTextContainer?,
  875|       |                     atEnd layoutFinishedFlag: Bool)
  876|      0|  {
  877|      0|    guard let layoutManager = layoutManager as? CodeLayoutManager else { return }
  878|      0|
  879|      0|    if layoutFinishedFlag { layoutManager.gutterView?.layoutFinished() }
  880|      0|  }
  881|       |}
  882|       |
  883|       |/// Common code view actions triggered on a selection change.
  884|       |///
  885|      0|func selectionDidChange<TV: TextView>(_ textView: TV) {
  886|      0|  guard let layoutManager = textView.optLayoutManager,
  887|      0|        let textContainer = textView.optTextContainer,
  888|      0|        let codeStorage   = textView.optCodeStorage
  889|      0|        else { return }
  890|      0|
  891|      0|  let visibleRect = textView.documentVisibleRect,
  892|      0|      glyphRange  = layoutManager.glyphRange(forBoundingRectWithoutAdditionalLayout: visibleRect,
  893|      0|                                             in: textContainer),
  894|      0|      charRange   = layoutManager.characterRange(forGlyphRange: glyphRange, actualGlyphRange: nil)
  895|      0|
  896|      0|  if let location             = textView.insertionPoint,
  897|      0|     location > 0,
  898|      0|     let matchingBracketRange = codeStorage.matchingBracket(forLocationAt: location - 1, in: charRange)
  899|      0|  {
  900|      0|    textView.showFindIndicator(for: matchingBracketRange)
  901|      0|  }
  902|      0|}
  903|       |
  904|       |extension NSLayoutManager {
  905|       |
  906|       |  /// Enumerate the fragment rectangles covering the characters located on the line with the given character index.
  907|       |  ///
  908|       |  /// - Parameters:
  909|       |  ///   - charIndex: The character index determining the line whose rectangles we want to enumerate.
  910|       |  ///   - block: Block that gets invoked once for every fragement rectangles on that line.
  911|       |  ///
  912|      0|  func enumerateFragmentRects(forLineContaining charIndex: Int, using block: @escaping (CGRect) -> Void) {
  913|      0|    guard let text = textStorage?.string as NSString? else { return }
  914|      0|
  915|      0|    let currentLineCharRange = text.lineRange(for: NSRange(location: charIndex, length: 0))
  916|      0|
  917|      0|    if currentLineCharRange.length > 0 {  // all, but the last line (if it is an empty line)
  918|      0|
  919|      0|      let currentLineGlyphRange = glyphRange(forCharacterRange: currentLineCharRange, actualCharacterRange: nil)
  920|      0|      enumerateLineFragments(forGlyphRange: currentLineGlyphRange){ (rect, _, _, _, _) in block(rect) }
  921|      0|
  922|      0|    } else {                              // the last line if it is an empty line
  923|      0|
  924|      0|      block(extraLineFragmentRect)
  925|      0|
  926|      0|    }
  927|      0|  }
  928|       |}
  929|       |
  930|       |/// Combine selection ranges into the smallest ranges encompassing them all.
  931|       |///
  932|      0|private func combinedRanges(ranges: [NSValue]) -> NSRange {
  933|      0|  let actualranges = ranges.compactMap{ $0 as? NSRange }
  934|      0|  return actualranges.dropFirst().reduce(actualranges.first ?? NSRange(location: 0, length: 0)) {
  935|      0|    NSUnionRange($0, $1)
  936|      0|  }
  937|      0|}
  938|       |
  939|       |

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/GutterView.swift:
    1|       |//
    2|       |//  GutterView.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 23/09/2020.
    6|       |//
    7|       |
    8|       |import os
    9|       |
   10|       |
   11|       |private let logger = Logger(subsystem: "org.justtesting.CodeEditorView", category: "GutterView")
   12|       |
   13|       |#if os(iOS)
   14|       |
   15|       |
   16|       |// MARK: -
   17|       |// MARK: UIKit version
   18|       |
   19|       |import UIKit
   20|       |
   21|       |
   22|       |private typealias FontDescriptor = UIFontDescriptor
   23|       |
   24|       |private let fontDescriptorFeatureIdentifier = FontDescriptor.FeatureKey.featureIdentifier
   25|       |private let fontDescriptorTypeIdentifier    = FontDescriptor.FeatureKey.typeIdentifier
   26|       |
   27|       |private let lineNumberColour = UIColor(red: 0.5, green: 0.5, blue: 0.5, alpha: 0.5)
   28|       |
   29|       |class GutterView: UIView {
   30|       |
   31|       |  /// The text view that this gutter belongs to.
   32|       |  ///
   33|       |  let textView: UITextView
   34|       |
   35|       |  /// The current code editor theme
   36|       |  ///
   37|       |  var theme: Theme
   38|       |
   39|       |  /// Accessor for the associated text view's message views.
   40|       |  ///
   41|       |  let getMessageViews: () -> MessageViews
   42|       |
   43|       |  /// Determines whether this gutter is for a main code view or for the minimap of a code view.
   44|       |  ///
   45|       |  let isMinimapGutter: Bool = false
   46|       |
   47|       |  /// Dirty rectangle whose drawing has been delayed as the code layout wasn't finished yet.
   48|       |  ///
   49|       |  var pendingDrawRect: CGRect?
   50|       |
   51|       |  /// Create and configure a gutter view for the given text view. This will also set the appropiate exclusion path for
   52|       |  /// text container.
   53|       |  ///
   54|       |  init(frame: CGRect, textView: UITextView, theme: Theme, getMessageViews: @escaping () -> MessageViews) {
   55|       |    self.textView        = textView
   56|       |    self.theme           = theme
   57|       |    self.getMessageViews = getMessageViews
   58|       |    super.init(frame: frame)
   59|       |    let gutterExclusionPath = UIBezierPath(rect: CGRect(origin: frame.origin,
   60|       |                                                        size: CGSize(width: frame.width,
   61|       |                                                                     height: CGFloat.greatestFiniteMagnitude)))
   62|       |    optTextContainer?.exclusionPaths = [gutterExclusionPath]
   63|       |    contentMode = .redraw
   64|       |  }
   65|       |
   66|       |  required init(coder: NSCoder) {
   67|       |    fatalError("CodeEditorView.GutterView.init(coder:) not implemented")
   68|       |  }
   69|       |}
   70|       |
   71|       |#elseif os(macOS)
   72|       |
   73|       |
   74|       |// MARK: -
   75|       |// MARK: AppKit version
   76|       |
   77|       |import AppKit
   78|       |
   79|       |
   80|       |private typealias FontDescriptor = NSFontDescriptor
   81|       |
   82|       |private let fontDescriptorFeatureIdentifier = FontDescriptor.FeatureKey.typeIdentifier
   83|       |private let fontDescriptorTypeIdentifier    = FontDescriptor.FeatureKey.selectorIdentifier
   84|       |
   85|       |private let lineNumberColour = NSColor(red: 0.5, green: 0.5, blue: 0.5, alpha: 0.5)
   86|       |
   87|       |class GutterView: NSView {
   88|       |
   89|       |  /// The text view that this gutter belongs to.
   90|       |  ///
   91|       |  let textView: NSTextView
   92|       |
   93|       |  /// The current code editor theme
   94|       |  ///
   95|       |  var theme: Theme
   96|       |
   97|       |  /// Accessor for the associated text view's message views.
   98|       |  ///
   99|       |  let getMessageViews: () -> MessageViews
  100|       |
  101|       |  /// Determines whether this gutter is for a main code view or for the minimap of a code view.
  102|       |  ///
  103|       |  let isMinimapGutter: Bool
  104|       |
  105|       |  /// Dirty rectangle whose drawing has been delayed as the code layout wasn't finished yet.
  106|       |  ///
  107|       |  var pendingDrawRect: NSRect?
  108|       |
  109|       |  /// Create and configure a gutter view for the given text view. This will also set the appropiate exclusion path for
  110|       |  /// text container.
  111|       |  ///
  112|      0|  init(frame: CGRect, textView: NSTextView, theme: Theme, getMessageViews: @escaping () -> MessageViews, isMinimapGutter: Bool) {
  113|      0|    self.textView        = textView
  114|      0|    self.theme           = theme
  115|      0|    self.getMessageViews = getMessageViews
  116|      0|    self.isMinimapGutter = isMinimapGutter
  117|      0|    super.init(frame: frame)
  118|      0|    // NB: If were decide to use layer backing, we need to set the `layerContentsRedrawPolicy` to redraw on resizing
  119|      0|  }
  120|       |
  121|      0|  required init(coder: NSCoder) {
  122|      0|    fatalError("CodeEditorView.GutterView.init(coder:) not implemented")
  123|      0|  }
  124|       |
  125|       |  // Imitate the coordinate system of the associated text view.
  126|      0|  override var isFlipped: Bool { textView.isFlipped }
  127|       |}
  128|       |
  129|       |#endif
  130|       |
  131|       |
  132|       |// MARK: -
  133|       |// MARK: Shared code
  134|       |
  135|       |
  136|       |extension GutterView {
  137|       |
  138|      0|  var optLayoutManager: NSLayoutManager?   { textView.optLayoutManager }
  139|      0|  var optTextContainer: NSTextContainer?   { textView.optTextContainer }
  140|      0|  var optLineMap:       LineMap<LineInfo>? { textView.optLineMap }
  141|       |
  142|       |  // MARK: -
  143|       |  // MARK: Gutter notifications
  144|       |
  145|       |  /// Notifies the gutter view that a range of characters will be redrawn by the layout manager or that there are
  146|       |  /// selection status changes; thus, the corresponding gutter area might require redrawing, too.
  147|       |  ///
  148|       |  /// - Parameters:
  149|       |  ///   - charRange: The invalidated range of characters. It will be trimmed to be within the valid character range of
  150|       |  ///     the underlying text storage.
  151|       |  ///
  152|       |  /// We invalidate the area corresponding to entire paragraphs. This makes a difference in the presence of line
  153|       |  /// breaks.
  154|       |  ///
  155|      0|  func invalidateGutter(forCharRange charRange: NSRange) {
  156|      0|
  157|      0|    guard let layoutManager = optLayoutManager,
  158|      0|          let textContainer = optTextContainer
  159|      0|    else { return }
  160|      0|
  161|      0|    let string = textView.text as NSString
  162|      0|
  163|      0|    let textRect: CGRect
  164|      0|
  165|      0|    if charRange.location == string.length {   // special case: insertion point on trailing empty line
  166|      0|
  167|      0|      textRect = layoutManager.extraLineFragmentRect
  168|      0|
  169|      0|    } else {
  170|      0|
  171|      0|      // We call `paragraphRange(for:_)` safely by boxing `charRange` to the allowed range.
  172|      0|      let extendedCharRange   = string.paragraphRange(for: NSIntersectionRange(charRange,
  173|      0|                                                                               NSRange(location: 0,
  174|      0|                                                                                       length: string.length))),
  175|      0|          glyphRange          = layoutManager.glyphRange(forCharacterRange: extendedCharRange,
  176|      0|                                                         actualCharacterRange: nil)
  177|      0|      textRect = layoutManager.boundingRect(forGlyphRange: glyphRange, in: textContainer)
  178|      0|
  179|      0|    }
  180|      0|    setNeedsDisplay(gutterRectFrom(textRect: textRect))
  181|      0|  }
  182|       |
  183|       |  /// Trigger drawing any pending gutter draw rectangle.
  184|       |  ///
  185|      0|  func layoutFinished() {
  186|      0|
  187|      0|    if let rect = pendingDrawRect {
  188|      0|
  189|      0|      setNeedsDisplay(rect)
  190|      0|      pendingDrawRect = nil
  191|      0|
  192|      0|    }
  193|      0|  }
  194|       |
  195|       |  // MARK: -
  196|       |  // MARK: Gutter drawing
  197|       |
  198|      0|  override func draw(_ rect: CGRect) {
  199|      0|    guard let layoutManager = optLayoutManager,
  200|      0|          let textContainer = optTextContainer,
  201|      0|          let lineMap       = optLineMap
  202|      0|    else { return }
  203|      0|
  204|      0|    // This is not particularily nice, but there is no point in trying to draw the gutter, before the layout manager
  205|      0|    // has finished laying out the *entire* text. Given that all we got here is a rectangle, we can't even figure out
  206|      0|    // reliably whether enough text has been laid out to draw that part of the gutter that is being requested. Hence,
  207|      0|    // we defer drawing the gutter until all characters have been laid out.
  208|      0|    if layoutManager.firstUnlaidCharacterIndex() < NSMaxRange(lineMap.lines.last?.range ?? NSRange(location: 0,
  209|      0|                                                                                                   length: 0))
  210|      0|    {
  211|      0|
  212|      0|      pendingDrawRect = rect.union(pendingDrawRect ?? CGRect.null)
  213|      0|      return
  214|      0|
  215|      0|    }
  216|      0|
  217|      0|    theme.backgroundColour.setFill()
  218|      0|    OSBezierPath(rect: rect).fill()
  219|      0|    let desc = OSFont.systemFont(ofSize: theme.fontSize).fontDescriptor.addingAttributes(
  220|      0|      [ FontDescriptor.AttributeName.featureSettings:
  221|      0|          [
  222|      0|            [
  223|      0|              fontDescriptorFeatureIdentifier: kNumberSpacingType,
  224|      0|              fontDescriptorTypeIdentifier: kMonospacedNumbersSelector,
  225|      0|            ],
  226|      0|            [
  227|      0|              fontDescriptorFeatureIdentifier: kStylisticAlternativesType,
  228|      0|              fontDescriptorTypeIdentifier: kStylisticAltOneOnSelector,  // alt 6 and 9
  229|      0|            ],
  230|      0|            [
  231|      0|              fontDescriptorFeatureIdentifier: kStylisticAlternativesType,
  232|      0|              fontDescriptorTypeIdentifier: kStylisticAltTwoOnSelector,  // alt 4
  233|      0|            ]
  234|      0|          ]
  235|      0|      ]
  236|      0|    )
  237|      0|    #if os(iOS)
  238|      0|    let font = OSFont(descriptor: desc, size: 0)
  239|      0|    #elseif os(macOS)
  240|      0|    let font = OSFont(descriptor: desc, size: 0) ?? OSFont.systemFont(ofSize: 0)
  241|      0|    #endif
  242|      0|
  243|      0|    let selectedLines = textView.selectedLines
  244|      0|
  245|      0|    // Currently only supported on macOS as `UITextView` is less configurable
  246|      0|    #if os(macOS)
  247|      0|
  248|      0|    // Highlight the current line in the gutter
  249|      0|    if let location = textView.insertionPoint {
  250|      0|
  251|      0|      theme.currentLineColour.setFill()
  252|      0|      layoutManager.enumerateFragmentRects(forLineContaining: location){ fragmentRect in
  253|      0|        let intersectionRect = rect.intersection(self.gutterRectFrom(textRect: fragmentRect))
  254|      0|        if !intersectionRect.isEmpty { NSBezierPath(rect: intersectionRect).fill() }
  255|      0|      }
  256|      0|
  257|      0|    }
  258|      0|
  259|      0|    // FIXME: Eventually, we want this in the minimap, too, but `messageView.value.lineFragementRect` is of course
  260|      0|    //        incorrect for the minimap, so we need a more general set up.
  261|      0|    if !isMinimapGutter {
  262|      0|
  263|      0|      // Highlight lines with messages
  264|      0|      for messageView in getMessageViews() {
  265|      0|
  266|      0|        let glyphRange = layoutManager.glyphRange(forBoundingRect: messageView.value.lineFragementRect, in: textContainer),
  267|      0|            index      = layoutManager.characterIndexForGlyph(at: glyphRange.location)
  268|      0|        // TODO: should be filter by char range
  269|      0|        //      if charRange.contains(index) {
  270|      0|
  271|      0|        messageView.value.colour.withAlphaComponent(0.1).setFill()
  272|      0|        layoutManager.enumerateFragmentRects(forLineContaining: index){ fragmentRect in
  273|      0|          let intersectionRect = rect.intersection(self.gutterRectFrom(textRect: fragmentRect))
  274|      0|          if !intersectionRect.isEmpty { NSBezierPath(rect: intersectionRect).fill() }
  275|      0|        }
  276|      0|
  277|      0|  //      }
  278|      0|      }
  279|      0|    }
  280|      0|
  281|      0|    #endif
  282|      0|
  283|      0|    // All visible glyphs and all visible characters that are in the text area to the right of the gutter view
  284|      0|    let glyphRange = layoutManager.glyphRange(forBoundingRectWithoutAdditionalLayout: textRectFrom(gutterRect: rect),
  285|      0|                                              in: textContainer),
  286|      0|        charRange  = layoutManager.characterRange(forGlyphRange: glyphRange, actualGlyphRange: nil)
  287|      0|
  288|      0|    // Draw line numbers unless this is a gutter for a minimap
  289|      0|    if !isMinimapGutter {
  290|      0|
  291|      0|      let lineRange = lineMap.linesOf(range: charRange)
  292|      0|
  293|      0|      // Text attributes for the line numbers
  294|      0|      let lineNumberStyle = NSMutableParagraphStyle()
  295|      0|      lineNumberStyle.alignment = .right
  296|      0|      lineNumberStyle.tailIndent = -theme.fontSize / 11
  297|      0|      let textAttributesDefault  = [NSAttributedString.Key.font: font,
  298|      0|                                    .foregroundColor: lineNumberColour,
  299|      0|                                    .paragraphStyle: lineNumberStyle,
  300|      0|                                    .kern: NSNumber(value: Float(-theme.fontSize / 11))],
  301|      0|          textAttributesSelected = [NSAttributedString.Key.font: font,
  302|      0|                                    .foregroundColor: theme.textColour,
  303|      0|                                    .paragraphStyle: lineNumberStyle,
  304|      0|                                    .kern: NSNumber(value: Float(-theme.fontSize / 11))]
  305|      0|
  306|      0|      // TODO: CodeEditor needs to be parameterised by message theme
  307|      0|      let theme = Message.defaultTheme
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView06GutterC0C4drawyySo6CGRectVFSo7NSColorC6colour_7SwiftUI5ImageV4icontAA7MessageV8CategoryOcAOmcfu2_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView06GutterC0C4drawyySo6CGRectVFSo7NSColorC6colour_7SwiftUI5ImageV4icontAA7MessageV8CategoryOcAOmcfu2_AhI_AlMtAQcfu3_
  ------------------
  308|      0|
  309|      0|      for line in lineRange {
  310|      0|
  311|      0|        // NB: We adjust the range, so that in case of a trailing empty line that last line break is not included in
  312|      0|        //     the second to last line (as otherwise, the bounding rect will contain both the second to last and last
  313|      0|        //     line together).
  314|      0|        let lineCharRange     = lineMap.lines[line].range,
  315|      0|            lineGlyphRange    = layoutManager.glyphRange(forCharacterRange: lineCharRange, actualCharacterRange: nil),
  316|      0|            lineGlyphRect     = layoutManager.boundingRect(forGlyphRange: lineGlyphRange, in: textContainer),
  317|      0|            gutterRect        = gutterRectForLineNumbersFrom(textRect: lineGlyphRect)
  318|      0|
  319|      0|        var attributes = selectedLines.contains(line) ? textAttributesSelected : textAttributesDefault
  320|      0|
  321|      0|        #if os(iOS)
  322|      0|
  323|      0|        // Highlight line numbers as we don't have line background highlighting on iOS.
  324|      0|        if let messageBundle = lineMap.lines[line].info?.messages
  325|      0|        {
  326|      0|          let themeColour = theme(messagesByCategory(messageBundle.messages)[0].key).colour,
  327|      0|              colour      = selectedLines.contains(line) ? themeColour : themeColour.withAlphaComponent(0.5)
  328|      0|          attributes.updateValue(colour, forKey: .foregroundColor)
  329|      0|        }
  330|      0|
  331|      0|        #endif
  332|      0|
  333|      0|        ("\(line)" as NSString).draw(in: gutterRect, withAttributes: attributes)
  334|      0|      }
  335|      0|    }
  336|      0|
  337|      0|  }
  338|       |}
  339|       |
  340|       |extension GutterView {
  341|       |
  342|       |  /// Compute the full width rectangle in the gutter from a text container rectangle, such that they both have the same
  343|       |  /// vertical extension.
  344|       |  ///
  345|      0|  private func gutterRectFrom(textRect: CGRect) -> CGRect {
  346|      0|    return CGRect(origin: CGPoint(x: 0, y: textRect.origin.y + textView.textContainerOrigin.y),
  347|      0|                  size: CGSize(width: frame.size.width, height: textRect.size.height))
  348|      0|  }
  349|       |
  350|       |  /// Compute the line number glyph rectangle in the gutter from a text container rectangle, such that they both have
  351|       |  /// the same vertical extension.
  352|       |  ///
  353|      0|  private func gutterRectForLineNumbersFrom(textRect: CGRect) -> CGRect {
  354|      0|    let gutterRect = gutterRectFrom(textRect: textRect)
  355|      0|    return CGRect(x: gutterRect.origin.x + gutterRect.size.width * 2/7,
  356|      0|                  y: gutterRect.origin.y,
  357|      0|                  width: gutterRect.size.width * 4/7,
  358|      0|                  height: gutterRect.size.height)
  359|      0|  }
  360|       |
  361|       |  /// Compute the full width rectangle in the text container from a gutter rectangle, such that they both have the same
  362|       |  /// vertical extension.
  363|       |  ///
  364|      0|  private func textRectFrom(gutterRect: CGRect) -> CGRect {
  365|      0|    let containerWidth = optTextContainer?.size.width ?? 0
  366|      0|    return CGRect(origin: CGPoint(x: frame.size.width, y: gutterRect.origin.y - textView.textContainerOrigin.y),
  367|      0|                  size: CGSize(width:
  368|      0|                                containerWidth - frame.size.width,
  369|      0|                               height: gutterRect.size.height))
  370|      0|  }
  371|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/LanguageConfiguration.swift:
    1|       |//
    2|       |//  LanguageConfiguration.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 03/11/2020.
    6|       |//
    7|       |//  Language configurations determine the linguistic characteristics that are important for the editing and display of
    8|       |//  code in the respective languages, such as comment syntax, bracketing syntax, and syntax highlighting
    9|       |//  characteristics.
   10|       |//
   11|       |//  We adapt a two-stage approach to syntax highlighting. In the first stage, basic context-free syntactic constructs
   12|       |//  are being highlighted. In the second stage, contextual highlighting is performed on top of the highlighting from
   13|       |//  stage one. The second stage relies on information from a code analysis subsystem, such as SourceKit.
   14|       |//
   15|       |//  Curent support here is only for the first stage.
   16|       |
   17|       |#if os(iOS)
   18|       |import UIKit
   19|       |#elseif os(macOS)
   20|       |import AppKit
   21|       |#endif
   22|       |
   23|       |
   24|       |/// Specifies the language-dependent aspects of a code editor.
   25|       |///
   26|       |public struct LanguageConfiguration {
   27|       |
   28|       |  /// Supported flavours of tokens
   29|       |  ///
   30|       |  enum Token {
   31|       |    case roundBracketOpen
   32|       |    case roundBracketClose
   33|       |    case squareBracketOpen
   34|       |    case squareBracketClose
   35|       |    case curlyBracketOpen
   36|       |    case curlyBracketClose
   37|       |    case string
   38|       |    case character
   39|       |    case number
   40|       |    case singleLineComment
   41|       |    case nestedCommentOpen
   42|       |    case nestedCommentClose
   43|       |    case identifier
   44|       |    case keyword
   45|       |
   46|      0|    var isOpenBracket: Bool {
   47|      0|      switch self {
   48|      0|      case .roundBracketOpen, .squareBracketOpen, .curlyBracketOpen, .nestedCommentOpen: return true
   49|      0|      default:                                                                           return false
   50|      0|      }
   51|      0|    }
   52|       |
   53|      0|    var isCloseBracket: Bool {
   54|      0|      switch self {
   55|      0|      case .roundBracketClose, .squareBracketClose, .curlyBracketClose, .nestedCommentClose: return true
   56|      0|      default:                                                                               return false
   57|      0|      }
   58|      0|    }
   59|       |
   60|      0|    var matchingBracket: Token? {
   61|      0|      switch self {
   62|      0|      case .roundBracketOpen:   return .roundBracketClose
   63|      0|      case .squareBracketOpen:  return .squareBracketClose
   64|      0|      case .curlyBracketOpen:   return .curlyBracketClose
   65|      0|      case .nestedCommentOpen:  return .nestedCommentClose
   66|      0|      case .roundBracketClose:  return .roundBracketOpen
   67|      0|      case .squareBracketClose: return .squareBracketOpen
   68|      0|      case .curlyBracketClose:  return .curlyBracketOpen
   69|      0|      case .nestedCommentClose: return .nestedCommentOpen
   70|      0|      default:                  return nil
   71|      0|      }
   72|      0|    }
   73|       |
   74|      0|    var isComment: Bool {
   75|      0|      switch self {
   76|      0|      case .singleLineComment:  return true
   77|      0|      case .nestedCommentOpen:  return true
   78|      0|      case .nestedCommentClose: return true
   79|      0|      default:                  return false
   80|      0|      }
   81|      0|    }
   82|       |  }
   83|       |
   84|       |  /// Tokeniser state
   85|       |  ///
   86|       |  enum State: TokeniserState {
   87|       |    case tokenisingCode
   88|       |    case tokenisingComment(Int)   // the argument gives the comment nesting depth > 0
   89|       |
   90|       |    enum Tag: Hashable { case tokenisingCode; case tokenisingComment }
   91|       |
   92|       |    typealias StateTag = Tag
   93|       |
   94|      0|    var tag: Tag {
   95|      0|      switch self {
   96|      0|      case .tokenisingCode:       return .tokenisingCode
   97|      0|      case .tokenisingComment(_): return .tokenisingComment
   98|      0|      }
   99|      0|    }
  100|       |  }
  101|       |
  102|       |  /// Lexeme pair for a bracketing construct
  103|       |  ///
  104|       |  public typealias BracketPair = (open: String, close: String)
  105|       |
  106|       |  /// Regular expression matching strings
  107|       |  ///
  108|       |  public let stringRegexp: String?
  109|       |
  110|       |  /// Regular expression matching character literals
  111|       |  ///
  112|       |  public let characterRegexp: String?
  113|       |
  114|       |  /// Regular expression matching numbers
  115|       |  ///
  116|       |  public let numberRegexp: String?
  117|       |
  118|       |  /// Lexeme that introduces a single line comment
  119|       |  ///
  120|       |  public let singleLineComment: String?
  121|       |
  122|       |  /// A pair of lexemes that encloses a nested comment
  123|       |  ///
  124|       |  public let nestedComment: BracketPair?
  125|       |
  126|       |  /// Regular expression matching all identifiers (even if they are subgroupings)
  127|       |  ///
  128|       |  public let identifierRegexp: String?
  129|       |
  130|       |  /// Reserved identifiers (this does not include contextual keywords)
  131|       |  ///
  132|       |  public let reservedIdentifiers: [String]
  133|       |
  134|       |  public init(stringRegexp: String?,
  135|       |              characterRegexp: String?,
  136|       |              numberRegexp: String?,
  137|       |              singleLineComment: String?,
  138|       |              nestedComment: LanguageConfiguration.BracketPair?,
  139|       |              identifierRegexp: String?,
  140|       |              reservedIdentifiers: [String])
  141|      0|  {
  142|      0|    self.stringRegexp         = stringRegexp
  143|      0|    self.characterRegexp      = characterRegexp
  144|      0|    self.numberRegexp         = numberRegexp
  145|      0|    self.singleLineComment    = singleLineComment
  146|      0|    self.nestedComment        = nestedComment
  147|      0|    self.identifierRegexp     = identifierRegexp
  148|      0|    self.reservedIdentifiers  = reservedIdentifiers
  149|      0|  }
  150|       |
  151|       |  /// Yields the lexeme of the given token under this language configuration if the token has got a unique lexeme.
  152|       |  ///
  153|      0|  func lexeme(of token: Token) -> String? {
  154|      0|    switch token {
  155|      0|    case .roundBracketOpen:   return "("
  156|      0|    case .roundBracketClose:  return ")"
  157|      0|    case .squareBracketOpen:  return "["
  158|      0|    case .squareBracketClose: return "]"
  159|      0|    case .curlyBracketOpen:   return "{"
  160|      0|    case .curlyBracketClose:  return "}"
  161|      0|    case .string:             return nil
  162|      0|    case .character:          return nil
  163|      0|    case .number:             return nil
  164|      0|    case .singleLineComment:  return singleLineComment
  165|      0|    case .nestedCommentOpen:  return nestedComment?.open
  166|      0|    case .nestedCommentClose: return nestedComment?.close
  167|      0|    case .identifier:         return nil
  168|      0|    case .keyword:            return nil
  169|      0|    }
  170|      0|  }
  171|       |}
  172|       |
  173|       |extension LanguageConfiguration {
  174|       |
  175|       |  /// Empty language configuration
  176|       |  ///
  177|       |  public static let none = LanguageConfiguration(stringRegexp: nil,
  178|       |                                                 characterRegexp: nil,
  179|       |                                                 numberRegexp: nil,
  180|       |                                                 singleLineComment: nil,
  181|       |                                                 nestedComment: nil,
  182|       |                                                 identifierRegexp: nil,
  183|       |                                                 reservedIdentifiers: [])
  184|       |
  185|       |}
  186|       |
  187|       |extension LanguageConfiguration {
  188|       |
  189|       |  // General purpose numeric literals
  190|       |  public static let binaryLit    = "(?:[01]_*)+"
  191|       |  public static let octalLit     = "(?:[0-7]_*)+"
  192|       |  public static let decimalLit   = "(?:[0-9]_*)+"
  193|       |  public static let hexalLit     = "(?:[0-9A-Fa-f]_*)+"
  194|       |  public static let optNegation  = "(?:\\B-|\\b)"
  195|       |  public static let exponentLit  = "[eE](?:[+-])?" + decimalLit
  196|       |  public static let hexponentLit = "[pP](?:[+-])?" + decimalLit
  197|       |
  198|       |  // Identifier components following the Swift 5.4 reference
  199|       |  public static let identifierHeadCharSwift
  200|       |    = "["
  201|       |    + "[a-zA-Z_]"
  202|       |    + "[\u{00A8}\u{00AA}\u{00AD}\u{00AF}\u{00B2}–\u{00B5}\u{00B7}–\u{00BA}]"
  203|       |    + "[\u{00BC}–\u{00BE}\u{00C0}–\u{00D6}\u{00D8}–\u{00F6}\u{00F8}–\u{00FF}]"
  204|       |    + "[\u{0100}–\u{02FF}\u{0370}–\u{167F}\u{1681}–\u{180D}\u{180F}–\u{1DBF}]"
  205|       |    + "[\u{1E00}–\u{1FFF}]"
  206|       |    + "[\u{200B}–\u{200D}\u{202A}–\u{202E}\u{203F}–\u{2040}\u{2054}\u{2060}–\u{206F}]"
  207|       |    + "[\u{2070}–\u{20CF}\u{2100}–\u{218F}\u{2460}–\u{24FF}\u{2776}–\u{2793}]"
  208|       |    + "[\u{2C00}–\u{2DFF}\u{2E80}–\u{2FFF}]"
  209|       |    + "[\u{3004}–\u{3007}\u{3021}–\u{302F}\u{3031}–\u{303F}\u{3040}–\u{D7FF}]"
  210|       |    + "[\u{F900}–\u{FD3D}\u{FD40}–\u{FDCF}\u{FDF0}–\u{FE1F}\u{FE30}–\u{FE44}]"
  211|       |    + "[\u{FE47}–\u{FFFD}]"
  212|       |    + "[\u{10000}–\u{1FFFD}\u{20000}–\u{2FFFD}\u{30000}–\u{3FFFD}\u{40000}–\u{4FFFD}]"
  213|       |    + "[\u{50000}–\u{5FFFD}\u{60000}–\u{6FFFD}\u{70000}–\u{7FFFD}\u{80000}–\u{8FFFD}]"
  214|       |    + "[\u{90000}–\u{9FFFD}\u{A0000}–\u{AFFFD}\u{B0000}–\u{BFFFD}\u{C0000}–\u{CFFFD}]"
  215|       |    + "[\u{D0000}–\u{DFFFD}\u{E0000}–\u{EFFFD}]"
  216|       |    + "]"
  217|       |  public static let identifierBodyCharSwift
  218|       |    = "["
  219|       |    + "[0-9]"
  220|       |    + "[\u{0300}–\u{036F}\u{1DC0}–\u{1DFF}\u{20D0}–\u{20FF}\u{FE20}–\u{FE2F}]"
  221|       |    + "]"
  222|       |
  223|       |  /// Wrap a regular expression into grouping brackets.
  224|       |  ///
  225|      0|  public static func group(_ regexp: String) -> String { "(?:" + regexp + ")" }
  226|       |
  227|       |  /// COmpose an array of regular expressions as alternatives.
  228|       |  ///
  229|      0|  public static func alternatives(_ alts: [String]) -> String { alts.map{ group($0) }.joined(separator: "|") }
  230|       |}
  231|       |
  232|       |
  233|       |private let haskellReservedIds =
  234|       |  ["case", "class", "data", "default", "deriving", "do", "else", "foreign", "if", "import", "in", "infix", "infixl",
  235|       |   "infixr", "instance", "let", "module", "newtype", "of", "then", "type", "where"]
  236|       |
  237|       |extension LanguageConfiguration {
  238|       |
  239|       |  /// Language configuration for Haskell (including GHC extensions)
  240|       |  ///
  241|       |  public static let haskell = LanguageConfiguration(stringRegexp: "\"(?:\\\\\"|[^\"])*+\"",
  242|       |                                                    characterRegexp: "'(?:\\\\'|[^']|\\\\[^']*+)'",
  243|       |                                                    numberRegexp:
  244|       |                                                      optNegation +
  245|       |                                                      group(alternatives([
  246|       |                                                        "0[bB]" + binaryLit,
  247|       |                                                        "0[oO]" + octalLit,
  248|       |                                                        "0[xX]" + hexalLit,
  249|       |                                                        "0[xX]" + hexalLit + "\\." + hexalLit + hexponentLit + "?",
  250|       |                                                        decimalLit + "\\." + decimalLit + exponentLit + "?",
  251|       |                                                        decimalLit + exponentLit,
  252|       |                                                        decimalLit
  253|       |                                                      ])),
  254|       |                                                    singleLineComment: "--",
  255|       |                                                    nestedComment: (open: "{-", close: "-}"),
  256|       |                                                    identifierRegexp:
  257|       |                                                      identifierHeadCharSwift +
  258|       |                                                      group(alternatives([
  259|       |                                                        identifierHeadCharSwift,
  260|       |                                                        identifierBodyCharSwift,
  261|       |                                                        "'"
  262|       |                                                      ])) + "*",
  263|       |                                                    reservedIdentifiers: haskellReservedIds)
  264|       |
  265|       |}
  266|       |
  267|       |private let swiftReservedIds =
  268|       |  ["actor", "associatedtype", "async", "await", "as", "break", "case", "catch", "class", "continue", "default", "defer",
  269|       |   "deinit", "do", "else", "enum", "extension", "fallthrough", "fileprivate", "for", "func", "guard", "if", "import",
  270|       |   "init", "inout", "internal", "in", "is", "let", "operator", "precedencegroup", "private", "protocol", "public",
  271|       |   "repeat", "rethrows", "return", "self", "static", "struct", "subscript", "super", "switch", "throws", "throw", "try",
  272|       |   "typealias", "var", "where", "while"]
  273|       |
  274|       |extension LanguageConfiguration {
  275|       |
  276|       |  /// Language configuration for Swift
  277|       |  ///
  278|       |  public static let swift = LanguageConfiguration(stringRegexp: "\"(?:\\\\\"|[^\"])*+\"",
  279|       |                                                  characterRegexp: nil,
  280|       |                                                  numberRegexp:
  281|       |                                                    optNegation +
  282|       |                                                    group(alternatives([
  283|       |                                                      "0b" + binaryLit,
  284|       |                                                      "0o" + octalLit,
  285|       |                                                      "0x" + hexalLit,
  286|       |                                                      "0x" + hexalLit + "\\." + hexalLit + hexponentLit + "?",
  287|       |                                                      decimalLit + "\\." + decimalLit + exponentLit + "?",
  288|       |                                                      decimalLit + exponentLit,
  289|       |                                                      decimalLit
  290|       |                                                    ])),
  291|       |                                                  singleLineComment: "//",
  292|       |                                                  nestedComment: (open: "/*", close: "*/"),
  293|       |                                                  identifierRegexp:
  294|       |                                                    alternatives([
  295|       |                                                      identifierHeadCharSwift +
  296|       |                                                        group(alternatives([
  297|       |                                                          identifierHeadCharSwift,
  298|       |                                                          identifierBodyCharSwift,
  299|       |                                                        ])) + "*",
  300|       |                                                      "`" + identifierHeadCharSwift +
  301|       |                                                        group(alternatives([
  302|       |                                                          identifierHeadCharSwift,
  303|       |                                                          identifierBodyCharSwift,
  304|       |                                                        ])) + "*`",
  305|       |                                                      "\\\\$" + decimalLit,
  306|       |                                                      "\\\\$" + identifierHeadCharSwift +
  307|       |                                                        group(alternatives([
  308|       |                                                          identifierHeadCharSwift,
  309|       |                                                          identifierBodyCharSwift,
  310|       |                                                        ])) + "*"
  311|       |                                                    ]),
  312|       |                                                  reservedIdentifiers: swiftReservedIds)
  313|       |
  314|       |}
  315|       |
  316|       |extension LanguageConfiguration {
  317|       |
  318|       |  func token(_ token: LanguageConfiguration.Token)
  319|       |    -> (token: LanguageConfiguration.Token, transition: ((LanguageConfiguration.State) -> LanguageConfiguration.State)?)
  320|      0|  {
  321|      0|    return (token: token, transition: nil)
  322|      0|  }
  323|       |
  324|      0|  func incNestedComment(state: LanguageConfiguration.State) -> LanguageConfiguration.State {
  325|      0|    switch state {
  326|      0|    case .tokenisingCode:           return .tokenisingComment(1)
  327|      0|    case .tokenisingComment(let n): return .tokenisingComment(n + 1)
  328|      0|    }
  329|      0|  }
  330|       |
  331|      0|  func decNestedComment(state: LanguageConfiguration.State) -> LanguageConfiguration.State {
  332|      0|    switch state {
  333|      0|    case .tokenisingCode:          return .tokenisingCode
  334|      0|    case .tokenisingComment(let n)
  335|      0|          where n > 1:             return .tokenisingComment(n - 1)
  336|      0|    case .tokenisingComment(_):    return .tokenisingCode
  337|      0|    }
  338|      0|  }
  339|       |
  340|      0|  var tokenDictionary: TokenDictionary<LanguageConfiguration.Token, LanguageConfiguration.State> {
  341|      0|
  342|      0|    var tokenDictionary = TokenDictionary<LanguageConfiguration.Token, LanguageConfiguration.State>()
  343|      0|
  344|      0|    // Populate the token dictionary for the code state (tokenising plain code)
  345|      0|    //
  346|      0|    var codeTokenDictionary = [TokenPattern: TokenAction<LanguageConfiguration.Token, LanguageConfiguration.State>]()
  347|      0|
  348|      0|    codeTokenDictionary.updateValue(token(.roundBracketOpen), forKey: .string("("))
  349|      0|    codeTokenDictionary.updateValue(token(.roundBracketClose), forKey: .string(")"))
  350|      0|    codeTokenDictionary.updateValue(token(.squareBracketOpen), forKey: .string("["))
  351|      0|    codeTokenDictionary.updateValue(token(.squareBracketClose), forKey: .string("]"))
  352|      0|    codeTokenDictionary.updateValue(token(.curlyBracketOpen), forKey: .string("{"))
  353|      0|    codeTokenDictionary.updateValue(token(.curlyBracketClose), forKey: .string("}"))
  354|      0|    if let lexeme = stringRegexp { codeTokenDictionary.updateValue(token(.string), forKey: .pattern(lexeme)) }
  355|      0|    if let lexeme = characterRegexp { codeTokenDictionary.updateValue(token(.character), forKey: .pattern(lexeme)) }
  356|      0|    if let lexeme = numberRegexp { codeTokenDictionary.updateValue(token(.number), forKey: .pattern(lexeme)) }
  357|      0|    if let lexeme = singleLineComment {
  358|      0|      codeTokenDictionary.updateValue(token(Token.singleLineComment), forKey: .string(lexeme))
  359|      0|    }
  360|      0|    if let lexemes = nestedComment {
  361|      0|      codeTokenDictionary.updateValue((token: .nestedCommentOpen, transition: incNestedComment),
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21LanguageConfigurationV15tokenDictionarySDyAC5StateO3TagOSDyAA12TokenPatternOAC0J0O0F0_A2FcSg10transitiontGGvgA2FcACcfu_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21LanguageConfigurationV15tokenDictionarySDyAC5StateO3TagOSDyAA12TokenPatternOAC0J0O0F0_A2FcSg10transitiontGGvgA2FcACcfu_A2Fcfu0_
  ------------------
  362|      0|                                      forKey: .string(lexemes.open))
  363|      0|      codeTokenDictionary.updateValue((token: .nestedCommentClose, transition: decNestedComment),
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21LanguageConfigurationV15tokenDictionarySDyAC5StateO3TagOSDyAA12TokenPatternOAC0J0O0F0_A2FcSg10transitiontGGvgA2FcACcfu1_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21LanguageConfigurationV15tokenDictionarySDyAC5StateO3TagOSDyAA12TokenPatternOAC0J0O0F0_A2FcSg10transitiontGGvgA2FcACcfu1_A2Fcfu2_
  ------------------
  364|      0|                                      forKey: .string(lexemes.close))
  365|      0|    }
  366|      0|    if let lexeme = identifierRegexp { codeTokenDictionary.updateValue(token(Token.identifier), forKey: .pattern(lexeme)) }
  367|      0|    for reserved in reservedIdentifiers {
  368|      0|      codeTokenDictionary.updateValue(token(.keyword), forKey: .word(reserved))
  369|      0|    }
  370|      0|
  371|      0|    tokenDictionary.updateValue(codeTokenDictionary, forKey: .tokenisingCode)
  372|      0|
  373|      0|    // Populate the token dictionary for the comment state (tokenising within a nested comment)
  374|      0|    //
  375|      0|    var commentTokenDictionary = [TokenPattern: TokenAction<LanguageConfiguration.Token, LanguageConfiguration.State>]()
  376|      0|
  377|      0|    if let lexemes = nestedComment {
  378|      0|      commentTokenDictionary.updateValue((token: .nestedCommentOpen, transition: incNestedComment),
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21LanguageConfigurationV15tokenDictionarySDyAC5StateO3TagOSDyAA12TokenPatternOAC0J0O0F0_A2FcSg10transitiontGGvgA2FcACcfu3_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21LanguageConfigurationV15tokenDictionarySDyAC5StateO3TagOSDyAA12TokenPatternOAC0J0O0F0_A2FcSg10transitiontGGvgA2FcACcfu3_A2Fcfu4_
  ------------------
  379|      0|                                         forKey: .string(lexemes.open))
  380|      0|      commentTokenDictionary.updateValue((token: .nestedCommentClose, transition: decNestedComment),
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21LanguageConfigurationV15tokenDictionarySDyAC5StateO3TagOSDyAA12TokenPatternOAC0J0O0F0_A2FcSg10transitiontGGvgA2FcACcfu5_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21LanguageConfigurationV15tokenDictionarySDyAC5StateO3TagOSDyAA12TokenPatternOAC0J0O0F0_A2FcSg10transitiontGGvgA2FcACcfu5_A2Fcfu6_
  ------------------
  381|      0|                                         forKey: .string(lexemes.close))
  382|      0|    }
  383|      0|
  384|      0|    tokenDictionary.updateValue(commentTokenDictionary, forKey: .tokenisingComment)
  385|      0|
  386|      0|    return tokenDictionary
  387|      0|  }
  388|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/LineMap.swift:
    1|       |//
    2|       |//  LineMap.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 29/09/2020.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |
   11|       |/// Keeps track of the character ranges and parametric `LineInfo` for all lines in a string.
   12|       |///
   13|       |struct LineMap<LineInfo> {
   14|       |
   15|       |  /// The character range of the line in the underlying string together with additional information if available.
   16|       |  ///
   17|       |  typealias OneLine = (range: NSRange, info: LineInfo?)
   18|       |
   19|       |  /// One entry per line of the underlying string, where `lineMap[0]` is always `NSRange(location: 0, length: 0)` with
   20|       |  /// no extra info.
   21|       |  ///
   22|      0|  var lines: [OneLine] = [(range: NSRange(location: 0, length: 0), info: nil)]
   23|       |
   24|       |  /// MARK: -
   25|       |  /// MARK: Initialisation
   26|       |
   27|       |  /// Direct initialisation for testing.
   28|       |  ///
   29|      0|  init(lines: [OneLine]) { self.lines = lines }
   30|       |
   31|       |  /// Initialise a line map with the string to be mapped.
   32|       |  ///
   33|      0|  init(string: String) { lines.append(contentsOf: linesOf(string: string)) }
   34|       |
   35|       |  // MARK: -
   36|       |  // MARK: Queries
   37|       |
   38|       |  /// Safe lookup of the information pertaining to a given line.
   39|       |  ///
   40|       |  /// - Parameter line: The line to look up.
   41|       |  /// - Returns: The description of the given line if it is within the valid range of the line map.
   42|       |  ///
   43|      0|  func lookup(line: Int) -> OneLine? { return line < lines.count ? lines[line] : nil }
   44|       |
   45|       |  /// Return the character range covered by the given range of lines. Safely handles out of bounds situations.
   46|       |  ///
   47|      0|  func charRangeOf(lines: Range<Int>) -> NSRange {
   48|      0|    let startRange = lookup(line: lines.first ?? 1)?.range ?? NSRange(location: 0, length: 0),
   49|      0|        endRange   = lookup(line: lines.last ?? 1)?.range ?? NSRange(location: 0, length: 0)
   50|      0|    return NSRange(location: startRange.location, length: NSMaxRange(endRange) - startRange.location)
   51|      0|  }
   52|       |
   53|       |  /// Determine the line that contains the characters at the given string index. (Safe to be called with an out of
   54|       |  /// bounds index.)
   55|       |  ///
   56|       |  /// - Parameter index: The string index of the characters whose line we want to determine.
   57|       |  /// - Returns: The line containing the indexed character if the index is within the bounds of the string.
   58|       |  ///
   59|       |  /// - Complexity: This functions asymptotic complexity is logarithmic in the number of lines contained in the line map.
   60|       |  ///
   61|      0|  func lineContaining(index: Int) -> Int? {
   62|      0|    var lineRange = 1..<lines.count
   63|      0|
   64|      0|    while lineRange.count > 1 {
   65|      0|
   66|      0|      let middle = lineRange.startIndex + lineRange.count / 2
   67|      0|      if index < lines[middle].range.location {
   68|      0|
   69|      0|        lineRange = lineRange.startIndex..<middle
   70|      0|
   71|      0|      } else {
   72|      0|
   73|      0|        lineRange = middle..<lineRange.endIndex
   74|      0|
   75|      0|      }
   76|      0|    }
   77|      0|    if lineRange.count == 0 || !lines[lineRange.startIndex].range.contains(index) {
   78|      0|
   79|      0|      return nil
   80|      0|
   81|      0|    } else {
   82|      0|
   83|      0|      return lineRange.startIndex
   84|      0|
   85|      0|    }
   86|      0|  }
   87|       |
   88|       |  /// Determine the line that contains the cursor position specified by the given string index. (Safe to be called with
   89|       |  /// an out of bounds index.)
   90|       |  ///
   91|       |  /// Corresponds to `lineContaining(index:)`, but also handles the index just after the last valid string index — i.e.,
   92|       |  /// the end-of-string insertion point.
   93|       |  ///
   94|       |  /// - Parameter index: The string index of the cursor position whose line we want to determine.
   95|       |  /// - Returns: The line containing the given cursor poisition if the index is within the bounds of the string or
   96|       |  ///            just beyond.
   97|       |  ///
   98|       |  /// - Complexity: This functions asymptotic complexity is logarithmic in the number of lines contained in the line
   99|       |  ///               map.
  100|       |  ///
  101|      0|  func lineOf(index: Int) -> Int? {
  102|      0|    if let lastLine = lines.last, NSMaxRange(lastLine.range) == index { return lines.count - 1 }
  103|      0|    else { return lineContaining(index: index) }
  104|      0|  }
  105|       |
  106|       |  /// Given a character range, return the smallest line range that includes the characters. Deal with out of bounds
  107|       |  /// conditions by clipping to the front and end of the line range, respectively.
  108|       |  ///
  109|       |  /// - Parameter range: The character range for which we want to know the line range.
  110|       |  /// - Returns: The smallest range of lines that includes all characters in the given character range. The start value
  111|       |  ///     of that range is greater or equal 1.
  112|       |  ///
  113|       |  /// There are two special cases:
  114|       |  /// - If (1) the range is empty, (2) its location (= insertion) at the end of the string, and (3) the text ends on a
  115|       |  ///   trailing empty line, the result is the trailing line on its own.
  116|       |  /// - If the character range is of length zero, we return the line of the start location. We do that also if the start
  117|       |  ///   location is just behind the last character of the text.
  118|       |  ///
  119|      0|  func linesContaining(range: NSRange) -> Range<Int> {
  120|      0|    let
  121|      0|      start         = range.location < 0 ? 0 : range.location,
  122|      0|      end           = range.length <= 0 ? start : NSMaxRange(range) - 1,
  123|      0|      startLine     = lineOf(index: start),
  124|      0|      endLine       = lineContaining(index: end),
  125|      0|      lastLine      = lines.count - 1,
  126|      0|      lastLineRange = lines[lastLine].range
  127|      0|
  128|      0|    if let startLine = startLine {
  129|      0|
  130|      0|      if range.length < 0 { return startLine..<startLine }
  131|      0|      else if range == lastLineRange { return Range<Int>(lastLine...lastLine) }
  132|      0|      else { return Range<Int>(startLine...(endLine ?? lastLine)) }
  133|      0|
  134|      0|    } else {
  135|      0|
  136|      0|      if range.location < 0 { return 0..<0 } else { return lastLine..<lastLine }
  137|      0|
  138|      0|    }
  139|      0|  }
  140|       |
  141|       |  /// Given a character range, return the smallest line range that includes the characters plus maybe a trailing empty
  142|       |  /// line. Deal with out of bounds conditions by clipping to the front and end of the line range, respectively.
  143|       |  ///
  144|       |  /// - Parameter range: The character range for which we want to know the line range.
  145|       |  /// - Returns: The smallest range of lines that includes all characters in the given character range. The start value
  146|       |  ///     of that range is greater or equal 1.
  147|       |  ///
  148|       |  /// There are two special cases:
  149|       |  /// - If the character range extends until the end of the text and the last line is a trailing empty line, that
  150|       |  ///   trailing empty line is also included in the result. This behaviour distinguished the present function from
  151|       |  ///   `linesContaining(range:)`, on which it is based.
  152|       |  /// - If the character range is of length zero, we return the line of the start location. We do that also if the start
  153|       |  ///   location is just behind the last character of the text.
  154|       |  ///
  155|      0|  func linesOf(range: NSRange) -> Range<Int> {
  156|      0|    let lastLine      = lines.count - 1,
  157|      0|        lastLineRange = lines[lastLine].range
  158|      0|
  159|      0|    if NSMaxRange(range) == lastLineRange.location && lastLineRange.length == 0 {
  160|      0|
  161|      0|      // Range reaches to the end of text => extend 'endLine' to 'lastLine'
  162|      0|      return Range<Int>(linesContaining(range: range).startIndex...lastLine)
  163|      0|
  164|      0|    } else {
  165|      0|
  166|      0|      return linesContaining(range: range)
  167|      0|
  168|      0|    }
  169|      0|  }
  170|       |
  171|       |  /// Compute the lines affected by an editing activity.
  172|       |  ///
  173|       |  /// - Parameters:
  174|       |  ///   - editedRange: The character range that was affected by editing (after the edit).
  175|       |  ///   - delta: The length increase of the edited string (negative if it got shorter).
  176|       |  /// - Returns: The range of lines (of the original string) that is affected by the editing action.
  177|       |  ///
  178|      0|  func linesAffected(by editedRange: NSRange, changeInLength delta: Int) -> Range<Int> {
  179|      0|
  180|      0|    // To compute the line range, we extend the character range by one extra character. This is crucial as, if the
  181|      0|    // edited range ends on a newline, this may insert a new line break, which means, line *after* the new line break
  182|      0|    // also belongs to the affected lines.
  183|      0|    //
  184|      0|    let oldStringRange = NSRange(location: 0, length: NSMaxRange(lines.last?.range ?? NSRange(location: 0, length: 0)))
  185|      0|
  186|      0|    return linesOf(range: extend(range: NSRange(location: editedRange.location,
  187|      0|                                                length: editedRange.length - delta), clippingTo: oldStringRange))
  188|      0|  }
  189|       |
  190|       |  // MARK: -
  191|       |  // MARK: Editing
  192|       |
  193|       |  /// Set the info field for the given line.
  194|       |  ///
  195|       |  /// - Parameters:
  196|       |  ///   - line: The line whose info field ought to be set.
  197|       |  ///   - info: The new info value for that line.
  198|       |  ///
  199|       |  ///   NB: Ignores lines that do not exist.
  200|       |  ///
  201|      0|  mutating func setInfoOf(line: Int, to info: LineInfo?) {
  202|      0|    guard line < lines.count else { return }
  203|      0|
  204|      0|    lines[line] = (range: lines[line].range, info: info)
  205|      0|  }
  206|       |
  207|       |  /// Update line map given the specified editing activity of the underlying string. It resets the info field for each
  208|       |  /// affected line.
  209|       |  ///
  210|       |  /// - Parameters:
  211|       |  ///   - string: The string after editing.
  212|       |  ///   - editedRange: The character range that was affected by editing (after the edit).
  213|       |  ///   - delta: The length increase of the edited string (negative if it got shorter).
  214|       |  ///
  215|       |  /// NB: The line after the `editedRange` will be updated (and info fields be invalidated) if the `editedRange` ends on
  216|       |  ///     a newline.
  217|       |  ///
  218|      0|  mutating func updateAfterEditing(string: String, range editedRange: NSRange, changeInLength delta: Int) {
  219|      0|
  220|      0|    // To compute line ranges, we extend all character ranges by one extra character. This is crucial as, if the
  221|      0|    // edited range ends on a newline, this may insert a new line break, which means, we also need to update the line
  222|      0|    // *after* the new line break.
  223|      0|    //
  224|      0|    let newStringRange = NSRange(location: 0, length: string.count),
  225|      0|        nsString       = string as NSString,
  226|      0|        oldLinesRange  = linesAffected(by: editedRange, changeInLength: delta),
  227|      0|        newLinesRange  = nsString.lineRange(for: extend(range: editedRange,
  228|      0|                                                        clippingTo: newStringRange)),
  229|      0|        newLinesString = nsString.substring(with: newLinesRange),
  230|      0|        newLines       = linesOf(string: newLinesString).map{ shift(line: $0, by: newLinesRange.location) }
  231|      0|
  232|      0|    // If the newly inserted text ends on a new line, we need to remove the empty trailing line in the new lines array
  233|      0|    // unless the range of those lines extends until the end of the string.
  234|      0|    let dropEmptyNewLine = newLines.last?.range.length == 0 && NSMaxRange(newLinesRange) < string.count,
  235|      0|        adjustedNewLines = dropEmptyNewLine ? newLines.dropLast() : newLines
  236|      0|
  237|      0|    lines.replaceSubrange(oldLinesRange, with: adjustedNewLines)
  238|      0|
  239|      0|    // All ranges after the edited range of lines need to be adjusted.
  240|      0|    //
  241|      0|    for i in oldLinesRange.startIndex.advanced(by: adjustedNewLines.count) ..< lines.count {
  242|      0|      lines[i] = shift(line: lines[i], by: delta)
  243|      0|    }
  244|      0|  }
  245|       |
  246|       |  // MARK: -
  247|       |  // MARK: Helpers
  248|       |
  249|       |  /// Shift the range of `line` by `delta`.
  250|       |  ///
  251|      0|  private func shift(line: OneLine, by delta: Int) -> OneLine {
  252|      0|    return (range: NSRange(location: line.range.location + delta, length: line.range.length), info: line.info)
  253|      0|  }
  254|       |
  255|       |  /// Extract the corresponding array of line ranges out of the given string.
  256|       |  ///
  257|      0|  private func linesOf(string: String) -> [OneLine] {
  258|      0|    let nsString = string as NSString
  259|      0|
  260|      0|    var resultingLines: [OneLine] = []
  261|      0|
  262|      0|    // Enumerate all lines in `nsString`, adding them to the `resultingLines`.
  263|      0|    //
  264|      0|    var currentIndex = 0
  265|      0|    while currentIndex < nsString.length {
  266|      0|
  267|      0|      let currentRange = nsString.lineRange(for: NSRange(location: currentIndex, length: 0))
  268|      0|      resultingLines.append((range: currentRange, info: nil))
  269|      0|      currentIndex = NSMaxRange(currentRange)
  270|      0|
  271|      0|    }
  272|      0|
  273|      0|    // Check if there is an empty last line (due to a linebreak being at the end of the text), and if so, add that
  274|      0|    // extra empty line to the `resultingLines` as well.
  275|      0|    //
  276|      0|    let lastRange = nsString.lineRange(for: NSRange(location: nsString.length, length: 0))
  277|      0|    if lastRange.length == 0 {
  278|      0|      resultingLines.append((range: lastRange, info: nil))
  279|      0|    }
  280|      0|
  281|      0|    return resultingLines
  282|      0|  }
  283|       |
  284|       |  /// Extend the `range` by one character, clipped by the `stringRange`, but such that a zero length range after the
  285|       |  /// end of the string is preserved.
  286|       |  ///
  287|      0|  private func extend(range: NSRange, clippingTo stringRange: NSRange) -> NSRange {
  288|      0|    return
  289|      0|      range.location == NSMaxRange(stringRange)
  290|      0|      ? NSRange(location: range.location, length: 0)
  291|      0|      : NSIntersectionRange(NSRange(location: range.location, length: range.length + 1), stringRange)
  292|      0|  }
  293|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/Location.swift:
    1|       |//
    2|       |//  Location.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 09/05/2021.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |import System
   10|       |
   11|       |
   12|       |/// Location in a text file.
   13|       |///
   14|       |public struct Location {
   15|       |  public let file:   FilePath
   16|       |  public let line:   Int
   17|       |  public let column: Int
   18|       |
   19|      0|  public init(file: FilePath, line: Int, column: Int) {
   20|      0|    self.file   = file
   21|      0|    self.line   = line
   22|      0|    self.column = column
   23|      0|  }
   24|       |}
   25|       |
   26|       |/// Generic location attribute.
   27|       |///
   28|       |public struct Located<Entity> {
   29|       |  public let location: Location
   30|       |  public let entity:   Entity
   31|       |
   32|      0|  public init(location: Location, entity: Entity) {
   33|      0|    self.location = location
   34|      0|    self.entity   = entity
   35|      0|  }
   36|       |}
   37|       |
   38|       |extension Located: Equatable where Entity: Equatable {
   39|      0|  static public func == (lhs: Located<Entity>, rhs: Located<Entity>) -> Bool {
   40|      0|    lhs.entity == rhs.entity
   41|      0|  }
   42|       |}
   43|       |
   44|       |extension Located: Hashable where Entity: Hashable {
   45|      0|  public func hash(into hasher: inout Hasher) { hasher.combine(entity) }
   46|       |}
   47|       |
   48|       |/// Character span in a text file.
   49|       |///
   50|       |public struct Span {
   51|       |  public let start:     Location
   52|       |  public let endLine:   Int
   53|       |  public let endColumn: Int
   54|       |
   55|      0|  public init(start: Location, endLine: Int, endColumn: Int) {
   56|      0|    self.start = start
   57|      0|    self.endLine = endLine
   58|      0|    self.endColumn = endColumn
   59|      0|  }
   60|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/Message.swift:
    1|       |//
    2|       |//  Message.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 22/03/2021.
    6|       |//
    7|       |//  Messages are messages that can be displayed inline in a code view in short form and as a popup in long form.
    8|       |//  They are bound to a particular primary location by way of line information, by may also include secondary locations
    9|       |//  that contribute to the reported issue. A typical use case is diagnostic information.
   10|       |
   11|       |import Foundation
   12|       |
   13|       |
   14|       |/// A message that can be displayed in a code view.
   15|       |///
   16|       |public struct Message: Identifiable, Hashable {
   17|       |
   18|       |  /// The various category that a message can be in. The earlier in the enumeration, the higher priority in the sense
   19|       |  /// that in the one-line view, the colour of the highest priority message will be used.
   20|       |  ///
   21|       |  public enum Category: Equatable, Comparable, CaseIterable {
   22|       |
   23|       |    /// A message related to live execution (e.g., debugger stepping position).
   24|       |    ///
   25|       |    case live
   26|       |
   27|       |    /// An error — the program cannot be executed.
   28|       |    ///
   29|       |    case error
   30|       |
   31|       |    /// A warning — indicating a possible problem that doesn't prevent execution.
   32|       |    ///
   33|       |    case warning
   34|       |
   35|       |    /// A message without any direct impact on the validity of the program.
   36|       |    ///
   37|       |    case informational
   38|       |  }
   39|       |
   40|       |  /// Unique identity of the message.
   41|       |  ///
   42|      0|  public let id: UUID = UUID()
   43|       |
   44|       |  /// The message category
   45|       |  ///
   46|       |  public let category: Category
   47|       |
   48|       |  /// The number of characters that the message is related to and which ought to be underlined.
   49|       |  ///
   50|       |  public let length: Int
   51|       |
   52|       |  /// Short version of the message (displayed inline and in the popup) — one line only.
   53|       |  ///
   54|       |  public let summary: String
   55|       |
   56|       |  /// Optional long message (only displayed in the popup, but may extend over multiple lines).
   57|       |  ///
   58|       |  public let description: NSAttributedString?
   59|       |
   60|      0|  public init(category: Message.Category, length: Int, summary: String, description: NSAttributedString?) {
   61|      0|    self.category    = category
   62|      0|    self.length      = length
   63|      0|    self.summary     = summary
   64|      0|    self.description = description
   65|      0|  }
   66|       |}
   67|       |
   68|       |/// Order and sort an array of messages by categories.
   69|       |///
   70|      0|func messagesByCategory(_ messages: [Message]) -> [(key: Message.Category, value: [Message])] {
   71|      0|  Array(Dictionary(grouping: messages){ $0.category }).sorted{ $0.key < $1.key }
   72|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/MessageViews.swift:
    1|       |//
    2|       |//  MessageViews.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 23/03/2021.
    6|       |//
    7|       |//  Defines the visuals that present messages, both inline and as popovers.
    8|       |
    9|       |import SwiftUI
   10|       |
   11|       |
   12|       |// MARK: -
   13|       |// MARK: Message category themes
   14|       |
   15|       |extension Message {
   16|       |
   17|       |  /// Defines the colours and icons that identify each of the various message categories.
   18|       |  ///
   19|       |  typealias Theme = (Message.Category) -> (colour: OSColor, icon: Image)
   20|       |
   21|       |  /// The default category theme
   22|       |  ///
   23|      0|  static func defaultTheme(for category: Message.Category) -> (colour: OSColor, icon: Image) {
   24|      0|    switch category {
   25|      0|    case .live:
   26|      0|      return (colour: OSColor.green, icon: Image(systemName: "line.horizontal.3"))
   27|      0|    case .error:
   28|      0|      return (colour: OSColor.red, icon: Image(systemName: "xmark.circle.fill"))
   29|      0|    case .warning:
   30|      0|      return (colour: OSColor.yellow, icon: Image(systemName: "exclamationmark.triangle.fill"))
   31|      0|    case .informational:
   32|      0|      return (colour: OSColor.gray, icon: Image(systemName: "info.circle.fill"))
   33|      0|    }
   34|      0|  }
   35|       |}
   36|       |
   37|       |
   38|       |// MARK: -
   39|       |// MARK: Inline view
   40|       |
   41|       |/// A view that summarises the message for a line, such that it can be displayed on the right hand side of the line.
   42|       |/// The view uses the entire height offered.
   43|       |///
   44|       |/// NB: The array of messages may not be empty.
   45|       |///
   46|       |struct MessageInlineView: View {
   47|       |  let messages: [Message]
   48|       |  let theme:    Message.Theme
   49|       |
   50|      0|  var body: some View {
   51|      0|
   52|      0|    let categories = messagesByCategory(messages).map{ $0.key }
   53|      0|
   54|      0|    GeometryReader { geometryProxy in
   55|      0|
   56|      0|      let height = geometryProxy.size.height
   57|      0|      let colour = Color(theme(categories[0]).colour)
   58|      0|
   59|      0|      HStack {
   60|      0|
   61|      0|        Spacer()
   62|      0|
   63|      0|        HStack(alignment: .center, spacing: 0) {
   64|      0|
   65|      0|          // Category summary
   66|      0|          HStack(alignment: .center, spacing: 0) {
   67|      0|
   68|      0|            // Overall message count
   69|      0|            let count = messages.count
   70|      0|            if count > 1 {
   71|      0|              Text("\(count)")
   72|      0|                .padding([.leading, .trailing], 3)
   73|      0|            }
   74|      0|
   75|      0|            // All category icons
   76|      0|            HStack(alignment: .center, spacing: 0) {
   77|      0|              ForEach(0..<categories.count){ i in
   78|      0|                HStack(alignment: .center, spacing: 0) {
   79|      0|                  theme(categories[i]).icon
   80|      0|                    .padding([.leading, .trailing], 2)
   81|      0|                }
   82|      0|              }
   83|      0|            }
   84|      0|            .padding([.leading, .trailing], 2)
   85|      0|
   86|      0|          }
   87|      0|          .frame(height: height)
   88|      0|          .background(colour.opacity(0.5))
   89|      0|          .roundedCornersOnTheLeft(cornerRadius: 5)
   90|      0|
   91|      0|          // Transparent narrow separator
   92|      0|          Divider()
   93|      0|            .background(Color.clear)
   94|      0|
   95|      0|          // Topmost message of the highest priority category
   96|      0|          HStack {
   97|      0|            Text(messages.filter{ $0.category == categories[0] }.first?.summary ?? "")
   98|      0|              .padding([.leading, .trailing], 5)
   99|      0|          }
  100|      0|          .frame(height: height)
  101|      0|          .background(colour.opacity(0.5))
  102|      0|
  103|      0|        }
  104|      0|      }
  105|      0|    }
  106|      0|  }
  107|       |}
  108|       |
  109|       |
  110|       |// MARK: -
  111|       |// MARK: Popup view
  112|       |
  113|       |
  114|       |/// Key to track the width for a set of message popup views.
  115|       |///
  116|       |private struct PopupWidth: PreferenceKey, EnvironmentKey {
  117|       |
  118|       |  static let defaultValue: CGFloat? = nil
  119|      0|  static func reduce(value: inout CGFloat?, nextValue: () -> CGFloat?) {
  120|      0|    if let nv = nextValue() { value = value.flatMap{ max(nv, $0) } ?? nv }
  121|      0|  }
  122|       |}
  123|       |
  124|       |/// Accessor for the environment value identified by the key.
  125|       |///
  126|       |extension EnvironmentValues {
  127|       |
  128|       |  var popupWidth: CGFloat? {
  129|      0|    get { self[PopupWidth.self] }
  130|      0|    set { self[PopupWidth.self] = newValue }
  131|       |  }
  132|       |}
  133|       |
  134|       |private struct MessageBorder: ViewModifier {
  135|       |  let cornerRadius: CGFloat
  136|       |
  137|      0|  @Environment(\.colorScheme) var colourScheme: ColorScheme
  138|       |
  139|      0|  func body(content: Content) -> some View {
  140|      0|
  141|      0|    let shadowColour = colourScheme == .dark ? Color(.sRGBLinear, white: 0, opacity: 0.66)
  142|      0|                                             : Color(.sRGBLinear, white: 0, opacity: 0.33)
  143|      0|
  144|      0|    if colourScheme == .dark {
  145|      0|      return AnyView(content
  146|      0|                      .shadow(color: shadowColour, radius: 2, y: 2)
  147|      0|                      .overlay(RoundedRectangle(cornerRadius: cornerRadius)
  148|      0|                                .stroke(Color.white.opacity(0.3), lineWidth: 1))
  149|      0|                      .padding(1)
  150|      0|                      .overlay(RoundedRectangle(cornerRadius: cornerRadius)
  151|      0|                                .stroke(Color.black, lineWidth: 1)))
  152|      0|    } else {
  153|      0|      return AnyView(content
  154|      0|                      .shadow(color: shadowColour, radius: 1, y: 1)
  155|      0|                      .overlay(RoundedRectangle(cornerRadius: cornerRadius)
  156|      0|                                .stroke(Color.black.opacity(0.2), lineWidth: 1)))
  157|      0|    }
  158|      0|  }
  159|       |}
  160|       |
  161|       |extension View {
  162|       |
  163|      0|  fileprivate func messageBorder(cornerRadius: CGFloat) -> some View {
  164|      0|    modifier(MessageBorder(cornerRadius: cornerRadius))
  165|      0|  }
  166|       |}
  167|       |
  168|       |/// A view that display all the information of a list of messages.
  169|       |///
  170|       |/// NB: The array of messages may not be empty.
  171|       |///
  172|       |fileprivate struct MessagePopupCategoryView: View {
  173|       |  let category: Message.Category
  174|       |  let messages: [Message]
  175|       |  let theme:    Message.Theme
  176|       |
  177|       |  let cornerRadius: CGFloat = 10
  178|       |
  179|      0|  @Environment(\.colorScheme) var colourScheme: ColorScheme
  180|      0|  @Environment(\.popupWidth)  var popupWidth:   CGFloat?
  181|       |
  182|      0|  var body: some View {
  183|      0|
  184|      0|    let backgroundColour = colourScheme == .dark ? Color.black : Color.white
  185|      0|    let colour           = Color(theme(category).colour)
  186|      0|
  187|      0|    let theActualView =
  188|      0|      HStack(spacing: 0) {
  189|      0|
  190|      0|        // Category icon
  191|      0|        ZStack (alignment: .top) {
  192|      0|          colour.opacity(0.5)
  193|      0|          Text("XX")       // We want the icon to have the height of text
  194|      0|            .hidden()
  195|      0|            .overlay( theme(category).icon.frame(alignment: .center) )
  196|      0|            .padding([.leading, .trailing], 5)
  197|      0|            .padding([.top, .bottom], 3)
  198|      0|        }.fixedSize(horizontal: true, vertical: false)
  199|      0|
  200|      0|        // Vertical stack of message
  201|      0|        VStack(alignment: .leading, spacing: 6) {
  202|      0|          ForEach(0..<messages.count) { i in
  203|      0|            Text(messages[i].summary)
  204|      0|            if let description = messages[i].description { Text(description.string) }
  205|      0|          }
  206|      0|        }
  207|      0|        .padding([.leading, .trailing], 5)
  208|      0|        .padding([.top, .bottom], 3)
  209|      0|        .frame(maxWidth: popupWidth, alignment: .leading)       // Constrain width if `popupWidth` is not `nil`
  210|      0|        .background(colour.opacity(0.3))
  211|      0|        .background(GeometryReader { proxy in                   // Propagate current width up the view tree
  212|      0|          Color.clear.preference(key: PopupWidth.self, value: proxy.size.width)
  213|      0|        })
  214|      0|
  215|      0|      }
  216|      0|
  217|      0|    // The construction with the overlay is necessary to reliably get the theme colour underneath the
  218|      0|    // category icon to extend to vertically fill the available space. Essentially, the first use of
  219|      0|    // `theActualView` calculates the height, which depends on the vertical stack of messages, and inside
  220|      0|    // the overlay, we then just use the previously calculated height.
  221|      0|    theActualView
  222|      0|    .hidden()
  223|      0|    .overlay(theActualView)
  224|      0|    .background(backgroundColour)
  225|      0|    .cornerRadius(cornerRadius)
  226|      0|    .fixedSize(horizontal: false, vertical: true)           // horizontal must wrap and vertical extend
  227|      0|    .messageBorder(cornerRadius: cornerRadius)
  228|      0|  }
  229|       |}
  230|       |
  231|       |struct MessagePopupView: View {
  232|       |  let messages: [Message]
  233|       |  let theme:    Message.Theme
  234|       |
  235|       |  /// The width of the text in the message category with the widest text.
  236|       |  ///
  237|       |  @State private var popupWidth: CGFloat?  = nil
  238|       |
  239|      0|  var body: some View {
  240|      0|
  241|      0|    let categories = messagesByCategory(messages)
  242|      0|
  243|      0|    VStack(spacing: 4) {
  244|      0|      ForEach(0..<categories.count) { i in
  245|      0|        MessagePopupCategoryView(category: categories[i].0, messages: categories[i].1, theme: theme)
  246|      0|      }
  247|      0|    }
  248|      0|    .background(Color.clear)
  249|      0|    .onPreferenceChange(PopupWidth.self) { self.popupWidth = $0 }   // Update the state variable with current width...
  250|      0|    .environment(\.popupWidth, popupWidth)                          // ...and propagate that value down the view tree.
  251|      0|  }
  252|       |}
  253|       |
  254|       |
  255|       |// MARK: -
  256|       |// MARK: Combined view
  257|       |
  258|       |/// SwiftUI view that displays an array of messages that lie on the same line. It supports switching between an inline
  259|       |/// format and a full popup format by clicking/tapping on the message.
  260|       |///
  261|       |struct MessageView: View {
  262|       |  struct Geometry {
  263|       |
  264|       |    /// The maximum width that the inline view may use.
  265|       |    ///
  266|       |    let lineWidth:   CGFloat
  267|       |
  268|       |    /// The height of the inline view
  269|       |    ///
  270|       |    let lineHeight:  CGFloat
  271|       |
  272|       |    /// The maximum width that the popup view may use.
  273|       |    ///
  274|       |    let popupWidth:  CGFloat
  275|       |
  276|       |    /// The distance from the top where the popup view must be placed.
  277|       |    ///
  278|       |    let popupOffset: CGFloat
  279|       |  }
  280|       |
  281|       |  let messages:    [Message]        // The array of messages that are displayed by this view
  282|       |  let theme:       Message.Theme    // The message display theme to use
  283|       |  let geometry:    Geometry
  284|       |
  285|       |  @Binding var unfolded: Bool       // False => inline view; true => popup view
  286|       |
  287|      0|  var body: some View {
  288|      0|
  289|      0|    // Overlaying the two different views (and switching between them by adjusting their opacity ensures that the view
  290|      0|    // is always sized the same and such that it can accomodate both modes).
  291|      0|    ZStack(alignment: .topTrailing) {
  292|      0|
  293|      0|      // We adjust the position of the popup with spacers to ensure that the view frame extends appropriately (this
  294|      0|      // would not be the case if we used `.offset(x:y:)`).
  295|      0|      VStack {
  296|      0|        Spacer(minLength: geometry.popupOffset)
  297|      0|        HStack {
  298|      0|          MessagePopupView(messages: messages, theme: theme)
  299|      0|            .frame(maxWidth: geometry.popupWidth)
  300|      0|            .onTapGesture { unfolded.toggle() }
  301|      0|          Spacer(minLength: MessageView.popupRightSideOffset)
  302|      0|        }
  303|      0|      }
  304|      0|      .opacity(unfolded ? 1.0 : 0.0)
  305|      0|
  306|      0|      MessageInlineView(messages: messages, theme: theme)
  307|      0|        .frame(minWidth: MessageView.minimumInlineWidth, maxWidth: geometry.lineWidth, maxHeight: geometry.lineHeight)
  308|      0|        .transition(.opacity)
  309|      0|        .onTapGesture { unfolded.toggle() }
  310|      0|        .opacity(unfolded ? 0.0 : 1.0)
  311|      0|
  312|      0|    }
  313|      0|  }
  314|       |}
  315|       |
  316|       |extension MessageView {
  317|       |
  318|       |  // FIXME: This should maybe depend on the font size and may need to be configurable.
  319|       |  static let minimumInlineWidth = CGFloat(60)
  320|       |
  321|       |  /// The distance of the popup view from the right side of the text container.
  322|       |  ///
  323|       |  static let popupRightSideOffset = CGFloat(20)
  324|       |}
  325|       |
  326|       |
  327|       |// MARK: -
  328|       |// MARK: Stateful combined view
  329|       |
  330|       |/// SwiftUI view that displays an array of messages that lie on the same line. It supports switching between an inline
  331|       |/// and popup view by tapping.
  332|       |///
  333|       |struct StatefulMessageView: View {
  334|       |  let messages:    [Message]              // The array of messages that are displayed by this view
  335|       |  let theme:       Message.Theme          // The message display theme to use
  336|       |  let geometry:    MessageView.Geometry   // The geometry constrains for the view
  337|       |  let fontSize:    CGFloat                // Font size to use for messages
  338|       |
  339|       |  @ObservedObject var unfolded: ObservableBool  // `true` iff the view shows the popup flavour
  340|       |
  341|       |  /// The unfolding state needs to be communicated between the SwiftUI view and the external world. Hence, we need to
  342|       |  /// go via an `ObservableObject`.
  343|       |  ///
  344|       |  class ObservableBool: ObservableObject {
  345|       |    @Published var bool: Bool
  346|       |
  347|      0|    init(bool: Bool) {
  348|      0|      self.bool = bool
  349|      0|    }
  350|       |  }
  351|       |
  352|      0|  var body: some View {
  353|      0|    MessageView(messages: messages,
  354|      0|                theme: theme,
  355|      0|                geometry: geometry,
  356|      0|                unfolded: $unfolded.bool)
  357|      0|      .font(.system(size: fontSize))
  358|      0|      .fixedSize()    // to enforce intrinsic size in the encapsulating `NSHostingView`
  359|      0|  }
  360|       |}
  361|       |
  362|       |#if os(iOS)
  363|       |
  364|       |extension StatefulMessageView {
  365|       |
  366|       |  class HostingView: UIView {
  367|       |    private var hostingView: UIHostingView<StatefulMessageView>?
  368|       |
  369|       |    private let messages: [Message]
  370|       |    private let theme   : Message.Theme
  371|       |    private let fontSize: CGFloat
  372|       |
  373|       |    /// Unfolding status as sharable state.
  374|       |    ///
  375|       |    private let unfoldedState = StatefulMessageView.ObservableBool(bool: false)
  376|       |
  377|       |    var geometry: MessageView.Geometry {
  378|       |      didSet { reconfigure() }
  379|       |    }
  380|       |    var unfolded: Bool {
  381|       |      get { unfoldedState.bool }
  382|       |      set { unfoldedState.bool = newValue }
  383|       |    }
  384|       |
  385|       |    init(messages: [Message], theme: @escaping Message.Theme, geometry: MessageView.Geometry, fontSize: CGFloat)
  386|       |    {
  387|       |      self.messages = messages
  388|       |      self.theme    = theme
  389|       |      self.geometry = geometry
  390|       |      self.fontSize = fontSize
  391|       |      super.init(frame: .zero)
  392|       |
  393|       |      isOpaque                                  = false
  394|       |      translatesAutoresizingMaskIntoConstraints = false
  395|       |
  396|       |      hostingView = UIHostingView(rootView: StatefulMessageView(messages: messages,
  397|       |                                                                theme: theme,
  398|       |                                                                geometry: geometry,
  399|       |                                                                fontSize: fontSize,
  400|       |                                                                unfolded: unfoldedState))
  401|       |      hostingView?.isOpaque                                  = false
  402|       |      hostingView?.translatesAutoresizingMaskIntoConstraints = false
  403|       |      if let view = hostingView {
  404|       |
  405|       |        addSubview(view)
  406|       |        let constraints = [
  407|       |          view.topAnchor.constraint(equalTo: self.topAnchor),
  408|       |          view.bottomAnchor.constraint(equalTo: self.bottomAnchor),
  409|       |          view.leftAnchor.constraint(equalTo: self.leftAnchor),
  410|       |          view.rightAnchor.constraint(equalTo: self.rightAnchor)
  411|       |        ]
  412|       |        NSLayoutConstraint.activate(constraints)
  413|       |
  414|       |      }
  415|       |    }
  416|       |
  417|       |    @objc required dynamic init?(coder aDecoder: NSCoder) {
  418|       |      fatalError("init(coder:) has not been implemented")
  419|       |    }
  420|       |
  421|       |    private func reconfigure() {
  422|       |      self.hostingView?.rootView = StatefulMessageView(messages: messages,
  423|       |                                                       theme: theme,
  424|       |                                                       geometry: geometry,
  425|       |                                                       fontSize: fontSize,
  426|       |                                                       unfolded: unfoldedState)
  427|       |    }
  428|       |  }
  429|       |}
  430|       |
  431|       |#elseif os(macOS)
  432|       |
  433|       |extension StatefulMessageView {
  434|       |
  435|       |  class HostingView: NSView {
  436|       |    private var hostingView: NSHostingView<StatefulMessageView>?
  437|       |
  438|       |    private let messages: [Message]
  439|       |    private let theme   : Message.Theme
  440|       |    private let fontSize: CGFloat
  441|       |
  442|       |    /// Unfolding status as sharable state.
  443|       |    ///
  444|      0|    private let unfoldedState = StatefulMessageView.ObservableBool(bool: false)
  445|       |
  446|       |    var geometry: MessageView.Geometry {
  447|      0|      didSet { reconfigure() }
  448|       |    }
  449|       |    var unfolded: Bool {
  450|      0|      get { unfoldedState.bool }
  451|      0|      set { unfoldedState.bool = newValue }
  452|       |    }
  453|       |
  454|       |    init(messages: [Message], theme: @escaping Message.Theme, geometry: MessageView.Geometry, fontSize: CGFloat)
  455|      0|    {
  456|      0|      self.messages = messages
  457|      0|      self.theme    = theme
  458|      0|      self.geometry = geometry
  459|      0|      self.fontSize = fontSize
  460|      0|      super.init(frame: .zero)
  461|      0|
  462|      0|      self.translatesAutoresizingMaskIntoConstraints = false
  463|      0|
  464|      0|      self.hostingView = NSHostingView(rootView: StatefulMessageView(messages: messages,
  465|      0|                                                                     theme: theme,
  466|      0|                                                                     geometry: geometry,
  467|      0|                                                                     fontSize: fontSize,
  468|      0|                                                                     unfolded: unfoldedState))
  469|      0|      hostingView?.translatesAutoresizingMaskIntoConstraints = false
  470|      0|      if let view = hostingView {
  471|      0|
  472|      0|        addSubview(view)
  473|      0|        let constraints = [
  474|      0|          view.topAnchor.constraint(equalTo: self.topAnchor),
  475|      0|          view.bottomAnchor.constraint(equalTo: self.bottomAnchor),
  476|      0|          view.leftAnchor.constraint(equalTo: self.leftAnchor),
  477|      0|          view.rightAnchor.constraint(equalTo: self.rightAnchor)
  478|      0|        ]
  479|      0|        NSLayoutConstraint.activate(constraints)
  480|      0|
  481|      0|      }
  482|      0|    }
  483|       |
  484|      0|    @objc required dynamic init?(coder aDecoder: NSCoder) {
  485|      0|      fatalError("init(coder:) has not been implemented")
  486|      0|    }
  487|       |
  488|      0|    private func reconfigure() {
  489|      0|      self.hostingView?.rootView = StatefulMessageView(messages: messages,
  490|      0|                                                       theme: theme,
  491|      0|                                                       geometry: geometry,
  492|      0|                                                       fontSize: fontSize,
  493|      0|                                                       unfolded: unfoldedState)
  494|      0|    }
  495|       |  }
  496|       |}
  497|       |
  498|       |#endif
  499|       |
  500|       |
  501|       |
  502|       |// MARK: -
  503|       |// MARK: Previews
  504|       |
  505|       |let message1 = Message(category: .error, length: 1, summary: "It's wrong!", description: nil),
  506|       |    message2 = Message(category: .error, length: 1, summary: "Need to fix this.", description: nil),
  507|       |    message3 = Message(category: .warning, length: 1, summary: "Looks dodgy.",
  508|       |                       description: NSAttributedString(string: "This doesn't seem right and also totally unclear " +
  509|       |                                                        "what it is supposed to do.")),
  510|       |    message4 = Message(category: .live, length: 1, summary: "Thread 1", description: nil),
  511|       |    message5 = Message(category: .informational, length: 1, summary: "Cool stuff!", description: nil)
  512|       |
  513|       |struct MessageViewPreview: View {
  514|       |  let messages:    [Message]
  515|       |  let theme:       Message.Theme
  516|       |  let geometry:    MessageView.Geometry
  517|       |
  518|       |  @State private var unfolded: Bool = false
  519|       |
  520|      0|  var body: some View {
  521|      0|    MessageView(messages: messages,
  522|      0|                theme: theme,
  523|      0|                geometry: geometry,
  524|      0|                unfolded: $unfolded)
  525|      0|  }
  526|       |}
  527|       |
  528|       |struct MessageViews_Previews: PreviewProvider {
  529|       |
  530|      0|  static var previews: some View {
  531|      0|
  532|      0|    // Inline view
  533|      0|
  534|      0|    MessageInlineView(messages: [message1], theme: Message.defaultTheme)
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu_AfG_AjKtAOcfu0_
  ------------------
  535|      0|      .frame(width: 80, height: 15, alignment: .center)
  536|      0|      .preferredColorScheme(.dark)
  537|      0|
  538|      0|    MessageInlineView(messages: [message1], theme: Message.defaultTheme)
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu1_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu1_AfG_AjKtAOcfu2_
  ------------------
  539|      0|      .frame(width: 80, height: 25, alignment: .center)
  540|      0|      .preferredColorScheme(.dark)
  541|      0|
  542|      0|    VStack{
  543|      0|
  544|      0|      MessageInlineView(messages: [message1, message2], theme: Message.defaultTheme)
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZ7SwiftUI05TupleC0VyAE0C0PAEE20preferredColorSchemeyQrAE0lM0OSgFQOyAiEE5frame5width6height9alignmentQr12CoreGraphics7CGFloatVSg_AuE9AlignmentVtFQOyAA0d6InlineC0V_Qo__Qo__A_tGyXEfU_So7NSColorC6colour_AE5ImageV4icontAA0D0V8CategoryOcA8_mcfu_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZ7SwiftUI05TupleC0VyAE0C0PAEE20preferredColorSchemeyQrAE0lM0OSgFQOyAiEE5frame5width6height9alignmentQr12CoreGraphics7CGFloatVSg_AuE9AlignmentVtFQOyAA0d6InlineC0V_Qo__Qo__A_tGyXEfU_So7NSColorC6colour_AE5ImageV4icontAA0D0V8CategoryOcA8_mcfu_A2_A3__A5_A6_tA10_cfu0_
  ------------------
  545|      0|        .frame(width: 180, height: 15, alignment: .center)
  546|      0|        .preferredColorScheme(.dark)
  547|      0|
  548|      0|      MessageInlineView(messages: [message1, message2, message3], theme: Message.defaultTheme)
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZ7SwiftUI05TupleC0VyAE0C0PAEE20preferredColorSchemeyQrAE0lM0OSgFQOyAiEE5frame5width6height9alignmentQr12CoreGraphics7CGFloatVSg_AuE9AlignmentVtFQOyAA0d6InlineC0V_Qo__Qo__A_tGyXEfU_So7NSColorC6colour_AE5ImageV4icontAA0D0V8CategoryOcA8_mcfu1_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZ7SwiftUI05TupleC0VyAE0C0PAEE20preferredColorSchemeyQrAE0lM0OSgFQOyAiEE5frame5width6height9alignmentQr12CoreGraphics7CGFloatVSg_AuE9AlignmentVtFQOyAA0d6InlineC0V_Qo__Qo__A_tGyXEfU_So7NSColorC6colour_AE5ImageV4icontAA0D0V8CategoryOcA8_mcfu1_A2_A3__A5_A6_tA10_cfu2_
  ------------------
  549|      0|        .frame(width: 180, height: 15, alignment: .center)
  550|      0|        .preferredColorScheme(.dark)
  551|      0|
  552|      0|    }
  553|      0|
  554|      0|    MessageInlineView(messages: [message1, message2, message3], theme: Message.defaultTheme)
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu3_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu3_AfG_AjKtAOcfu4_
  ------------------
  555|      0|      .frame(width: 180, height: 15, alignment: .center)
  556|      0|      .preferredColorScheme(.light)
  557|      0|
  558|      0|    // Popup view
  559|      0|
  560|      0|    MessagePopupView(messages: [message1], theme: Message.defaultTheme)
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu5_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu5_AfG_AjKtAOcfu6_
  ------------------
  561|      0|      .font(.system(size: 32))
  562|      0|      .frame(maxWidth: 320, minHeight: 15)
  563|      0|      .preferredColorScheme(.dark)
  564|      0|
  565|      0|    MessagePopupView(messages: [message1, message4], theme: Message.defaultTheme)
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu7_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu7_AfG_AjKtAOcfu8_
  ------------------
  566|      0|      .frame(maxWidth: 320, minHeight: 15)
  567|      0|      .preferredColorScheme(.dark)
  568|      0|
  569|      0|    MessagePopupView(messages: [message1, message2, message3], theme: Message.defaultTheme)
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu9_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu9_AfG_AjKtAOcfu10_
  ------------------
  570|      0|      .frame(maxWidth: 320, minHeight: 15)
  571|      0|      .preferredColorScheme(.dark)
  572|      0|
  573|      0|    MessagePopupView(messages: [message1, message5, message2, message4, message3], theme: Message.defaultTheme)
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu11_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu11_AfG_AjKtAOcfu12_
  ------------------
  574|      0|      .frame(maxWidth: 320, minHeight: 15)
  575|      0|      .preferredColorScheme(.dark)
  576|      0|
  577|      0|    MessagePopupView(messages: [message1, message5, message2, message4, message3], theme: Message.defaultTheme)
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu13_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZSo7NSColorC6colour_7SwiftUI5ImageV4icontAA0D0V8CategoryOcAMmcfu13_AfG_AjKtAOcfu14_
  ------------------
  578|      0|      .frame(maxWidth: 320, minHeight: 15)
  579|      0|      .preferredColorScheme(.light)
  580|      0|
  581|      0|    // Combined view
  582|      0|
  583|      0|    ZStack(alignment: .topTrailing) {
  584|      0|
  585|      0|      Rectangle()
  586|      0|        .foregroundColor(Color.red.opacity(0.1))
  587|      0|        .frame(height: 30)
  588|      0|      HStack { Text("main = putStrLn \"Hello World!\""); Spacer() }
  589|      0|      StatefulMessageView(messages: [message1, message5, message2, message4, message3],
  590|      0|                          theme: Message.defaultTheme,
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZ7SwiftUI05TupleC0VyAE0C0PAEE5frame5width6height9alignmentQr12CoreGraphics7CGFloatVSg_AqE9AlignmentVtFQOyAiEE15foregroundColoryQrAE0T0VSgFQOyAE9RectangleV_Qo__Qo__AE6HStackVyAGyAE4TextV_AE6SpacerVtGGAiEE6offset1x1yQrAP_APtFQOyAA08StatefuldC0V_Qo_tGyXEfU0_So7NSColorC6colour_AE5ImageV4icontAA0D0V8CategoryOcA22_mcfu_
  ------------------
  | Unexecuted instantiation: $s14CodeEditorView21MessageViews_PreviewsV8previewsQrvgZ7SwiftUI05TupleC0VyAE0C0PAEE5frame5width6height9alignmentQr12CoreGraphics7CGFloatVSg_AqE9AlignmentVtFQOyAiEE15foregroundColoryQrAE0T0VSgFQOyAE9RectangleV_Qo__Qo__AE6HStackVyAGyAE4TextV_AE6SpacerVtGGAiEE6offset1x1yQrAP_APtFQOyAA08StatefuldC0V_Qo_tGyXEfU0_So7NSColorC6colour_AE5ImageV4icontAA0D0V8CategoryOcA22_mcfu_A16_A17__A19_A20_tA24_cfu0_
  ------------------
  591|      0|                          geometry: MessageView.Geometry(lineWidth: 150,
  592|      0|                                                         lineHeight: 15,
  593|      0|                                                         popupWidth: 300,
  594|      0|                                                         popupOffset: 30),
  595|      0|                          fontSize: 15,
  596|      0|                          unfolded: StatefulMessageView.ObservableBool(bool: false))
  597|      0|        .offset(y: 18)
  598|      0|    }
  599|      0|    .frame(width: 400, height: 300, alignment: .topTrailing)
  600|      0|//    .preferredColorScheme(.light)
  601|      0|
  602|      0|  }
  603|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/MinimapView.swift:
    1|       |//
    2|       |//  MinimapView.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 05/05/2021.
    6|       |//
    7|       |//  TextKit subclasses to implement minimap functionality. This is currently only supported for macOS as iOS lacks
    8|       |//  support for configuring the type setter.
    9|       |
   10|       |import SwiftUI
   11|       |
   12|       |
   13|       |#if os(macOS)
   14|       |
   15|       |/// Customised text view for the minimap.
   16|       |///
   17|       |class MinimapView: NSTextView {
   18|       |  weak var codeView: CodeView?
   19|       |
   20|       |  // Highlight the current line.
   21|       |  //
   22|      0|  override func drawBackground(in rect: NSRect) {
   23|      0|    super.drawBackground(in: rect)
   24|      0|
   25|      0|    guard let layoutManager = layoutManager else { return }
   26|      0|
   27|      0|    // Highlight the current line
   28|      0|    codeView?.theme.currentLineColour.setFill()
   29|      0|    if let location = insertionPoint {
   30|      0|
   31|      0|      layoutManager.enumerateFragmentRects(forLineContaining: location){ rect in NSBezierPath(rect: rect).fill() }
   32|      0|
   33|      0|    }
   34|      0|  }
   35|       |}
   36|       |
   37|       |/// Customised layout manager for the minimap.
   38|       |///
   39|       |class MinimapLayoutManager: NSLayoutManager {
   40|       |
   41|       |  // In place of drawing the actual glyphs, we draw small rectangles in the glyph's foreground colour. We ignore the
   42|       |  // actual glyph metrics and draw all glyphs as a fixed-sized rectangle whose height is determined by the "used
   43|       |  // rectangle" and whose width is a fraction of the actual (monospaced) font of the glyph (rounded to full points).
   44|      0|  override func drawGlyphs(forGlyphRange glyphsToShow: NSRange, at origin: CGPoint) {
   45|      0|    guard let textStorage = self.textStorage else { return }
   46|      0|
   47|      0|    // Compute the width of a single rectangle representing one character in the original text display.
   48|      0|    var width: CGFloat
   49|      0|    let charIndex = self.characterIndexForGlyph(at: glyphsToShow.location)
   50|      0|    if let font = textStorage.attribute(.font, at: charIndex, effectiveRange: nil) as? NSFont {
   51|      0|
   52|      0|      width = minimapFontSize(for: font.pointSize) / 2
   53|      0|
   54|      0|    } else { width = 1 }
   55|      0|
   56|      0|    enumerateLineFragments(forGlyphRange: glyphsToShow){ (_rect, usedRect, _textContainer, glyphRange, _) in
   57|      0|
   58|      0|      let origin = usedRect.origin
   59|      0|      for index in 0..<glyphRange.length {
   60|      0|
   61|      0|        // We don't draw hiden glyphs (`.null`), control chracters, and "elastic" glyphs, where the latter serve as a
   62|      0|        // proxy for white space
   63|      0|        let property = self.propertyForGlyph(at: glyphRange.location + index)
   64|      0|        if property != .null && property != .controlCharacter && property != .elastic {
   65|      0|
   66|      0|          // TODO: could try to optimise by using the `effectiveRange` of the attribute lookup to compute an entire glyph run to draw as one rectangle
   67|      0|          let charIndex = self.characterIndexForGlyph(at: glyphRange.location + index)
   68|      0|          if let colour = textStorage.attribute(.foregroundColor, at: charIndex, effectiveRange: nil) as? NSColor {
   69|      0|            colour.withAlphaComponent(0.30).setFill()
   70|      0|          }
   71|      0|          NSBezierPath(rect: CGRect(x: origin.x + CGFloat(index),
   72|      0|                                    y: origin.y,
   73|      0|                                    width: width,
   74|      0|                                    height: usedRect.size.height))
   75|      0|            .fill()
   76|      0|        }
   77|      0|      }
   78|      0|    }
   79|      0|  }
   80|       |}
   81|       |
   82|       |class MinimapTypeSetter: NSATSTypesetter {
   83|       |
   84|       |  // Perform layout for the minimap. We don't layout the actual glyphs, but small rectangles representing the glyphs.
   85|       |  //
   86|       |  // This is a very simplified layout procedure that works for the specific setup of our code views. It completely
   87|       |  // ignores some features of text views, such as areas to exclude, where `remainingRect` would be non-empty. It
   88|       |  // currently also ignores all extra line and paragraph spacing and fails to call some methods that might adjust
   89|       |  // layout decisions.
   90|      0|  override func layoutParagraph(at lineFragmentOrigin: UnsafeMutablePointer<NSPoint>) -> Int {
   91|      0|
   92|      0|    let padding = currentTextContainer?.lineFragmentPadding ?? 0,
   93|      0|        width   = currentTextContainer?.size.width ?? 100
   94|      0|
   95|      0|    // Determine the size of the rectangles to layout. (They are always twice as high as wide.)
   96|      0|    var fontHeight: CGFloat
   97|      0|    if let charIndex = layoutManager?.characterIndexForGlyph(at: paragraphGlyphRange.location),
   98|      0|       let font      = layoutManager?.textStorage?.attribute(.font, at: charIndex, effectiveRange: nil) as? NSFont
   99|      0|    {
  100|      0|
  101|      0|      fontHeight = minimapFontSize(for: font.pointSize)
  102|      0|
  103|      0|    } else { fontHeight = 2 }
  104|      0|
  105|      0|    // We always leave one point of space between lines
  106|      0|    let lineHeight = fontHeight + 1,
  107|      0|        fontWidth  = fontHeight / 2   // NB: This is always going to be an integral number
  108|      0|
  109|      0|    beginParagraph()
  110|      0|
  111|      0|    if paragraphGlyphRange.length > 0 {   // non-empty line
  112|      0|
  113|      0|      var remainingGlyphRange = paragraphGlyphRange
  114|      0|
  115|      0|      while remainingGlyphRange.length > 0 {
  116|      0|
  117|      0|        var lineFragmentRect = NSRect.zero
  118|      0|        var remainingRect = NSRect.zero    // NB: we don't care about this as we don't supporte exclusions
  119|      0|
  120|      0|        beginLine(withGlyphAt: remainingGlyphRange.location)
  121|      0|
  122|      0|        getLineFragmentRect(&lineFragmentRect,
  123|      0|                            usedRect: nil,
  124|      0|                            remaining: &remainingRect,
  125|      0|                            forStartingGlyphAt: remainingGlyphRange.location,
  126|      0|                            proposedRect: NSRect(origin: lineFragmentOrigin.pointee,
  127|      0|                                                 size: CGSize(width: width, height: lineHeight)),
  128|      0|                            lineSpacing: 0,
  129|      0|                            paragraphSpacingBefore: 0,
  130|      0|                            paragraphSpacingAfter: 0)
  131|      0|
  132|      0|        let lineFragementRectEffectiveWidth = max(lineFragmentRect.size.width - 2 * padding, 0)
  133|      0|
  134|      0|        // Determine how many glyphs we can fit into the `lineFragementRect`; must be at least one to make progress
  135|      0|        var numberOfGlyphs:       Int,
  136|      0|            lineGlyphRangeLength: Int
  137|      0|        var numberOfGlyphsThatFit = max(Int(floor(lineFragementRectEffectiveWidth / fontWidth)), 1)
  138|      0|
  139|      0|        // Add any elastic glyphs that follow (they can be compacted)
  140|      0|        while numberOfGlyphsThatFit < remainingGlyphRange.length
  141|      0|                && layoutManager?.propertyForGlyph(at: remainingGlyphRange.location + numberOfGlyphsThatFit) == .elastic
  142|      0|        {
  143|      0|          numberOfGlyphsThatFit += 1
  144|      0|        }
  145|      0|
  146|      0|        if numberOfGlyphsThatFit < remainingGlyphRange.length { // we need a line break
  147|      0|
  148|      0|          // Try to find a break point at a word boundary, by looking back. If we don't find one, take the largest
  149|      0|          // possible number of glyphs.
  150|      0|          //
  151|      0|          numberOfGlyphs = numberOfGlyphsThatFit
  152|      0|          glyphLoop: for glyphs in stride(from: numberOfGlyphsThatFit, to: 0, by: -1) {
  153|      0|
  154|      0|            let glyphIndex = remainingGlyphRange.location + glyphs - 1
  155|      0|
  156|      0|            var actualGlyphRange = NSRange(location: 0, length: 0)
  157|      0|            let charIndex = characterRange(forGlyphRange: NSRange(location: glyphIndex, length: 1),
  158|      0|                                           actualGlyphRange: &actualGlyphRange)
  159|      0|            if actualGlyphRange.location < glyphIndex { continue }  // we are not yet at a character boundary
  160|      0|
  161|      0|            if layoutManager?.propertyForGlyph(at: glyphIndex) == .elastic
  162|      0|                && shouldBreakLine(byWordBeforeCharacterAt: charIndex.location)
  163|      0|            {
  164|      0|
  165|      0|              // Found a valid break point
  166|      0|              numberOfGlyphs = glyphs
  167|      0|              break glyphLoop
  168|      0|
  169|      0|            }
  170|      0|          }
  171|      0|
  172|      0|          lineGlyphRangeLength = numberOfGlyphs
  173|      0|
  174|      0|        } else {
  175|      0|
  176|      0|          numberOfGlyphs       = remainingGlyphRange.length
  177|      0|          lineGlyphRangeLength = numberOfGlyphs + paragraphSeparatorGlyphRange.length
  178|      0|
  179|      0|        }
  180|      0|
  181|      0|        let lineFragementUsedRect = NSRect(origin: CGPoint(x: lineFragmentRect.origin.x + padding,
  182|      0|                                                           y: lineFragmentRect.origin.y),
  183|      0|                                           size: CGSize(width: CGFloat(numberOfGlyphs), height: fontHeight))
  184|      0|
  185|      0|        // The glyph range covered by this line fragement — this may include the paragraph separator glyphs
  186|      0|        let remainingLength = remainingGlyphRange.length - numberOfGlyphs,
  187|      0|            lineGlyphRange  = NSRange(location: remainingGlyphRange.location, length: lineGlyphRangeLength)
  188|      0|
  189|      0|        // The rest of what remains of this paragraph
  190|      0|        remainingGlyphRange = NSRange(location: remainingGlyphRange.location + numberOfGlyphs, length: remainingLength)
  191|      0|
  192|      0|        setLineFragmentRect(lineFragmentRect,
  193|      0|                            forGlyphRange: lineGlyphRange,
  194|      0|                            usedRect: lineFragementUsedRect,
  195|      0|                            baselineOffset: 0)
  196|      0|        setLocation(NSPoint(x: padding, y: 0),
  197|      0|                    withAdvancements: nil, //Array(repeating: 1, count: numberOfGlyphs),
  198|      0|                    forStartOfGlyphRange: NSRange(location: lineGlyphRange.location, length: numberOfGlyphs))
  199|      0|
  200|      0|        if remainingGlyphRange.length == 0 {
  201|      0|
  202|      0|          setLocation(NSPoint(x: NSMaxX(lineFragementUsedRect), y: 0),
  203|      0|                      withAdvancements: nil,
  204|      0|                      forStartOfGlyphRange: paragraphSeparatorGlyphRange)
  205|      0|          setNotShownAttribute(true, forGlyphRange: paragraphSeparatorGlyphRange)
  206|      0|
  207|      0|        }
  208|      0|
  209|      0|        endLine(withGlyphRange: lineGlyphRange)
  210|      0|
  211|      0|        lineFragmentOrigin.pointee.y += lineHeight
  212|      0|
  213|      0|      }
  214|      0|
  215|      0|    } else {  // empty line
  216|      0|
  217|      0|      beginLine(withGlyphAt: paragraphSeparatorGlyphRange.location)
  218|      0|
  219|      0|      var lineFragmentRect      = NSRect.zero,
  220|      0|          lineFragementUsedRect = NSRect.zero
  221|      0|
  222|      0|      getLineFragmentRect(&lineFragmentRect,
  223|      0|                          usedRect: &lineFragementUsedRect,
  224|      0|                          forParagraphSeparatorGlyphRange: paragraphSeparatorGlyphRange,
  225|      0|                          atProposedOrigin: lineFragmentOrigin.pointee)
  226|      0|
  227|      0|      setLineFragmentRect(lineFragmentRect,
  228|      0|                          forGlyphRange: paragraphSeparatorGlyphRange,
  229|      0|                          usedRect: lineFragementUsedRect,
  230|      0|                          baselineOffset: 0)
  231|      0|      setLocation(NSPoint.zero, withAdvancements: nil, forStartOfGlyphRange: paragraphSeparatorGlyphRange)
  232|      0|      setNotShownAttribute(true, forGlyphRange: paragraphSeparatorGlyphRange)
  233|      0|
  234|      0|      endLine(withGlyphRange: paragraphSeparatorGlyphRange)
  235|      0|
  236|      0|      lineFragmentOrigin.pointee.y += lineHeight
  237|      0|
  238|      0|    }
  239|      0|
  240|      0|    endParagraph()
  241|      0|
  242|      0|    return NSMaxRange(paragraphSeparatorGlyphRange)
  243|      0|  }
  244|       |
  245|       |  // Adjust the height of the fragment rectangles for empty lines.
  246|       |  //
  247|       |  override func getLineFragmentRect(_ lineFragmentRect: UnsafeMutablePointer<NSRect>,
  248|       |                                    usedRect lineFragmentUsedRect: UnsafeMutablePointer<NSRect>,
  249|       |                                    forParagraphSeparatorGlyphRange paragraphSeparatorGlyphRange: NSRange,
  250|       |                                    atProposedOrigin lineOrigin: NSPoint)
  251|      0|  {
  252|      0|    // Determine the size of the rectangles to layout. (They are always twice as high as wide.)
  253|      0|    var fontHeight: CGFloat
  254|      0|    if let glyphIndex = (paragraphSeparatorGlyphRange.length > 0   ? paragraphSeparatorGlyphRange.location : nil) ??
  255|      0|                        (paragraphSeparatorGlyphRange.location > 0 ? paragraphSeparatorGlyphRange.location - 1 : nil),
  256|      0|       let charIndex = layoutManager?.characterIndexForGlyph(at: glyphIndex),
  257|      0|       let font      = layoutManager?.textStorage?.attribute(.font, at: charIndex, effectiveRange: nil) as? NSFont
  258|      0|    {
  259|      0|
  260|      0|      fontHeight = minimapFontSize(for: font.pointSize)
  261|      0|
  262|      0|    } else { fontHeight = 2 }
  263|      0|
  264|      0|    // We always leave one point of space between lines
  265|      0|    let lineHeight = fontHeight + 1
  266|      0|
  267|      0|    super.getLineFragmentRect(lineFragmentRect,
  268|      0|                              usedRect: lineFragmentUsedRect,
  269|      0|                              forParagraphSeparatorGlyphRange: paragraphSeparatorGlyphRange,
  270|      0|                              atProposedOrigin: lineOrigin)
  271|      0|    lineFragmentRect.pointee.size.height     = lineHeight
  272|      0|    lineFragmentUsedRect.pointee.size.height = fontHeight
  273|      0|  }
  274|       |}
  275|       |
  276|       |/// Compute the size of the code view in number of characters such that we can still accommodate the minimap.
  277|       |///
  278|       |/// - Parameters:
  279|       |///   - width: Overall width available for main and minimap code view *without* gutter and padding.
  280|       |///   - font: The fixed pitch font of the main text view.
  281|       |///   - withMinimap: Determines whether to include the presence of a minimap into the calculation.
  282|       |/// - Returns: The width of the code view in number of characters.
  283|       |///
  284|      0|func codeWidthInCharacters(for width: CGFloat, with font: NSFont, withMinimap: Bool) -> CGFloat {
  285|      0|  let minimapCharWidth = withMinimap ? minimapFontSize(for: font.pointSize) / 2 : 0
  286|      0|  return floor(width / (font.maximumAdvancement.width + minimapCharWidth))
  287|      0|}
  288|       |
  289|       |/// Compute the font size for the minimap from the font size of the main text view.
  290|       |///
  291|       |/// - Parameter fontSize: The font size of the main text view
  292|       |/// - Returns: The font size for the minimap
  293|       |///
  294|       |/// The result is always divisible by two, to enable the use of full pixels for the font width while avoiding aspect
  295|       |/// ratios that are too unbalanced.
  296|       |///
  297|      0|func minimapFontSize(for fontSize: CGFloat) -> CGFloat {
  298|      0|  return max(1, ceil(fontSize / 20)) * 2
  299|      0|}
  300|       |
  301|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/MutableAttributedString.swift:
    1|       |//
    2|       |//  MutableAttributedString.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 03/11/2020.
    6|       |//
    7|       |//  Extensions to `NSMutableAttributedString`
    8|       |
    9|       |import os
   10|       |#if os(iOS)
   11|       |import UIKit
   12|       |#elseif os(macOS)
   13|       |import AppKit
   14|       |#endif
   15|       |
   16|       |
   17|       |private let logger = Logger(subsystem: "org.justtesting.CodeEditorView", category: "MutableAttributedString")
   18|       |
   19|       |
   20|       |// MARK: -
   21|       |// MARK: Regular expression-based tokenisers with explicit state management for context-free constructs
   22|       |
   23|       |/// Token descriptions
   24|       |///
   25|       |public enum TokenPattern: Hashable, Equatable, Comparable {
   26|       |
   27|       |  /// The token has multiple lexemes, specified in the form of a regular expression string.
   28|       |  ///
   29|       |  case pattern(String)  // This case needs to be the first one as we want it to compare as being smaller than the rest;
   30|       |                        // that ensures that it will appear last in the generated tokeniser regexp and hence match last
   31|       |                        // in case of overlap.
   32|       |
   33|       |  /// The token has only one lexeme, given as a simple string. We only match this string if it starts and ends at a
   34|       |  /// word boundary (as per the "\b" regular expression metacharacter).
   35|       |  ///
   36|       |  case word(String)
   37|       |
   38|       |  /// The token has only one lexeme, given as a simple string.
   39|       |  ///
   40|       |  case string(String)
   41|       |}
   42|       |
   43|       |public protocol TokeniserState {
   44|       |
   45|       |  /// Finite projection of tokeniser state to determine sub-tokenisers (and hence, the regular expression to use)
   46|       |  ///
   47|       |  associatedtype StateTag: Hashable
   48|       |
   49|       |  /// Project the tag out of a full state
   50|       |  ///
   51|       |  var tag: StateTag { get }
   52|       |}
   53|       |
   54|       |/// Type used to attribute characters with their token value.
   55|       |///
   56|       |public struct TokenAttribute<TokenType> {
   57|       |
   58|       |  /// `true` iff this is the first character of a tokens lexeme.
   59|       |  ///
   60|       |  public let isHead: Bool
   61|       |
   62|       |  /// The type of tokens that this character is a part of.
   63|       |  ///
   64|       |  public let token: TokenType
   65|       |}
   66|       |
   67|       |/// Actions taken in response to matching a token
   68|       |///
   69|       |/// The `token` component determines the token type of the matched pattern and `transition` determines the state
   70|       |/// transition implied by the matched token. If the `transition` component is `nil`, the tokeniser stays in the current
   71|       |/// state.
   72|       |///
   73|       |public typealias TokenAction<TokenType, StateType> = (token: TokenType, transition: ((StateType) -> StateType)?)
   74|       |
   75|       |/// For each possible state tag of the underlying tokeniser state, a mapping from token patterns to token kinds and
   76|       |/// maybe a state transition to determine a new tokeniser state
   77|       |///
   78|       |public typealias TokenDictionary<TokenType, StateType: TokeniserState>
   79|       |  = [StateType.StateTag: [TokenPattern: TokenAction<TokenType, StateType>]]
   80|       |
   81|       |/// Pre-compiled regular expression tokeniser.
   82|       |///
   83|       |/// The `TokenType` identifies the various tokens that can be recognised by the tokeniser.
   84|       |///
   85|       |public struct Tokeniser<TokenType, StateType: TokeniserState> {
   86|       |
   87|       |  /// Tokeniser for one state of the compound tokeniser
   88|       |  ///
   89|       |  struct State {
   90|       |
   91|       |    /// The matching regular expression
   92|       |    ///
   93|       |    let regexp: NSRegularExpression
   94|       |
   95|       |    /// The lookup table for single-lexeme tokens
   96|       |    ///
   97|       |    let stringTokenTypes: [String: TokenAction<TokenType, StateType>]
   98|       |
   99|       |    /// The token types for multi-lexeme tokens
  100|       |    ///
  101|       |    /// The order of the token types in the array is the same as that of the matching groups for those tokens in the
  102|       |    /// regular expression.
  103|       |    ///
  104|       |    let patternTokenTypes: [TokenAction<TokenType, StateType>]
  105|       |  }
  106|       |
  107|       |  /// Sub-tokeniser for all states of the compound tokeniser
  108|       |  ///
  109|       |  let states: [StateType.StateTag: State]
  110|       |}
  111|       |
  112|       |extension NSMutableAttributedString {
  113|       |
  114|       |  /// Create a tokeniser from the given token dictionary.
  115|       |  ///
  116|       |  /// - Parameters:
  117|       |  ///   - tokenMap: The token dictionary determining the lexemes to match and their token type.
  118|       |  /// - Returns: A tokeniser that matches all lexemes contained in the token dictionary.
  119|       |  ///
  120|       |  /// The tokeniser is based on an eager regular expression matcher. Hence, it will match the first matching alternative
  121|       |  /// in a sequence of alternatives. To deal with string patterns, where some patterns may be a prefix of another, the
  122|       |  /// string patterns are turned into regular expression alternatives longest string first. However, pattern consisting
  123|       |  /// of regular expressions are tried in an indeterminate order. Hence, no pattern should have as a full match a prefix
  124|       |  /// of another pattern's full match, to avoid indeterminate results. Moreover, strings match before patterns that
  125|       |  /// cover the same lexeme.
  126|       |  ///
  127|       |  /// For each token that has got a multi-character lexeme, the tokeniser attributes the first character of that lexeme
  128|       |  /// with a token attribute marked as being the lexeme head character. All other characters of the lexeme —what we call
  129|       |  /// the token body— are marked with the same token attribute, but without being identified as a lexeme head. This
  130|       |  /// distinction is crucial to be able to distinguish the boundaries of multiple successive tokens of the same type.
  131|       |  ///
  132|       |  public static func tokeniser<TokenType, StateType: TokeniserState>(for tokenMap: TokenDictionary<TokenType, StateType>)
  133|       |  -> Tokeniser<TokenType, StateType>?
  134|      0|  {
  135|      0|    func tokeniser(for stateMap: [TokenPattern: TokenAction<TokenType, StateType>])
  136|      0|    throws -> Tokeniser<TokenType, StateType>.State
  137|      0|    {
  138|      0|
  139|      0|      // NB: Be careful with the re-ordering, because the order in `patternTokenTypes` below must match the order of
  140|      0|      //     the patterns in the alternatives of the regular expression. (We must re-order due to eager matching as
  141|      0|      //     explained in the documentation of this function.)
  142|      0|      let orderedMap = stateMap.sorted{ (lhs, rhs) in return lhs.key > rhs.key },
  143|      0|          pattern    = orderedMap.reduce("") { (regexp, mapEntry) in
  144|      0|
  145|      0|            let regexpPattern: String
  146|      0|            switch mapEntry.key {
  147|      0|            case .string(let lexeme):   regexpPattern = NSRegularExpression.escapedPattern(for: lexeme)
  148|      0|            case .word(let lexeme):     regexpPattern = "\\b" + NSRegularExpression.escapedPattern(for: lexeme) + "\\b"
  149|      0|            case .pattern(let pattern): regexpPattern = "(" + pattern + ")"     // each pattern gets a capture group
  150|      0|            }
  151|      0|            if regexp.isEmpty { return regexpPattern } else { return regexp + "|" + regexpPattern}
  152|      0|          }
  153|      0|      let stringTokenTypes: [(String, TokenAction<TokenType, StateType>)] = orderedMap.compactMap{ (pattern, type) in
  154|      0|        if case .string(let lexeme) = pattern { return (lexeme, type)  }
  155|      0|        else if case .word(let lexeme) = pattern { return (lexeme, type)  }
  156|      0|        else { return nil }
  157|      0|      }
  158|      0|      let patternTokenTypes: [TokenAction<TokenType, StateType>] = orderedMap.compactMap{ (pattern, type) in
  159|      0|        if case .pattern(_) = pattern { return type } else { return nil }
  160|      0|      }
  161|      0|
  162|      0|      let regexp = try NSRegularExpression(pattern: pattern, options: [])
  163|      0|      return Tokeniser.State(regexp: regexp,
  164|      0|                             stringTokenTypes: [String: TokenAction<TokenType, StateType>](stringTokenTypes){
  165|      0|                              (left, right) in return left },
  166|      0|                             patternTokenTypes: patternTokenTypes)
  167|      0|    }
  168|      0|
  169|      0|    do {
  170|      0|
  171|      0|      let states = try tokenMap.mapValues{ try tokeniser(for: $0) }
  172|      0|      return Tokeniser(states: states)
  173|      0|
  174|      0|    } catch let err { logger.error("failed to compile regexp: \(err.localizedDescription)"); return nil }
  175|      0|  }
  176|       |
  177|       |  /// Parse the given range and set the corresponding token attribute values on all matching lexeme ranges.
  178|       |  ///
  179|       |  /// - Parameters:
  180|       |  ///   - attribute: The custom attribute key that identifies token attributes.
  181|       |  ///   - tokeniser: Pre-compiled tokeniser.
  182|       |  ///   - startState: Starting state of the tokeniser.
  183|       |  ///   - range: The range in the receiver that is to be parsed and attributed.
  184|       |  ///
  185|       |  /// All previously existing occurences of `attribute` in the given range are removed.
  186|       |  ///
  187|       |  public func tokeniseAndSetTokenAttribute<TokenType, StateType>(attribute: NSAttributedString.Key,
  188|       |                                                                 with tokeniser: Tokeniser<TokenType, StateType>,
  189|       |                                                                 state startState: StateType,
  190|       |                                                                 in range: NSRange)
  191|      0|  {
  192|      0|    var state        = startState
  193|      0|    var currentRange = range
  194|      0|
  195|      0|    // Clear existing attributes
  196|      0|    removeAttribute(attribute, range: range)
  197|      0|
  198|      0|    // Tokenise and set appropriate attributes
  199|      0|    while currentRange.length > 0 {
  200|      0|
  201|      0|      guard let stateTokeniser = tokeniser.states[state.tag],
  202|      0|            let result         = stateTokeniser.regexp.firstMatch(in: self.string, options: [], range: currentRange)
  203|      0|      else { break }  // no more match => stop
  204|      0|
  205|      0|      // The next lexeme we look for from just after the one we just found
  206|      0|      currentRange = NSRange(location: NSMaxRange(result.range),
  207|      0|                             length: currentRange.length - NSMaxRange(result.range) + currentRange.location)
  208|      0|
  209|      0|      // If a matching group in the regexp matched, select the action of the correpsonding pattern.
  210|      0|      var tokenAction: TokenAction<TokenType, StateType>?
  211|      0|      for i in stride(from: result.numberOfRanges - 1, through: 1, by: -1) {
  212|      0|
  213|      0|        if result.range(at: i).location != NSNotFound { // match by a capture group => complex pattern match
  214|      0|
  215|      0|          tokenAction = stateTokeniser.patternTokenTypes[i - 1]
  216|      0|        }
  217|      0|      }
  218|      0|
  219|      0|      // If it wasn't a matching group, it must be a simple string match
  220|      0|      if tokenAction == nil {                           // no capture group matched => we matched a simple string lexeme
  221|      0|
  222|      0|        tokenAction = stateTokeniser.stringTokenTypes[(self.string as NSString).substring(with: result.range)]
  223|      0|      }
  224|      0|
  225|      0|      if let action = tokenAction, result.range.length > 0 {
  226|      0|
  227|      0|        // Set the token attribute on the lexeme, specially marking the first character of the lexeme.
  228|      0|        self.addAttribute(attribute,
  229|      0|                          value: TokenAttribute(isHead: true, token: action.token),
  230|      0|                          range: NSRange(location: result.range.location, length: 1))
  231|      0|        if result.range.length > 1 {
  232|      0|
  233|      0|          self.addAttribute(attribute,
  234|      0|                            value: TokenAttribute(isHead: false, token: action.token),
  235|      0|                            range: NSRange(location: result.range.location + 1, length: result.range.length - 1))
  236|      0|
  237|      0|        }
  238|      0|
  239|      0|        // If there is an associated state transition function, apply it to the tokeniser state
  240|      0|        if let transition = action.transition { state = transition(state) }
  241|      0|
  242|      0|      }
  243|      0|    }
  244|      0|  }
  245|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/OSDefinitions.swift:
    1|       |//
    2|       |//  OSDefinitions.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 04/05/2021.
    6|       |//
    7|       |//  A set of aliases and the like to smooth ove some superficial macOS/iOS differences.
    8|       |
    9|       |import SwiftUI
   10|       |
   11|       |#if os(iOS)
   12|       |
   13|       |import UIKit
   14|       |
   15|       |public typealias OSFont       = UIFont
   16|       |public typealias OSColor      = UIColor
   17|       |public typealias OSBezierPath = UIBezierPath
   18|       |
   19|       |let labelColor = UIColor.label
   20|       |
   21|       |typealias TextStorageEditActions = NSTextStorage.EditActions
   22|       |
   23|       |extension UIColor {
   24|       |
   25|       |  /// Create a UIKit colour from a SwiftUI colour if possible.
   26|       |  ///
   27|       |  convenience init?(color: Color) {
   28|       |    guard let cgColor = color.cgColor else { return nil }
   29|       |    self.init(cgColor: cgColor)
   30|       |  }
   31|       |}
   32|       |
   33|       |#elseif os(macOS)
   34|       |
   35|       |import AppKit
   36|       |
   37|       |public typealias OSFont       = NSFont
   38|       |public typealias OSColor      = NSColor
   39|       |public typealias OSBezierPath = NSBezierPath
   40|       |
   41|       |let labelColor = NSColor.labelColor
   42|       |
   43|       |typealias TextStorageEditActions = NSTextStorageEditActions
   44|       |
   45|       |extension NSColor {
   46|       |
   47|       |  /// Create an AppKit colour from a SwiftUI colour if possible.
   48|       |  ///
   49|      0|  convenience init?(color: Color) {
   50|      0|    guard let cgColor = color.cgColor else { return nil }
   51|      0|    self.init(cgColor: cgColor)
   52|      0|  }
   53|       |}
   54|       |
   55|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/ScrollView.swift:
    1|       |//
    2|       |//  ScrollView.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 27/11/2021.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |
   11|       |#if os(iOS)
   12|       |
   13|       |// MARK: -
   14|       |// MARK: UIKit version
   15|       |
   16|       |extension UIScrollView {
   17|       |
   18|       |  var verticalScrollFraction: CGFloat {
   19|       |    get {
   20|       |      let verticalScrollRange = contentSize.height - bounds.height
   21|       |      return verticalScrollRange > 0 ? min(max(0, contentOffset.y / verticalScrollRange), 1) : 0
   22|       |    }
   23|       |    set {
   24|       |      let visibleRectY = newValue * max(0, contentSize.height - bounds.height)
   25|       |      setContentOffset(CGPoint(x: contentOffset.x, y: visibleRectY), animated: false)
   26|       |    }
   27|       |  }
   28|       |}
   29|       |
   30|       |
   31|       |#elseif os(macOS)
   32|       |
   33|       |// MARK: -
   34|       |// MARK: AppKit version
   35|       |
   36|       |extension NSScrollView {
   37|       |
   38|       |  var verticalScrollFraction: CGFloat {
   39|      0|    get {
   40|      0|      let verticalScrollRange = (documentView?.bounds.height ?? 0) - documentVisibleRect.height
   41|      0|      return verticalScrollRange > 0 ? min(max(0, documentVisibleRect.origin.y / verticalScrollRange), 1) : 0
   42|      0|    }
   43|      0|    set {
   44|      0|      let visibleRectY = newValue * max(0, (documentView?.bounds.height ?? 0) - documentVisibleRect.height)
   45|      0|      contentView.scroll(to: CGPoint(x: documentVisibleRect.origin.x, y: visibleRectY))
   46|      0|    }
   47|       |  }
   48|       |}
   49|       |
   50|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/TextView.swift:
    1|       |//
    2|       |//  TextView.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 28/09/2020.
    6|       |//
    7|       |//  Text view protocol that extracts common functionality between 'UITextView' and 'NSTextView'.
    8|       |
    9|       |import Foundation
   10|       |
   11|       |
   12|       |// MARK: -
   13|       |// MARK: The protocol
   14|       |
   15|       |/// A protocol that bundles up the commonalities of 'UITextView' and 'NSTextView'.
   16|       |///
   17|       |protocol TextView {
   18|       |  associatedtype Color
   19|       |  associatedtype Font
   20|       |
   21|       |  // This is necessary as these members are optional in AppKit and not optional in UIKit.
   22|       |  var optLayoutManager: NSLayoutManager? { get }
   23|       |  var optTextContainer: NSTextContainer? { get }
   24|       |  var optCodeStorage:   CodeStorage?     { get }
   25|       |
   26|       |  var textBackgroundColor: Color? { get }
   27|       |  var textFont:            Font? { get }
   28|       |  var textContainerOrigin: CGPoint { get }
   29|       |
   30|       |  /// The text displayed by the text view.
   31|       |  ///
   32|       |  var text: String! { get set }
   33|       |
   34|       |  /// If the current selection is an insertion point (i.e., the selection length is 0), return its location.
   35|       |  ///
   36|       |  var insertionPoint: Int? { get }
   37|       |
   38|       |  /// The current (single range) selection of the text view.
   39|       |  ///
   40|       |  var selectedRange: NSRange { get set }
   41|       |
   42|       |  /// The set of lines that have characters that are included in the current selection. (This may be a multi-selection,
   43|       |  /// and hence, a non-contiguous range.)
   44|       |  ///
   45|       |  var selectedLines: Set<Int> { get }
   46|       |
   47|       |  /// The visible portion of the text view. (This only accounts for portions of the text view that are obscured through
   48|       |  /// visibility in a scroll view.)
   49|       |  ///
   50|       |  var documentVisibleRect: CGRect { get }
   51|       |
   52|       |  /// Temporarily highlight the visible part of the given range.
   53|       |  ///
   54|       |  func showFindIndicator(for range: NSRange)
   55|       |}
   56|       |
   57|       |extension TextView {
   58|       |
   59|       |  /// The text view's line map.
   60|       |  ///
   61|      0|  var optLineMap: LineMap<LineInfo>? {
   62|      0|    return (optCodeStorage?.delegate as? CodeStorageDelegate)?.lineMap
   63|      0|  }
   64|       |}
   65|       |
   66|       |
   67|       |#if os(iOS)
   68|       |
   69|       |// MARK: -
   70|       |// MARK: UIKit version
   71|       |
   72|       |import UIKit
   73|       |
   74|       |private let highlightingAttributes = [NSAttributedString.Key.foregroundColor: UIColor.black,
   75|       |                                      NSAttributedString.Key.backgroundColor: UIColor.yellow]
   76|       |
   77|       |extension UITextView: TextView {
   78|       |  typealias Color = UIColor
   79|       |  typealias Font  = UIFont
   80|       |
   81|       |  var optLayoutManager: NSLayoutManager? { layoutManager }
   82|       |  var optTextContainer: NSTextContainer? { textContainer }
   83|       |  var optCodeStorage:   CodeStorage?     { textStorage as? CodeStorage }
   84|       |
   85|       |  var textBackgroundColor: Color? { backgroundColor }
   86|       |  var textFont:            Font? { font }
   87|       |  var textContainerOrigin: CGPoint { return CGPoint(x: textContainerInset.left, y: textContainerInset.top) }
   88|       |
   89|       |  var insertionPoint: Int? { selectedRange.length == 0 ? selectedRange.location : nil }
   90|       |
   91|       |  var selectedLines: Set<Int> {
   92|       |    guard let codeStorageDelegate = optCodeStorage?.delegate as? CodeStorageDelegate else { return Set() }
   93|       |
   94|       |    return Set(codeStorageDelegate.lineMap.linesContaining(range: selectedRange))
   95|       |  }
   96|       |
   97|       |  var documentVisibleRect: CGRect { return bounds }
   98|       |
   99|       |  // This implementation currently comes with an infelicity. If there is already a indicator view visible, while this
  100|       |  // method is called again, the old view should be removed right away. This is a bit awkward to implement, as we cannot
  101|       |  // add a stored property in an extension, but it should happen eventually as it does look better.
  102|       |  func showFindIndicator(for range: NSRange) {
  103|       |
  104|       |    // Determine the visible portion of the range
  105|       |    let visibleGlyphRange = layoutManager.glyphRange(forBoundingRectWithoutAdditionalLayout: documentVisibleRect,
  106|       |                                                     in: textContainer),
  107|       |        visibleCharRange  = layoutManager.characterRange(forGlyphRange: visibleGlyphRange, actualGlyphRange: nil),
  108|       |        visibleRange      = NSIntersectionRange(visibleCharRange, range)
  109|       |
  110|       |    // Set up a label view to animate as the indicator view
  111|       |    let glyphRange = layoutManager.glyphRange(forCharacterRange: visibleRange, actualCharacterRange: nil),
  112|       |        glyphRect  = layoutManager.boundingRect(forGlyphRange: glyphRange, in: textContainer),
  113|       |        label      = UILabel(frame: glyphRect.offsetBy(dx: textContainerOrigin.x, dy: textContainerOrigin.y)),
  114|       |        text       = NSMutableAttributedString(attributedString: textStorage.attributedSubstring(from: visibleRange))
  115|       |    text.addAttributes(highlightingAttributes, range: NSRange(location: 0, length: text.length))
  116|       |    label.attributedText      = text
  117|       |    label.layer.cornerRadius  = 3
  118|       |    label.layer.masksToBounds = true
  119|       |    addSubview(label)
  120|       |
  121|       |    // We animate the label in with a spring effect, and remove it with a delay.
  122|       |    label.alpha     = 0
  123|       |    label.transform = CGAffineTransform(scaleX: 0.2, y: 0.2)
  124|       |    UIView.animate(withDuration: 0.2, delay: 0, usingSpringWithDamping: 0.1, initialSpringVelocity: 1){
  125|       |      label.alpha = 1
  126|       |      label.transform = CGAffineTransform.identity
  127|       |    } completion: { _ in
  128|       |      UIView.animate(withDuration: 0.2, delay: 0.4){
  129|       |        label.alpha = 0
  130|       |      } completion: { _ in
  131|       |        label.removeFromSuperview()
  132|       |      }
  133|       |    }
  134|       |  }
  135|       |}
  136|       |
  137|       |
  138|       |#elseif os(macOS)
  139|       |
  140|       |// MARK: -
  141|       |// MARK: AppKit version
  142|       |
  143|       |import AppKit
  144|       |
  145|       |extension NSTextView: TextView {
  146|       |  typealias Color = NSColor
  147|       |  typealias Font  = NSFont
  148|       |
  149|      0|  var optLayoutManager: NSLayoutManager? { layoutManager }
  150|      0|  var optTextContainer: NSTextContainer? { textContainer }
  151|      0|  var optCodeStorage:   CodeStorage?     { textStorage as? CodeStorage }
  152|       |
  153|      0|  var textBackgroundColor: Color? { backgroundColor }
  154|      0|  var textFont:            Font? { font }
  155|      0|  var textContainerOrigin: CGPoint { return CGPoint(x: textContainerInset.width, y: textContainerInset.height) }
  156|       |
  157|       |  var text: String! {
  158|      0|    get { string }
  159|      0|    set { string = newValue }
  160|       |  }
  161|       |
  162|      0|  var insertionPoint: Int? {
  163|      0|    if let selection = selectedRanges.first as? NSRange, selection.length == 0 { return selection.location }
  164|      0|    else { return nil }
  165|      0|  }
  166|       |
  167|      0|  var selectedLines: Set<Int> {
  168|      0|    guard let codeStorageDelegate = optCodeStorage?.delegate as? CodeStorageDelegate else { return Set() }
  169|      0|
  170|      0|    let lineRanges: [Range<Int>] = selectedRanges.map{ range in
  171|      0|      if let range = range as? NSRange { return codeStorageDelegate.lineMap.linesContaining(range: range) }
  172|      0|      else { return 0..<0 }
  173|      0|    }
  174|      0|    return lineRanges.reduce(Set<Int>()){ $0.union($1) }
  175|      0|  }
  176|       |
  177|      0|  var documentVisibleRect: CGRect { enclosingScrollView?.documentVisibleRect ?? bounds }
  178|       |}
  179|       |
  180|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/Theme.swift:
    1|       |//
    2|       |//  Theme.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 14/05/2021.
    6|       |//
    7|       |//  This module defines code highlight themes.
    8|       |
    9|       |import SwiftUI
   10|       |
   11|       |
   12|       |/// A code highlighting theme. Different syntactic elements are purely distinguished by colour.
   13|       |///
   14|       |public struct Theme: Identifiable {
   15|      0|  public let id = UUID()
   16|       |
   17|       |  /// The name of the font to use.
   18|       |  ///
   19|       |  public var fontName: String
   20|       |
   21|       |  /// The point size of the font to use.
   22|       |  ///
   23|       |  public var fontSize: CGFloat
   24|       |
   25|       |  /// The default foreground text colour.
   26|       |  ///
   27|       |  public var textColour: OSColor
   28|       |
   29|       |  /// The colour for (all kinds of) comments.
   30|       |  ///
   31|       |  public var commentColour: OSColor
   32|       |
   33|       |  /// The colour for string literals.
   34|       |  ///
   35|       |  public var stringColour: OSColor
   36|       |
   37|       |  /// The colour for character literals.
   38|       |  ///
   39|       |  public var characterColour: OSColor
   40|       |
   41|       |  /// The colour for number literals.
   42|       |  ///
   43|       |  public var numberColour: OSColor
   44|       |
   45|       |  /// The colour for identifiers.
   46|       |  ///
   47|       |  public var identifierColour: OSColor
   48|       |
   49|       |  /// The colour for keywords.
   50|       |  ///
   51|       |  public var keywordColour: OSColor
   52|       |
   53|       |  /// The background colour.
   54|       |  ///
   55|       |  public var backgroundColour: OSColor
   56|       |
   57|       |  /// The colour of the current line highlight.
   58|       |  ///
   59|       |  public var currentLineColour: OSColor
   60|       |
   61|       |  /// The colour to use for the selection highlight.
   62|       |  ///
   63|       |  public var selectionColour: OSColor
   64|       |
   65|       |  /// The cursor colour.
   66|       |  ///
   67|       |  public var cursorColour: OSColor
   68|       |
   69|       |  /// The colour to use if invisibles are drawn.
   70|       |  ///
   71|       |  public var invisiblesColour: OSColor
   72|       |
   73|       |  public init(fontName: String,
   74|       |              fontSize: CGFloat,
   75|       |              textColour: OSColor,
   76|       |              commentColour: OSColor,
   77|       |              stringColour: OSColor,
   78|       |              characterColour: OSColor,
   79|       |              numberColour: OSColor,
   80|       |              identifierColour: OSColor,
   81|       |              keywordColour: OSColor,
   82|       |              backgroundColour: OSColor,
   83|       |              currentLineColour: OSColor,
   84|       |              selectionColour: OSColor,
   85|       |              cursorColour: OSColor,
   86|       |              invisiblesColour: OSColor)
   87|      0|  {
   88|      0|    self.fontName = fontName
   89|      0|    self.fontSize = fontSize
   90|      0|    self.textColour = textColour
   91|      0|    self.commentColour = commentColour
   92|      0|    self.stringColour = stringColour
   93|      0|    self.characterColour = characterColour
   94|      0|    self.numberColour = numberColour
   95|      0|    self.identifierColour = identifierColour
   96|      0|    self.keywordColour = keywordColour
   97|      0|    self.backgroundColour = backgroundColour
   98|      0|    self.currentLineColour = currentLineColour
   99|      0|    self.selectionColour = selectionColour
  100|      0|    self.cursorColour = cursorColour
  101|      0|    self.invisiblesColour = invisiblesColour
  102|      0|  }
  103|       |}
  104|       |
  105|       |/// A theme catalog indexing themes by name
  106|       |///
  107|       |typealias Themes = [String: Theme]
  108|       |
  109|       |extension Theme {
  110|       |
  111|       |  public static var defaultDark: Theme
  112|       |    = Theme(fontName: "SFMono-Medium",
  113|       |            fontSize: 13.0,
  114|       |            textColour: OSColor(red: 0.87, green: 0.87, blue: 0.88, alpha: 1.0),
  115|       |            commentColour: OSColor(red: 0.51, green: 0.55, blue: 0.59, alpha: 1.0),
  116|       |            stringColour: OSColor(red: 0.94, green: 0.53, blue: 0.46, alpha: 1.0),
  117|       |            characterColour: OSColor(red: 0.84, green: 0.79, blue: 0.53, alpha: 1.0),
  118|       |            numberColour: OSColor(red: 0.84, green: 0.79, blue: 0.53, alpha: 1.0),
  119|       |            identifierColour: OSColor(red: 0.89, green: 0.89, blue: 0.89, alpha: 1.0),
  120|       |            keywordColour: OSColor(red: 0.94, green: 0.51, blue: 0.69, alpha: 1.0),
  121|       |            backgroundColour: OSColor(red: 0.16, green: 0.16, blue: 0.18, alpha: 1.0),
  122|       |            currentLineColour: OSColor(red: 0.19, green: 0.20, blue: 0.22, alpha: 1.0),
  123|       |            selectionColour: OSColor(red: 0.40, green: 0.44, blue: 0.51, alpha: 1.0),
  124|       |            cursorColour: OSColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0),
  125|       |            invisiblesColour: OSColor(red: 0.33, green: 0.37, blue: 0.42, alpha: 1.0))
  126|       |
  127|       |  public static var defaultLight: Theme
  128|       |    = Theme(fontName: "SFMono-Regular",
  129|       |            fontSize: 13.0,
  130|       |            textColour: OSColor(red: 0.15, green: 0.15, blue: 0.15, alpha: 1.0),
  131|       |            commentColour: OSColor(red: 0.45, green: 0.50, blue: 0.55, alpha: 1.0),
  132|       |            stringColour: OSColor(red: 0.76, green: 0.24, blue: 0.16, alpha: 1.0),
  133|       |            characterColour: OSColor(red: 0.14, green: 0.19, blue: 0.81, alpha: 1.0),
  134|       |            numberColour: OSColor(red: 0.14, green: 0.19, blue: 0.81, alpha: 1.0),
  135|       |            identifierColour: OSColor(red: 0.15, green: 0.15, blue: 0.15, alpha: 1.0),
  136|       |            keywordColour: OSColor(red: 0.63, green: 0.28, blue: 0.62, alpha: 1.0),
  137|       |            backgroundColour: OSColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0),
  138|       |            currentLineColour: OSColor(red: 0.93, green: 0.96, blue: 1.0, alpha: 1.0),
  139|       |            selectionColour: OSColor(red: 0.73, green: 0.84, blue: 0.99, alpha: 1.0),
  140|       |            cursorColour: OSColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 1.0),
  141|       |            invisiblesColour: OSColor(red: 0.84, green: 0.84, blue: 0.84, alpha: 1.0))
  142|       |}
  143|       |
  144|       |extension Theme {
  145|       |
  146|       |  /// Font object on the basis of the font name and size of the theme.
  147|       |  ///
  148|      0|  var font: OSFont {
  149|      0|    if fontName.hasPrefix("SFMono") {
  150|      0|
  151|      0|      let weightString = fontName.dropFirst("SFMono".count)
  152|      0|      let weight       : OSFont.Weight
  153|      0|      switch weightString {
  154|      0|      case "UltraLight": weight = .ultraLight
  155|      0|      case "Thin":       weight = .thin
  156|      0|      case "Light":      weight = .light
  157|      0|      case "Regular":    weight = .regular
  158|      0|      case "Medium":     weight = .medium
  159|      0|      case "Semibold":   weight = .semibold
  160|      0|      case "Bold":       weight = .bold
  161|      0|      case "Heavy":      weight = .heavy
  162|      0|      case "Black":      weight = .black
  163|      0|      default:           weight = .regular
  164|      0|      }
  165|      0|      return OSFont.monospacedSystemFont(ofSize: fontSize, weight: weight)
  166|      0|
  167|      0|    } else {
  168|      0|
  169|      0|      return OSFont(name: fontName, size: fontSize) ?? OSFont.monospacedSystemFont(ofSize: fontSize, weight: .regular)
  170|      0|
  171|      0|    }
  172|      0|  }
  173|       |
  174|       |  #if os(iOS)
  175|       |
  176|       |  /// Tint colour on the basis oc the cursor and selection colour of the theme.
  177|       |  ///
  178|       |  var tintColour: UIColor {
  179|       |    var selectionHue        = CGFloat(0.0),
  180|       |        selectionSaturation = CGFloat(0.0),
  181|       |        selectionBrigthness = CGFloat(0.0),
  182|       |        cursorHue           = CGFloat(0.0),
  183|       |        cursorSaturation    = CGFloat(0.0),
  184|       |        cursorBrigthness    = CGFloat(0.0)
  185|       |
  186|       |    // TODO: This is awkward...
  187|       |    selectionColour.getHue(&selectionHue,
  188|       |                           saturation: &selectionSaturation,
  189|       |                           brightness: &selectionBrigthness,
  190|       |                           alpha: nil)
  191|       |    cursorColour.getHue(&cursorHue, saturation: &cursorSaturation, brightness: &cursorBrigthness, alpha: nil)
  192|       |    return UIColor(hue: selectionHue,
  193|       |                   saturation: 1.0,
  194|       |                   brightness: selectionBrigthness,
  195|       |                   alpha: 1.0)
  196|       |  }
  197|       |
  198|       |  #endif
  199|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/CodeEditorView/Sources/CodeEditorView/ViewModifiers.swift:
    1|       |//
    2|       |//  ViewModifers.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Manuel M T Chakravarty on 27/03/2021.
    6|       |//
    7|       |//  This file contains general purpose view modifiers.
    8|       |
    9|       |import SwiftUI
   10|       |
   11|       |
   12|       |// MARK: -
   13|       |// MARK: Views with rounded corners on the left hand side.
   14|       |
   15|       |fileprivate struct RectWithRoundedCornersOnTheLeft: Shape {
   16|       |  let cornerRadius: CGFloat
   17|       |
   18|      0|  func path(in rect: CGRect) -> Path {
   19|      0|    var path = Path()
   20|      0|
   21|      0|    let minXCorner = rect.minX + cornerRadius,
   22|      0|        minYCorner = rect.minY + cornerRadius,
   23|      0|        maxYCorner = rect.maxY - cornerRadius
   24|      0|
   25|      0|    // We start in the top right corner and proceed clockwise
   26|      0|    path.move(to: CGPoint(x: rect.maxX, y: rect.minY))
   27|      0|    path.addLine(to: CGPoint(x: rect.maxX, y: rect.maxY))
   28|      0|    path.addLine(to: CGPoint(x: minXCorner, y: rect.maxY))
   29|      0|
   30|      0|    path.addArc(center: CGPoint(x: minXCorner, y: maxYCorner),
   31|      0|                radius: cornerRadius,
   32|      0|                startAngle: Angle(degrees: 90),
   33|      0|                endAngle: Angle(degrees: 180),
   34|      0|                clockwise: false)
   35|      0|
   36|      0|    path.addLine(to: CGPoint(x: rect.minX, y: minYCorner))
   37|      0|
   38|      0|    path.addArc(center: CGPoint(x: minXCorner, y: minYCorner),
   39|      0|                radius: cornerRadius,
   40|      0|                startAngle: Angle(degrees: 90),
   41|      0|                endAngle: Angle(degrees: 0),
   42|      0|                clockwise: false)
   43|      0|
   44|      0|    path.addLine(to: CGPoint(x: minXCorner, y: rect.minY))
   45|      0|    path.addLine(to: CGPoint(x: rect.maxX, y: rect.minY))
   46|      0|    return path
   47|      0|  }
   48|       |}
   49|       |
   50|       |extension View {
   51|       |
   52|       |  /// Clip the view such that it has rounded corners on its left hand side.
   53|       |  ///
   54|      0|  func roundedCornersOnTheLeft(cornerRadius: CGFloat = 5) -> some View {
   55|      0|    clipShape(RectWithRoundedCornersOnTheLeft(cornerRadius: cornerRadius))
   56|      0|  }
   57|       |}
   58|       |

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/Inject/Sources/Inject/Inject.swift:
    1|       |import Foundation
    2|       |import Combine
    3|       |import SwiftUI
    4|       |
    5|       |/// Common protocol interface for classes that support observing injection events
    6|       |/// This is automatically added to all NSObject subclasses like `ViewController`s or `Window`s
    7|       |public protocol InjectListener {
    8|       |    associatedtype InjectInstanceType = Self
    9|       |
   10|       |    func enableInjection()
   11|       |    func onInjection(callback: @escaping (InjectInstanceType) -> Void) -> Void
   12|       |}
   13|       |
   14|       |/// Public namespace for using Inject API
   15|       |public enum Inject {
   16|       |    public static let observer = injectionObserver
   17|       |    public static let load: Void = loadInjectionImplementation
   18|       |    public static var animation: SwiftUI.Animation?
   19|       |}
   20|       |
   21|       |public extension InjectListener {
   22|       |    /// Ensures injection is enabled
   23|       |    @inlinable @inline(__always)
   24|      0|    func enableInjection() {
   25|      0|        _ = Inject.load
   26|      0|    }
   27|       |}
   28|       |
   29|       |#if DEBUG
   30|      2|private var loadInjectionImplementation: Void = {
   31|      2|#if os(macOS)
   32|      2|    let bundleName = "macOSInjection.bundle"
   33|      2|#elseif os(tvOS)
   34|      2|    let bundleName = "tvOSInjection.bundle"
   35|      2|#elseif targetEnvironment(simulator)
   36|      2|    let bundleName = "iOSInjection.bundle"
   37|      2|#else
   38|      2|    let bundleName = "maciOSInjection.bundle"
   39|      2|#endif // OS and environment conditions
   40|      2|    Bundle(path: "/Applications/InjectionIII.app/Contents/Resources/" + bundleName)?.load()
   41|      2|}()
   42|       |
   43|       |public class InjectionObserver: ObservableObject {
   44|       |    @Published public private(set) var injectionNumber = 0
   45|       |    private var cancellable: AnyCancellable?
   46|       |
   47|      2|    fileprivate init() {
   48|      2|        cancellable = NotificationCenter.default.publisher(for: Notification.Name("INJECTION_BUNDLE_NOTIFICATION"))
   49|      2|            .sink { [weak self] _ in
   50|      0|                if let animation = Inject.animation {
   51|      0|                    withAnimation(animation) {
   52|      0|                        self?.injectionNumber += 1
   53|      0|                    }
   54|      0|                } else {
   55|      0|                    self?.injectionNumber += 1
   56|      0|                }
   57|      0|            }
   58|      2|    }
   59|       |}
   60|       |
   61|       |private let injectionObserver = InjectionObserver()
   62|       |private var injectionObservationKey = arc4random()
   63|       |
   64|       |public extension InjectListener where Self: NSObject {
   65|      0|    func onInjection(callback: @escaping (Self) -> Void) {
   66|      0|        let observation = injectionObserver.objectWillChange.sink(receiveValue: { [weak self] in
   67|      0|            guard let self = self else { return }
   68|      0|            callback(self)
   69|      0|        })
   70|      0|
   71|      0|        objc_setAssociatedObject(self, &injectionObservationKey, observation, .OBJC_ASSOCIATION_RETAIN)
   72|      0|    }
   73|       |}
   74|       |
   75|       |#else
   76|       |public class InjectionObserver: ObservableObject {}
   77|       |private let injectionObserver = InjectionObserver()
   78|       |private var loadInjectionImplementation: Void = {}()
   79|       |
   80|       |public extension InjectListener where Self: NSObject {
   81|       |    @inlinable @inline(__always)
   82|       |    func onInjection(callback: @escaping (Self) -> Void) {}
   83|       |}
   84|       |#endif // DEBUG

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/Inject/Sources/Inject/Integrations/Hosts.swift:
    1|       |#if canImport(UIKit)
    2|       |import UIKit
    3|       |public typealias InjectViewControllerType = UIViewController
    4|       |public typealias InjectViewType = UIView
    5|       |#elseif canImport(AppKit)
    6|       |import AppKit
    7|       |public typealias InjectViewControllerType = NSViewController
    8|       |public typealias InjectViewType = NSView
    9|       |#endif
   10|       |
   11|       |#if DEBUG
   12|       |
   13|       |extension Inject {
   14|       |    public typealias ViewControllerHost = _InjectableViewControllerHost
   15|       |    public typealias ViewHost = _InjectableViewHost
   16|       |}
   17|       |
   18|       |/// Usage: to create an autoreloading view controller, wrap your
   19|       |/// view controller that you wish to see changes within `Inject.ViewHost`. For example,
   20|       |/// If you are using a `TestViewController`, you would do the following:
   21|       |/// `let myView = Inject.ViewControllerHost(TestViewController())`
   22|       |/// And within the parent view, you should add the view above.
   23|       |@dynamicMemberLookup
   24|       |public class _InjectableViewControllerHost<Hosted: InjectViewControllerType>: InjectViewControllerType {
   25|       |    public private(set) var instance: Hosted
   26|       |    let constructor: () -> Hosted
   27|       |    
   28|      0|    public init(_ constructor: @autoclosure @escaping () -> Hosted) {
   29|      0|        instance = constructor()
   30|      0|        self.constructor = constructor
   31|      0|        
   32|      0|        super.init(nibName: nil, bundle: nil)
   33|      0|        self.enableInjection()
   34|      0|        
   35|      0|        addAsChild()
   36|      0|        onInjection { instance in
   37|      0|            instance.resetHosted()
   38|      0|        }
   39|      0|    }
   40|       |    
   41|      0|    override open func loadView() {
   42|      0|        view = InjectViewType(frame: .zero)
   43|      0|    }
   44|       |    
   45|      0|    private func resetHosted() {
   46|      0|        // remove old vc from child list
   47|      0|#if canImport(UIKit)
   48|      0|        instance.willMove(toParent: nil)
   49|      0|#endif
   50|      0|        instance.view.removeFromSuperview()
   51|      0|        instance.removeFromParent()
   52|      0|        
   53|      0|        instance = constructor()
   54|      0|        addAsChild()
   55|      0|    }
   56|       |    
   57|      0|    private func addAsChild() {
   58|      0|        // add the real content as child
   59|      0|        addChild(instance)
   60|      0|        view.addSubview(instance.view)
   61|      0|#if canImport(UIKit)
   62|      0|        instance.didMove(toParent: self)
   63|      0|#endif
   64|      0|        
   65|      0|        instance.view.translatesAutoresizingMaskIntoConstraints = false
   66|      0|        [
   67|      0|            instance.view.topAnchor.constraint(equalTo: view.topAnchor),
   68|      0|            instance.view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
   69|      0|            instance.view.bottomAnchor.constraint(equalTo: view.bottomAnchor),
   70|      0|            instance.view.trailingAnchor.constraint(equalTo: view.trailingAnchor),
   71|      0|        ]
   72|      0|        .forEach { $0.isActive = true }
   73|      0|    }
   74|       |    
   75|       |    @available(*, unavailable)
   76|      0|    required init?(coder: NSCoder) {
   77|      0|        fatalError("init(coder:) has not been implemented")
   78|      0|    }
   79|       |    
   80|       |    public subscript<T>(dynamicMember keyPath: WritableKeyPath<Hosted, T>) -> T {
   81|      0|        get { instance[keyPath: keyPath] }
   82|      0|        set { instance[keyPath: keyPath] = newValue }
   83|       |    }
   84|       |    
   85|      0|    public subscript<T>(dynamicMember keyPath: KeyPath<Hosted, T>) -> T {
   86|      0|        instance[keyPath: keyPath]
   87|      0|    }
   88|       |}
   89|       |
   90|       |/// Usage: to create an autoreloading view, wrap your
   91|       |/// view that you wish to see changes within `Inject.ViewHost`. For example,
   92|       |/// If you are using a `TestView`, you would do the following:
   93|       |/// `let myView = Inject.ViewHost(TestView())`
   94|       |/// And within the parent view, you should add the view above.
   95|       |@dynamicMemberLookup
   96|       |public class _InjectableViewHost<Hosted: InjectViewType>: InjectViewType {
   97|       |    public private(set) var instance: Hosted
   98|       |    let constructor: () -> Hosted
   99|       |    
  100|      0|    public init(_ constructor: @autoclosure @escaping () -> Hosted) {
  101|      0|        instance = constructor()
  102|      0|        self.constructor = constructor
  103|      0|        
  104|      0|        super.init(frame: .zero)
  105|      0|        self.enableInjection()
  106|      0|        addAsChild()
  107|      0|        onInjection { instance in
  108|      0|            instance.resetHosted()
  109|      0|        }
  110|      0|    }
  111|       |    
  112|      0|    private func resetHosted() {
  113|      0|        instance.removeFromSuperview()
  114|      0|        
  115|      0|        instance = constructor()
  116|      0|        addAsChild()
  117|      0|    }
  118|       |    
  119|      0|    private func addAsChild() {
  120|      0|        // add the real content as child
  121|      0|        addSubview(instance)
  122|      0|        
  123|      0|        instance.translatesAutoresizingMaskIntoConstraints = false
  124|      0|        [
  125|      0|            instance.topAnchor.constraint(equalTo: topAnchor),
  126|      0|            instance.leadingAnchor.constraint(equalTo: leadingAnchor),
  127|      0|            instance.bottomAnchor.constraint(equalTo: bottomAnchor),
  128|      0|            instance.trailingAnchor.constraint(equalTo: trailingAnchor),
  129|      0|        ]
  130|      0|        .forEach { $0.isActive = true }
  131|      0|    }
  132|       |    
  133|       |    @available(*, unavailable)
  134|      0|    required init?(coder: NSCoder) {
  135|      0|        fatalError("init(coder:) has not been implemented")
  136|      0|    }
  137|       |    
  138|       |    public subscript<T>(dynamicMember keyPath: WritableKeyPath<Hosted, T>) -> T {
  139|      0|        get { instance[keyPath: keyPath] }
  140|      0|        set { instance[keyPath: keyPath] = newValue }
  141|       |    }
  142|       |    
  143|      0|    public subscript<T>(dynamicMember keyPath: KeyPath<Hosted, T>) -> T {
  144|      0|        instance[keyPath: keyPath]
  145|      0|    }
  146|       |}
  147|       |
  148|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/Inject/Sources/Inject/Integrations/SwiftUI.swift:
    1|       |import Foundation
    2|       |import SwiftUI
    3|       |
    4|       |#if DEBUG
    5|       |public extension SwiftUI.View {
    6|      2|    func enableInjection() -> some SwiftUI.View {
    7|      2|        _ = Inject.load
    8|      2|        
    9|      2|        // Use AnyView in case the underlying view structure changes during injection.
   10|      2|        // This is only in effect in debug builds.
   11|      2|        return AnyView(self)
   12|      2|    }
   13|       |
   14|      0|    func onInjection(callback: @escaping (Self) -> Void) -> some SwiftUI.View {
   15|      0|        onReceive(Inject.observer.objectWillChange, perform: {
   16|      0|            callback(self)
   17|      0|        })
   18|      0|        .enableInjection()
   19|      0|    }
   20|       |}
   21|       |
   22|       |#else
   23|       |public extension SwiftUI.View {
   24|       |    @inlinable @inline(__always)
   25|       |    func enableInjection() -> Self { self }
   26|       |
   27|       |    @inlinable @inline(__always)
   28|       |    func onInjection(callback: @escaping (Self) -> Void) -> some SwiftUI.View {
   29|       |        self
   30|       |    }
   31|       |}
   32|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/MarkdownUI/Sources/MarkdownUI/Deprecations.swift:
    1|       |import SwiftUI
    2|       |
    3|       |// NB: Deprecated in 1.0
    4|       |
    5|       |extension View {
    6|       |  @available(
    7|       |    *, deprecated,
    8|       |    message: "Use the Markdown initializer to specify a base URL"
    9|       |  )
   10|      0|  public func markdownBaseURL(_ url: URL?) -> some View {
   11|      0|    return self
   12|      0|  }
   13|       |}
   14|       |
   15|       |@available(*, deprecated, renamed: "MarkdownStyle")
   16|       |public typealias DefaultMarkdownStyle = MarkdownStyle
   17|       |
   18|       |extension MarkdownStyle {
   19|       |  @available(
   20|       |    *, deprecated,
   21|       |    message: "Use init(font:foregroundColor:measurements:) to create a Markdown style"
   22|       |  )
   23|      0|  public init(font: Font, foregroundColor: Color, codeFontName: String) {
   24|      0|    self.init(font: font, foregroundColor: foregroundColor)
   25|      0|  }
   26|       |
   27|       |  @available(
   28|       |    *, deprecated,
   29|       |    message: "Use init(font:foregroundColor:measurements:) to create a Markdown style"
   30|       |  )
   31|       |  public init(
   32|       |    font: Font, foregroundColor: Color, codeFontName: String, codeFontSizeMultiple: CGFloat
   33|      0|  ) {
   34|      0|    self.init(
   35|      0|      font: font, foregroundColor: foregroundColor,
   36|      0|      measurements: .init(codeFontScale: codeFontSizeMultiple)
   37|      0|    )
   38|      0|  }
   39|       |
   40|       |  @available(
   41|       |    *, deprecated,
   42|       |    message: "Use init(font:foregroundColor:measurements:) to create a Markdown style"
   43|       |  )
   44|       |  public init(
   45|       |    font: Font,
   46|       |    foregroundColor: Color,
   47|       |    codeFontName: String,
   48|       |    codeFontSizeMultiple: CGFloat,
   49|       |    headingFontSizeMultiples: [CGFloat]
   50|      0|  ) {
   51|      0|    self.init(
   52|      0|      font: font,
   53|      0|      foregroundColor: foregroundColor,
   54|      0|      measurements: .init(
   55|      0|        codeFontScale: codeFontSizeMultiple,
   56|      0|        headingScales: .init(
   57|      0|          h1: headingFontSizeMultiples[0],
   58|      0|          h2: headingFontSizeMultiples[1],
   59|      0|          h3: headingFontSizeMultiples[2],
   60|      0|          h4: headingFontSizeMultiples[3],
   61|      0|          h5: headingFontSizeMultiples[4],
   62|      0|          h6: headingFontSizeMultiples[5]
   63|      0|        )
   64|      0|      )
   65|      0|    )
   66|      0|  }
   67|       |
   68|       |  @available(
   69|       |    *, deprecated,
   70|       |    message: "Use init(font:foregroundColor:measurements:) to create a Markdown style"
   71|       |  )
   72|      0|  public init(font: Font, foregroundColor: Color, codeFontSizeMultiple: CGFloat) {
   73|      0|    self.init(
   74|      0|      font: font, foregroundColor: foregroundColor,
   75|      0|      measurements: .init(codeFontScale: codeFontSizeMultiple)
   76|      0|    )
   77|      0|  }
   78|       |
   79|       |  @available(
   80|       |    *, deprecated,
   81|       |    message: "Use init(font:foregroundColor:measurements:) to create a Markdown style"
   82|       |  )
   83|       |  public init(
   84|       |    font: Font,
   85|       |    foregroundColor: Color,
   86|       |    codeFontSizeMultiple: CGFloat,
   87|       |    headingFontSizeMultiples: [CGFloat]
   88|      0|  ) {
   89|      0|    self.init(
   90|      0|      font: font, foregroundColor: foregroundColor,
   91|      0|      measurements: .init(
   92|      0|        codeFontScale: codeFontSizeMultiple,
   93|      0|        headingScales: .init(
   94|      0|          h1: headingFontSizeMultiples[0],
   95|      0|          h2: headingFontSizeMultiples[1],
   96|      0|          h3: headingFontSizeMultiples[2],
   97|      0|          h4: headingFontSizeMultiples[3],
   98|      0|          h5: headingFontSizeMultiples[4],
   99|      0|          h6: headingFontSizeMultiples[5]
  100|      0|        )
  101|      0|      )
  102|      0|    )
  103|      0|  }
  104|       |
  105|       |  @available(
  106|       |    *, deprecated,
  107|       |    message: "Use init(font:foregroundColor:measurements:) to create a Markdown style"
  108|       |  )
  109|      0|  public init(font: Font, foregroundColor: Color, headingFontSizeMultiples: [CGFloat]) {
  110|      0|    self.init(
  111|      0|      font: font, foregroundColor: foregroundColor,
  112|      0|      measurements: .init(
  113|      0|        headingScales: .init(
  114|      0|          h1: headingFontSizeMultiples[0],
  115|      0|          h2: headingFontSizeMultiples[1],
  116|      0|          h3: headingFontSizeMultiples[2],
  117|      0|          h4: headingFontSizeMultiples[3],
  118|      0|          h5: headingFontSizeMultiples[4],
  119|      0|          h6: headingFontSizeMultiples[5]
  120|      0|        )
  121|      0|      )
  122|      0|    )
  123|      0|  }
  124|       |
  125|       |  @available(
  126|       |    *, deprecated,
  127|       |    message: "Use init(font:foregroundColor:measurements:) to create a Markdown style"
  128|       |  )
  129|      0|  public init(font: Font, codeFontName: String) {
  130|      0|    self.init(font: font, foregroundColor: .primary)
  131|      0|  }
  132|       |
  133|       |  @available(
  134|       |    *, deprecated,
  135|       |    message: "Use init(font:foregroundColor:measurements:) to create a Markdown style"
  136|       |  )
  137|      0|  public init(font: Font, codeFontName: String, codeFontSizeMultiple: CGFloat) {
  138|      0|    self.init(
  139|      0|      font: font,
  140|      0|      foregroundColor: .primary,
  141|      0|      measurements: .init(codeFontScale: codeFontSizeMultiple)
  142|      0|    )
  143|      0|  }
  144|       |
  145|       |  @available(
  146|       |    *, deprecated,
  147|       |    message: "Use init(font:foregroundColor:measurements:) to create a Markdown style"
  148|       |  )
  149|       |  public init(
  150|       |    font: Font,
  151|       |    codeFontName: String,
  152|       |    codeFontSizeMultiple: CGFloat,
  153|       |    headingFontSizeMultiples: [CGFloat]
  154|      0|  ) {
  155|      0|    self.init(
  156|      0|      font: font,
  157|      0|      foregroundColor: .primary,
  158|      0|      measurements: .init(
  159|      0|        codeFontScale: codeFontSizeMultiple,
  160|      0|        headingScales: .init(
  161|      0|          h1: headingFontSizeMultiples[0],
  162|      0|          h2: headingFontSizeMultiples[1],
  163|      0|          h3: headingFontSizeMultiples[2],
  164|      0|          h4: headingFontSizeMultiples[3],
  165|      0|          h5: headingFontSizeMultiples[4],
  166|      0|          h6: headingFontSizeMultiples[5]
  167|      0|        )
  168|      0|      )
  169|      0|    )
  170|      0|  }
  171|       |
  172|       |  @available(
  173|       |    *, deprecated,
  174|       |    message: "Use init(font:foregroundColor:measurements:) to create a Markdown style"
  175|       |  )
  176|      0|  public init(font: Font, codeFontSizeMultiple: CGFloat) {
  177|      0|    self.init(
  178|      0|      font: font,
  179|      0|      foregroundColor: .primary,
  180|      0|      measurements: .init(codeFontScale: codeFontSizeMultiple)
  181|      0|    )
  182|      0|  }
  183|       |
  184|       |  @available(
  185|       |    *, deprecated,
  186|       |    message: "Use init(font:foregroundColor:measurements:) to create a Markdown style"
  187|       |  )
  188|       |  public init(
  189|       |    font: Font, codeFontSizeMultiple: CGFloat, headingFontSizeMultiples: [CGFloat]
  190|      0|  ) {
  191|      0|    self.init(
  192|      0|      font: font,
  193|      0|      foregroundColor: .primary,
  194|      0|      measurements: .init(
  195|      0|        codeFontScale: codeFontSizeMultiple,
  196|      0|        headingScales: .init(
  197|      0|          h1: headingFontSizeMultiples[0],
  198|      0|          h2: headingFontSizeMultiples[1],
  199|      0|          h3: headingFontSizeMultiples[2],
  200|      0|          h4: headingFontSizeMultiples[3],
  201|      0|          h5: headingFontSizeMultiples[4],
  202|      0|          h6: headingFontSizeMultiples[5]
  203|      0|        )
  204|      0|      )
  205|      0|    )
  206|      0|  }
  207|       |
  208|       |  @available(
  209|       |    *, deprecated,
  210|       |    message: "Use init(font:foregroundColor:measurements:) to create a Markdown style"
  211|       |  )
  212|       |  public init(
  213|       |    font: Font, headingFontSizeMultiples: [CGFloat]
  214|      0|  ) {
  215|      0|    self.init(
  216|      0|      font: font,
  217|      0|      foregroundColor: .primary,
  218|      0|      measurements: .init(
  219|      0|        headingScales: .init(
  220|      0|          h1: headingFontSizeMultiples[0],
  221|      0|          h2: headingFontSizeMultiples[1],
  222|      0|          h3: headingFontSizeMultiples[2],
  223|      0|          h4: headingFontSizeMultiples[3],
  224|      0|          h5: headingFontSizeMultiples[4],
  225|      0|          h6: headingFontSizeMultiples[5]
  226|      0|        )
  227|      0|      )
  228|      0|    )
  229|      0|  }
  230|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/MarkdownUI/Sources/MarkdownUI/Markdown.swift:
    1|       |import AttributedText
    2|       |import Combine
    3|       |import CombineSchedulers
    4|       |@_exported import CommonMark
    5|       |import SwiftUI
    6|       |
    7|       |/// A view that displays Markdown-formatted text.
    8|       |///
    9|       |/// A Markdown view displays formatted text using the Markdown syntax, fully compliant with the
   10|       |/// [CommonMark Spec](https://spec.commonmark.org/current/).
   11|       |///
   12|       |/// You can create a Markdown view by passing a Markdown-formatted string to ``Markdown/init(_:baseURL:)-tumr``.
   13|       |///
   14|       |/// ```swift
   15|       |/// Markdown("You can try **CommonMark** [here](https://spec.commonmark.org/dingus/).")
   16|       |/// ```
   17|       |///
   18|       |/// If you have already parsed a Markdown-formatted string into a `CommonMark.Document`, you can initialize
   19|       |/// a Markdown view with it, using ``Markdown/init(_:baseURL:)-7b5wl``.
   20|       |///
   21|       |/// ```swift
   22|       |/// let document = try! Document(
   23|       |///   markdown: "You can try **CommonMark** [here](https://spec.commonmark.org/dingus/)."
   24|       |/// )
   25|       |///
   26|       |/// var body: some View {
   27|       |///   Markdown(document)
   28|       |/// }
   29|       |/// ```
   30|       |///
   31|       |/// Alternatively, you can provide the content of the Markdown view passing a CommonMark
   32|       |/// block builder to ``Markdown/init(baseURL:content:)``.
   33|       |///
   34|       |/// ```swift
   35|       |/// Markdown {
   36|       |///   Heading(level: 2) {
   37|       |///     "Markdown lists"
   38|       |///   }
   39|       |///   OrderedList {
   40|       |///     "One"
   41|       |///     "Two"
   42|       |///     "Three"
   43|       |///   }
   44|       |///   BulletList {
   45|       |///     "Start a line with a star"
   46|       |///     "Profit!"
   47|       |///   }
   48|       |/// }
   49|       |/// ```
   50|       |///
   51|       |/// When creating a Markdown view, specify a base URL if you want to use relative URLs in your Markdown content.
   52|       |///
   53|       |/// ```swift
   54|       |/// Markdown(
   55|       |///   #"""
   56|       |///   You can explore all the capabilities of this package in the
   57|       |///   [companion demo project](Examples/MarkdownUIDemo).
   58|       |///   """#,
   59|       |///   baseURL: URL(string: "https://github.com/gonzalezreal/MarkdownUI/raw/main/")
   60|       |/// )
   61|       |/// ```
   62|       |///
   63|       |/// A Markdown view downloads and presents the images it finds in the Markdown-formatted content.
   64|       |/// You may want to store some of your content's images locally. In that case, you can configure a
   65|       |/// Markdown view to load images with a given URL scheme from the asset catalog, using the
   66|       |/// ``Markdown/setImageHandler(_:forURLScheme:)`` modifier.
   67|       |///
   68|       |/// ```swift
   69|       |/// Markdown(
   70|       |///   #"""
   71|       |///   The Markdown view loads this image from the network:
   72|       |///   ![](https://picsum.photos/id/223/100/150)
   73|       |///
   74|       |///   And looks for this other image in the app's bundle:
   75|       |///   ![](asset:///Puppy)
   76|       |///   """#
   77|       |/// )
   78|       |/// .setImageHandler(.assetImage(), forURLScheme: "asset")
   79|       |/// ```
   80|       |///
   81|       |/// A Markdown view renders its content with a default base font, color, and measurements
   82|       |/// appropriate for the current environment. You can customize some or all of these values
   83|       |/// by passing a new ``MarkdownStyle`` to the ``Markdown/markdownStyle(_:)``
   84|       |/// view modifier.
   85|       |///
   86|       |/// ```swift
   87|       |/// Markdown(
   88|       |///   #"""
   89|       |///   ## Inline code
   90|       |///   If you have inline code blocks, wrap them in backticks: `var example = true`.
   91|       |///   """#
   92|       |/// )
   93|       |/// .markdownStyle(
   94|       |///   MarkdownStyle(
   95|       |///     font: .system(.body, design: .serif),
   96|       |///     foregroundColor: .indigo,
   97|       |///     measurements: .init(
   98|       |///       codeFontScale: 0.8,
   99|       |///       headingSpacing: 0.3
  100|       |///     )
  101|       |///   )
  102|       |/// )
  103|       |/// ```
  104|       |///
  105|       |public struct Markdown: View {
  106|       |  private enum Storage: Hashable {
  107|       |    case markdown(String)
  108|       |    case document(Document)
  109|       |
  110|      2|    var document: Document {
  111|      2|      switch self {
  112|      2|      case .markdown(let string):
  113|      2|        return (try? Document(markdown: string)) ?? Document(blocks: [])
  114|      2|      case .document(let document):
  115|      0|        return document
  116|      2|      }
  117|      2|    }
  118|       |  }
  119|       |
  120|       |  private struct ViewState {
  121|      2|    var attributedString = NSAttributedString()
  122|       |    var environmentHash: Int?
  123|       |  }
  124|       |
  125|      2|  @Environment(\.layoutDirection) private var layoutDirection: LayoutDirection
  126|      2|  @Environment(\.multilineTextAlignment) private var textAlignment: TextAlignment
  127|      2|  @Environment(\.sizeCategory) private var sizeCategory: ContentSizeCategory
  128|      2|  @Environment(\.markdownStyle) private var style: MarkdownStyle
  129|      2|  @Environment(\.openMarkdownLink) private var openMarkdownLink
  130|      2|  @State private var viewState = ViewState()
  131|       |
  132|      2|  private var imageHandlers: [String: MarkdownImageHandler] = [
  133|      2|    "http": .networkImage,
  134|      2|    "https": .networkImage,
  135|      2|  ]
  136|       |
  137|       |  private var storage: Storage
  138|       |  private var baseURL: URL?
  139|       |
  140|       |  /// Creates a Markdown view that displays a Markdown-formatted string.
  141|       |  /// - Parameters:
  142|       |  ///   - markdown: The string containing Markdown-formatted text.
  143|       |  ///   - baseURL: The base URL to use when resolving Markdown URLs. The initializer treats URLs
  144|       |  ///              as being relative to this URL. If this value is nil, the initializer doesn’t resolve URLs.
  145|       |  ///              The default is `nil`.
  146|      2|  public init(_ markdown: String, baseURL: URL? = nil) {
  147|      2|    self.storage = .markdown(markdown)
  148|      2|    self.baseURL = baseURL
  149|      2|  }
  150|       |
  151|       |  /// Creates a Markdown view that displays a Markdown document.
  152|       |  ///
  153|       |  /// Use this initializer to create a Markdown view that displays a `CommonMark.Document`
  154|       |  /// stored in a variable.
  155|       |  ///
  156|       |  /// - Parameters:
  157|       |  ///   - document: The `CommonMark.Document` to display.
  158|       |  ///   - baseURL: The base URL to use when resolving Markdown URLs. The initializer treats URLs
  159|       |  ///              as being relative to this URL. If this value is nil, the initializer doesn’t resolve URLs.
  160|       |  ///              The default is `nil`.
  161|      0|  public init(_ document: Document, baseURL: URL? = nil) {
  162|      0|    self.storage = .document(document)
  163|      0|    self.baseURL = baseURL
  164|      0|  }
  165|       |
  166|       |  /// Creates a Markdown view that displays the given Markdown blocks.
  167|       |  ///
  168|       |  /// Use this initializer to create a Markdown view that displays content built in a declarative way.
  169|       |  ///
  170|       |  /// ```swift
  171|       |  /// Markdown {
  172|       |  ///   Heading(level: 2) {
  173|       |  ///     "Markdown lists"
  174|       |  ///   }
  175|       |  ///   OrderedList {
  176|       |  ///     "One"
  177|       |  ///     "Two"
  178|       |  ///     "Three"
  179|       |  ///   }
  180|       |  ///   BulletList {
  181|       |  ///     "Start a line with a star"
  182|       |  ///     "Profit!"
  183|       |  ///   }
  184|       |  /// }
  185|       |  /// ```
  186|       |  ///
  187|       |  /// - Parameters:
  188|       |  ///   - baseURL: The base URL to use when resolving Markdown URLs. The initializer treats URLs
  189|       |  ///              as being relative to this URL. If this value is nil, the initializer doesn’t resolve URLs.
  190|       |  ///              The default is `nil`.
  191|       |  ///   - content: A block array builder that creates the content of this Markdown view.
  192|      0|  public init(baseURL: URL? = nil, @BlockArrayBuilder content: () -> [Block]) {
  193|      0|    self.init(Document(blocks: content), baseURL: baseURL)
  194|      0|  }
  195|       |
  196|      6|  private var viewStatePublisher: AnyPublisher<ViewState, Never> {
  197|      6|    struct Environment: Hashable {
  198|      6|      var storage: Storage
  199|      6|      var baseURL: URL?
  200|      6|      var layoutDirection: LayoutDirection
  201|      6|      var textAlignment: TextAlignment
  202|      6|      var sizeCategory: ContentSizeCategory
  203|      6|      var style: MarkdownStyle
  204|      6|    }
  205|      6|
  206|      6|    return Just(
  207|      6|      // This value helps determine if we need to render the markdown again
  208|      6|      Environment(
  209|      6|        storage: self.storage,
  210|      6|        baseURL: self.baseURL,
  211|      6|        layoutDirection: self.layoutDirection,
  212|      6|        textAlignment: self.textAlignment,
  213|      6|        sizeCategory: self.sizeCategory,
  214|      6|        style: self.style
  215|      6|      ).hashValue
  216|      6|    )
  217|      6|    .flatMap { environmentHash -> AnyPublisher<ViewState, Never> in
  218|      4|      if self.viewState.environmentHash == environmentHash,
  219|      4|        !viewState.attributedString.hasMarkdownImages
  220|      4|      {
  221|      2|        return Empty().eraseToAnyPublisher()
  222|      2|      } else if self.viewState.environmentHash == environmentHash {
  223|      0|        return self.loadMarkdownImages(environmentHash: environmentHash)
  224|      2|      } else {
  225|      2|        return self.renderAttributedString(environmentHash: environmentHash)
  226|      2|      }
  227|      0|    }
  228|      6|    .eraseToAnyPublisher()
  229|      6|  }
  230|       |
  231|      6|  public var body: some View {
  232|      6|    AttributedText(self.viewState.attributedString, onOpenLink: openMarkdownLink?.handler)
  233|      6|      .onReceive(self.viewStatePublisher) { viewState in
  234|      2|        self.viewState = viewState
  235|      2|      }
  236|      6|  }
  237|       |
  238|      0|  private func loadMarkdownImages(environmentHash: Int) -> AnyPublisher<ViewState, Never> {
  239|      0|    NSAttributedString.loadingMarkdownImages(
  240|      0|      from: self.viewState.attributedString,
  241|      0|      using: self.imageHandlers
  242|      0|    )
  243|      0|    .map { ViewState(attributedString: $0, environmentHash: environmentHash) }
  244|      0|    .receive(on: UIScheduler.shared)
  245|      0|    .eraseToAnyPublisher()
  246|      0|  }
  247|       |
  248|      2|  private func renderAttributedString(environmentHash: Int) -> AnyPublisher<ViewState, Never> {
  249|      2|    self.storage.document.renderAttributedString(
  250|      2|      baseURL: self.baseURL,
  251|      2|      baseWritingDirection: .init(self.layoutDirection),
  252|      2|      alignment: .init(
  253|      2|        layoutDirection: self.layoutDirection,
  254|      2|        textAlignment: self.textAlignment
  255|      2|      ),
  256|      2|      style: self.style,
  257|      2|      imageHandlers: self.imageHandlers
  258|      2|    )
  259|      2|    .map { ViewState(attributedString: $0, environmentHash: environmentHash) }
  260|      2|    .receive(on: UIScheduler.shared)
  261|      2|    .eraseToAnyPublisher()
  262|      2|  }
  263|       |}
  264|       |
  265|       |extension Markdown {
  266|       |  /// Sets an image handler associated with the specified URL scheme within this view.
  267|       |  ///
  268|       |  /// A ``MarkdownImageHandler`` is a type encapsulating image loading behavior
  269|       |  /// that you can associate with a URL scheme. You can provide one of the built-in
  270|       |  /// image handlers, like ``MarkdownImageHandler/assetImage(name:in:)``.
  271|       |  ///
  272|       |  /// The following example shows how to configure a `Markdown` view to load images
  273|       |  /// with the `asset://` URL scheme from the asset catalog or a resource file in the app's
  274|       |  /// bundle:
  275|       |  ///
  276|       |  /// ```swift
  277|       |  /// Markdown(
  278|       |  ///   #"""
  279|       |  ///   ![](asset:///Puppy)
  280|       |  ///
  281|       |  ///   ― Photo by André Spieker
  282|       |  ///   """#
  283|       |  /// )
  284|       |  /// .setImageHandler(.assetImage(), forURLScheme: "asset")
  285|       |  /// ```
  286|       |  ///
  287|       |  /// - Parameters:
  288|       |  ///   - imageHandler: The image handler instance to handle the URL scheme.
  289|       |  ///   - urlScheme: The URL scheme to handle.
  290|       |  /// - Returns: A ``Markdown`` view that uses the image handler you supply to
  291|       |  ///            handle image URLs with the specified scheme.
  292|       |  public func setImageHandler(
  293|       |    _ imageHandler: MarkdownImageHandler,
  294|       |    forURLScheme urlScheme: String
  295|      0|  ) -> Markdown {
  296|      0|    var result = self
  297|      0|    result.imageHandlers[urlScheme] = imageHandler
  298|      0|
  299|      0|    return result
  300|      0|  }
  301|       |}
  302|       |
  303|       |extension View {
  304|       |  /// Sets the style for Markdown within this view.
  305|       |  ///
  306|       |  /// Use this modifier to set a specific style for all Markdown instances within a view:
  307|       |  ///
  308|       |  /// ```swift
  309|       |  /// Markdown(
  310|       |  ///   #"""
  311|       |  ///   ## Inline code
  312|       |  ///   If you have inline code blocks, wrap them in backticks: `var example = true`.
  313|       |  ///   """#
  314|       |  /// )
  315|       |  /// .markdownStyle(
  316|       |  ///   MarkdownStyle(
  317|       |  ///     font: .system(.body, design: .serif),
  318|       |  ///     foregroundColor: .indigo,
  319|       |  ///     measurements: .init(
  320|       |  ///       codeFontScale: 0.8,
  321|       |  ///       headingSpacing: 0.3
  322|       |  ///     )
  323|       |  ///   )
  324|       |  /// )
  325|       |  /// ```
  326|       |  ///
  327|       |  /// - Parameter markdownStyle: The Markdown style to use in this view.
  328|       |  /// - Returns: A view with the Markdown style set to the value you supply.
  329|      2|  public func markdownStyle(_ markdownStyle: MarkdownStyle) -> some View {
  330|      2|    environment(\.markdownStyle, markdownStyle)
  331|      2|  }
  332|       |
  333|       |  /// Registers an action to handle Markdown links within this view.
  334|       |  ///
  335|       |  /// Use this modifier to customize Markdown link handling in a view hierarchy.
  336|       |  ///
  337|       |  /// ```swift
  338|       |  /// struct ContentView: View {
  339|       |  ///   @State private var url: URL? = nil
  340|       |  ///   @State private var showingAlert = false
  341|       |  ///
  342|       |  ///   var body: some View {
  343|       |  ///     Markdown(
  344|       |  ///       #"""
  345|       |  ///       **MarkdownUI** is a library for rendering Markdown in *SwiftUI*, fully compliant with the
  346|       |  ///       [CommonMark Spec](https://spec.commonmark.org/current/).
  347|       |  ///       """#
  348|       |  ///     )
  349|       |  ///     .onOpenMarkdownLink { url in
  350|       |  ///       self.url = url
  351|       |  ///       self.showingAlert = true
  352|       |  ///     }
  353|       |  ///     .alert(isPresented: $showingAlert) {
  354|       |  ///       Alert(
  355|       |  ///         title: Text("Open Link"),
  356|       |  ///         message: Text(self.url?.absoluteString ?? "nil")
  357|       |  ///       )
  358|       |  ///     }
  359|       |  ///   }
  360|       |  /// }
  361|       |  /// ```
  362|       |  ///
  363|       |  /// Alternatively, if your deployment target is macOS 12.0+ or iOS 15.0+, you can customize
  364|       |  /// Markdown link handling by setting the `openURL` environment value.
  365|       |  ///
  366|       |  /// ```swift
  367|       |  /// Markdown(
  368|       |  ///   #"""
  369|       |  ///   **MarkdownUI** is a library for rendering Markdown in *SwiftUI*, fully compliant with the
  370|       |  ///   [CommonMark Spec](https://spec.commonmark.org/current/).
  371|       |  ///   """#
  372|       |  /// )
  373|       |  /// .environment(
  374|       |  ///   \.openURL,
  375|       |  ///   OpenURLAction { url in
  376|       |  ///     self.url = url
  377|       |  ///     self.showingAlert = true
  378|       |  ///     return .handled
  379|       |  ///   }
  380|       |  /// )
  381|       |  /// ```
  382|       |  ///
  383|       |  /// - Parameter action: The action to perform for a given URL. If action is `nil`, the view
  384|       |  ///                     opens the Markdown link using the appropriate system service.
  385|       |  /// - Returns: A view that opens Markdown links using the action you supply.
  386|      0|  public func onOpenMarkdownLink(perform action: ((URL) -> Void)? = nil) -> some View {
  387|      0|    environment(\.openMarkdownLink, action.map(OpenMarkdownLinkAction.init(handler:)))
  388|      0|  }
  389|       |}
  390|       |
  391|       |extension EnvironmentValues {
  392|       |  fileprivate var markdownStyle: MarkdownStyle {
  393|     44|    get { self[MarkdownStyleKey.self] }
  394|     22|    set { self[MarkdownStyleKey.self] = newValue }
  395|       |  }
  396|       |
  397|       |  fileprivate var openMarkdownLink: OpenMarkdownLinkAction? {
  398|     22|    get { self[OpenMarkdownLinkKey.self] }
  399|      0|    set { self[OpenMarkdownLinkKey.self] = newValue }
  400|       |  }
  401|       |}
  402|       |
  403|       |private struct MarkdownStyleKey: EnvironmentKey {
  404|       |  static let defaultValue = MarkdownStyle()
  405|       |}
  406|       |
  407|       |private struct OpenMarkdownLinkAction {
  408|       |  var handler: (URL) -> Void
  409|       |}
  410|       |
  411|       |private struct OpenMarkdownLinkKey: EnvironmentKey {
  412|       |  static let defaultValue: OpenMarkdownLinkAction? = nil
  413|       |}
  414|       |
  415|       |extension NSWritingDirection {
  416|      2|  fileprivate init(_ layoutDirection: LayoutDirection) {
  417|      2|    switch layoutDirection {
  418|      2|    case .leftToRight:
  419|      2|      self = .leftToRight
  420|      2|    case .rightToLeft:
  421|      0|      self = .rightToLeft
  422|      2|    @unknown default:
  423|      0|      self = .natural
  424|      2|    }
  425|      2|  }
  426|       |}
  427|       |
  428|       |extension NSTextAlignment {
  429|      2|  fileprivate init(layoutDirection: LayoutDirection, textAlignment: TextAlignment) {
  430|      2|    switch (layoutDirection, textAlignment) {
  431|      2|    case (_, .leading):
  432|      2|      self = .natural
  433|      2|    case (_, .center):
  434|      0|      self = .center
  435|      2|    case (.leftToRight, .trailing):
  436|      0|      self = .right
  437|      2|    case (.rightToLeft, .trailing):
  438|      0|      self = .left
  439|      2|    default:
  440|      0|      self = .natural
  441|      2|    }
  442|      2|  }
  443|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/MarkdownUI/Sources/MarkdownUI/MarkdownImageHandler.swift:
    1|       |import Combine
    2|       |import NetworkImage
    3|       |import SwiftUI
    4|       |
    5|       |/// A type that encapsulates the image loading behavior of a ``Markdown`` view for a given URL scheme.
    6|       |///
    7|       |/// To configure an image handler for a `Markdown` view, use the ``Markdown/setImageHandler(_:forURLScheme:)``
    8|       |/// modifier. The following example configures an asset image handler for the `asset://` URL scheme.
    9|       |///
   10|       |/// ```swift
   11|       |/// Markdown(
   12|       |///   #"""
   13|       |///   ![](asset:///Puppy)
   14|       |///
   15|       |///   ― Photo by André Spieker
   16|       |///   """#
   17|       |/// )
   18|       |/// .setImageHandler(.assetImage(), forURLScheme: "asset")
   19|       |/// ```
   20|       |///
   21|       |public struct MarkdownImageHandler {
   22|       |  var imageAttachment: (URL) -> AnyPublisher<NSTextAttachment, Never>
   23|       |
   24|      2|  init(imageAttachment: @escaping (URL) -> AnyPublisher<NSTextAttachment, Never>) {
   25|      2|    self.imageAttachment = imageAttachment
   26|      2|  }
   27|       |}
   28|       |
   29|       |extension MarkdownImageHandler {
   30|       |  /// A `MarkdownImageHandler` instance that loads images from the network.
   31|       |  ///
   32|       |  /// `Markdown` views use this image handler for the `http://` and `https://`
   33|       |  /// schemes by default.
   34|      0|  public static let networkImage = MarkdownImageHandler { url in
   35|      0|    NetworkImageLoader.shared.image(for: url)
   36|      0|      .map { image in
   37|      0|        let attachment = ResizableImageAttachment()
   38|      0|        attachment.image = image
   39|      0|        return attachment
   40|      0|      }
   41|      0|      .replaceError(with: NSTextAttachment())
   42|      0|      .eraseToAnyPublisher()
   43|      0|  }
   44|       |
   45|       |  /// A `MarkdownImageHandler` instance that loads images from resource files or asset catalogs.
   46|       |  /// - Parameters:
   47|       |  ///   - name: A closure that extracts the asset name from a given URL. If not specified, the image handler
   48|       |  ///           uses the last path component of the URL as the name of the asset.
   49|       |  ///   - bundle: The bundle to search for the image file or asset catalog. Specify `nil` to search the
   50|       |  ///             app's main bundle.
   51|       |  public static func assetImage(
   52|      0|    name: @escaping (URL) -> String = \.lastPathComponent,
  ------------------
  | Unexecuted instantiation: $s10MarkdownUI0A12ImageHandlerV05assetC04name2inACSS10Foundation3URLVc_So8NSBundleCSgtFZfA_SSAIcs7KeyPathCyAISSGcfu_
  ------------------
  | Unexecuted instantiation: $s10MarkdownUI0A12ImageHandlerV05assetC04name2inACSS10Foundation3URLVc_So8NSBundleCSgtFZfA_SSAIcs7KeyPathCyAISSGcfu_SSAIcfu0_
  ------------------
   53|       |    in bundle: Bundle? = nil
   54|      0|  ) -> MarkdownImageHandler {
   55|      0|    MarkdownImageHandler { url in
   56|      0|      let image: PlatformImage?
   57|      0|      #if os(macOS)
   58|      0|        if let bundle = bundle, bundle != .main {
   59|      0|          image = bundle.image(forResource: name(url))
   60|      0|        } else {
   61|      0|          image = NSImage(named: name(url))
   62|      0|        }
   63|      0|      #elseif os(iOS) || os(tvOS)
   64|      0|        image = UIImage(named: name(url), in: bundle, compatibleWith: nil)
   65|      0|      #endif
   66|      0|      let attachment = image.map { image -> NSTextAttachment in
   67|      0|        let result = ResizableImageAttachment()
   68|      0|        result.image = image
   69|      0|        return result
   70|      0|      }
   71|      0|      return Just(attachment ?? NSTextAttachment()).eraseToAnyPublisher()
   72|      0|    }
   73|      0|  }
   74|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/MarkdownUI/Sources/MarkdownUI/Rendering/AttributedStringRenderer.swift:
    1|       |import CommonMark
    2|       |import SwiftUI
    3|       |
    4|       |struct AttributedStringRenderer {
    5|       |  struct State {
    6|       |    var font: MarkdownStyle.Font
    7|       |    var foregroundColor: MarkdownStyle.Color
    8|       |    var paragraphSpacing: CGFloat
    9|       |    var headIndent: CGFloat = 0
   10|       |    var tailIndent: CGFloat = 0
   11|      2|    var tabStops: [NSTextTab] = []
   12|      2|    var paragraphEdits: [ParagraphEdit] = []
   13|       |
   14|     38|    mutating func setListMarker(_ listMarker: ListMarker?) {
   15|     38|      // Replace any previous list marker by two indents
   16|     38|      paragraphEdits = paragraphEdits.map { edit in
   17|      0|        guard case .listMarker = edit else { return edit }
   18|      0|        return .firstLineIndent(2)
   19|      0|      }
   20|     38|      guard let listMarker = listMarker else { return }
   21|     30|      paragraphEdits.append(.listMarker(listMarker, font: font))
   22|     30|    }
   23|       |
   24|      0|    mutating func addFirstLineIndent(_ count: Int = 1) {
   25|      0|      paragraphEdits.append(.firstLineIndent(count))
   26|      0|    }
   27|       |  }
   28|       |
   29|       |  enum ParagraphEdit {
   30|       |    case firstLineIndent(Int)
   31|       |    case listMarker(ListMarker, font: MarkdownStyle.Font)
   32|       |  }
   33|       |
   34|       |  enum ListMarker {
   35|       |    case disc
   36|       |    case decimal(Int)
   37|       |  }
   38|       |
   39|       |  let baseURL: URL?
   40|       |  let baseWritingDirection: NSWritingDirection
   41|       |  let alignment: NSTextAlignment
   42|       |  let style: MarkdownStyle
   43|       |
   44|      2|  func renderDocument(_ document: Document) -> NSAttributedString {
   45|      2|    return renderBlocks(
   46|      2|      document.blocks,
   47|      2|      state: .init(
   48|      2|        font: style.font,
   49|      2|        foregroundColor: style.foregroundColor,
   50|      2|        paragraphSpacing: style.measurements.paragraphSpacing
   51|      2|      )
   52|      2|    )
   53|      2|  }
   54|       |}
   55|       |
   56|       |extension AttributedStringRenderer {
   57|      2|  private func renderBlocks(_ blocks: [Block], state: State) -> NSMutableAttributedString {
   58|      2|    let result = NSMutableAttributedString()
   59|      2|
   60|     18|    for (offset, block) in blocks.enumerated() {
   61|     18|      result.append(
   62|     18|        renderBlock(block, hasSuccessor: offset < blocks.count - 1, state: state)
   63|     18|      )
   64|     18|    }
   65|      2|
   66|      2|    return result
   67|      2|  }
   68|       |
   69|       |  private func renderBlock(
   70|       |    _ block: Block,
   71|       |    hasSuccessor: Bool,
   72|       |    state: State
   73|     48|  ) -> NSAttributedString {
   74|     48|    switch block {
   75|     48|    case .blockQuote(let blockQuote):
   76|      0|      return renderBlockQuote(blockQuote, hasSuccessor: hasSuccessor, state: state)
   77|     48|    case .bulletList(let bulletList):
   78|      8|      return renderBulletList(bulletList, hasSuccessor: hasSuccessor, state: state)
   79|     48|    case .orderedList(let orderedList):
   80|      0|      return renderOrderedList(orderedList, hasSuccessor: hasSuccessor, state: state)
   81|     48|    case .code(let codeBlock):
   82|      0|      return renderCodeBlock(codeBlock, hasSuccessor: hasSuccessor, state: state)
   83|     48|    case .html(let htmlBlock):
   84|      0|      return renderHTMLBlock(htmlBlock, hasSuccessor: hasSuccessor, state: state)
   85|     48|    case .paragraph(let paragraph):
   86|     32|      return renderParagraph(paragraph, hasSuccessor: hasSuccessor, state: state)
   87|     48|    case .heading(let heading):
   88|      8|      return renderHeading(heading, hasSuccessor: hasSuccessor, state: state)
   89|     48|    case .thematicBreak:
   90|      0|      return renderThematicBreak(hasSuccessor: hasSuccessor, state: state)
   91|     48|    }
   92|     48|  }
   93|       |
   94|       |  private func renderBlockQuote(
   95|       |    _ blockQuote: BlockQuote,
   96|       |    hasSuccessor: Bool,
   97|       |    state: State
   98|      0|  ) -> NSAttributedString {
   99|      0|    let result = NSMutableAttributedString()
  100|      0|
  101|      0|    var state = state
  102|      0|    state.font = state.font.italic()
  103|      0|    state.headIndent += style.measurements.headIndentStep
  104|      0|    state.tailIndent += style.measurements.tailIndentStep
  105|      0|    state.tabStops.append(
  106|      0|      .init(textAlignment: .natural, location: state.headIndent)
  107|      0|    )
  108|      0|    state.addFirstLineIndent()
  109|      0|
  110|      0|    for (offset, item) in blockQuote.items.enumerated() {
  111|      0|      result.append(
  112|      0|        renderBlock(item, hasSuccessor: offset < blockQuote.items.count - 1, state: state)
  113|      0|      )
  114|      0|    }
  115|      0|
  116|      0|    if hasSuccessor {
  117|      0|      result.append(string: .paragraphSeparator)
  118|      0|    }
  119|      0|
  120|      0|    return result
  121|      0|  }
  122|       |
  123|       |  private func renderBulletList(
  124|       |    _ bulletList: BulletList,
  125|       |    hasSuccessor: Bool,
  126|       |    state: State
  127|      8|  ) -> NSAttributedString {
  128|      8|    let result = NSMutableAttributedString()
  129|      8|
  130|      8|    var itemState = state
  131|      8|    itemState.paragraphSpacing = bulletList.tight ? 0 : style.measurements.paragraphSpacing
  132|      8|    itemState.headIndent += style.measurements.headIndentStep
  133|      8|    itemState.tabStops.append(
  134|      8|      contentsOf: [
  135|      8|        .init(
  136|      8|          textAlignment: .trailing(baseWritingDirection),
  137|      8|          location: itemState.headIndent - style.measurements.listMarkerSpacing
  138|      8|        ),
  139|      8|        .init(textAlignment: .natural, location: itemState.headIndent),
  140|      8|      ]
  141|      8|    )
  142|      8|    itemState.setListMarker(nil)
  143|      8|
  144|     30|    for (offset, item) in bulletList.items.enumerated() {
  145|     30|      result.append(
  146|     30|        renderListItem(
  147|     30|          item,
  148|     30|          listMarker: .disc,
  149|     30|          parentParagraphSpacing: state.paragraphSpacing,
  150|     30|          hasSuccessor: offset < bulletList.items.count - 1,
  151|     30|          state: itemState
  152|     30|        )
  153|     30|      )
  154|     30|    }
  155|      8|
  156|      8|    if hasSuccessor {
  157|      6|      result.append(string: .paragraphSeparator)
  158|      8|    }
  159|      8|
  160|      8|    return result
  161|      8|  }
  162|       |
  163|       |  private func renderOrderedList(
  164|       |    _ orderedList: OrderedList,
  165|       |    hasSuccessor: Bool,
  166|       |    state: State
  167|      0|  ) -> NSAttributedString {
  168|      0|    let result = NSMutableAttributedString()
  169|      0|
  170|      0|    // Measure the width of the highest list number in em units and use it
  171|      0|    // as the head indent step if higher than the style's head indent step.
  172|      0|    let highestNumber = orderedList.start + orderedList.items.count - 1
  173|      0|    let headIndentStep = max(
  174|      0|      style.measurements.headIndentStep,
  175|      0|      NSAttributedString(
  176|      0|        string: "\(highestNumber).",
  177|      0|        attributes: [.font: state.font.monospacedDigit().resolve()]
  178|      0|      ).em() + style.measurements.listMarkerSpacing
  179|      0|    )
  180|      0|
  181|      0|    var itemState = state
  182|      0|    itemState.paragraphSpacing = orderedList.tight ? 0 : style.measurements.paragraphSpacing
  183|      0|    itemState.headIndent += headIndentStep
  184|      0|    itemState.tabStops.append(
  185|      0|      contentsOf: [
  186|      0|        .init(
  187|      0|          textAlignment: .trailing(baseWritingDirection),
  188|      0|          location: itemState.headIndent - style.measurements.listMarkerSpacing
  189|      0|        ),
  190|      0|        .init(textAlignment: .natural, location: itemState.headIndent),
  191|      0|      ]
  192|      0|    )
  193|      0|    itemState.setListMarker(nil)
  194|      0|
  195|      0|    for (offset, item) in orderedList.items.enumerated() {
  196|      0|      result.append(
  197|      0|        renderListItem(
  198|      0|          item,
  199|      0|          listMarker: .decimal(offset + orderedList.start),
  200|      0|          parentParagraphSpacing: state.paragraphSpacing,
  201|      0|          hasSuccessor: offset < orderedList.items.count - 1,
  202|      0|          state: itemState
  203|      0|        )
  204|      0|      )
  205|      0|    }
  206|      0|
  207|      0|    if hasSuccessor {
  208|      0|      result.append(string: .paragraphSeparator)
  209|      0|    }
  210|      0|
  211|      0|    return result
  212|      0|  }
  213|       |
  214|       |  private func renderListItem(
  215|       |    _ listItem: ListItem,
  216|       |    listMarker: ListMarker,
  217|       |    parentParagraphSpacing: CGFloat,
  218|       |    hasSuccessor: Bool,
  219|       |    state: State
  220|     30|  ) -> NSAttributedString {
  221|     30|    let result = NSMutableAttributedString()
  222|     30|
  223|     30|    for (offset, block) in listItem.blocks.enumerated() {
  224|     30|      var blockState = state
  225|     30|
  226|     30|      if offset == 0 {
  227|     30|        // The first block should have the list marker
  228|     30|        blockState.setListMarker(listMarker)
  229|     30|      } else {
  230|      0|        blockState.addFirstLineIndent(2)
  231|     30|      }
  232|     30|
  233|     30|      if !hasSuccessor, offset == listItem.blocks.count - 1 {
  234|      8|        // Use the appropriate paragraph spacing after the list
  235|      8|        blockState.paragraphSpacing = max(parentParagraphSpacing, state.paragraphSpacing)
  236|     30|      }
  237|     30|
  238|     30|      result.append(
  239|     30|        renderBlock(
  240|     30|          block,
  241|     30|          hasSuccessor: offset < listItem.blocks.count - 1,
  242|     30|          state: blockState
  243|     30|        )
  244|     30|      )
  245|     30|    }
  246|     30|
  247|     30|    if hasSuccessor {
  248|     22|      result.append(string: .paragraphSeparator)
  249|     30|    }
  250|     30|
  251|     30|    return result
  252|     30|  }
  253|       |
  254|       |  private func renderCodeBlock(
  255|       |    _ codeBlock: CodeBlock,
  256|       |    hasSuccessor: Bool,
  257|       |    state: State
  258|      0|  ) -> NSAttributedString {
  259|      0|    var state = state
  260|      0|    state.font = state.font.scale(style.measurements.codeFontScale).monospaced()
  261|      0|    state.headIndent += style.measurements.headIndentStep
  262|      0|    state.tabStops.append(
  263|      0|      .init(textAlignment: .natural, location: state.headIndent)
  264|      0|    )
  265|      0|    state.addFirstLineIndent()
  266|      0|
  267|      0|    var code = codeBlock.code.replacingOccurrences(of: "\n", with: String.lineSeparator)
  268|      0|    // Remove the last line separator
  269|      0|    code.removeLast()
  270|      0|
  271|      0|    return renderParagraph(.init(text: [.text(code)]), hasSuccessor: hasSuccessor, state: state)
  272|      0|  }
  273|       |
  274|       |  private func renderHTMLBlock(
  275|       |    _ htmlBlock: HTMLBlock,
  276|       |    hasSuccessor: Bool,
  277|       |    state: State
  278|      0|  ) -> NSAttributedString {
  279|      0|    var html = htmlBlock.html.replacingOccurrences(of: "\n", with: String.lineSeparator)
  280|      0|    // Remove the last line separator
  281|      0|    html.removeLast()
  282|      0|
  283|      0|    // Render HTML blocks as plain text paragraphs
  284|      0|    return renderParagraph(.init(text: [.text(html)]), hasSuccessor: hasSuccessor, state: state)
  285|      0|  }
  286|       |
  287|       |  private func renderParagraph(
  288|       |    _ paragraph: Paragraph,
  289|       |    hasSuccessor: Bool,
  290|       |    state: State
  291|     32|  ) -> NSAttributedString {
  292|     32|    let result = renderParagraphEdits(state: state)
  293|     32|    result.append(renderInlines(paragraph.text, state: state))
  294|     32|
  295|     32|    result.addAttribute(
  296|     32|      .paragraphStyle, value: paragraphStyle(state: state), range: NSRange(0..<result.length)
  297|     32|    )
  298|     32|
  299|     32|    if hasSuccessor {
  300|      2|      result.append(string: .paragraphSeparator)
  301|     32|    }
  302|     32|
  303|     32|    return result
  304|     32|  }
  305|       |
  306|       |  private func renderHeading(
  307|       |    _ heading: Heading,
  308|       |    hasSuccessor: Bool,
  309|       |    state: State
  310|      8|  ) -> NSAttributedString {
  311|      8|    let result = renderParagraphEdits(state: state)
  312|      8|
  313|      8|    var inlineState = state
  314|      8|    inlineState.font = inlineState.font.bold().scale(
  315|      8|      style.measurements.headingScales[heading.level - 1]
  316|      8|    )
  317|      8|
  318|      8|    result.append(renderInlines(heading.text, state: inlineState))
  319|      8|
  320|      8|    // The paragraph spacing is relative to the parent font
  321|      8|    var paragraphState = state
  322|      8|    paragraphState.paragraphSpacing = style.measurements.headingSpacing
  323|      8|
  324|      8|    result.addAttribute(
  325|      8|      .paragraphStyle,
  326|      8|      value: paragraphStyle(state: paragraphState),
  327|      8|      range: NSRange(0..<result.length)
  328|      8|    )
  329|      8|
  330|      8|    if hasSuccessor {
  331|      8|      result.append(string: .paragraphSeparator)
  332|      8|    }
  333|      8|
  334|      8|    return result
  335|      8|  }
  336|       |
  337|      0|  private func renderThematicBreak(hasSuccessor: Bool, state: State) -> NSAttributedString {
  338|      0|    let result = renderParagraphEdits(state: state)
  339|      0|
  340|      0|    result.append(
  341|      0|      .init(
  342|      0|        string: .nbsp,
  343|      0|        attributes: [
  344|      0|          .font: state.font.resolve(),
  345|      0|          .strikethroughStyle: NSUnderlineStyle.single.rawValue,
  346|      0|          .strikethroughColor: MarkdownStyle.Color.separator.platformColor!,
  347|      0|        ]
  348|      0|      )
  349|      0|    )
  350|      0|
  351|      0|    result.addAttribute(
  352|      0|      .paragraphStyle,
  353|      0|      value: paragraphStyle(state: state),
  354|      0|      range: NSRange(0..<result.length)
  355|      0|    )
  356|      0|
  357|      0|    if hasSuccessor {
  358|      0|      result.append(string: .paragraphSeparator)
  359|      0|    }
  360|      0|
  361|      0|    return result
  362|      0|  }
  363|       |
  364|     40|  private func renderParagraphEdits(state: State) -> NSMutableAttributedString {
  365|     40|    let result = NSMutableAttributedString()
  366|     40|
  367|     40|    for paragraphEdit in state.paragraphEdits {
  368|     30|      switch paragraphEdit {
  369|     30|      case .firstLineIndent(let count):
  370|      0|        result.append(
  371|      0|          renderText(.init(repeating: "\t", count: count), state: state)
  372|      0|        )
  373|     30|      case .listMarker(let listMarker, let font):
  374|     30|        switch listMarker {
  375|     30|        case .disc:
  376|     30|          var state = state
  377|     30|          state.font = font
  378|     30|          result.append(renderText("\t•\t", state: state))
  379|     30|        case .decimal(let value):
  380|      0|          var state = state
  381|      0|          state.font = font.monospacedDigit()
  382|      0|          result.append(renderText("\t\(value).\t", state: state))
  383|     30|        }
  384|     30|      }
  385|     40|    }
  386|     40|
  387|     40|    return result
  388|     40|  }
  389|       |
  390|     56|  private func renderInlines(_ inlines: [Inline], state: State) -> NSMutableAttributedString {
  391|     56|    let result = NSMutableAttributedString()
  392|     56|
  393|     80|    for inline in inlines {
  394|     80|      result.append(renderInline(inline, state: state))
  395|     80|    }
  396|     56|
  397|     56|    return result
  398|     56|  }
  399|       |
  400|     80|  private func renderInline(_ inline: Inline, state: State) -> NSAttributedString {
  401|     80|    switch inline {
  402|     80|    case .text(let text):
  403|     64|      return renderText(text, state: state)
  404|     80|    case .softBreak:
  405|      0|      return renderSoftBreak(state: state)
  406|     80|    case .lineBreak:
  407|      0|      return renderLineBreak(state: state)
  408|     80|    case .code(let inlineCode):
  409|      0|      return renderInlineCode(inlineCode, state: state)
  410|     80|    case .html(let inlineHTML):
  411|      0|      return renderInlineHTML(inlineHTML, state: state)
  412|     80|    case .emphasis(let emphasis):
  413|      0|      return renderEmphasis(emphasis, state: state)
  414|     80|    case .strong(let strong):
  415|      0|      return renderStrong(strong, state: state)
  416|     80|    case .link(let link):
  417|     16|      return renderLink(link, state: state)
  418|     80|    case .image(let image):
  419|      0|      return renderImage(image, state: state)
  420|     80|    }
  421|     80|  }
  422|       |
  423|     94|  private func renderText(_ text: String, state: State) -> NSAttributedString {
  424|     94|    NSAttributedString(
  425|     94|      string: text,
  426|     94|      attributes: [
  427|     94|        .font: state.font.resolve(),
  428|     94|        .foregroundColor: state.foregroundColor.platformColor!,
  429|     94|      ]
  430|     94|    )
  431|     94|  }
  432|       |
  433|      0|  private func renderSoftBreak(state: State) -> NSAttributedString {
  434|      0|    renderText(" ", state: state)
  435|      0|  }
  436|       |
  437|      0|  private func renderLineBreak(state: State) -> NSAttributedString {
  438|      0|    renderText(.lineSeparator, state: state)
  439|      0|  }
  440|       |
  441|      0|  private func renderInlineCode(_ inlineCode: InlineCode, state: State) -> NSAttributedString {
  442|      0|    var state = state
  443|      0|    state.font = state.font.scale(style.measurements.codeFontScale).monospaced()
  444|      0|    return renderText(inlineCode.code, state: state)
  445|      0|  }
  446|       |
  447|      0|  private func renderInlineHTML(_ inlineHTML: InlineHTML, state: State) -> NSAttributedString {
  448|      0|    renderText(inlineHTML.html, state: state)
  449|      0|  }
  450|       |
  451|      0|  private func renderEmphasis(_ emphasis: Emphasis, state: State) -> NSAttributedString {
  452|      0|    var state = state
  453|      0|    state.font = state.font.italic()
  454|      0|    return renderInlines(emphasis.children, state: state)
  455|      0|  }
  456|       |
  457|      0|  private func renderStrong(_ strong: Strong, state: State) -> NSAttributedString {
  458|      0|    var state = state
  459|      0|    state.font = state.font.bold()
  460|      0|    return renderInlines(strong.children, state: state)
  461|      0|  }
  462|       |
  463|     16|  private func renderLink(_ link: CommonMark.Link, state: State) -> NSAttributedString {
  464|     16|    let result = renderInlines(link.children, state: state)
  465|     16|    let absoluteURL =
  466|     16|      link.url
  467|     32|      .map(\.relativeString)
  ------------------
  | $s10MarkdownUI24AttributedStringRendererV10renderLink33_5C179B64D66C9DE76A0B337B842F8079LL_5stateSo012NSAttributedD0C10CommonMark0G0V_AC5StateVtFSS10Foundation3URLVcs7KeyPathCyAPSSGcfu_:
  |  467|     16|      .map(\.relativeString)
  ------------------
  | $s10MarkdownUI24AttributedStringRendererV10renderLink33_5C179B64D66C9DE76A0B337B842F8079LL_5stateSo012NSAttributedD0C10CommonMark0G0V_AC5StateVtFSS10Foundation3URLVcs7KeyPathCyAPSSGcfu_SSAPcfu0_:
  |  467|     16|      .map(\.relativeString)
  ------------------
  468|     16|      .flatMap { URL(string: $0, relativeTo: baseURL) }
  469|     32|      .map(\.absoluteURL)
  ------------------
  | $s10MarkdownUI24AttributedStringRendererV10renderLink33_5C179B64D66C9DE76A0B337B842F8079LL_5stateSo012NSAttributedD0C10CommonMark0G0V_AC5StateVtF10Foundation3URLVAPcs7KeyPathCyA2PGcfu1_:
  |  469|     16|      .map(\.absoluteURL)
  ------------------
  | $s10MarkdownUI24AttributedStringRendererV10renderLink33_5C179B64D66C9DE76A0B337B842F8079LL_5stateSo012NSAttributedD0C10CommonMark0G0V_AC5StateVtF10Foundation3URLVAPcs7KeyPathCyA2PGcfu1_A2Pcfu2_:
  |  469|     16|      .map(\.absoluteURL)
  ------------------
  470|     16|    if let url = absoluteURL {
  471|     16|      result.addAttribute(.link, value: url, range: NSRange(0..<result.length))
  472|     16|    }
  473|     16|    #if os(macOS)
  474|     16|      if let title = link.title {
  475|      0|        result.addAttribute(.toolTip, value: title, range: NSRange(0..<result.length))
  476|     16|      }
  477|     16|    #endif
  478|     16|
  479|     16|    return result
  480|     16|  }
  481|       |
  482|      0|  private func renderImage(_ image: CommonMark.Image, state: State) -> NSAttributedString {
  483|      0|    image.url
  484|      0|      .map(\.relativeString)
  ------------------
  | Unexecuted instantiation: $s10MarkdownUI24AttributedStringRendererV11renderImage33_5C179B64D66C9DE76A0B337B842F8079LL_5stateSo012NSAttributedD0C10CommonMark0G0V_AC5StateVtFSS10Foundation3URLVcs7KeyPathCyAPSSGcfu_
  ------------------
  | Unexecuted instantiation: $s10MarkdownUI24AttributedStringRendererV11renderImage33_5C179B64D66C9DE76A0B337B842F8079LL_5stateSo012NSAttributedD0C10CommonMark0G0V_AC5StateVtFSS10Foundation3URLVcs7KeyPathCyAPSSGcfu_SSAPcfu0_
  ------------------
  485|      0|      .flatMap { URL(string: $0, relativeTo: baseURL) }
  486|      0|      .map(\.absoluteURL)
  ------------------
  | Unexecuted instantiation: $s10MarkdownUI24AttributedStringRendererV11renderImage33_5C179B64D66C9DE76A0B337B842F8079LL_5stateSo012NSAttributedD0C10CommonMark0G0V_AC5StateVtF10Foundation3URLVAPcs7KeyPathCyA2PGcfu1_
  ------------------
  | Unexecuted instantiation: $s10MarkdownUI24AttributedStringRendererV11renderImage33_5C179B64D66C9DE76A0B337B842F8079LL_5stateSo012NSAttributedD0C10CommonMark0G0V_AC5StateVtF10Foundation3URLVAPcs7KeyPathCyA2PGcfu1_A2Pcfu2_
  ------------------
  487|      0|      .map {
  488|      0|        NSAttributedString(markdownImageURL: $0)
  489|      0|      } ?? NSAttributedString()
  490|      0|  }
  491|       |
  492|     40|  private func paragraphStyle(state: State) -> NSParagraphStyle {
  493|     40|    let pointSize = state.font.resolve().pointSize
  494|     40|    let result = NSMutableParagraphStyle()
  495|     40|    result.setParagraphStyle(.default)
  496|     40|    result.baseWritingDirection = baseWritingDirection
  497|     40|    result.alignment = alignment
  498|     40|    result.paragraphSpacing = round(pointSize * state.paragraphSpacing)
  499|     40|    result.headIndent = round(pointSize * state.headIndent)
  500|     40|    result.tailIndent = round(pointSize * state.tailIndent)
  501|     60|    result.tabStops = state.tabStops.map {
  502|     60|      NSTextTab(
  503|     60|        textAlignment: $0.alignment,
  504|     60|        location: round(pointSize * $0.location),
  505|     60|        options: $0.options
  506|     60|      )
  507|     60|    }
  508|     40|    return result
  509|     40|  }
  510|       |}
  511|       |
  512|       |extension String {
  513|       |  fileprivate static let lineSeparator = "\u{2028}"
  514|       |  fileprivate static let paragraphSeparator = "\u{2029}"
  515|       |  fileprivate static let nbsp = "\u{00A0}"
  516|       |}
  517|       |
  518|       |extension NSMutableAttributedString {
  519|     38|  fileprivate func append(string: String) {
  520|     38|    self.append(
  521|     38|      .init(
  522|     38|        string: string,
  523|     38|        attributes: self.length > 0
  524|     38|          ? self.attributes(at: self.length - 1, effectiveRange: nil)
  525|     38|          : nil
  526|     38|      )
  527|     38|    )
  528|     38|  }
  529|       |}
  530|       |
  531|       |extension NSAttributedString {
  532|       |  /// Returns the width of the string in `em` units.
  533|      0|  fileprivate func em() -> CGFloat {
  534|      0|    guard let font = attribute(.font, at: 0, effectiveRange: nil) as? PlatformFont
  535|      0|    else {
  536|      0|      fatalError("Font attribute not found!")
  537|      0|    }
  538|      0|    return size().width / font.pointSize
  539|      0|  }
  540|       |}
  541|       |
  542|       |extension NSTextAlignment {
  543|      8|  fileprivate static func trailing(_ writingDirection: NSWritingDirection) -> NSTextAlignment {
  544|      8|    switch writingDirection {
  545|      8|    case .rightToLeft:
  546|      0|      return .left
  547|      8|    default:
  548|      8|      return .right
  549|      8|    }
  550|      8|  }
  551|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/MarkdownUI/Sources/MarkdownUI/Rendering/Document+NSAttributedString.swift:
    1|       |import Combine
    2|       |import CommonMark
    3|       |import SwiftUI
    4|       |
    5|       |extension Document {
    6|       |  func renderAttributedString(
    7|       |    baseURL: URL?,
    8|       |    baseWritingDirection: NSWritingDirection,
    9|       |    alignment: NSTextAlignment,
   10|       |    style: MarkdownStyle
   11|      2|  ) -> NSAttributedString {
   12|      2|    AttributedStringRenderer(
   13|      2|      baseURL: baseURL,
   14|      2|      baseWritingDirection: baseWritingDirection,
   15|      2|      alignment: alignment,
   16|      2|      style: style
   17|      2|    ).renderDocument(self)
   18|      2|  }
   19|       |
   20|       |  func renderAttributedString(
   21|       |    baseURL: URL?,
   22|       |    baseWritingDirection: NSWritingDirection,
   23|       |    alignment: NSTextAlignment,
   24|       |    style: MarkdownStyle,
   25|       |    imageHandlers: [String: MarkdownImageHandler]
   26|      2|  ) -> AnyPublisher<NSAttributedString, Never> {
   27|      2|    Deferred {
   28|      2|      Just(
   29|      2|        self.renderAttributedString(
   30|      2|          baseURL: baseURL,
   31|      2|          baseWritingDirection: baseWritingDirection,
   32|      2|          alignment: alignment,
   33|      2|          style: style
   34|      2|        )
   35|      2|      )
   36|      2|    }
   37|      2|    .flatMap { attributedString -> AnyPublisher<NSAttributedString, Never> in
   38|      2|      guard attributedString.hasMarkdownImages else {
   39|      2|        return Just(attributedString).eraseToAnyPublisher()
   40|      2|      }
   41|      0|      return NSAttributedString.loadingMarkdownImages(
   42|      0|        from: attributedString,
   43|      0|        using: imageHandlers
   44|      0|      )
   45|      0|      .prepend(attributedString)
   46|      0|      .eraseToAnyPublisher()
   47|      2|    }
   48|      2|    .eraseToAnyPublisher()
   49|      2|  }
   50|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/MarkdownUI/Sources/MarkdownUI/Rendering/NSAttributedString+ImageLoading.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |import SwiftUI
    4|       |
    5|       |extension NSAttributedString {
    6|      0|  convenience init(markdownImageURL url: URL) {
    7|      0|    self.init(
    8|      0|      string: String(Unicode.Scalar(NSTextAttachment.character)!),
    9|      0|      attributes: [.markdownImageURL: url]
   10|      0|    )
   11|      0|  }
   12|       |
   13|       |  static func loadingMarkdownImages(
   14|       |    from attributedString: NSAttributedString,
   15|       |    using imageHandlers: [String: MarkdownImageHandler]
   16|      0|  ) -> AnyPublisher<NSAttributedString, Never> {
   17|      0|    let urls = attributedString.markdownImageURLs()
   18|      0|    guard !urls.isEmpty else {
   19|      0|      return Just(attributedString).eraseToAnyPublisher()
   20|      0|    }
   21|      0|
   22|      0|    let imageAttachmentPublishers = urls.compactMap { url -> (URL, MarkdownImageHandler)? in
   23|      0|      guard let scheme = url.scheme, let imageHandler = imageHandlers[scheme] else {
   24|      0|        return nil
   25|      0|      }
   26|      0|      return (url, imageHandler)
   27|      0|    }
   28|      0|    .map { url, imageHandler in
   29|      0|      imageHandler.imageAttachment(url).map { imageAttachment in
   30|      0|        (url, imageAttachment)
   31|      0|      }
   32|      0|    }
   33|      0|
   34|      0|    return Publishers.MergeMany(imageAttachmentPublishers)
   35|      0|      .collect()
   36|      0|      .map { Dictionary($0, uniquingKeysWith: { _, last in last }) }
   37|      0|      .map { attributedString.applyingImageAttachments($0) }
   38|      0|      .eraseToAnyPublisher()
   39|      0|  }
   40|       |
   41|      4|  var hasMarkdownImages: Bool {
   42|      4|    var result = false
   43|      4|    enumerateAttribute(.markdownImageURL, in: NSRange(0..<length)) { value, _, stop in
   44|      4|      result = value is URL
   45|      4|      // Stop as soon as we find one
   46|      4|      stop.pointee = .init(result)
   47|      4|    }
   48|      4|    return result
   49|      4|  }
   50|       |
   51|      0|  private func markdownImageURLs() -> Set<URL> {
   52|      0|    var urls: Set<URL> = []
   53|      0|    enumerateAttribute(.markdownImageURL, in: NSRange(0..<length)) { value, _, _ in
   54|      0|      guard let url = value as? URL else {
   55|      0|        return
   56|      0|      }
   57|      0|      urls.insert(url)
   58|      0|    }
   59|      0|    return urls
   60|      0|  }
   61|       |
   62|       |  private func applyingImageAttachments(
   63|       |    _ imageAttachments: [URL: NSTextAttachment]
   64|      0|  ) -> NSAttributedString {
   65|      0|    let result = NSMutableAttributedString(attributedString: self)
   66|      0|    enumerateAttribute(.markdownImageURL, in: NSRange(0..<length)) { value, range, _ in
   67|      0|      guard let url = value as? URL, let attachment = imageAttachments[url] else {
   68|      0|        return
   69|      0|      }
   70|      0|      result.removeAttribute(.markdownImageURL, range: range)
   71|      0|      result.addAttribute(.attachment, value: attachment, range: range)
   72|      0|    }
   73|      0|    return result
   74|      0|  }
   75|       |}
   76|       |
   77|       |extension NSAttributedString.Key {
   78|       |  static let markdownImageURL = Self(rawValue: "MDUIImageURL")
   79|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/MarkdownUI/Sources/MarkdownUI/Rendering/ResizableImageAttachment.swift:
    1|       |import SwiftUI
    2|       |
    3|       |final class ResizableImageAttachment: NSTextAttachment {
    4|       |  #if os(iOS) || os(tvOS)
    5|       |    typealias NSRect = CGRect
    6|       |  #endif
    7|       |
    8|       |  override func attachmentBounds(
    9|       |    for textContainer: NSTextContainer?,
   10|       |    proposedLineFragment lineFrag: NSRect,
   11|       |    glyphPosition position: CGPoint,
   12|       |    characterIndex charIndex: Int
   13|      0|  ) -> NSRect {
   14|      0|    guard let image = self.image else {
   15|      0|      return super.attachmentBounds(
   16|      0|        for: textContainer,
   17|      0|        proposedLineFragment: lineFrag,
   18|      0|        glyphPosition: position,
   19|      0|        characterIndex: charIndex
   20|      0|      )
   21|      0|    }
   22|      0|
   23|      0|    let aspectRatio = image.size.width / image.size.height
   24|      0|    let width = min(lineFrag.width, image.size.width)
   25|      0|    let height = width / aspectRatio
   26|      0|
   27|      0|    return NSRect(x: 0, y: 0, width: width, height: height)
   28|      0|  }
   29|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/MarkdownUI/Sources/MarkdownUI/Style/Color.swift:
    1|       |import SwiftUI
    2|       |
    3|       |extension MarkdownStyle {
    4|       |  /// A representation of a color that you can use to style a ``Markdown`` view.
    5|       |  ///
    6|       |  /// This type mimics the `SwiftUI.Color` API and provides the `Markdown` view implementation
    7|       |  /// access to the underlying platform color.
    8|       |  public struct Color: Hashable {
    9|       |    var platformColor: PlatformColor?
   10|       |  }
   11|       |}
   12|       |
   13|       |extension MarkdownStyle.Color {
   14|       |  /// A context-dependent red color suitable for use in UI elements.
   15|       |  public static let red = Self(platformColor: .systemRed)
   16|       |
   17|       |  /// A context-dependent orange color suitable for use in UI elements.
   18|       |  public static let orange = Self(platformColor: .systemOrange)
   19|       |
   20|       |  /// A context-dependent yellow color suitable for use in UI elements.
   21|       |  public static let yellow = Self(platformColor: .systemYellow)
   22|       |
   23|       |  /// A context-dependent green color suitable for use in UI elements.
   24|       |  public static let green = Self(platformColor: .systemGreen)
   25|       |
   26|       |  /// A context-dependent teal color suitable for use in UI elements.
   27|       |  public static let teal = Self(platformColor: .systemTeal)
   28|       |
   29|       |  /// A context-dependent blue color suitable for use in UI elements.
   30|       |  public static let blue = Self(platformColor: .systemBlue)
   31|       |
   32|       |  /// A context-dependent indigo color suitable for use in UI elements.
   33|       |  public static let indigo = Self(platformColor: .systemIndigo)
   34|       |
   35|       |  /// A context-dependent purple color suitable for use in UI elements.
   36|       |  public static let purple = Self(platformColor: .systemPurple)
   37|       |
   38|       |  /// A context-dependent pink color suitable for use in UI elements.
   39|       |  public static let pink = Self(platformColor: .systemPink)
   40|       |
   41|       |  /// A white color suitable for use in UI elements.
   42|       |  public static let white = Self(platformColor: .white)
   43|       |
   44|       |  /// A context-dependent gray color suitable for use in UI elements.
   45|       |  public static let gray = Self(platformColor: .systemGray)
   46|       |
   47|       |  /// A black color suitable for use in UI elements.
   48|       |  public static let black = Self(platformColor: .black)
   49|       |
   50|       |  /// A clear color suitable for use in UI elements.
   51|       |  public static let clear = Self(platformColor: .clear)
   52|       |
   53|       |  #if os(macOS)
   54|       |    /// The color to use for primary content.
   55|       |    public static let primary = Self(platformColor: .labelColor)
   56|       |  #elseif os(iOS) || os(tvOS)
   57|       |    /// The color to use for primary content.
   58|       |    public static let primary = Self(platformColor: .label)
   59|       |  #endif
   60|       |
   61|       |  #if os(macOS)
   62|       |    /// The color to use for secondary content.
   63|       |    public static let secondary = Self(platformColor: .secondaryLabelColor)
   64|       |  #elseif os(iOS) || os(tvOS)
   65|       |    /// The color to use for secondary content.
   66|       |    public static let secondary = Self(platformColor: .secondaryLabel)
   67|       |  #endif
   68|       |
   69|       |  #if os(macOS)
   70|       |    /// The color to use for separators between different sections of content.
   71|       |    public static let separator = Self(platformColor: .separatorColor)
   72|       |  #elseif os(iOS) || os(tvOS)
   73|       |    /// The color to use for separators between different sections of content.
   74|       |    public static let separator = Self(platformColor: .separator)
   75|       |  #endif
   76|       |
   77|       |  /// Creates a color from a Core Graphics color.
   78|      0|  public init(cgColor: CGColor) {
   79|      0|    self.init(platformColor: .init(cgColor: cgColor))
   80|      0|  }
   81|       |
   82|       |  /// Creates a constant color from red, green, and blue component values.
   83|      0|  public init(red: CGFloat, green: CGFloat, blue: CGFloat, opacity: CGFloat = 1) {
   84|      0|    self.init(platformColor: .init(red: red, green: green, blue: blue, alpha: opacity))
   85|      0|  }
   86|       |
   87|       |  /// Creates a constant grayscale color.
   88|      0|  public init(white: CGFloat, opacity: CGFloat = 1) {
   89|      0|    self.init(platformColor: .init(white: white, alpha: opacity))
   90|      0|  }
   91|       |
   92|       |  /// Creates a constant color from hue, saturation, and brightness values.
   93|      0|  public init(hue: CGFloat, saturation: CGFloat, brightness: CGFloat, opacity: CGFloat = 1) {
   94|      0|    self.init(
   95|      0|      platformColor: .init(
   96|      0|        hue: hue, saturation: saturation, brightness: brightness, alpha: opacity
   97|      0|      )
   98|      0|    )
   99|      0|  }
  100|       |
  101|       |  /// Creates a color from a color set that you indicate by name.
  102|      0|  public init(_ name: String, bundle: Bundle? = nil) {
  103|      0|    #if os(macOS)
  104|      0|      self.init(platformColor: .init(named: name, bundle: bundle))
  105|      0|    #elseif os(iOS) || os(tvOS)
  106|      0|      self.init(platformColor: .init(named: name, in: bundle, compatibleWith: nil))
  107|      0|    #endif
  108|      0|  }
  109|       |
  110|      0|  public func opacity(_ opacity: CGFloat) -> MarkdownStyle.Color {
  111|      0|    .init(platformColor: self.platformColor?.withAlphaComponent(opacity))
  112|      0|  }
  113|       |}
  114|       |
  115|       |#if os(macOS)
  116|       |  @available(macOS 11.0, *)
  117|       |  @available(iOS, unavailable)
  118|       |  @available(tvOS, unavailable)
  119|       |  extension MarkdownStyle.Color {
  120|       |    /// Creates a color from an AppKit color.
  121|      0|    public init(nsColor: NSColor) {
  122|      0|      self.init(platformColor: nsColor)
  123|      0|    }
  124|       |  }
  125|       |#endif
  126|       |
  127|       |#if os(iOS) || os(tvOS)
  128|       |  @available(macOS, unavailable)
  129|       |  @available(iOS 14.0, *)
  130|       |  @available(tvOS 14.0, *)
  131|       |  extension MarkdownStyle.Color {
  132|       |    /// Creates a color from an UIKit color.
  133|       |    public init(uiColor: UIColor) {
  134|       |      self.init(platformColor: uiColor)
  135|       |    }
  136|       |  }
  137|       |#endif
  138|       |
  139|       |// MARK: - PlatformColor
  140|       |
  141|       |#if os(macOS)
  142|       |  typealias PlatformColor = NSColor
  143|       |#elseif os(iOS) || os(tvOS)
  144|       |  typealias PlatformColor = UIColor
  145|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/MarkdownUI/Sources/MarkdownUI/Style/Font.swift:
    1|       |import SwiftUI
    2|       |
    3|       |extension MarkdownStyle {
    4|       |  /// An environment-dependent font that you can use to style a ``Markdown`` view.
    5|       |  ///
    6|       |  /// This type mimics the `SwiftUI.Font` API and provides the `Markdown` view implementation
    7|       |  /// access to the underlying platform font.
    8|       |  public struct Font: Hashable {
    9|       |    private var provider: AnyHashable
   10|       |
   11|    134|    func resolve() -> PlatformFont {
   12|    134|      guard let fontProvider = self.provider.base as? FontProvider else {
   13|      0|        fatalError("provider should conform to FontProvider")
   14|    134|      }
   15|    134|      #if os(macOS)
   16|    134|        return .init(descriptor: fontProvider.fontDescriptor(), size: 0)
   17|    134|          ?? .preferredFont(forTextStyle: .body)
   18|    134|      #elseif os(iOS) || os(tvOS)
   19|    134|        return .init(descriptor: fontProvider.fontDescriptor(), size: 0)
   20|    134|      #endif
   21|    134|    }
   22|       |  }
   23|       |}
   24|       |
   25|       |extension MarkdownStyle.Font {
   26|       |  /// A font with the large title text style.
   27|       |  public static let largeTitle: MarkdownStyle.Font = .system(.largeTitle)
   28|       |
   29|       |  /// A font with the title text style.
   30|       |  public static let title: MarkdownStyle.Font = .system(.title)
   31|       |
   32|       |  /// Create a font for second level hierarchical headings.
   33|       |  public static let title2: MarkdownStyle.Font = .system(.title2)
   34|       |
   35|       |  /// Create a font for third level hierarchical headings.
   36|       |  public static let title3: MarkdownStyle.Font = .system(.title3)
   37|       |
   38|       |  /// A font with the headline text style.
   39|       |  public static let headline: MarkdownStyle.Font = .system(.headline)
   40|       |
   41|       |  /// A font with the subheadline text style.
   42|       |  public static let subheadline: MarkdownStyle.Font = .system(.subheadline)
   43|       |
   44|       |  /// A font with the body text style.
   45|       |  public static let body: MarkdownStyle.Font = .system(.body)
   46|       |
   47|       |  /// A font with the callout text style.
   48|       |  public static let callout: MarkdownStyle.Font = .system(.callout)
   49|       |
   50|       |  /// A font with the footnote text style.
   51|       |  public static let footnote: MarkdownStyle.Font = .system(.footnote)
   52|       |
   53|       |  /// A font with the caption text style.
   54|       |  public static let caption: MarkdownStyle.Font = .system(.caption)
   55|       |
   56|       |  /// A font with the alternate caption text style.
   57|       |  public static let caption2: MarkdownStyle.Font = .system(.caption2)
   58|       |
   59|       |  /// Specifies a system font to use, along with the style, weight, and any design parameters you want applied to the text.
   60|       |  public static func system(
   61|       |    size: CGFloat,
   62|       |    weight: SwiftUI.Font.Weight = .regular,
   63|       |    design: SwiftUI.Font.Design = .default
   64|      0|  ) -> MarkdownStyle.Font {
   65|      0|    .init(
   66|      0|      provider: SystemFontProvider(
   67|      0|        size: size,
   68|      0|        weight: weight,
   69|      0|        design: design
   70|      0|      )
   71|      0|    )
   72|      0|  }
   73|       |
   74|       |  /// Gets a system font with the given style and design.
   75|       |  public static func system(
   76|       |    _ style: SwiftUI.Font.TextStyle,
   77|       |    design: SwiftUI.Font.Design = .default
   78|      4|  ) -> MarkdownStyle.Font {
   79|      4|    .init(
   80|      4|      provider: TextStyleFontProvider(
   81|      4|        style: style,
   82|      4|        design: design
   83|      4|      )
   84|      4|    )
   85|      4|  }
   86|       |
   87|       |  /// Create a custom font with the given `name` and `size` that scales with
   88|       |  /// the body text style.
   89|      0|  public static func custom(_ name: String, size: CGFloat) -> MarkdownStyle.Font {
   90|      0|    .init(
   91|      0|      provider: CustomFontProvider(
   92|      0|        name: name,
   93|      0|        size: size,
   94|      0|        textStyle: .body
   95|      0|      )
   96|      0|    )
   97|      0|  }
   98|       |
   99|       |  /// Adds bold styling to the font.
  100|      8|  public func bold() -> MarkdownStyle.Font {
  101|      8|    .init(
  102|      8|      provider: FontModifierProvider(
  103|      8|        base: provider,
  104|      8|        modifier: BoldFontModifier()
  105|      8|      )
  106|      8|    )
  107|      8|  }
  108|       |
  109|       |  /// Adds italics to the font.
  110|      0|  public func italic() -> MarkdownStyle.Font {
  111|      0|    .init(
  112|      0|      provider: FontModifierProvider(
  113|      0|        base: provider,
  114|      0|        modifier: ItalicFontModifier()
  115|      0|      )
  116|      0|    )
  117|      0|  }
  118|       |
  119|       |  /// Adjusts the font to use monospace digits.
  120|      0|  public func monospacedDigit() -> MarkdownStyle.Font {
  121|      0|    .init(
  122|      0|      provider: FontModifierProvider(
  123|      0|        base: provider,
  124|      0|        modifier: MonospacedDigitFontModifier()
  125|      0|      )
  126|      0|    )
  127|      0|  }
  128|       |
  129|       |  /// Switches the font to a monospaced version of the same family as the base
  130|       |  /// font or a default monospaced font if no suitable font face in the same family is found.
  131|      0|  public func monospaced() -> MarkdownStyle.Font {
  132|      0|    .init(
  133|      0|      provider: FontModifierProvider(
  134|      0|        base: provider,
  135|      0|        modifier: MonospacedFontModifier()
  136|      0|      )
  137|      0|    )
  138|      0|  }
  139|       |
  140|      8|  public func scale(_ scale: CGFloat) -> MarkdownStyle.Font {
  141|      8|    .init(
  142|      8|      provider: FontModifierProvider(
  143|      8|        base: provider,
  144|      8|        modifier: ScaleFontModifier(scale: scale)
  145|      8|      )
  146|      8|    )
  147|      8|  }
  148|       |}
  149|       |
  150|       |// MARK: - FontProvider
  151|       |
  152|       |private protocol FontProvider {
  153|       |  func fontDescriptor() -> PlatformFontDescriptor
  154|       |}
  155|       |
  156|       |private struct TextStyleFontProvider: Hashable, FontProvider {
  157|       |  var style: SwiftUI.Font.TextStyle
  158|       |  var design: SwiftUI.Font.Design
  159|       |
  160|    134|  func fontDescriptor() -> PlatformFontDescriptor {
  161|    134|    #if os(macOS)
  162|    134|      let fontDescriptor = PlatformFontDescriptor.preferredFontDescriptor(
  163|    134|        forTextStyle: .init(style)
  164|    134|      )
  165|    134|    #elseif os(iOS) || os(tvOS)
  166|    134|      let fontDescriptor = PlatformFontDescriptor.preferredFontDescriptor(
  167|    134|        withTextStyle: .init(style)
  168|    134|      )
  169|    134|    #endif
  170|    134|
  171|    134|    return fontDescriptor.withDesign(.init(design)) ?? fontDescriptor
  172|    134|  }
  173|       |}
  174|       |
  175|       |private struct SystemFontProvider: Hashable, FontProvider {
  176|       |  var size: CGFloat
  177|       |  var weight: SwiftUI.Font.Weight
  178|       |  var design: SwiftUI.Font.Design
  179|       |
  180|      0|  func fontDescriptor() -> PlatformFontDescriptor {
  181|      0|    let fontDescriptor = PlatformFont.systemFont(ofSize: size, weight: .init(weight))
  182|      0|      .fontDescriptor
  183|      0|    return fontDescriptor.withDesign(.init(design)) ?? fontDescriptor
  184|      0|  }
  185|       |}
  186|       |
  187|       |private struct CustomFontProvider: Hashable, FontProvider {
  188|       |  var name: String
  189|       |  var size: CGFloat
  190|       |  var textStyle: SwiftUI.Font.TextStyle?
  191|       |
  192|      0|  func fontDescriptor() -> PlatformFontDescriptor {
  193|      0|    var size = self.size
  194|      0|
  195|      0|    #if os(iOS) || os(tvOS)
  196|      0|      if let textStyle = self.textStyle {
  197|      0|        size = UIFontMetrics(forTextStyle: .init(textStyle)).scaledValue(for: size)
  198|      0|      }
  199|      0|    #endif
  200|      0|
  201|      0|    return .init(
  202|      0|      fontAttributes: [
  203|      0|        .family: name,
  204|      0|        .size: size,
  205|      0|      ]
  206|      0|    )
  207|      0|  }
  208|       |}
  209|       |
  210|       |private struct FontModifierProvider<M>: Hashable, FontProvider where M: Hashable, M: FontModifier {
  211|       |  var base: AnyHashable
  212|       |  var modifier: M
  213|       |
  214|     16|  func fontDescriptor() -> PlatformFontDescriptor {
  215|     16|    guard let fontProvider = self.base.base as? FontProvider else {
  216|      0|      fatalError("base should conform to FontProvider")
  217|     16|    }
  218|     16|    var fontDescriptor = fontProvider.fontDescriptor()
  219|     16|    modifier.modify(&fontDescriptor)
  220|     16|    return fontDescriptor
  221|     16|  }
  222|       |}
  223|       |
  224|       |// MARK: - FontModifier
  225|       |
  226|       |private protocol FontModifier {
  227|       |  func modify(_ fontDescriptor: inout PlatformFontDescriptor)
  228|       |}
  229|       |
  230|       |private struct BoldFontModifier: Hashable, FontModifier {
  231|      8|  func modify(_ fontDescriptor: inout PlatformFontDescriptor) {
  232|      8|    #if os(macOS)
  233|      8|      fontDescriptor = fontDescriptor.withSymbolicTraits(
  234|      8|        fontDescriptor.symbolicTraits.union(.bold)
  235|      8|      )
  236|      8|    #elseif os(iOS) || os(tvOS)
  237|      8|      fontDescriptor =
  238|      8|        fontDescriptor.withSymbolicTraits(
  239|      8|          fontDescriptor.symbolicTraits.union(.traitBold)
  240|      8|        ) ?? fontDescriptor
  241|      8|    #endif
  242|      8|  }
  243|       |}
  244|       |
  245|       |private struct ItalicFontModifier: Hashable, FontModifier {
  246|      0|  func modify(_ fontDescriptor: inout PlatformFontDescriptor) {
  247|      0|    #if os(macOS)
  248|      0|      fontDescriptor = fontDescriptor.withSymbolicTraits(
  249|      0|        fontDescriptor.symbolicTraits.union(.italic)
  250|      0|      )
  251|      0|    #elseif os(iOS) || os(tvOS)
  252|      0|      fontDescriptor =
  253|      0|        fontDescriptor.withSymbolicTraits(
  254|      0|          fontDescriptor.symbolicTraits.union(.traitItalic)
  255|      0|        ) ?? fontDescriptor
  256|      0|    #endif
  257|      0|  }
  258|       |}
  259|       |
  260|       |private struct MonospacedDigitFontModifier: Hashable, FontModifier {
  261|      0|  func modify(_ fontDescriptor: inout PlatformFontDescriptor) {
  262|      0|    #if os(macOS)
  263|      0|      fontDescriptor = fontDescriptor.addingAttributes(
  264|      0|        [
  265|      0|          .featureSettings: [
  266|      0|            [
  267|      0|              PlatformFontDescriptor.FeatureKey.typeIdentifier: kNumberSpacingType,
  268|      0|              PlatformFontDescriptor.FeatureKey.selectorIdentifier:
  269|      0|                kMonospacedNumbersSelector,
  270|      0|            ]
  271|      0|          ]
  272|      0|        ]
  273|      0|      )
  274|      0|    #elseif os(iOS) || os(tvOS)
  275|      0|      fontDescriptor = fontDescriptor.addingAttributes(
  276|      0|        [
  277|      0|          .featureSettings: [
  278|      0|            [
  279|      0|              PlatformFontDescriptor.FeatureKey.featureIdentifier: kNumberSpacingType,
  280|      0|              PlatformFontDescriptor.FeatureKey.typeIdentifier: kMonospacedNumbersSelector,
  281|      0|            ]
  282|      0|          ]
  283|      0|        ]
  284|      0|      )
  285|      0|    #endif
  286|      0|  }
  287|       |}
  288|       |
  289|       |private struct MonospacedFontModifier: Hashable, FontModifier {
  290|      0|  func modify(_ fontDescriptor: inout PlatformFontDescriptor) {
  291|      0|    let newFontDescriptor =
  292|      0|      fontDescriptor.withDesign(.monospaced)
  293|      0|      ?? PlatformFont.monospacedSystemFont(
  294|      0|        ofSize: fontDescriptor.pointSize,
  295|      0|        weight: .regular
  296|      0|      ).fontDescriptor.withSymbolicTraits(fontDescriptor.symbolicTraits)
  297|      0|
  298|      0|    #if os(macOS)
  299|      0|      fontDescriptor = newFontDescriptor
  300|      0|    #elseif os(iOS) || os(tvOS)
  301|      0|      fontDescriptor = newFontDescriptor ?? fontDescriptor
  302|      0|    #endif
  303|      0|  }
  304|       |}
  305|       |
  306|       |private struct ScaleFontModifier: Hashable, FontModifier {
  307|       |  var scale: CGFloat
  308|       |
  309|      8|  func modify(_ fontDescriptor: inout PlatformFontDescriptor) {
  310|      8|    fontDescriptor = fontDescriptor.withSize(round(fontDescriptor.pointSize * scale))
  311|      8|  }
  312|       |}
  313|       |
  314|       |// MARK: - PlatformFont
  315|       |
  316|       |#if os(macOS)
  317|       |  typealias PlatformFont = NSFont
  318|       |  private typealias PlatformFontDescriptor = NSFontDescriptor
  319|       |#elseif os(iOS) || os(tvOS)
  320|       |  typealias PlatformFont = UIFont
  321|       |  private typealias PlatformFontDescriptor = UIFontDescriptor
  322|       |#endif
  323|       |
  324|       |extension PlatformFont.Weight {
  325|      0|  fileprivate init(_ weight: SwiftUI.Font.Weight) {
  326|      0|    switch weight {
  327|      0|    case .ultraLight:
  328|      0|      self = .ultraLight
  329|      0|    case .thin:
  330|      0|      self = .thin
  331|      0|    case .light:
  332|      0|      self = .light
  333|      0|    case .regular:
  334|      0|      self = .regular
  335|      0|    case .medium:
  336|      0|      self = .medium
  337|      0|    case .semibold:
  338|      0|      self = .semibold
  339|      0|    case .bold:
  340|      0|      self = .bold
  341|      0|    case .heavy:
  342|      0|      self = .heavy
  343|      0|    case .black:
  344|      0|      self = .black
  345|      0|    default:
  346|      0|      self = .regular
  347|      0|    }
  348|      0|  }
  349|       |}
  350|       |
  351|       |extension PlatformFont.TextStyle {
  352|    134|  fileprivate init(_ textStyle: SwiftUI.Font.TextStyle) {
  353|    134|    switch textStyle {
  354|    134|    case .largeTitle:
  355|      0|      #if os(tvOS)
  356|      0|        self = .title1
  357|      0|      #else
  358|      0|        self = .largeTitle
  359|      0|      #endif
  360|    134|    case .title:
  361|      0|      self = .title1
  362|    134|    case .title2:
  363|      0|      self = .title2
  364|    134|    case .title3:
  365|    134|      self = .title3
  366|    134|    case .headline:
  367|      0|      self = .headline
  368|    134|    case .subheadline:
  369|      0|      self = .subheadline
  370|    134|    case .body:
  371|      0|      self = .body
  372|    134|    case .callout:
  373|      0|      self = .callout
  374|    134|    case .footnote:
  375|      0|      self = .footnote
  376|    134|    case .caption:
  377|      0|      self = .caption1
  378|    134|    case .caption2:
  379|      0|      self = .caption2
  380|    134|    @unknown default:
  381|      0|      self = .body
  382|    134|    }
  383|    134|  }
  384|       |}
  385|       |
  386|       |extension PlatformFontDescriptor.SystemDesign {
  387|    134|  fileprivate init(_ design: SwiftUI.Font.Design) {
  388|    134|    switch design {
  389|    134|    case .`default`:
  390|    134|      self = .`default`
  391|    134|    case .serif:
  392|      0|      self = .serif
  393|    134|    case .rounded:
  394|      0|      self = .rounded
  395|    134|    case .monospaced:
  396|      0|      self = .monospaced
  397|    134|    @unknown default:
  398|      0|      self = .`default`
  399|    134|    }
  400|    134|  }
  401|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/MarkdownUI/Sources/MarkdownUI/Style/HeadingScales.swift:
    1|       |import SwiftUI
    2|       |
    3|       |extension MarkdownStyle {
    4|       |  /// The scale that the ``Markdown`` view applies to each heading level.
    5|       |  ///
    6|       |  /// You use a `HeadingScales` instance to configure the heading sizes in
    7|       |  /// a `Markdown` view. When the `Markdown` view encounters a heading,
    8|       |  /// it computes the font size by multiplying the base font size by the scale
    9|       |  /// specified for that heading level.
   10|       |  public struct HeadingScales: Hashable {
   11|       |    private var values: [CGFloat]
   12|       |
   13|       |    /// Creates a `HeadingScales` instance with the provided scales for each
   14|       |    /// heading level.
   15|       |    public init(
   16|       |      h1: CGFloat,
   17|       |      h2: CGFloat,
   18|       |      h3: CGFloat,
   19|       |      h4: CGFloat,
   20|       |      h5: CGFloat,
   21|       |      h6: CGFloat
   22|      2|    ) {
   23|      2|      self.values = [h1, h2, h3, h4, h5, h6]
   24|      2|    }
   25|       |
   26|      8|    public subscript(index: Int) -> CGFloat {
   27|      8|      values[index]
   28|      8|    }
   29|       |
   30|       |    /// The default heading scales.
   31|       |    public static let `default` = Self(h1: 2, h2: 1.5, h3: 1.17, h4: 1, h5: 0.83, h6: 0.67)
   32|       |  }
   33|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/MarkdownUI/Sources/MarkdownUI/Style/MarkdownStyle.swift:
    1|       |import SwiftUI
    2|       |
    3|       |/// Describes the appearance of a ``Markdown`` view.
    4|       |public struct MarkdownStyle: Hashable {
    5|       |  /// The base font for the text.
    6|       |  public var font: MarkdownStyle.Font
    7|       |
    8|       |  /// The text color.
    9|       |  public var foregroundColor: MarkdownStyle.Color
   10|       |
   11|       |  /// The measurements of the Markdown elements.
   12|       |  public var measurements: Measurements
   13|       |
   14|       |  /// Creates a Markdown style with the provided font, foreground color, and measurements.
   15|       |  /// - Parameters:
   16|       |  ///   - font: The base font for the Markdown text.
   17|       |  ///   - foregroundColor: The text color.
   18|       |  ///   - measurements: The measurements of the Markdown elements.
   19|       |  public init(
   20|       |    font: MarkdownStyle.Font = .body,
   21|       |    foregroundColor: MarkdownStyle.Color = .primary,
   22|       |    measurements: MarkdownStyle.Measurements = .init()
   23|      4|  ) {
   24|      4|    self.font = font
   25|      4|    self.foregroundColor = foregroundColor
   26|      4|    self.measurements = measurements
   27|      4|  }
   28|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/MarkdownUI/Sources/MarkdownUI/Style/Measurements.swift:
    1|       |import SwiftUI
    2|       |
    3|       |extension MarkdownStyle {
    4|       |  /// The measurements that the ``Markdown`` view applies to each of its elements.
    5|       |  public struct Measurements: Hashable {
    6|       |    /// The scale that the `Markdown` view applies to a code block or inline.
    7|       |    ///
    8|       |    /// The `Markdown` view computes the font size in a code block or inline
    9|       |    /// by multiplying the current font size by this value.
   10|       |    public var codeFontScale: CGFloat
   11|       |
   12|       |    /// The head indentation size, relative to the base font size.
   13|       |    public var headIndentStep: CGFloat
   14|       |
   15|       |    /// The tail indentation size, relative to the base font size.
   16|       |    public var tailIndentStep: CGFloat
   17|       |
   18|       |    /// The distance between the bottom of a paragraph and the top of the next, relative to the base font size.
   19|       |    public var paragraphSpacing: CGFloat
   20|       |
   21|       |    /// The distance between a list marker and a list item, relative to the base font size.
   22|       |    public var listMarkerSpacing: CGFloat
   23|       |
   24|       |    /// The scale that the `Markdown` view applies to each heading level.
   25|       |    public var headingScales: HeadingScales
   26|       |
   27|       |    /// The distance between the bottom of a heading and the top of the next block, relative to the base font size.
   28|       |    public var headingSpacing: CGFloat
   29|       |
   30|       |    /// Creates a `Measurements` instance.
   31|       |    /// - Parameters:
   32|       |    ///   - codeFontScale: The scale that the `Markdown` view applies to a code block or inline. The default is `0.94`.
   33|       |    ///   - headIndentStep: The head indentation size, relative to the base font size. The default is `1.97`.
   34|       |    ///   - tailIndentStep: The tail indentation size, relative to the base font size. The default is `-1`.
   35|       |    ///   - paragraphSpacing: The distance between the bottom of a paragraph and the top of the next,
   36|       |    ///                       relative to the base font size. The default is `1`.
   37|       |    ///   - listMarkerSpacing: The distance between a list marker and a list item, relative to the base font size.
   38|       |    ///                        The default is `0.47`.
   39|       |    ///   - headingScales: The scale that the `Markdown` view applies to each heading level.
   40|       |    ///   - headingSpacing: The distance between the bottom of a heading and the top of the next block,
   41|       |    ///                     relative to the base font size. The default is `0.67`.
   42|       |    public init(
   43|       |      codeFontScale: CGFloat = 0.94,
   44|       |      headIndentStep: CGFloat = 1.97,
   45|       |      tailIndentStep: CGFloat = -1,
   46|       |      paragraphSpacing: CGFloat = 1,
   47|       |      listMarkerSpacing: CGFloat = 0.47,
   48|       |      headingScales: HeadingScales = .default,
   49|       |      headingSpacing: CGFloat = 0.67
   50|      4|    ) {
   51|      4|      self.codeFontScale = codeFontScale
   52|      4|      self.headIndentStep = headIndentStep
   53|      4|      self.tailIndentStep = tailIndentStep
   54|      4|      self.paragraphSpacing = paragraphSpacing
   55|      4|      self.listMarkerSpacing = listMarkerSpacing
   56|      4|      self.headingScales = headingScales
   57|      4|      self.headingSpacing = headingSpacing
   58|      4|    }
   59|       |  }
   60|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/NetworkImage/Sources/NetworkImage/Core/ImageDecoding.swift:
    1|       |#if os(iOS) || os(tvOS) || os(watchOS)
    2|       |  import UIKit
    3|       |
    4|       |  public typealias PlatformImage = UIImage
    5|       |
    6|       |  func decodeImage(from data: Data, scale: CGFloat) throws -> UIImage {
    7|       |    guard let image = UIImage(data: data, scale: scale) else {
    8|       |      throw NetworkImageError.invalidData(data)
    9|       |    }
   10|       |
   11|       |    // Inflates the underlying compressed image data to be backed by an uncompressed bitmap representation.
   12|       |    _ = image.cgImage?.dataProvider?.data
   13|       |
   14|       |    return image
   15|       |  }
   16|       |
   17|       |#elseif os(macOS)
   18|       |  import Cocoa
   19|       |
   20|       |  public typealias PlatformImage = NSImage
   21|       |
   22|      0|  func decodeImage(from data: Data, scale _: CGFloat) throws -> NSImage {
   23|      0|    guard let bitmapImageRep = NSBitmapImageRep(data: data) else {
   24|      0|      throw NetworkImageError.invalidData(data)
   25|      0|    }
   26|      0|
   27|      0|    let image = NSImage(
   28|      0|      size: NSSize(
   29|      0|        width: bitmapImageRep.pixelsWide,
   30|      0|        height: bitmapImageRep.pixelsHigh
   31|      0|      )
   32|      0|    )
   33|      0|    image.addRepresentation(bitmapImageRep)
   34|      0|
   35|      0|    return image
   36|      0|  }
   37|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/NetworkImage/Sources/NetworkImage/Core/NetworkImageCache.swift:
    1|       |import CoreGraphics
    2|       |import Foundation
    3|       |
    4|       |/// Temporarily store images, keyed by their URL.
    5|       |public struct NetworkImageCache {
    6|       |  private let _image: (URL, CGFloat) -> PlatformImage?
    7|       |  private let _setImage: (PlatformImage, URL, CGFloat) -> Void
    8|       |
    9|      0|  public init() {
   10|      0|    class Key: NSObject {
   11|      0|      let url: URL
   12|      0|      let scale: CGFloat
   13|      0|
   14|      0|      init(_ url: URL, _ scale: CGFloat) {
   15|      0|        self.url = url
   16|      0|        self.scale = scale
   17|      0|      }
   18|      0|
   19|      0|      override func isEqual(_ object: Any?) -> Bool {
   20|      0|        guard let other = object as? Key else { return false }
   21|      0|        return url == other.url && scale == other.scale
   22|      0|      }
   23|      0|
   24|      0|      override var hash: Int {
   25|      0|        return url.hashValue ^ scale.hashValue
   26|      0|      }
   27|      0|    }
   28|      0|
   29|      0|    let nsCache = NSCache<Key, PlatformImage>()
   30|      0|
   31|      0|    self.init(
   32|      0|      image: { url, scale in
   33|      0|        nsCache.object(forKey: Key(url, scale))
   34|      0|      },
   35|      0|      setImage: { image, url, scale in
   36|      0|        nsCache.setObject(image, forKey: Key(url, scale))
   37|      0|      }
   38|      0|    )
   39|      0|  }
   40|       |
   41|       |  init(
   42|       |    image: @escaping (URL, CGFloat) -> PlatformImage?,
   43|       |    setImage: @escaping (PlatformImage, URL, CGFloat) -> Void
   44|      0|  ) {
   45|      0|    _image = image
   46|      0|    _setImage = setImage
   47|      0|  }
   48|       |
   49|       |  /// Returns the image associated with a given URL.
   50|      0|  public func image(for url: URL, scale: CGFloat = 1) -> PlatformImage? {
   51|      0|    _image(url, scale)
   52|      0|  }
   53|       |
   54|       |  /// Stores the image in the cache, associated with the specified URL.
   55|      0|  public func setImage(_ image: PlatformImage, for url: URL, scale: CGFloat = 1) {
   56|      0|    _setImage(image, url, scale)
   57|      0|  }
   58|       |}
   59|       |
   60|       |#if DEBUG
   61|       |  extension NetworkImageCache {
   62|      0|    public static var noop: Self {
   63|      0|      Self(image: { _, _ in nil }, setImage: { _, _, _ in })
   64|      0|    }
   65|       |  }
   66|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/NetworkImage/Sources/NetworkImage/Core/NetworkImageLoader.swift:
    1|       |import Combine
    2|       |import CoreGraphics
    3|       |import Foundation
    4|       |
    5|       |/// Loads and caches images.
    6|       |public struct NetworkImageLoader {
    7|       |  private let _image: (URL, CGFloat) -> AnyPublisher<PlatformImage, Error>
    8|       |  private let _cachedImage: (URL, CGFloat) -> PlatformImage?
    9|       |
   10|       |  /// Creates an image loader.
   11|       |  /// - Parameters:
   12|       |  ///   - urlSession: The `URLSession` that will load the images.
   13|       |  ///   - imageCache: An immediate cache to store the images in memory.
   14|      0|  public init(urlSession: URLSession, imageCache: NetworkImageCache) {
   15|      0|    self.init(
   16|      0|      data: { url in
   17|      0|        urlSession.dataTaskPublisher(for: url).eraseToAnyPublisher()
   18|      0|      },
   19|      0|      imageCache: imageCache
   20|      0|    )
   21|      0|  }
   22|       |
   23|       |  init(
   24|       |    data: @escaping (URL) -> AnyPublisher<(data: Data, response: URLResponse), URLError>,
   25|       |    imageCache: NetworkImageCache
   26|      0|  ) {
   27|      0|    self.init(
   28|      0|      image: { url, scale in
   29|      0|        if let image = imageCache.image(for: url, scale: scale) {
   30|      0|          return Just(image)
   31|      0|            .setFailureType(to: Error.self)
   32|      0|            .eraseToAnyPublisher()
   33|      0|        } else {
   34|      0|          return data(url)
   35|      0|            .tryMap { data, response in
   36|      0|              if let httpResponse = response as? HTTPURLResponse {
   37|      0|                guard 200..<300 ~= httpResponse.statusCode else {
   38|      0|                  throw NetworkImageError.badStatus(httpResponse.statusCode)
   39|      0|                }
   40|      0|              }
   41|      0|
   42|      0|              return try decodeImage(from: data, scale: scale)
   43|      0|            }
   44|      0|            .handleEvents(receiveOutput: { image in
   45|      0|              imageCache.setImage(image, for: url, scale: scale)
   46|      0|            })
   47|      0|            .eraseToAnyPublisher()
   48|      0|        }
   49|      0|      },
   50|      0|      cachedImage: { url, scale in
   51|      0|        imageCache.image(for: url, scale: scale)
   52|      0|      }
   53|      0|    )
   54|      0|  }
   55|       |
   56|       |  init(
   57|       |    image: @escaping (URL, CGFloat) -> AnyPublisher<PlatformImage, Error>,
   58|       |    cachedImage: @escaping (URL, CGFloat) -> PlatformImage?
   59|      0|  ) {
   60|      0|    _image = image
   61|      0|    _cachedImage = cachedImage
   62|      0|  }
   63|       |
   64|       |  /// Returns a publisher that loads an image for a given URL.
   65|      0|  public func image(for url: URL, scale: CGFloat = 1) -> AnyPublisher<PlatformImage, Error> {
   66|      0|    _image(url, scale)
   67|      0|  }
   68|       |
   69|       |  /// Returns the cached image for a given URL if there is any.
   70|      0|  public func cachedImage(for url: URL, scale: CGFloat = 1) -> PlatformImage? {
   71|      0|    _cachedImage(url, scale)
   72|      0|  }
   73|       |}
   74|       |
   75|       |extension NetworkImageLoader {
   76|       |  /// The shared singleton image loader.
   77|       |  ///
   78|       |  /// The shared image loader uses the shared `URLCache` and provides
   79|       |  /// reasonable defaults for disk and memory caches.
   80|       |  public static let shared = Self(urlSession: .imageLoading, imageCache: NetworkImageCache())
   81|       |}
   82|       |
   83|       |#if DEBUG
   84|       |  import XCTestDynamicOverlay
   85|       |
   86|       |  extension NetworkImageLoader {
   87|       |    public static func mock<P>(
   88|       |      url matchingURL: URL,
   89|       |      scale matchingScale: CGFloat = 1,
   90|       |      withResponse response: P
   91|      0|    ) -> Self where P: Publisher, P.Output == PlatformImage, P.Failure == Error {
   92|      0|      Self { url, scale in
   93|      0|        if url != matchingURL, scale != matchingScale {
   94|      0|          XCTFail("\(Self.self).image received an unexpected URL: \(url) or scale: \(scale)")
   95|      0|        }
   96|      0|
   97|      0|        return response.eraseToAnyPublisher()
   98|      0|      } cachedImage: { _, _ in
   99|      0|        nil
  100|      0|      }
  101|      0|    }
  102|       |
  103|       |    public static func mock<P>(
  104|       |      response: P
  105|      0|    ) -> Self where P: Publisher, P.Output == PlatformImage, P.Failure == Error {
  106|      0|      Self { _, _ in
  107|      0|        response.eraseToAnyPublisher()
  108|      0|      } cachedImage: { _, _ in
  109|      0|        nil
  110|      0|      }
  111|      0|    }
  112|       |
  113|      0|    public static var failing: Self {
  114|      0|      Self { _, _ in
  115|      0|        XCTFail("\(Self.self).image is unimplemented")
  116|      0|        return Empty()
  117|      0|          .setFailureType(to: Error.self)
  118|      0|          .eraseToAnyPublisher()
  119|      0|      } cachedImage: { _, _ in
  120|      0|        nil
  121|      0|      }
  122|      0|    }
  123|       |  }
  124|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/NetworkImage/Sources/NetworkImage/Core/URLSession+NetworkImage.swift:
    1|       |import Foundation
    2|       |
    3|       |extension URLSession {
    4|       |  private enum Constants {
    5|       |    static let memoryCapacity = 10 * 1024 * 1024
    6|       |    static let diskCapacity = 100 * 1024 * 1024
    7|       |    static let timeoutInterval: TimeInterval = 15
    8|       |  }
    9|       |
   10|       |  /// Returns a `URLSession` optimized for image downloading.
   11|      0|  public static var imageLoading: URLSession {
   12|      0|    let configuration = URLSessionConfiguration.default
   13|      0|    configuration.requestCachePolicy = .returnCacheDataElseLoad
   14|      0|    configuration.urlCache = URLCache(
   15|      0|      memoryCapacity: Constants.memoryCapacity,
   16|      0|      diskCapacity: Constants.diskCapacity
   17|      0|    )
   18|      0|    configuration.timeoutIntervalForRequest = Constants.timeoutInterval
   19|      0|    configuration.httpAdditionalHeaders = ["Accept": "image/*"]
   20|      0|
   21|      0|    return URLSession(configuration: configuration)
   22|      0|  }
   23|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/NetworkImage/Sources/NetworkImage/Internal/Deprecated.swift:
    1|       |import SwiftUI
    2|       |
    3|       |// NB: Deprecated in 4.0.0
    4|       |
    5|       |extension NetworkImage {
    6|       |  @available(*, deprecated, message: "Use one of the other available NetworkImage initializers.")
    7|       |  public init<P, F>(
    8|       |    url: URL?,
    9|       |    @ViewBuilder placeholder: @escaping () -> P,
   10|       |    @ViewBuilder fallback: @escaping () -> F
   11|      0|  ) where Content == _ConditionalContent<_ConditionalContent<P, Image>, F>, P: View, F: View {
   12|      0|    self.init(url: url, content: { $0.resizable() }, placeholder: placeholder, fallback: fallback)
   13|      0|  }
   14|       |
   15|       |  @available(*, deprecated, message: "Use one of the other available NetworkImage initializers.")
   16|       |  public init(
   17|       |    url: URL?, placeholderImage name: String
   18|      0|  ) where Content == _ConditionalContent<Image, Image> {
   19|      0|    self.init(url: url, content: { $0.resizable() }, placeholder: { Image(name) })
   20|      0|  }
   21|       |
   22|       |  @available(*, deprecated, message: "Use one of the other available NetworkImage initializers.")
   23|       |  @available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
   24|       |  public init(
   25|       |    url: URL?, placeholderSystemImage name: String
   26|      0|  ) where Content == _ConditionalContent<Image, Image> {
   27|      0|    self.init(url: url, content: { $0.resizable() }, placeholder: { Image(systemName: name) })
   28|      0|  }
   29|       |
   30|       |  @available(*, deprecated, message: "Use one of the other available NetworkImage initializers.")
   31|       |  public init<F>(
   32|       |    url: URL?, @ViewBuilder fallback: @escaping () -> F
   33|      0|  ) where Content == _ConditionalContent<_ConditionalContent<EmptyView, Image>, F>, F: View {
   34|      0|    self.init(
   35|      0|      url: url,
   36|      0|      content: { $0.resizable() },
   37|      0|      placeholder: { EmptyView() },
   38|      0|      fallback: fallback
   39|      0|    )
   40|      0|  }
   41|       |
   42|       |  @available(*, deprecated, message: "Use one of the other available NetworkImage initializers.")
   43|       |  public init(
   44|       |    url: URL?, fallbackImage name: String
   45|      0|  ) where Content == _ConditionalContent<_ConditionalContent<EmptyView, Image>, Image> {
   46|      0|    self.init(
   47|      0|      url: url,
   48|      0|      content: { $0.resizable() },
   49|      0|      placeholder: { EmptyView() },
   50|      0|      fallback: { Image(name) }
   51|      0|    )
   52|      0|  }
   53|       |
   54|       |  @available(*, deprecated, message: "Use one of the other available NetworkImage initializers.")
   55|       |  @available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
   56|       |  public init(
   57|       |    url: URL?, fallbackSystemImage name: String
   58|      0|  ) where Content == _ConditionalContent<_ConditionalContent<EmptyView, Image>, Image> {
   59|      0|    self.init(
   60|      0|      url: url,
   61|      0|      content: { $0.resizable() },
   62|      0|      placeholder: { EmptyView() },
   63|      0|      fallback: { Image(systemName: name) }
   64|      0|    )
   65|      0|  }
   66|       |}
   67|       |
   68|       |@available(*, deprecated, renamed: "PlatformImage")
   69|       |public typealias OSImage = PlatformImage

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/NetworkImage/Sources/NetworkImage/Internal/Unavailable.swift:
    1|       |import CombineSchedulers
    2|       |import SwiftUI
    3|       |
    4|       |// NB: Unavailable in 4.0.0
    5|       |
    6|       |@available(
    7|       |  *,
    8|       |  unavailable,
    9|       |  message: "You can style a NetworkImage by providing a content closure in one of the initializers."
   10|       |)
   11|       |public protocol NetworkImageStyle {
   12|       |  associatedtype Body: View
   13|       |  func makeBody(configuration: Self.Configuration) -> Body
   14|       |  typealias Configuration = NetworkImageStyleConfiguration
   15|       |}
   16|       |
   17|       |@available(
   18|       |  *,
   19|       |  unavailable,
   20|       |  message: "You can style a NetworkImage by providing a content closure in one of the initializers."
   21|       |)
   22|       |public struct NetworkImageStyleConfiguration {
   23|       |  public var image: Image
   24|       |  public var size: CGSize
   25|       |}
   26|       |
   27|       |@available(
   28|       |  *,
   29|       |  unavailable,
   30|       |  message: "You can style a NetworkImage by providing a content closure in one of the initializers."
   31|       |)
   32|       |public struct ResizableNetworkImageStyle: NetworkImageStyle {
   33|      0|  public func makeBody(configuration: Configuration) -> some View {
   34|      0|    EmptyView()
   35|      0|  }
   36|       |}
   37|       |
   38|       |extension EnvironmentValues {
   39|       |  @available(
   40|       |    *,
   41|       |    unavailable,
   42|       |    message: "You can use the 'transaction' parameter in NetworkImage to animate state changes."
   43|       |  )
   44|       |  public var networkImageScheduler: AnySchedulerOf<UIScheduler> {
   45|      0|    get { UIScheduler.shared.eraseToAnyScheduler() }
   46|      0|    set {}
   47|       |  }
   48|       |}
   49|       |
   50|       |extension View {
   51|       |  @available(
   52|       |    *,
   53|       |    unavailable,
   54|       |    message: "You can use the 'transaction' parameter in NetworkImage to animate state changes."
   55|       |  )
   56|       |  public func networkImageScheduler(
   57|       |    _ networkImageScheduler: AnySchedulerOf<UIScheduler>
   58|      0|  ) -> some View {
   59|      0|    EmptyView()
   60|      0|  }
   61|       |
   62|       |  @available(
   63|       |    *,
   64|       |    unavailable,
   65|       |    message: "You can use the 'transaction' parameter in NetworkImage to animate state changes."
   66|       |  )
   67|      0|  public func networkImageScheduler(_ networkImageScheduler: UIScheduler) -> some View {
   68|      0|    EmptyView()
   69|      0|  }
   70|       |
   71|       |  @available(
   72|       |    *,
   73|       |    unavailable,
   74|       |    message:
   75|       |      "You can style a NetworkImage by providing a content closure in one of the initializers."
   76|       |  )
   77|      0|  public func networkImageStyle<S>(_ networkImageStyle: S) -> some View where S: NetworkImageStyle {
   78|      0|    EmptyView()
   79|      0|  }
   80|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/NetworkImage/Sources/NetworkImage/SwiftUI/NetworkImage.swift:
    1|       |import Combine
    2|       |import CombineSchedulers
    3|       |import SwiftUI
    4|       |
    5|       |/// A view that displays an image located at a given URL.
    6|       |///
    7|       |/// A network image downloads and displays an image from a given URL; the download is asynchronous,
    8|       |/// and the result is cached both in disk and memory.
    9|       |///
   10|       |/// You create a network image, in its simplest form, by providing the image URL.
   11|       |///
   12|       |///     NetworkImage(url: URL(string: "https://picsum.photos/id/237/300/200"))
   13|       |///       .frame(width: 300, height: 200)
   14|       |///
   15|       |/// To manipulate the loaded image, use the `content` parameter.
   16|       |///
   17|       |///     NetworkImage(url: URL(string: "https://picsum.photos/id/237/300/200")) { image in
   18|       |///       image.resizable().scaledToFill()
   19|       |///     }
   20|       |///     .frame(width: 150, height: 150)
   21|       |///     .clipped()
   22|       |///
   23|       |/// The view displays a standard placeholder that fills the available space until the image loads. You can
   24|       |/// specify a custom placeholder by using the `placeholder` parameter.
   25|       |///
   26|       |///     NetworkImage(url: URL(string: "https://picsum.photos/id/237/300/200")) { image in
   27|       |///       image.resizable().scaledToFill()
   28|       |///     } placeholder: {
   29|       |///       Color.yellow // Shown while the image is loaded or an error occurs
   30|       |///     }
   31|       |///     .frame(width: 150, height: 150)
   32|       |///     .clipped()
   33|       |///
   34|       |/// It is also possible to specify a custom fallback placeholder that the view will display if there is an
   35|       |/// error or the URL is `nil`.
   36|       |///
   37|       |///     NetworkImage(url: URL(string: "https://picsum.photos/id/237/300/200")) { image in
   38|       |///       image.resizable().scaledToFill()
   39|       |///     } placeholder: {
   40|       |///       ProgressView() // Shown while the image is loaded
   41|       |///     } fallback: {
   42|       |///       Image(systemName: "photo") // Shown when an error occurs or the URL is nil
   43|       |///     }
   44|       |///     .frame(width: 150, height: 150)
   45|       |///     .clipped()
   46|       |///     .background(Color.yellow)
   47|       |///
   48|       |public struct NetworkImage<Content>: View where Content: View {
   49|       |  private enum ViewState: Equatable {
   50|       |    case empty
   51|       |    case success(URL, Image)
   52|       |    case failure
   53|       |
   54|      0|    var image: Image? {
   55|      0|      guard case .success(_, let image) = self else {
   56|      0|        return nil
   57|      0|      }
   58|      0|      return image
   59|      0|    }
   60|       |
   61|      0|    var url: URL? {
   62|      0|      guard case .success(let url, _) = self else {
   63|      0|        return nil
   64|      0|      }
   65|      0|      return url
   66|      0|    }
   67|       |  }
   68|       |
   69|      0|  @Environment(\.networkImageLoader) private var imageLoader
   70|      0|  @State private var viewState = ViewState.empty
   71|       |
   72|       |  private var url: URL?
   73|       |  private var scale: CGFloat
   74|       |  private var transaction: Transaction
   75|       |  private var content: (ViewState) -> Content
   76|       |
   77|      0|  private var viewStatePublisher: AnyPublisher<ViewState, Never> {
   78|      0|    switch url {
   79|      0|    case .some(let url) where url == viewState.url:
   80|      0|      // Avoid loading the same image again after the layout phase
   81|      0|      return Empty().eraseToAnyPublisher()
   82|      0|    case .some(let url):
   83|      0|      return imageLoader.image(for: url, scale: scale)
   84|      0|        .map { .success(url, .init(platformImage: $0)) }
   85|      0|        .replaceError(with: .failure)
   86|      0|        .receive(on: UIScheduler.shared)
   87|      0|        .eraseToAnyPublisher()
   88|      0|    case .none:
   89|      0|      return Just(.failure).eraseToAnyPublisher()
   90|      0|    }
   91|      0|  }
   92|       |
   93|       |  /// Loads and displays an image from the specified URL using
   94|       |  /// a default placeholder until the image loads.
   95|       |  ///
   96|       |  /// - Parameters:
   97|       |  ///   - url: The URL of the image to display.
   98|       |  ///   - scale: The scale to use for the image. The default is `1`.
   99|       |  @available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
  100|      0|  public init(url: URL?, scale: CGFloat = 1) where Content == RedactedImage<Image> {
  101|      0|    self.init(url: url, scale: scale, transaction: .init(), content: { $0 })
  102|      0|  }
  103|       |
  104|       |  /// Loads and displays a modifiable image from the specified URL using a
  105|       |  /// default placeholder until the image loads.
  106|       |  ///
  107|       |  /// - Parameters:
  108|       |  ///   - url: The URL where the image is located.
  109|       |  ///   - scale: The scale to use for the image. The default is `1`.
  110|       |  ///   - transaction: The transaction to use when the state changes.
  111|       |  ///   - content: A closure that takes the loaded image as an input, and
  112|       |  ///     returns the view to show. You can return the image directly, or
  113|       |  ///     modify it as needed before returning it.
  114|       |  @available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
  115|       |  public init<I>(
  116|       |    url: URL?,
  117|       |    scale: CGFloat = 1,
  118|       |    transaction: Transaction = .init(),
  119|       |    @ViewBuilder content: @escaping (Image) -> I
  120|      0|  ) where Content == RedactedImage<I>, I: View {
  121|      0|    self.init(
  122|      0|      url: url,
  123|      0|      scale: scale,
  124|      0|      transaction: transaction,
  125|      0|      content: { viewState in
  126|      0|        RedactedImage(image: viewState.image, content: content)
  127|      0|      }
  128|      0|    )
  129|      0|  }
  130|       |
  131|       |  /// Loads and displays a modifiable image from the specified URL using a
  132|       |  /// custom placeholder until the image loads.
  133|       |  ///
  134|       |  /// - Parameters:
  135|       |  ///   - url: The URL where the image is located.
  136|       |  ///   - scale: The scale to use for the image. The default is `1`.
  137|       |  ///   - transaction: The transaction to use when the state changes.
  138|       |  ///   - content: A closure that takes the loaded image as an input, and
  139|       |  ///     returns the view to show. You can return the image directly, or
  140|       |  ///     modify it as needed before returning it.
  141|       |  ///   - placeholder: A closure that returns the view to display while the image is loading.
  142|       |  public init<P, I>(
  143|       |    url: URL?,
  144|       |    scale: CGFloat = 1,
  145|       |    transaction: Transaction = .init(),
  146|       |    @ViewBuilder content: @escaping (Image) -> I,
  147|       |    @ViewBuilder placeholder: @escaping () -> P
  148|      0|  ) where Content == _ConditionalContent<P, I>, P: View, I: View {
  149|      0|    self.init(
  150|      0|      url: url,
  151|      0|      scale: scale,
  152|      0|      transaction: transaction,
  153|      0|      content: { viewState in
  154|      0|        switch viewState {
  155|      0|        case .empty, .failure:
  156|      0|          placeholder()
  157|      0|        case .success(_, let image):
  158|      0|          content(image)
  159|      0|        }
  160|      0|      }
  161|      0|    )
  162|      0|  }
  163|       |
  164|       |  /// Loads and displays a modifiable image from the specified URL using a custom placeholder
  165|       |  /// until the image loads and a custom fallback if the image fails to load or the URL is `nil`.
  166|       |  ///
  167|       |  /// - Parameters:
  168|       |  ///   - url: The URL where the image is located.
  169|       |  ///   - scale: The scale to use for the image. The default is `1`.
  170|       |  ///   - transaction: The transaction to use when the state changes.
  171|       |  ///   - content: A closure that takes the loaded image as an input, and
  172|       |  ///     returns the view to show. You can return the image directly, or
  173|       |  ///     modify it as needed before returning it.
  174|       |  ///   - placeholder: A closure that returns the view to display while the image is loading.
  175|       |  ///   - fallback: A closure that returns the view to display when the URL is `nil` or an error has occurred.
  176|       |  public init<P, I, F>(
  177|       |    url: URL?,
  178|       |    scale: CGFloat = 1,
  179|       |    transaction: Transaction = .init(),
  180|       |    @ViewBuilder content: @escaping (Image) -> I,
  181|       |    @ViewBuilder placeholder: @escaping () -> P,
  182|       |    @ViewBuilder fallback: @escaping () -> F
  183|      0|  ) where Content == _ConditionalContent<_ConditionalContent<P, I>, F>, P: View, I: View, F: View {
  184|      0|    self.init(
  185|      0|      url: url,
  186|      0|      scale: scale,
  187|      0|      transaction: transaction,
  188|      0|      content: { viewState in
  189|      0|        switch viewState {
  190|      0|        case .empty:
  191|      0|          placeholder()
  192|      0|        case .success(_, let image):
  193|      0|          content(image)
  194|      0|        case .failure:
  195|      0|          fallback()
  196|      0|        }
  197|      0|      }
  198|      0|    )
  199|      0|  }
  200|       |
  201|       |  private init(
  202|       |    url: URL?,
  203|       |    scale: CGFloat,
  204|       |    transaction: Transaction,
  205|       |    @ViewBuilder content: @escaping (ViewState) -> Content
  206|      0|  ) {
  207|      0|    self.url = url
  208|      0|    self.scale = scale
  209|      0|    self.transaction = transaction
  210|      0|    self.content = content
  211|      0|  }
  212|       |
  213|      0|  public var body: some View {
  214|      0|    content(self.viewState)
  215|      0|      .onReceive(viewStatePublisher) { viewState in
  216|      0|        withTransaction(self.transaction) {
  217|      0|          self.viewState = viewState
  218|      0|        }
  219|      0|      }
  220|      0|  }
  221|       |}
  222|       |
  223|       |@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
  224|       |public struct RedactedImage<Content>: View where Content: View {
  225|       |  var image: Image?
  226|       |  var content: (Image) -> Content
  227|       |
  228|      0|  public var body: some View {
  229|      0|    if let image = self.image {
  230|      0|      content(image)
  231|      0|    } else {
  232|      0|      Image(platformImage: .init()).resizable()
  233|      0|        .redacted(reason: .placeholder)
  234|      0|    }
  235|      0|  }
  236|       |}
  237|       |
  238|       |extension Image {
  239|      0|  init(platformImage: PlatformImage) {
  240|      0|    #if os(iOS) || os(tvOS) || os(watchOS)
  241|      0|      self.init(uiImage: platformImage)
  242|      0|    #elseif os(macOS)
  243|      0|      self.init(nsImage: platformImage)
  244|      0|    #endif
  245|      0|  }
  246|       |}
  247|       |
  248|       |extension View {
  249|       |  /// Sets the image loader for network images within this view.
  250|      0|  public func networkImageLoader(_ networkImageLoader: NetworkImageLoader) -> some View {
  251|      0|    environment(\.networkImageLoader, networkImageLoader)
  252|      0|  }
  253|       |}
  254|       |
  255|       |extension EnvironmentValues {
  256|       |  public var networkImageLoader: NetworkImageLoader {
  257|      0|    get { self[NetworkImageLoaderKey.self] }
  258|      0|    set { self[NetworkImageLoaderKey.self] = newValue }
  259|       |  }
  260|       |}
  261|       |
  262|       |private struct NetworkImageLoaderKey: EnvironmentKey {
  263|       |  static let defaultValue: NetworkImageLoader = .shared
  264|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Core/Backup.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |import Foundation
   26|       |import Dispatch
   27|       |#if SQLITE_SWIFT_STANDALONE
   28|       |import sqlite3
   29|       |#elseif SQLITE_SWIFT_SQLCIPHER
   30|       |import SQLCipher
   31|       |#elseif os(Linux)
   32|       |import CSQLite
   33|       |#else
   34|       |import SQLite3
   35|       |#endif
   36|       |
   37|       |/// An object representing database backup.
   38|       |///
   39|       |/// See: <https://www.sqlite.org/backup.html>
   40|       |public final class Backup {
   41|       |
   42|       |    /// The name of the database to backup
   43|       |    public enum DatabaseName {
   44|       |
   45|       |        /// The main database
   46|       |        case main
   47|       |
   48|       |        /// The temporary database
   49|       |        case temp
   50|       |
   51|       |        /// A database added to the connection with ATTACH statement
   52|       |        case attached(name: String)
   53|       |
   54|      0|        var name: String {
   55|      0|            switch self {
   56|      0|            case .main:
   57|      0|                return "main"
   58|      0|            case .temp:
   59|      0|                return "temp"
   60|      0|            case .attached(let name):
   61|      0|                return name
   62|      0|            }
   63|      0|        }
   64|       |    }
   65|       |
   66|       |    /// Number of pages to copy while performing a backup step
   67|       |    public enum Pages {
   68|       |
   69|       |        /// Indicates all remaining pages should be copied
   70|       |        case all
   71|       |
   72|       |        /// Indicates the maximal number of pages to be copied in single step
   73|       |        case limited(number: Int32)
   74|       |
   75|      0|        var number: Int32 {
   76|      0|            switch self {
   77|      0|            case .all:
   78|      0|                return -1
   79|      0|            case .limited(let number):
   80|      0|                return number
   81|      0|            }
   82|      0|        }
   83|       |    }
   84|       |
   85|       |    /// Total number of pages to copy
   86|       |    ///
   87|       |    /// See: <https://www.sqlite.org/c3ref/backup_finish.html#sqlite3backuppagecount>
   88|      0|    public var pageCount: Int32 {
   89|      0|        return handle.map { sqlite3_backup_pagecount($0) } ?? 0
   90|      0|    }
   91|       |
   92|       |    /// Number of remaining pages to copy.
   93|       |    ///
   94|       |    /// See: <https://www.sqlite.org/c3ref/backup_finish.html#sqlite3backupremaining>
   95|      0|    public var remainingPages: Int32 {
   96|      0|        return handle.map { sqlite3_backup_remaining($0) } ?? 0
   97|      0|    }
   98|       |
   99|       |    private let targetConnection: Connection
  100|       |    private let sourceConnection: Connection
  101|       |
  102|       |    private var handle: OpaquePointer?
  103|       |
  104|       |    /// Initializes a new SQLite backup.
  105|       |    ///
  106|       |    /// - Parameters:
  107|       |    ///
  108|       |    ///   - sourceConnection: The connection to the database to backup.
  109|       |    ///   - sourceName: The name of the database to backup.
  110|       |    ///     Default: `.main`.
  111|       |    ///
  112|       |    ///   - targetConnection: The connection to the database to save backup into.
  113|       |    ///   - targetName: The name of the database to save backup into.
  114|       |    ///     Default: `.main`.
  115|       |    ///
  116|       |    /// - Returns: A new database backup.
  117|       |    ///
  118|       |    /// See: <https://www.sqlite.org/c3ref/backup_finish.html#sqlite3backupinit>
  119|       |    public init(sourceConnection: Connection,
  120|       |                sourceName: DatabaseName = .main,
  121|       |                targetConnection: Connection,
  122|      0|                targetName: DatabaseName = .main) throws {
  123|      0|
  124|      0|        self.targetConnection = targetConnection
  125|      0|        self.sourceConnection = sourceConnection
  126|      0|
  127|      0|        self.handle = sqlite3_backup_init(targetConnection.handle,
  128|      0|                                          targetName.name,
  129|      0|                                          sourceConnection.handle,
  130|      0|                                          sourceName.name)
  131|      0|
  132|      0|        if handle == nil, let error = Result(errorCode: sqlite3_errcode(targetConnection.handle),
  133|      0|                                             connection: targetConnection) {
  134|      0|            throw error
  135|      0|        }
  136|      0|    }
  137|       |
  138|       |    /// Performs a backup step.
  139|       |    ///
  140|       |    /// - Parameter pagesToCopy: The maximal number of pages to copy in one step
  141|       |    ///
  142|       |    /// - Throws: `Result.Error` if step fails.
  143|       |    //
  144|       |    /// See: <https://www.sqlite.org/c3ref/backup_finish.html#sqlite3backupstep>
  145|      0|    public func step(pagesToCopy pages: Pages = .all) throws {
  146|      0|        let status = sqlite3_backup_step(handle, pages.number)
  147|      0|
  148|      0|        guard status != SQLITE_DONE else {
  149|      0|            finish()
  150|      0|            return
  151|      0|        }
  152|      0|
  153|      0|        if let error = Result(errorCode: status, connection: targetConnection) {
  154|      0|            throw error
  155|      0|        }
  156|      0|    }
  157|       |
  158|       |    /// Finalizes backup.
  159|       |    ///
  160|       |    /// See: <https://www.sqlite.org/c3ref/backup_finish.html#sqlite3backupfinish>
  161|      0|    public func finish() {
  162|      0|        guard let handle = self.handle else {
  163|      0|            return
  164|      0|        }
  165|      0|
  166|      0|        sqlite3_backup_finish(handle)
  167|      0|        self.handle = nil
  168|      0|    }
  169|       |
  170|      0|    deinit {
  171|      0|        finish()
  172|      0|    }
  173|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Core/Blob.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |public struct Blob {
   26|       |
   27|       |    public let bytes: [UInt8]
   28|       |
   29|      0|    public init(bytes: [UInt8]) {
   30|      0|        self.bytes = bytes
   31|      0|    }
   32|       |
   33|      0|    public init(bytes: UnsafeRawPointer, length: Int) {
   34|      0|        let i8bufptr = UnsafeBufferPointer(start: bytes.assumingMemoryBound(to: UInt8.self), count: length)
   35|      0|        self.init(bytes: [UInt8](i8bufptr))
   36|      0|    }
   37|       |
   38|      0|    public func toHex() -> String {
   39|      0|        bytes.map {
   40|      0|            ($0 < 16 ? "0" : "") + String($0, radix: 16, uppercase: false)
   41|      0|        }.joined(separator: "")
   42|      0|    }
   43|       |
   44|       |}
   45|       |
   46|       |extension Blob: CustomStringConvertible {
   47|       |
   48|      0|    public var description: String {
   49|      0|        "x'\(toHex())'"
   50|      0|    }
   51|       |
   52|       |}
   53|       |
   54|       |extension Blob: Equatable {
   55|       |
   56|       |}
   57|       |
   58|      0|public func ==(lhs: Blob, rhs: Blob) -> Bool {
   59|      0|    lhs.bytes == rhs.bytes
   60|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Core/Connection+Aggregation.swift:
    1|       |import Foundation
    2|       |#if SQLITE_SWIFT_STANDALONE
    3|       |import sqlite3
    4|       |#elseif SQLITE_SWIFT_SQLCIPHER
    5|       |import SQLCipher
    6|       |#elseif os(Linux)
    7|       |import CSQLite
    8|       |#else
    9|       |import SQLite3
   10|       |#endif
   11|       |
   12|       |extension Connection {
   13|       |    private typealias Aggregate = @convention(block) (Int, Context, Int32, Argv) -> Void
   14|       |
   15|       |    /// Creates or redefines a custom SQL aggregate.
   16|       |    ///
   17|       |    /// - Parameters:
   18|       |    ///
   19|       |    ///   - aggregate: The name of the aggregate to create or redefine.
   20|       |    ///
   21|       |    ///   - argumentCount: The number of arguments that the aggregate takes. If
   22|       |    ///     `nil`, the aggregate may take any number of arguments.
   23|       |    ///
   24|       |    ///     Default: `nil`
   25|       |    ///
   26|       |    ///   - deterministic: Whether or not the aggregate is deterministic (_i.e._
   27|       |    ///     the aggregate always returns the same result for a given input).
   28|       |    ///
   29|       |    ///     Default: `false`
   30|       |    ///
   31|       |    ///   - step: A block of code to run for each row of an aggregation group.
   32|       |    ///     The block is called with an array of raw SQL values mapped to the
   33|       |    ///     aggregate’s parameters, and an UnsafeMutablePointer to a state
   34|       |    ///     variable.
   35|       |    ///
   36|       |    ///   - final: A block of code to run after each row of an aggregation group
   37|       |    ///     is processed. The block is called with an UnsafeMutablePointer to a
   38|       |    ///     state variable, and should return a raw SQL value (or nil).
   39|       |    ///
   40|       |    ///   - state: A block of code to run to produce a fresh state variable for
   41|       |    ///     each aggregation group. The block should return an
   42|       |    ///     UnsafeMutablePointer to the fresh state variable.
   43|       |    public func createAggregation<T>(
   44|       |            _ functionName: String,
   45|       |            argumentCount: UInt? = nil,
   46|       |            deterministic: Bool = false,
   47|       |            step: @escaping ([Binding?], UnsafeMutablePointer<T>) -> Void,
   48|       |            final: @escaping (UnsafeMutablePointer<T>) -> Binding?,
   49|      0|            state: @escaping () -> UnsafeMutablePointer<T>) {
   50|      0|
   51|      0|        let argc = argumentCount.map { Int($0) } ?? -1
   52|      0|        let box: Aggregate = { (stepFlag: Int, context: Context, argc: Int32, argv: Argv) in
   53|      0|            let nBytes = Int32(MemoryLayout<UnsafeMutablePointer<Int64>>.size)
   54|      0|            guard let aggregateContext = sqlite3_aggregate_context(context, nBytes) else {
   55|      0|                fatalError("Could not get aggregate context")
   56|      0|            }
   57|      0|            let mutablePointer = aggregateContext.assumingMemoryBound(to: UnsafeMutableRawPointer.self)
   58|      0|            if stepFlag > 0 {
   59|      0|                let arguments = argv.getBindings(argc: argc)
   60|      0|                if aggregateContext.assumingMemoryBound(to: Int64.self).pointee == 0 {
   61|      0|                    mutablePointer.pointee = UnsafeMutableRawPointer(mutating: state())
   62|      0|                }
   63|      0|                step(arguments, mutablePointer.pointee.assumingMemoryBound(to: T.self))
   64|      0|            } else {
   65|      0|                let result = final(mutablePointer.pointee.assumingMemoryBound(to: T.self))
   66|      0|                context.set(result: result)
   67|      0|            }
   68|      0|        }
   69|      0|
   70|      0|        func xStep(context: Context, argc: Int32, value: Argv) {
   71|      0|            unsafeBitCast(sqlite3_user_data(context), to: Aggregate.self)(1, context, argc, value)
   72|      0|        }
   73|      0|
   74|      0|        func xFinal(context: Context) {
   75|      0|            unsafeBitCast(sqlite3_user_data(context), to: Aggregate.self)(0, context, 0, nil)
   76|      0|        }
   77|      0|
   78|      0|        let flags = SQLITE_UTF8 | (deterministic ? SQLITE_DETERMINISTIC : 0)
   79|      0|        let resultCode = sqlite3_create_function_v2(
   80|      0|            handle,
   81|      0|            functionName,
   82|      0|            Int32(argc),
   83|      0|            flags,
   84|      0|            /* pApp */ unsafeBitCast(box, to: UnsafeMutableRawPointer.self),
   85|      0|            /* xFunc */ nil, xStep, xFinal, /* xDestroy */ nil
   86|      0|        )
   87|      0|        if let result = Result(errorCode: resultCode, connection: self) {
   88|      0|            fatalError("Error creating function: \(result)")
   89|      0|        }
   90|      0|        register(functionName, argc: argc, value: box)
   91|      0|    }
   92|       |
   93|       |    public func createAggregation<T: AnyObject>(
   94|       |            _ aggregate: String,
   95|       |            argumentCount: UInt? = nil,
   96|       |            deterministic: Bool = false,
   97|       |            initialValue: T,
   98|       |            reduce: @escaping (T, [Binding?]) -> T,
   99|       |            result: @escaping (T) -> Binding?
  100|      0|    ) {
  101|      0|        let step: ([Binding?], UnsafeMutablePointer<UnsafeMutableRawPointer>) -> Void = { (bindings, ptr) in
  102|      0|            let pointer = ptr.pointee.assumingMemoryBound(to: T.self)
  103|      0|            let current = Unmanaged<T>.fromOpaque(pointer).takeRetainedValue()
  104|      0|            let next = reduce(current, bindings)
  105|      0|            ptr.pointee = Unmanaged.passRetained(next).toOpaque()
  106|      0|        }
  107|      0|
  108|      0|        let final: (UnsafeMutablePointer<UnsafeMutableRawPointer>) -> Binding? = { ptr in
  109|      0|            let pointer = ptr.pointee.assumingMemoryBound(to: T.self)
  110|      0|            let obj = Unmanaged<T>.fromOpaque(pointer).takeRetainedValue()
  111|      0|            let value = result(obj)
  112|      0|            ptr.deallocate()
  113|      0|            return value
  114|      0|        }
  115|      0|
  116|      0|        let state: () -> UnsafeMutablePointer<UnsafeMutableRawPointer> = {
  117|      0|            let pointer = UnsafeMutablePointer<UnsafeMutableRawPointer>.allocate(capacity: 1)
  118|      0|            pointer.pointee = Unmanaged.passRetained(initialValue).toOpaque()
  119|      0|            return pointer
  120|      0|        }
  121|      0|
  122|      0|        createAggregation(aggregate, step: step, final: final, state: state)
  123|      0|    }
  124|       |
  125|       |    public func createAggregation<T>(
  126|       |            _ aggregate: String,
  127|       |            argumentCount: UInt? = nil,
  128|       |            deterministic: Bool = false,
  129|       |            initialValue: T,
  130|       |            reduce: @escaping (T, [Binding?]) -> T,
  131|       |            result: @escaping (T) -> Binding?
  132|      0|    ) {
  133|      0|
  134|      0|        let step: ([Binding?], UnsafeMutablePointer<T>) -> Void = { (bindings, pointer) in
  135|      0|            let current = pointer.pointee
  136|      0|            let next = reduce(current, bindings)
  137|      0|            pointer.pointee = next
  138|      0|        }
  139|      0|
  140|      0|        let final: (UnsafeMutablePointer<T>) -> Binding? = { pointer in
  141|      0|            let value = result(pointer.pointee)
  142|      0|            pointer.deallocate()
  143|      0|            return value
  144|      0|        }
  145|      0|
  146|      0|        let state: () -> UnsafeMutablePointer<T> = {
  147|      0|            let pointer = UnsafeMutablePointer<T>.allocate(capacity: 1)
  148|      0|            pointer.initialize(to: initialValue)
  149|      0|            return pointer
  150|      0|        }
  151|      0|
  152|      0|        createAggregation(aggregate, step: step, final: final, state: state)
  153|      0|    }
  154|       |
  155|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Core/Connection.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |import Foundation
   26|       |import Dispatch
   27|       |#if SQLITE_SWIFT_STANDALONE
   28|       |import sqlite3
   29|       |#elseif SQLITE_SWIFT_SQLCIPHER
   30|       |import SQLCipher
   31|       |#elseif os(Linux)
   32|       |import CSQLite
   33|       |#else
   34|       |import SQLite3
   35|       |#endif
   36|       |
   37|       |/// A connection to SQLite.
   38|       |public final class Connection {
   39|       |
   40|       |    /// The location of a SQLite database.
   41|       |    public enum Location {
   42|       |
   43|       |        /// An in-memory database (equivalent to `.uri(":memory:")`).
   44|       |        ///
   45|       |        /// See: <https://www.sqlite.org/inmemorydb.html#sharedmemdb>
   46|       |        case inMemory
   47|       |
   48|       |        /// A temporary, file-backed database (equivalent to `.uri("")`).
   49|       |        ///
   50|       |        /// See: <https://www.sqlite.org/inmemorydb.html#temp_db>
   51|       |        case temporary
   52|       |
   53|       |        /// A database located at the given URI filename (or path).
   54|       |        ///
   55|       |        /// See: <https://www.sqlite.org/uri.html>
   56|       |        ///
   57|       |        /// - Parameter filename: A URI filename
   58|       |        case uri(String)
   59|       |    }
   60|       |
   61|       |    /// An SQL operation passed to update callbacks.
   62|       |    public enum Operation {
   63|       |
   64|       |        /// An INSERT operation.
   65|       |        case insert
   66|       |
   67|       |        /// An UPDATE operation.
   68|       |        case update
   69|       |
   70|       |        /// A DELETE operation.
   71|       |        case delete
   72|       |
   73|      0|        fileprivate init(rawValue: Int32) {
   74|      0|            switch rawValue {
   75|      0|            case SQLITE_INSERT:
   76|      0|                self = .insert
   77|      0|            case SQLITE_UPDATE:
   78|      0|                self = .update
   79|      0|            case SQLITE_DELETE:
   80|      0|                self = .delete
   81|      0|            default:
   82|      0|                fatalError("unhandled operation code: \(rawValue)")
   83|      0|            }
   84|      0|        }
   85|       |    }
   86|       |
   87|  3.05k|    public var handle: OpaquePointer { _handle! }
   88|       |
   89|       |    fileprivate var _handle: OpaquePointer?
   90|       |
   91|       |    /// Initializes a new SQLite connection.
   92|       |    ///
   93|       |    /// - Parameters:
   94|       |    ///
   95|       |    ///   - location: The location of the database. Creates a new database if it
   96|       |    ///     doesn’t already exist (unless in read-only mode).
   97|       |    ///
   98|       |    ///     Default: `.inMemory`.
   99|       |    ///
  100|       |    ///   - readonly: Whether or not to open the database in a read-only state.
  101|       |    ///
  102|       |    ///     Default: `false`.
  103|       |    ///
  104|       |    /// - Returns: A new database connection.
  105|      2|    public init(_ location: Location = .inMemory, readonly: Bool = false) throws {
  106|      2|        let flags = readonly ? SQLITE_OPEN_READONLY : SQLITE_OPEN_CREATE | SQLITE_OPEN_READWRITE
  107|      2|        try check(sqlite3_open_v2(location.description, &_handle, flags | SQLITE_OPEN_FULLMUTEX, nil))
  108|      2|        queue.setSpecific(key: Connection.queueKey, value: queueContext)
  109|      2|    }
  110|       |
  111|       |    /// Initializes a new connection to a database.
  112|       |    ///
  113|       |    /// - Parameters:
  114|       |    ///
  115|       |    ///   - filename: The location of the database. Creates a new database if
  116|       |    ///     it doesn’t already exist (unless in read-only mode).
  117|       |    ///
  118|       |    ///   - readonly: Whether or not to open the database in a read-only state.
  119|       |    ///
  120|       |    ///     Default: `false`.
  121|       |    ///
  122|       |    /// - Throws: `Result.Error` iff a connection cannot be established.
  123|       |    ///
  124|       |    /// - Returns: A new database connection.
  125|      2|    public convenience init(_ filename: String, readonly: Bool = false) throws {
  126|      2|        try self.init(.uri(filename), readonly: readonly)
  127|      2|    }
  128|       |
  129|      0|    deinit {
  130|      0|        sqlite3_close(handle)
  131|      0|    }
  132|       |
  133|       |    // MARK: -
  134|       |
  135|       |    /// Whether or not the database was opened in a read-only state.
  136|      0|    public var readonly: Bool { sqlite3_db_readonly(handle, nil) == 1 }
  137|       |
  138|       |    /// The last rowid inserted into the database via this connection.
  139|      0|    public var lastInsertRowid: Int64 {
  140|      0|        sqlite3_last_insert_rowid(handle)
  141|      0|    }
  142|       |
  143|       |    /// The last number of changes (inserts, updates, or deletes) made to the
  144|       |    /// database via this connection.
  145|     18|    public var changes: Int {
  146|     18|        Int(sqlite3_changes(handle))
  147|     18|    }
  148|       |
  149|       |    /// The total number of changes (inserts, updates, or deletes) made to the
  150|       |    /// database via this connection.
  151|      0|    public var totalChanges: Int {
  152|      0|        Int(sqlite3_total_changes(handle))
  153|      0|    }
  154|       |
  155|       |    // MARK: - Execute
  156|       |
  157|       |    /// Executes a batch of SQL statements.
  158|       |    ///
  159|       |    /// - Parameter SQL: A batch of zero or more semicolon-separated SQL
  160|       |    ///   statements.
  161|       |    ///
  162|       |    /// - Throws: `Result.Error` if query execution fails.
  163|      0|    public func execute(_ SQL: String) throws {
  164|      0|        _ = try sync { try check(sqlite3_exec(handle, SQL, nil, nil, nil)) }
  165|      0|    }
  166|       |
  167|       |    // MARK: - Prepare
  168|       |
  169|       |    /// Prepares a single SQL statement (with optional parameter bindings).
  170|       |    ///
  171|       |    /// - Parameters:
  172|       |    ///
  173|       |    ///   - statement: A single SQL statement.
  174|       |    ///
  175|       |    ///   - bindings: A list of parameters to bind to the statement.
  176|       |    ///
  177|       |    /// - Returns: A prepared statement.
  178|  3.03k|    public func prepare(_ statement: String, _ bindings: Binding?...) throws -> Statement {
  179|  3.03k|        if !bindings.isEmpty { return try prepare(statement, bindings) }
  180|  3.03k|        return try Statement(self, statement)
  181|  3.03k|    }
  182|       |
  183|       |    /// Prepares a single SQL statement and binds parameters to it.
  184|       |    ///
  185|       |    /// - Parameters:
  186|       |    ///
  187|       |    ///   - statement: A single SQL statement.
  188|       |    ///
  189|       |    ///   - bindings: A list of parameters to bind to the statement.
  190|       |    ///
  191|       |    /// - Returns: A prepared statement.
  192|  2.97k|    public func prepare(_ statement: String, _ bindings: [Binding?]) throws -> Statement {
  193|  2.97k|        try prepare(statement).bind(bindings)
  194|  2.97k|    }
  195|       |
  196|       |    /// Prepares a single SQL statement and binds parameters to it.
  197|       |    ///
  198|       |    /// - Parameters:
  199|       |    ///
  200|       |    ///   - statement: A single SQL statement.
  201|       |    ///
  202|       |    ///   - bindings: A dictionary of named parameters to bind to the statement.
  203|       |    ///
  204|       |    /// - Returns: A prepared statement.
  205|      0|    public func prepare(_ statement: String, _ bindings: [String: Binding?]) throws -> Statement {
  206|      0|        try prepare(statement).bind(bindings)
  207|      0|    }
  208|       |
  209|       |    // MARK: - Run
  210|       |
  211|       |    /// Runs a single SQL statement (with optional parameter bindings).
  212|       |    ///
  213|       |    /// - Parameters:
  214|       |    ///
  215|       |    ///   - statement: A single SQL statement.
  216|       |    ///
  217|       |    ///   - bindings: A list of parameters to bind to the statement.
  218|       |    ///
  219|       |    /// - Throws: `Result.Error` if query execution fails.
  220|       |    ///
  221|       |    /// - Returns: The statement.
  222|      8|    @discardableResult public func run(_ statement: String, _ bindings: Binding?...) throws -> Statement {
  223|      8|        try run(statement, bindings)
  224|      8|    }
  225|       |
  226|       |    /// Prepares, binds, and runs a single SQL statement.
  227|       |    ///
  228|       |    /// - Parameters:
  229|       |    ///
  230|       |    ///   - statement: A single SQL statement.
  231|       |    ///
  232|       |    ///   - bindings: A list of parameters to bind to the statement.
  233|       |    ///
  234|       |    /// - Throws: `Result.Error` if query execution fails.
  235|       |    ///
  236|       |    /// - Returns: The statement.
  237|     26|    @discardableResult public func run(_ statement: String, _ bindings: [Binding?]) throws -> Statement {
  238|     26|        try prepare(statement).run(bindings)
  239|     26|    }
  240|       |
  241|       |    /// Prepares, binds, and runs a single SQL statement.
  242|       |    ///
  243|       |    /// - Parameters:
  244|       |    ///
  245|       |    ///   - statement: A single SQL statement.
  246|       |    ///
  247|       |    ///   - bindings: A dictionary of named parameters to bind to the statement.
  248|       |    ///
  249|       |    /// - Throws: `Result.Error` if query execution fails.
  250|       |    ///
  251|       |    /// - Returns: The statement.
  252|      0|    @discardableResult public func run(_ statement: String, _ bindings: [String: Binding?]) throws -> Statement {
  253|      0|        try prepare(statement).run(bindings)
  254|      0|    }
  255|       |
  256|       |    // MARK: - VACUUM
  257|       |
  258|       |    /// Run a vacuum on the database
  259|       |    ///
  260|       |    /// - Throws: `Result.Error` if query execution fails.
  261|       |    ///
  262|       |    /// - Returns: The statement.
  263|      0|    @discardableResult public func vacuum() throws -> Statement {
  264|      0|        try run("VACUUM")
  265|      0|    }
  266|       |
  267|       |    // MARK: - Scalar
  268|       |
  269|       |    /// Runs a single SQL statement (with optional parameter bindings),
  270|       |    /// returning the first value of the first row.
  271|       |    ///
  272|       |    /// - Parameters:
  273|       |    ///
  274|       |    ///   - statement: A single SQL statement.
  275|       |    ///
  276|       |    ///   - bindings: A list of parameters to bind to the statement.
  277|       |    ///
  278|       |    /// - Returns: The first value of the first row returned.
  279|      0|    public func scalar(_ statement: String, _ bindings: Binding?...) throws -> Binding? {
  280|      0|        try scalar(statement, bindings)
  281|      0|    }
  282|       |
  283|       |    /// Runs a single SQL statement (with optional parameter bindings),
  284|       |    /// returning the first value of the first row.
  285|       |    ///
  286|       |    /// - Parameters:
  287|       |    ///
  288|       |    ///   - statement: A single SQL statement.
  289|       |    ///
  290|       |    ///   - bindings: A list of parameters to bind to the statement.
  291|       |    ///
  292|       |    /// - Returns: The first value of the first row returned.
  293|     36|    public func scalar(_ statement: String, _ bindings: [Binding?]) throws -> Binding? {
  294|     36|        try prepare(statement).scalar(bindings)
  295|     36|    }
  296|       |
  297|       |    /// Runs a single SQL statement (with optional parameter bindings),
  298|       |    /// returning the first value of the first row.
  299|       |    ///
  300|       |    /// - Parameters:
  301|       |    ///
  302|       |    ///   - statement: A single SQL statement.
  303|       |    ///
  304|       |    ///   - bindings: A dictionary of named parameters to bind to the statement.
  305|       |    ///
  306|       |    /// - Returns: The first value of the first row returned.
  307|      0|    public func scalar(_ statement: String, _ bindings: [String: Binding?]) throws -> Binding? {
  308|      0|        try prepare(statement).scalar(bindings)
  309|      0|    }
  310|       |
  311|       |    // MARK: - Transactions
  312|       |
  313|       |    /// The mode in which a transaction acquires a lock.
  314|       |    public enum TransactionMode: String {
  315|       |
  316|       |        /// Defers locking the database till the first read/write executes.
  317|       |        case deferred = "DEFERRED"
  318|       |
  319|       |        /// Immediately acquires a reserved lock on the database.
  320|       |        case immediate = "IMMEDIATE"
  321|       |
  322|       |        /// Immediately acquires an exclusive lock on all databases.
  323|       |        case exclusive = "EXCLUSIVE"
  324|       |
  325|       |    }
  326|       |
  327|       |    // TODO: Consider not requiring a throw to roll back?
  328|       |    /// Runs a transaction with the given mode.
  329|       |    ///
  330|       |    /// - Note: Transactions cannot be nested. To nest transactions, see
  331|       |    ///   `savepoint()`, instead.
  332|       |    ///
  333|       |    /// - Parameters:
  334|       |    ///
  335|       |    ///   - mode: The mode in which a transaction acquires a lock.
  336|       |    ///
  337|       |    ///     Default: `.deferred`
  338|       |    ///
  339|       |    ///   - block: A closure to run SQL statements within the transaction.
  340|       |    ///     The transaction will be committed when the block returns. The block
  341|       |    ///     must throw to roll the transaction back.
  342|       |    ///
  343|       |    /// - Throws: `Result.Error`, and rethrows.
  344|      0|    public func transaction(_ mode: TransactionMode = .deferred, block: () throws -> Void) throws {
  345|      0|        try transaction("BEGIN \(mode.rawValue) TRANSACTION", block, "COMMIT TRANSACTION", or: "ROLLBACK TRANSACTION")
  346|      0|    }
  347|       |
  348|       |    // TODO: Consider not requiring a throw to roll back?
  349|       |    // TODO: Consider removing ability to set a name?
  350|       |    /// Runs a transaction with the given savepoint name (if omitted, it will
  351|       |    /// generate a UUID).
  352|       |    ///
  353|       |    /// - SeeAlso: `transaction()`.
  354|       |    ///
  355|       |    /// - Parameters:
  356|       |    ///
  357|       |    ///   - savepointName: A unique identifier for the savepoint (optional).
  358|       |    ///
  359|       |    ///   - block: A closure to run SQL statements within the transaction.
  360|       |    ///     The savepoint will be released (committed) when the block returns.
  361|       |    ///     The block must throw to roll the savepoint back.
  362|       |    ///
  363|       |    /// - Throws: `SQLite.Result.Error`, and rethrows.
  364|      0|    public func savepoint(_ name: String = UUID().uuidString, block: () throws -> Void) throws {
  365|      0|        let name = name.quote("'")
  366|      0|        let savepoint = "SAVEPOINT \(name)"
  367|      0|
  368|      0|        try transaction(savepoint, block, "RELEASE \(savepoint)", or: "ROLLBACK TO \(savepoint)")
  369|      0|    }
  370|       |
  371|      0|    fileprivate func transaction(_ begin: String, _ block: () throws -> Void, _ commit: String, or rollback: String) throws {
  372|      0|        return try sync {
  373|      0|            try self.run(begin)
  374|      0|            do {
  375|      0|                try block()
  376|      0|                try self.run(commit)
  377|      0|            } catch {
  378|      0|                try self.run(rollback)
  379|      0|                throw error
  380|      0|            }
  381|      0|        }
  382|      0|    }
  383|       |
  384|       |    /// Interrupts any long-running queries.
  385|      0|    public func interrupt() {
  386|      0|        sqlite3_interrupt(handle)
  387|      0|    }
  388|       |
  389|       |    // MARK: - Handlers
  390|       |
  391|       |    /// The number of seconds a connection will attempt to retry a statement
  392|       |    /// after encountering a busy signal (lock).
  393|       |    public var busyTimeout: Double = 0 {
  394|      0|        didSet {
  395|      0|            sqlite3_busy_timeout(handle, Int32(busyTimeout * 1_000))
  396|      0|        }
  397|       |    }
  398|       |
  399|       |    /// Sets a handler to call after encountering a busy signal (lock).
  400|       |    ///
  401|       |    /// - Parameter callback: This block is executed during a lock in which a
  402|       |    ///   busy error would otherwise be returned. It’s passed the number of
  403|       |    ///   times it’s been called for this lock. If it returns `true`, it will
  404|       |    ///   try again. If it returns `false`, no further attempts will be made.
  405|      0|    public func busyHandler(_ callback: ((_ tries: Int) -> Bool)?) {
  406|      0|        guard let callback = callback else {
  407|      0|            sqlite3_busy_handler(handle, nil, nil)
  408|      0|            busyHandler = nil
  409|      0|            return
  410|      0|        }
  411|      0|
  412|      0|        let box: BusyHandler = { callback(Int($0)) ? 1 : 0 }
  413|      0|        sqlite3_busy_handler(handle, { callback, tries in
  414|      0|            unsafeBitCast(callback, to: BusyHandler.self)(tries)
  415|      0|        }, unsafeBitCast(box, to: UnsafeMutableRawPointer.self))
  416|      0|        busyHandler = box
  417|      0|    }
  418|       |    fileprivate typealias BusyHandler = @convention(block) (Int32) -> Int32
  419|       |    fileprivate var busyHandler: BusyHandler?
  420|       |
  421|       |    /// Sets a handler to call when a statement is executed with the compiled
  422|       |    /// SQL.
  423|       |    ///
  424|       |    /// - Parameter callback: This block is invoked when a statement is executed
  425|       |    ///   with the compiled SQL as its argument.
  426|       |    ///
  427|       |    ///       db.trace { SQL in print(SQL) }
  428|      0|    public func trace(_ callback: ((String) -> Void)?) {
  429|      0|        if #available(iOS 10.0, OSX 10.12, tvOS 10.0, watchOS 3.0, *) {
  430|      0|            trace_v2(callback)
  431|      0|        } else {
  432|      0|            trace_v1(callback)
  433|      0|        }
  434|      0|    }
  435|       |
  436|       |    @available(OSX, deprecated: 10.12)
  437|       |    @available(iOS, deprecated: 10.0)
  438|       |    @available(watchOS, deprecated: 3.0)
  439|       |    @available(tvOS, deprecated: 10.0)
  440|      0|    fileprivate func trace_v1(_ callback: ((String) -> Void)?) {
  441|      0|        guard let callback = callback else {
  442|      0|            sqlite3_trace(handle, nil /* xCallback */, nil /* pCtx */)
  443|      0|            trace = nil
  444|      0|            return
  445|      0|        }
  446|      0|        let box: Trace = { (pointer: UnsafeRawPointer) in
  447|      0|            callback(String(cString: pointer.assumingMemoryBound(to: UInt8.self)))
  448|      0|        }
  449|      0|        sqlite3_trace(handle, { (context: UnsafeMutableRawPointer?, SQL: UnsafePointer<Int8>?) in
  450|      0|                    if let context = context, let SQL = SQL {
  451|      0|                        unsafeBitCast(context, to: Trace.self)(SQL)
  452|      0|                    }
  453|      0|            },
  454|      0|            unsafeBitCast(box, to: UnsafeMutableRawPointer.self)
  455|      0|        )
  456|      0|        trace = box
  457|      0|    }
  458|       |
  459|       |    @available(iOS 10.0, OSX 10.12, tvOS 10.0, watchOS 3.0, *)
  460|      0|    fileprivate func trace_v2(_ callback: ((String) -> Void)?) {
  461|      0|        guard let callback = callback else {
  462|      0|            // If the X callback is NULL or if the M mask is zero, then tracing is disabled.
  463|      0|            sqlite3_trace_v2(handle, 0 /* mask */, nil /* xCallback */, nil /* pCtx */)
  464|      0|            trace = nil
  465|      0|            return
  466|      0|        }
  467|      0|
  468|      0|        let box: Trace = { (pointer: UnsafeRawPointer) in
  469|      0|            callback(String(cString: pointer.assumingMemoryBound(to: UInt8.self)))
  470|      0|        }
  471|      0|        sqlite3_trace_v2(handle, UInt32(SQLITE_TRACE_STMT) /* mask */, {
  472|      0|                 // A trace callback is invoked with four arguments: callback(T,C,P,X).
  473|      0|                 // The T argument is one of the SQLITE_TRACE constants to indicate why the
  474|      0|                 // callback was invoked. The C argument is a copy of the context pointer.
  475|      0|                 // The P and X arguments are pointers whose meanings depend on T.
  476|      0|                 (_: UInt32, context: UnsafeMutableRawPointer?, pointer: UnsafeMutableRawPointer?, _: UnsafeMutableRawPointer?) in
  477|      0|                 if let pointer = pointer,
  478|      0|                    let expandedSQL = sqlite3_expanded_sql(OpaquePointer(pointer)) {
  479|      0|                     unsafeBitCast(context, to: Trace.self)(expandedSQL)
  480|      0|                     sqlite3_free(expandedSQL)
  481|      0|                 }
  482|      0|                 return Int32(0) // currently ignored
  483|      0|             },
  484|      0|             unsafeBitCast(box, to: UnsafeMutableRawPointer.self) /* pCtx */
  485|      0|        )
  486|      0|        trace = box
  487|      0|    }
  488|       |
  489|       |    fileprivate typealias Trace = @convention(block) (UnsafeRawPointer) -> Void
  490|       |    fileprivate var trace: Trace?
  491|       |
  492|       |    /// Registers a callback to be invoked whenever a row is inserted, updated,
  493|       |    /// or deleted in a rowid table.
  494|       |    ///
  495|       |    /// - Parameter callback: A callback invoked with the `Operation` (one of
  496|       |    ///   `.Insert`, `.Update`, or `.Delete`), database name, table name, and
  497|       |    ///   rowid.
  498|      0|    public func updateHook(_ callback: ((_ operation: Operation, _ db: String, _ table: String, _ rowid: Int64) -> Void)?) {
  499|      0|        guard let callback = callback else {
  500|      0|            sqlite3_update_hook(handle, nil, nil)
  501|      0|            updateHook = nil
  502|      0|            return
  503|      0|        }
  504|      0|
  505|      0|        let box: UpdateHook = {
  506|      0|            callback(
  507|      0|                Operation(rawValue: $0),
  508|      0|                String(cString: $1),
  509|      0|                String(cString: $2),
  510|      0|                $3
  511|      0|            )
  512|      0|        }
  513|      0|        sqlite3_update_hook(handle, { callback, operation, db, table, rowid in
  514|      0|            unsafeBitCast(callback, to: UpdateHook.self)(operation, db!, table!, rowid)
  515|      0|        }, unsafeBitCast(box, to: UnsafeMutableRawPointer.self))
  516|      0|        updateHook = box
  517|      0|    }
  518|       |    fileprivate typealias UpdateHook = @convention(block) (Int32, UnsafePointer<Int8>, UnsafePointer<Int8>, Int64) -> Void
  519|       |    fileprivate var updateHook: UpdateHook?
  520|       |
  521|       |    /// Registers a callback to be invoked whenever a transaction is committed.
  522|       |    ///
  523|       |    /// - Parameter callback: A callback invoked whenever a transaction is
  524|       |    ///   committed. If this callback throws, the transaction will be rolled
  525|       |    ///   back.
  526|      0|    public func commitHook(_ callback: (() throws -> Void)?) {
  527|      0|        guard let callback = callback else {
  528|      0|            sqlite3_commit_hook(handle, nil, nil)
  529|      0|            commitHook = nil
  530|      0|            return
  531|      0|        }
  532|      0|
  533|      0|        let box: CommitHook = {
  534|      0|            do {
  535|      0|                try callback()
  536|      0|            } catch {
  537|      0|                return 1
  538|      0|            }
  539|      0|            return 0
  540|      0|        }
  541|      0|        sqlite3_commit_hook(handle, { callback in
  542|      0|            unsafeBitCast(callback, to: CommitHook.self)()
  543|      0|        }, unsafeBitCast(box, to: UnsafeMutableRawPointer.self))
  544|      0|        commitHook = box
  545|      0|    }
  546|       |    fileprivate typealias CommitHook = @convention(block) () -> Int32
  547|       |    fileprivate var commitHook: CommitHook?
  548|       |
  549|       |    /// Registers a callback to be invoked whenever a transaction rolls back.
  550|       |    ///
  551|       |    /// - Parameter callback: A callback invoked when a transaction is rolled
  552|       |    ///   back.
  553|      0|    public func rollbackHook(_ callback: (() -> Void)?) {
  554|      0|        guard let callback = callback else {
  555|      0|            sqlite3_rollback_hook(handle, nil, nil)
  556|      0|            rollbackHook = nil
  557|      0|            return
  558|      0|        }
  559|      0|
  560|      0|        let box: RollbackHook = { callback() }
  561|      0|        sqlite3_rollback_hook(handle, { callback in
  562|      0|            unsafeBitCast(callback, to: RollbackHook.self)()
  563|      0|        }, unsafeBitCast(box, to: UnsafeMutableRawPointer.self))
  564|      0|        rollbackHook = box
  565|      0|    }
  566|       |    fileprivate typealias RollbackHook = @convention(block) () -> Void
  567|       |    fileprivate var rollbackHook: RollbackHook?
  568|       |
  569|       |    /// Creates or redefines a custom SQL function.
  570|       |    ///
  571|       |    /// - Parameters:
  572|       |    ///
  573|       |    ///   - function: The name of the function to create or redefine.
  574|       |    ///
  575|       |    ///   - argumentCount: The number of arguments that the function takes. If
  576|       |    ///     `nil`, the function may take any number of arguments.
  577|       |    ///
  578|       |    ///     Default: `nil`
  579|       |    ///
  580|       |    ///   - deterministic: Whether or not the function is deterministic (_i.e._
  581|       |    ///     the function always returns the same result for a given input).
  582|       |    ///
  583|       |    ///     Default: `false`
  584|       |    ///
  585|       |    ///   - block: A block of code to run when the function is called. The block
  586|       |    ///     is called with an array of raw SQL values mapped to the function’s
  587|       |    ///     parameters and should return a raw SQL value (or nil).
  588|       |    public func createFunction(_ functionName: String,
  589|       |                               argumentCount: UInt? = nil,
  590|       |                               deterministic: Bool = false,
  591|      0|                               _ block: @escaping (_ args: [Binding?]) -> Binding?) {
  592|      0|        let argc = argumentCount.map { Int($0) } ?? -1
  593|      0|        let box: Function = { (context: Context, argc, argv: Argv) in
  594|      0|            context.set(result: block(argv.getBindings(argc: argc)))
  595|      0|        }
  596|      0|        func xFunc(context: Context, argc: Int32, value: Argv) {
  597|      0|            unsafeBitCast(sqlite3_user_data(context), to: Function.self)(context, argc, value)
  598|      0|        }
  599|      0|        let flags = SQLITE_UTF8 | (deterministic ? SQLITE_DETERMINISTIC : 0)
  600|      0|        let resultCode = sqlite3_create_function_v2(
  601|      0|            handle,
  602|      0|            functionName,
  603|      0|            Int32(argc),
  604|      0|            flags,
  605|      0|            /* pApp */ unsafeBitCast(box, to: UnsafeMutableRawPointer.self),
  606|      0|            xFunc, /*xStep*/ nil, /*xFinal*/ nil, /*xDestroy*/ nil
  607|      0|        )
  608|      0|
  609|      0|        if let result = Result(errorCode: resultCode, connection: self) {
  610|      0|            fatalError("Error creating function: \(result)")
  611|      0|        }
  612|      0|        register(functionName, argc: argc, value: box)
  613|      0|    }
  614|       |
  615|      0|    func register(_ functionName: String, argc: Int, value: Any) {
  616|      0|        if functions[functionName] == nil {
  617|      0|            functions[functionName] = [:] // fails on Linux, https://github.com/stephencelis/SQLite.swift/issues/1071
  618|      0|        }
  619|      0|        functions[functionName]?[argc] = value
  620|      0|    }
  621|       |
  622|       |    fileprivate typealias Function = @convention(block) (Context, Int32, Argv) -> Void
  623|      2|    fileprivate var functions = [String: [Int: Any]]()
  624|       |
  625|       |    /// Defines a new collating sequence.
  626|       |    ///
  627|       |    /// - Parameters:
  628|       |    ///
  629|       |    ///   - collation: The name of the collation added.
  630|       |    ///
  631|       |    ///   - block: A collation function that takes two strings and returns the
  632|       |    ///     comparison result.
  633|      0|    public func createCollation(_ collation: String, _ block: @escaping (_ lhs: String, _ rhs: String) -> ComparisonResult) throws {
  634|      0|        let box: Collation = { (lhs: UnsafeRawPointer, rhs: UnsafeRawPointer) in
  635|      0|            let lstr = String(cString: lhs.assumingMemoryBound(to: UInt8.self))
  636|      0|            let rstr = String(cString: rhs.assumingMemoryBound(to: UInt8.self))
  637|      0|            return Int32(block(lstr, rstr).rawValue)
  638|      0|        }
  639|      0|        try check(sqlite3_create_collation_v2(handle, collation, SQLITE_UTF8,
  640|      0|            unsafeBitCast(box, to: UnsafeMutableRawPointer.self), { (callback: UnsafeMutableRawPointer?, _,
  641|      0|                                                                     lhs: UnsafeRawPointer?, _, rhs: UnsafeRawPointer?) in /* xCompare */
  642|      0|            if let lhs = lhs, let rhs = rhs {
  643|      0|                return unsafeBitCast(callback, to: Collation.self)(lhs, rhs)
  644|      0|            } else {
  645|      0|                fatalError("sqlite3_create_collation_v2 callback called with NULL pointer")
  646|      0|            }
  647|      0|        }, nil /* xDestroy */))
  648|      0|        collations[collation] = box
  649|      0|    }
  650|       |    fileprivate typealias Collation = @convention(block) (UnsafeRawPointer, UnsafeRawPointer) -> Int32
  651|      2|    fileprivate var collations = [String: Collation]()
  652|       |
  653|       |    // MARK: - Backup
  654|       |
  655|       |    /// Prepares a new backup for current connection.
  656|       |    ///
  657|       |    /// - Parameters:
  658|       |    ///
  659|       |    ///   - databaseName: The name of the database to backup.
  660|       |    ///
  661|       |    ///     Default: `.main`
  662|       |    ///
  663|       |    ///   - targetConnection: The name of the database to save backup into.
  664|       |    ///
  665|       |    ///   - targetDatabaseName: The name of the database to save backup into.
  666|       |    ///
  667|       |    ///     Default: `.main`.
  668|       |    ///
  669|       |    /// - Returns: A new database backup.
  670|       |    public func backup(databaseName: Backup.DatabaseName = .main,
  671|       |                       usingConnection targetConnection: Connection,
  672|      0|                       andDatabaseName targetDatabaseName: Backup.DatabaseName = .main) throws -> Backup {
  673|      0|        try Backup(sourceConnection: self, sourceName: databaseName, targetConnection: targetConnection,
  674|      0|                   targetName: targetDatabaseName)
  675|      0|    }
  676|       |
  677|       |    // MARK: - Error Handling
  678|       |
  679|  2.58k|    func sync<T>(_ block: () throws -> T) rethrows -> T {
  680|  2.58k|        if DispatchQueue.getSpecific(key: Connection.queueKey) == queueContext {
  681|     18|            return try block()
  682|  2.56k|        } else {
  683|  2.56k|            return try queue.sync(execute: block)
  684|  2.56k|        }
  685|      0|    }
  686|       |
  687|  5.60k|    @discardableResult func check(_ resultCode: Int32, statement: Statement? = nil) throws -> Int32 {
  688|  5.60k|        guard let error = Result(errorCode: resultCode, connection: self, statement: statement) else {
  689|  5.60k|            return resultCode
  690|  5.60k|        }
  691|      0|
  692|      0|        throw error
  693|  5.60k|    }
  694|       |
  695|      2|    fileprivate var queue = DispatchQueue(label: "SQLite.Database", attributes: [])
  696|       |
  697|       |    fileprivate static let queueKey = DispatchSpecificKey<Int>()
  698|       |
  699|       |    fileprivate lazy var queueContext: Int = unsafeBitCast(self, to: Int.self)
  700|       |
  701|       |}
  702|       |
  703|       |extension Connection: CustomStringConvertible {
  704|       |
  705|      0|    public var description: String {
  706|      0|        String(cString: sqlite3_db_filename(handle, nil))
  707|      0|    }
  708|       |
  709|       |}
  710|       |
  711|       |extension Connection.Location: CustomStringConvertible {
  712|       |
  713|      2|    public var description: String {
  714|      2|        switch self {
  715|      2|        case .inMemory:
  716|      0|            return ":memory:"
  717|      2|        case .temporary:
  718|      0|            return ""
  719|      2|        case .uri(let URI):
  720|      2|            return URI
  721|      2|        }
  722|      2|    }
  723|       |
  724|       |}
  725|       |
  726|       |typealias Context = OpaquePointer?
  727|       |extension Context {
  728|      0|    func set(result: Binding?) {
  729|      0|        switch result {
  730|      0|        case let blob as Blob:
  731|      0|            sqlite3_result_blob(self, blob.bytes, Int32(blob.bytes.count), nil)
  732|      0|        case let double as Double:
  733|      0|            sqlite3_result_double(self, double)
  734|      0|        case let int as Int64:
  735|      0|            sqlite3_result_int64(self, int)
  736|      0|        case let string as String:
  737|      0|            sqlite3_result_text(self, string, Int32(string.lengthOfBytes(using: .utf8)), SQLITE_TRANSIENT)
  738|      0|        case .none:
  739|      0|            sqlite3_result_null(self)
  740|      0|        default:
  741|      0|            fatalError("unsupported result type: \(String(describing: result))")
  742|      0|        }
  743|      0|    }
  744|       |}
  745|       |
  746|       |typealias Argv = UnsafeMutablePointer<OpaquePointer?>?
  747|       |extension Argv {
  748|      0|    func getBindings(argc: Int32) -> [Binding?] {
  749|      0|        (0..<Int(argc)).map { idx in
  750|      0|            let value = self![idx]
  751|      0|            switch sqlite3_value_type(value) {
  752|      0|            case SQLITE_BLOB:
  753|      0|                return Blob(bytes: sqlite3_value_blob(value), length: Int(sqlite3_value_bytes(value)))
  754|      0|            case SQLITE_FLOAT:
  755|      0|                return sqlite3_value_double(value)
  756|      0|            case SQLITE_INTEGER:
  757|      0|                return sqlite3_value_int64(value)
  758|      0|            case SQLITE_NULL:
  759|      0|                return nil
  760|      0|            case SQLITE_TEXT:
  761|      0|                return String(cString: UnsafePointer(sqlite3_value_text(value)))
  762|      0|            case let type:
  763|      0|                fatalError("unsupported value type: \(type)")
  764|      0|            }
  765|      0|        }
  766|      0|    }
  767|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Core/Errors.swift:
    1|       |import Foundation
    2|       |
    3|       |public enum QueryError: Error, CustomStringConvertible {
    4|       |    case noSuchTable(name: String)
    5|       |    case noSuchColumn(name: String, columns: [String])
    6|       |    case ambiguousColumn(name: String, similar: [String])
    7|       |    case unexpectedNullValue(name: String)
    8|       |
    9|      0|    public var description: String {
   10|      0|        switch self {
   11|      0|        case .noSuchTable(let name):
   12|      0|            return "No such table: \(name)"
   13|      0|        case .noSuchColumn(let name, let columns):
   14|      0|            return "No such column `\(name)` in columns \(columns)"
   15|      0|        case .ambiguousColumn(let name, let similar):
   16|      0|            return "Ambiguous column `\(name)` (please disambiguate: \(similar))"
   17|      0|        case .unexpectedNullValue(let name):
   18|      0|            return "Unexpected null value for column `\(name)`"
   19|      0|        }
   20|      0|    }
   21|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Core/Result.swift:
    1|       |#if SQLITE_SWIFT_STANDALONE
    2|       |import sqlite3
    3|       |#elseif SQLITE_SWIFT_SQLCIPHER
    4|       |import SQLCipher
    5|       |#elseif os(Linux)
    6|       |import CSQLite
    7|       |#else
    8|       |import SQLite3
    9|       |#endif
   10|       |
   11|       |public enum Result: Error {
   12|       |
   13|       |    fileprivate static let successCodes: Set = [SQLITE_OK, SQLITE_ROW, SQLITE_DONE]
   14|       |
   15|       |    /// Represents a SQLite specific [error code](https://sqlite.org/rescode.html)
   16|       |    ///
   17|       |    /// - message: English-language text that describes the error
   18|       |    ///
   19|       |    /// - code: SQLite [error code](https://sqlite.org/rescode.html#primary_result_code_list)
   20|       |    ///
   21|       |    /// - statement: the statement which produced the error
   22|       |    case error(message: String, code: Int32, statement: Statement?)
   23|       |
   24|  5.60k|    init?(errorCode: Int32, connection: Connection, statement: Statement? = nil) {
   25|  5.60k|        guard !Result.successCodes.contains(errorCode) else { return nil }
   26|      0|
   27|      0|        let message = String(cString: sqlite3_errmsg(connection.handle))
   28|      0|        self = .error(message: message, code: errorCode, statement: statement)
   29|      0|    }
   30|       |
   31|       |}
   32|       |
   33|       |extension Result: CustomStringConvertible {
   34|       |
   35|      0|    public var description: String {
   36|      0|        switch self {
   37|      0|        case let .error(message, errorCode, statement):
   38|      0|            if let statement = statement {
   39|      0|                return "\(message) (\(statement)) (code: \(errorCode))"
   40|      0|            } else {
   41|      0|                return "\(message) (code: \(errorCode))"
   42|      0|            }
   43|      0|        }
   44|      0|    }
   45|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Core/Statement.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |#if SQLITE_SWIFT_STANDALONE
   26|       |import sqlite3
   27|       |#elseif SQLITE_SWIFT_SQLCIPHER
   28|       |import SQLCipher
   29|       |#elseif os(Linux)
   30|       |import CSQLite
   31|       |#else
   32|       |import SQLite3
   33|       |#endif
   34|       |
   35|       |/// A single SQL statement.
   36|       |public final class Statement {
   37|       |
   38|       |    fileprivate var handle: OpaquePointer?
   39|       |
   40|       |    fileprivate let connection: Connection
   41|       |
   42|  3.03k|    init(_ connection: Connection, _ SQL: String) throws {
   43|  3.03k|        self.connection = connection
   44|  3.03k|        try connection.check(sqlite3_prepare_v2(connection.handle, SQL, -1, &handle, nil))
   45|  3.03k|    }
   46|       |
   47|  3.03k|    deinit {
   48|  3.03k|        sqlite3_finalize(handle)
   49|  3.03k|    }
   50|       |
   51|       |    public lazy var columnCount: Int = Int(sqlite3_column_count(handle))
   52|       |
   53|  13.3k|    public lazy var columnNames: [String] = (0..<Int32(columnCount)).map {
   54|  13.3k|        String(cString: sqlite3_column_name(handle, $0))
   55|  13.3k|    }
   56|       |
   57|       |    /// A cursor pointing to the current row.
   58|       |    public lazy var row: Cursor = Cursor(self)
   59|       |
   60|       |    /// Binds a list of parameters to a statement.
   61|       |    ///
   62|       |    /// - Parameter values: A list of parameters to bind to the statement.
   63|       |    ///
   64|       |    /// - Returns: The statement object (useful for chaining).
   65|      0|    public func bind(_ values: Binding?...) -> Statement {
   66|      0|        bind(values)
   67|      0|    }
   68|       |
   69|       |    /// Binds a list of parameters to a statement.
   70|       |    ///
   71|       |    /// - Parameter values: A list of parameters to bind to the statement.
   72|       |    ///
   73|       |    /// - Returns: The statement object (useful for chaining).
   74|  3.03k|    public func bind(_ values: [Binding?]) -> Statement {
   75|  3.03k|        if values.isEmpty { return self }
   76|  1.53k|        reset()
   77|  1.53k|        guard values.count == Int(sqlite3_bind_parameter_count(handle)) else {
   78|      0|            fatalError("\(sqlite3_bind_parameter_count(handle)) values expected, \(values.count) passed")
   79|  1.53k|        }
   80|  1.62k|        for idx in 1...values.count { bind(values[idx - 1], atIndex: idx) }
   81|  1.53k|        return self
   82|  1.53k|    }
   83|       |
   84|       |    /// Binds a dictionary of named parameters to a statement.
   85|       |    ///
   86|       |    /// - Parameter values: A dictionary of named parameters to bind to the
   87|       |    ///   statement.
   88|       |    ///
   89|       |    /// - Returns: The statement object (useful for chaining).
   90|      0|    public func bind(_ values: [String: Binding?]) -> Statement {
   91|      0|        reset()
   92|      0|        for (name, value) in values {
   93|      0|            let idx = sqlite3_bind_parameter_index(handle, name)
   94|      0|            guard idx > 0 else {
   95|      0|                fatalError("parameter not found: \(name)")
   96|      0|            }
   97|      0|            bind(value, atIndex: Int(idx))
   98|      0|        }
   99|      0|        return self
  100|      0|    }
  101|       |
  102|  1.62k|    fileprivate func bind(_ value: Binding?, atIndex idx: Int) {
  103|  1.62k|        if value == nil {
  104|      0|            sqlite3_bind_null(handle, Int32(idx))
  105|  1.62k|        } else if let value = value as? Blob {
  106|      0|            sqlite3_bind_blob(handle, Int32(idx), value.bytes, Int32(value.bytes.count), SQLITE_TRANSIENT)
  107|  1.62k|        } else if let value = value as? Double {
  108|      0|            sqlite3_bind_double(handle, Int32(idx), value)
  109|  1.62k|        } else if let value = value as? Int64 {
  110|     72|            sqlite3_bind_int64(handle, Int32(idx), value)
  111|  1.62k|        } else if let value = value as? String {
  112|  1.54k|            sqlite3_bind_text(handle, Int32(idx), value, -1, SQLITE_TRANSIENT)
  113|  1.62k|        } else if let value = value as? Int {
  114|      0|            self.bind(value.datatypeValue, atIndex: idx)
  115|  1.62k|        } else if let value = value as? Bool {
  116|      0|            self.bind(value.datatypeValue, atIndex: idx)
  117|  1.62k|        } else if let value = value {
  118|      0|            fatalError("tried to bind unexpected value \(value)")
  119|  1.62k|        }
  120|  1.62k|    }
  121|       |
  122|       |    /// - Parameter bindings: A list of parameters to bind to the statement.
  123|       |    ///
  124|       |    /// - Throws: `Result.Error` if query execution fails.
  125|       |    ///
  126|       |    /// - Returns: The statement object (useful for chaining).
  127|     26|    @discardableResult public func run(_ bindings: Binding?...) throws -> Statement {
  128|     26|        guard bindings.isEmpty else {
  129|      0|            return try run(bindings)
  130|     26|        }
  131|     26|
  132|     26|        reset(clearBindings: false)
  133|     26|        repeat {} while try step()
  134|     26|        return self
  135|     26|    }
  136|       |
  137|       |    /// - Parameter bindings: A list of parameters to bind to the statement.
  138|       |    ///
  139|       |    /// - Throws: `Result.Error` if query execution fails.
  140|       |    ///
  141|       |    /// - Returns: The statement object (useful for chaining).
  142|     26|    @discardableResult public func run(_ bindings: [Binding?]) throws -> Statement {
  143|     26|        try bind(bindings).run()
  144|     26|    }
  145|       |
  146|       |    /// - Parameter bindings: A dictionary of named parameters to bind to the
  147|       |    ///   statement.
  148|       |    ///
  149|       |    /// - Throws: `Result.Error` if query execution fails.
  150|       |    ///
  151|       |    /// - Returns: The statement object (useful for chaining).
  152|      0|    @discardableResult public func run(_ bindings: [String: Binding?]) throws -> Statement {
  153|      0|        try bind(bindings).run()
  154|      0|    }
  155|       |
  156|       |    /// - Parameter bindings: A list of parameters to bind to the statement.
  157|       |    ///
  158|       |    /// - Returns: The first value of the first row returned.
  159|     36|    public func scalar(_ bindings: Binding?...) throws -> Binding? {
  160|     36|        guard bindings.isEmpty else {
  161|      0|            return try scalar(bindings)
  162|     36|        }
  163|     36|
  164|     36|        reset(clearBindings: false)
  165|     36|        _ = try step()
  166|     36|        return row[0]
  167|     36|    }
  168|       |
  169|       |    /// - Parameter bindings: A list of parameters to bind to the statement.
  170|       |    ///
  171|       |    /// - Returns: The first value of the first row returned.
  172|     36|    public func scalar(_ bindings: [Binding?]) throws -> Binding? {
  173|     36|        try bind(bindings).scalar()
  174|     36|    }
  175|       |
  176|       |    /// - Parameter bindings: A dictionary of named parameters to bind to the
  177|       |    ///   statement.
  178|       |    ///
  179|       |    /// - Returns: The first value of the first row returned.
  180|      0|    public func scalar(_ bindings: [String: Binding?]) throws -> Binding? {
  181|      0|        try bind(bindings).scalar()
  182|      0|    }
  183|       |
  184|  2.56k|    public func step() throws -> Bool {
  185|  2.56k|        try connection.sync { try connection.check(sqlite3_step(handle)) == SQLITE_ROW }
  186|  2.56k|    }
  187|       |
  188|  1.59k|    fileprivate func reset(clearBindings shouldClear: Bool = true) {
  189|  1.59k|        sqlite3_reset(handle)
  190|  1.59k|        if shouldClear { sqlite3_clear_bindings(handle) }
  191|  1.59k|    }
  192|       |
  193|       |}
  194|       |
  195|       |extension Statement: Sequence {
  196|       |
  197|      0|    public func makeIterator() -> Statement {
  198|      0|        reset(clearBindings: false)
  199|      0|        return self
  200|      0|    }
  201|       |
  202|       |}
  203|       |
  204|       |public protocol FailableIterator: IteratorProtocol {
  205|       |    func failableNext() throws -> Self.Element?
  206|       |}
  207|       |
  208|       |extension FailableIterator {
  209|  2.50k|    public func next() -> Element? {
  210|  2.50k|        // swiftlint:disable:next force_try
  211|  2.50k|        try! failableNext()
  212|  2.50k|    }
  213|       |}
  214|       |
  215|       |extension Array {
  216|      0|    public init<I: FailableIterator>(_ failableIterator: I) throws where I.Element == Element {
  217|      0|        self.init()
  218|      0|        while let row = try failableIterator.failableNext() {
  219|      0|            append(row)
  220|      0|        }
  221|      0|    }
  222|       |}
  223|       |
  224|       |extension Statement: FailableIterator {
  225|       |    public typealias Element = [Binding?]
  226|  2.50k|    public func failableNext() throws -> [Binding?]? {
  227|  2.50k|        try step() ? Array(row) : nil
  228|  2.50k|    }
  229|       |}
  230|       |
  231|       |extension Statement: CustomStringConvertible {
  232|       |
  233|      0|    public var description: String {
  234|      0|        String(cString: sqlite3_sql(handle))
  235|      0|    }
  236|       |
  237|       |}
  238|       |
  239|       |public struct Cursor {
  240|       |
  241|       |    fileprivate let handle: OpaquePointer
  242|       |
  243|       |    fileprivate let columnCount: Int
  244|       |
  245|  1.50k|    fileprivate init(_ statement: Statement) {
  246|  1.50k|        handle = statement.handle!
  247|  1.50k|        columnCount = statement.columnCount
  248|  1.50k|    }
  249|       |
  250|      0|    public subscript(idx: Int) -> Double {
  251|      0|        sqlite3_column_double(handle, Int32(idx))
  252|      0|    }
  253|       |
  254|  8.70k|    public subscript(idx: Int) -> Int64 {
  255|  8.70k|        sqlite3_column_int64(handle, Int32(idx))
  256|  8.70k|    }
  257|       |
  258|  15.4k|    public subscript(idx: Int) -> String {
  259|  15.4k|        String(cString: UnsafePointer(sqlite3_column_text(handle, Int32(idx))))
  260|  15.4k|    }
  261|       |
  262|      0|    public subscript(idx: Int) -> Blob {
  263|      0|        if let pointer = sqlite3_column_blob(handle, Int32(idx)) {
  264|      0|            let length = Int(sqlite3_column_bytes(handle, Int32(idx)))
  265|      0|            return Blob(bytes: pointer, length: length)
  266|      0|        } else {
  267|      0|            // The return value from sqlite3_column_blob() for a zero-length BLOB is a NULL pointer.
  268|      0|            // https://www.sqlite.org/c3ref/column_blob.html
  269|      0|            return Blob(bytes: [])
  270|      0|        }
  271|      0|    }
  272|       |
  273|       |    // MARK: -
  274|       |
  275|      0|    public subscript(idx: Int) -> Bool {
  276|      0|        Bool.fromDatatypeValue(self[idx])
  277|      0|    }
  278|       |
  279|      0|    public subscript(idx: Int) -> Int {
  280|      0|        Int.fromDatatypeValue(self[idx])
  281|      0|    }
  282|       |
  283|       |}
  284|       |
  285|       |/// Cursors provide direct access to a statement’s current row.
  286|       |extension Cursor: Sequence {
  287|       |
  288|  24.1k|    public subscript(idx: Int) -> Binding? {
  289|  24.1k|        switch sqlite3_column_type(handle, Int32(idx)) {
  290|  24.1k|        case SQLITE_BLOB:
  291|      0|            return self[idx] as Blob
  292|  24.1k|        case SQLITE_FLOAT:
  293|      0|            return self[idx] as Double
  294|  24.1k|        case SQLITE_INTEGER:
  295|  8.70k|            return self[idx] as Int64
  296|  24.1k|        case SQLITE_NULL:
  297|      0|            return nil
  298|  24.1k|        case SQLITE_TEXT:
  299|  15.4k|            return self[idx] as String
  300|  24.1k|        case let type:
  301|      0|            fatalError("unsupported column type: \(type)")
  302|  24.1k|        }
  303|  24.1k|    }
  304|       |
  305|  2.47k|    public func makeIterator() -> AnyIterator<Binding?> {
  306|  2.47k|        var idx = 0
  307|  26.5k|        return AnyIterator {
  308|  26.5k|            if idx >= columnCount {
  309|  2.47k|                return .none
  310|  24.0k|            } else {
  311|  24.0k|                idx += 1
  312|  24.0k|                return self[idx - 1]
  313|  24.0k|            }
  314|      0|        }
  315|  2.47k|    }
  316|       |
  317|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Core/Value.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |/// - Warning: `Binding` is a protocol that SQLite.swift uses internally to
   26|       |///   directly map SQLite types to Swift types.
   27|       |///
   28|       |///   Do not conform custom types to the Binding protocol. See the `Value`
   29|       |///   protocol, instead.
   30|       |public protocol Binding {}
   31|       |
   32|       |public protocol Number: Binding {}
   33|       |
   34|       |public protocol Value: Expressible { // extensions cannot have inheritance clauses
   35|       |
   36|       |    associatedtype ValueType = Self
   37|       |
   38|       |    associatedtype Datatype: Binding
   39|       |
   40|       |    static var declaredDatatype: String { get }
   41|       |
   42|       |    static func fromDatatypeValue(_ datatypeValue: Datatype) -> ValueType
   43|       |
   44|       |    var datatypeValue: Datatype { get }
   45|       |
   46|       |}
   47|       |
   48|       |extension Double: Number, Value {
   49|       |
   50|       |    public static let declaredDatatype = "REAL"
   51|       |
   52|      0|    public static func fromDatatypeValue(_ datatypeValue: Double) -> Double {
   53|      0|        datatypeValue
   54|      0|    }
   55|       |
   56|      0|    public var datatypeValue: Double {
   57|      0|        self
   58|      0|    }
   59|       |
   60|       |}
   61|       |
   62|       |extension Int64: Number, Value {
   63|       |
   64|       |    public static let declaredDatatype = "INTEGER"
   65|       |
   66|  2.25k|    public static func fromDatatypeValue(_ datatypeValue: Int64) -> Int64 {
   67|  2.25k|        datatypeValue
   68|  2.25k|    }
   69|       |
   70|      4|    public var datatypeValue: Int64 {
   71|      4|        self
   72|      4|    }
   73|       |
   74|       |}
   75|       |
   76|       |extension String: Binding, Value {
   77|       |
   78|       |    public static let declaredDatatype = "TEXT"
   79|       |
   80|  15.4k|    public static func fromDatatypeValue(_ datatypeValue: String) -> String {
   81|  15.4k|        datatypeValue
   82|  15.4k|    }
   83|       |
   84|  1.60k|    public var datatypeValue: String {
   85|  1.60k|        self
   86|  1.60k|    }
   87|       |
   88|       |}
   89|       |
   90|       |extension Blob: Binding, Value {
   91|       |
   92|       |    public static let declaredDatatype = "BLOB"
   93|       |
   94|      0|    public static func fromDatatypeValue(_ datatypeValue: Blob) -> Blob {
   95|      0|        datatypeValue
   96|      0|    }
   97|       |
   98|      0|    public var datatypeValue: Blob {
   99|      0|        self
  100|      0|    }
  101|       |
  102|       |}
  103|       |
  104|       |// MARK: -
  105|       |
  106|       |extension Bool: Binding, Value {
  107|       |
  108|       |    public static var declaredDatatype = Int64.declaredDatatype
  109|       |
  110|    946|    public static func fromDatatypeValue(_ datatypeValue: Int64) -> Bool {
  111|    946|        datatypeValue != 0
  112|    946|    }
  113|       |
  114|     58|    public var datatypeValue: Int64 {
  115|     58|        self ? 1 : 0
  116|     58|    }
  117|       |
  118|       |}
  119|       |
  120|       |extension Int: Number, Value {
  121|       |
  122|       |    public static var declaredDatatype = Int64.declaredDatatype
  123|       |
  124|  5.49k|    public static func fromDatatypeValue(_ datatypeValue: Int64) -> Int {
  125|  5.49k|        Int(datatypeValue)
  126|  5.49k|    }
  127|       |
  128|     42|    public var datatypeValue: Int64 {
  129|     42|        Int64(self)
  130|     42|    }
  131|       |
  132|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Extensions/FTS4.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |#if SWIFT_PACKAGE
   26|       |import SQLiteObjc
   27|       |#endif
   28|       |
   29|       |extension Module {
   30|       |
   31|      0|    public static func FTS4(_ column: Expressible, _ more: Expressible...) -> Module {
   32|      0|        FTS4([column] + more)
   33|      0|    }
   34|       |
   35|      0|    public static func FTS4(_ columns: [Expressible] = [], tokenize tokenizer: Tokenizer? = nil) -> Module {
   36|      0|        FTS4(FTS4Config().columns(columns).tokenizer(tokenizer))
   37|      0|    }
   38|       |
   39|      0|    public static func FTS4(_ config: FTS4Config) -> Module {
   40|      0|        Module(name: "fts4", arguments: config.arguments())
   41|      0|    }
   42|       |}
   43|       |
   44|       |extension VirtualTable {
   45|       |
   46|       |    /// Builds an expression appended with a `MATCH` query against the given
   47|       |    /// pattern.
   48|       |    ///
   49|       |    ///     let emails = VirtualTable("emails")
   50|       |    ///
   51|       |    ///     emails.filter(emails.match("Hello"))
   52|       |    ///     // SELECT * FROM "emails" WHERE "emails" MATCH 'Hello'
   53|       |    ///
   54|       |    /// - Parameter pattern: A pattern to match.
   55|       |    ///
   56|       |    /// - Returns: An expression appended with a `MATCH` query against the given
   57|       |    ///   pattern.
   58|      0|    public func match(_ pattern: String) -> Expression<Bool> {
   59|      0|        "MATCH".infix(tableName(), pattern)
   60|      0|    }
   61|       |
   62|      0|    public func match(_ pattern: Expression<String>) -> Expression<Bool> {
   63|      0|        "MATCH".infix(tableName(), pattern)
   64|      0|    }
   65|       |
   66|      0|    public func match(_ pattern: Expression<String?>) -> Expression<Bool?> {
   67|      0|        "MATCH".infix(tableName(), pattern)
   68|      0|    }
   69|       |
   70|       |    /// Builds a copy of the query with a `WHERE … MATCH` clause.
   71|       |    ///
   72|       |    ///     let emails = VirtualTable("emails")
   73|       |    ///
   74|       |    ///     emails.match("Hello")
   75|       |    ///     // SELECT * FROM "emails" WHERE "emails" MATCH 'Hello'
   76|       |    ///
   77|       |    /// - Parameter pattern: A pattern to match.
   78|       |    ///
   79|       |    /// - Returns: A query with the given `WHERE … MATCH` clause applied.
   80|      0|    public func match(_ pattern: String) -> QueryType {
   81|      0|        filter(match(pattern))
   82|      0|    }
   83|       |
   84|      0|    public func match(_ pattern: Expression<String>) -> QueryType {
   85|      0|        filter(match(pattern))
   86|      0|    }
   87|       |
   88|      0|    public func match(_ pattern: Expression<String?>) -> QueryType {
   89|      0|        filter(match(pattern))
   90|      0|    }
   91|       |
   92|       |}
   93|       |
   94|       |// swiftlint:disable identifier_name
   95|       |public struct Tokenizer {
   96|       |
   97|       |    public static let Simple = Tokenizer("simple")
   98|       |    public static let Porter = Tokenizer("porter")
   99|       |
  100|       |    public static func Unicode61(removeDiacritics: Bool? = nil,
  101|       |                                 tokenchars: Set<Character> = [],
  102|      0|                                 separators: Set<Character> = []) -> Tokenizer {
  103|      0|        var arguments = [String]()
  104|      0|
  105|      0|        if let removeDiacritics = removeDiacritics {
  106|      0|            arguments.append("removeDiacritics=\(removeDiacritics ? 1 : 0)".quote())
  107|      0|        }
  108|      0|
  109|      0|        if !tokenchars.isEmpty {
  110|      0|            let joined = tokenchars.map { String($0) }.joined(separator: "")
  111|      0|            arguments.append("tokenchars=\(joined)".quote())
  112|      0|        }
  113|      0|
  114|      0|        if !separators.isEmpty {
  115|      0|            let joined = separators.map { String($0) }.joined(separator: "")
  116|      0|            arguments.append("separators=\(joined)".quote())
  117|      0|        }
  118|      0|
  119|      0|        return Tokenizer("unicode61", arguments)
  120|      0|    }
  121|       |
  122|       |    // https://sqlite.org/fts5.html#the_experimental_trigram_tokenizer
  123|      0|    public static func Trigram(caseSensitive: Bool = false) -> Tokenizer {
  124|      0|        return Tokenizer("trigram", ["case_sensitive", caseSensitive ? "1" : "0"])
  125|      0|    }
  126|       |
  127|      0|    public static func Custom(_ name: String) -> Tokenizer {
  128|      0|        Tokenizer(Tokenizer.moduleName.quote(), [name.quote()])
  129|      0|    }
  130|       |
  131|       |    public let name: String
  132|       |
  133|       |    public let arguments: [String]
  134|       |
  135|      0|    fileprivate init(_ name: String, _ arguments: [String] = []) {
  136|      0|        self.name = name
  137|      0|        self.arguments = arguments
  138|      0|    }
  139|       |
  140|       |    fileprivate static let moduleName = "SQLite.swift"
  141|       |
  142|       |}
  143|       |
  144|       |extension Tokenizer: CustomStringConvertible {
  145|       |
  146|      0|    public var description: String {
  147|      0|        ([name] + arguments).joined(separator: " ")
  148|      0|    }
  149|       |
  150|       |}
  151|       |
  152|       |extension Connection {
  153|       |
  154|      0|    public func registerTokenizer(_ submoduleName: String, next: @escaping (String) -> (String, Range<String.Index>)?) throws {
  155|      0|        try check(_SQLiteRegisterTokenizer(handle, Tokenizer.moduleName, submoduleName) {
  156|      0|            (input: UnsafePointer<Int8>, offset: UnsafeMutablePointer<Int32>, length: UnsafeMutablePointer<Int32>) in
  157|      0|            let string = String(cString: input)
  158|      0|
  159|      0|            guard let (token, range) = next(string) else { return nil }
  160|      0|
  161|      0|            let view: String.UTF8View = string.utf8
  162|      0|
  163|      0|            if let from = range.lowerBound.samePosition(in: view),
  164|      0|               let to = range.upperBound.samePosition(in: view) {
  165|      0|                offset.pointee += Int32(string[string.startIndex..<range.lowerBound].utf8.count)
  166|      0|                length.pointee = Int32(view.distance(from: from, to: to))
  167|      0|                return token
  168|      0|            } else {
  169|      0|                return nil
  170|      0|            }
  171|      0|        })
  172|      0|    }
  173|       |}
  174|       |
  175|       |/// Configuration options shared between the [FTS4](https://www.sqlite.org/fts3.html) and
  176|       |/// [FTS5](https://www.sqlite.org/fts5.html) extensions.
  177|       |open class FTSConfig {
  178|       |    public enum ColumnOption {
  179|       |        /// [The notindexed= option](https://www.sqlite.org/fts3.html#section_6_5)
  180|       |        case unindexed
  181|       |    }
  182|       |
  183|       |    typealias ColumnDefinition = (Expressible, options: [ColumnOption])
  184|      0|    var columnDefinitions = [ColumnDefinition]()
  185|       |    var tokenizer: Tokenizer?
  186|      0|    var prefixes = [Int]()
  187|       |    var externalContentSchema: SchemaType?
  188|       |    var isContentless: Bool = false
  189|       |
  190|       |    /// Adds a column definition
  191|      0|    @discardableResult open func column(_ column: Expressible, _ options: [ColumnOption] = []) -> Self {
  192|      0|        columnDefinitions.append((column, options))
  193|      0|        return self
  194|      0|    }
  195|       |
  196|      0|    @discardableResult open func columns(_ columns: [Expressible]) -> Self {
  197|      0|        for column in columns {
  198|      0|            self.column(column)
  199|      0|        }
  200|      0|        return self
  201|      0|    }
  202|       |
  203|       |    /// [Tokenizers](https://www.sqlite.org/fts3.html#tokenizer)
  204|      0|    @discardableResult open func tokenizer(_ tokenizer: Tokenizer?) -> Self {
  205|      0|        self.tokenizer = tokenizer
  206|      0|        return self
  207|      0|    }
  208|       |
  209|       |    /// [The prefix= option](https://www.sqlite.org/fts3.html#section_6_6)
  210|      0|    @discardableResult open func prefix(_ prefix: [Int]) -> Self {
  211|      0|        prefixes += prefix
  212|      0|        return self
  213|      0|    }
  214|       |
  215|       |    /// [The content= option](https://www.sqlite.org/fts3.html#section_6_2)
  216|      0|    @discardableResult open func externalContent(_ schema: SchemaType) -> Self {
  217|      0|        externalContentSchema = schema
  218|      0|        return self
  219|      0|    }
  220|       |
  221|       |    /// [Contentless FTS4 Tables](https://www.sqlite.org/fts3.html#section_6_2_1)
  222|      0|    @discardableResult open func contentless() -> Self {
  223|      0|        isContentless = true
  224|      0|        return self
  225|      0|    }
  226|       |
  227|      0|    func formatColumnDefinitions() -> [Expressible] {
  228|      0|        columnDefinitions.map { $0.0 }
  229|      0|    }
  230|       |
  231|      0|    func arguments() -> [Expressible] {
  232|      0|        options().arguments
  233|      0|    }
  234|       |
  235|      0|    func options() -> Options {
  236|      0|        var options = Options()
  237|      0|        options.append(formatColumnDefinitions())
  238|      0|        if let tokenizer = tokenizer {
  239|      0|            options.append("tokenize", value: Expression<Void>(literal: tokenizer.description))
  240|      0|        }
  241|      0|        options.appendCommaSeparated("prefix", values: prefixes.sorted().map { String($0) })
  242|      0|        if isContentless {
  243|      0|            options.append("content", value: "")
  244|      0|        } else if let externalContentSchema = externalContentSchema {
  245|      0|            options.append("content", value: externalContentSchema.tableName())
  246|      0|        }
  247|      0|        return options
  248|      0|    }
  249|       |
  250|       |    struct Options {
  251|      0|        var arguments = [Expressible]()
  252|       |
  253|      0|        @discardableResult mutating func append(_ columns: [Expressible]) -> Options {
  254|      0|            arguments.append(contentsOf: columns)
  255|      0|            return self
  256|      0|        }
  257|       |
  258|      0|        @discardableResult mutating func appendCommaSeparated(_ key: String, values: [String]) -> Options {
  259|      0|            if values.isEmpty {
  260|      0|                return self
  261|      0|            } else {
  262|      0|                return append(key, value: values.joined(separator: ","))
  263|      0|            }
  264|      0|        }
  265|       |
  266|      0|        @discardableResult mutating func append(_ key: String, value: CustomStringConvertible?) -> Options {
  267|      0|            append(key, value: value?.description)
  268|      0|        }
  269|       |
  270|      0|        @discardableResult mutating func append(_ key: String, value: String?) -> Options {
  271|      0|            append(key, value: value.map { Expression<String>($0) })
  272|      0|        }
  273|       |
  274|      0|        @discardableResult mutating func append(_ key: String, value: Expressible?) -> Options {
  275|      0|            if let value = value {
  276|      0|                arguments.append("=".join([Expression<Void>(literal: key), value]))
  277|      0|            }
  278|      0|            return self
  279|      0|        }
  280|       |    }
  281|       |}
  282|       |
  283|       |/// Configuration for the [FTS4](https://www.sqlite.org/fts3.html) extension.
  284|       |open class FTS4Config: FTSConfig {
  285|       |    /// [The matchinfo= option](https://www.sqlite.org/fts3.html#section_6_4)
  286|       |    public enum MatchInfo: CustomStringConvertible {
  287|       |        case fts3
  288|      0|        public var description: String {
  289|      0|            "fts3"
  290|      0|        }
  291|       |    }
  292|       |
  293|       |    /// [FTS4 options](https://www.sqlite.org/fts3.html#fts4_options)
  294|       |    public enum Order: CustomStringConvertible {
  295|       |        /// Data structures are optimized for returning results in ascending order by docid (default)
  296|       |        case asc
  297|       |        /// FTS4 stores its data in such a way as to optimize returning results in descending order by docid.
  298|       |        case desc
  299|       |
  300|      0|        public var description: String {
  301|      0|            switch self {
  302|      0|            case .asc: return "asc"
  303|      0|            case .desc: return "desc"
  304|      0|            }
  305|      0|        }
  306|       |    }
  307|       |
  308|       |    var compressFunction: String?
  309|       |    var uncompressFunction: String?
  310|       |    var languageId: String?
  311|       |    var matchInfo: MatchInfo?
  312|       |    var order: Order?
  313|       |
  314|      0|    override public init() {
  315|      0|    }
  316|       |
  317|       |    /// [The compress= and uncompress= options](https://www.sqlite.org/fts3.html#section_6_1)
  318|      0|    @discardableResult open func compress(_ functionName: String) -> Self {
  319|      0|        compressFunction = functionName
  320|      0|        return self
  321|      0|    }
  322|       |
  323|       |    /// [The compress= and uncompress= options](https://www.sqlite.org/fts3.html#section_6_1)
  324|      0|    @discardableResult open func uncompress(_ functionName: String) -> Self {
  325|      0|        uncompressFunction = functionName
  326|      0|        return self
  327|      0|    }
  328|       |
  329|       |    /// [The languageid= option](https://www.sqlite.org/fts3.html#section_6_3)
  330|      0|    @discardableResult open func languageId(_ columnName: String) -> Self {
  331|      0|        languageId = columnName
  332|      0|        return self
  333|      0|    }
  334|       |
  335|       |    /// [The matchinfo= option](https://www.sqlite.org/fts3.html#section_6_4)
  336|      0|    @discardableResult open func matchInfo(_ matchInfo: MatchInfo) -> Self {
  337|      0|        self.matchInfo = matchInfo
  338|      0|        return self
  339|      0|    }
  340|       |
  341|       |    /// [FTS4 options](https://www.sqlite.org/fts3.html#fts4_options)
  342|      0|    @discardableResult open func order(_ order: Order) -> Self {
  343|      0|        self.order = order
  344|      0|        return self
  345|      0|    }
  346|       |
  347|      0|    override func options() -> Options {
  348|      0|        var options = super.options()
  349|      0|        for (column, _) in (columnDefinitions.filter { $0.options.contains(.unindexed) }) {
  350|      0|            options.append("notindexed", value: column)
  351|      0|        }
  352|      0|        options.append("languageid", value: languageId)
  353|      0|        options.append("compress", value: compressFunction)
  354|      0|        options.append("uncompress", value: uncompressFunction)
  355|      0|        options.append("matchinfo", value: matchInfo)
  356|      0|        options.append("order", value: order)
  357|      0|        return options
  358|      0|    }
  359|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Extensions/FTS5.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |extension Module {
   26|      0|    public static func FTS5(_ config: FTS5Config) -> Module {
   27|      0|        Module(name: "fts5", arguments: config.arguments())
   28|      0|    }
   29|       |}
   30|       |
   31|       |/// Configuration for the [FTS5](https://www.sqlite.org/fts5.html) extension.
   32|       |///
   33|       |/// **Note:** this is currently only applicable when using SQLite.swift together with a FTS5-enabled version
   34|       |/// of SQLite.
   35|       |open class FTS5Config: FTSConfig {
   36|       |    public enum Detail: CustomStringConvertible {
   37|       |        /// store rowid, column number, term offset
   38|       |        case full
   39|       |        /// store rowid, column number
   40|       |        case column
   41|       |        /// store rowid
   42|       |        case none
   43|       |
   44|      0|        public var description: String {
   45|      0|            switch self {
   46|      0|            case .full: return "full"
   47|      0|            case .column: return "column"
   48|      0|            case .none: return "none"
   49|      0|            }
   50|      0|        }
   51|       |    }
   52|       |
   53|       |    var detail: Detail?
   54|       |    var contentRowId: Expressible?
   55|       |    var columnSize: Int?
   56|       |
   57|      0|    override public init() {
   58|      0|    }
   59|       |
   60|       |    /// [External Content Tables](https://www.sqlite.org/fts5.html#section_4_4_2)
   61|      0|    @discardableResult open func contentRowId(_ column: Expressible) -> Self {
   62|      0|        contentRowId = column
   63|      0|        return self
   64|      0|    }
   65|       |
   66|       |    /// [The Columnsize Option](https://www.sqlite.org/fts5.html#section_4_5)
   67|      0|    @discardableResult open func columnSize(_ size: Int) -> Self {
   68|      0|        columnSize = size
   69|      0|        return self
   70|      0|    }
   71|       |
   72|       |    /// [The Detail Option](https://www.sqlite.org/fts5.html#section_4_6)
   73|      0|    @discardableResult open func detail(_ detail: Detail) -> Self {
   74|      0|        self.detail = detail
   75|      0|        return self
   76|      0|    }
   77|       |
   78|      0|    override func options() -> Options {
   79|      0|        var options = super.options()
   80|      0|        options.append("content_rowid", value: contentRowId)
   81|      0|        if let columnSize = columnSize {
   82|      0|            options.append("columnsize", value: Expression<Int>(value: columnSize))
   83|      0|        }
   84|      0|        options.append("detail", value: detail)
   85|      0|        return options
   86|      0|    }
   87|       |
   88|      0|    override func formatColumnDefinitions() -> [Expressible] {
   89|      0|        columnDefinitions.map { definition in
   90|      0|            if definition.options.contains(.unindexed) {
   91|      0|                return " ".join([definition.0, Expression<Void>(literal: "UNINDEXED")])
   92|      0|            } else {
   93|      0|                return definition.0
   94|      0|            }
   95|      0|        }
   96|      0|    }
   97|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Extensions/RTree.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |extension Module {
   26|       |    public static func RTree<T: Value, U: Value>(_ primaryKey: Expression<T>,
   27|       |                                                 _ pairs: (Expression<U>, Expression<U>)...)
   28|      0|                    -> Module where T.Datatype == Int64, U.Datatype == Double {
   29|      0|        var arguments: [Expressible] = [primaryKey]
   30|      0|
   31|      0|        for pair in pairs {
   32|      0|            arguments.append(contentsOf: [pair.0, pair.1] as [Expressible])
   33|      0|        }
   34|      0|
   35|      0|        return Module(name: "rtree", arguments: arguments)
   36|      0|    }
   37|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Foundation.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |import Foundation
   26|       |
   27|       |extension Data: Value {
   28|       |
   29|      0|    public static var declaredDatatype: String {
   30|      0|        Blob.declaredDatatype
   31|      0|    }
   32|       |
   33|      0|    public static func fromDatatypeValue(_ dataValue: Blob) -> Data {
   34|      0|        Data(dataValue.bytes)
   35|      0|    }
   36|       |
   37|      0|    public var datatypeValue: Blob {
   38|      0|        withUnsafeBytes { (pointer: UnsafeRawBufferPointer) -> Blob in
   39|      0|            Blob(bytes: pointer.baseAddress!, length: count)
   40|      0|        }
   41|      0|    }
   42|       |
   43|       |}
   44|       |
   45|       |extension Date: Value {
   46|       |
   47|      0|    public static var declaredDatatype: String {
   48|      0|        String.declaredDatatype
   49|      0|    }
   50|       |
   51|      0|    public static func fromDatatypeValue(_ stringValue: String) -> Date {
   52|      0|        dateFormatter.date(from: stringValue)!
   53|      0|    }
   54|       |
   55|      0|    public var datatypeValue: String {
   56|      0|        dateFormatter.string(from: self)
   57|      0|    }
   58|       |
   59|       |}
   60|       |
   61|       |/// A global date formatter used to serialize and deserialize `NSDate` objects.
   62|       |/// If multiple date formats are used in an application’s database(s), use a
   63|       |/// custom `Value` type per additional format.
   64|      0|public var dateFormatter: DateFormatter = {
   65|      0|    let formatter = DateFormatter()
   66|      0|    formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSS"
   67|      0|    formatter.locale = Locale(identifier: "en_US_POSIX")
   68|      0|    formatter.timeZone = TimeZone(secondsFromGMT: 0)
   69|      0|    return formatter
   70|      0|}()
   71|       |
   72|       |extension UUID: Value {
   73|       |
   74|      0|    public static var declaredDatatype: String {
   75|      0|        String.declaredDatatype
   76|      0|    }
   77|       |
   78|      0|    public static func fromDatatypeValue(_ stringValue: String) -> UUID {
   79|      0|        UUID(uuidString: stringValue)!
   80|      0|    }
   81|       |
   82|      0|    public var datatypeValue: String {
   83|      0|        uuidString
   84|      0|    }
   85|       |
   86|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Helpers.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |#if SQLITE_SWIFT_STANDALONE
   26|       |import sqlite3
   27|       |#elseif SQLITE_SWIFT_SQLCIPHER
   28|       |import SQLCipher
   29|       |#elseif os(Linux)
   30|       |import CSQLite
   31|       |#else
   32|       |import SQLite3
   33|       |#endif
   34|       |
   35|       |public typealias Star = (Expression<Binding>?, Expression<Binding>?) -> Expression<Void>
   36|       |
   37|     36|public func *(_: Expression<Binding>?, _: Expression<Binding>?) -> Expression<Void> {
   38|     36|    Expression(literal: "*")
   39|     36|}
   40|       |
   41|       |public protocol _OptionalType {
   42|       |
   43|       |    associatedtype WrappedType
   44|       |
   45|       |}
   46|       |
   47|       |extension Optional: _OptionalType {
   48|       |
   49|       |    public typealias WrappedType = Wrapped
   50|       |
   51|       |}
   52|       |
   53|       |// let SQLITE_STATIC = unsafeBitCast(0, sqlite3_destructor_type.self)
   54|       |let SQLITE_TRANSIENT = unsafeBitCast(-1, to: sqlite3_destructor_type.self)
   55|       |
   56|       |extension String {
   57|       |
   58|  16.4k|    func quote(_ mark: Character = "\"") -> String {
   59|   109k|        let escaped = reduce("") { string, character in
   60|   109k|            string + (character == mark ? "\(mark)\(mark)" : "\(character)")
   61|   109k|        }
   62|  16.4k|        return "\(mark)\(escaped)\(mark)"
   63|  16.4k|    }
   64|       |
   65|  12.3k|    func join(_ expressions: [Expressible]) -> Expressible {
   66|  12.3k|        var (template, bindings) = ([String](), [Binding?]())
   67|  26.4k|        for expressible in expressions {
   68|  26.4k|            let expression = expressible.expression
   69|  26.4k|            template.append(expression.template)
   70|  26.4k|            bindings.append(contentsOf: expression.bindings)
   71|  26.4k|        }
   72|  12.3k|        return Expression<Void>(template.joined(separator: self), bindings)
   73|  12.3k|    }
   74|       |
   75|  1.60k|    func infix<T>(_ lhs: Expressible, _ rhs: Expressible, wrap: Bool = true) -> Expression<T> {
   76|  1.60k|        infix([lhs, rhs], wrap: wrap)
   77|  1.60k|    }
   78|       |
   79|  1.60k|    func infix<T>(_ terms: [Expressible], wrap: Bool = true) -> Expression<T> {
   80|  1.60k|        let expression = Expression<T>(" \(self) ".join(terms).expression)
   81|  1.60k|        guard wrap else {
   82|      0|            return expression
   83|  1.60k|        }
   84|  1.60k|        return "".wrap(expression)
   85|  1.60k|    }
   86|       |
   87|     46|    func prefix(_ expressions: Expressible) -> Expressible {
   88|     46|        "\(self) ".wrap(expressions) as Expression<Void>
   89|     46|    }
   90|       |
   91|      0|    func prefix(_ expressions: [Expressible]) -> Expressible {
   92|      0|        "\(self) ".wrap(expressions) as Expression<Void>
   93|      0|    }
   94|       |
   95|  1.69k|    func wrap<T>(_ expression: Expressible) -> Expression<T> {
   96|  1.69k|        Expression("\(self)(\(expression.expression.template))", expression.expression.bindings)
   97|  1.69k|    }
   98|       |
   99|      8|    func wrap<T>(_ expressions: [Expressible]) -> Expression<T> {
  100|      8|        wrap(", ".join(expressions))
  101|      8|    }
  102|       |
  103|       |}
  104|       |
  105|     46|func transcode(_ literal: Binding?) -> String {
  106|     46|    guard let literal = literal else { return "NULL" }
  107|     46|
  108|     46|    switch literal {
  109|     46|    case let blob as Blob:
  110|      0|        return blob.description
  111|     46|    case let string as String:
  112|     30|        return string.quote("'")
  113|     46|    case let binding:
  114|     16|        return "\(binding)"
  115|     46|    }
  116|     46|}
  117|       |
  118|       |// swiftlint:disable force_cast
  119|     36|func value<A: Value>(_ binding: Binding) -> A {
  120|     36|    A.fromDatatypeValue(binding as! A.Datatype) as! A
  121|     36|}
  122|       |
  123|     36|func value<A: Value>(_ binding: Binding?) -> A {
  124|     36|    value(binding!)
  125|     36|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Typed/AggregateFunctions.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |private enum Function: String {
   26|       |    case count
   27|       |    case max
   28|       |    case min
   29|       |    case avg
   30|       |    case sum
   31|       |    case total
   32|       |
   33|     36|    func wrap<T>(_ expression: Expressible) -> Expression<T> {
   34|     36|        self.rawValue.wrap(expression)
   35|     36|    }
   36|       |}
   37|       |
   38|       |extension ExpressionType where UnderlyingType: Value {
   39|       |
   40|       |    /// Builds a copy of the expression prefixed with the `DISTINCT` keyword.
   41|       |    ///
   42|       |    ///     let name = Expression<String>("name")
   43|       |    ///     name.distinct
   44|       |    ///     // DISTINCT "name"
   45|       |    ///
   46|       |    /// - Returns: A copy of the expression prefixed with the `DISTINCT`
   47|       |    ///   keyword.
   48|      0|    public var distinct: Expression<UnderlyingType> {
   49|      0|        Expression("DISTINCT \(template)", bindings)
   50|      0|    }
   51|       |
   52|       |    /// Builds a copy of the expression wrapped with the `count` aggregate
   53|       |    /// function.
   54|       |    ///
   55|       |    ///     let name = Expression<String?>("name")
   56|       |    ///     name.count
   57|       |    ///     // count("name")
   58|       |    ///     name.distinct.count
   59|       |    ///     // count(DISTINCT "name")
   60|       |    ///
   61|       |    /// - Returns: A copy of the expression wrapped with the `count` aggregate
   62|       |    ///   function.
   63|      0|    public var count: Expression<Int> {
   64|      0|        Function.count.wrap(self)
   65|      0|    }
   66|       |
   67|       |}
   68|       |
   69|       |extension ExpressionType where UnderlyingType: _OptionalType, UnderlyingType.WrappedType: Value {
   70|       |
   71|       |    /// Builds a copy of the expression prefixed with the `DISTINCT` keyword.
   72|       |    ///
   73|       |    ///     let name = Expression<String?>("name")
   74|       |    ///     name.distinct
   75|       |    ///     // DISTINCT "name"
   76|       |    ///
   77|       |    /// - Returns: A copy of the expression prefixed with the `DISTINCT`
   78|       |    ///   keyword.
   79|      0|    public var distinct: Expression<UnderlyingType> {
   80|      0|        Expression("DISTINCT \(template)", bindings)
   81|      0|    }
   82|       |
   83|       |    /// Builds a copy of the expression wrapped with the `count` aggregate
   84|       |    /// function.
   85|       |    ///
   86|       |    ///     let name = Expression<String?>("name")
   87|       |    ///     name.count
   88|       |    ///     // count("name")
   89|       |    ///     name.distinct.count
   90|       |    ///     // count(DISTINCT "name")
   91|       |    ///
   92|       |    /// - Returns: A copy of the expression wrapped with the `count` aggregate
   93|       |    ///   function.
   94|      0|    public var count: Expression<Int> {
   95|      0|        Function.count.wrap(self)
   96|      0|    }
   97|       |
   98|       |}
   99|       |
  100|       |extension ExpressionType where UnderlyingType: Value, UnderlyingType.Datatype: Comparable {
  101|       |
  102|       |    /// Builds a copy of the expression wrapped with the `max` aggregate
  103|       |    /// function.
  104|       |    ///
  105|       |    ///     let age = Expression<Int>("age")
  106|       |    ///     age.max
  107|       |    ///     // max("age")
  108|       |    ///
  109|       |    /// - Returns: A copy of the expression wrapped with the `max` aggregate
  110|       |    ///   function.
  111|      0|    public var max: Expression<UnderlyingType?> {
  112|      0|        Function.max.wrap(self)
  113|      0|    }
  114|       |
  115|       |    /// Builds a copy of the expression wrapped with the `min` aggregate
  116|       |    /// function.
  117|       |    ///
  118|       |    ///     let age = Expression<Int>("age")
  119|       |    ///     age.min
  120|       |    ///     // min("age")
  121|       |    ///
  122|       |    /// - Returns: A copy of the expression wrapped with the `min` aggregate
  123|       |    ///   function.
  124|      0|    public var min: Expression<UnderlyingType?> {
  125|      0|        Function.min.wrap(self)
  126|      0|    }
  127|       |
  128|       |}
  129|       |
  130|       |extension ExpressionType where UnderlyingType: _OptionalType, UnderlyingType.WrappedType: Value, UnderlyingType.WrappedType.Datatype: Comparable {
  131|       |
  132|       |    /// Builds a copy of the expression wrapped with the `max` aggregate
  133|       |    /// function.
  134|       |    ///
  135|       |    ///     let age = Expression<Int?>("age")
  136|       |    ///     age.max
  137|       |    ///     // max("age")
  138|       |    ///
  139|       |    /// - Returns: A copy of the expression wrapped with the `max` aggregate
  140|       |    ///   function.
  141|      0|    public var max: Expression<UnderlyingType> {
  142|      0|        Function.max.wrap(self)
  143|      0|    }
  144|       |
  145|       |    /// Builds a copy of the expression wrapped with the `min` aggregate
  146|       |    /// function.
  147|       |    ///
  148|       |    ///     let age = Expression<Int?>("age")
  149|       |    ///     age.min
  150|       |    ///     // min("age")
  151|       |    ///
  152|       |    /// - Returns: A copy of the expression wrapped with the `min` aggregate
  153|       |    ///   function.
  154|      0|    public var min: Expression<UnderlyingType> {
  155|      0|        Function.min.wrap(self)
  156|      0|    }
  157|       |
  158|       |}
  159|       |
  160|       |extension ExpressionType where UnderlyingType: Value, UnderlyingType.Datatype: Number {
  161|       |
  162|       |    /// Builds a copy of the expression wrapped with the `avg` aggregate
  163|       |    /// function.
  164|       |    ///
  165|       |    ///     let salary = Expression<Double>("salary")
  166|       |    ///     salary.average
  167|       |    ///     // avg("salary")
  168|       |    ///
  169|       |    /// - Returns: A copy of the expression wrapped with the `min` aggregate
  170|       |    ///   function.
  171|      0|    public var average: Expression<Double?> {
  172|      0|        Function.avg.wrap(self)
  173|      0|    }
  174|       |
  175|       |    /// Builds a copy of the expression wrapped with the `sum` aggregate
  176|       |    /// function.
  177|       |    ///
  178|       |    ///     let salary = Expression<Double>("salary")
  179|       |    ///     salary.sum
  180|       |    ///     // sum("salary")
  181|       |    ///
  182|       |    /// - Returns: A copy of the expression wrapped with the `min` aggregate
  183|       |    ///   function.
  184|      0|    public var sum: Expression<UnderlyingType?> {
  185|      0|        Function.sum.wrap(self)
  186|      0|    }
  187|       |
  188|       |    /// Builds a copy of the expression wrapped with the `total` aggregate
  189|       |    /// function.
  190|       |    ///
  191|       |    ///     let salary = Expression<Double>("salary")
  192|       |    ///     salary.total
  193|       |    ///     // total("salary")
  194|       |    ///
  195|       |    /// - Returns: A copy of the expression wrapped with the `min` aggregate
  196|       |    ///   function.
  197|      0|    public var total: Expression<Double> {
  198|      0|        Function.total.wrap(self)
  199|      0|    }
  200|       |
  201|       |}
  202|       |
  203|       |extension ExpressionType where UnderlyingType: _OptionalType, UnderlyingType.WrappedType: Value, UnderlyingType.WrappedType.Datatype: Number {
  204|       |
  205|       |    /// Builds a copy of the expression wrapped with the `avg` aggregate
  206|       |    /// function.
  207|       |    ///
  208|       |    ///     let salary = Expression<Double?>("salary")
  209|       |    ///     salary.average
  210|       |    ///     // avg("salary")
  211|       |    ///
  212|       |    /// - Returns: A copy of the expression wrapped with the `min` aggregate
  213|       |    ///   function.
  214|      0|    public var average: Expression<Double?> {
  215|      0|        Function.avg.wrap(self)
  216|      0|    }
  217|       |
  218|       |    /// Builds a copy of the expression wrapped with the `sum` aggregate
  219|       |    /// function.
  220|       |    ///
  221|       |    ///     let salary = Expression<Double?>("salary")
  222|       |    ///     salary.sum
  223|       |    ///     // sum("salary")
  224|       |    ///
  225|       |    /// - Returns: A copy of the expression wrapped with the `min` aggregate
  226|       |    ///   function.
  227|      0|    public var sum: Expression<UnderlyingType> {
  228|      0|        Function.sum.wrap(self)
  229|      0|    }
  230|       |
  231|       |    /// Builds a copy of the expression wrapped with the `total` aggregate
  232|       |    /// function.
  233|       |    ///
  234|       |    ///     let salary = Expression<Double?>("salary")
  235|       |    ///     salary.total
  236|       |    ///     // total("salary")
  237|       |    ///
  238|       |    /// - Returns: A copy of the expression wrapped with the `min` aggregate
  239|       |    ///   function.
  240|      0|    public var total: Expression<Double> {
  241|      0|        Function.total.wrap(self)
  242|      0|    }
  243|       |
  244|       |}
  245|       |
  246|       |extension ExpressionType where UnderlyingType == Int {
  247|       |
  248|     36|    static func count(_ star: Star) -> Expression<UnderlyingType> {
  249|     36|        Function.count.wrap(star(nil, nil))
  250|     36|    }
  251|       |
  252|       |}
  253|       |
  254|       |/// Builds an expression representing `count(*)` (when called with the `*`
  255|       |/// function literal).
  256|       |///
  257|       |///     count(*)
  258|       |///     // count(*)
  259|       |///
  260|       |/// - Returns: An expression returning `count(*)` (when called with the `*`
  261|       |///   function literal).
  262|      0|public func count(_ star: Star) -> Expression<Int> {
  263|      0|    Expression.count(star)
  264|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Typed/Coding.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |import Foundation
   26|       |
   27|       |extension QueryType {
   28|       |    /// Creates an `INSERT` statement by encoding the given object
   29|       |    /// This method converts any custom nested types to JSON data and does not handle any sort
   30|       |    /// of object relationships. If you want to support relationships between objects you will
   31|       |    /// have to provide your own Encodable implementations that encode the correct ids.
   32|       |    ///
   33|       |    /// - Parameters:
   34|       |    ///
   35|       |    ///   - encodable: An encodable object to insert
   36|       |    ///
   37|       |    ///   - userInfo: User info to be passed to encoder
   38|       |    ///
   39|       |    ///   - otherSetters: Any other setters to include in the insert
   40|       |    ///
   41|       |    /// - Returns: An `INSERT` statement for the encodable object
   42|      0|    public func insert(_ encodable: Encodable, userInfo: [CodingUserInfoKey: Any] = [:], otherSetters: [Setter] = []) throws -> Insert {
   43|      0|        let encoder = SQLiteEncoder(userInfo: userInfo)
   44|      0|        try encodable.encode(to: encoder)
   45|      0|        return self.insert(encoder.setters + otherSetters)
   46|      0|    }
   47|       |
   48|       |    /// Creates an `INSERT` statement by encoding the given object
   49|       |    /// This method converts any custom nested types to JSON data and does not handle any sort
   50|       |    /// of object relationships. If you want to support relationships between objects you will
   51|       |    /// have to provide your own Encodable implementations that encode the correct ids.
   52|       |    /// The onConflict will be passed to the actual insert function to define what should happen
   53|       |    /// when an error occurs during the insert operation.
   54|       |    ///
   55|       |    /// - Parameters:
   56|       |    ///
   57|       |    ///   - onConlict: Define what happens when an insert operation fails
   58|       |    ///
   59|       |    ///   - encodable: An encodable object to insert
   60|       |    ///
   61|       |    ///   - userInfo: User info to be passed to encoder
   62|       |    ///
   63|       |    ///   - otherSetters: Any other setters to include in the insert
   64|       |    ///
   65|       |    /// - Returns: An `INSERT` statement fort the encodable object
   66|       |    public func insert(or onConflict: OnConflict, encodable: Encodable, userInfo: [CodingUserInfoKey: Any] = [:],
   67|      0|                       otherSetters: [Setter] = []) throws -> Insert {
   68|      0|        let encoder = SQLiteEncoder(userInfo: userInfo)
   69|      0|        try encodable.encode(to: encoder)
   70|      0|        return self.insert(or: onConflict, encoder.setters + otherSetters)
   71|      0|    }
   72|       |
   73|       |    /// Creates a batch `INSERT` statement by encoding the array of given objects
   74|       |    /// This method converts any custom nested types to JSON data and does not handle any sort
   75|       |    /// of object relationships. If you want to support relationships between objects you will
   76|       |    /// have to provide your own Encodable implementations that encode the correct ids.
   77|       |    ///
   78|       |    /// - Parameters:
   79|       |    ///
   80|       |    ///   - encodables: Encodable objects to insert
   81|       |    ///
   82|       |    ///   - userInfo: User info to be passed to encoder
   83|       |    ///
   84|       |    ///   - otherSetters: Any other setters to include in the inserts, per row/object.
   85|       |    ///
   86|       |    /// - Returns: An `INSERT` statement for the encodable objects
   87|       |    public func insertMany(_ encodables: [Encodable], userInfo: [CodingUserInfoKey: Any] = [:],
   88|      0|                           otherSetters: [Setter] = []) throws -> Insert {
   89|      0|        let combinedSetters = try encodables.map { encodable -> [Setter] in
   90|      0|            let encoder = SQLiteEncoder(userInfo: userInfo)
   91|      0|            try encodable.encode(to: encoder)
   92|      0|            return encoder.setters + otherSetters
   93|      0|        }
   94|      0|        return self.insertMany(combinedSetters)
   95|      0|    }
   96|       |
   97|       |    /// Creates an `INSERT ON CONFLICT DO UPDATE` statement, aka upsert, by encoding the given object
   98|       |    /// This method converts any custom nested types to JSON data and does not handle any sort
   99|       |    /// of object relationships. If you want to support relationships between objects you will
  100|       |    /// have to provide your own Encodable implementations that encode the correct ids.
  101|       |    ///
  102|       |    /// - Parameters:
  103|       |    ///
  104|       |    ///   - encodable: An encodable object to insert
  105|       |    ///
  106|       |    ///   - userInfo: User info to be passed to encoder
  107|       |    ///
  108|       |    ///   - otherSetters: Any other setters to include in the insert
  109|       |    ///
  110|       |    ///   - onConflictOf: The column that if conflicts should trigger an update instead of insert.
  111|       |    ///
  112|       |    /// - Returns: An `INSERT` statement fort the encodable object
  113|       |    public func upsert(_ encodable: Encodable, userInfo: [CodingUserInfoKey: Any] = [:],
  114|      0|                       otherSetters: [Setter] = [], onConflictOf conflicting: Expressible) throws -> Insert {
  115|      0|        let encoder = SQLiteEncoder(userInfo: userInfo)
  116|      0|        try encodable.encode(to: encoder)
  117|      0|        return self.upsert(encoder.setters + otherSetters, onConflictOf: conflicting)
  118|      0|    }
  119|       |
  120|       |    /// Creates an `UPDATE` statement by encoding the given object
  121|       |    /// This method converts any custom nested types to JSON data and does not handle any sort
  122|       |    /// of object relationships. If you want to support relationships between objects you will
  123|       |    /// have to provide your own Encodable implementations that encode the correct ids.
  124|       |    ///
  125|       |    /// - Parameters:
  126|       |    ///
  127|       |    ///   - encodable: An encodable object to insert
  128|       |    ///
  129|       |    ///   - userInfo: User info to be passed to encoder
  130|       |    ///
  131|       |    ///   - otherSetters: Any other setters to include in the insert
  132|       |    ///
  133|       |    /// - Returns: An `UPDATE` statement fort the encodable object
  134|       |    public func update(_ encodable: Encodable, userInfo: [CodingUserInfoKey: Any] = [:],
  135|      0|                       otherSetters: [Setter] = []) throws -> Update {
  136|      0|        let encoder = SQLiteEncoder(userInfo: userInfo)
  137|      0|        try encodable.encode(to: encoder)
  138|      0|        return self.update(encoder.setters + otherSetters)
  139|      0|    }
  140|       |}
  141|       |
  142|       |extension Row {
  143|       |    /// Decode an object from this row
  144|       |    /// This method expects any custom nested types to be in the form of JSON data and does not handle
  145|       |    /// any sort of object relationships. If you want to support relationships between objects you will
  146|       |    /// have to provide your own Decodable implementations that decodes the correct columns.
  147|       |    ///
  148|       |    /// - Parameter: userInfo
  149|       |    ///
  150|       |    /// - Returns: a decoded object from this row
  151|      0|    public func decode<V: Decodable>(userInfo: [CodingUserInfoKey: Any] = [:]) throws -> V {
  152|      0|        try V(from: decoder(userInfo: userInfo))
  153|      0|    }
  154|       |
  155|      0|    public func decoder(userInfo: [CodingUserInfoKey: Any] = [:]) -> Decoder {
  156|      0|        SQLiteDecoder(row: self, userInfo: userInfo)
  157|      0|    }
  158|       |}
  159|       |
  160|       |/// Generates a list of settings for an Encodable object
  161|       |private class SQLiteEncoder: Encoder {
  162|       |    class SQLiteKeyedEncodingContainer<MyKey: CodingKey>: KeyedEncodingContainerProtocol {
  163|       |        // swiftlint:disable nesting
  164|       |        typealias Key = MyKey
  165|       |
  166|       |        let encoder: SQLiteEncoder
  167|      0|        let codingPath: [CodingKey] = []
  168|       |
  169|      0|        init(encoder: SQLiteEncoder) {
  170|      0|            self.encoder = encoder
  171|      0|        }
  172|       |
  173|      0|        func superEncoder() -> Swift.Encoder {
  174|      0|            fatalError("SQLiteEncoding does not support super encoders")
  175|      0|        }
  176|       |
  177|      0|        func superEncoder(forKey key: Key) -> Swift.Encoder {
  178|      0|            fatalError("SQLiteEncoding does not support super encoders")
  179|      0|        }
  180|       |
  181|      0|        func encodeNil(forKey key: SQLiteEncoder.SQLiteKeyedEncodingContainer<Key>.Key) throws {
  182|      0|            encoder.setters.append(Expression<String?>(key.stringValue) <- nil)
  183|      0|        }
  184|       |
  185|      0|        func encode(_ value: Int, forKey key: SQLiteEncoder.SQLiteKeyedEncodingContainer<Key>.Key) throws {
  186|      0|            encoder.setters.append(Expression(key.stringValue) <- value)
  187|      0|        }
  188|       |
  189|      0|        func encode(_ value: Bool, forKey key: Key) throws {
  190|      0|            encoder.setters.append(Expression(key.stringValue) <- value)
  191|      0|        }
  192|       |
  193|      0|        func encode(_ value: Float, forKey key: Key) throws {
  194|      0|            encoder.setters.append(Expression(key.stringValue) <- Double(value))
  195|      0|        }
  196|       |
  197|      0|        func encode(_ value: Double, forKey key: Key) throws {
  198|      0|            encoder.setters.append(Expression(key.stringValue) <- value)
  199|      0|        }
  200|       |
  201|      0|        func encode(_ value: String, forKey key: Key) throws {
  202|      0|            encoder.setters.append(Expression(key.stringValue) <- value)
  203|      0|        }
  204|       |
  205|      0|        func encode<T>(_ value: T, forKey key: Key) throws where T: Swift.Encodable {
  206|      0|            if let data = value as? Data {
  207|      0|                encoder.setters.append(Expression(key.stringValue) <- data)
  208|      0|            } else if let date = value as? Date {
  209|      0|                encoder.setters.append(Expression(key.stringValue) <- date.datatypeValue)
  210|      0|            } else {
  211|      0|                let encoded = try JSONEncoder().encode(value)
  212|      0|                let string = String(data: encoded, encoding: .utf8)
  213|      0|                encoder.setters.append(Expression(key.stringValue) <- string)
  214|      0|            }
  215|      0|        }
  216|       |
  217|      0|        func encode(_ value: Int8, forKey key: Key) throws {
  218|      0|            throw EncodingError.invalidValue(value, EncodingError.Context(codingPath: codingPath,
  219|      0|                                                                          debugDescription: "encoding an Int8 is not supported"))
  220|      0|        }
  221|       |
  222|      0|        func encode(_ value: Int16, forKey key: Key) throws {
  223|      0|            throw EncodingError.invalidValue(value, EncodingError.Context(codingPath: codingPath,
  224|      0|                                                                          debugDescription: "encoding an Int16 is not supported"))
  225|      0|        }
  226|       |
  227|      0|        func encode(_ value: Int32, forKey key: Key) throws {
  228|      0|            throw EncodingError.invalidValue(value, EncodingError.Context(codingPath: codingPath,
  229|      0|                                                                          debugDescription: "encoding an Int32 is not supported"))
  230|      0|        }
  231|       |
  232|      0|        func encode(_ value: Int64, forKey key: Key) throws {
  233|      0|            encoder.setters.append(Expression(key.stringValue) <- value)
  234|      0|        }
  235|       |
  236|      0|        func encode(_ value: UInt, forKey key: Key) throws {
  237|      0|            throw EncodingError.invalidValue(value, EncodingError.Context(codingPath: codingPath,
  238|      0|                                                                          debugDescription: "encoding an UInt is not supported"))
  239|      0|        }
  240|       |
  241|      0|        func encode(_ value: UInt8, forKey key: Key) throws {
  242|      0|            throw EncodingError.invalidValue(value, EncodingError.Context(codingPath: codingPath,
  243|      0|                                                                          debugDescription: "encoding an UInt8 is not supported"))
  244|      0|        }
  245|       |
  246|      0|        func encode(_ value: UInt16, forKey key: Key) throws {
  247|      0|            throw EncodingError.invalidValue(value, EncodingError.Context(codingPath: codingPath,
  248|      0|                                                                          debugDescription: "encoding an UInt16 is not supported"))
  249|      0|        }
  250|       |
  251|      0|        func encode(_ value: UInt32, forKey key: Key) throws {
  252|      0|            throw EncodingError.invalidValue(value, EncodingError.Context(codingPath: codingPath,
  253|      0|                                                                          debugDescription: "encoding an UInt32 is not supported"))
  254|      0|        }
  255|       |
  256|      0|        func encode(_ value: UInt64, forKey key: Key) throws {
  257|      0|            throw EncodingError.invalidValue(value, EncodingError.Context(codingPath: codingPath,
  258|      0|                                                                          debugDescription: "encoding an UInt64 is not supported"))
  259|      0|        }
  260|       |
  261|       |        func nestedContainer<NestedKey>(keyedBy keyType: NestedKey.Type, forKey key: Key)
  262|      0|                        -> KeyedEncodingContainer<NestedKey> where NestedKey: CodingKey {
  263|      0|            fatalError("encoding a nested container is not supported")
  264|      0|        }
  265|       |
  266|      0|        func nestedUnkeyedContainer(forKey key: Key) -> UnkeyedEncodingContainer {
  267|      0|            fatalError("encoding nested values is not supported")
  268|      0|        }
  269|       |    }
  270|       |
  271|      0|    fileprivate var setters: [Setter] = []
  272|      0|    let codingPath: [CodingKey] = []
  273|       |    let userInfo: [CodingUserInfoKey: Any]
  274|       |
  275|      0|    init(userInfo: [CodingUserInfoKey: Any]) {
  276|      0|        self.userInfo = userInfo
  277|      0|    }
  278|       |
  279|      0|    func singleValueContainer() -> SingleValueEncodingContainer {
  280|      0|        fatalError("not supported")
  281|      0|    }
  282|       |
  283|      0|    func unkeyedContainer() -> UnkeyedEncodingContainer {
  284|      0|        fatalError("not supported")
  285|      0|    }
  286|       |
  287|      0|    func container<Key>(keyedBy type: Key.Type) -> KeyedEncodingContainer<Key> where Key: CodingKey {
  288|      0|        KeyedEncodingContainer(SQLiteKeyedEncodingContainer(encoder: self))
  289|      0|    }
  290|       |}
  291|       |
  292|       |private class SQLiteDecoder: Decoder {
  293|       |    class SQLiteKeyedDecodingContainer<MyKey: CodingKey>: KeyedDecodingContainerProtocol {
  294|       |        typealias Key = MyKey
  295|       |
  296|      0|        let codingPath: [CodingKey] = []
  297|       |        let row: Row
  298|       |
  299|      0|        init(row: Row) {
  300|      0|            self.row = row
  301|      0|        }
  302|       |
  303|      0|        var allKeys: [Key] {
  304|      0|            row.columnNames.keys.compactMap({ Key(stringValue: $0) })
  305|      0|        }
  306|       |
  307|      0|        func contains(_ key: Key) -> Bool {
  308|      0|            row.hasValue(for: key.stringValue)
  309|      0|        }
  310|       |
  311|      0|        func decodeNil(forKey key: Key) throws -> Bool {
  312|      0|            !contains(key)
  313|      0|        }
  314|       |
  315|      0|        func decode(_ type: Bool.Type, forKey key: Key) throws -> Bool {
  316|      0|            try row.get(Expression(key.stringValue))
  317|      0|        }
  318|       |
  319|      0|        func decode(_ type: Int.Type, forKey key: Key) throws -> Int {
  320|      0|            try row.get(Expression(key.stringValue))
  321|      0|        }
  322|       |
  323|      0|        func decode(_ type: Int8.Type, forKey key: Key) throws -> Int8 {
  324|      0|            throw DecodingError.typeMismatch(type, DecodingError.Context(codingPath: codingPath,
  325|      0|                                                                         debugDescription: "decoding an Int8 is not supported"))
  326|      0|        }
  327|       |
  328|      0|        func decode(_ type: Int16.Type, forKey key: Key) throws -> Int16 {
  329|      0|            throw DecodingError.typeMismatch(type, DecodingError.Context(codingPath: codingPath,
  330|      0|                                                                         debugDescription: "decoding an Int16 is not supported"))
  331|      0|        }
  332|       |
  333|      0|        func decode(_ type: Int32.Type, forKey key: Key) throws -> Int32 {
  334|      0|            throw DecodingError.typeMismatch(type, DecodingError.Context(codingPath: codingPath,
  335|      0|                                                                         debugDescription: "decoding an Int32 is not supported"))
  336|      0|        }
  337|       |
  338|      0|        func decode(_ type: Int64.Type, forKey key: Key) throws -> Int64 {
  339|      0|            try row.get(Expression(key.stringValue))
  340|      0|        }
  341|       |
  342|      0|        func decode(_ type: UInt.Type, forKey key: Key) throws -> UInt {
  343|      0|            throw DecodingError.typeMismatch(type, DecodingError.Context(codingPath: codingPath,
  344|      0|                                                                         debugDescription: "decoding an UInt is not supported"))
  345|      0|
  346|      0|        }
  347|       |
  348|      0|        func decode(_ type: UInt8.Type, forKey key: Key) throws -> UInt8 {
  349|      0|            throw DecodingError.typeMismatch(type, DecodingError.Context(codingPath: codingPath,
  350|      0|                                                                         debugDescription: "decoding an UInt8 is not supported"))
  351|      0|        }
  352|       |
  353|      0|        func decode(_ type: UInt16.Type, forKey key: Key) throws -> UInt16 {
  354|      0|            throw DecodingError.typeMismatch(type, DecodingError.Context(codingPath: codingPath,
  355|      0|                                                                         debugDescription: "decoding an UInt16 is not supported"))
  356|      0|        }
  357|       |
  358|      0|        func decode(_ type: UInt32.Type, forKey key: Key) throws -> UInt32 {
  359|      0|            throw DecodingError.typeMismatch(type, DecodingError.Context(codingPath: codingPath,
  360|      0|                                                                         debugDescription: "decoding an UInt32 is not supported"))
  361|      0|        }
  362|       |
  363|      0|        func decode(_ type: UInt64.Type, forKey key: Key) throws -> UInt64 {
  364|      0|            throw DecodingError.typeMismatch(type, DecodingError.Context(codingPath: codingPath,
  365|      0|                                                                         debugDescription: "decoding an UInt64 is not supported"))
  366|      0|        }
  367|       |
  368|      0|        func decode(_ type: Float.Type, forKey key: Key) throws -> Float {
  369|      0|            Float(try row.get(Expression<Double>(key.stringValue)))
  370|      0|        }
  371|       |
  372|      0|        func decode(_ type: Double.Type, forKey key: Key) throws -> Double {
  373|      0|            try row.get(Expression(key.stringValue))
  374|      0|        }
  375|       |
  376|      0|        func decode(_ type: String.Type, forKey key: Key) throws -> String {
  377|      0|            try row.get(Expression(key.stringValue))
  378|      0|        }
  379|       |
  380|      0|        func decode<T>(_ type: T.Type, forKey key: Key) throws -> T where T: Swift.Decodable {
  381|      0|            // swiftlint:disable force_cast
  382|      0|            if type == Data.self {
  383|      0|                let data = try row.get(Expression<Data>(key.stringValue))
  384|      0|                return data as! T
  385|      0|            } else if type == Date.self {
  386|      0|                let date = try row.get(Expression<Date>(key.stringValue))
  387|      0|                return date as! T
  388|      0|            }
  389|      0|            // swiftlint:enable force_cast
  390|      0|            guard let JSONString = try row.get(Expression<String?>(key.stringValue)) else {
  391|      0|                throw DecodingError.typeMismatch(type, DecodingError.Context(codingPath: codingPath,
  392|      0|                                                                             debugDescription: "an unsupported type was found"))
  393|      0|            }
  394|      0|            guard let data = JSONString.data(using: .utf8) else {
  395|      0|                throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: codingPath,
  396|      0|                                                                        debugDescription: "invalid utf8 data found"))
  397|      0|            }
  398|      0|            return try JSONDecoder().decode(type, from: data)
  399|      0|        }
  400|       |
  401|       |        func nestedContainer<NestedKey>(keyedBy type: NestedKey.Type, forKey key: Key) throws
  402|      0|                        -> KeyedDecodingContainer<NestedKey> where NestedKey: CodingKey {
  403|      0|            throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: codingPath,
  404|      0|                                                                    debugDescription: "decoding nested containers is not supported"))
  405|      0|        }
  406|       |
  407|      0|        func nestedUnkeyedContainer(forKey key: Key) throws -> UnkeyedDecodingContainer {
  408|      0|            throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: codingPath,
  409|      0|                                                                    debugDescription: "decoding unkeyed containers is not supported"))
  410|      0|        }
  411|       |
  412|      0|        func superDecoder() throws -> Swift.Decoder {
  413|      0|            throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: codingPath,
  414|      0|                                                                    debugDescription: "decoding super encoders containers is not supported"))
  415|      0|        }
  416|       |
  417|      0|        func superDecoder(forKey key: Key) throws -> Swift.Decoder {
  418|      0|            throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: codingPath,
  419|      0|                                                                    debugDescription: "decoding super decoders is not supported"))
  420|      0|        }
  421|       |    }
  422|       |
  423|       |    let row: Row
  424|      0|    let codingPath: [CodingKey] = []
  425|       |    let userInfo: [CodingUserInfoKey: Any]
  426|       |
  427|      0|    init(row: Row, userInfo: [CodingUserInfoKey: Any]) {
  428|      0|        self.row = row
  429|      0|        self.userInfo = userInfo
  430|      0|    }
  431|       |
  432|      0|    func container<Key>(keyedBy type: Key.Type) throws -> KeyedDecodingContainer<Key> where Key: CodingKey {
  433|      0|        KeyedDecodingContainer(SQLiteKeyedDecodingContainer(row: row))
  434|      0|    }
  435|       |
  436|      0|    func unkeyedContainer() throws -> UnkeyedDecodingContainer {
  437|      0|        throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: codingPath,
  438|      0|                                                                debugDescription: "decoding an unkeyed container is not supported"))
  439|      0|    }
  440|       |
  441|      0|    func singleValueContainer() throws -> SingleValueDecodingContainer {
  442|      0|        throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: codingPath,
  443|      0|                                                                debugDescription: "decoding a single value container is not supported"))
  444|      0|    }
  445|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Typed/Collation.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |/// A collating function used to compare to strings.
   26|       |///
   27|       |/// - SeeAlso: <https://www.sqlite.org/datatype3.html#collation>
   28|       |public enum Collation {
   29|       |
   30|       |    /// Compares string by raw data.
   31|       |    case binary
   32|       |
   33|       |    /// Like binary, but folds uppercase ASCII letters into their lowercase
   34|       |    /// equivalents.
   35|       |    case nocase
   36|       |
   37|       |    /// Like binary, but strips trailing space.
   38|       |    case rtrim
   39|       |
   40|       |    /// A custom collating sequence identified by the given string, registered
   41|       |    /// using `Database.create(collation:…)`
   42|       |    case custom(String)
   43|       |
   44|       |}
   45|       |
   46|       |extension Collation: Expressible {
   47|       |
   48|      0|    public var expression: Expression<Void> {
   49|      0|        Expression(literal: description)
   50|      0|    }
   51|       |
   52|       |}
   53|       |
   54|       |extension Collation: CustomStringConvertible {
   55|       |
   56|      0|    public var description: String {
   57|      0|        switch self {
   58|      0|        case .binary:
   59|      0|            return "BINARY"
   60|      0|        case .nocase:
   61|      0|            return "NOCASE"
   62|      0|        case .rtrim:
   63|      0|            return "RTRIM"
   64|      0|        case .custom(let collation):
   65|      0|            return collation.quote()
   66|      0|        }
   67|      0|    }
   68|       |
   69|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Typed/CoreFunctions.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |import Foundation
   25|       |
   26|       |private enum Function: String {
   27|       |    case abs
   28|       |    case round
   29|       |    case random
   30|       |    case randomblob
   31|       |    case zeroblob
   32|       |    case length
   33|       |    case lower
   34|       |    case upper
   35|       |    case ltrim
   36|       |    case rtrim
   37|       |    case trim
   38|       |    case replace
   39|       |    case substr
   40|       |    case like = "LIKE"
   41|       |    case `in` = "IN"
   42|       |    case glob = "GLOB"
   43|       |    case match = "MATCH"
   44|       |    case regexp = "REGEXP"
   45|       |    case collate = "COLLATE"
   46|       |    case ifnull
   47|       |
   48|      0|    func infix<T>(_ lhs: Expressible, _ rhs: Expressible, wrap: Bool = true) -> Expression<T> {
   49|      0|        self.rawValue.infix(lhs, rhs, wrap: wrap)
   50|      0|    }
   51|       |
   52|      0|    func wrap<T>(_ expression: Expressible) -> Expression<T> {
   53|      0|        self.rawValue.wrap(expression)
   54|      0|    }
   55|       |
   56|      0|    func wrap<T>(_ expressions: [Expressible]) -> Expression<T> {
   57|      0|        self.rawValue.wrap(", ".join(expressions))
   58|      0|    }
   59|       |}
   60|       |
   61|       |extension ExpressionType where UnderlyingType: Number {
   62|       |
   63|       |    /// Builds a copy of the expression wrapped with the `abs` function.
   64|       |    ///
   65|       |    ///     let x = Expression<Int>("x")
   66|       |    ///     x.absoluteValue
   67|       |    ///     // abs("x")
   68|       |    ///
   69|       |    /// - Returns: A copy of the expression wrapped with the `abs` function.
   70|      0|    public var absoluteValue: Expression<UnderlyingType> {
   71|      0|        Function.abs.wrap(self)
   72|      0|    }
   73|       |
   74|       |}
   75|       |
   76|       |extension ExpressionType where UnderlyingType: _OptionalType, UnderlyingType.WrappedType: Number {
   77|       |
   78|       |    /// Builds a copy of the expression wrapped with the `abs` function.
   79|       |    ///
   80|       |    ///     let x = Expression<Int?>("x")
   81|       |    ///     x.absoluteValue
   82|       |    ///     // abs("x")
   83|       |    ///
   84|       |    /// - Returns: A copy of the expression wrapped with the `abs` function.
   85|      0|    public var absoluteValue: Expression<UnderlyingType> {
   86|      0|        Function.abs.wrap(self)
   87|      0|    }
   88|       |
   89|       |}
   90|       |
   91|       |extension ExpressionType where UnderlyingType == Double {
   92|       |
   93|       |    /// Builds a copy of the expression wrapped with the `round` function.
   94|       |    ///
   95|       |    ///     let salary = Expression<Double>("salary")
   96|       |    ///     salary.round()
   97|       |    ///     // round("salary")
   98|       |    ///     salary.round(2)
   99|       |    ///     // round("salary", 2)
  100|       |    ///
  101|       |    /// - Returns: A copy of the expression wrapped with the `round` function.
  102|      0|    public func round(_ precision: Int? = nil) -> Expression<UnderlyingType> {
  103|      0|        guard let precision = precision else {
  104|      0|            return Function.round.wrap([self])
  105|      0|        }
  106|      0|        return Function.round.wrap([self, Int(precision)])
  107|      0|    }
  108|       |
  109|       |}
  110|       |
  111|       |extension ExpressionType where UnderlyingType == Double? {
  112|       |
  113|       |    /// Builds a copy of the expression wrapped with the `round` function.
  114|       |    ///
  115|       |    ///     let salary = Expression<Double>("salary")
  116|       |    ///     salary.round()
  117|       |    ///     // round("salary")
  118|       |    ///     salary.round(2)
  119|       |    ///     // round("salary", 2)
  120|       |    ///
  121|       |    /// - Returns: A copy of the expression wrapped with the `round` function.
  122|      0|    public func round(_ precision: Int? = nil) -> Expression<UnderlyingType> {
  123|      0|        guard let precision = precision else {
  124|      0|            return Function.round.wrap(self)
  125|      0|        }
  126|      0|        return Function.round.wrap([self, Int(precision)])
  127|      0|    }
  128|       |
  129|       |}
  130|       |
  131|       |extension ExpressionType where UnderlyingType: Value, UnderlyingType.Datatype == Int64 {
  132|       |
  133|       |    /// Builds an expression representing the `random` function.
  134|       |    ///
  135|       |    ///     Expression<Int>.random()
  136|       |    ///     // random()
  137|       |    ///
  138|       |    /// - Returns: An expression calling the `random` function.
  139|      0|    public static func random() -> Expression<UnderlyingType> {
  140|      0|        Function.random.wrap([])
  141|      0|    }
  142|       |
  143|       |}
  144|       |
  145|       |extension ExpressionType where UnderlyingType == Data {
  146|       |
  147|       |    /// Builds an expression representing the `randomblob` function.
  148|       |    ///
  149|       |    ///     Expression<Int>.random(16)
  150|       |    ///     // randomblob(16)
  151|       |    ///
  152|       |    /// - Parameter length: Length in bytes.
  153|       |    ///
  154|       |    /// - Returns: An expression calling the `randomblob` function.
  155|      0|    public static func random(_ length: Int) -> Expression<UnderlyingType> {
  156|      0|        Function.randomblob.wrap([])
  157|      0|    }
  158|       |
  159|       |    /// Builds an expression representing the `zeroblob` function.
  160|       |    ///
  161|       |    ///     Expression<Int>.allZeros(16)
  162|       |    ///     // zeroblob(16)
  163|       |    ///
  164|       |    /// - Parameter length: Length in bytes.
  165|       |    ///
  166|       |    /// - Returns: An expression calling the `zeroblob` function.
  167|      0|    public static func allZeros(_ length: Int) -> Expression<UnderlyingType> {
  168|      0|        Function.zeroblob.wrap([])
  169|      0|    }
  170|       |
  171|       |    /// Builds a copy of the expression wrapped with the `length` function.
  172|       |    ///
  173|       |    ///     let data = Expression<NSData>("data")
  174|       |    ///     data.length
  175|       |    ///     // length("data")
  176|       |    ///
  177|       |    /// - Returns: A copy of the expression wrapped with the `length` function.
  178|      0|    public var length: Expression<Int> {
  179|      0|        Function.length.wrap(self)
  180|      0|    }
  181|       |
  182|       |}
  183|       |
  184|       |extension ExpressionType where UnderlyingType == Data? {
  185|       |
  186|       |    /// Builds a copy of the expression wrapped with the `length` function.
  187|       |    ///
  188|       |    ///     let data = Expression<NSData?>("data")
  189|       |    ///     data.length
  190|       |    ///     // length("data")
  191|       |    ///
  192|       |    /// - Returns: A copy of the expression wrapped with the `length` function.
  193|      0|    public var length: Expression<Int?> {
  194|      0|        Function.length.wrap(self)
  195|      0|    }
  196|       |
  197|       |}
  198|       |
  199|       |extension ExpressionType where UnderlyingType == String {
  200|       |
  201|       |    /// Builds a copy of the expression wrapped with the `length` function.
  202|       |    ///
  203|       |    ///     let name = Expression<String>("name")
  204|       |    ///     name.length
  205|       |    ///     // length("name")
  206|       |    ///
  207|       |    /// - Returns: A copy of the expression wrapped with the `length` function.
  208|      0|    public var length: Expression<Int> {
  209|      0|        Function.length.wrap(self)
  210|      0|    }
  211|       |
  212|       |    /// Builds a copy of the expression wrapped with the `lower` function.
  213|       |    ///
  214|       |    ///     let name = Expression<String>("name")
  215|       |    ///     name.lowercaseString
  216|       |    ///     // lower("name")
  217|       |    ///
  218|       |    /// - Returns: A copy of the expression wrapped with the `lower` function.
  219|      0|    public var lowercaseString: Expression<UnderlyingType> {
  220|      0|        Function.lower.wrap(self)
  221|      0|    }
  222|       |
  223|       |    /// Builds a copy of the expression wrapped with the `upper` function.
  224|       |    ///
  225|       |    ///     let name = Expression<String>("name")
  226|       |    ///     name.uppercaseString
  227|       |    ///     // lower("name")
  228|       |    ///
  229|       |    /// - Returns: A copy of the expression wrapped with the `upper` function.
  230|      0|    public var uppercaseString: Expression<UnderlyingType> {
  231|      0|        Function.upper.wrap(self)
  232|      0|    }
  233|       |
  234|       |    /// Builds a copy of the expression appended with a `LIKE` query against the
  235|       |    /// given pattern.
  236|       |    ///
  237|       |    ///     let email = Expression<String>("email")
  238|       |    ///     email.like("%@example.com")
  239|       |    ///     // "email" LIKE '%@example.com'
  240|       |    ///     email.like("99\\%@%", escape: "\\")
  241|       |    ///     // "email" LIKE '99\%@%' ESCAPE '\'
  242|       |    ///
  243|       |    /// - Parameters:
  244|       |    ///
  245|       |    ///   - pattern: A pattern to match.
  246|       |    ///
  247|       |    ///   - escape: An (optional) character designated for escaping
  248|       |    ///     pattern-matching characters (*i.e.*, the `%` and `_` characters).
  249|       |    ///
  250|       |    /// - Returns: A copy of the expression appended with a `LIKE` query against
  251|       |    ///   the given pattern.
  252|      0|    public func like(_ pattern: String, escape character: Character? = nil) -> Expression<Bool> {
  253|      0|        guard let character = character else {
  254|      0|            return "LIKE".infix(self, pattern)
  255|      0|        }
  256|      0|        return Expression("(\(template) LIKE ? ESCAPE ?)", bindings + [pattern, String(character)])
  257|      0|    }
  258|       |
  259|       |    /// Builds a copy of the expression appended with a `LIKE` query against the
  260|       |    /// given pattern.
  261|       |    ///
  262|       |    ///     let email = Expression<String>("email")
  263|       |    ///     let pattern = Expression<String>("pattern")
  264|       |    ///     email.like(pattern)
  265|       |    ///     // "email" LIKE "pattern"
  266|       |    ///
  267|       |    /// - Parameters:
  268|       |    ///
  269|       |    ///   - pattern: A pattern to match.
  270|       |    ///
  271|       |    ///   - escape: An (optional) character designated for escaping
  272|       |    ///     pattern-matching characters (*i.e.*, the `%` and `_` characters).
  273|       |    ///
  274|       |    /// - Returns: A copy of the expression appended with a `LIKE` query against
  275|       |    ///   the given pattern.
  276|      0|    public func like(_ pattern: Expression<String>, escape character: Character? = nil) -> Expression<Bool> {
  277|      0|        guard let character = character else {
  278|      0|            return Function.like.infix(self, pattern)
  279|      0|        }
  280|      0|        let like: Expression<Bool> =  Function.like.infix(self, pattern, wrap: false)
  281|      0|        return Expression("(\(like.template) ESCAPE ?)", like.bindings + [String(character)])
  282|      0|    }
  283|       |
  284|       |    /// Builds a copy of the expression appended with a `GLOB` query against the
  285|       |    /// given pattern.
  286|       |    ///
  287|       |    ///     let path = Expression<String>("path")
  288|       |    ///     path.glob("*.png")
  289|       |    ///     // "path" GLOB '*.png'
  290|       |    ///
  291|       |    /// - Parameter pattern: A pattern to match.
  292|       |    ///
  293|       |    /// - Returns: A copy of the expression appended with a `GLOB` query against
  294|       |    ///   the given pattern.
  295|      0|    public func glob(_ pattern: String) -> Expression<Bool> {
  296|      0|        Function.glob.infix(self, pattern)
  297|      0|    }
  298|       |
  299|       |    /// Builds a copy of the expression appended with a `MATCH` query against
  300|       |    /// the given pattern.
  301|       |    ///
  302|       |    ///     let title = Expression<String>("title")
  303|       |    ///     title.match("swift AND programming")
  304|       |    ///     // "title" MATCH 'swift AND programming'
  305|       |    ///
  306|       |    /// - Parameter pattern: A pattern to match.
  307|       |    ///
  308|       |    /// - Returns: A copy of the expression appended with a `MATCH` query
  309|       |    ///   against the given pattern.
  310|      0|    public func match(_ pattern: String) -> Expression<Bool> {
  311|      0|        Function.match.infix(self, pattern)
  312|      0|    }
  313|       |
  314|       |    /// Builds a copy of the expression appended with a `REGEXP` query against
  315|       |    /// the given pattern.
  316|       |    ///
  317|       |    /// - Parameter pattern: A pattern to match.
  318|       |    ///
  319|       |    /// - Returns: A copy of the expression appended with a `REGEXP` query
  320|       |    ///   against the given pattern.
  321|      0|    public func regexp(_ pattern: String) -> Expression<Bool> {
  322|      0|        Function.regexp.infix(self, pattern)
  323|      0|    }
  324|       |
  325|       |    /// Builds a copy of the expression appended with a `COLLATE` clause with
  326|       |    /// the given sequence.
  327|       |    ///
  328|       |    ///     let name = Expression<String>("name")
  329|       |    ///     name.collate(.Nocase)
  330|       |    ///     // "name" COLLATE NOCASE
  331|       |    ///
  332|       |    /// - Parameter collation: A collating sequence.
  333|       |    ///
  334|       |    /// - Returns: A copy of the expression appended with a `COLLATE` clause
  335|       |    ///   with the given sequence.
  336|      0|    public func collate(_ collation: Collation) -> Expression<UnderlyingType> {
  337|      0|        Function.collate.infix(self, collation)
  338|      0|    }
  339|       |
  340|       |    /// Builds a copy of the expression wrapped with the `ltrim` function.
  341|       |    ///
  342|       |    ///     let name = Expression<String>("name")
  343|       |    ///     name.ltrim()
  344|       |    ///     // ltrim("name")
  345|       |    ///     name.ltrim([" ", "\t"])
  346|       |    ///     // ltrim("name", ' \t')
  347|       |    ///
  348|       |    /// - Parameter characters: A set of characters to trim.
  349|       |    ///
  350|       |    /// - Returns: A copy of the expression wrapped with the `ltrim` function.
  351|      0|    public func ltrim(_ characters: Set<Character>? = nil) -> Expression<UnderlyingType> {
  352|      0|        guard let characters = characters else {
  353|      0|            return Function.ltrim.wrap(self)
  354|      0|        }
  355|      0|        return Function.ltrim.wrap([self, String(characters)])
  356|      0|    }
  357|       |
  358|       |    /// Builds a copy of the expression wrapped with the `rtrim` function.
  359|       |    ///
  360|       |    ///     let name = Expression<String>("name")
  361|       |    ///     name.rtrim()
  362|       |    ///     // rtrim("name")
  363|       |    ///     name.rtrim([" ", "\t"])
  364|       |    ///     // rtrim("name", ' \t')
  365|       |    ///
  366|       |    /// - Parameter characters: A set of characters to trim.
  367|       |    ///
  368|       |    /// - Returns: A copy of the expression wrapped with the `rtrim` function.
  369|      0|    public func rtrim(_ characters: Set<Character>? = nil) -> Expression<UnderlyingType> {
  370|      0|        guard let characters = characters else {
  371|      0|            return Function.rtrim.wrap(self)
  372|      0|        }
  373|      0|        return Function.rtrim.wrap([self, String(characters)])
  374|      0|    }
  375|       |
  376|       |    /// Builds a copy of the expression wrapped with the `trim` function.
  377|       |    ///
  378|       |    ///     let name = Expression<String>("name")
  379|       |    ///     name.trim()
  380|       |    ///     // trim("name")
  381|       |    ///     name.trim([" ", "\t"])
  382|       |    ///     // trim("name", ' \t')
  383|       |    ///
  384|       |    /// - Parameter characters: A set of characters to trim.
  385|       |    ///
  386|       |    /// - Returns: A copy of the expression wrapped with the `trim` function.
  387|      0|    public func trim(_ characters: Set<Character>? = nil) -> Expression<UnderlyingType> {
  388|      0|        guard let characters = characters else {
  389|      0|            return Function.trim.wrap([self])
  390|      0|        }
  391|      0|        return Function.trim.wrap([self, String(characters)])
  392|      0|    }
  393|       |
  394|       |    /// Builds a copy of the expression wrapped with the `replace` function.
  395|       |    ///
  396|       |    ///     let email = Expression<String>("email")
  397|       |    ///     email.replace("@mac.com", with: "@icloud.com")
  398|       |    ///     // replace("email", '@mac.com', '@icloud.com')
  399|       |    ///
  400|       |    /// - Parameters:
  401|       |    ///
  402|       |    ///   - pattern: A pattern to match.
  403|       |    ///
  404|       |    ///   - replacement: The replacement string.
  405|       |    ///
  406|       |    /// - Returns: A copy of the expression wrapped with the `replace` function.
  407|      0|    public func replace(_ pattern: String, with replacement: String) -> Expression<UnderlyingType> {
  408|      0|        Function.replace.wrap([self, pattern, replacement])
  409|      0|    }
  410|       |
  411|      0|    public func substring(_ location: Int, length: Int? = nil) -> Expression<UnderlyingType> {
  412|      0|        guard let length = length else {
  413|      0|            return Function.substr.wrap([self, location])
  414|      0|        }
  415|      0|        return Function.substr.wrap([self, location, length])
  416|      0|    }
  417|       |
  418|      0|    public subscript(range: Range<Int>) -> Expression<UnderlyingType> {
  419|      0|        substring(range.lowerBound, length: range.upperBound - range.lowerBound)
  420|      0|    }
  421|       |
  422|       |}
  423|       |
  424|       |extension ExpressionType where UnderlyingType == String? {
  425|       |
  426|       |    /// Builds a copy of the expression wrapped with the `length` function.
  427|       |    ///
  428|       |    ///     let name = Expression<String?>("name")
  429|       |    ///     name.length
  430|       |    ///     // length("name")
  431|       |    ///
  432|       |    /// - Returns: A copy of the expression wrapped with the `length` function.
  433|      0|    public var length: Expression<Int?> {
  434|      0|        Function.length.wrap(self)
  435|      0|    }
  436|       |
  437|       |    /// Builds a copy of the expression wrapped with the `lower` function.
  438|       |    ///
  439|       |    ///     let name = Expression<String?>("name")
  440|       |    ///     name.lowercaseString
  441|       |    ///     // lower("name")
  442|       |    ///
  443|       |    /// - Returns: A copy of the expression wrapped with the `lower` function.
  444|      0|    public var lowercaseString: Expression<UnderlyingType> {
  445|      0|        Function.lower.wrap(self)
  446|      0|    }
  447|       |
  448|       |    /// Builds a copy of the expression wrapped with the `upper` function.
  449|       |    ///
  450|       |    ///     let name = Expression<String?>("name")
  451|       |    ///     name.uppercaseString
  452|       |    ///     // lower("name")
  453|       |    ///
  454|       |    /// - Returns: A copy of the expression wrapped with the `upper` function.
  455|      0|    public var uppercaseString: Expression<UnderlyingType> {
  456|      0|        Function.upper.wrap(self)
  457|      0|    }
  458|       |
  459|       |    /// Builds a copy of the expression appended with a `LIKE` query against the
  460|       |    /// given pattern.
  461|       |    ///
  462|       |    ///     let email = Expression<String?>("email")
  463|       |    ///     email.like("%@example.com")
  464|       |    ///     // "email" LIKE '%@example.com'
  465|       |    ///     email.like("99\\%@%", escape: "\\")
  466|       |    ///     // "email" LIKE '99\%@%' ESCAPE '\'
  467|       |    ///
  468|       |    /// - Parameters:
  469|       |    ///
  470|       |    ///   - pattern: A pattern to match.
  471|       |    ///
  472|       |    ///   - escape: An (optional) character designated for escaping
  473|       |    ///     pattern-matching characters (*i.e.*, the `%` and `_` characters).
  474|       |    ///
  475|       |    /// - Returns: A copy of the expression appended with a `LIKE` query against
  476|       |    ///   the given pattern.
  477|      0|    public func like(_ pattern: String, escape character: Character? = nil) -> Expression<Bool?> {
  478|      0|        guard let character = character else {
  479|      0|            return Function.like.infix(self, pattern)
  480|      0|        }
  481|      0|        return Expression("(\(template) LIKE ? ESCAPE ?)", bindings + [pattern, String(character)])
  482|      0|    }
  483|       |
  484|       |    /// Builds a copy of the expression appended with a `LIKE` query against the
  485|       |    /// given pattern.
  486|       |    ///
  487|       |    ///     let email = Expression<String>("email")
  488|       |    ///     let pattern = Expression<String>("pattern")
  489|       |    ///     email.like(pattern)
  490|       |    ///     // "email" LIKE "pattern"
  491|       |    ///
  492|       |    /// - Parameters:
  493|       |    ///
  494|       |    ///   - pattern: A pattern to match.
  495|       |    ///
  496|       |    ///   - escape: An (optional) character designated for escaping
  497|       |    ///     pattern-matching characters (*i.e.*, the `%` and `_` characters).
  498|       |    ///
  499|       |    /// - Returns: A copy of the expression appended with a `LIKE` query against
  500|       |    ///   the given pattern.
  501|      0|    public func like(_ pattern: Expression<String>, escape character: Character? = nil) -> Expression<Bool?> {
  502|      0|        guard let character = character else {
  503|      0|            return Function.like.infix(self, pattern)
  504|      0|        }
  505|      0|        let like: Expression<Bool> = Function.like.infix(self, pattern, wrap: false)
  506|      0|        return Expression("(\(like.template) ESCAPE ?)", like.bindings + [String(character)])
  507|      0|    }
  508|       |
  509|       |    /// Builds a copy of the expression appended with a `GLOB` query against the
  510|       |    /// given pattern.
  511|       |    ///
  512|       |    ///     let path = Expression<String?>("path")
  513|       |    ///     path.glob("*.png")
  514|       |    ///     // "path" GLOB '*.png'
  515|       |    ///
  516|       |    /// - Parameter pattern: A pattern to match.
  517|       |    ///
  518|       |    /// - Returns: A copy of the expression appended with a `GLOB` query against
  519|       |    ///   the given pattern.
  520|      0|    public func glob(_ pattern: String) -> Expression<Bool?> {
  521|      0|        Function.glob.infix(self, pattern)
  522|      0|    }
  523|       |
  524|       |    /// Builds a copy of the expression appended with a `MATCH` query against
  525|       |    /// the given pattern.
  526|       |    ///
  527|       |    ///     let title = Expression<String?>("title")
  528|       |    ///     title.match("swift AND programming")
  529|       |    ///     // "title" MATCH 'swift AND programming'
  530|       |    ///
  531|       |    /// - Parameter pattern: A pattern to match.
  532|       |    ///
  533|       |    /// - Returns: A copy of the expression appended with a `MATCH` query
  534|       |    ///   against the given pattern.
  535|      0|    public func match(_ pattern: String) -> Expression<Bool> {
  536|      0|        Function.match.infix(self, pattern)
  537|      0|    }
  538|       |
  539|       |    /// Builds a copy of the expression appended with a `REGEXP` query against
  540|       |    /// the given pattern.
  541|       |    ///
  542|       |    /// - Parameter pattern: A pattern to match.
  543|       |    ///
  544|       |    /// - Returns: A copy of the expression appended with a `REGEXP` query
  545|       |    ///   against the given pattern.
  546|      0|    public func regexp(_ pattern: String) -> Expression<Bool?> {
  547|      0|        Function.regexp.infix(self, pattern)
  548|      0|    }
  549|       |
  550|       |    /// Builds a copy of the expression appended with a `COLLATE` clause with
  551|       |    /// the given sequence.
  552|       |    ///
  553|       |    ///     let name = Expression<String?>("name")
  554|       |    ///     name.collate(.Nocase)
  555|       |    ///     // "name" COLLATE NOCASE
  556|       |    ///
  557|       |    /// - Parameter collation: A collating sequence.
  558|       |    ///
  559|       |    /// - Returns: A copy of the expression appended with a `COLLATE` clause
  560|       |    ///   with the given sequence.
  561|      0|    public func collate(_ collation: Collation) -> Expression<UnderlyingType> {
  562|      0|        Function.collate.infix(self, collation)
  563|      0|    }
  564|       |
  565|       |    /// Builds a copy of the expression wrapped with the `ltrim` function.
  566|       |    ///
  567|       |    ///     let name = Expression<String?>("name")
  568|       |    ///     name.ltrim()
  569|       |    ///     // ltrim("name")
  570|       |    ///     name.ltrim([" ", "\t"])
  571|       |    ///     // ltrim("name", ' \t')
  572|       |    ///
  573|       |    /// - Parameter characters: A set of characters to trim.
  574|       |    ///
  575|       |    /// - Returns: A copy of the expression wrapped with the `ltrim` function.
  576|      0|    public func ltrim(_ characters: Set<Character>? = nil) -> Expression<UnderlyingType> {
  577|      0|        guard let characters = characters else {
  578|      0|            return Function.ltrim.wrap(self)
  579|      0|        }
  580|      0|        return Function.ltrim.wrap([self, String(characters)])
  581|      0|    }
  582|       |
  583|       |    /// Builds a copy of the expression wrapped with the `rtrim` function.
  584|       |    ///
  585|       |    ///     let name = Expression<String?>("name")
  586|       |    ///     name.rtrim()
  587|       |    ///     // rtrim("name")
  588|       |    ///     name.rtrim([" ", "\t"])
  589|       |    ///     // rtrim("name", ' \t')
  590|       |    ///
  591|       |    /// - Parameter characters: A set of characters to trim.
  592|       |    ///
  593|       |    /// - Returns: A copy of the expression wrapped with the `rtrim` function.
  594|      0|    public func rtrim(_ characters: Set<Character>? = nil) -> Expression<UnderlyingType> {
  595|      0|        guard let characters = characters else {
  596|      0|            return Function.rtrim.wrap(self)
  597|      0|        }
  598|      0|        return Function.rtrim.wrap([self, String(characters)])
  599|      0|    }
  600|       |
  601|       |    /// Builds a copy of the expression wrapped with the `trim` function.
  602|       |    ///
  603|       |    ///     let name = Expression<String?>("name")
  604|       |    ///     name.trim()
  605|       |    ///     // trim("name")
  606|       |    ///     name.trim([" ", "\t"])
  607|       |    ///     // trim("name", ' \t')
  608|       |    ///
  609|       |    /// - Parameter characters: A set of characters to trim.
  610|       |    ///
  611|       |    /// - Returns: A copy of the expression wrapped with the `trim` function.
  612|      0|    public func trim(_ characters: Set<Character>? = nil) -> Expression<UnderlyingType> {
  613|      0|        guard let characters = characters else {
  614|      0|            return Function.trim.wrap(self)
  615|      0|        }
  616|      0|        return Function.trim.wrap([self, String(characters)])
  617|      0|    }
  618|       |
  619|       |    /// Builds a copy of the expression wrapped with the `replace` function.
  620|       |    ///
  621|       |    ///     let email = Expression<String?>("email")
  622|       |    ///     email.replace("@mac.com", with: "@icloud.com")
  623|       |    ///     // replace("email", '@mac.com', '@icloud.com')
  624|       |    ///
  625|       |    /// - Parameters:
  626|       |    ///
  627|       |    ///   - pattern: A pattern to match.
  628|       |    ///
  629|       |    ///   - replacement: The replacement string.
  630|       |    ///
  631|       |    /// - Returns: A copy of the expression wrapped with the `replace` function.
  632|      0|    public func replace(_ pattern: String, with replacement: String) -> Expression<UnderlyingType> {
  633|      0|        Function.replace.wrap([self, pattern, replacement])
  634|      0|    }
  635|       |
  636|       |    /// Builds a copy of the expression wrapped with the `substr` function.
  637|       |    ///
  638|       |    ///     let title = Expression<String?>("title")
  639|       |    ///     title.substr(-100)
  640|       |    ///     // substr("title", -100)
  641|       |    ///     title.substr(0, length: 100)
  642|       |    ///     // substr("title", 0, 100)
  643|       |    ///
  644|       |    /// - Parameters:
  645|       |    ///
  646|       |    ///   - location: The substring’s start index.
  647|       |    ///
  648|       |    ///   - length: An optional substring length.
  649|       |    ///
  650|       |    /// - Returns: A copy of the expression wrapped with the `substr` function.
  651|      0|    public func substring(_ location: Int, length: Int? = nil) -> Expression<UnderlyingType> {
  652|      0|        guard let length = length else {
  653|      0|            return Function.substr.wrap([self, location])
  654|      0|        }
  655|      0|        return Function.substr.wrap([self, location, length])
  656|      0|    }
  657|       |
  658|       |    /// Builds a copy of the expression wrapped with the `substr` function.
  659|       |    ///
  660|       |    ///     let title = Expression<String?>("title")
  661|       |    ///     title[0..<100]
  662|       |    ///     // substr("title", 0, 100)
  663|       |    ///
  664|       |    /// - Parameter range: The character index range of the substring.
  665|       |    ///
  666|       |    /// - Returns: A copy of the expression wrapped with the `substr` function.
  667|      0|    public subscript(range: Range<Int>) -> Expression<UnderlyingType> {
  668|      0|        substring(range.lowerBound, length: range.upperBound - range.lowerBound)
  669|      0|    }
  670|       |
  671|       |}
  672|       |
  673|       |extension Collection where Iterator.Element: Value {
  674|       |
  675|       |    /// Builds a copy of the expression prepended with an `IN` check against the
  676|       |    /// collection.
  677|       |    ///
  678|       |    ///     let name = Expression<String>("name")
  679|       |    ///     ["alice", "betty"].contains(name)
  680|       |    ///     // "name" IN ('alice', 'betty')
  681|       |    ///
  682|       |    /// - Parameter pattern: A pattern to match.
  683|       |    ///
  684|       |    /// - Returns: A copy of the expression prepended with an `IN` check against
  685|       |    ///   the collection.
  686|      0|    public func contains(_ expression: Expression<Iterator.Element>) -> Expression<Bool> {
  687|      0|        let templates = [String](repeating: "?", count: count).joined(separator: ", ")
  688|      0|        return Function.in.infix(expression, Expression<Void>("(\(templates))", map { $0.datatypeValue }))
  689|      0|    }
  690|       |
  691|       |    /// Builds a copy of the expression prepended with an `IN` check against the
  692|       |    /// collection.
  693|       |    ///
  694|       |    ///     let name = Expression<String?>("name")
  695|       |    ///     ["alice", "betty"].contains(name)
  696|       |    ///     // "name" IN ('alice', 'betty')
  697|       |    ///
  698|       |    /// - Parameter pattern: A pattern to match.
  699|       |    ///
  700|       |    /// - Returns: A copy of the expression prepended with an `IN` check against
  701|       |    ///   the collection.
  702|      0|    public func contains(_ expression: Expression<Iterator.Element?>) -> Expression<Bool?> {
  703|      0|        let templates = [String](repeating: "?", count: count).joined(separator: ", ")
  704|      0|        return Function.in.infix(expression, Expression<Void>("(\(templates))", map { $0.datatypeValue }))
  705|      0|    }
  706|       |
  707|       |}
  708|       |
  709|       |extension String {
  710|       |
  711|       |    /// Builds a copy of the expression appended with a `LIKE` query against the
  712|       |    /// given pattern.
  713|       |    ///
  714|       |    ///     let email = "some@thing.com"
  715|       |    ///     let pattern = Expression<String>("pattern")
  716|       |    ///     email.like(pattern)
  717|       |    ///     // 'some@thing.com' LIKE "pattern"
  718|       |    ///
  719|       |    /// - Parameters:
  720|       |    ///
  721|       |    ///   - pattern: A pattern to match.
  722|       |    ///
  723|       |    ///   - escape: An (optional) character designated for escaping
  724|       |    ///     pattern-matching characters (*i.e.*, the `%` and `_` characters).
  725|       |    ///
  726|       |    /// - Returns: A copy of the expression appended with a `LIKE` query against
  727|       |    ///   the given pattern.
  728|      0|    public func like(_ pattern: Expression<String>, escape character: Character? = nil) -> Expression<Bool> {
  729|      0|        guard let character = character else {
  730|      0|            return Function.like.infix(self, pattern)
  731|      0|        }
  732|      0|        let like: Expression<Bool> = Function.like.infix(self, pattern, wrap: false)
  733|      0|        return Expression("(\(like.template) ESCAPE ?)", like.bindings + [String(character)])
  734|      0|    }
  735|       |
  736|       |}
  737|       |
  738|       |/// Builds a copy of the given expressions wrapped with the `ifnull` function.
  739|       |///
  740|       |///     let name = Expression<String?>("name")
  741|       |///     name ?? "An Anonymous Coward"
  742|       |///     // ifnull("name", 'An Anonymous Coward')
  743|       |///
  744|       |/// - Parameters:
  745|       |///
  746|       |///   - optional: An optional expression.
  747|       |///
  748|       |///   - defaultValue: A fallback value for when the optional expression is
  749|       |///     `nil`.
  750|       |///
  751|       |/// - Returns: A copy of the given expressions wrapped with the `ifnull`
  752|       |///   function.
  753|      0|public func ??<V: Value>(optional: Expression<V?>, defaultValue: V) -> Expression<V> {
  754|      0|    Function.ifnull.wrap([optional, defaultValue])
  755|      0|}
  756|       |
  757|       |/// Builds a copy of the given expressions wrapped with the `ifnull` function.
  758|       |///
  759|       |///     let nick = Expression<String?>("nick")
  760|       |///     let name = Expression<String>("name")
  761|       |///     nick ?? name
  762|       |///     // ifnull("nick", "name")
  763|       |///
  764|       |/// - Parameters:
  765|       |///
  766|       |///   - optional: An optional expression.
  767|       |///
  768|       |///   - defaultValue: A fallback expression for when the optional expression is
  769|       |///     `nil`.
  770|       |///
  771|       |/// - Returns: A copy of the given expressions wrapped with the `ifnull`
  772|       |///   function.
  773|      0|public func ??<V: Value>(optional: Expression<V?>, defaultValue: Expression<V>) -> Expression<V> {
  774|      0|    Function.ifnull.wrap([optional, defaultValue])
  775|      0|}
  776|       |
  777|       |/// Builds a copy of the given expressions wrapped with the `ifnull` function.
  778|       |///
  779|       |///     let nick = Expression<String?>("nick")
  780|       |///     let name = Expression<String?>("name")
  781|       |///     nick ?? name
  782|       |///     // ifnull("nick", "name")
  783|       |///
  784|       |/// - Parameters:
  785|       |///
  786|       |///   - optional: An optional expression.
  787|       |///
  788|       |///   - defaultValue: A fallback expression for when the optional expression is
  789|       |///     `nil`.
  790|       |///
  791|       |/// - Returns: A copy of the given expressions wrapped with the `ifnull`
  792|       |///   function.
  793|      0|public func ??<V: Value>(optional: Expression<V?>, defaultValue: Expression<V?>) -> Expression<V> {
  794|      0|    Function.ifnull.wrap([optional, defaultValue])
  795|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Typed/CustomFunctions.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |public extension Connection {
   26|       |
   27|       |    /// Creates or redefines a custom SQL function.
   28|       |    ///
   29|       |    /// - Parameters:
   30|       |    ///
   31|       |    ///   - function: The name of the function to create or redefine.
   32|       |    ///
   33|       |    ///   - deterministic: Whether or not the function is deterministic (_i.e._
   34|       |    ///     the function always returns the same result for a given input).
   35|       |    ///
   36|       |    ///     Default: `false`
   37|       |    ///
   38|       |    ///   - block: A block of code to run when the function is called.
   39|       |    ///     The assigned types must be explicit.
   40|       |    ///
   41|       |    /// - Returns: A closure returning an SQL expression to call the function.
   42|       |    func createFunction<Z: Value>(_ function: String, deterministic: Bool = false, _ block: @escaping () -> Z) throws
   43|      0|                    -> () -> Expression<Z> {
   44|      0|        let fn = try createFunction(function, 0, deterministic) { _ in block() }
   45|      0|        return { fn([]) }
   46|      0|    }
   47|       |
   48|       |    func createFunction<Z: Value>(_ function: String, deterministic: Bool = false, _ block: @escaping () -> Z?) throws
   49|      0|                    -> () -> Expression<Z?> {
   50|      0|        let fn = try createFunction(function, 0, deterministic) { _ in block() }
   51|      0|        return { fn([]) }
   52|      0|    }
   53|       |
   54|       |    // MARK: -
   55|       |
   56|       |    func createFunction<Z: Value, A: Value>(_ function: String, deterministic: Bool = false, _ block: @escaping (A) -> Z) throws
   57|      0|                    -> (Expression<A>) -> Expression<Z> {
   58|      0|        let fn = try createFunction(function, 1, deterministic) { args in block(value(args[0])) }
   59|      0|        return { arg in fn([arg]) }
   60|      0|    }
   61|       |
   62|       |    func createFunction<Z: Value, A: Value>(_ function: String, deterministic: Bool = false, _ block: @escaping (A?) -> Z) throws
   63|      0|                    -> (Expression<A?>) -> Expression<Z> {
   64|      0|        let fn = try createFunction(function, 1, deterministic) { args in block(args[0].map(value)) }
   65|      0|        return { arg in fn([arg]) }
   66|      0|    }
   67|       |
   68|       |    func createFunction<Z: Value, A: Value>(_ function: String, deterministic: Bool = false, _ block: @escaping (A) -> Z?) throws
   69|      0|                    -> (Expression<A>) -> Expression<Z?> {
   70|      0|        let fn = try createFunction(function, 1, deterministic) { args in block(value(args[0])) }
   71|      0|        return { arg in fn([arg]) }
   72|      0|    }
   73|       |
   74|       |    func createFunction<Z: Value, A: Value>(_ function: String, deterministic: Bool = false, _ block: @escaping (A?) -> Z?) throws
   75|      0|                    -> (Expression<A?>) -> Expression<Z?> {
   76|      0|        let fn = try createFunction(function, 1, deterministic) { args in block(args[0].map(value)) }
   77|      0|        return { arg in fn([arg]) }
   78|      0|    }
   79|       |
   80|       |    // MARK: -
   81|       |
   82|       |    func createFunction<Z: Value, A: Value, B: Value>(_ function: String, deterministic: Bool = false,
   83|       |                                                      _ block: @escaping (A, B) -> Z) throws -> (Expression<A>, Expression<B>)
   84|      0|    -> Expression<Z> {
   85|      0|        let fn = try createFunction(function, 2, deterministic) { args in block(value(args[0]), value(args[1])) }
   86|      0|        return { a, b in fn([a, b]) }
   87|      0|    }
   88|       |
   89|       |    func createFunction<Z: Value, A: Value, B: Value>(_ function: String, deterministic: Bool = false,
   90|       |                                                      _ block: @escaping (A?, B) -> Z) throws
   91|      0|                    -> (Expression<A?>, Expression<B>) -> Expression<Z> {
   92|      0|        let fn = try createFunction(function, 2, deterministic) { args in block(args[0].map(value), value(args[1])) }
   93|      0|        return { a, b in fn([a, b]) }
   94|      0|    }
   95|       |
   96|       |    func createFunction<Z: Value, A: Value, B: Value>(_ function: String, deterministic: Bool = false,
   97|       |                                                      _ block: @escaping (A, B?) -> Z) throws ->
   98|      0|            (Expression<A>, Expression<B?>) -> Expression<Z> {
   99|      0|        let fn = try createFunction(function, 2, deterministic) { args in block(value(args[0]), args[1].map(value)) }
  100|      0|        return { a, b in fn([a, b]) }
  101|      0|    }
  102|       |
  103|       |    func createFunction<Z: Value, A: Value, B: Value>(_ function: String, deterministic: Bool = false,
  104|       |                                                      _ block: @escaping (A, B) -> Z?) throws
  105|      0|                    -> (Expression<A>, Expression<B>) -> Expression<Z?> {
  106|      0|        let fn = try createFunction(function, 2, deterministic) { args in block(value(args[0]), value(args[1])) }
  107|      0|        return { a, b in fn([a, b]) }
  108|      0|    }
  109|       |
  110|       |    func createFunction<Z: Value, A: Value, B: Value>(_ function: String, deterministic: Bool = false,
  111|       |                                                      _ block: @escaping (A?, B?) -> Z) throws
  112|      0|                    -> (Expression<A?>, Expression<B?>) -> Expression<Z> {
  113|      0|        let fn = try createFunction(function, 2, deterministic) { args in block(args[0].map(value), args[1].map(value)) }
  114|      0|        return { a, b in fn([a, b]) }
  115|      0|    }
  116|       |
  117|       |    func createFunction<Z: Value, A: Value, B: Value>(_ function: String, deterministic: Bool = false,
  118|       |                                                      _ block: @escaping (A?, B) -> Z?) throws
  119|      0|                    -> (Expression<A?>, Expression<B>) -> Expression<Z?> {
  120|      0|        let fn = try createFunction(function, 2, deterministic) { args in block(args[0].map(value), value(args[1])) }
  121|      0|        return { a, b in fn([a, b]) }
  122|      0|    }
  123|       |
  124|       |    func createFunction<Z: Value, A: Value, B: Value>(_ function: String, deterministic: Bool = false,
  125|       |                                                      _ block: @escaping (A, B?) -> Z?) throws
  126|      0|                    -> (Expression<A>, Expression<B?>) -> Expression<Z?> {
  127|      0|        let fn = try createFunction(function, 2, deterministic) { args in block(value(args[0]), args[1].map(value)) }
  128|      0|        return { a, b in fn([a, b]) }
  129|      0|    }
  130|       |
  131|       |    func createFunction<Z: Value, A: Value, B: Value>(_ function: String, deterministic: Bool = false,
  132|       |                                                      _ block: @escaping (A?, B?) -> Z?) throws
  133|      0|                    -> (Expression<A?>, Expression<B?>) -> Expression<Z?> {
  134|      0|        let fn = try createFunction(function, 2, deterministic) { args in block(args[0].map(value), args[1].map(value)) }
  135|      0|        return { a, b in fn([a, b]) }
  136|      0|    }
  137|       |
  138|       |    // MARK: -
  139|       |
  140|       |    fileprivate func createFunction<Z: Value>(_ function: String, _ argumentCount: UInt, _ deterministic: Bool,
  141|       |                                              _ block: @escaping ([Binding?]) -> Z) throws
  142|      0|                    -> ([Expressible]) -> Expression<Z> {
  143|      0|        createFunction(function, argumentCount: argumentCount, deterministic: deterministic) { arguments in
  144|      0|            block(arguments).datatypeValue
  145|      0|        }
  146|      0|        return { arguments in
  147|      0|            function.quote().wrap(", ".join(arguments))
  148|      0|        }
  149|      0|    }
  150|       |
  151|       |    fileprivate func createFunction<Z: Value>(_ function: String, _ argumentCount: UInt, _ deterministic: Bool,
  152|       |                                              _ block: @escaping ([Binding?]) -> Z?) throws
  153|      0|                    -> ([Expressible]) -> Expression<Z?> {
  154|      0|        createFunction(function, argumentCount: argumentCount, deterministic: deterministic) { arguments in
  155|      0|            block(arguments)?.datatypeValue
  156|      0|        }
  157|      0|        return { arguments in
  158|      0|            function.quote().wrap(", ".join(arguments))
  159|      0|        }
  160|      0|    }
  161|       |
  162|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Typed/DateAndTimeFunctions.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |import Foundation
   26|       |
   27|       |/// All five date and time functions take a time string as an argument.
   28|       |/// The time string is followed by zero or more modifiers.
   29|       |/// The strftime() function also takes a format string as its first argument.
   30|       |///
   31|       |/// https://www.sqlite.org/lang_datefunc.html
   32|       |public class DateFunctions {
   33|       |    /// The date() function returns the date in this format: YYYY-MM-DD.
   34|      0|    public static func date(_ timestring: String, _ modifiers: String...) -> Expression<Date?> {
   35|      0|        timefunction("date", timestring: timestring, modifiers: modifiers)
   36|      0|    }
   37|       |
   38|       |    /// The time() function returns the time as HH:MM:SS.
   39|      0|    public static func time(_ timestring: String, _ modifiers: String...) -> Expression<Date?> {
   40|      0|        timefunction("time", timestring: timestring, modifiers: modifiers)
   41|      0|    }
   42|       |
   43|       |    /// The datetime() function returns "YYYY-MM-DD HH:MM:SS".
   44|      0|    public static func datetime(_ timestring: String, _ modifiers: String...) -> Expression<Date?> {
   45|      0|        timefunction("datetime", timestring: timestring, modifiers: modifiers)
   46|      0|    }
   47|       |
   48|       |    /// The julianday() function returns the Julian day -
   49|       |    /// the number of days since noon in Greenwich on November 24, 4714 B.C.
   50|      0|    public static func julianday(_ timestring: String, _ modifiers: String...) -> Expression<Date?> {
   51|      0|        timefunction("julianday", timestring: timestring, modifiers: modifiers)
   52|      0|    }
   53|       |
   54|       |    ///  The strftime() routine returns the date formatted according to the format string specified as the first argument.
   55|      0|    public static func strftime(_ format: String, _ timestring: String, _ modifiers: String...) -> Expression<Date?> {
   56|      0|        if !modifiers.isEmpty {
   57|      0|            let templates = [String](repeating: "?", count: modifiers.count).joined(separator: ", ")
   58|      0|            return Expression("strftime(?, ?, \(templates))", [format, timestring] + modifiers)
   59|      0|        }
   60|      0|        return Expression("strftime(?, ?)", [format, timestring])
   61|      0|    }
   62|       |
   63|      0|    private static func timefunction(_ name: String, timestring: String, modifiers: [String]) -> Expression<Date?> {
   64|      0|        if !modifiers.isEmpty {
   65|      0|            let templates = [String](repeating: "?", count: modifiers.count).joined(separator: ", ")
   66|      0|            return Expression("\(name)(?, \(templates))", [timestring] + modifiers)
   67|      0|        }
   68|      0|        return Expression("\(name)(?)", [timestring])
   69|      0|    }
   70|       |}
   71|       |
   72|       |extension Date {
   73|      0|    public var date: Expression<Date?> {
   74|      0|        DateFunctions.date(dateFormatter.string(from: self))
   75|      0|    }
   76|       |
   77|      0|    public var time: Expression<Date?> {
   78|      0|        DateFunctions.time(dateFormatter.string(from: self))
   79|      0|    }
   80|       |
   81|      0|    public var datetime: Expression<Date?> {
   82|      0|        DateFunctions.datetime(dateFormatter.string(from: self))
   83|      0|    }
   84|       |
   85|      0|    public var julianday: Expression<Date?> {
   86|      0|        DateFunctions.julianday(dateFormatter.string(from: self))
   87|      0|    }
   88|       |}
   89|       |
   90|       |extension Expression where UnderlyingType == Date {
   91|      0|    public var date: Expression<Date> {
   92|      0|        Expression<Date>("date(\(template))", bindings)
   93|      0|    }
   94|       |
   95|      0|    public var time: Expression<Date> {
   96|      0|        Expression<Date>("time(\(template))", bindings)
   97|      0|    }
   98|       |
   99|      0|    public var datetime: Expression<Date> {
  100|      0|        Expression<Date>("datetime(\(template))", bindings)
  101|      0|    }
  102|       |
  103|      0|    public var julianday: Expression<Date> {
  104|      0|        Expression<Date>("julianday(\(template))", bindings)
  105|      0|    }
  106|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Typed/Expression.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |public protocol ExpressionType: Expressible { // extensions cannot have inheritance clauses
   26|       |
   27|       |    associatedtype UnderlyingType = Void
   28|       |
   29|       |    var template: String { get }
   30|       |    var bindings: [Binding?] { get }
   31|       |
   32|       |    init(_ template: String, _ bindings: [Binding?])
   33|       |
   34|       |}
   35|       |
   36|       |extension ExpressionType {
   37|       |
   38|  13.8k|    public init(literal: String) {
   39|  13.8k|        self.init(literal, [])
   40|  13.8k|    }
   41|       |
   42|  3.09k|    public init(_ identifier: String) {
   43|  3.09k|        self.init(literal: identifier.quote())
   44|  3.09k|    }
   45|       |
   46|  27.2k|    public init<U: ExpressionType>(_ expression: U) {
   47|  27.2k|        self.init(expression.template, expression.bindings)
   48|  27.2k|    }
   49|       |
   50|       |}
   51|       |
   52|       |/// An `Expression` represents a raw SQL fragment and any associated bindings.
   53|       |public struct Expression<Datatype>: ExpressionType {
   54|       |
   55|       |    public typealias UnderlyingType = Datatype
   56|       |
   57|       |    public var template: String
   58|       |    public var bindings: [Binding?]
   59|       |
   60|  92.7k|    public init(_ template: String, _ bindings: [Binding?]) {
   61|  92.7k|        self.template = template
   62|  92.7k|        self.bindings = bindings
   63|  92.7k|    }
   64|       |
   65|       |}
   66|       |
   67|       |public protocol Expressible {
   68|       |
   69|       |    var expression: Expression<Void> { get }
   70|       |
   71|       |}
   72|       |
   73|       |extension Expressible {
   74|       |
   75|       |    // naïve compiler for statements that can’t be bound, e.g., CREATE TABLE
   76|       |    // FIXME: make internal (0.13.0)
   77|      8|    public func asSQL() -> String {
   78|      8|        let expressed = expression
   79|      8|        var idx = 0
   80|  2.41k|        return expressed.template.reduce("") { template, character in
   81|  2.41k|            let transcoded: String
   82|  2.41k|
   83|  2.41k|            if character == "?" {
   84|     46|                transcoded = transcode(expressed.bindings[idx])
   85|     46|                idx += 1
   86|  2.41k|            } else {
   87|  2.36k|                transcoded = String(character)
   88|  2.41k|            }
   89|  2.41k|            return template + transcoded
   90|  2.41k|        }
   91|      8|    }
   92|       |
   93|       |}
   94|       |
   95|       |extension ExpressionType {
   96|       |
   97|  35.9k|    public var expression: Expression<Void> {
   98|  35.9k|        Expression(template, bindings)
   99|  35.9k|    }
  100|       |
  101|      0|    public var asc: Expressible {
  102|      0|        " ".join([self, Expression<Void>(literal: "ASC")])
  103|      0|    }
  104|       |
  105|      2|    public var desc: Expressible {
  106|      2|        " ".join([self, Expression<Void>(literal: "DESC")])
  107|      2|    }
  108|       |
  109|       |}
  110|       |
  111|       |extension ExpressionType where UnderlyingType: Value {
  112|       |
  113|  1.71k|    public init(value: UnderlyingType) {
  114|  1.71k|        self.init("?", [value.datatypeValue])
  115|  1.71k|    }
  116|       |
  117|       |}
  118|       |
  119|       |extension ExpressionType where UnderlyingType: _OptionalType, UnderlyingType.WrappedType: Value {
  120|       |
  121|      0|    public static var null: Self {
  122|      0|        self.init(value: nil)
  123|      0|    }
  124|       |
  125|      0|    public init(value: UnderlyingType.WrappedType?) {
  126|      0|        self.init("?", [value?.datatypeValue])
  127|      0|    }
  128|       |
  129|       |}
  130|       |
  131|       |extension Value {
  132|       |
  133|  1.71k|    public var expression: Expression<Void> {
  134|  1.71k|        Expression(value: self).expression
  135|  1.71k|    }
  136|       |
  137|       |}
  138|       |
  139|       |public let rowid = Expression<Int64>("ROWID")
  140|       |
  141|      0|public func cast<T: Value, U: Value>(_ expression: Expression<T>) -> Expression<U> {
  142|      0|    Expression("CAST (\(expression.template) AS \(U.declaredDatatype))", expression.bindings)
  143|      0|}
  144|       |
  145|      0|public func cast<T: Value, U: Value>(_ expression: Expression<T?>) -> Expression<U?> {
  146|      0|    Expression("CAST (\(expression.template) AS \(U.declaredDatatype))", expression.bindings)
  147|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Typed/Operators.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |// TODO: use `@warn_unused_result` by the time operator functions support it
   26|       |
   27|       |private enum Operator: String {
   28|       |    case plus = "+"
   29|       |    case minus = "-"
   30|       |    case or = "OR"
   31|       |    case and = "AND"
   32|       |    case not = "NOT "
   33|       |    case mul = "*"
   34|       |    case div = "/"
   35|       |    case mod = "%"
   36|       |    case bitwiseLeft = "<<"
   37|       |    case bitwiseRight = ">>"
   38|       |    case bitwiseAnd = "&"
   39|       |    case bitwiseOr = "|"
   40|       |    case bitwiseXor = "~"
   41|       |    case eq = "="
   42|       |    case neq = "!="
   43|       |    case gt = ">"
   44|       |    case lt = "<"
   45|       |    case gte = ">="
   46|       |    case lte = "<="
   47|       |    case concatenate = "||"
   48|       |
   49|  1.60k|    func infix<T>(_ lhs: Expressible, _ rhs: Expressible, wrap: Bool = true) -> Expression<T> {
   50|  1.60k|        self.rawValue.infix(lhs, rhs, wrap: wrap)
   51|  1.60k|    }
   52|       |
   53|      0|    func wrap<T>(_ expression: Expressible) -> Expression<T> {
   54|      0|        self.rawValue.wrap(expression)
   55|      0|    }
   56|       |}
   57|       |
   58|      0|public func +(lhs: Expression<String>, rhs: Expression<String>) -> Expression<String> {
   59|      0|    Operator.concatenate.infix(lhs, rhs)
   60|      0|}
   61|       |
   62|      0|public func +(lhs: Expression<String>, rhs: Expression<String?>) -> Expression<String?> {
   63|      0|    Operator.concatenate.infix(lhs, rhs)
   64|      0|}
   65|      0|public func +(lhs: Expression<String?>, rhs: Expression<String>) -> Expression<String?> {
   66|      0|    Operator.concatenate.infix(lhs, rhs)
   67|      0|}
   68|      0|public func +(lhs: Expression<String?>, rhs: Expression<String?>) -> Expression<String?> {
   69|      0|    Operator.concatenate.infix(lhs, rhs)
   70|      0|}
   71|      0|public func +(lhs: Expression<String>, rhs: String) -> Expression<String> {
   72|      0|    Operator.concatenate.infix(lhs, rhs)
   73|      0|}
   74|      0|public func +(lhs: Expression<String?>, rhs: String) -> Expression<String?> {
   75|      0|    Operator.concatenate.infix(lhs, rhs)
   76|      0|}
   77|      0|public func +(lhs: String, rhs: Expression<String>) -> Expression<String> {
   78|      0|    Operator.concatenate.infix(lhs, rhs)
   79|      0|}
   80|      0|public func +(lhs: String, rhs: Expression<String?>) -> Expression<String?> {
   81|      0|    Operator.concatenate.infix(lhs, rhs)
   82|      0|}
   83|       |
   84|       |// MARK: -
   85|       |
   86|      0|public func +<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<V> where V.Datatype: Number {
   87|      0|    Operator.plus.infix(lhs, rhs)
   88|      0|}
   89|      0|public func +<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype: Number {
   90|      0|    Operator.plus.infix(lhs, rhs)
   91|      0|}
   92|      0|public func +<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<V?> where V.Datatype: Number {
   93|      0|    Operator.plus.infix(lhs, rhs)
   94|      0|}
   95|      0|public func +<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype: Number {
   96|      0|    Operator.plus.infix(lhs, rhs)
   97|      0|}
   98|      0|public func +<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<V> where V.Datatype: Number {
   99|      0|    Operator.plus.infix(lhs, rhs)
  100|      0|}
  101|      0|public func +<V: Value>(lhs: Expression<V?>, rhs: V) -> Expression<V?> where V.Datatype: Number {
  102|      0|    Operator.plus.infix(lhs, rhs)
  103|      0|}
  104|      0|public func +<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<V> where V.Datatype: Number {
  105|      0|    Operator.plus.infix(lhs, rhs)
  106|      0|}
  107|      0|public func +<V: Value>(lhs: V, rhs: Expression<V?>) -> Expression<V?> where V.Datatype: Number {
  108|      0|    Operator.plus.infix(lhs, rhs)
  109|      0|}
  110|       |
  111|      0|public func -<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<V> where V.Datatype: Number {
  112|      0|    Operator.minus.infix(lhs, rhs)
  113|      0|}
  114|      0|public func -<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype: Number {
  115|      0|    Operator.minus.infix(lhs, rhs)
  116|      0|}
  117|      0|public func -<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<V?> where V.Datatype: Number {
  118|      0|    Operator.minus.infix(lhs, rhs)
  119|      0|}
  120|      0|public func -<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype: Number {
  121|      0|    Operator.minus.infix(lhs, rhs)
  122|      0|}
  123|      0|public func -<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<V> where V.Datatype: Number {
  124|      0|    Operator.minus.infix(lhs, rhs)
  125|      0|}
  126|      0|public func -<V: Value>(lhs: Expression<V?>, rhs: V) -> Expression<V?> where V.Datatype: Number {
  127|      0|    Operator.minus.infix(lhs, rhs)
  128|      0|}
  129|      0|public func -<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<V> where V.Datatype: Number {
  130|      0|    Operator.minus.infix(lhs, rhs)
  131|      0|}
  132|      0|public func -<V: Value>(lhs: V, rhs: Expression<V?>) -> Expression<V?> where V.Datatype: Number {
  133|      0|    Operator.minus.infix(lhs, rhs)
  134|      0|}
  135|       |
  136|      0|public func *<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<V> where V.Datatype: Number {
  137|      0|    Operator.mul.infix(lhs, rhs)
  138|      0|}
  139|      0|public func *<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype: Number {
  140|      0|    Operator.mul.infix(lhs, rhs)
  141|      0|}
  142|      0|public func *<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<V?> where V.Datatype: Number {
  143|      0|    Operator.mul.infix(lhs, rhs)
  144|      0|}
  145|      0|public func *<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype: Number {
  146|      0|    Operator.mul.infix(lhs, rhs)
  147|      0|}
  148|      0|public func *<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<V> where V.Datatype: Number {
  149|      0|    Operator.mul.infix(lhs, rhs)
  150|      0|}
  151|      0|public func *<V: Value>(lhs: Expression<V?>, rhs: V) -> Expression<V?> where V.Datatype: Number {
  152|      0|    Operator.mul.infix(lhs, rhs)
  153|      0|}
  154|      0|public func *<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<V> where V.Datatype: Number {
  155|      0|    Operator.mul.infix(lhs, rhs)
  156|      0|}
  157|      0|public func *<V: Value>(lhs: V, rhs: Expression<V?>) -> Expression<V?> where V.Datatype: Number {
  158|      0|    Operator.mul.infix(lhs, rhs)
  159|      0|}
  160|       |
  161|      0|public func /<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<V> where V.Datatype: Number {
  162|      0|    Operator.div.infix(lhs, rhs)
  163|      0|}
  164|      0|public func /<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype: Number {
  165|      0|    Operator.div.infix(lhs, rhs)
  166|      0|}
  167|      0|public func /<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<V?> where V.Datatype: Number {
  168|      0|    Operator.div.infix(lhs, rhs)
  169|      0|}
  170|      0|public func /<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype: Number {
  171|      0|    Operator.div.infix(lhs, rhs)
  172|      0|}
  173|      0|public func /<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<V> where V.Datatype: Number {
  174|      0|    Operator.div.infix(lhs, rhs)
  175|      0|}
  176|      0|public func /<V: Value>(lhs: Expression<V?>, rhs: V) -> Expression<V?> where V.Datatype: Number {
  177|      0|    Operator.div.infix(lhs, rhs)
  178|      0|}
  179|      0|public func /<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<V> where V.Datatype: Number {
  180|      0|    Operator.div.infix(lhs, rhs)
  181|      0|}
  182|      0|public func /<V: Value>(lhs: V, rhs: Expression<V?>) -> Expression<V?> where V.Datatype: Number {
  183|      0|    Operator.div.infix(lhs, rhs)
  184|      0|}
  185|       |
  186|      0|public prefix func -<V: Value>(rhs: Expression<V>) -> Expression<V> where V.Datatype: Number {
  187|      0|    Operator.minus.wrap(rhs)
  188|      0|}
  189|      0|public prefix func -<V: Value>(rhs: Expression<V?>) -> Expression<V?> where V.Datatype: Number {
  190|      0|    Operator.minus.wrap(rhs)
  191|      0|}
  192|       |
  193|       |// MARK: -
  194|       |
  195|      0|public func %<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<V> where V.Datatype == Int64 {
  196|      0|    Operator.mod.infix(lhs, rhs)
  197|      0|}
  198|      0|public func %<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  199|      0|    Operator.mod.infix(lhs, rhs)
  200|      0|}
  201|      0|public func %<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<V?> where V.Datatype == Int64 {
  202|      0|    Operator.mod.infix(lhs, rhs)
  203|      0|}
  204|      0|public func %<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  205|      0|    Operator.mod.infix(lhs, rhs)
  206|      0|}
  207|      0|public func %<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<V> where V.Datatype == Int64 {
  208|      0|    Operator.mod.infix(lhs, rhs)
  209|      0|}
  210|      0|public func %<V: Value>(lhs: Expression<V?>, rhs: V) -> Expression<V?> where V.Datatype == Int64 {
  211|      0|    Operator.mod.infix(lhs, rhs)
  212|      0|}
  213|      0|public func %<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<V> where V.Datatype == Int64 {
  214|      0|    Operator.mod.infix(lhs, rhs)
  215|      0|}
  216|      0|public func %<V: Value>(lhs: V, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  217|      0|    Operator.mod.infix(lhs, rhs)
  218|      0|}
  219|       |
  220|      0|public func <<<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<V> where V.Datatype == Int64 {
  221|      0|    Operator.bitwiseLeft.infix(lhs, rhs)
  222|      0|}
  223|      0|public func <<<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  224|      0|    Operator.bitwiseLeft.infix(lhs, rhs)
  225|      0|}
  226|      0|public func <<<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<V?> where V.Datatype == Int64 {
  227|      0|    Operator.bitwiseLeft.infix(lhs, rhs)
  228|      0|}
  229|      0|public func <<<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  230|      0|    Operator.bitwiseLeft.infix(lhs, rhs)
  231|      0|}
  232|      0|public func <<<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<V> where V.Datatype == Int64 {
  233|      0|    Operator.bitwiseLeft.infix(lhs, rhs)
  234|      0|}
  235|      0|public func <<<V: Value>(lhs: Expression<V?>, rhs: V) -> Expression<V?> where V.Datatype == Int64 {
  236|      0|    Operator.bitwiseLeft.infix(lhs, rhs)
  237|      0|}
  238|      0|public func <<<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<V> where V.Datatype == Int64 {
  239|      0|    Operator.bitwiseLeft.infix(lhs, rhs)
  240|      0|}
  241|      0|public func <<<V: Value>(lhs: V, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  242|      0|    Operator.bitwiseLeft.infix(lhs, rhs)
  243|      0|}
  244|       |
  245|      0|public func >><V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<V> where V.Datatype == Int64 {
  246|      0|    Operator.bitwiseRight.infix(lhs, rhs)
  247|      0|}
  248|      0|public func >><V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  249|      0|    Operator.bitwiseRight.infix(lhs, rhs)
  250|      0|}
  251|      0|public func >><V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<V?> where V.Datatype == Int64 {
  252|      0|    Operator.bitwiseRight.infix(lhs, rhs)
  253|      0|}
  254|      0|public func >><V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  255|      0|    Operator.bitwiseRight.infix(lhs, rhs)
  256|      0|}
  257|      0|public func >><V: Value>(lhs: Expression<V>, rhs: V) -> Expression<V> where V.Datatype == Int64 {
  258|      0|    Operator.bitwiseRight.infix(lhs, rhs)
  259|      0|}
  260|      0|public func >><V: Value>(lhs: Expression<V?>, rhs: V) -> Expression<V?> where V.Datatype == Int64 {
  261|      0|    Operator.bitwiseRight.infix(lhs, rhs)
  262|      0|}
  263|      0|public func >><V: Value>(lhs: V, rhs: Expression<V>) -> Expression<V> where V.Datatype == Int64 {
  264|      0|    Operator.bitwiseRight.infix(lhs, rhs)
  265|      0|}
  266|      0|public func >><V: Value>(lhs: V, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  267|      0|    Operator.bitwiseRight.infix(lhs, rhs)
  268|      0|}
  269|       |
  270|      0|public func &<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<V> where V.Datatype == Int64 {
  271|      0|    Operator.bitwiseAnd.infix(lhs, rhs)
  272|      0|}
  273|      0|public func &<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  274|      0|    Operator.bitwiseAnd.infix(lhs, rhs)
  275|      0|}
  276|      0|public func &<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<V?> where V.Datatype == Int64 {
  277|      0|    Operator.bitwiseAnd.infix(lhs, rhs)
  278|      0|}
  279|      0|public func &<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  280|      0|    Operator.bitwiseAnd.infix(lhs, rhs)
  281|      0|}
  282|      0|public func &<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<V> where V.Datatype == Int64 {
  283|      0|    Operator.bitwiseAnd.infix(lhs, rhs)
  284|      0|}
  285|      0|public func &<V: Value>(lhs: Expression<V?>, rhs: V) -> Expression<V?> where V.Datatype == Int64 {
  286|      0|    Operator.bitwiseAnd.infix(lhs, rhs)
  287|      0|}
  288|      0|public func &<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<V> where V.Datatype == Int64 {
  289|      0|    Operator.bitwiseAnd.infix(lhs, rhs)
  290|      0|}
  291|      0|public func &<V: Value>(lhs: V, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  292|      0|    Operator.bitwiseAnd.infix(lhs, rhs)
  293|      0|}
  294|       |
  295|      0|public func |<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<V> where V.Datatype == Int64 {
  296|      0|    Operator.bitwiseOr.infix(lhs, rhs)
  297|      0|}
  298|      0|public func |<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  299|      0|    Operator.bitwiseOr.infix(lhs, rhs)
  300|      0|}
  301|      0|public func |<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<V?> where V.Datatype == Int64 {
  302|      0|    Operator.bitwiseOr.infix(lhs, rhs)
  303|      0|}
  304|      0|public func |<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  305|      0|    Operator.bitwiseOr.infix(lhs, rhs)
  306|      0|}
  307|      0|public func |<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<V> where V.Datatype == Int64 {
  308|      0|    Operator.bitwiseOr.infix(lhs, rhs)
  309|      0|}
  310|      0|public func |<V: Value>(lhs: Expression<V?>, rhs: V) -> Expression<V?> where V.Datatype == Int64 {
  311|      0|    Operator.bitwiseOr.infix(lhs, rhs)
  312|      0|}
  313|      0|public func |<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<V> where V.Datatype == Int64 {
  314|      0|    Operator.bitwiseOr.infix(lhs, rhs)
  315|      0|}
  316|      0|public func |<V: Value>(lhs: V, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  317|      0|    Operator.bitwiseOr.infix(lhs, rhs)
  318|      0|}
  319|       |
  320|      0|public func ^<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<V> where V.Datatype == Int64 {
  321|      0|    (~(lhs & rhs)) & (lhs | rhs)
  322|      0|}
  323|      0|public func ^<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  324|      0|    (~(lhs & rhs)) & (lhs | rhs)
  325|      0|}
  326|      0|public func ^<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<V?> where V.Datatype == Int64 {
  327|      0|    (~(lhs & rhs)) & (lhs | rhs)
  328|      0|}
  329|      0|public func ^<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  330|      0|    (~(lhs & rhs)) & (lhs | rhs)
  331|      0|}
  332|      0|public func ^<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<V> where V.Datatype == Int64 {
  333|      0|    (~(lhs & rhs)) & (lhs | rhs)
  334|      0|}
  335|      0|public func ^<V: Value>(lhs: Expression<V?>, rhs: V) -> Expression<V?> where V.Datatype == Int64 {
  336|      0|    (~(lhs & rhs)) & (lhs | rhs)
  337|      0|}
  338|      0|public func ^<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<V> where V.Datatype == Int64 {
  339|      0|    (~(lhs & rhs)) & (lhs | rhs)
  340|      0|}
  341|      0|public func ^<V: Value>(lhs: V, rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  342|      0|    (~(lhs & rhs)) & (lhs | rhs)
  343|      0|}
  344|       |
  345|      0|public prefix func ~<V: Value>(rhs: Expression<V>) -> Expression<V> where V.Datatype == Int64 {
  346|      0|    Operator.bitwiseXor.wrap(rhs)
  347|      0|}
  348|      0|public prefix func ~<V: Value>(rhs: Expression<V?>) -> Expression<V?> where V.Datatype == Int64 {
  349|      0|    Operator.bitwiseXor.wrap(rhs)
  350|      0|}
  351|       |
  352|       |// MARK: -
  353|       |
  354|      0|public func ==<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Equatable {
  355|      0|    Operator.eq.infix(lhs, rhs)
  356|      0|}
  357|      0|public func ==<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Equatable {
  358|      0|    Operator.eq.infix(lhs, rhs)
  359|      0|}
  360|      0|public func ==<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<Bool?> where V.Datatype: Equatable {
  361|      0|    Operator.eq.infix(lhs, rhs)
  362|      0|}
  363|      0|public func ==<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Equatable {
  364|      0|    Operator.eq.infix(lhs, rhs)
  365|      0|}
  366|  1.56k|public func ==<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<Bool> where V.Datatype: Equatable {
  367|  1.56k|    Operator.eq.infix(lhs, rhs)
  368|  1.56k|}
  369|      0|public func ==<V: Value>(lhs: Expression<V?>, rhs: V?) -> Expression<Bool?> where V.Datatype: Equatable {
  370|      0|    guard let rhs = rhs else { return "IS".infix(lhs, Expression<V?>(value: nil)) }
  371|      0|    return Operator.eq.infix(lhs, rhs)
  372|      0|}
  373|      0|public func ==<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Equatable {
  374|      0|    Operator.eq.infix(lhs, rhs)
  375|      0|}
  376|      0|public func ==<V: Value>(lhs: V?, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Equatable {
  377|      0|    guard let lhs = lhs else { return "IS".infix(Expression<V?>(value: nil), rhs) }
  378|      0|    return Operator.eq.infix(lhs, rhs)
  379|      0|}
  380|       |
  381|      0|public func ===<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Equatable {
  382|      0|    "IS".infix(lhs, rhs)
  383|      0|}
  384|      0|public func ===<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Equatable {
  385|      0|    "IS".infix(lhs, rhs)
  386|      0|}
  387|      0|public func ===<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<Bool?> where V.Datatype: Equatable {
  388|      0|    "IS".infix(lhs, rhs)
  389|      0|}
  390|      0|public func ===<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Equatable {
  391|      0|    "IS".infix(lhs, rhs)
  392|      0|}
  393|      0|public func ===<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<Bool> where V.Datatype: Equatable {
  394|      0|    "IS".infix(lhs, rhs)
  395|      0|}
  396|      0|public func ===<V: Value>(lhs: Expression<V?>, rhs: V?) -> Expression<Bool?> where V.Datatype: Equatable {
  397|      0|    guard let rhs = rhs else { return "IS".infix(lhs, Expression<V?>(value: nil)) }
  398|      0|    return "IS".infix(lhs, rhs)
  399|      0|}
  400|      0|public func ===<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Equatable {
  401|      0|    "IS".infix(lhs, rhs)
  402|      0|}
  403|      0|public func ===<V: Value>(lhs: V?, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Equatable {
  404|      0|    guard let lhs = lhs else { return "IS".infix(Expression<V?>(value: nil), rhs) }
  405|      0|    return "IS".infix(lhs, rhs)
  406|      0|}
  407|       |
  408|      0|public func !=<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Equatable {
  409|      0|    Operator.neq.infix(lhs, rhs)
  410|      0|}
  411|      0|public func !=<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Equatable {
  412|      0|    Operator.neq.infix(lhs, rhs)
  413|      0|}
  414|      0|public func !=<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<Bool?> where V.Datatype: Equatable {
  415|      0|    Operator.neq.infix(lhs, rhs)
  416|      0|}
  417|      0|public func !=<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Equatable {
  418|      0|    Operator.neq.infix(lhs, rhs)
  419|      0|}
  420|      0|public func !=<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<Bool> where V.Datatype: Equatable {
  421|      0|    Operator.neq.infix(lhs, rhs)
  422|      0|}
  423|      0|public func !=<V: Value>(lhs: Expression<V?>, rhs: V?) -> Expression<Bool?> where V.Datatype: Equatable {
  424|      0|    guard let rhs = rhs else { return "IS NOT".infix(lhs, Expression<V?>(value: nil)) }
  425|      0|    return Operator.neq.infix(lhs, rhs)
  426|      0|}
  427|      0|public func !=<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Equatable {
  428|      0|    Operator.neq.infix(lhs, rhs)
  429|      0|}
  430|      0|public func !=<V: Value>(lhs: V?, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Equatable {
  431|      0|    guard let lhs = lhs else { return "IS NOT".infix(Expression<V?>(value: nil), rhs) }
  432|      0|    return Operator.neq.infix(lhs, rhs)
  433|      0|}
  434|       |
  435|      0|public func !==<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Equatable {
  436|      0|    "IS NOT".infix(lhs, rhs)
  437|      0|}
  438|      0|public func !==<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Equatable {
  439|      0|    "IS NOT".infix(lhs, rhs)
  440|      0|}
  441|      0|public func !==<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<Bool?> where V.Datatype: Equatable {
  442|      0|    "IS NOT".infix(lhs, rhs)
  443|      0|}
  444|      0|public func !==<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Equatable {
  445|      0|    "IS NOT".infix(lhs, rhs)
  446|      0|}
  447|      0|public func !==<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<Bool> where V.Datatype: Equatable {
  448|      0|    "IS NOT".infix(lhs, rhs)
  449|      0|}
  450|      0|public func !==<V: Value>(lhs: Expression<V?>, rhs: V?) -> Expression<Bool?> where V.Datatype: Equatable {
  451|      0|    guard let rhs = rhs else { return "IS NOT".infix(lhs, Expression<V?>(value: nil)) }
  452|      0|    return "IS NOT".infix(lhs, rhs)
  453|      0|}
  454|      0|public func !==<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Equatable {
  455|      0|    "IS NOT".infix(lhs, rhs)
  456|      0|}
  457|      0|public func !==<V: Value>(lhs: V?, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Equatable {
  458|      0|    guard let lhs = lhs else { return "IS NOT".infix(Expression<V?>(value: nil), rhs) }
  459|      0|    return "IS NOT".infix(lhs, rhs)
  460|      0|}
  461|       |
  462|      0|public func ><V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Comparable {
  463|      0|    Operator.gt.infix(lhs, rhs)
  464|      0|}
  465|      0|public func ><V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable {
  466|      0|    Operator.gt.infix(lhs, rhs)
  467|      0|}
  468|      0|public func ><V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<Bool?> where V.Datatype: Comparable {
  469|      0|    Operator.gt.infix(lhs, rhs)
  470|      0|}
  471|      0|public func ><V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable {
  472|      0|    Operator.gt.infix(lhs, rhs)
  473|      0|}
  474|      0|public func ><V: Value>(lhs: Expression<V>, rhs: V) -> Expression<Bool> where V.Datatype: Comparable {
  475|      0|    Operator.gt.infix(lhs, rhs)
  476|      0|}
  477|      0|public func ><V: Value>(lhs: Expression<V?>, rhs: V) -> Expression<Bool?> where V.Datatype: Comparable {
  478|      0|    Operator.gt.infix(lhs, rhs)
  479|      0|}
  480|      0|public func ><V: Value>(lhs: V, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Comparable {
  481|      0|    Operator.gt.infix(lhs, rhs)
  482|      0|}
  483|      0|public func ><V: Value>(lhs: V, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable {
  484|      0|    Operator.gt.infix(lhs, rhs)
  485|      0|}
  486|       |
  487|      0|public func >=<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Comparable {
  488|      0|    Operator.gte.infix(lhs, rhs)
  489|      0|}
  490|      0|public func >=<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable {
  491|      0|    Operator.gte.infix(lhs, rhs)
  492|      0|}
  493|      0|public func >=<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<Bool?> where V.Datatype: Comparable {
  494|      0|    Operator.gte.infix(lhs, rhs)
  495|      0|}
  496|      0|public func >=<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable {
  497|      0|    Operator.gte.infix(lhs, rhs)
  498|      0|}
  499|      0|public func >=<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<Bool> where V.Datatype: Comparable {
  500|      0|    Operator.gte.infix(lhs, rhs)
  501|      0|}
  502|      0|public func >=<V: Value>(lhs: Expression<V?>, rhs: V) -> Expression<Bool?> where V.Datatype: Comparable {
  503|      0|    Operator.gte.infix(lhs, rhs)
  504|      0|}
  505|      0|public func >=<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Comparable {
  506|      0|    Operator.gte.infix(lhs, rhs)
  507|      0|}
  508|      0|public func >=<V: Value>(lhs: V, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable {
  509|      0|    Operator.gte.infix(lhs, rhs)
  510|      0|}
  511|       |
  512|      0|public func <<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Comparable {
  513|      0|    Operator.lt.infix(lhs, rhs)
  514|      0|}
  515|      0|public func <<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable {
  516|      0|    Operator.lt.infix(lhs, rhs)
  517|      0|}
  518|      0|public func <<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<Bool?> where V.Datatype: Comparable {
  519|      0|    Operator.lt.infix(lhs, rhs)
  520|      0|}
  521|      0|public func <<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable {
  522|      0|    Operator.lt.infix(lhs, rhs)
  523|      0|}
  524|      0|public func <<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<Bool> where V.Datatype: Comparable {
  525|      0|    Operator.lt.infix(lhs, rhs)
  526|      0|}
  527|      0|public func <<V: Value>(lhs: Expression<V?>, rhs: V) -> Expression<Bool?> where V.Datatype: Comparable {
  528|      0|    Operator.lt.infix(lhs, rhs)
  529|      0|}
  530|      0|public func <<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Comparable {
  531|      0|    Operator.lt.infix(lhs, rhs)
  532|      0|}
  533|      0|public func <<V: Value>(lhs: V, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable {
  534|      0|    Operator.lt.infix(lhs, rhs)
  535|      0|}
  536|       |
  537|      0|public func <=<V: Value>(lhs: Expression<V>, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Comparable {
  538|      0|    Operator.lte.infix(lhs, rhs)
  539|      0|}
  540|      0|public func <=<V: Value>(lhs: Expression<V>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable {
  541|      0|    Operator.lte.infix(lhs, rhs)
  542|      0|}
  543|      0|public func <=<V: Value>(lhs: Expression<V?>, rhs: Expression<V>) -> Expression<Bool?> where V.Datatype: Comparable {
  544|      0|    Operator.lte.infix(lhs, rhs)
  545|      0|}
  546|      0|public func <=<V: Value>(lhs: Expression<V?>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable {
  547|      0|    Operator.lte.infix(lhs, rhs)
  548|      0|}
  549|      0|public func <=<V: Value>(lhs: Expression<V>, rhs: V) -> Expression<Bool> where V.Datatype: Comparable {
  550|      0|    Operator.lte.infix(lhs, rhs)
  551|      0|}
  552|      0|public func <=<V: Value>(lhs: Expression<V?>, rhs: V) -> Expression<Bool?> where V.Datatype: Comparable {
  553|      0|    Operator.lte.infix(lhs, rhs)
  554|      0|}
  555|      0|public func <=<V: Value>(lhs: V, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Comparable {
  556|      0|    Operator.lte.infix(lhs, rhs)
  557|      0|}
  558|      0|public func <=<V: Value>(lhs: V, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable {
  559|      0|    Operator.lte.infix(lhs, rhs)
  560|      0|}
  561|       |
  562|      0|public func ~=<V: Value>(lhs: ClosedRange<V>, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Comparable & Value {
  563|      0|    Expression("\(rhs.template) BETWEEN ? AND ?", rhs.bindings + [lhs.lowerBound.datatypeValue, lhs.upperBound.datatypeValue])
  564|      0|}
  565|       |
  566|      0|public func ~=<V: Value>(lhs: ClosedRange<V>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable & Value {
  567|      0|    Expression("\(rhs.template) BETWEEN ? AND ?", rhs.bindings + [lhs.lowerBound.datatypeValue, lhs.upperBound.datatypeValue])
  568|      0|}
  569|       |
  570|      0|public func ~=<V: Value>(lhs: Range<V>, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Comparable & Value {
  571|      0|    Expression("\(rhs.template) >= ? AND \(rhs.template) < ?",
  572|      0|               rhs.bindings + [lhs.lowerBound.datatypeValue] + rhs.bindings + [lhs.upperBound.datatypeValue])
  573|      0|}
  574|       |
  575|      0|public func ~=<V: Value>(lhs: Range<V>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable & Value {
  576|      0|    Expression("\(rhs.template) >= ? AND \(rhs.template) < ?",
  577|      0|               rhs.bindings + [lhs.lowerBound.datatypeValue] + rhs.bindings + [lhs.upperBound.datatypeValue])
  578|      0|}
  579|       |
  580|      0|public func ~=<V: Value>(lhs: PartialRangeThrough<V>, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Comparable & Value {
  581|      0|    Expression("\(rhs.template) <= ?", rhs.bindings + [lhs.upperBound.datatypeValue])
  582|      0|}
  583|       |
  584|      0|public func ~=<V: Value>(lhs: PartialRangeThrough<V>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable & Value {
  585|      0|    Expression("\(rhs.template) <= ?", rhs.bindings + [lhs.upperBound.datatypeValue])
  586|      0|}
  587|       |
  588|      0|public func ~=<V: Value>(lhs: PartialRangeUpTo<V>, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Comparable & Value {
  589|      0|    Expression("\(rhs.template) < ?", rhs.bindings + [lhs.upperBound.datatypeValue])
  590|      0|}
  591|       |
  592|      0|public func ~=<V: Value>(lhs: PartialRangeUpTo<V>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable & Value {
  593|      0|    Expression("\(rhs.template) < ?", rhs.bindings + [lhs.upperBound.datatypeValue])
  594|      0|}
  595|       |
  596|      0|public func ~=<V: Value>(lhs: PartialRangeFrom<V>, rhs: Expression<V>) -> Expression<Bool> where V.Datatype: Comparable & Value {
  597|      0|    Expression("\(rhs.template) >= ?", rhs.bindings + [lhs.lowerBound.datatypeValue])
  598|      0|}
  599|       |
  600|      0|public func ~=<V: Value>(lhs: PartialRangeFrom<V>, rhs: Expression<V?>) -> Expression<Bool?> where V.Datatype: Comparable & Value {
  601|      0|    Expression("\(rhs.template) >= ?", rhs.bindings + [lhs.lowerBound.datatypeValue])
  602|      0|}
  603|       |
  604|       |// MARK: -
  605|       |
  606|      0|public func and(_ terms: Expression<Bool>...) -> Expression<Bool> {
  607|      0|    "AND".infix(terms)
  608|      0|}
  609|      0|public func and(_ terms: [Expression<Bool>]) -> Expression<Bool> {
  610|      0|    "AND".infix(terms)
  611|      0|}
  612|     36|public func &&(lhs: Expression<Bool>, rhs: Expression<Bool>) -> Expression<Bool> {
  613|     36|    Operator.and.infix(lhs, rhs)
  614|     36|}
  615|      0|public func &&(lhs: Expression<Bool>, rhs: Expression<Bool?>) -> Expression<Bool?> {
  616|      0|    Operator.and.infix(lhs, rhs)
  617|      0|}
  618|      0|public func &&(lhs: Expression<Bool?>, rhs: Expression<Bool>) -> Expression<Bool?> {
  619|      0|    Operator.and.infix(lhs, rhs)
  620|      0|}
  621|      0|public func &&(lhs: Expression<Bool?>, rhs: Expression<Bool?>) -> Expression<Bool?> {
  622|      0|    Operator.and.infix(lhs, rhs)
  623|      0|}
  624|      0|public func &&(lhs: Expression<Bool>, rhs: Bool) -> Expression<Bool> {
  625|      0|    Operator.and.infix(lhs, rhs)
  626|      0|}
  627|      0|public func &&(lhs: Expression<Bool?>, rhs: Bool) -> Expression<Bool?> {
  628|      0|    Operator.and.infix(lhs, rhs)
  629|      0|}
  630|      0|public func &&(lhs: Bool, rhs: Expression<Bool>) -> Expression<Bool> {
  631|      0|    Operator.and.infix(lhs, rhs)
  632|      0|}
  633|      0|public func &&(lhs: Bool, rhs: Expression<Bool?>) -> Expression<Bool?> {
  634|      0|    Operator.and.infix(lhs, rhs)
  635|      0|}
  636|       |
  637|      0|public func or(_ terms: Expression<Bool>...) -> Expression<Bool> {
  638|      0|    "OR".infix(terms)
  639|      0|}
  640|      0|public func or(_ terms: [Expression<Bool>]) -> Expression<Bool> {
  641|      0|    "OR".infix(terms)
  642|      0|}
  643|      0|public func ||(lhs: Expression<Bool>, rhs: Expression<Bool>) -> Expression<Bool> {
  644|      0|    Operator.or.infix(lhs, rhs)
  645|      0|}
  646|      0|public func ||(lhs: Expression<Bool>, rhs: Expression<Bool?>) -> Expression<Bool?> {
  647|      0|    Operator.or.infix(lhs, rhs)
  648|      0|}
  649|      0|public func ||(lhs: Expression<Bool?>, rhs: Expression<Bool>) -> Expression<Bool?> {
  650|      0|    Operator.or.infix(lhs, rhs)
  651|      0|}
  652|      0|public func ||(lhs: Expression<Bool?>, rhs: Expression<Bool?>) -> Expression<Bool?> {
  653|      0|    Operator.or.infix(lhs, rhs)
  654|      0|}
  655|      0|public func ||(lhs: Expression<Bool>, rhs: Bool) -> Expression<Bool> {
  656|      0|    Operator.or.infix(lhs, rhs)
  657|      0|}
  658|      0|public func ||(lhs: Expression<Bool?>, rhs: Bool) -> Expression<Bool?> {
  659|      0|    Operator.or.infix(lhs, rhs)
  660|      0|}
  661|      0|public func ||(lhs: Bool, rhs: Expression<Bool>) -> Expression<Bool> {
  662|      0|    Operator.or.infix(lhs, rhs)
  663|      0|}
  664|      0|public func ||(lhs: Bool, rhs: Expression<Bool?>) -> Expression<Bool?> {
  665|      0|    Operator.or.infix(lhs, rhs)
  666|      0|}
  667|       |
  668|      0|public prefix func !(rhs: Expression<Bool>) -> Expression<Bool> {
  669|      0|    Operator.not.wrap(rhs)
  670|      0|}
  671|       |
  672|      0|public prefix func !(rhs: Expression<Bool?>) -> Expression<Bool?> {
  673|      0|    Operator.not.wrap(rhs)
  674|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Typed/Query.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |import Foundation
   25|       |
   26|       |public protocol QueryType: Expressible {
   27|       |
   28|       |    var clauses: QueryClauses { get set }
   29|       |
   30|       |    init(_ name: String, database: String?)
   31|       |
   32|       |}
   33|       |
   34|       |public protocol SchemaType: QueryType {
   35|       |
   36|       |    static var identifier: String { get }
   37|       |
   38|       |}
   39|       |
   40|       |extension SchemaType {
   41|       |
   42|       |    /// Builds a copy of the query with the `SELECT` clause applied.
   43|       |    ///
   44|       |    ///     let users = Table("users")
   45|       |    ///     let id = Expression<Int64>("id")
   46|       |    ///     let email = Expression<String>("email")
   47|       |    ///
   48|       |    ///     users.select(id, email)
   49|       |    ///     // SELECT "id", "email" FROM "users"
   50|       |    ///
   51|       |    /// - Parameter all: A list of expressions to select.
   52|       |    ///
   53|       |    /// - Returns: A query with the given `SELECT` clause applied.
   54|      0|    public func select(_ column1: Expressible, _ more: Expressible...) -> Self {
   55|      0|        select(false, [column1] + more)
   56|      0|    }
   57|       |
   58|       |    /// Builds a copy of the query with the `SELECT DISTINCT` clause applied.
   59|       |    ///
   60|       |    ///     let users = Table("users")
   61|       |    ///     let email = Expression<String>("email")
   62|       |    ///
   63|       |    ///     users.select(distinct: email)
   64|       |    ///     // SELECT DISTINCT "email" FROM "users"
   65|       |    ///
   66|       |    /// - Parameter columns: A list of expressions to select.
   67|       |    ///
   68|       |    /// - Returns: A query with the given `SELECT DISTINCT` clause applied.
   69|      0|    public func select(distinct column1: Expressible, _ more: Expressible...) -> Self {
   70|      0|        select(true, [column1] + more)
   71|      0|    }
   72|       |
   73|       |    /// Builds a copy of the query with the `SELECT` clause applied.
   74|       |    ///
   75|       |    ///     let users = Table("users")
   76|       |    ///     let id = Expression<Int64>("id")
   77|       |    ///     let email = Expression<String>("email")
   78|       |    ///
   79|       |    ///     users.select([id, email])
   80|       |    ///     // SELECT "id", "email" FROM "users"
   81|       |    ///
   82|       |    /// - Parameter all: A list of expressions to select.
   83|       |    ///
   84|       |    /// - Returns: A query with the given `SELECT` clause applied.
   85|      0|    public func select(_ all: [Expressible]) -> Self {
   86|      0|        select(false, all)
   87|      0|    }
   88|       |
   89|       |    /// Builds a copy of the query with the `SELECT DISTINCT` clause applied.
   90|       |    ///
   91|       |    ///     let users = Table("users")
   92|       |    ///     let email = Expression<String>("email")
   93|       |    ///
   94|       |    ///     users.select(distinct: [email])
   95|       |    ///     // SELECT DISTINCT "email" FROM "users"
   96|       |    ///
   97|       |    /// - Parameter columns: A list of expressions to select.
   98|       |    ///
   99|       |    /// - Returns: A query with the given `SELECT DISTINCT` clause applied.
  100|      0|    public func select(distinct columns: [Expressible]) -> Self {
  101|      0|        select(true, columns)
  102|      0|    }
  103|       |
  104|       |    /// Builds a copy of the query with the `SELECT *` clause applied.
  105|       |    ///
  106|       |    ///     let users = Table("users")
  107|       |    ///
  108|       |    ///     users.select(*)
  109|       |    ///     // SELECT * FROM "users"
  110|       |    ///
  111|       |    /// - Parameter star: A star literal.
  112|       |    ///
  113|       |    /// - Returns: A query with the given `SELECT *` clause applied.
  114|      0|    public func select(_ star: Star) -> Self {
  115|      0|        select([star(nil, nil)])
  116|      0|    }
  117|       |
  118|       |    /// Builds a copy of the query with the `SELECT DISTINCT *` clause applied.
  119|       |    ///
  120|       |    ///     let users = Table("users")
  121|       |    ///
  122|       |    ///     users.select(distinct: *)
  123|       |    ///     // SELECT DISTINCT * FROM "users"
  124|       |    ///
  125|       |    /// - Parameter star: A star literal.
  126|       |    ///
  127|       |    /// - Returns: A query with the given `SELECT DISTINCT *` clause applied.
  128|      0|    public func select(distinct star: Star) -> Self {
  129|      0|        select(distinct: [star(nil, nil)])
  130|      0|    }
  131|       |
  132|       |    /// Builds a scalar copy of the query with the `SELECT` clause applied.
  133|       |    ///
  134|       |    ///     let users = Table("users")
  135|       |    ///     let id = Expression<Int64>("id")
  136|       |    ///
  137|       |    ///     users.select(id)
  138|       |    ///     // SELECT "id" FROM "users"
  139|       |    ///
  140|       |    /// - Parameter all: A list of expressions to select.
  141|       |    ///
  142|       |    /// - Returns: A query with the given `SELECT` clause applied.
  143|     36|    public func select<V: Value>(_ column: Expression<V>) -> ScalarQuery<V> {
  144|     36|        select(false, [column])
  145|     36|    }
  146|      0|    public func select<V: Value>(_ column: Expression<V?>) -> ScalarQuery<V?> {
  147|      0|        select(false, [column])
  148|      0|    }
  149|       |
  150|       |    /// Builds a scalar copy of the query with the `SELECT DISTINCT` clause
  151|       |    /// applied.
  152|       |    ///
  153|       |    ///     let users = Table("users")
  154|       |    ///     let email = Expression<String>("email")
  155|       |    ///
  156|       |    ///     users.select(distinct: email)
  157|       |    ///     // SELECT DISTINCT "email" FROM "users"
  158|       |    ///
  159|       |    /// - Parameter column: A list of expressions to select.
  160|       |    ///
  161|       |    /// - Returns: A query with the given `SELECT DISTINCT` clause applied.
  162|      0|    public func select<V: Value>(distinct column: Expression<V>) -> ScalarQuery<V> {
  163|      0|        select(true, [column])
  164|      0|    }
  165|      0|    public func select<V: Value>(distinct column: Expression<V?>) -> ScalarQuery<V?> {
  166|      0|        select(true, [column])
  167|      0|    }
  168|       |
  169|     36|    public var count: ScalarQuery<Int> {
  170|     36|        select(Expression.count(*))
  171|     36|    }
  172|       |
  173|       |}
  174|       |
  175|       |extension QueryType {
  176|       |
  177|     36|    fileprivate func select<Q: QueryType>(_ distinct: Bool, _ columns: [Expressible]) -> Q {
  178|     36|        var query = Q.init(clauses.from.name, database: clauses.from.database)
  179|     36|        query.clauses = clauses
  180|     36|        query.clauses.select = (distinct, columns)
  181|     36|        return query
  182|     36|    }
  183|       |
  184|       |    // MARK: UNION
  185|       |
  186|       |    /// Adds a `UNION` clause to the query.
  187|       |    ///
  188|       |    ///     let users = Table("users")
  189|       |    ///     let email = Expression<String>("email")
  190|       |    ///
  191|       |    ///     users.filter(email == "alice@example.com").union(users.filter(email == "sally@example.com"))
  192|       |    ///     // SELECT * FROM "users" WHERE email = 'alice@example.com' UNION SELECT * FROM "users" WHERE email = 'sally@example.com'
  193|       |    ///
  194|       |    /// - Parameters:
  195|       |    ///
  196|       |    ///   - table: A query representing the other table.
  197|       |    ///
  198|       |    /// - Returns: A query with the given `UNION` clause applied.
  199|      0|    public func union(_ table: QueryType) -> Self {
  200|      0|        var query = self
  201|      0|        query.clauses.union.append(table)
  202|      0|        return query
  203|      0|    }
  204|       |
  205|       |    // MARK: JOIN
  206|       |
  207|       |    /// Adds a `JOIN` clause to the query.
  208|       |    ///
  209|       |    ///     let users = Table("users")
  210|       |    ///     let id = Expression<Int64>("id")
  211|       |    ///     let posts = Table("posts")
  212|       |    ///     let userId = Expression<Int64>("user_id")
  213|       |    ///
  214|       |    ///     users.join(posts, on: posts[userId] == users[id])
  215|       |    ///     // SELECT * FROM "users" INNER JOIN "posts" ON ("posts"."user_id" = "users"."id")
  216|       |    ///
  217|       |    /// - Parameters:
  218|       |    ///
  219|       |    ///   - table: A query representing the other table.
  220|       |    ///
  221|       |    ///   - condition: A boolean expression describing the join condition.
  222|       |    ///
  223|       |    /// - Returns: A query with the given `JOIN` clause applied.
  224|      0|    public func join(_ table: QueryType, on condition: Expression<Bool>) -> Self {
  225|      0|        join(table, on: Expression<Bool?>(condition))
  226|      0|    }
  227|       |
  228|       |    /// Adds a `JOIN` clause to the query.
  229|       |    ///
  230|       |    ///     let users = Table("users")
  231|       |    ///     let id = Expression<Int64>("id")
  232|       |    ///     let posts = Table("posts")
  233|       |    ///     let userId = Expression<Int64?>("user_id")
  234|       |    ///
  235|       |    ///     users.join(posts, on: posts[userId] == users[id])
  236|       |    ///     // SELECT * FROM "users" INNER JOIN "posts" ON ("posts"."user_id" = "users"."id")
  237|       |    ///
  238|       |    /// - Parameters:
  239|       |    ///
  240|       |    ///   - table: A query representing the other table.
  241|       |    ///
  242|       |    ///   - condition: A boolean expression describing the join condition.
  243|       |    ///
  244|       |    /// - Returns: A query with the given `JOIN` clause applied.
  245|      0|    public func join(_ table: QueryType, on condition: Expression<Bool?>) -> Self {
  246|      0|        join(.inner, table, on: condition)
  247|      0|    }
  248|       |
  249|       |    /// Adds a `JOIN` clause to the query.
  250|       |    ///
  251|       |    ///     let users = Table("users")
  252|       |    ///     let id = Expression<Int64>("id")
  253|       |    ///     let posts = Table("posts")
  254|       |    ///     let userId = Expression<Int64>("user_id")
  255|       |    ///
  256|       |    ///     users.join(.LeftOuter, posts, on: posts[userId] == users[id])
  257|       |    ///     // SELECT * FROM "users" LEFT OUTER JOIN "posts" ON ("posts"."user_id" = "users"."id")
  258|       |    ///
  259|       |    /// - Parameters:
  260|       |    ///
  261|       |    ///   - type: The `JOIN` operator.
  262|       |    ///
  263|       |    ///   - table: A query representing the other table.
  264|       |    ///
  265|       |    ///   - condition: A boolean expression describing the join condition.
  266|       |    ///
  267|       |    /// - Returns: A query with the given `JOIN` clause applied.
  268|      0|    public func join(_ type: JoinType, _ table: QueryType, on condition: Expression<Bool>) -> Self {
  269|      0|        join(type, table, on: Expression<Bool?>(condition))
  270|      0|    }
  271|       |
  272|       |    /// Adds a `JOIN` clause to the query.
  273|       |    ///
  274|       |    ///     let users = Table("users")
  275|       |    ///     let id = Expression<Int64>("id")
  276|       |    ///     let posts = Table("posts")
  277|       |    ///     let userId = Expression<Int64?>("user_id")
  278|       |    ///
  279|       |    ///     users.join(.LeftOuter, posts, on: posts[userId] == users[id])
  280|       |    ///     // SELECT * FROM "users" LEFT OUTER JOIN "posts" ON ("posts"."user_id" = "users"."id")
  281|       |    ///
  282|       |    /// - Parameters:
  283|       |    ///
  284|       |    ///   - type: The `JOIN` operator.
  285|       |    ///
  286|       |    ///   - table: A query representing the other table.
  287|       |    ///
  288|       |    ///   - condition: A boolean expression describing the join condition.
  289|       |    ///
  290|       |    /// - Returns: A query with the given `JOIN` clause applied.
  291|      0|    public func join(_ type: JoinType, _ table: QueryType, on condition: Expression<Bool?>) -> Self {
  292|      0|        var query = self
  293|      0|        query.clauses.join.append((type: type, query: table,
  294|      0|                                          condition: table.clauses.filters.map { condition && $0 } ?? condition as Expressible))
  295|      0|        return query
  296|      0|    }
  297|       |
  298|       |    // MARK: WHERE
  299|       |
  300|       |    /// Adds a condition to the query’s `WHERE` clause.
  301|       |    ///
  302|       |    ///     let users = Table("users")
  303|       |    ///     let id = Expression<Int64>("id")
  304|       |    ///
  305|       |    ///     users.filter(id == 1)
  306|       |    ///     // SELECT * FROM "users" WHERE ("id" = 1)
  307|       |    ///
  308|       |    /// - Parameter condition: A boolean expression to filter on.
  309|       |    ///
  310|       |    /// - Returns: A query with the given `WHERE` clause applied.
  311|  1.53k|    public func filter(_ predicate: Expression<Bool>) -> Self {
  312|  1.53k|        filter(Expression<Bool?>(predicate))
  313|  1.53k|    }
  314|       |
  315|       |    /// Adds a condition to the query’s `WHERE` clause.
  316|       |    ///
  317|       |    ///     let users = Table("users")
  318|       |    ///     let age = Expression<Int?>("age")
  319|       |    ///
  320|       |    ///     users.filter(age >= 35)
  321|       |    ///     // SELECT * FROM "users" WHERE ("age" >= 35)
  322|       |    ///
  323|       |    /// - Parameter condition: A boolean expression to filter on.
  324|       |    ///
  325|       |    /// - Returns: A query with the given `WHERE` clause applied.
  326|  1.53k|    public func filter(_ predicate: Expression<Bool?>) -> Self {
  327|  1.53k|        var query = self
  328|  1.53k|        query.clauses.filters = query.clauses.filters.map { $0 && predicate } ?? predicate
  329|  1.53k|        return query
  330|  1.53k|    }
  331|       |
  332|       |    /// Adds a condition to the query’s `WHERE` clause.
  333|       |    /// This is an alias for `filter(predicate)`
  334|      0|    public func `where`(_ predicate: Expression<Bool>) -> Self {
  335|      0|        `where`(Expression<Bool?>(predicate))
  336|      0|    }
  337|       |
  338|       |    /// Adds a condition to the query’s `WHERE` clause.
  339|       |    /// This is an alias for `filter(predicate)`
  340|      0|    public func `where`(_ predicate: Expression<Bool?>) -> Self {
  341|      0|        filter(predicate)
  342|      0|    }
  343|       |
  344|       |    // MARK: GROUP BY
  345|       |
  346|       |    /// Sets a `GROUP BY` clause on the query.
  347|       |    ///
  348|       |    /// - Parameter by: A list of columns to group by.
  349|       |    ///
  350|       |    /// - Returns: A query with the given `GROUP BY` clause applied.
  351|      0|    public func group(_ by: Expressible...) -> Self {
  352|      0|        group(by)
  353|      0|    }
  354|       |
  355|       |    /// Sets a `GROUP BY` clause on the query.
  356|       |    ///
  357|       |    /// - Parameter by: A list of columns to group by.
  358|       |    ///
  359|       |    /// - Returns: A query with the given `GROUP BY` clause applied.
  360|      0|    public func group(_ by: [Expressible]) -> Self {
  361|      0|        group(by, nil)
  362|      0|    }
  363|       |
  364|       |    /// Sets a `GROUP BY`-`HAVING` clause on the query.
  365|       |    ///
  366|       |    /// - Parameters:
  367|       |    ///
  368|       |    ///   - by: A column to group by.
  369|       |    ///
  370|       |    ///   - having: A condition determining which groups are returned.
  371|       |    ///
  372|       |    /// - Returns: A query with the given `GROUP BY`–`HAVING` clause applied.
  373|      0|    public func group(_ by: Expressible, having: Expression<Bool>) -> Self {
  374|      0|        group([by], having: having)
  375|      0|    }
  376|       |
  377|       |    /// Sets a `GROUP BY`-`HAVING` clause on the query.
  378|       |    ///
  379|       |    /// - Parameters:
  380|       |    ///
  381|       |    ///   - by: A column to group by.
  382|       |    ///
  383|       |    ///   - having: A condition determining which groups are returned.
  384|       |    ///
  385|       |    /// - Returns: A query with the given `GROUP BY`–`HAVING` clause applied.
  386|      0|    public func group(_ by: Expressible, having: Expression<Bool?>) -> Self {
  387|      0|        group([by], having: having)
  388|      0|    }
  389|       |
  390|       |    /// Sets a `GROUP BY`-`HAVING` clause on the query.
  391|       |    ///
  392|       |    /// - Parameters:
  393|       |    ///
  394|       |    ///   - by: A list of columns to group by.
  395|       |    ///
  396|       |    ///   - having: A condition determining which groups are returned.
  397|       |    ///
  398|       |    /// - Returns: A query with the given `GROUP BY`–`HAVING` clause applied.
  399|      0|    public func group(_ by: [Expressible], having: Expression<Bool>) -> Self {
  400|      0|        group(by, Expression<Bool?>(having))
  401|      0|    }
  402|       |
  403|       |    /// Sets a `GROUP BY`-`HAVING` clause on the query.
  404|       |    ///
  405|       |    /// - Parameters:
  406|       |    ///
  407|       |    ///   - by: A list of columns to group by.
  408|       |    ///
  409|       |    ///   - having: A condition determining which groups are returned.
  410|       |    ///
  411|       |    /// - Returns: A query with the given `GROUP BY`–`HAVING` clause applied.
  412|      0|    public func group(_ by: [Expressible], having: Expression<Bool?>) -> Self {
  413|      0|        group(by, having)
  414|      0|    }
  415|       |
  416|      0|    fileprivate func group(_ by: [Expressible], _ having: Expression<Bool?>?) -> Self {
  417|      0|        var query = self
  418|      0|        query.clauses.group = (by, having)
  419|      0|        return query
  420|      0|    }
  421|       |
  422|       |    // MARK: ORDER BY
  423|       |
  424|       |    /// Sets an `ORDER BY` clause on the query.
  425|       |    ///
  426|       |    ///     let users = Table("users")
  427|       |    ///     let email = Expression<String>("email")
  428|       |    ///     let name = Expression<String?>("name")
  429|       |    ///
  430|       |    ///     users.order(email.desc, name.asc)
  431|       |    ///     // SELECT * FROM "users" ORDER BY "email" DESC, "name" ASC
  432|       |    ///
  433|       |    /// - Parameter by: An ordered list of columns and directions to sort by.
  434|       |    ///
  435|       |    /// - Returns: A query with the given `ORDER BY` clause applied.
  436|      2|    public func order(_ by: Expressible...) -> Self {
  437|      2|        order(by)
  438|      2|    }
  439|       |
  440|       |    /// Sets an `ORDER BY` clause on the query.
  441|       |    ///
  442|       |    ///     let users = Table("users")
  443|       |    ///     let email = Expression<String>("email")
  444|       |    ///     let name = Expression<String?>("name")
  445|       |    ///
  446|       |    ///     users.order([email.desc, name.asc])
  447|       |    ///     // SELECT * FROM "users" ORDER BY "email" DESC, "name" ASC
  448|       |    ///
  449|       |    /// - Parameter by: An ordered list of columns and directions to sort by.
  450|       |    ///
  451|       |    /// - Returns: A query with the given `ORDER BY` clause applied.
  452|      2|    public func order(_ by: [Expressible]) -> Self {
  453|      2|        var query = self
  454|      2|        query.clauses.order = by
  455|      2|        return query
  456|      2|    }
  457|       |
  458|       |    // MARK: LIMIT/OFFSET
  459|       |
  460|       |    /// Sets the LIMIT clause (and resets any OFFSET clause) on the query.
  461|       |    ///
  462|       |    ///     let users = Table("users")
  463|       |    ///
  464|       |    ///     users.limit(20)
  465|       |    ///     // SELECT * FROM "users" LIMIT 20
  466|       |    ///
  467|       |    /// - Parameter length: The maximum number of rows to return (or `nil` to
  468|       |    ///   return unlimited rows).
  469|       |    ///
  470|       |    /// - Returns: A query with the given LIMIT clause applied.
  471|      0|    public func limit(_ length: Int?) -> Self {
  472|      0|        limit(length, nil)
  473|      0|    }
  474|       |
  475|       |    /// Sets LIMIT and OFFSET clauses on the query.
  476|       |    ///
  477|       |    ///     let users = Table("users")
  478|       |    ///
  479|       |    ///     users.limit(20, offset: 20)
  480|       |    ///     // SELECT * FROM "users" LIMIT 20 OFFSET 20
  481|       |    ///
  482|       |    /// - Parameters:
  483|       |    ///
  484|       |    ///   - length: The maximum number of rows to return.
  485|       |    ///
  486|       |    ///   - offset: The number of rows to skip.
  487|       |    ///
  488|       |    /// - Returns: A query with the given LIMIT and OFFSET clauses applied.
  489|      0|    public func limit(_ length: Int, offset: Int) -> Self {
  490|      0|        limit(length, offset)
  491|      0|    }
  492|       |
  493|       |    // prevents limit(nil, offset: 5)
  494|      0|    fileprivate func limit(_ length: Int?, _ offset: Int?) -> Self {
  495|      0|        var query = self
  496|      0|        query.clauses.limit = length.map { ($0, offset) }
  497|      0|        return query
  498|      0|    }
  499|       |
  500|       |    // MARK: - Clauses
  501|       |    //
  502|       |    // MARK: SELECT
  503|       |
  504|       |    // MARK: -
  505|       |
  506|  3.00k|    fileprivate var selectClause: Expressible {
  507|  3.00k|        " ".join([
  508|  3.00k|           Expression<Void>(literal:
  509|  3.00k|                            clauses.select.distinct ? "SELECT DISTINCT" : "SELECT"),
  510|  3.00k|           ", ".join(clauses.select.columns),
  511|  3.00k|           Expression<Void>(literal: "FROM"),
  512|  3.00k|           tableName(alias: true)
  513|  3.00k|       ])
  514|  3.00k|    }
  515|       |
  516|  3.00k|    fileprivate var joinClause: Expressible? {
  517|  3.00k|        guard !clauses.join.isEmpty else {
  518|  3.00k|            return nil
  519|  3.00k|        }
  520|      0|
  521|      0|        return " ".join(clauses.join.map { arg in
  522|      0|            let (type, query, condition) = arg
  523|      0|            return " ".join([
  524|      0|                Expression<Void>(literal: "\(type.rawValue) JOIN"),
  525|      0|                query.tableName(alias: true),
  526|      0|                Expression<Void>(literal: "ON"),
  527|      0|                condition
  528|      0|            ])
  529|      0|        })
  530|  3.00k|    }
  531|       |
  532|  3.02k|    fileprivate var whereClause: Expressible? {
  533|  3.02k|        guard let filters = clauses.filters else {
  534|  1.49k|            return nil
  535|  1.53k|        }
  536|  1.53k|
  537|  1.53k|        return " ".join([
  538|  1.53k|            Expression<Void>(literal: "WHERE"),
  539|  1.53k|            filters
  540|  1.53k|        ])
  541|  3.02k|    }
  542|       |
  543|  3.00k|    fileprivate var groupByClause: Expressible? {
  544|  3.00k|        guard let group = clauses.group else {
  545|  3.00k|            return nil
  546|  3.00k|        }
  547|      0|
  548|      0|        let groupByClause = " ".join([
  549|      0|            Expression<Void>(literal: "GROUP BY"),
  550|      0|            ", ".join(group.by)
  551|      0|        ])
  552|      0|
  553|      0|        guard let having = group.having else {
  554|      0|            return groupByClause
  555|      0|        }
  556|      0|
  557|      0|        return " ".join([
  558|      0|            groupByClause,
  559|      0|            " ".join([
  560|      0|                Expression<Void>(literal: "HAVING"),
  561|      0|                having
  562|      0|            ])
  563|      0|        ])
  564|      0|    }
  565|       |
  566|  3.02k|    fileprivate var orderClause: Expressible? {
  567|  3.02k|        guard !clauses.order.isEmpty else {
  568|  3.02k|            return nil
  569|  3.02k|        }
  570|      2|
  571|      2|        return " ".join([
  572|      2|            Expression<Void>(literal: "ORDER BY"),
  573|      2|            ", ".join(clauses.order)
  574|      2|        ])
  575|  3.02k|    }
  576|       |
  577|  3.02k|    fileprivate var limitOffsetClause: Expressible? {
  578|  3.02k|        guard let limit = clauses.limit else {
  579|  3.02k|            return nil
  580|  3.02k|        }
  581|      0|
  582|      0|        let limitClause = Expression<Void>(literal: "LIMIT \(limit.length)")
  583|      0|
  584|      0|        guard let offset = limit.offset else {
  585|      0|            return limitClause
  586|      0|        }
  587|      0|
  588|      0|        return " ".join([
  589|      0|            limitClause,
  590|      0|            Expression<Void>(literal: "OFFSET \(offset)")
  591|      0|        ])
  592|      0|    }
  593|       |
  594|  3.00k|    fileprivate var unionClause: Expressible? {
  595|  3.00k|        guard !clauses.union.isEmpty else {
  596|  3.00k|            return nil
  597|  3.00k|        }
  598|      0|
  599|      0|        return " ".join(clauses.union.map { query in
  600|      0|            " ".join([
  601|      0|                Expression<Void>(literal: "UNION"),
  602|      0|                query
  603|      0|            ])
  604|      0|        })
  605|  3.00k|    }
  606|       |
  607|       |    // MARK: -
  608|       |
  609|      0|    public func alias(_ aliasName: String) -> Self {
  610|      0|        var query = self
  611|      0|        query.clauses.from = (clauses.from.name, aliasName, clauses.from.database)
  612|      0|        return query
  613|      0|    }
  614|       |
  615|       |    // MARK: - Operations
  616|       |    //
  617|       |    // MARK: INSERT
  618|       |
  619|      0|    public func insert(_ value: Setter, _ more: Setter...) -> Insert {
  620|      0|        insert([value] + more)
  621|      0|    }
  622|       |
  623|      0|    public func insert(_ values: [Setter]) -> Insert {
  624|      0|        insert(nil, values)
  625|      0|    }
  626|       |
  627|      0|    public func insert(or onConflict: OnConflict, _ values: Setter...) -> Insert {
  628|      0|        insert(or: onConflict, values)
  629|      0|    }
  630|       |
  631|      0|    public func insert(or onConflict: OnConflict, _ values: [Setter]) -> Insert {
  632|      0|        insert(onConflict, values)
  633|      0|    }
  634|       |
  635|      0|    public func insertMany( _ values: [[Setter]]) -> Insert {
  636|      0|        insertMany(nil, values)
  637|      0|    }
  638|       |
  639|      0|    public func insertMany(or onConflict: OnConflict, _ values: [[Setter]]) -> Insert {
  640|      0|        insertMany(onConflict, values)
  641|      0|    }
  642|       |
  643|      0|    public func insertMany(or onConflict: OnConflict, _ values: [Setter]...) -> Insert {
  644|      0|        insertMany(onConflict, values)
  645|      0|    }
  646|       |
  647|      0|    fileprivate func insert(_ or: OnConflict?, _ values: [Setter]) -> Insert {
  648|      0|        let insert = values.reduce((columns: [Expressible](), values: [Expressible]())) { insert, setter in
  649|      0|            (insert.columns + [setter.column], insert.values + [setter.value])
  650|      0|        }
  651|      0|
  652|      0|        let clauses: [Expressible?] = [
  653|      0|            Expression<Void>(literal: "INSERT"),
  654|      0|            or.map { Expression<Void>(literal: "OR \($0.rawValue)") },
  655|      0|            Expression<Void>(literal: "INTO"),
  656|      0|            tableName(),
  657|      0|            "".wrap(insert.columns) as Expression<Void>,
  658|      0|            Expression<Void>(literal: "VALUES"),
  659|      0|            "".wrap(insert.values) as Expression<Void>,
  660|      0|            whereClause
  661|      0|        ]
  662|      0|
  663|      0|        return Insert(" ".join(clauses.compactMap { $0 }).expression)
  664|      0|    }
  665|       |
  666|      0|    fileprivate func insertMany(_ or: OnConflict?, _ values: [[Setter]]) -> Insert {
  667|      0|        guard let firstInsert = values.first else {
  668|      0|            // must be at least 1 object or else we don't know columns. Default to default inserts.
  669|      0|            return insert()
  670|      0|        }
  671|      0|        let columns = firstInsert.map { $0.column }
  672|      0|        let insertValues = values.map { rowValues in
  673|      0|            rowValues.reduce([Expressible]()) { insert, setter in
  674|      0|                insert + [setter.value]
  675|      0|            }
  676|      0|        }
  677|      0|
  678|      0|        let clauses: [Expressible?] = [
  679|      0|            Expression<Void>(literal: "INSERT"),
  680|      0|            or.map { Expression<Void>(literal: "OR \($0.rawValue)") },
  681|      0|            Expression<Void>(literal: "INTO"),
  682|      0|            tableName(),
  683|      0|            "".wrap(columns) as Expression<Void>,
  684|      0|            Expression<Void>(literal: "VALUES"),
  685|      0|            ", ".join(insertValues.map({ "".wrap($0) as Expression<Void> })),
  686|      0|            whereClause
  687|      0|        ]
  688|      0|        return Insert(" ".join(clauses.compactMap { $0 }).expression)
  689|      0|    }
  690|       |
  691|       |    /// Runs an `INSERT` statement against the query with `DEFAULT VALUES`.
  692|      0|    public func insert() -> Insert {
  693|      0|        Insert(" ".join([
  694|      0|            Expression<Void>(literal: "INSERT INTO"),
  695|      0|            tableName(),
  696|      0|            Expression<Void>(literal: "DEFAULT VALUES")
  697|      0|        ]).expression)
  698|      0|    }
  699|       |
  700|       |    /// Runs an `INSERT` statement against the query with the results of another
  701|       |    /// query.
  702|       |    ///
  703|       |    /// - Parameter query: A query to `SELECT` results from.
  704|       |    ///
  705|       |    /// - Returns: The number of updated rows and statement.
  706|      0|    public func insert(_ query: QueryType) -> Update {
  707|      0|        Update(" ".join([
  708|      0|            Expression<Void>(literal: "INSERT INTO"),
  709|      0|            tableName(),
  710|      0|            query.expression
  711|      0|       ]).expression)
  712|      0|    }
  713|       |
  714|       |    // MARK: UPSERT
  715|       |
  716|      0|    public func upsert(_ insertValues: Setter..., onConflictOf conflicting: Expressible) -> Insert {
  717|      0|        upsert(insertValues, onConflictOf: conflicting)
  718|      0|    }
  719|       |
  720|      0|    public func upsert(_ insertValues: [Setter], onConflictOf conflicting: Expressible) -> Insert {
  721|      0|        let setValues = insertValues.filter { $0.column.asSQL() != conflicting.asSQL() }
  722|      0|            .map { Setter(excluded: $0.column) }
  723|      0|        return upsert(insertValues, onConflictOf: conflicting, set: setValues)
  724|      0|    }
  725|       |
  726|      0|    public func upsert(_ insertValues: Setter..., onConflictOf conflicting: Expressible, set setValues: [Setter]) -> Insert {
  727|      0|        upsert(insertValues, onConflictOf: conflicting, set: setValues)
  728|      0|    }
  729|       |
  730|      0|    public func upsert(_ insertValues: [Setter], onConflictOf conflicting: Expressible, set setValues: [Setter]) -> Insert {
  731|      0|        let insert = insertValues.reduce((columns: [Expressible](), values: [Expressible]())) { insert, setter in
  732|      0|            (insert.columns + [setter.column], insert.values + [setter.value])
  733|      0|        }
  734|      0|
  735|      0|        let clauses: [Expressible?] = [
  736|      0|            Expression<Void>(literal: "INSERT"),
  737|      0|            Expression<Void>(literal: "INTO"),
  738|      0|            tableName(),
  739|      0|            "".wrap(insert.columns) as Expression<Void>,
  740|      0|            Expression<Void>(literal: "VALUES"),
  741|      0|            "".wrap(insert.values) as Expression<Void>,
  742|      0|            whereClause,
  743|      0|            Expression<Void>(literal: "ON CONFLICT"),
  744|      0|            "".wrap(conflicting) as Expression<Void>,
  745|      0|            Expression<Void>(literal: "DO UPDATE SET"),
  746|      0|            ", ".join(setValues.map { $0.expression })
  747|      0|        ]
  748|      0|
  749|      0|        return Insert(" ".join(clauses.compactMap { $0 }).expression)
  750|      0|    }
  751|       |
  752|       |    // MARK: UPDATE
  753|       |
  754|     18|    public func update(_ values: Setter...) -> Update {
  755|     18|        update(values)
  756|     18|    }
  757|       |
  758|     18|    public func update(_ values: [Setter]) -> Update {
  759|     18|        let clauses: [Expressible?] = [
  760|     18|            Expression<Void>(literal: "UPDATE"),
  761|     18|            tableName(),
  762|     18|            Expression<Void>(literal: "SET"),
  763|     54|            ", ".join(values.map { " = ".join([$0.column, $0.value]) }),
  764|     18|            whereClause,
  765|     18|            orderClause,
  766|     18|            limitOffsetClause
  767|     18|        ]
  768|     18|
  769|    126|        return Update(" ".join(clauses.compactMap { $0 }).expression)
  770|     18|    }
  771|       |
  772|       |    // MARK: DELETE
  773|       |
  774|      0|    public func delete() -> Delete {
  775|      0|        let clauses: [Expressible?] = [
  776|      0|            Expression<Void>(literal: "DELETE FROM"),
  777|      0|            tableName(),
  778|      0|            whereClause,
  779|      0|            orderClause,
  780|      0|            limitOffsetClause
  781|      0|        ]
  782|      0|
  783|      0|        return Delete(" ".join(clauses.compactMap { $0 }).expression)
  784|      0|    }
  785|       |
  786|       |    // MARK: EXISTS
  787|       |
  788|      0|    public var exists: Select<Bool> {
  789|      0|        Select(" ".join([
  790|      0|            Expression<Void>(literal: "SELECT EXISTS"),
  791|      0|            "".wrap(expression) as Expression<Void>
  792|      0|        ]).expression)
  793|      0|    }
  794|       |
  795|       |    // MARK: -
  796|       |
  797|       |    /// Prefixes a column expression with the query’s table name or alias.
  798|       |    ///
  799|       |    /// - Parameter column: A column expression.
  800|       |    ///
  801|       |    /// - Returns: A column expression namespaced with the query’s table name or
  802|       |    ///   alias.
  803|      0|    public func namespace<V>(_ column: Expression<V>) -> Expression<V> {
  804|      0|        Expression(".".join([tableName(), column]).expression)
  805|      0|    }
  806|       |
  807|      0|    public subscript<T>(column: Expression<T>) -> Expression<T> {
  808|      0|        namespace(column)
  809|      0|    }
  810|       |
  811|      0|    public subscript<T>(column: Expression<T?>) -> Expression<T?> {
  812|      0|        namespace(column)
  813|      0|    }
  814|       |
  815|       |    /// Prefixes a star with the query’s table name or alias.
  816|       |    ///
  817|       |    /// - Parameter star: A literal `*`.
  818|       |    ///
  819|       |    /// - Returns: A `*` expression namespaced with the query’s table name or
  820|       |    ///   alias.
  821|      0|    public subscript(star: Star) -> Expression<Void> {
  822|      0|        namespace(star(nil, nil))
  823|      0|    }
  824|       |
  825|       |    // MARK: -
  826|       |
  827|       |    // TODO: alias support
  828|  3.03k|    func tableName(alias aliased: Bool = false) -> Expressible {
  829|  3.03k|        guard let alias = clauses.from.alias, aliased else {
  830|  3.03k|            return database(namespace: clauses.from.alias ?? clauses.from.name)
  831|  3.03k|        }
  832|      0|
  833|      0|        return " ".join([
  834|      0|            database(namespace: clauses.from.name),
  835|      0|            Expression<Void>(literal: "AS"),
  836|      0|            Expression<Void>(alias)
  837|      0|        ])
  838|  3.03k|    }
  839|       |
  840|      0|    func tableName(qualified: Bool) -> Expressible {
  841|      0|        if qualified {
  842|      0|            return tableName()
  843|      0|        }
  844|      0|        return Expression<Void>(clauses.from.alias ?? clauses.from.name)
  845|      0|    }
  846|       |
  847|  3.03k|    func database(namespace name: String) -> Expressible {
  848|  3.03k|        let name = Expression<Void>(name)
  849|  3.03k|
  850|  3.03k|        guard let database = clauses.from.database else {
  851|  3.03k|            return name
  852|  3.03k|        }
  853|      0|
  854|      0|        return ".".join([Expression<Void>(database), name])
  855|  3.03k|    }
  856|       |
  857|  3.00k|    public var expression: Expression<Void> {
  858|  3.00k|        let clauses: [Expressible?] = [
  859|  3.00k|            selectClause,
  860|  3.00k|            joinClause,
  861|  3.00k|            whereClause,
  862|  3.00k|            groupByClause,
  863|  3.00k|            unionClause,
  864|  3.00k|            orderClause,
  865|  3.00k|            limitOffsetClause
  866|  3.00k|        ]
  867|  3.00k|
  868|  21.0k|        return " ".join(clauses.compactMap { $0 }).expression
  869|  3.00k|    }
  870|       |
  871|       |}
  872|       |
  873|       |// TODO: decide: simplify the below with a boxed type instead
  874|       |
  875|       |/// Queries a collection of chainable helper functions and expressions to build
  876|       |/// executable SQL statements.
  877|       |public struct Table: SchemaType {
  878|       |
  879|       |    public static let identifier = "TABLE"
  880|       |
  881|       |    public var clauses: QueryClauses
  882|       |
  883|  1.49k|    public init(_ name: String, database: String? = nil) {
  884|  1.49k|        clauses = QueryClauses(name, alias: nil, database: database)
  885|  1.49k|    }
  886|       |
  887|       |}
  888|       |
  889|       |public struct View: SchemaType {
  890|       |
  891|       |    public static let identifier = "VIEW"
  892|       |
  893|       |    public var clauses: QueryClauses
  894|       |
  895|      0|    public init(_ name: String, database: String? = nil) {
  896|      0|        clauses = QueryClauses(name, alias: nil, database: database)
  897|      0|    }
  898|       |
  899|       |}
  900|       |
  901|       |public struct VirtualTable: SchemaType {
  902|       |
  903|       |    public static let identifier = "VIRTUAL TABLE"
  904|       |
  905|       |    public var clauses: QueryClauses
  906|       |
  907|      0|    public init(_ name: String, database: String? = nil) {
  908|      0|        clauses = QueryClauses(name, alias: nil, database: database)
  909|      0|    }
  910|       |
  911|       |}
  912|       |
  913|       |// TODO: make `ScalarQuery` work in `QueryType.select()`, `.filter()`, etc.
  914|       |
  915|       |public struct ScalarQuery<V>: QueryType {
  916|       |
  917|       |    public var clauses: QueryClauses
  918|       |
  919|     36|    public init(_ name: String, database: String? = nil) {
  920|     36|        clauses = QueryClauses(name, alias: nil, database: database)
  921|     36|    }
  922|       |
  923|       |}
  924|       |
  925|       |// TODO: decide: simplify the below with a boxed type instead
  926|       |
  927|       |public struct Select<T>: ExpressionType {
  928|       |
  929|       |    public var template: String
  930|       |    public var bindings: [Binding?]
  931|       |
  932|      0|    public init(_ template: String, _ bindings: [Binding?]) {
  933|      0|        self.template = template
  934|      0|        self.bindings = bindings
  935|      0|    }
  936|       |
  937|       |}
  938|       |
  939|       |public struct Insert: ExpressionType {
  940|       |
  941|       |    public var template: String
  942|       |    public var bindings: [Binding?]
  943|       |
  944|      0|    public init(_ template: String, _ bindings: [Binding?]) {
  945|      0|        self.template = template
  946|      0|        self.bindings = bindings
  947|      0|    }
  948|       |
  949|       |}
  950|       |
  951|       |public struct Update: ExpressionType {
  952|       |
  953|       |    public var template: String
  954|       |    public var bindings: [Binding?]
  955|       |
  956|     18|    public init(_ template: String, _ bindings: [Binding?]) {
  957|     18|        self.template = template
  958|     18|        self.bindings = bindings
  959|     18|    }
  960|       |
  961|       |}
  962|       |
  963|       |public struct Delete: ExpressionType {
  964|       |
  965|       |    public var template: String
  966|       |    public var bindings: [Binding?]
  967|       |
  968|      0|    public init(_ template: String, _ bindings: [Binding?]) {
  969|      0|        self.template = template
  970|      0|        self.bindings = bindings
  971|      0|    }
  972|       |
  973|       |}
  974|       |
  975|       |public struct RowIterator: FailableIterator {
  976|       |    public typealias Element = Row
  977|       |    let statement: Statement
  978|       |    let columnNames: [String: Int]
  979|       |
  980|      0|    public func failableNext() throws -> Row? {
  981|      0|        try statement.failableNext().flatMap { Row(columnNames, $0) }
  982|      0|    }
  983|       |
  984|      0|    public func map<T>(_ transform: (Element) throws -> T) throws -> [T] {
  985|      0|        var elements = [T]()
  986|      0|        while let row = try failableNext() {
  987|      0|            elements.append(try transform(row))
  988|      0|        }
  989|      0|        return elements
  990|      0|    }
  991|       |}
  992|       |
  993|       |extension Connection {
  994|       |
  995|  1.48k|    public func prepare(_ query: QueryType) throws -> AnySequence<Row> {
  996|  1.48k|        let expression = query.expression
  997|  1.48k|        let statement = try prepare(expression.template, expression.bindings)
  998|  1.48k|
  999|  1.48k|        let columnNames = try columnNamesForQuery(query)
 1000|  1.48k|
 1001|  1.48k|        return AnySequence {
 1002|  2.50k|            AnyIterator { statement.next().map { Row(columnNames, $0) } }
 1003|  1.48k|        }
 1004|  1.48k|    }
 1005|       |
 1006|      0|    public func prepareRowIterator(_ query: QueryType) throws -> RowIterator {
 1007|      0|        let expression = query.expression
 1008|      0|        let statement = try prepare(expression.template, expression.bindings)
 1009|      0|        return RowIterator(statement: statement, columnNames: try columnNamesForQuery(query))
 1010|      0|    }
 1011|       |
 1012|  1.48k|    private func columnNamesForQuery(_ query: QueryType) throws -> [String: Int] {
 1013|  1.48k|        var (columnNames, idx) = ([String: Int](), 0)
 1014|  1.48k|        column: for each in query.clauses.select.columns {
 1015|  1.48k|            var names = each.expression.template.split { $0 == "." }.map(String.init)
 1016|  1.48k|            let column = names.removeLast()
 1017|  1.48k|            let namespace = names.joined(separator: ".")
 1018|  1.48k|
 1019|  1.48k|            func expandGlob(_ namespace: Bool) -> (QueryType) throws -> Void {
 1020|  1.48k|                { (queryType: QueryType) throws -> Void in
 1021|  1.48k|                    var query = type(of: queryType).init(queryType.clauses.from.name, database: queryType.clauses.from.database)
 1022|  1.48k|                    query.clauses.select = queryType.clauses.select
 1023|  1.48k|                    let expression = query.expression
 1024|  13.3k|                    var names = try self.prepare(expression.template, expression.bindings).columnNames.map { $0.quote() }
 1025|  1.48k|                    if namespace { names = names.map { "\(queryType.tableName().expression.template).\($0)" } }
 1026|  13.3k|                    for name in names { columnNames[name] = idx; idx += 1 }
 1027|  1.48k|                }
 1028|  1.48k|            }
 1029|  1.48k|
 1030|  1.48k|            if column == "*" {
 1031|  1.48k|                var select = query
 1032|  1.48k|                select.clauses.select = (false, [Expression<Void>(literal: "*") as Expressible])
 1033|  1.48k|                let queries = [select] + query.clauses.join.map { $0.query }
 1034|  1.48k|                if !namespace.isEmpty {
 1035|      0|                    for q in queries {
 1036|      0|                        if q.tableName().expression.template == namespace {
 1037|      0|                            try expandGlob(true)(q)
 1038|      0|                            continue column
 1039|      0|                        }
 1040|      0|                    }
 1041|      0|                    throw QueryError.noSuchTable(name: namespace)
 1042|  1.48k|                }
 1043|  1.48k|                for q in queries {
 1044|  1.48k|                    try expandGlob(query.clauses.join.count > 0)(q)
 1045|  1.48k|                }
 1046|  1.48k|                continue
 1047|  1.48k|            }
 1048|      0|
 1049|      0|            columnNames[each.expression.template] = idx
 1050|      0|            idx += 1
 1051|  1.48k|        }
 1052|  1.48k|        return columnNames
 1053|  1.48k|    }
 1054|       |
 1055|     36|    public func scalar<V: Value>(_ query: ScalarQuery<V>) throws -> V {
 1056|     36|        let expression = query.expression
 1057|     36|        return value(try scalar(expression.template, expression.bindings))
 1058|     36|    }
 1059|       |
 1060|      0|    public func scalar<V: Value>(_ query: ScalarQuery<V?>) throws -> V.ValueType? {
 1061|      0|        let expression = query.expression
 1062|      0|        guard let value = try scalar(expression.template, expression.bindings) as? V.Datatype else { return nil }
 1063|      0|        return V.fromDatatypeValue(value)
 1064|      0|    }
 1065|       |
 1066|      0|    public func scalar<V: Value>(_ query: Select<V>) throws -> V {
 1067|      0|        let expression = query.expression
 1068|      0|        return value(try scalar(expression.template, expression.bindings))
 1069|      0|    }
 1070|       |
 1071|      0|    public func scalar<V: Value>(_ query: Select<V?>) throws ->  V.ValueType? {
 1072|      0|        let expression = query.expression
 1073|      0|        guard let value = try scalar(expression.template, expression.bindings) as? V.Datatype else { return nil }
 1074|      0|        return V.fromDatatypeValue(value)
 1075|      0|    }
 1076|       |
 1077|      0|    public func pluck(_ query: QueryType) throws -> Row? {
 1078|      0|        try prepareRowIterator(query.limit(1, query.clauses.limit?.offset)).failableNext()
 1079|      0|    }
 1080|       |
 1081|       |    /// Runs an `Insert` query.
 1082|       |    ///
 1083|       |    /// - SeeAlso: `QueryType.insert(value:_:)`
 1084|       |    /// - SeeAlso: `QueryType.insert(values:)`
 1085|       |    /// - SeeAlso: `QueryType.insert(or:_:)`
 1086|       |    /// - SeeAlso: `QueryType.insertMany(values:)`
 1087|       |    /// - SeeAlso: `QueryType.insertMany(or:_:)`
 1088|       |    /// - SeeAlso: `QueryType.insert()`
 1089|       |    ///
 1090|       |    /// - Parameter query: An insert query.
 1091|       |    ///
 1092|       |    /// - Returns: The insert’s rowid.
 1093|      0|    @discardableResult public func run(_ query: Insert) throws -> Int64 {
 1094|      0|        let expression = query.expression
 1095|      0|        return try sync {
 1096|      0|            try self.run(expression.template, expression.bindings)
 1097|      0|            return lastInsertRowid
 1098|      0|        }
 1099|      0|    }
 1100|       |
 1101|       |    /// Runs an `Update` query.
 1102|       |    ///
 1103|       |    /// - SeeAlso: `QueryType.insert(query:)`
 1104|       |    /// - SeeAlso: `QueryType.update(values:)`
 1105|       |    ///
 1106|       |    /// - Parameter query: An update query.
 1107|       |    ///
 1108|       |    /// - Returns: The number of updated rows.
 1109|     18|    @discardableResult public func run(_ query: Update) throws -> Int {
 1110|     18|        let expression = query.expression
 1111|     18|        return try sync {
 1112|     18|            try self.run(expression.template, expression.bindings)
 1113|     18|            return changes
 1114|     18|        }
 1115|     18|    }
 1116|       |
 1117|       |    /// Runs a `Delete` query.
 1118|       |    ///
 1119|       |    /// - SeeAlso: `QueryType.delete()`
 1120|       |    ///
 1121|       |    /// - Parameter query: A delete query.
 1122|       |    ///
 1123|       |    /// - Returns: The number of deleted rows.
 1124|      0|    @discardableResult public func run(_ query: Delete) throws -> Int {
 1125|      0|        let expression = query.expression
 1126|      0|        return try sync {
 1127|      0|            try self.run(expression.template, expression.bindings)
 1128|      0|            return changes
 1129|      0|        }
 1130|      0|    }
 1131|       |
 1132|       |}
 1133|       |
 1134|       |public struct Row {
 1135|       |
 1136|       |    let columnNames: [String: Int]
 1137|       |
 1138|       |    fileprivate let values: [Binding?]
 1139|       |
 1140|  2.47k|    internal init(_ columnNames: [String: Int], _ values: [Binding?]) {
 1141|  2.47k|        self.columnNames = columnNames
 1142|  2.47k|        self.values = values
 1143|  2.47k|    }
 1144|       |
 1145|      0|    func hasValue(for column: String) -> Bool {
 1146|      0|        guard let idx = columnNames[column.quote()] else {
 1147|      0|            return false
 1148|      0|        }
 1149|      0|        return values[idx] != nil
 1150|      0|    }
 1151|       |
 1152|       |    /// Returns a row’s value for the given column.
 1153|       |    ///
 1154|       |    /// - Parameter column: An expression representing a column selected in a Query.
 1155|       |    ///
 1156|       |    /// - Returns: The value for the given column.
 1157|  24.0k|    public func get<V: Value>(_ column: Expression<V>) throws -> V {
 1158|  24.0k|        if let value = try get(Expression<V?>(column)) {
 1159|  24.0k|            return value
 1160|  24.0k|        } else {
 1161|      4|            throw QueryError.unexpectedNullValue(name: column.template)
 1162|      4|        }
 1163|      0|    }
 1164|       |
 1165|  24.0k|    public func get<V: Value>(_ column: Expression<V?>) throws -> V? {
 1166|  24.0k|        func valueAtIndex(_ idx: Int) -> V? {
 1167|  24.0k|            guard let value = values[idx] as? V.Datatype else { return nil }
 1168|  24.0k|            return V.fromDatatypeValue(value) as? V
 1169|  24.0k|        }
 1170|  24.0k|
 1171|  24.0k|        guard let idx = columnNames[column.template] else {
 1172|      0|            let similar = Array(columnNames.keys).filter { $0.hasSuffix(".\(column.template)") }
 1173|      0|
 1174|      0|            switch similar.count {
 1175|      0|            case 0:
 1176|      0|                throw QueryError.noSuchColumn(name: column.template, columns: columnNames.keys.sorted())
 1177|      0|            case 1:
 1178|      0|                return valueAtIndex(columnNames[similar[0]]!)
 1179|      0|            default:
 1180|      0|                throw QueryError.ambiguousColumn(name: column.template, similar: similar)
 1181|      0|            }
 1182|  24.0k|        }
 1183|  24.0k|
 1184|  24.0k|        return valueAtIndex(idx)
 1185|  24.0k|    }
 1186|       |
 1187|  24.0k|    public subscript<T: Value>(column: Expression<T>) -> T {
 1188|  24.0k|        // swiftlint:disable:next force_try
 1189|  24.0k|        try! get(column)
 1190|  24.0k|    }
 1191|       |
 1192|      0|    public subscript<T: Value>(column: Expression<T?>) -> T? {
 1193|      0|        // swiftlint:disable:next force_try
 1194|      0|        try! get(column)
 1195|      0|    }
 1196|       |}
 1197|       |
 1198|       |/// Determines the join operator for a query’s `JOIN` clause.
 1199|       |public enum JoinType: String {
 1200|       |
 1201|       |    /// A `CROSS` join.
 1202|       |    case cross = "CROSS"
 1203|       |
 1204|       |    /// An `INNER` join.
 1205|       |    case inner = "INNER"
 1206|       |
 1207|       |    /// A `LEFT OUTER` join.
 1208|       |    case leftOuter = "LEFT OUTER"
 1209|       |
 1210|       |}
 1211|       |
 1212|       |/// ON CONFLICT resolutions.
 1213|       |public enum OnConflict: String {
 1214|       |
 1215|       |    case replace = "REPLACE"
 1216|       |
 1217|       |    case rollback = "ROLLBACK"
 1218|       |
 1219|       |    case abort = "ABORT"
 1220|       |
 1221|       |    case fail = "FAIL"
 1222|       |
 1223|       |    case ignore = "IGNORE"
 1224|       |
 1225|       |}
 1226|       |
 1227|       |// MARK: - Private
 1228|       |
 1229|       |public struct QueryClauses {
 1230|       |
 1231|  1.53k|    var select = (distinct: false, columns: [Expression<Void>(literal: "*") as Expressible])
 1232|       |
 1233|       |    var from: (name: String, alias: String?, database: String?)
 1234|       |
 1235|  1.53k|    var join = [(type: JoinType, query: QueryType, condition: Expressible)]()
 1236|       |
 1237|       |    var filters: Expression<Bool?>?
 1238|       |
 1239|       |    var group: (by: [Expressible], having: Expression<Bool?>?)?
 1240|       |
 1241|  1.53k|    var order = [Expressible]()
 1242|       |
 1243|       |    var limit: (length: Int, offset: Int?)?
 1244|       |
 1245|  1.53k|    var union = [QueryType]()
 1246|       |
 1247|  1.53k|    fileprivate init(_ name: String, alias: String?, database: String?) {
 1248|  1.53k|        from = (name, alias, database)
 1249|  1.53k|    }
 1250|       |
 1251|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Typed/Schema.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |extension SchemaType {
   26|       |
   27|       |    // MARK: - DROP TABLE / VIEW / VIRTUAL TABLE
   28|       |
   29|      0|    public func drop(ifExists: Bool = false) -> String {
   30|      0|        drop("TABLE", tableName(), ifExists)
   31|      0|    }
   32|       |
   33|       |}
   34|       |
   35|       |extension Table {
   36|       |
   37|       |    // MARK: - CREATE TABLE
   38|       |
   39|       |    public func create(temporary: Bool = false, ifNotExists: Bool = false, withoutRowid: Bool = false,
   40|      8|                       block: (TableBuilder) -> Void) -> String {
   41|      8|        let builder = TableBuilder()
   42|      8|
   43|      8|        block(builder)
   44|      8|
   45|      8|        let clauses: [Expressible?] = [
   46|      8|            create(Table.identifier, tableName(), temporary ? .temporary : nil, ifNotExists),
   47|      8|            "".wrap(builder.definitions) as Expression<Void>,
   48|      8|            withoutRowid ? Expression<Void>(literal: "WITHOUT ROWID") : nil
   49|      8|        ]
   50|      8|
   51|     24|        return " ".join(clauses.compactMap { $0 }).asSQL()
   52|      8|    }
   53|       |
   54|      0|    public func create(_ query: QueryType, temporary: Bool = false, ifNotExists: Bool = false) -> String {
   55|      0|        let clauses: [Expressible?] = [
   56|      0|            create(Table.identifier, tableName(), temporary ? .temporary : nil, ifNotExists),
   57|      0|            Expression<Void>(literal: "AS"),
   58|      0|            query
   59|      0|        ]
   60|      0|
   61|      0|        return " ".join(clauses.compactMap { $0 }).asSQL()
   62|      0|    }
   63|       |
   64|       |    // MARK: - ALTER TABLE … ADD COLUMN
   65|       |
   66|      0|    public func addColumn<V: Value>(_ name: Expression<V>, check: Expression<Bool>? = nil, defaultValue: V) -> String {
   67|      0|        addColumn(definition(name, V.declaredDatatype, nil, false, false, check, defaultValue, nil, nil))
   68|      0|    }
   69|       |
   70|      0|    public func addColumn<V: Value>(_ name: Expression<V>, check: Expression<Bool?>, defaultValue: V) -> String {
   71|      0|        addColumn(definition(name, V.declaredDatatype, nil, false, false, check, defaultValue, nil, nil))
   72|      0|    }
   73|       |
   74|      0|    public func addColumn<V: Value>(_ name: Expression<V?>, check: Expression<Bool>? = nil, defaultValue: V? = nil) -> String {
   75|      0|        addColumn(definition(name, V.declaredDatatype, nil, true, false, check, defaultValue, nil, nil))
   76|      0|    }
   77|       |
   78|      0|    public func addColumn<V: Value>(_ name: Expression<V?>, check: Expression<Bool?>, defaultValue: V? = nil) -> String {
   79|      0|        addColumn(definition(name, V.declaredDatatype, nil, true, false, check, defaultValue, nil, nil))
   80|      0|    }
   81|       |
   82|       |    public func addColumn<V: Value>(_ name: Expression<V>, unique: Bool = false, check: Expression<Bool>? = nil,
   83|      0|                                    references table: QueryType, _ other: Expression<V>) -> String where V.Datatype == Int64 {
   84|      0|        addColumn(definition(name, V.declaredDatatype, nil, false, unique, check, nil, (table, other), nil))
   85|      0|    }
   86|       |
   87|       |    public func addColumn<V: Value>(_ name: Expression<V>, unique: Bool = false, check: Expression<Bool?>,
   88|      0|                                    references table: QueryType, _ other: Expression<V>) -> String where V.Datatype == Int64 {
   89|      0|        addColumn(definition(name, V.declaredDatatype, nil, false, unique, check, nil, (table, other), nil))
   90|      0|    }
   91|       |
   92|       |    public func addColumn<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool>? = nil,
   93|      0|                                    references table: QueryType, _ other: Expression<V>) -> String where V.Datatype == Int64 {
   94|      0|        addColumn(definition(name, V.declaredDatatype, nil, true, unique, check, nil, (table, other), nil))
   95|      0|    }
   96|       |
   97|       |    public func addColumn<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool?>,
   98|      0|                                    references table: QueryType, _ other: Expression<V>) -> String where V.Datatype == Int64 {
   99|      0|        addColumn(definition(name, V.declaredDatatype, nil, true, unique, check, nil, (table, other), nil))
  100|      0|    }
  101|       |
  102|       |    public func addColumn<V: Value>(_ name: Expression<V>, check: Expression<Bool>? = nil, defaultValue: V,
  103|      0|                                    collate: Collation) -> String where V.Datatype == String {
  104|      0|        addColumn(definition(name, V.declaredDatatype, nil, false, false, check, defaultValue, nil, collate))
  105|      0|    }
  106|       |
  107|       |    public func addColumn<V: Value>(_ name: Expression<V>, check: Expression<Bool?>, defaultValue: V,
  108|      0|                                    collate: Collation) -> String where V.Datatype == String {
  109|      0|        addColumn(definition(name, V.declaredDatatype, nil, false, false, check, defaultValue, nil, collate))
  110|      0|    }
  111|       |
  112|       |    public func addColumn<V: Value>(_ name: Expression<V?>, check: Expression<Bool>? = nil, defaultValue: V? = nil,
  113|      0|                                    collate: Collation) -> String where V.Datatype == String {
  114|      0|        addColumn(definition(name, V.declaredDatatype, nil, true, false, check, defaultValue, nil, collate))
  115|      0|    }
  116|       |
  117|       |    public func addColumn<V: Value>(_ name: Expression<V?>, check: Expression<Bool?>, defaultValue: V? = nil,
  118|      0|                                    collate: Collation) -> String where V.Datatype == String {
  119|      0|        addColumn(definition(name, V.declaredDatatype, nil, true, false, check, defaultValue, nil, collate))
  120|      0|    }
  121|       |
  122|      0|    fileprivate func addColumn(_ expression: Expressible) -> String {
  123|      0|        " ".join([
  124|      0|            Expression<Void>(literal: "ALTER TABLE"),
  125|      0|            tableName(),
  126|      0|            Expression<Void>(literal: "ADD COLUMN"),
  127|      0|            expression
  128|      0|        ]).asSQL()
  129|      0|    }
  130|       |
  131|       |    // MARK: - ALTER TABLE … RENAME TO
  132|       |
  133|      0|    public func rename(_ to: Table) -> String {
  134|      0|        rename(to: to)
  135|      0|    }
  136|       |
  137|       |    // MARK: - CREATE INDEX
  138|       |
  139|      0|    public func createIndex(_ columns: Expressible..., unique: Bool = false, ifNotExists: Bool = false) -> String {
  140|      0|        let clauses: [Expressible?] = [
  141|      0|            create("INDEX", indexName(columns), unique ? .unique : nil, ifNotExists),
  142|      0|            Expression<Void>(literal: "ON"),
  143|      0|            tableName(qualified: false),
  144|      0|            "".wrap(columns) as Expression<Void>
  145|      0|        ]
  146|      0|
  147|      0|        return " ".join(clauses.compactMap { $0 }).asSQL()
  148|      0|    }
  149|       |
  150|       |    // MARK: - DROP INDEX
  151|       |
  152|      0|    public func dropIndex(_ columns: Expressible..., ifExists: Bool = false) -> String {
  153|      0|        drop("INDEX", indexName(columns), ifExists)
  154|      0|    }
  155|       |
  156|      0|    fileprivate func indexName(_ columns: [Expressible]) -> Expressible {
  157|      0|        let string = (["index", clauses.from.name, "on"] + columns.map { $0.expression.template }).joined(separator: " ").lowercased()
  158|      0|
  159|      0|        let index = string.reduce("") { underscored, character in
  160|      0|            guard character != "\"" else {
  161|      0|                return underscored
  162|      0|            }
  163|      0|            guard "a"..."z" ~= character || "0"..."9" ~= character else {
  164|      0|                return underscored + "_"
  165|      0|            }
  166|      0|            return underscored + String(character)
  167|      0|        }
  168|      0|
  169|      0|        return database(namespace: index)
  170|      0|    }
  171|       |
  172|       |}
  173|       |
  174|       |extension View {
  175|       |
  176|       |    // MARK: - CREATE VIEW
  177|       |
  178|      0|    public func create(_ query: QueryType, temporary: Bool = false, ifNotExists: Bool = false) -> String {
  179|      0|        let clauses: [Expressible?] = [
  180|      0|            create(View.identifier, tableName(), temporary ? .temporary : nil, ifNotExists),
  181|      0|            Expression<Void>(literal: "AS"),
  182|      0|            query
  183|      0|        ]
  184|      0|
  185|      0|        return " ".join(clauses.compactMap { $0 }).asSQL()
  186|      0|    }
  187|       |
  188|       |    // MARK: - DROP VIEW
  189|       |
  190|      0|    public func drop(ifExists: Bool = false) -> String {
  191|      0|        drop("VIEW", tableName(), ifExists)
  192|      0|    }
  193|       |
  194|       |}
  195|       |
  196|       |extension VirtualTable {
  197|       |
  198|       |    // MARK: - CREATE VIRTUAL TABLE
  199|       |
  200|      0|    public func create(_ using: Module, ifNotExists: Bool = false) -> String {
  201|      0|        let clauses: [Expressible?] = [
  202|      0|            create(VirtualTable.identifier, tableName(), nil, ifNotExists),
  203|      0|            Expression<Void>(literal: "USING"),
  204|      0|            using
  205|      0|        ]
  206|      0|
  207|      0|        return " ".join(clauses.compactMap { $0 }).asSQL()
  208|      0|    }
  209|       |
  210|       |    // MARK: - ALTER TABLE … RENAME TO
  211|       |
  212|      0|    public func rename(_ to: VirtualTable) -> String {
  213|      0|        rename(to: to)
  214|      0|    }
  215|       |
  216|       |}
  217|       |
  218|       |public final class TableBuilder {
  219|       |
  220|      8|    fileprivate var definitions = [Expressible]()
  221|       |
  222|       |    public func column<V: Value>(_ name: Expression<V>, unique: Bool = false, check: Expression<Bool>? = nil,
  223|      8|                                 defaultValue: Expression<V>? = nil) {
  224|      8|        column(name, V.declaredDatatype, nil, false, unique, check, defaultValue, nil, nil)
  225|      8|    }
  226|       |
  227|       |    public func column<V: Value>(_ name: Expression<V>, unique: Bool = false, check: Expression<Bool>? = nil,
  228|     46|                                 defaultValue: V) {
  229|     46|        column(name, V.declaredDatatype, nil, false, unique, check, defaultValue, nil, nil)
  230|     46|    }
  231|       |
  232|       |    public func column<V: Value>(_ name: Expression<V>, unique: Bool = false, check: Expression<Bool?>,
  233|      0|                                 defaultValue: Expression<V>? = nil) {
  234|      0|        column(name, V.declaredDatatype, nil, false, unique, check, defaultValue, nil, nil)
  235|      0|    }
  236|       |
  237|       |    public func column<V: Value>(_ name: Expression<V>, unique: Bool = false, check: Expression<Bool?>,
  238|      0|                                 defaultValue: V) {
  239|      0|        column(name, V.declaredDatatype, nil, false, unique, check, defaultValue, nil, nil)
  240|      0|    }
  241|       |
  242|       |    public func column<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool>? = nil,
  243|      0|                                 defaultValue: Expression<V>? = nil) {
  244|      0|        column(name, V.declaredDatatype, nil, true, unique, check, defaultValue, nil, nil)
  245|      0|    }
  246|       |
  247|       |    public func column<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool>? = nil,
  248|      0|                                 defaultValue: Expression<V?>) {
  249|      0|        column(name, V.declaredDatatype, nil, true, unique, check, defaultValue, nil, nil)
  250|      0|    }
  251|       |
  252|       |    public func column<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool>? = nil,
  253|      0|                                 defaultValue: V) {
  254|      0|        column(name, V.declaredDatatype, nil, true, unique, check, defaultValue, nil, nil)
  255|      0|    }
  256|       |
  257|       |    public func column<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool?>,
  258|      0|                                 defaultValue: Expression<V>? = nil) {
  259|      0|        column(name, V.declaredDatatype, nil, true, unique, check, defaultValue, nil, nil)
  260|      0|    }
  261|       |
  262|       |    public func column<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool?>,
  263|      0|                                 defaultValue: Expression<V?>) {
  264|      0|        column(name, V.declaredDatatype, nil, true, unique, check, defaultValue, nil, nil)
  265|      0|    }
  266|       |
  267|       |    public func column<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool?>,
  268|      0|                                 defaultValue: V) {
  269|      0|        column(name, V.declaredDatatype, nil, true, unique, check, defaultValue, nil, nil)
  270|      0|    }
  271|       |
  272|       |    public func column<V: Value>(_ name: Expression<V>, primaryKey: Bool, check: Expression<Bool>? = nil,
  273|      0|                                 defaultValue: Expression<V>? = nil) {
  274|      0|        column(name, V.declaredDatatype, primaryKey ? .default : nil, false, false, check, defaultValue, nil, nil)
  275|      0|    }
  276|       |
  277|       |    public func column<V: Value>(_ name: Expression<V>, primaryKey: Bool, check: Expression<Bool?>,
  278|      0|                                 defaultValue: Expression<V>? = nil) {
  279|      0|        column(name, V.declaredDatatype, primaryKey ? .default : nil, false, false, check, defaultValue, nil, nil)
  280|      0|    }
  281|       |
  282|       |    public func column<V: Value>(_ name: Expression<V>, primaryKey: PrimaryKey,
  283|      2|                                 check: Expression<Bool>? = nil) where V.Datatype == Int64 {
  284|      2|        column(name, V.declaredDatatype, primaryKey, false, false, check, nil, nil, nil)
  285|      2|    }
  286|       |
  287|       |    public func column<V: Value>(_ name: Expression<V>, primaryKey: PrimaryKey,
  288|      0|                                 check: Expression<Bool?>) where V.Datatype == Int64 {
  289|      0|        column(name, V.declaredDatatype, primaryKey, false, false, check, nil, nil, nil)
  290|      0|    }
  291|       |
  292|       |    public func column<V: Value>(_ name: Expression<V>, unique: Bool = false, check: Expression<Bool>? = nil,
  293|      0|                                 references table: QueryType, _ other: Expression<V>) where V.Datatype == Int64 {
  294|      0|        column(name, V.declaredDatatype, nil, false, unique, check, nil, (table, other), nil)
  295|      0|    }
  296|       |
  297|       |    public func column<V: Value>(_ name: Expression<V>, unique: Bool = false, check: Expression<Bool?>,
  298|      0|                                 references table: QueryType, _ other: Expression<V>) where V.Datatype == Int64 {
  299|      0|        column(name, V.declaredDatatype, nil, false, unique, check, nil, (table, other), nil)
  300|      0|    }
  301|       |
  302|       |    public func column<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool>? = nil,
  303|      0|                                 references table: QueryType, _ other: Expression<V>) where V.Datatype == Int64 {
  304|      0|        column(name, V.declaredDatatype, nil, true, unique, check, nil, (table, other), nil)
  305|      0|    }
  306|       |
  307|       |    public func column<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool?>,
  308|      0|                                 references table: QueryType, _ other: Expression<V>) where V.Datatype == Int64 {
  309|      0|        column(name, V.declaredDatatype, nil, true, unique, check, nil, (table, other), nil)
  310|      0|    }
  311|       |
  312|       |    public func column<V: Value>(_ name: Expression<V>, unique: Bool = false, check: Expression<Bool>? = nil,
  313|      0|                                 defaultValue: Expression<V>? = nil, collate: Collation) where V.Datatype == String {
  314|      0|        column(name, V.declaredDatatype, nil, false, unique, check, defaultValue, nil, collate)
  315|      0|    }
  316|       |
  317|       |    public func column<V: Value>(_ name: Expression<V>, unique: Bool = false, check: Expression<Bool>? = nil,
  318|      0|                                 defaultValue: V, collate: Collation) where V.Datatype == String {
  319|      0|        column(name, V.declaredDatatype, nil, false, unique, check, defaultValue, nil, collate)
  320|      0|    }
  321|       |
  322|       |    public func column<V: Value>(_ name: Expression<V>, unique: Bool = false, check: Expression<Bool?>,
  323|      0|                                 defaultValue: Expression<V>? = nil, collate: Collation) where V.Datatype == String {
  324|      0|        column(name, V.declaredDatatype, nil, false, unique, check, defaultValue, nil, collate)
  325|      0|    }
  326|       |
  327|       |    public func column<V: Value>(_ name: Expression<V>, unique: Bool = false, check: Expression<Bool?>,
  328|      0|                                 defaultValue: V, collate: Collation) where V.Datatype == String {
  329|      0|        column(name, V.declaredDatatype, nil, false, unique, check, defaultValue, nil, collate)
  330|      0|    }
  331|       |
  332|       |    public func column<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool>? = nil,
  333|      0|                                 defaultValue: Expression<V>? = nil, collate: Collation) where V.Datatype == String {
  334|      0|        column(name, V.declaredDatatype, nil, true, unique, check, defaultValue, nil, collate)
  335|      0|    }
  336|       |
  337|       |    public func column<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool>? = nil,
  338|      0|                                 defaultValue: Expression<V?>, collate: Collation) where V.Datatype == String {
  339|      0|        column(name, V.declaredDatatype, nil, true, unique, check, defaultValue, nil, collate)
  340|      0|    }
  341|       |
  342|       |    public func column<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool>? = nil,
  343|      0|                                 defaultValue: V, collate: Collation) where V.Datatype == String {
  344|      0|        column(name, V.declaredDatatype, nil, true, unique, check, defaultValue, nil, collate)
  345|      0|    }
  346|       |
  347|       |    public func column<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool?>,
  348|      0|                                 defaultValue: Expression<V>? = nil, collate: Collation) where V.Datatype == String {
  349|      0|        column(name, V.declaredDatatype, nil, true, unique, check, defaultValue, nil, collate)
  350|      0|    }
  351|       |
  352|       |    public func column<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool?>,
  353|      0|                                 defaultValue: Expression<V?>, collate: Collation) where V.Datatype == String {
  354|      0|        column(name, V.declaredDatatype, nil, true, unique, check, defaultValue, nil, collate)
  355|      0|    }
  356|       |
  357|       |    public func column<V: Value>(_ name: Expression<V?>, unique: Bool = false, check: Expression<Bool?>,
  358|      0|                                 defaultValue: V, collate: Collation) where V.Datatype == String {
  359|      0|        column(name, V.declaredDatatype, nil, true, unique, check, defaultValue, nil, collate)
  360|      0|    }
  361|       |
  362|       |    // swiftlint:disable:next function_parameter_count
  363|       |    fileprivate func column(_ name: Expressible, _ datatype: String, _ primaryKey: PrimaryKey?, _ null: Bool,
  364|       |                            _ unique: Bool, _ check: Expressible?, _ defaultValue: Expressible?,
  365|     56|                            _ references: (QueryType, Expressible)?, _ collate: Collation?) {
  366|     56|        definitions.append(definition(name, datatype, primaryKey, null, unique, check, defaultValue, references, collate))
  367|     56|    }
  368|       |
  369|       |    // MARK: -
  370|       |
  371|      0|    public func primaryKey<T: Value>(_ column: Expression<T>) {
  372|      0|        primaryKey([column])
  373|      0|    }
  374|       |
  375|       |    public func primaryKey<T: Value, U: Value>(_ compositeA: Expression<T>,
  376|      0|                                               _ expr: Expression<U>) {
  377|      0|        primaryKey([compositeA, expr])
  378|      0|    }
  379|       |
  380|       |    public func primaryKey<T: Value, U: Value, V: Value>(_ compositeA: Expression<T>,
  381|       |                                                         _ expr1: Expression<U>,
  382|      0|                                                         _ expr2: Expression<V>) {
  383|      0|        primaryKey([compositeA, expr1, expr2])
  384|      0|    }
  385|       |
  386|       |    public func primaryKey<T: Value, U: Value, V: Value, W: Value>(_ compositeA: Expression<T>,
  387|       |                                                                   _ expr1: Expression<U>,
  388|       |                                                                   _ expr2: Expression<V>,
  389|      0|                                                                   _ expr3: Expression<W>) {
  390|      0|        primaryKey([compositeA, expr1, expr2, expr3])
  391|      0|    }
  392|       |
  393|      0|    fileprivate func primaryKey(_ composite: [Expressible]) {
  394|      0|        definitions.append("PRIMARY KEY".prefix(composite))
  395|      0|    }
  396|       |
  397|      0|    public func unique(_ columns: Expressible...) {
  398|      0|        unique(columns)
  399|      0|    }
  400|       |
  401|      0|    public func unique(_ columns: [Expressible]) {
  402|      0|        definitions.append("UNIQUE".prefix(columns))
  403|      0|    }
  404|       |
  405|      0|    public func check(_ condition: Expression<Bool>) {
  406|      0|        check(Expression<Bool?>(condition))
  407|      0|    }
  408|       |
  409|      0|    public func check(_ condition: Expression<Bool?>) {
  410|      0|        definitions.append("CHECK".prefix(condition))
  411|      0|    }
  412|       |
  413|       |    public enum Dependency: String {
  414|       |
  415|       |        case noAction = "NO ACTION"
  416|       |
  417|       |        case restrict = "RESTRICT"
  418|       |
  419|       |        case setNull = "SET NULL"
  420|       |
  421|       |        case setDefault = "SET DEFAULT"
  422|       |
  423|       |        case cascade = "CASCADE"
  424|       |
  425|       |    }
  426|       |
  427|       |    public func foreignKey<T: Value>(_ column: Expression<T>, references table: QueryType, _ other: Expression<T>,
  428|      0|                                     update: Dependency? = nil, delete: Dependency? = nil) {
  429|      0|        foreignKey(column, (table, other), update, delete)
  430|      0|    }
  431|       |
  432|       |    public func foreignKey<T: Value>(_ column: Expression<T?>, references table: QueryType, _ other: Expression<T>,
  433|      0|                                     update: Dependency? = nil, delete: Dependency? = nil) {
  434|      0|        foreignKey(column, (table, other), update, delete)
  435|      0|    }
  436|       |
  437|       |    public func foreignKey<T: Value, U: Value>(_ composite: (Expression<T>, Expression<U>),
  438|       |                                               references table: QueryType, _ other: (Expression<T>, Expression<U>),
  439|      0|                                               update: Dependency? = nil, delete: Dependency? = nil) {
  440|      0|        let composite = ", ".join([composite.0, composite.1])
  441|      0|        let references = (table, ", ".join([other.0, other.1]))
  442|      0|
  443|      0|        foreignKey(composite, references, update, delete)
  444|      0|    }
  445|       |
  446|       |    public func foreignKey<T: Value, U: Value, V: Value>(_ composite: (Expression<T>, Expression<U>, Expression<V>),
  447|       |                                                         references table: QueryType,
  448|       |                                                         _ other: (Expression<T>, Expression<U>, Expression<V>),
  449|      0|                                                         update: Dependency? = nil, delete: Dependency? = nil) {
  450|      0|        let composite = ", ".join([composite.0, composite.1, composite.2])
  451|      0|        let references = (table, ", ".join([other.0, other.1, other.2]))
  452|      0|
  453|      0|        foreignKey(composite, references, update, delete)
  454|      0|    }
  455|       |
  456|       |    fileprivate func foreignKey(_ column: Expressible, _ references: (QueryType, Expressible),
  457|      0|                                _ update: Dependency?, _ delete: Dependency?) {
  458|      0|        let clauses: [Expressible?] = [
  459|      0|            "FOREIGN KEY".prefix(column),
  460|      0|            reference(references),
  461|      0|            update.map { Expression<Void>(literal: "ON UPDATE \($0.rawValue)") },
  462|      0|            delete.map { Expression<Void>(literal: "ON DELETE \($0.rawValue)") }
  463|      0|        ]
  464|      0|
  465|      0|        definitions.append(" ".join(clauses.compactMap { $0 }))
  466|      0|    }
  467|       |
  468|       |}
  469|       |
  470|       |public enum PrimaryKey {
  471|       |
  472|       |    case `default`
  473|       |
  474|       |    case autoincrement
  475|       |
  476|       |}
  477|       |
  478|       |public struct Module {
  479|       |
  480|       |    fileprivate let name: String
  481|       |
  482|       |    fileprivate let arguments: [Expressible]
  483|       |
  484|      0|    public init(_ name: String, _ arguments: [Expressible]) {
  485|      0|        self.init(name: name.quote(), arguments: arguments)
  486|      0|    }
  487|       |
  488|      0|    init(name: String, arguments: [Expressible]) {
  489|      0|        self.name = name
  490|      0|        self.arguments = arguments
  491|      0|    }
  492|       |
  493|       |}
  494|       |
  495|       |extension Module: Expressible {
  496|       |
  497|      0|    public var expression: Expression<Void> {
  498|      0|        name.wrap(arguments)
  499|      0|    }
  500|       |
  501|       |}
  502|       |
  503|       |// MARK: - Private
  504|       |
  505|       |private extension QueryType {
  506|       |
  507|      8|    func create(_ identifier: String, _ name: Expressible, _ modifier: Modifier?, _ ifNotExists: Bool) -> Expressible {
  508|      8|        let clauses: [Expressible?] = [
  509|      8|            Expression<Void>(literal: "CREATE"),
  510|      8|            modifier.map { Expression<Void>(literal: $0.rawValue) },
  511|      8|            Expression<Void>(literal: identifier),
  512|      8|            ifNotExists ? Expression<Void>(literal: "IF NOT EXISTS") : nil,
  513|      8|            name
  514|      8|        ]
  515|      8|
  516|     40|        return " ".join(clauses.compactMap { $0 })
  517|      8|    }
  518|       |
  519|      0|    func rename(to: Self) -> String {
  520|      0|        " ".join([
  521|      0|            Expression<Void>(literal: "ALTER TABLE"),
  522|      0|            tableName(),
  523|      0|            Expression<Void>(literal: "RENAME TO"),
  524|      0|            Expression<Void>(to.clauses.from.name)
  525|      0|        ]).asSQL()
  526|      0|    }
  527|       |
  528|      0|    func drop(_ identifier: String, _ name: Expressible, _ ifExists: Bool) -> String {
  529|      0|        let clauses: [Expressible?] = [
  530|      0|            Expression<Void>(literal: "DROP \(identifier)"),
  531|      0|            ifExists ? Expression<Void>(literal: "IF EXISTS") : nil,
  532|      0|            name
  533|      0|        ]
  534|      0|
  535|      0|        return " ".join(clauses.compactMap { $0 }).asSQL()
  536|      0|    }
  537|       |
  538|       |}
  539|       |
  540|       |// swiftlint:disable:next function_parameter_count
  541|       |private func definition(_ column: Expressible, _ datatype: String, _ primaryKey: PrimaryKey?, _ null: Bool,
  542|       |                        _ unique: Bool, _ check: Expressible?, _ defaultValue: Expressible?,
  543|     56|                        _ references: (QueryType, Expressible)?, _ collate: Collation?) -> Expressible {
  544|     56|    let clauses: [Expressible?] = [
  545|     56|        column,
  546|     56|        Expression<Void>(literal: datatype),
  547|     56|        primaryKey.map { Expression<Void>(literal: $0 == .autoincrement ? "PRIMARY KEY AUTOINCREMENT" : "PRIMARY KEY") },
  548|     56|        null ? nil : Expression<Void>(literal: "NOT NULL"),
  549|     56|        unique ? Expression<Void>(literal: "UNIQUE") : nil,
  550|     56|        check.map { " ".join([Expression<Void>(literal: "CHECK"), $0]) },
  551|     56|        defaultValue.map { "DEFAULT".prefix($0) },
  552|     56|        references.map(reference),
  553|     56|        collate.map { " ".join([Expression<Void>(literal: "COLLATE"), $0]) }
  554|     56|    ]
  555|     56|
  556|    504|    return " ".join(clauses.compactMap { $0 })
  557|     56|}
  558|       |
  559|      0|private func reference(_ primary: (QueryType, Expressible)) -> Expressible {
  560|      0|    " ".join([
  561|      0|        Expression<Void>(literal: "REFERENCES"),
  562|      0|        primary.0.tableName(qualified: false),
  563|      0|        "".wrap(primary.1) as Expression<Void>
  564|      0|    ])
  565|      0|}
  566|       |
  567|       |private enum Modifier: String {
  568|       |
  569|       |    case unique = "UNIQUE"
  570|       |
  571|       |    case temporary = "TEMPORARY"
  572|       |
  573|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLite/Typed/Setter.swift:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |precedencegroup ColumnAssignment {
   26|       |    associativity: left
   27|       |    assignment: true
   28|       |    lowerThan: AssignmentPrecedence
   29|       |}
   30|       |
   31|       |infix operator <- : ColumnAssignment
   32|       |
   33|       |public struct Setter {
   34|       |
   35|       |    let column: Expressible
   36|       |    let value: Expressible
   37|       |
   38|      0|    fileprivate init<V: Value>(column: Expression<V>, value: Expression<V>) {
   39|      0|        self.column = column
   40|      0|        self.value = value
   41|      0|    }
   42|       |
   43|     54|    fileprivate init<V: Value>(column: Expression<V>, value: V) {
   44|     54|        self.column = column
   45|     54|        self.value = value
   46|     54|    }
   47|       |
   48|      0|    fileprivate init<V: Value>(column: Expression<V?>, value: Expression<V>) {
   49|      0|        self.column = column
   50|      0|        self.value = value
   51|      0|    }
   52|       |
   53|      0|    fileprivate init<V: Value>(column: Expression<V?>, value: Expression<V?>) {
   54|      0|        self.column = column
   55|      0|        self.value = value
   56|      0|    }
   57|       |
   58|      0|    fileprivate init<V: Value>(column: Expression<V?>, value: V?) {
   59|      0|        self.column = column
   60|      0|        self.value = Expression<V?>(value: value)
   61|      0|    }
   62|       |
   63|      0|    init(excluded column: Expressible) {
   64|      0|        let excluded = Expression<Void>("excluded")
   65|      0|        self.column = column
   66|      0|        value = ".".join([excluded, column.expression])
   67|      0|    }
   68|       |}
   69|       |
   70|       |extension Setter: Expressible {
   71|       |
   72|      0|    public var expression: Expression<Void> {
   73|      0|        "=".infix(column, value, wrap: false)
   74|      0|    }
   75|       |
   76|       |}
   77|       |
   78|      0|public func <-<V: Value>(column: Expression<V>, value: Expression<V>) -> Setter {
   79|      0|    Setter(column: column, value: value)
   80|      0|}
   81|     54|public func <-<V: Value>(column: Expression<V>, value: V) -> Setter {
   82|     54|    Setter(column: column, value: value)
   83|     54|}
   84|      0|public func <-<V: Value>(column: Expression<V?>, value: Expression<V>) -> Setter {
   85|      0|    Setter(column: column, value: value)
   86|      0|}
   87|      0|public func <-<V: Value>(column: Expression<V?>, value: Expression<V?>) -> Setter {
   88|      0|    Setter(column: column, value: value)
   89|      0|}
   90|      0|public func <-<V: Value>(column: Expression<V?>, value: V?) -> Setter {
   91|      0|    Setter(column: column, value: value)
   92|      0|}
   93|       |
   94|      0|public func +=(column: Expression<String>, value: Expression<String>) -> Setter {
   95|      0|    column <- column + value
   96|      0|}
   97|      0|public func +=(column: Expression<String>, value: String) -> Setter {
   98|      0|    column <- column + value
   99|      0|}
  100|      0|public func +=(column: Expression<String?>, value: Expression<String>) -> Setter {
  101|      0|    column <- column + value
  102|      0|}
  103|      0|public func +=(column: Expression<String?>, value: Expression<String?>) -> Setter {
  104|      0|    column <- column + value
  105|      0|}
  106|      0|public func +=(column: Expression<String?>, value: String) -> Setter {
  107|      0|    column <- column + value
  108|      0|}
  109|       |
  110|      0|public func +=<V: Value>(column: Expression<V>, value: Expression<V>) -> Setter where V.Datatype: Number {
  111|      0|    column <- column + value
  112|      0|}
  113|      0|public func +=<V: Value>(column: Expression<V>, value: V) -> Setter where V.Datatype: Number {
  114|      0|    column <- column + value
  115|      0|}
  116|      0|public func +=<V: Value>(column: Expression<V?>, value: Expression<V>) -> Setter where V.Datatype: Number {
  117|      0|    column <- column + value
  118|      0|}
  119|      0|public func +=<V: Value>(column: Expression<V?>, value: Expression<V?>) -> Setter where V.Datatype: Number {
  120|      0|    column <- column + value
  121|      0|}
  122|      0|public func +=<V: Value>(column: Expression<V?>, value: V) -> Setter where V.Datatype: Number {
  123|      0|    column <- column + value
  124|      0|}
  125|       |
  126|      0|public func -=<V: Value>(column: Expression<V>, value: Expression<V>) -> Setter where V.Datatype: Number {
  127|      0|    column <- column - value
  128|      0|}
  129|      0|public func -=<V: Value>(column: Expression<V>, value: V) -> Setter where V.Datatype: Number {
  130|      0|    column <- column - value
  131|      0|}
  132|      0|public func -=<V: Value>(column: Expression<V?>, value: Expression<V>) -> Setter where V.Datatype: Number {
  133|      0|    column <- column - value
  134|      0|}
  135|      0|public func -=<V: Value>(column: Expression<V?>, value: Expression<V?>) -> Setter where V.Datatype: Number {
  136|      0|    column <- column - value
  137|      0|}
  138|      0|public func -=<V: Value>(column: Expression<V?>, value: V) -> Setter where V.Datatype: Number {
  139|      0|    column <- column - value
  140|      0|}
  141|       |
  142|      0|public func *=<V: Value>(column: Expression<V>, value: Expression<V>) -> Setter where V.Datatype: Number {
  143|      0|    column <- column * value
  144|      0|}
  145|      0|public func *=<V: Value>(column: Expression<V>, value: V) -> Setter where V.Datatype: Number {
  146|      0|    column <- column * value
  147|      0|}
  148|      0|public func *=<V: Value>(column: Expression<V?>, value: Expression<V>) -> Setter where V.Datatype: Number {
  149|      0|    column <- column * value
  150|      0|}
  151|      0|public func *=<V: Value>(column: Expression<V?>, value: Expression<V?>) -> Setter where V.Datatype: Number {
  152|      0|    column <- column * value
  153|      0|}
  154|      0|public func *=<V: Value>(column: Expression<V?>, value: V) -> Setter where V.Datatype: Number {
  155|      0|    column <- column * value
  156|      0|}
  157|       |
  158|      0|public func /=<V: Value>(column: Expression<V>, value: Expression<V>) -> Setter where V.Datatype: Number {
  159|      0|    column <- column / value
  160|      0|}
  161|      0|public func /=<V: Value>(column: Expression<V>, value: V) -> Setter where V.Datatype: Number {
  162|      0|    column <- column / value
  163|      0|}
  164|      0|public func /=<V: Value>(column: Expression<V?>, value: Expression<V>) -> Setter where V.Datatype: Number {
  165|      0|    column <- column / value
  166|      0|}
  167|      0|public func /=<V: Value>(column: Expression<V?>, value: Expression<V?>) -> Setter where V.Datatype: Number {
  168|      0|    column <- column / value
  169|      0|}
  170|      0|public func /=<V: Value>(column: Expression<V?>, value: V) -> Setter where V.Datatype: Number {
  171|      0|    column <- column / value
  172|      0|}
  173|       |
  174|      0|public func %=<V: Value>(column: Expression<V>, value: Expression<V>) -> Setter where V.Datatype == Int64 {
  175|      0|    column <- column % value
  176|      0|}
  177|      0|public func %=<V: Value>(column: Expression<V>, value: V) -> Setter where V.Datatype == Int64 {
  178|      0|    column <- column % value
  179|      0|}
  180|      0|public func %=<V: Value>(column: Expression<V?>, value: Expression<V>) -> Setter where V.Datatype == Int64 {
  181|      0|    column <- column % value
  182|      0|}
  183|      0|public func %=<V: Value>(column: Expression<V?>, value: Expression<V?>) -> Setter where V.Datatype == Int64 {
  184|      0|    column <- column % value
  185|      0|}
  186|      0|public func %=<V: Value>(column: Expression<V?>, value: V) -> Setter where V.Datatype == Int64 {
  187|      0|    column <- column % value
  188|      0|}
  189|       |
  190|      0|public func <<=<V: Value>(column: Expression<V>, value: Expression<V>) -> Setter where V.Datatype == Int64 {
  191|      0|    column <- column << value
  192|      0|}
  193|      0|public func <<=<V: Value>(column: Expression<V>, value: V) -> Setter where V.Datatype == Int64 {
  194|      0|    column <- column << value
  195|      0|}
  196|      0|public func <<=<V: Value>(column: Expression<V?>, value: Expression<V>) -> Setter where V.Datatype == Int64 {
  197|      0|    column <- column << value
  198|      0|}
  199|      0|public func <<=<V: Value>(column: Expression<V?>, value: Expression<V?>) -> Setter where V.Datatype == Int64 {
  200|      0|    column <- column << value
  201|      0|}
  202|      0|public func <<=<V: Value>(column: Expression<V?>, value: V) -> Setter where V.Datatype == Int64 {
  203|      0|    column <- column << value
  204|      0|}
  205|       |
  206|      0|public func >>=<V: Value>(column: Expression<V>, value: Expression<V>) -> Setter where V.Datatype == Int64 {
  207|      0|    column <- column >> value
  208|      0|}
  209|      0|public func >>=<V: Value>(column: Expression<V>, value: V) -> Setter where V.Datatype == Int64 {
  210|      0|    column <- column >> value
  211|      0|}
  212|      0|public func >>=<V: Value>(column: Expression<V?>, value: Expression<V>) -> Setter where V.Datatype == Int64 {
  213|      0|    column <- column >> value
  214|      0|}
  215|      0|public func >>=<V: Value>(column: Expression<V?>, value: Expression<V?>) -> Setter where V.Datatype == Int64 {
  216|      0|    column <- column >> value
  217|      0|}
  218|      0|public func >>=<V: Value>(column: Expression<V?>, value: V) -> Setter where V.Datatype == Int64 {
  219|      0|    column <- column >> value
  220|      0|}
  221|       |
  222|      0|public func &=<V: Value>(column: Expression<V>, value: Expression<V>) -> Setter where V.Datatype == Int64 {
  223|      0|    column <- column & value
  224|      0|}
  225|      0|public func &=<V: Value>(column: Expression<V>, value: V) -> Setter where V.Datatype == Int64 {
  226|      0|    column <- column & value
  227|      0|}
  228|      0|public func &=<V: Value>(column: Expression<V?>, value: Expression<V>) -> Setter where V.Datatype == Int64 {
  229|      0|    column <- column & value
  230|      0|}
  231|      0|public func &=<V: Value>(column: Expression<V?>, value: Expression<V?>) -> Setter where V.Datatype == Int64 {
  232|      0|    column <- column & value
  233|      0|}
  234|      0|public func &=<V: Value>(column: Expression<V?>, value: V) -> Setter where V.Datatype == Int64 {
  235|      0|    column <- column & value
  236|      0|}
  237|       |
  238|      0|public func |=<V: Value>(column: Expression<V>, value: Expression<V>) -> Setter where V.Datatype == Int64 {
  239|      0|    column <- column | value
  240|      0|}
  241|      0|public func |=<V: Value>(column: Expression<V>, value: V) -> Setter where V.Datatype == Int64 {
  242|      0|    column <- column | value
  243|      0|}
  244|      0|public func |=<V: Value>(column: Expression<V?>, value: Expression<V>) -> Setter where V.Datatype == Int64 {
  245|      0|    column <- column | value
  246|      0|}
  247|      0|public func |=<V: Value>(column: Expression<V?>, value: Expression<V?>) -> Setter where V.Datatype == Int64 {
  248|      0|    column <- column | value
  249|      0|}
  250|      0|public func |=<V: Value>(column: Expression<V?>, value: V) -> Setter where V.Datatype == Int64 {
  251|      0|    column <- column | value
  252|      0|}
  253|       |
  254|      0|public func ^=<V: Value>(column: Expression<V>, value: Expression<V>) -> Setter where V.Datatype == Int64 {
  255|      0|    column <- column ^ value
  256|      0|}
  257|      0|public func ^=<V: Value>(column: Expression<V>, value: V) -> Setter where V.Datatype == Int64 {
  258|      0|    column <- column ^ value
  259|      0|}
  260|      0|public func ^=<V: Value>(column: Expression<V?>, value: Expression<V>) -> Setter where V.Datatype == Int64 {
  261|      0|    column <- column ^ value
  262|      0|}
  263|      0|public func ^=<V: Value>(column: Expression<V?>, value: Expression<V?>) -> Setter where V.Datatype == Int64 {
  264|      0|    column <- column ^ value
  265|      0|}
  266|      0|public func ^=<V: Value>(column: Expression<V?>, value: V) -> Setter where V.Datatype == Int64 {
  267|      0|    column <- column ^ value
  268|      0|}
  269|       |
  270|      0|public postfix func ++<V: Value>(column: Expression<V>) -> Setter where V.Datatype == Int64 {
  271|      0|    Expression<Int>(column) += 1
  272|      0|}
  273|      0|public postfix func ++<V: Value>(column: Expression<V?>) -> Setter where V.Datatype == Int64 {
  274|      0|    Expression<Int>(column) += 1
  275|      0|}
  276|       |
  277|      0|public postfix func --<V: Value>(column: Expression<V>) -> Setter where V.Datatype == Int64 {
  278|      0|    Expression<Int>(column) -= 1
  279|      0|}
  280|      0|public postfix func --<V: Value>(column: Expression<V?>) -> Setter where V.Datatype == Int64 {
  281|      0|    Expression<Int>(column) -= 1
  282|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SQLite.swift/Sources/SQLiteObjc/SQLiteObjc.m:
    1|       |//
    2|       |// SQLite.swift
    3|       |// https://github.com/stephencelis/SQLite.swift
    4|       |// Copyright © 2014-2015 Stephen Celis.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |//
   24|       |
   25|       |#import "SQLiteObjc.h"
   26|       |#import "fts3_tokenizer.h"
   27|       |
   28|       |#pragma mark - FTS
   29|       |
   30|       |typedef struct __SQLiteTokenizer {
   31|       |    sqlite3_tokenizer base;
   32|       |    __unsafe_unretained _SQLiteTokenizerNextCallback callback;
   33|       |} __SQLiteTokenizer;
   34|       |
   35|       |typedef struct __SQLiteTokenizerCursor {
   36|       |    void * base;
   37|       |    const char * input;
   38|       |    int inputOffset;
   39|       |    int inputLength;
   40|       |    int idx;
   41|       |} __SQLiteTokenizerCursor;
   42|       |
   43|       |static NSMutableDictionary * __SQLiteTokenizerMap;
   44|       |
   45|      0|static int __SQLiteTokenizerCreate(int argc, const char * const * argv, sqlite3_tokenizer ** ppTokenizer) {
   46|      0|    __SQLiteTokenizer * tokenizer = (__SQLiteTokenizer *)sqlite3_malloc(sizeof(__SQLiteTokenizer));
   47|      0|    if (!tokenizer) {
   48|      0|        return SQLITE_NOMEM;
   49|      0|    }
   50|      0|    memset(tokenizer, 0, sizeof(* tokenizer));
   51|       |
   52|      0|    NSString * key = [NSString stringWithUTF8String:argv[0]];
   53|      0|    tokenizer->callback = [__SQLiteTokenizerMap objectForKey:key];
   54|      0|    if (!tokenizer->callback) {
   55|      0|        return SQLITE_ERROR;
   56|      0|    }
   57|       |
   58|      0|    *ppTokenizer = &tokenizer->base;
   59|      0|    return SQLITE_OK;
   60|      0|}
   61|       |
   62|      0|static int __SQLiteTokenizerDestroy(sqlite3_tokenizer * pTokenizer) {
   63|      0|    sqlite3_free(pTokenizer);
   64|      0|    return SQLITE_OK;
   65|      0|}
   66|       |
   67|      0|static int __SQLiteTokenizerOpen(sqlite3_tokenizer * pTokenizer, const char * pInput, int nBytes, sqlite3_tokenizer_cursor ** ppCursor) {
   68|      0|    __SQLiteTokenizerCursor * cursor = (__SQLiteTokenizerCursor *)sqlite3_malloc(sizeof(__SQLiteTokenizerCursor));
   69|      0|    if (!cursor) {
   70|      0|        return SQLITE_NOMEM;
   71|      0|    }
   72|       |
   73|      0|    cursor->input = pInput;
   74|      0|    cursor->inputOffset = 0;
   75|      0|    cursor->inputLength = 0;
   76|      0|    cursor->idx = 0;
   77|       |
   78|      0|    *ppCursor = (sqlite3_tokenizer_cursor *)cursor;
   79|      0|    return SQLITE_OK;
   80|      0|}
   81|       |
   82|      0|static int __SQLiteTokenizerClose(sqlite3_tokenizer_cursor * pCursor) {
   83|      0|    sqlite3_free(pCursor);
   84|      0|    return SQLITE_OK;
   85|      0|}
   86|       |
   87|      0|static int __SQLiteTokenizerNext(sqlite3_tokenizer_cursor * pCursor, const char ** ppToken, int * pnBytes, int * piStartOffset, int * piEndOffset, int * piPosition) {
   88|      0|    __SQLiteTokenizerCursor * cursor = (__SQLiteTokenizerCursor *)pCursor;
   89|      0|    __SQLiteTokenizer * tokenizer = (__SQLiteTokenizer *)cursor->base;
   90|       |
   91|      0|    cursor->inputOffset += cursor->inputLength;
   92|      0|    const char * input = cursor->input + cursor->inputOffset;
   93|      0|    const char * token = [tokenizer->callback(input, &cursor->inputOffset, &cursor->inputLength) cStringUsingEncoding:NSUTF8StringEncoding];
   94|      0|    if (!token) {
   95|      0|        return SQLITE_DONE;
   96|      0|    }
   97|       |
   98|      0|    *ppToken = token;
   99|      0|    *pnBytes = (int)strlen(token);
  100|      0|    *piStartOffset = cursor->inputOffset;
  101|      0|    *piEndOffset = cursor->inputOffset + cursor->inputLength;
  102|      0|    *piPosition = cursor->idx++;
  103|      0|    return SQLITE_OK;
  104|      0|}
  105|       |
  106|       |static const sqlite3_tokenizer_module __SQLiteTokenizerModule = {
  107|       |    0,
  108|       |    __SQLiteTokenizerCreate,
  109|       |    __SQLiteTokenizerDestroy,
  110|       |    __SQLiteTokenizerOpen,
  111|       |    __SQLiteTokenizerClose,
  112|       |    __SQLiteTokenizerNext
  113|       |};
  114|       |
  115|      0|int _SQLiteRegisterTokenizer(sqlite3 *db, const char * moduleName, const char * submoduleName, _SQLiteTokenizerNextCallback callback) {
  116|      0|    static dispatch_once_t onceToken;
  117|      0|    dispatch_once(&onceToken, ^{
  118|      0|        __SQLiteTokenizerMap = [NSMutableDictionary new];
  119|      0|    });
  120|       |
  121|      0|    sqlite3_stmt * stmt;
  122|      0|    int status = sqlite3_prepare_v2(db, "SELECT fts3_tokenizer(?, ?)", -1, &stmt, 0);
  123|      0|    if (status != SQLITE_OK ){
  124|      0|        return status;
  125|      0|    }
  126|      0|    const sqlite3_tokenizer_module * pModule = &__SQLiteTokenizerModule;
  127|      0|    sqlite3_bind_text(stmt, 1, moduleName, -1, SQLITE_STATIC);
  128|      0|    sqlite3_bind_blob(stmt, 2, &pModule, sizeof(pModule), SQLITE_STATIC);
  129|      0|    sqlite3_step(stmt);
  130|      0|    status = sqlite3_finalize(stmt);
  131|      0|    if (status != SQLITE_OK ){
  132|      0|        return status;
  133|      0|    }
  134|       |
  135|      0|    [__SQLiteTokenizerMap setObject:[callback copy] forKey:[NSString stringWithUTF8String:submoduleName]];
  136|       |
  137|      0|    return SQLITE_OK;
  138|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Blocks/Block+cmark.swift:
    1|       |import Foundation
    2|       |import cmark
    3|       |
    4|       |extension Block {
    5|       |  /// Renders this block as CommonMark-formatted text.
    6|      0|  public func renderCommonMark() -> String {
    7|      0|    let node = CommonMarkNode(block: self, managed: true)
    8|      0|    return String(cString: cmark_render_commonmark(node.pointer, CMARK_OPT_DEFAULT, 0))
    9|      0|  }
   10|       |
   11|       |  /// Renders this block as HTML.
   12|       |  /// - Parameter options: Options that affect how the block is rendered as HTML.
   13|      0|  public func renderHTML(options: Document.RenderingOptions = .init()) -> String {
   14|      0|    let node = CommonMarkNode(block: self, managed: true)
   15|      0|    return String(cString: cmark_render_html(node.pointer, options.rawValue))
   16|      0|  }
   17|       |}
   18|       |
   19|       |extension Block {
   20|     48|  init?(commonMarkNode: CommonMarkNode) {
   21|     48|    switch commonMarkNode.type {
   22|     48|    case CMARK_NODE_BLOCK_QUOTE:
   23|      0|      self = .blockQuote(.init(items: commonMarkNode.children.compactMap(Block.init)))
   24|     48|    case CMARK_NODE_LIST where commonMarkNode.listType == CMARK_ORDERED_LIST:
   25|      0|      self = .orderedList(
   26|      0|        .init(
   27|      0|          items: commonMarkNode.children.compactMap(ListItem.init(commonMarkNode:)),
   28|      0|          start: commonMarkNode.listStart,
   29|      0|          tight: commonMarkNode.listTight
   30|      0|        )
   31|      0|      )
   32|     48|    case CMARK_NODE_LIST:
   33|      8|      self = .bulletList(
   34|      8|        .init(
   35|     30|          items: commonMarkNode.children.compactMap(ListItem.init(commonMarkNode:)),
   36|      8|          tight: commonMarkNode.listTight
   37|      8|        )
   38|      8|      )
   39|     48|    case CMARK_NODE_CODE_BLOCK:
   40|      0|      self = .code(
   41|      0|        .init(language: commonMarkNode.fenceInfo, code: { commonMarkNode.literal ?? "" })
   42|      0|      )
   43|     48|    case CMARK_NODE_HTML_BLOCK:
   44|      0|      self = .html(.init(html: commonMarkNode.literal ?? ""))
   45|     48|    case CMARK_NODE_PARAGRAPH:
   46|     56|      self = .paragraph(.init(text: commonMarkNode.children.compactMap(Inline.init)))
   47|     48|    case CMARK_NODE_HEADING:
   48|      8|      self = .heading(
   49|      8|        .init(
   50|      8|          text: commonMarkNode.children.compactMap(Inline.init),
   51|      8|          level: commonMarkNode.headingLevel
   52|      8|        )
   53|      8|      )
   54|     48|    case CMARK_NODE_THEMATIC_BREAK:
   55|      0|      self = .thematicBreak
   56|     48|    default:
   57|      0|      assertionFailure("Unknown block type '\(commonMarkNode.typeString)'")
   58|      0|      return nil
   59|     48|    }
   60|     48|  }
   61|       |}
   62|       |
   63|       |extension ListItem {
   64|     30|  fileprivate init?(commonMarkNode: CommonMarkNode) {
   65|     30|    guard case CMARK_NODE_ITEM = commonMarkNode.type else {
   66|      0|      assertionFailure("Expecting 'CMARK_NODE_ITEM' but instead got '\(commonMarkNode.typeString)'")
   67|      0|      return nil
   68|     30|    }
   69|     30|    self.init(blocks: commonMarkNode.children.compactMap(Block.init))
   70|     30|  }
   71|       |}
   72|       |
   73|       |extension CommonMarkNode {
   74|      0|  convenience init(block: Block, managed: Bool) {
   75|      0|    let pointer: OpaquePointer
   76|      0|
   77|      0|    switch block {
   78|      0|    case let .blockQuote(blockQuote):
   79|      0|      pointer = cmark_node_new(CMARK_NODE_BLOCK_QUOTE)
   80|      0|      blockQuote.items.map {
   81|      0|        CommonMarkNode(block: $0, managed: false)
   82|      0|      }.forEach { node in
   83|      0|        cmark_node_append_child(pointer, node.pointer)
   84|      0|      }
   85|      0|    case let .bulletList(list):
   86|      0|      pointer = cmark_node_new(CMARK_NODE_LIST)
   87|      0|      cmark_node_set_list_type(pointer, CMARK_BULLET_LIST)
   88|      0|      cmark_node_set_list_tight(pointer, list.tight ? 1 : 0)
   89|      0|      list.items.map(CommonMarkNode.init(listItem:)).forEach { childNode in
   90|      0|        cmark_node_append_child(pointer, childNode.pointer)
   91|      0|      }
   92|      0|    case let .orderedList(list):
   93|      0|      pointer = cmark_node_new(CMARK_NODE_LIST)
   94|      0|      cmark_node_set_list_type(pointer, CMARK_ORDERED_LIST)
   95|      0|      cmark_node_set_list_start(pointer, Int32(list.start))
   96|      0|      cmark_node_set_list_tight(pointer, list.tight ? 1 : 0)
   97|      0|      list.items.map(CommonMarkNode.init(listItem:)).forEach { childNode in
   98|      0|        cmark_node_append_child(pointer, childNode.pointer)
   99|      0|      }
  100|      0|    case let .code(codeBlock):
  101|      0|      pointer = cmark_node_new(CMARK_NODE_CODE_BLOCK)
  102|      0|      cmark_node_set_literal(pointer, codeBlock.code)
  103|      0|      if let language = codeBlock.language, !language.isEmpty {
  104|      0|        cmark_node_set_fence_info(pointer, language)
  105|      0|      }
  106|      0|    case let .html(htmlBlock):
  107|      0|      pointer = cmark_node_new(CMARK_NODE_HTML_BLOCK)
  108|      0|      cmark_node_set_literal(pointer, htmlBlock.html)
  109|      0|    case let .paragraph(paragraph):
  110|      0|      pointer = cmark_node_new(CMARK_NODE_PARAGRAPH)
  111|      0|      paragraph.text.map {
  112|      0|        CommonMarkNode(inline: $0, managed: false)
  113|      0|      }.forEach { node in
  114|      0|        cmark_node_append_child(pointer, node.pointer)
  115|      0|      }
  116|      0|    case let .heading(heading):
  117|      0|      pointer = cmark_node_new(CMARK_NODE_HEADING)
  118|      0|      cmark_node_set_heading_level(pointer, Int32(heading.level))
  119|      0|      heading.text.map {
  120|      0|        CommonMarkNode(inline: $0, managed: false)
  121|      0|      }.forEach { node in
  122|      0|        cmark_node_append_child(pointer, node.pointer)
  123|      0|      }
  124|      0|    case .thematicBreak:
  125|      0|      pointer = cmark_node_new(CMARK_NODE_THEMATIC_BREAK)
  126|      0|    }
  127|      0|
  128|      0|    self.init(pointer: pointer, managed: managed)
  129|      0|  }
  130|       |}
  131|       |
  132|       |extension CommonMarkNode {
  133|      0|  fileprivate convenience init(listItem: ListItem) {
  134|      0|    let pointer: OpaquePointer = cmark_node_new(CMARK_NODE_ITEM)
  135|      0|    listItem.blocks.map {
  136|      0|      CommonMarkNode(block: $0, managed: false)
  137|      0|    }.forEach { node in
  138|      0|      cmark_node_append_child(pointer, node.pointer)
  139|      0|    }
  140|      0|
  141|      0|    self.init(pointer: pointer, managed: false)
  142|      0|  }
  143|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Blocks/Block.swift:
    1|       |import Foundation
    2|       |
    3|       |/// The structural element of a CommonMark document.
    4|       |public enum Block: Hashable {
    5|       |  /// A section that is quoted from another source.
    6|       |  case blockQuote(BlockQuote)
    7|       |
    8|       |  /// A bullet list.
    9|       |  case bulletList(BulletList)
   10|       |
   11|       |  /// An ordered list.
   12|       |  case orderedList(OrderedList)
   13|       |
   14|       |  /// A section containing preformatted code.
   15|       |  case code(CodeBlock)
   16|       |
   17|       |  /// A group of lines that is treated as raw HTML.
   18|       |  case html(HTMLBlock)
   19|       |
   20|       |  /// A paragraph.
   21|       |  case paragraph(Paragraph)
   22|       |
   23|       |  /// A heading.
   24|       |  case heading(Heading)
   25|       |
   26|       |  /// A thematic break.
   27|       |  case thematicBreak
   28|       |}
   29|       |
   30|       |extension Block {
   31|     30|  var isParagraph: Bool {
   32|     30|    guard case .paragraph = self else { return false }
   33|     30|    return true
   34|     30|  }
   35|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Blocks/BlockArrayBuilder.swift:
    1|       |#if swift(>=5.4)
    2|       |  import Foundation
    3|       |
    4|       |  /// A thematic break element.
    5|       |  public struct ThematicBreak {
    6|      0|    public init() {}
    7|       |  }
    8|       |
    9|       |  /// Constructs ``Block`` arrays from multi-expression closures.
   10|       |  @resultBuilder public enum BlockArrayBuilder {
   11|      0|    public static func buildBlock(_ components: [Block]...) -> [Block] {
   12|      0|      components.flatMap { $0 }
   13|      0|    }
   14|       |
   15|      0|    public static func buildExpression(_ expression: String) -> [Block] {
   16|      0|      [.paragraph(.init(text: [.text(expression)]))]
   17|      0|    }
   18|       |
   19|      0|    public static func buildExpression(_ expression: BlockQuote) -> [Block] {
   20|      0|      [.blockQuote(expression)]
   21|      0|    }
   22|       |
   23|      0|    public static func buildExpression(_ expression: BulletList) -> [Block] {
   24|      0|      [.bulletList(expression)]
   25|      0|    }
   26|       |
   27|      0|    public static func buildExpression(_ expression: OrderedList) -> [Block] {
   28|      0|      [.orderedList(expression)]
   29|      0|    }
   30|       |
   31|      0|    public static func buildExpression(_ expression: CodeBlock) -> [Block] {
   32|      0|      [.code(expression)]
   33|      0|    }
   34|       |
   35|      0|    public static func buildExpression(_ expression: HTMLBlock) -> [Block] {
   36|      0|      [.html(expression)]
   37|      0|    }
   38|       |
   39|      0|    public static func buildExpression(_ expression: Paragraph) -> [Block] {
   40|      0|      [.paragraph(expression)]
   41|      0|    }
   42|       |
   43|      0|    public static func buildExpression(_ expression: Heading) -> [Block] {
   44|      0|      [.heading(expression)]
   45|      0|    }
   46|       |
   47|      0|    public static func buildExpression(_: ThematicBreak) -> [Block] {
   48|      0|      [.thematicBreak]
   49|      0|    }
   50|       |
   51|      0|    public static func buildArray(_ components: [[Block]]) -> [Block] {
   52|      0|      components.flatMap { $0 }
   53|      0|    }
   54|       |
   55|      0|    public static func buildOptional(_ component: [Block]?) -> [Block] {
   56|      0|      component ?? []
   57|      0|    }
   58|       |
   59|      0|    public static func buildEither(first component: [Block]) -> [Block] {
   60|      0|      component
   61|      0|    }
   62|       |
   63|      0|    public static func buildEither(second component: [Block]) -> [Block] {
   64|      0|      component
   65|      0|    }
   66|       |  }
   67|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Blocks/BlockQuote.swift:
    1|       |import Foundation
    2|       |
    3|       |/// A blockquote element.
    4|       |public struct BlockQuote: Hashable {
    5|       |  /// The blocks contained in this element.
    6|       |  public var items: [Block]
    7|       |
    8|      0|  public init(items: [Block]) {
    9|      0|    self.items = items
   10|      0|  }
   11|       |}
   12|       |
   13|       |#if swift(>=5.4)
   14|       |  extension BlockQuote {
   15|       |    /// Creates a blockquote element with the given array of blocks.
   16|       |    /// - Parameter items: A ``BlockArrayBuilder`` that creates the blocks of this blockquoute.
   17|      0|    public init(@BlockArrayBuilder items: () -> [Block]) {
   18|      0|      self.init(items: items())
   19|      0|    }
   20|       |  }
   21|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Blocks/BulletList.swift:
    1|       |import Foundation
    2|       |
    3|       |/// A bullet list.
    4|       |public struct BulletList: Hashable {
    5|       |  /// The list items.
    6|       |  public var items: [ListItem]
    7|       |
    8|       |  /// Determines if this list is tight or loose.
    9|       |  public var tight: Bool
   10|       |
   11|      8|  public init(items: [ListItem], tight: Bool) {
   12|      8|    self.items = items
   13|      8|
   14|      8|    // Force loose spacing if any of the items contains more than one paragraph
   15|     30|    let hasItemsWithMultipleParagraphs = self.items.contains { item in
   16|     60|      item.blocks.filter(\.isParagraph).count > 1
  ------------------
  | $s10CommonMark10BulletListV5items5tightACSayAA0D4ItemVG_SbtcfcSbAGXEfU_SbAA5BlockOcs7KeyPathCyAJSbGcfu_:
  |   16|     30|      item.blocks.filter(\.isParagraph).count > 1
  ------------------
  | $s10CommonMark10BulletListV5items5tightACSayAA0D4ItemVG_SbtcfcSbAGXEfU_SbAA5BlockOcs7KeyPathCyAJSbGcfu_SbAJcfu0_:
  |   16|     30|      item.blocks.filter(\.isParagraph).count > 1
  ------------------
   17|     30|    }
   18|      8|    self.tight = hasItemsWithMultipleParagraphs ? false : tight
   19|      8|  }
   20|       |}
   21|       |
   22|       |#if swift(>=5.4)
   23|       |  extension BulletList {
   24|       |    /// Creates a bullet list.
   25|       |    /// - Parameters:
   26|       |    ///   - tight: A `Boolean` value that indicates if the list is tight or loose. This parameter is ignored if
   27|       |    ///            any of the list items contain more than one paragraph.
   28|       |    ///   - items: An ``ListItemArrayBuilder`` that creates the items in this list.
   29|      0|    public init(tight: Bool = true, @ListItemArrayBuilder items: () -> [ListItem]) {
   30|      0|      self.init(items: items(), tight: tight)
   31|      0|    }
   32|       |  }
   33|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Blocks/CodeBlock.swift:
    1|       |import Foundation
    2|       |
    3|       |/// A code block.
    4|       |public struct CodeBlock: Hashable {
    5|       |  /// The code contents.
    6|       |  public var code: String
    7|       |
    8|       |  /// The code block language.
    9|       |  public var language: String?
   10|       |
   11|      0|  public init(code: String, language: String? = nil) {
   12|      0|    self.code = code
   13|      0|    self.language = language
   14|      0|  }
   15|       |
   16|       |  /// Creates a code block.
   17|       |  /// - Parameters:
   18|       |  ///   - language: The code block language.
   19|       |  ///   - text: The code block contents.
   20|      0|  public init(language: String? = nil, code: () -> String) {
   21|      0|    self.init(code: code(), language: language)
   22|      0|  }
   23|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Blocks/HTMLBlock.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct HTMLBlock: Hashable {
    4|       |  public var html: String
    5|       |
    6|      0|  public init(html: String) {
    7|      0|    self.html = html
    8|      0|  }
    9|       |
   10|      0|  public init(html: () -> String) {
   11|      0|    self.init(html: html())
   12|      0|  }
   13|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Blocks/Heading.swift:
    1|       |import Foundation
    2|       |
    3|       |/// A heading element.
    4|       |public struct Heading: Hashable {
    5|       |  /// The inlines contained in this heading.
    6|       |  public var text: [Inline]
    7|       |
    8|       |  /// The heading level.
    9|       |  public var level: Int
   10|       |
   11|      8|  public init(text: [Inline], level: Int) {
   12|      8|    self.text = text
   13|      8|    self.level = level
   14|      8|  }
   15|       |}
   16|       |
   17|       |#if swift(>=5.4)
   18|       |  extension Heading {
   19|       |    /// Creates a heading element with the given level.
   20|       |    /// - Parameters:
   21|       |    ///   - level: The heading level.
   22|       |    ///   - text:  An ``InlineArrayBuilder`` that creates the inlines in this heading.
   23|      0|    public init(level: Int = 1, @InlineArrayBuilder text: () -> [Inline]) {
   24|      0|      self.init(text: text(), level: level)
   25|      0|    }
   26|       |  }
   27|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Blocks/ListItem.swift:
    1|       |import Foundation
    2|       |
    3|       |/// A list item.
    4|       |public struct ListItem: Hashable {
    5|       |  /// The blocks contained in this list item.
    6|       |  public var blocks: [Block]
    7|       |
    8|     30|  public init(blocks: [Block]) {
    9|     30|    self.blocks = blocks
   10|     30|  }
   11|       |}
   12|       |
   13|       |#if swift(>=5.4)
   14|       |  extension ListItem {
   15|       |    /// Creates a list item.
   16|       |    /// - Parameter blocks: A ``BlockArrayBuilder`` that creates the blocks of this list item.
   17|      0|    public init(@BlockArrayBuilder blocks: () -> [Block]) {
   18|      0|      self.init(blocks: blocks())
   19|      0|    }
   20|       |  }
   21|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Blocks/ListItemArrayBuilder.swift:
    1|       |#if swift(>=5.4)
    2|       |  import Foundation
    3|       |
    4|       |  /// Constructs list items from multi-expression closures.
    5|       |  @resultBuilder public enum ListItemArrayBuilder {
    6|      0|    public static func buildBlock(_ components: [ListItem]...) -> [ListItem] {
    7|      0|      components.flatMap { $0 }
    8|      0|    }
    9|       |
   10|      0|    public static func buildExpression(_ expression: String) -> [ListItem] {
   11|      0|      [ListItem(blocks: [.paragraph(.init(text: [.text(expression)]))])]
   12|      0|    }
   13|       |
   14|      0|    public static func buildExpression(_ expression: ListItem) -> [ListItem] {
   15|      0|      [expression]
   16|      0|    }
   17|       |
   18|      0|    public static func buildArray(_ components: [[ListItem]]) -> [ListItem] {
   19|      0|      components.flatMap { $0 }
   20|      0|    }
   21|       |
   22|      0|    public static func buildOptional(_ component: [ListItem]?) -> [ListItem] {
   23|      0|      component ?? []
   24|      0|    }
   25|       |
   26|      0|    public static func buildEither(first component: [ListItem]) -> [ListItem] {
   27|      0|      component
   28|      0|    }
   29|       |
   30|      0|    public static func buildEither(second component: [ListItem]) -> [ListItem] {
   31|      0|      component
   32|      0|    }
   33|       |  }
   34|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Blocks/OrderedList.swift:
    1|       |import Foundation
    2|       |
    3|       |/// An ordered list.
    4|       |public struct OrderedList: Hashable {
    5|       |  /// The list items.
    6|       |  public var items: [ListItem]
    7|       |
    8|       |  /// The start number for this list.
    9|       |  public var start: Int
   10|       |
   11|       |  /// Determines if this list is tight or loose.
   12|       |  public var tight: Bool
   13|       |
   14|      0|  public init(items: [ListItem], start: Int, tight: Bool) {
   15|      0|    self.items = items
   16|      0|    self.start = start
   17|      0|    // Force loose spacing if any of the items contains more than one paragraph
   18|      0|    let hasItemsWithMultipleParagraphs = self.items.contains { item in
   19|      0|      item.blocks.filter(\.isParagraph).count > 1
  ------------------
  | Unexecuted instantiation: $s10CommonMark11OrderedListV5items5start5tightACSayAA0D4ItemVG_SiSbtcfcSbAHXEfU_SbAA5BlockOcs7KeyPathCyAKSbGcfu_
  ------------------
  | Unexecuted instantiation: $s10CommonMark11OrderedListV5items5start5tightACSayAA0D4ItemVG_SiSbtcfcSbAHXEfU_SbAA5BlockOcs7KeyPathCyAKSbGcfu_SbAKcfu0_
  ------------------
   20|      0|    }
   21|      0|    self.tight = hasItemsWithMultipleParagraphs ? false : tight
   22|      0|  }
   23|       |}
   24|       |
   25|       |#if swift(>=5.4)
   26|       |  extension OrderedList {
   27|       |    /// Creates an ordered list.
   28|       |    /// - Parameters:
   29|       |    ///   - start: The start number for this list.
   30|       |    ///   - tight: A `Boolean` value that indicates if the list is tight or loose. This parameter is ignored if
   31|       |    ///            any of the list items contain more than one paragraph.
   32|       |    ///   - items: An ``ListItemArrayBuilder`` that creates the items in this list.
   33|      0|    public init(start: Int = 1, tight: Bool = true, @ListItemArrayBuilder items: () -> [ListItem]) {
   34|      0|      self.init(items: items(), start: start, tight: tight)
   35|      0|    }
   36|       |  }
   37|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Blocks/Paragraph.swift:
    1|       |import Foundation
    2|       |
    3|       |/// A paragraph element.
    4|       |public struct Paragraph: Hashable {
    5|       |  /// The inlines contained in this paragraph.
    6|       |  public var text: [Inline]
    7|       |
    8|     32|  public init(text: [Inline]) {
    9|     32|    self.text = text
   10|     32|  }
   11|       |}
   12|       |
   13|       |#if swift(>=5.4)
   14|       |  extension Paragraph {
   15|       |    /// Creates a paragraph element.
   16|       |    /// - Parameter text: An ``InlineArrayBuilder`` that creates the inlines in this paragraph.
   17|      0|    public init(@InlineArrayBuilder text: () -> [Inline]) {
   18|      0|      self.init(text: text())
   19|      0|    }
   20|       |  }
   21|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Document/CommonMarkNode.swift:
    1|       |import Foundation
    2|       |import cmark
    3|       |
    4|       |internal class CommonMarkNode {
    5|       |  let pointer: OpaquePointer
    6|       |  let managed: Bool
    7|       |
    8|    158|  var type: cmark_node_type {
    9|    158|    cmark_node_get_type(pointer)
   10|    158|  }
   11|       |
   12|      0|  var typeString: String {
   13|      0|    String(cString: cmark_node_get_type_string(pointer))
   14|      0|  }
   15|       |
   16|     64|  var literal: String? {
   17|     64|    guard let literal = cmark_node_get_literal(pointer) else { return nil }
   18|     64|    return String(cString: literal)
   19|     64|  }
   20|       |
   21|     16|  var url: String? {
   22|     16|    guard let url = cmark_node_get_url(pointer) else { return nil }
   23|     16|    return String(cString: url)
   24|     16|  }
   25|       |
   26|     16|  var title: String? {
   27|     16|    guard let title = cmark_node_get_title(pointer) else { return nil }
   28|     16|    return String(cString: title)
   29|     16|  }
   30|       |
   31|      0|  var fenceInfo: String? {
   32|      0|    guard let fenceInfo = cmark_node_get_fence_info(pointer) else { return nil }
   33|      0|    return String(cString: fenceInfo)
   34|      0|  }
   35|       |
   36|      8|  var headingLevel: Int {
   37|      8|    Int(cmark_node_get_heading_level(pointer))
   38|      8|  }
   39|       |
   40|      8|  var listType: cmark_list_type {
   41|      8|    cmark_node_get_list_type(pointer)
   42|      8|  }
   43|       |
   44|      0|  var listStart: Int {
   45|      0|    Int(cmark_node_get_list_start(pointer))
   46|      0|  }
   47|       |
   48|      8|  var listTight: Bool {
   49|      8|    cmark_node_get_list_tight(pointer) != 0
   50|      8|  }
   51|       |
   52|     96|  var children: [CommonMarkNode] {
   53|     96|    var result: [CommonMarkNode] = []
   54|     96|
   55|     96|    var child = cmark_node_first_child(pointer)
   56|    158|    while let unwrapped = child {
   57|    158|      result.append(CommonMarkNode(pointer: unwrapped, managed: false))
   58|    158|      child = cmark_node_next(child)
   59|    158|    }
   60|     96|    return result
   61|     96|  }
   62|       |
   63|    160|  init(pointer: OpaquePointer, managed: Bool) {
   64|    160|    self.pointer = pointer
   65|    160|    self.managed = managed
   66|    160|  }
   67|       |
   68|      2|  convenience init?(markdown: String, options: Int32) {
   69|      2|    guard let pointer = cmark_parse_document(markdown, markdown.utf8.count, options) else {
   70|      0|      return nil
   71|      2|    }
   72|      2|    self.init(pointer: pointer, managed: true)
   73|      2|  }
   74|       |
   75|    160|  deinit {
   76|    160|    guard managed else { return }
   77|    160|    cmark_node_free(pointer)
   78|    160|  }
   79|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Document/Document+cmark.swift:
    1|       |import Foundation
    2|       |import cmark
    3|       |
    4|       |extension Document {
    5|       |  /// Renders this document as CommonMark-formatted text.
    6|      0|  public func renderCommonMark() -> String {
    7|      0|    let node = CommonMarkNode(document: self)
    8|      0|    return String(cString: cmark_render_commonmark(node.pointer, CMARK_OPT_DEFAULT, 0))
    9|      0|  }
   10|       |
   11|       |  /// Renders this document as HTML.
   12|       |  /// - Parameter options: Options that affect how the document is rendered as HTML.
   13|      0|  public func renderHTML(options: RenderingOptions = .init()) -> String {
   14|      0|    let node = CommonMarkNode(document: self)
   15|      0|    return String(cString: cmark_render_html(node.pointer, options.rawValue))
   16|      0|  }
   17|       |}
   18|       |
   19|       |extension Document: CustomStringConvertible {
   20|      0|  public var description: String {
   21|      0|    renderCommonMark()
   22|      0|  }
   23|       |}
   24|       |
   25|       |extension CommonMarkNode {
   26|      0|  convenience init(document: Document) {
   27|      0|    let pointer: OpaquePointer = cmark_node_new(CMARK_NODE_DOCUMENT)
   28|      0|
   29|      0|    document.blocks.map {
   30|      0|      CommonMarkNode(block: $0, managed: false)
   31|      0|    }.forEach { node in
   32|      0|      cmark_node_append_child(pointer, node.pointer)
   33|      0|    }
   34|      0|
   35|      0|    self.init(pointer: pointer, managed: true)
   36|      0|  }
   37|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Document/Document.swift:
    1|       |import Foundation
    2|       |
    3|       |/// A value type that stores a CommonMark document as a sequence of blocks.
    4|       |///
    5|       |/// A CommonMark document consists of a sequence of blocks—structural elements like paragraphs,
    6|       |/// block quotations, lists, headings, rules, and code blocks. Some blocks, like blockquotes and list
    7|       |/// items, contain other blocks; others, like headings and paragraphs, contain inline text, links,
    8|       |/// emphasized text, images, code spans, etc.
    9|       |///
   10|       |/// You can create a ``Document`` by passing a CommonMark-formatted `String` or `Data`
   11|       |/// instance to initializers like ``init(markdown:options:)``.
   12|       |/// ```swift
   13|       |/// do {
   14|       |///   let document = try Document(
   15|       |///     markdown: "You can try **CommonMark** [here](https://spec.commonmark.org/dingus/)."
   16|       |///   )
   17|       |/// } catch {
   18|       |///   print("Couldn't parse document.")
   19|       |/// }
   20|       |/// ```
   21|       |///
   22|       |/// From Swift 5.4 onwards, you can create a ``Document`` by passing an array of ``Block``s
   23|       |/// constructed with a ``BlockArrayBuilder``.
   24|       |/// ```swift
   25|       |/// let document = Document {
   26|       |///   Heading(level: 2) {
   27|       |///     "Markdown lists"
   28|       |///   }
   29|       |///   Paragraph {
   30|       |///     "Sometimes you want numbered lists:"
   31|       |///   }
   32|       |///   OrderedList {
   33|       |///     "One"
   34|       |///     "Two"
   35|       |///     "Three"
   36|       |///   }
   37|       |///   Paragraph {
   38|       |///     "Sometimes you want bullet points:"
   39|       |///   }
   40|       |///   BulletList {
   41|       |///     ListItem {
   42|       |///       Paragraph {
   43|       |///         "Start a line with a "
   44|       |///         Strong("star")
   45|       |///       }
   46|       |///     }
   47|       |///     ListItem {
   48|       |///       "Profit!"
   49|       |///     }
   50|       |///     ListItem {
   51|       |///       "And you can have sub points:"
   52|       |///       BulletList {
   53|       |///         "Like this"
   54|       |///         "And this"
   55|       |///       }
   56|       |///     }
   57|       |///   }
   58|       |/// }
   59|       |/// ```
   60|       |///
   61|       |/// You can inspect the elements of a ``Document`` by accessing its ``blocks`` property.
   62|       |/// ```swift
   63|       |/// for block in document.blocks {
   64|       |///   switch block {
   65|       |///   case .blockQuote(let blockQuote):
   66|       |///     for item in blockQuote.items {
   67|       |///       // Inspect the item
   68|       |///     }
   69|       |///   case .bulletList(let bulletList):
   70|       |///     for item in bulletList.items {
   71|       |///       // Inspect the list item
   72|       |///     }
   73|       |///   case .orderedList(let orderedList):
   74|       |///     for item in orderedList.items {
   75|       |///       // Inspect the list item
   76|       |///     }
   77|       |///   case .code(let codeBlock):
   78|       |///     print(codeBlock.language)
   79|       |///     print(codeBlock.code)
   80|       |///   case .html(let htmlBlock):
   81|       |///     print(htmlBlock.html)
   82|       |///   case .paragraph(let paragraph):
   83|       |///     for inline in paragraph.text {
   84|       |///       // Inspect the inline
   85|       |///     }
   86|       |///   case .heading(let heading):
   87|       |///     print(heading.level)
   88|       |///     for inline in heading.text {
   89|       |///       // Inspect the inline
   90|       |///     }
   91|       |///   case .thematicBreak:
   92|       |///     // A thematic break
   93|       |///   }
   94|       |/// }
   95|       |/// ```
   96|       |///
   97|       |/// You can get back the CommonMark formatted text for a ``Document`` or render it as HTML.
   98|       |/// ```swift
   99|       |/// let markdown = document.renderCommonMark()
  100|       |/// let html = document.renderHTML()
  101|       |/// ```
  102|       |public struct Document: Hashable {
  103|       |  /// The blocks that form this document.
  104|       |  public var blocks: [Block]
  105|       |
  106|       |  /// Creates a document from a CommonMark-formatted string using the provided options.
  107|       |  /// - Parameters:
  108|       |  ///   - markdown: The string that contains the CommonMark formatting.
  109|       |  ///   - options: Options that affect how the initializer parses the CommonMark string. Defaults to no options.
  110|      2|  public init(markdown: String, options: ParsingOptions = .init()) throws {
  111|      2|    guard let node = CommonMarkNode(markdown: markdown, options: options.rawValue) else {
  112|      0|      throw ParsingError.invalidData
  113|      2|    }
  114|     18|    self.init(blocks: node.children.compactMap(Block.init))
  115|      2|  }
  116|       |
  117|       |  /// Creates a document from a CommonMark-formatted data using the provided options.
  118|       |  /// - Parameters:
  119|       |  ///   - markdown: The `Data` instance that contains the CommonMark formatting.
  120|       |  ///   - options: Options that affect how the initializer parses the CommonMark string. Defaults to no options.
  121|      0|  public init(markdown: Data, options: ParsingOptions = .init()) throws {
  122|      0|    try self.init(markdown: String(decoding: markdown, as: UTF8.self), options: options)
  123|      0|  }
  124|       |
  125|       |  /// Creates a document from the contents of a specified URL that contains CommonMark-formatted data, using the provided options.
  126|       |  /// - Parameters:
  127|       |  ///   - url: The URL to load CommonMark-formatted data from.
  128|       |  ///   - options: Options that affect how the initializer parses the CommonMark string. Defaults to no options.
  129|      0|  public init(contentsOf url: URL, options: ParsingOptions = .init()) throws {
  130|      0|    try self.init(markdown: Data(contentsOf: url), options: options)
  131|      0|  }
  132|       |
  133|       |  /// Creates a document with the given array of blocks.
  134|       |  /// - Parameter blocks: The blocks that will form the document.
  135|      2|  public init(blocks: [Block]) {
  136|      2|    self.blocks = blocks
  137|      2|  }
  138|       |
  139|       |  #if swift(>=5.4)
  140|       |    /// Creates a document with the given array of blocks.
  141|       |    /// - Parameter blocks: A ``BlockArrayBuilder`` that creates the blocks of this document.
  142|      0|    public init(@BlockArrayBuilder blocks: () -> [Block]) {
  143|      0|      self.init(blocks: blocks())
  144|      0|    }
  145|       |  #endif
  146|       |}
  147|       |
  148|       |extension Document: Codable {
  149|      0|  public init(from decoder: Decoder) throws {
  150|      0|    let container = try decoder.singleValueContainer()
  151|      0|    let markdown = try container.decode(String.self)
  152|      0|
  153|      0|    try self.init(markdown: markdown)
  154|      0|  }
  155|       |
  156|      0|  public func encode(to encoder: Encoder) throws {
  157|      0|    var container = encoder.singleValueContainer()
  158|      0|    try container.encode(description)
  159|      0|  }
  160|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Document/ParsingOptions.swift:
    1|       |import Foundation
    2|       |import cmark
    3|       |
    4|       |extension Document {
    5|       |  /// Options that affect the parsing of a CommonMark-formatted string into a ``Document``.
    6|       |  public struct ParsingOptions: OptionSet {
    7|       |    public var rawValue: Int32
    8|       |
    9|      2|    public init(rawValue: Int32 = CMARK_OPT_DEFAULT) {
   10|      2|      self.rawValue = rawValue
   11|      2|    }
   12|       |
   13|       |    /// Convert straight quotes to curly, --- to em dashes, -- to en dashes.
   14|       |    public static let smart = ParsingOptions(rawValue: CMARK_OPT_SMART)
   15|       |  }
   16|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Document/RenderingOptions.swift:
    1|       |import Foundation
    2|       |import cmark
    3|       |
    4|       |extension Document {
    5|       |  /// Options that affect the rendering a ``Document`` as HTML.
    6|       |  public struct RenderingOptions: OptionSet {
    7|       |    public var rawValue: Int32
    8|       |
    9|      0|    public init(rawValue: Int32 = CMARK_OPT_DEFAULT) {
   10|      0|      self.rawValue = rawValue
   11|      0|    }
   12|       |
   13|       |    /// Include a `data-sourcepos` attribute on all block elements.
   14|       |    public static let sourcePosition = RenderingOptions(rawValue: CMARK_OPT_SOURCEPOS)
   15|       |
   16|       |    /// Render `softbreak` elements as hard line breaks.
   17|       |    public static let hardBreaks = RenderingOptions(rawValue: CMARK_OPT_HARDBREAKS)
   18|       |
   19|       |    /// Render raw HTML and unsafe links (`javascript:`, `vbscript:`, `file:`, and `data:`, except for `image/png`, `image/gif`,
   20|       |    /// `image/jpeg`, or `image/webp` mime types).  By default, raw HTML is replaced by a placeholder HTML comment. Unsafe links are
   21|       |    /// replaced by empty strings.
   22|       |    public static let unsafe = RenderingOptions(rawValue: CMARK_OPT_UNSAFE)
   23|       |
   24|       |    /// Render `softBreak` elements as spaces.
   25|       |    public static let noBreaks = RenderingOptions(rawValue: CMARK_OPT_NOBREAKS)
   26|       |  }
   27|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Inlines/Emphasis.swift:
    1|       |import Foundation
    2|       |
    3|       |/// An emphasized element.
    4|       |public struct Emphasis: Hashable {
    5|       |  /// The inlines contained in this element.
    6|       |  public var children: [Inline]
    7|       |
    8|      0|  public init(children: [Inline]) {
    9|      0|    self.children = children
   10|      0|  }
   11|       |
   12|       |  /// Creates an emphasized text element.
   13|       |  /// - Parameter text: The emphasized text.
   14|      0|  public init(_ text: String) {
   15|      0|    self.init(children: [.text(text)])
   16|      0|  }
   17|       |}
   18|       |
   19|       |#if swift(>=5.4)
   20|       |  extension Emphasis {
   21|       |    /// Creates an emphasized element.
   22|       |    /// - Parameter children: An ``InlineArrayBuilder`` that creates the inlines in this element.
   23|      0|    public init(@InlineArrayBuilder children: () -> [Inline]) {
   24|      0|      self.init(children: children())
   25|      0|    }
   26|       |  }
   27|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Inlines/Image.swift:
    1|       |import Foundation
    2|       |
    3|       |/// An image element.
    4|       |public struct Image: Hashable {
    5|       |  /// The inlines contained in this element.
    6|       |  public var children: [Inline]
    7|       |
    8|       |  /// The image URL.
    9|       |  public var url: URL?
   10|       |
   11|       |  /// The image title.
   12|       |  public var title: String?
   13|       |
   14|      0|  public init(children: [Inline], url: URL?, title: String? = nil) {
   15|      0|    self.children = children
   16|      0|    self.url = url
   17|      0|    self.title = title
   18|      0|  }
   19|       |
   20|       |  /// Creates an image element.
   21|       |  /// - Parameters:
   22|       |  ///   - url: The image URL.
   23|       |  ///   - alt: The image alternate text.
   24|       |  ///   - title: The image title.
   25|      0|  public init(url: URL?, alt: String? = nil, title: String? = nil) {
   26|      0|    self.init(children: alt.map { [.text($0)] } ?? [], url: url, title: title)
   27|      0|  }
   28|       |
   29|       |  /// Creates an image element.
   30|       |  /// - Parameters:
   31|       |  ///   - destination: The path to the image.
   32|       |  ///   - alt: The image alternate text.
   33|       |  ///   - title: The image title.
   34|      0|  public init(_ destination: StaticString, alt: String? = nil, title: String? = nil) {
   35|      0|    self.init(
   36|      0|      children: alt.map { [.text($0)] } ?? [],
   37|      0|      url: URL(string: "\(destination)"),
   38|      0|      title: title
   39|      0|    )
   40|      0|  }
   41|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Inlines/Inline+cmark.swift:
    1|       |import Foundation
    2|       |import cmark
    3|       |
    4|       |extension Inline {
    5|       |  /// Renders this inline as CommonMark-formatted text.
    6|      0|  public func renderCommonMark() -> String {
    7|      0|    let node = CommonMarkNode(inline: self, managed: true)
    8|      0|    return String(cString: cmark_render_commonmark(node.pointer, CMARK_OPT_DEFAULT, 0))
    9|      0|  }
   10|       |
   11|       |  /// Renders this inline as HTML.
   12|       |  /// - Parameter options: Options that affect how the inline is rendered as HTML.
   13|      0|  public func renderHTML(options: Document.RenderingOptions = .init()) -> String {
   14|      0|    let node = CommonMarkNode(inline: self, managed: true)
   15|      0|    return String(cString: cmark_render_html(node.pointer, options.rawValue))
   16|      0|  }
   17|       |}
   18|       |
   19|       |extension Inline {
   20|     80|  init?(commonMarkNode: CommonMarkNode) {
   21|     80|    switch commonMarkNode.type {
   22|     80|    case CMARK_NODE_TEXT:
   23|     64|      self = .text(commonMarkNode.literal ?? "")
   24|     80|    case CMARK_NODE_SOFTBREAK:
   25|      0|      self = .softBreak
   26|     80|    case CMARK_NODE_LINEBREAK:
   27|      0|      self = .lineBreak
   28|     80|    case CMARK_NODE_CODE:
   29|      0|      self = .code(.init(commonMarkNode.literal!))
   30|     80|    case CMARK_NODE_HTML_INLINE:
   31|      0|      self = .html(.init(commonMarkNode.literal!))
   32|     80|    case CMARK_NODE_EMPH:
   33|      0|      self = .emphasis(.init(children: commonMarkNode.children.compactMap(Inline.init)))
   34|     80|    case CMARK_NODE_STRONG:
   35|      0|      self = .strong(.init(children: commonMarkNode.children.compactMap(Inline.init)))
   36|     80|    case CMARK_NODE_LINK:
   37|     16|      self = .link(
   38|     16|        .init(
   39|     16|          children: commonMarkNode.children.compactMap(Inline.init),
   40|     16|          url: commonMarkNode.url.flatMap(URL.init(string:)),
   41|     16|          title: commonMarkNode.title?.isEmpty ?? true ? nil : commonMarkNode.title
   42|     16|        )
   43|     16|      )
   44|     80|    case CMARK_NODE_IMAGE:
   45|      0|      self = .image(
   46|      0|        .init(
   47|      0|          children: commonMarkNode.children.compactMap(Inline.init),
   48|      0|          url: commonMarkNode.url.flatMap(URL.init(string:)),
   49|      0|          title: commonMarkNode.title?.isEmpty ?? true ? nil : commonMarkNode.title
   50|      0|        )
   51|      0|      )
   52|     80|    default:
   53|      0|      assertionFailure("Unknown inline type '\(commonMarkNode.typeString)'")
   54|      0|      return nil
   55|     80|    }
   56|     80|  }
   57|       |}
   58|       |
   59|       |extension CommonMarkNode {
   60|      0|  convenience init(inline: Inline, managed: Bool) {
   61|      0|    let pointer: OpaquePointer
   62|      0|
   63|      0|    switch inline {
   64|      0|    case let .text(literal):
   65|      0|      pointer = cmark_node_new(CMARK_NODE_TEXT)
   66|      0|      cmark_node_set_literal(pointer, literal)
   67|      0|    case .softBreak:
   68|      0|      pointer = cmark_node_new(CMARK_NODE_SOFTBREAK)
   69|      0|    case .lineBreak:
   70|      0|      pointer = cmark_node_new(CMARK_NODE_LINEBREAK)
   71|      0|    case let .code(inlineCode):
   72|      0|      pointer = cmark_node_new(CMARK_NODE_CODE)
   73|      0|      cmark_node_set_literal(pointer, inlineCode.code)
   74|      0|    case let .html(inlineHTML):
   75|      0|      pointer = cmark_node_new(CMARK_NODE_HTML_INLINE)
   76|      0|      cmark_node_set_literal(pointer, inlineHTML.html)
   77|      0|    case let .emphasis(emphasis):
   78|      0|      pointer = cmark_node_new(CMARK_NODE_EMPH)
   79|      0|      emphasis.children.map {
   80|      0|        CommonMarkNode(inline: $0, managed: false)
   81|      0|      }.forEach { node in
   82|      0|        cmark_node_append_child(pointer, node.pointer)
   83|      0|      }
   84|      0|    case let .strong(strong):
   85|      0|      pointer = cmark_node_new(CMARK_NODE_STRONG)
   86|      0|      strong.children.map {
   87|      0|        CommonMarkNode(inline: $0, managed: false)
   88|      0|      }.forEach { node in
   89|      0|        cmark_node_append_child(pointer, node.pointer)
   90|      0|      }
   91|      0|    case let .link(link):
   92|      0|      pointer = cmark_node_new(CMARK_NODE_LINK)
   93|      0|      if let url = link.url {
   94|      0|        cmark_node_set_url(pointer, url.absoluteString)
   95|      0|      }
   96|      0|      if let title = link.title {
   97|      0|        cmark_node_set_title(pointer, title)
   98|      0|      }
   99|      0|      link.children.map {
  100|      0|        CommonMarkNode(inline: $0, managed: false)
  101|      0|      }.forEach { node in
  102|      0|        cmark_node_append_child(pointer, node.pointer)
  103|      0|      }
  104|      0|    case let .image(image):
  105|      0|      pointer = cmark_node_new(CMARK_NODE_IMAGE)
  106|      0|      if let url = image.url {
  107|      0|        cmark_node_set_url(pointer, url.absoluteString)
  108|      0|      }
  109|      0|      if let title = image.title {
  110|      0|        cmark_node_set_title(pointer, title)
  111|      0|      }
  112|      0|      image.children.map {
  113|      0|        CommonMarkNode(inline: $0, managed: false)
  114|      0|      }.forEach { node in
  115|      0|        cmark_node_append_child(pointer, node.pointer)
  116|      0|      }
  117|      0|    }
  118|      0|
  119|      0|    self.init(pointer: pointer, managed: managed)
  120|      0|  }
  121|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Inlines/InlineArrayBuilder.swift:
    1|       |#if swift(>=5.4)
    2|       |  import Foundation
    3|       |
    4|       |  /// A soft line break.
    5|       |  public struct SoftBreak {
    6|      0|    public init() {}
    7|       |  }
    8|       |
    9|       |  /// A hard line break.
   10|       |  public struct LineBreak {
   11|      0|    public init() {}
   12|       |  }
   13|       |
   14|       |  /// Constructs ``Inline`` arrays from multi-expression closures.
   15|       |  @resultBuilder public enum InlineArrayBuilder {
   16|      0|    public static func buildBlock(_ components: [Inline]...) -> [Inline] {
   17|      0|      components.flatMap { $0 }
   18|      0|    }
   19|       |
   20|      0|    public static func buildExpression(_ expression: String) -> [Inline] {
   21|      0|      [.text(expression)]
   22|      0|    }
   23|       |
   24|      0|    public static func buildExpression(_: SoftBreak) -> [Inline] {
   25|      0|      [.softBreak]
   26|      0|    }
   27|       |
   28|      0|    public static func buildExpression(_: LineBreak) -> [Inline] {
   29|      0|      [.lineBreak]
   30|      0|    }
   31|       |
   32|      0|    public static func buildExpression(_ expression: InlineCode) -> [Inline] {
   33|      0|      [.code(expression)]
   34|      0|    }
   35|       |
   36|      0|    public static func buildExpression(_ expression: InlineHTML) -> [Inline] {
   37|      0|      [.html(expression)]
   38|      0|    }
   39|       |
   40|      0|    public static func buildExpression(_ expression: Emphasis) -> [Inline] {
   41|      0|      [.emphasis(expression)]
   42|      0|    }
   43|       |
   44|      0|    public static func buildExpression(_ expression: Strong) -> [Inline] {
   45|      0|      [.strong(expression)]
   46|      0|    }
   47|       |
   48|      0|    public static func buildExpression(_ expression: Link) -> [Inline] {
   49|      0|      [.link(expression)]
   50|      0|    }
   51|       |
   52|      0|    public static func buildExpression(_ expression: Image) -> [Inline] {
   53|      0|      [.image(expression)]
   54|      0|    }
   55|       |
   56|      0|    public static func buildArray(_ components: [[Inline]]) -> [Inline] {
   57|      0|      components.flatMap { $0 }
   58|      0|    }
   59|       |
   60|      0|    public static func buildOptional(_ component: [Inline]?) -> [Inline] {
   61|      0|      component ?? []
   62|      0|    }
   63|       |
   64|      0|    public static func buildEither(first component: [Inline]) -> [Inline] {
   65|      0|      component
   66|      0|    }
   67|       |
   68|      0|    public static func buildEither(second component: [Inline]) -> [Inline] {
   69|      0|      component
   70|      0|    }
   71|       |  }
   72|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Inlines/InlineCode.swift:
    1|       |import Foundation
    2|       |
    3|       |/// A code span.
    4|       |public struct InlineCode: Hashable {
    5|       |  /// The code contents.
    6|       |  public var code: String
    7|       |
    8|       |  /// Creates a code span.
    9|       |  /// - Parameter text: The code contents.
   10|      0|  public init(_ code: String) {
   11|      0|    self.code = code
   12|      0|  }
   13|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Inlines/InlineHTML.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct InlineHTML: Hashable {
    4|       |  public var html: String
    5|       |
    6|      0|  public init(_ html: String) {
    7|      0|    self.html = html
    8|      0|  }
    9|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Inlines/Link.swift:
    1|       |import Foundation
    2|       |
    3|       |/// A link element.
    4|       |public struct Link: Hashable {
    5|       |  /// The inlines contained in this element.
    6|       |  public var children: [Inline]
    7|       |
    8|       |  /// The link destination.
    9|       |  public var url: URL?
   10|       |
   11|       |  /// The link title.
   12|       |  public var title: String?
   13|       |
   14|     16|  public init(children: [Inline], url: URL?, title: String? = nil) {
   15|     16|    self.children = children
   16|     16|    self.url = url
   17|     16|    self.title = title
   18|     16|  }
   19|       |}
   20|       |
   21|       |#if swift(>=5.4)
   22|       |  extension Link {
   23|       |    /// Creates a link element.
   24|       |    /// - Parameters:
   25|       |    ///   - url: The link destination.
   26|       |    ///   - title: The link title.
   27|       |    ///   - children: An ``InlineArrayBuilder`` that creates the link text.
   28|      0|    public init(url: URL?, title: String? = nil, @InlineArrayBuilder children: () -> [Inline]) {
   29|      0|      self.init(children: children(), url: url, title: title)
   30|      0|    }
   31|       |
   32|       |    /// Creates a link element.
   33|       |    /// - Parameters:
   34|       |    ///   - destination: The link destination.
   35|       |    ///   - title: The link title.
   36|       |    ///   - children: An ``InlineArrayBuilder`` that creates the link text.
   37|       |    public init(
   38|       |      _ destination: StaticString,
   39|       |      title: String? = nil,
   40|       |      @InlineArrayBuilder children: () -> [Inline]
   41|      0|    ) {
   42|      0|      self.init(children: children(), url: URL(string: "\(destination)"), title: title)
   43|      0|    }
   44|       |  }
   45|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Inlines/Strong.swift:
    1|       |import Foundation
    2|       |
    3|       |/// An strongly emphasized element.
    4|       |public struct Strong: Hashable {
    5|       |  /// The inlines contained in this element.
    6|       |  public var children: [Inline]
    7|       |
    8|      0|  public init(children: [Inline]) {
    9|      0|    self.children = children
   10|      0|  }
   11|       |
   12|       |  /// Creates an strongly emphasized text element.
   13|       |  /// - Parameter text: The emphasized text.
   14|      0|  public init(_ text: String) {
   15|      0|    self.init(children: [.text(text)])
   16|      0|  }
   17|       |}
   18|       |
   19|       |#if swift(>=5.4)
   20|       |  extension Strong {
   21|       |    /// Creates an strongly emphasized element.
   22|       |    /// - Parameter children: An ``InlineArrayBuilder`` that creates the inlines in this element.
   23|      0|    public init(@InlineArrayBuilder children: () -> [Inline]) {
   24|      0|      self.init(children: children())
   25|      0|    }
   26|       |  }
   27|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/CommonMark/Internal/Deprecations.swift:
    1|       |import Foundation
    2|       |
    3|       |extension Document {
    4|       |  @available(*, deprecated, message: "This property has been removed and returns an empty set")
    5|      0|  public var imageURLs: Set<String> {
    6|      0|    []
    7|      0|  }
    8|       |
    9|       |  @available(
   10|       |    *, deprecated, message: "Use init(markdown:options:) to create a document from a string"
   11|       |  )
   12|      0|  public init(_ content: String) {
   13|      0|    try! self.init(markdown: content)
   14|      0|  }
   15|       |
   16|       |  @available(
   17|       |    *, deprecated,
   18|       |    message: "Use init(contentsOf:options:) to create a document from the contents of a URL"
   19|       |  )
   20|      0|  public init(contentsOfFile path: String) throws {
   21|      0|    try self.init(markdown: .init(contentsOfFile: path))
   22|      0|  }
   23|       |
   24|       |  @available(
   25|       |    *, deprecated,
   26|       |    message: "Use init(contentsOf:options:) to create a document from the contents of a URL"
   27|       |  )
   28|      0|  public init(contentsOfFile path: String, encoding: String.Encoding) throws {
   29|      0|    try self.init(markdown: .init(contentsOfFile: path, encoding: encoding))
   30|      0|  }
   31|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/blocks.c:
    1|       |/**
    2|       | * Block parsing implementation.
    3|       | *
    4|       | * For a high-level overview of the block parsing process,
    5|       | * see http://spec.commonmark.org/0.24/#phase-1-block-structure
    6|       | */
    7|       |
    8|       |#include <stdlib.h>
    9|       |#include <assert.h>
   10|       |#include <stdio.h>
   11|       |#include <limits.h>
   12|       |
   13|       |#include "cmark_ctype.h"
   14|       |#include "config.h"
   15|       |#include "parser.h"
   16|       |#include "cmark.h"
   17|       |#include "node.h"
   18|       |#include "references.h"
   19|       |#include "utf8.h"
   20|       |#include "scanners.h"
   21|       |#include "inlines.h"
   22|       |#include "houdini.h"
   23|       |#include "buffer.h"
   24|       |#include "chunk.h"
   25|       |
   26|     86|#define CODE_INDENT 4
   27|    452|#define TAB_STOP 4
   28|       |
   29|       |#ifndef MIN
   30|      0|#define MIN(x, y) ((x < y) ? x : y)
   31|       |#endif
   32|       |
   33|  1.05k|#define peek_at(i, n) (i)->data[n]
   34|       |
   35|     52|static bool S_last_line_blank(const cmark_node *node) {
   36|     52|  return (node->flags & CMARK_NODE__LAST_LINE_BLANK) != 0;
   37|     52|}
   38|       |
   39|     22|static bool S_last_line_checked(const cmark_node *node) {
   40|     22|  return (node->flags & CMARK_NODE__LAST_LINE_CHECKED) != 0;
   41|     22|}
   42|       |
   43|    984|static CMARK_INLINE cmark_node_type S_type(const cmark_node *node) {
   44|    984|  return (cmark_node_type)node->type;
   45|    984|}
   46|       |
   47|    152|static void S_set_last_line_blank(cmark_node *node, bool is_blank) {
   48|    152|  if (is_blank)
   49|     32|    node->flags |= CMARK_NODE__LAST_LINE_BLANK;
   50|    120|  else
   51|    120|    node->flags &= ~CMARK_NODE__LAST_LINE_BLANK;
   52|    152|}
   53|       |
   54|     22|static void S_set_last_line_checked(cmark_node *node) {
   55|     22|  node->flags |= CMARK_NODE__LAST_LINE_CHECKED;
   56|     22|}
   57|       |
   58|  3.31k|static CMARK_INLINE bool S_is_line_end_char(char c) {
   59|  3.31k|  return (c == '\n' || c == '\r');
   60|  3.31k|}
   61|       |
   62|     60|static CMARK_INLINE bool S_is_space_or_tab(char c) {
   63|     60|  return (c == ' ' || c == '\t');
   64|     60|}
   65|       |
   66|       |static void S_parser_feed(cmark_parser *parser, const unsigned char *buffer,
   67|       |                          size_t len, bool eof);
   68|       |
   69|       |static void S_process_line(cmark_parser *parser, const unsigned char *buffer,
   70|       |                           bufsize_t bytes);
   71|       |
   72|       |static cmark_node *make_block(cmark_mem *mem, cmark_node_type tag,
   73|     80|                              int start_line, int start_column) {
   74|     80|  cmark_node *e;
   75|       |
   76|     80|  e = (cmark_node *)mem->calloc(1, sizeof(*e));
   77|     80|  e->mem = mem;
   78|     80|  e->type = (uint16_t)tag;
   79|     80|  e->flags = CMARK_NODE__OPEN;
   80|     80|  e->start_line = start_line;
   81|     80|  e->start_column = start_column;
   82|     80|  e->end_line = start_line;
   83|       |
   84|     80|  return e;
   85|     80|}
   86|       |
   87|       |// Create a root document node.
   88|      2|static cmark_node *make_document(cmark_mem *mem) {
   89|      2|  cmark_node *e = make_block(mem, CMARK_NODE_DOCUMENT, 1, 1);
   90|      2|  return e;
   91|      2|}
   92|       |
   93|      2|cmark_parser *cmark_parser_new_with_mem(int options, cmark_mem *mem) {
   94|      2|  cmark_parser *parser = (cmark_parser *)mem->calloc(1, sizeof(cmark_parser));
   95|      2|  parser->mem = mem;
   96|       |
   97|      2|  cmark_node *document = make_document(mem);
   98|       |
   99|      2|  cmark_strbuf_init(mem, &parser->curline, 256);
  100|      2|  cmark_strbuf_init(mem, &parser->linebuf, 0);
  101|      2|  cmark_strbuf_init(mem, &parser->content, 0);
  102|       |
  103|      2|  parser->refmap = cmark_reference_map_new(mem);
  104|      2|  parser->root = document;
  105|      2|  parser->current = document;
  106|      2|  parser->line_number = 0;
  107|      2|  parser->offset = 0;
  108|      2|  parser->column = 0;
  109|      2|  parser->first_nonspace = 0;
  110|      2|  parser->first_nonspace_column = 0;
  111|      2|  parser->thematic_break_kill_pos = 0;
  112|      2|  parser->indent = 0;
  113|      2|  parser->blank = false;
  114|      2|  parser->partially_consumed_tab = false;
  115|      2|  parser->last_line_length = 0;
  116|      2|  parser->options = options;
  117|      2|  parser->last_buffer_ended_with_cr = false;
  118|       |
  119|      2|  return parser;
  120|      2|}
  121|       |
  122|      2|cmark_parser *cmark_parser_new(int options) {
  123|      2|  extern cmark_mem DEFAULT_MEM_ALLOCATOR;
  124|      2|  return cmark_parser_new_with_mem(options, &DEFAULT_MEM_ALLOCATOR);
  125|      2|}
  126|       |
  127|      2|void cmark_parser_free(cmark_parser *parser) {
  128|      2|  cmark_mem *mem = parser->mem;
  129|      2|  cmark_strbuf_free(&parser->curline);
  130|      2|  cmark_strbuf_free(&parser->linebuf);
  131|      2|  cmark_reference_map_free(parser->refmap);
  132|      2|  mem->free(parser);
  133|      2|}
  134|       |
  135|       |static cmark_node *finalize(cmark_parser *parser, cmark_node *b);
  136|       |
  137|       |// Returns true if line has only space characters, else false.
  138|     32|static bool is_blank(cmark_strbuf *s, bufsize_t offset) {
  139|     32|  while (offset < s->size) {
  140|     32|    switch (s->ptr[offset]) {
  141|      0|    case '\r':
  142|      0|    case '\n':
  143|      0|      return true;
  144|      0|    case ' ':
  145|      0|      offset++;
  146|      0|      break;
  147|      0|    case '\t':
  148|      0|      offset++;
  149|      0|      break;
  150|     32|    default:
  151|     32|      return false;
  152|     32|    }
  153|     32|  }
  154|       |
  155|      0|  return true;
  156|     32|}
  157|       |
  158|       |static CMARK_INLINE bool can_contain(cmark_node_type parent_type,
  159|     84|                                     cmark_node_type child_type) {
  160|     84|  return (parent_type == CMARK_NODE_DOCUMENT ||
  161|     84|          parent_type == CMARK_NODE_BLOCK_QUOTE ||
  162|     84|          parent_type == CMARK_NODE_ITEM ||
  163|     84|          (parent_type == CMARK_NODE_LIST && child_type == CMARK_NODE_ITEM));
  164|     84|}
  165|       |
  166|     78|static CMARK_INLINE bool accepts_lines(cmark_node_type block_type) {
  167|     78|  return (block_type == CMARK_NODE_PARAGRAPH ||
  168|     78|          block_type == CMARK_NODE_HEADING ||
  169|     78|          block_type == CMARK_NODE_CODE_BLOCK);
  170|     78|}
  171|       |
  172|     80|static CMARK_INLINE bool contains_inlines(cmark_node_type block_type) {
  173|     80|  return (block_type == CMARK_NODE_PARAGRAPH ||
  174|     80|          block_type == CMARK_NODE_HEADING);
  175|     80|}
  176|       |
  177|     40|static void add_line(cmark_chunk *ch, cmark_parser *parser) {
  178|     40|  int chars_to_tab;
  179|     40|  int i;
  180|     40|  if (parser->partially_consumed_tab) {
  181|      0|    parser->offset += 1; // skip over tab
  182|       |    // add space characters:
  183|      0|    chars_to_tab = TAB_STOP - (parser->column % TAB_STOP);
  184|      0|    for (i = 0; i < chars_to_tab; i++) {
  185|      0|      cmark_strbuf_putc(&parser->content, ' ');
  186|      0|    }
  187|      0|  }
  188|     40|  cmark_strbuf_put(&parser->content, ch->data + parser->offset,
  189|     40|                   ch->len - parser->offset);
  190|     40|}
  191|       |
  192|      0|static void remove_trailing_blank_lines(cmark_strbuf *ln) {
  193|      0|  bufsize_t i;
  194|      0|  unsigned char c;
  195|       |
  196|      0|  for (i = ln->size - 1; i >= 0; --i) {
  197|      0|    c = ln->ptr[i];
  198|       |
  199|      0|    if (c != ' ' && c != '\t' && !S_is_line_end_char(c))
  200|      0|      break;
  201|      0|  }
  202|       |
  203|      0|  if (i < 0) {
  204|      0|    cmark_strbuf_clear(ln);
  205|      0|    return;
  206|      0|  }
  207|       |
  208|      0|  for (; i < ln->size; ++i) {
  209|      0|    c = ln->ptr[i];
  210|       |
  211|      0|    if (!S_is_line_end_char(c))
  212|      0|      continue;
  213|       |
  214|      0|    cmark_strbuf_truncate(ln, i);
  215|      0|    break;
  216|      0|  }
  217|      0|}
  218|       |
  219|       |// Check to see if a node ends with a blank line, descending
  220|       |// if needed into lists and sublists.
  221|     22|static bool S_ends_with_blank_line(cmark_node *node) {
  222|     22|  if (S_last_line_checked(node)) {
  223|      0|    return(S_last_line_blank(node));
  224|     22|  } else if ((S_type(node) == CMARK_NODE_LIST ||
  225|     22|              S_type(node) == CMARK_NODE_ITEM) && node->last_child) {
  226|      0|    S_set_last_line_checked(node);
  227|      0|    return(S_ends_with_blank_line(node->last_child));
  228|     22|  } else {
  229|     22|    S_set_last_line_checked(node);
  230|     22|    return (S_last_line_blank(node));
  231|     22|  }
  232|     22|}
  233|       |
  234|       |// returns true if content remains after link defs are resolved.
  235|     32|static bool resolve_reference_link_definitions(cmark_parser *parser) {
  236|     32|  bufsize_t pos;
  237|     32|  cmark_strbuf *node_content = &parser->content;
  238|     32|  cmark_chunk chunk = {node_content->ptr, node_content->size};
  239|     32|  while (chunk.len && chunk.data[0] == '[' &&
  240|     32|         (pos = cmark_parse_reference_inline(parser->mem, &chunk,
  241|      4|                                             parser->refmap))) {
  242|       |
  243|      0|    chunk.data += pos;
  244|      0|    chunk.len -= pos;
  245|      0|  }
  246|     32|  cmark_strbuf_drop(node_content, (node_content->size - chunk.len));
  247|     32|  return !is_blank(node_content, 0);
  248|     32|}
  249|       |
  250|     80|static cmark_node *finalize(cmark_parser *parser, cmark_node *b) {
  251|     80|  bufsize_t pos;
  252|     80|  cmark_node *item;
  253|     80|  cmark_node *subitem;
  254|     80|  cmark_node *parent;
  255|     80|  bool has_content;
  256|       |
  257|     80|  parent = b->parent;
  258|     80|  assert(b->flags &
  259|     80|         CMARK_NODE__OPEN); // shouldn't call finalize on closed blocks
  260|      0|  b->flags &= ~CMARK_NODE__OPEN;
  261|       |
  262|     80|  if (parser->curline.size == 0) {
  263|       |    // end of input - line number has not been incremented
  264|      8|    b->end_line = parser->line_number;
  265|      8|    b->end_column = parser->last_line_length;
  266|     72|  } else if (S_type(b) == CMARK_NODE_DOCUMENT ||
  267|     72|             (S_type(b) == CMARK_NODE_CODE_BLOCK && b->as.code.fenced) ||
  268|     72|             (S_type(b) == CMARK_NODE_HEADING && b->as.heading.setext)) {
  269|      0|    b->end_line = parser->line_number;
  270|      0|    b->end_column = parser->curline.size;
  271|      0|    if (b->end_column && parser->curline.ptr[b->end_column - 1] == '\n')
  272|      0|      b->end_column -= 1;
  273|      0|    if (b->end_column && parser->curline.ptr[b->end_column - 1] == '\r')
  274|      0|      b->end_column -= 1;
  275|     72|  } else {
  276|     72|    b->end_line = parser->line_number - 1;
  277|     72|    b->end_column = parser->last_line_length;
  278|     72|  }
  279|       |
  280|     80|  cmark_strbuf *node_content = &parser->content;
  281|       |
  282|     80|  switch (S_type(b)) {
  283|     32|  case CMARK_NODE_PARAGRAPH:
  284|     32|  {
  285|     32|    has_content = resolve_reference_link_definitions(parser);
  286|     32|    if (!has_content) {
  287|       |      // remove blank node (former reference def)
  288|      0|      cmark_node_free(b);
  289|     32|    } else {
  290|     32|      b->len = node_content->size;
  291|     32|      b->data = cmark_strbuf_detach(node_content);
  292|     32|    }
  293|     32|    break;
  294|      0|  }
  295|       |
  296|      0|  case CMARK_NODE_CODE_BLOCK:
  297|      0|    if (!b->as.code.fenced) { // indented code
  298|      0|      remove_trailing_blank_lines(node_content);
  299|      0|      cmark_strbuf_putc(node_content, '\n');
  300|      0|    } else {
  301|       |      // first line of contents becomes info
  302|      0|      for (pos = 0; pos < node_content->size; ++pos) {
  303|      0|        if (S_is_line_end_char(node_content->ptr[pos]))
  304|      0|          break;
  305|      0|      }
  306|      0|      assert(pos < node_content->size);
  307|       |
  308|      0|      if (pos == 0) {
  309|      0|        b->as.code.info = NULL;
  310|      0|      } else {
  311|      0|        cmark_strbuf tmp = CMARK_BUF_INIT(parser->mem);
  312|      0|        houdini_unescape_html_f(&tmp, node_content->ptr, pos);
  313|      0|        cmark_strbuf_trim(&tmp);
  314|      0|        cmark_strbuf_unescape(&tmp);
  315|      0|        b->as.code.info = cmark_strbuf_detach(&tmp);
  316|      0|      }
  317|       |
  318|      0|      if (node_content->ptr[pos] == '\r')
  319|      0|        pos += 1;
  320|      0|      if (node_content->ptr[pos] == '\n')
  321|      0|        pos += 1;
  322|      0|      cmark_strbuf_drop(node_content, pos);
  323|      0|    }
  324|      0|    b->len = node_content->size;
  325|      0|    b->data = cmark_strbuf_detach(node_content);
  326|      0|    break;
  327|       |
  328|      8|  case CMARK_NODE_HEADING:
  329|      8|  case CMARK_NODE_HTML_BLOCK:
  330|      8|    b->len = node_content->size;
  331|      8|    b->data = cmark_strbuf_detach(node_content);
  332|      8|    break;
  333|       |
  334|      8|  case CMARK_NODE_LIST:      // determine tight/loose status
  335|      8|    b->as.list.tight = true; // tight by default
  336|      8|    item = b->first_child;
  337|       |
  338|     38|    while (item) {
  339|       |      // check for non-final non-empty list item ending with blank line:
  340|     30|      if (S_last_line_blank(item) && item->next) {
  341|      0|        b->as.list.tight = false;
  342|      0|        break;
  343|      0|      }
  344|       |      // recurse into children of list item, to see if there are
  345|       |      // spaces between them:
  346|     30|      subitem = item->first_child;
  347|     60|      while (subitem) {
  348|     30|        if ((item->next || subitem->next) &&
  349|     30|            S_ends_with_blank_line(subitem)) {
  350|      0|          b->as.list.tight = false;
  351|      0|          break;
  352|      0|        }
  353|     30|        subitem = subitem->next;
  354|     30|      }
  355|     30|      if (!(b->as.list.tight)) {
  356|      0|        break;
  357|      0|      }
  358|     30|      item = item->next;
  359|     30|    }
  360|       |
  361|      8|    break;
  362|       |
  363|     32|  default:
  364|     32|    break;
  365|     80|  }
  366|       |
  367|     80|  return parent;
  368|     80|}
  369|       |
  370|       |// Add a node as child of another.  Return pointer to child.
  371|       |static cmark_node *add_child(cmark_parser *parser, cmark_node *parent,
  372|     78|                             cmark_node_type block_type, int start_column) {
  373|     78|  assert(parent);
  374|       |
  375|       |  // if 'parent' isn't the kind of node that can accept this child,
  376|       |  // then back up til we hit a node that can.
  377|     84|  while (!can_contain(S_type(parent), block_type)) {
  378|      6|    parent = finalize(parser, parent);
  379|      6|  }
  380|       |
  381|     78|  cmark_node *child =
  382|     78|      make_block(parser->mem, block_type, parser->line_number, start_column);
  383|     78|  child->parent = parent;
  384|       |
  385|     78|  if (parent->last_child) {
  386|     38|    parent->last_child->next = child;
  387|     38|    child->prev = parent->last_child;
  388|     40|  } else {
  389|     40|    parent->first_child = child;
  390|     40|    child->prev = NULL;
  391|     40|  }
  392|     78|  parent->last_child = child;
  393|     78|  return child;
  394|     78|}
  395|       |
  396|       |// Walk through node and all children, recursively, parsing
  397|       |// string content into inline content where appropriate.
  398|       |static void process_inlines(cmark_mem *mem, cmark_node *root,
  399|      2|                            cmark_reference_map *refmap, int options) {
  400|      2|  cmark_iter *iter = cmark_iter_new(root);
  401|      2|  cmark_node *cur;
  402|      2|  cmark_event_type ev_type;
  403|       |
  404|    162|  while ((ev_type = cmark_iter_next(iter)) != CMARK_EVENT_DONE) {
  405|    160|    cur = cmark_iter_get_node(iter);
  406|    160|    if (ev_type == CMARK_EVENT_ENTER) {
  407|     80|      if (contains_inlines(S_type(cur))) {
  408|     40|        cmark_parse_inlines(mem, cur, refmap, options);
  409|     40|        mem->free(cur->data);
  410|     40|        cur->data = NULL;
  411|     40|        cur->len = 0;
  412|     40|      }
  413|     80|    }
  414|    160|  }
  415|       |
  416|      2|  cmark_iter_free(iter);
  417|      2|}
  418|       |
  419|       |// Attempts to parse a list item marker (bullet or enumerated).
  420|       |// On success, returns length of the marker, and populates
  421|       |// data with the details.  On failure, returns 0.
  422|       |static bufsize_t parse_list_marker(cmark_mem *mem, cmark_chunk *input,
  423|       |                                   bufsize_t pos, bool interrupts_paragraph,
  424|     78|                                   cmark_list **dataptr) {
  425|     78|  unsigned char c;
  426|     78|  bufsize_t startpos;
  427|     78|  cmark_list *data;
  428|     78|  bufsize_t i;
  429|       |
  430|     78|  startpos = pos;
  431|     78|  c = peek_at(input, pos);
  432|       |
  433|     78|  if (c == '*' || c == '-' || c == '+') {
  434|     30|    pos++;
  435|     30|    if (!cmark_isspace(peek_at(input, pos))) {
  436|      0|      return 0;
  437|      0|    }
  438|       |
  439|     30|    if (interrupts_paragraph) {
  440|      0|      i = pos;
  441|       |      // require non-blank content after list marker:
  442|      0|      while (S_is_space_or_tab(peek_at(input, i))) {
  443|      0|        i++;
  444|      0|      }
  445|      0|      if (peek_at(input, i) == '\n') {
  446|      0|        return 0;
  447|      0|      }
  448|      0|    }
  449|       |
  450|     30|    data = (cmark_list *)mem->calloc(1, sizeof(*data));
  451|     30|    data->marker_offset = 0; // will be adjusted later
  452|     30|    data->list_type = CMARK_BULLET_LIST;
  453|     30|    data->bullet_char = c;
  454|     30|    data->start = 0;
  455|     30|    data->delimiter = CMARK_NO_DELIM;
  456|     30|    data->tight = false;
  457|     48|  } else if (cmark_isdigit(c)) {
  458|     10|    int start = 0;
  459|     10|    int digits = 0;
  460|       |
  461|     20|    do {
  462|     20|      start = (10 * start) + (peek_at(input, pos) - '0');
  463|     20|      pos++;
  464|     20|      digits++;
  465|       |      // We limit to 9 digits to avoid overflow,
  466|       |      // assuming max int is 2^31 - 1
  467|       |      // This also seems to be the limit for 'start' in some browsers.
  468|     20|    } while (digits < 9 && cmark_isdigit(peek_at(input, pos)));
  469|       |
  470|     10|    if (interrupts_paragraph && start != 1) {
  471|      0|      return 0;
  472|      0|    }
  473|     10|    c = peek_at(input, pos);
  474|     10|    if (c == '.' || c == ')') {
  475|     10|      pos++;
  476|     10|      if (!cmark_isspace(peek_at(input, pos))) {
  477|     10|        return 0;
  478|     10|      }
  479|      0|      if (interrupts_paragraph) {
  480|       |        // require non-blank content after list marker:
  481|      0|        i = pos;
  482|      0|        while (S_is_space_or_tab(peek_at(input, i))) {
  483|      0|          i++;
  484|      0|        }
  485|      0|        if (S_is_line_end_char(peek_at(input, i))) {
  486|      0|          return 0;
  487|      0|        }
  488|      0|      }
  489|       |
  490|      0|      data = (cmark_list *)mem->calloc(1, sizeof(*data));
  491|      0|      data->marker_offset = 0; // will be adjusted later
  492|      0|      data->list_type = CMARK_ORDERED_LIST;
  493|      0|      data->bullet_char = 0;
  494|      0|      data->start = start;
  495|      0|      data->delimiter = (c == '.' ? CMARK_PERIOD_DELIM : CMARK_PAREN_DELIM);
  496|      0|      data->tight = false;
  497|      0|    } else {
  498|      0|      return 0;
  499|      0|    }
  500|     38|  } else {
  501|     38|    return 0;
  502|     38|  }
  503|       |
  504|     30|  *dataptr = data;
  505|     30|  return (pos - startpos);
  506|     78|}
  507|       |
  508|       |// Return 1 if list item belongs in list, else 0.
  509|     22|static int lists_match(cmark_list *list_data, cmark_list *item_data) {
  510|     22|  return (list_data->list_type == item_data->list_type &&
  511|     22|          list_data->delimiter == item_data->delimiter &&
  512|       |          // list_data->marker_offset == item_data.marker_offset &&
  513|     22|          list_data->bullet_char == item_data->bullet_char);
  514|     22|}
  515|       |
  516|      2|static cmark_node *finalize_document(cmark_parser *parser) {
  517|      8|  while (parser->current != parser->root) {
  518|      6|    parser->current = finalize(parser, parser->current);
  519|      6|  }
  520|       |
  521|      2|  finalize(parser, parser->root);
  522|       |
  523|       |  // Limit total size of extra content created from reference links to
  524|       |  // document size to avoid superlinear growth. Always allow 100KB.
  525|      2|  if (parser->total_size > 100000)
  526|      0|    parser->refmap->max_ref_size = parser->total_size;
  527|      2|  else
  528|      2|    parser->refmap->max_ref_size = 100000;
  529|       |
  530|      2|  process_inlines(parser->mem, parser->root, parser->refmap, parser->options);
  531|       |
  532|      2|  cmark_strbuf_free(&parser->content);
  533|       |
  534|      2|  return parser->root;
  535|      2|}
  536|       |
  537|      0|cmark_node *cmark_parse_file(FILE *f, int options) {
  538|      0|  unsigned char buffer[4096];
  539|      0|  cmark_parser *parser = cmark_parser_new(options);
  540|      0|  size_t bytes;
  541|      0|  cmark_node *document;
  542|       |
  543|      0|  while ((bytes = fread(buffer, 1, sizeof(buffer), f)) > 0) {
  544|      0|    bool eof = bytes < sizeof(buffer);
  545|      0|    S_parser_feed(parser, buffer, bytes, eof);
  546|      0|    if (eof) {
  547|      0|      break;
  548|      0|    }
  549|      0|  }
  550|       |
  551|      0|  document = cmark_parser_finish(parser);
  552|      0|  cmark_parser_free(parser);
  553|      0|  return document;
  554|      0|}
  555|       |
  556|      2|cmark_node *cmark_parse_document(const char *buffer, size_t len, int options) {
  557|      2|  cmark_parser *parser = cmark_parser_new(options);
  558|      2|  cmark_node *document;
  559|       |
  560|      2|  S_parser_feed(parser, (const unsigned char *)buffer, len, true);
  561|       |
  562|      2|  document = cmark_parser_finish(parser);
  563|      2|  cmark_parser_free(parser);
  564|      2|  return document;
  565|      2|}
  566|       |
  567|      0|void cmark_parser_feed(cmark_parser *parser, const char *buffer, size_t len) {
  568|      0|  S_parser_feed(parser, (const unsigned char *)buffer, len, false);
  569|      0|}
  570|       |
  571|       |static void S_parser_feed(cmark_parser *parser, const unsigned char *buffer,
  572|      2|                          size_t len, bool eof) {
  573|      2|  const unsigned char *end = buffer + len;
  574|      2|  static const uint8_t repl[] = {239, 191, 189};
  575|       |
  576|      2|  if (len > UINT_MAX - parser->total_size)
  577|      0|    parser->total_size = UINT_MAX;
  578|      2|  else
  579|      2|    parser->total_size += len;
  580|       |
  581|       |  // Skip UTF-8 BOM if present; see #334
  582|      2|  if (parser->line_number == 0 && parser->column == 0 && len >= 3 &&
  583|      2|      *buffer == 0xEF && *(buffer + 1) == 0xBB &&
  584|      2|      *(buffer + 2) == 0xBF) {
  585|      0|    buffer += 3;
  586|      2|  } else if (parser->last_buffer_ended_with_cr && *buffer == '\n') {
  587|       |    // skip NL if last buffer ended with CR ; see #117
  588|      0|    buffer++;
  589|      0|  }
  590|       |
  591|      2|  parser->last_buffer_ended_with_cr = false;
  592|     58|  while (buffer < end) {
  593|     56|    const unsigned char *eol;
  594|     56|    bufsize_t chunk_len;
  595|     56|    bool process = false;
  596|  3.01k|    for (eol = buffer; eol < end; ++eol) {
  597|  3.01k|      if (S_is_line_end_char(*eol)) {
  598|     56|        process = true;
  599|     56|        break;
  600|     56|      }
  601|  2.96k|      if (*eol == '\0' && eol < end) {
  602|      0|        break;
  603|      0|      }
  604|  2.96k|    }
  605|     56|    if (eol >= end && eof) {
  606|      0|      process = true;
  607|      0|    }
  608|       |
  609|     56|    chunk_len = (eol - buffer);
  610|     56|    if (process) {
  611|     56|      if (parser->linebuf.size > 0) {
  612|      0|        cmark_strbuf_put(&parser->linebuf, buffer, chunk_len);
  613|      0|        S_process_line(parser, parser->linebuf.ptr, parser->linebuf.size);
  614|      0|        cmark_strbuf_clear(&parser->linebuf);
  615|     56|      } else {
  616|     56|        S_process_line(parser, buffer, chunk_len);
  617|     56|      }
  618|     56|    } else {
  619|      0|      if (eol < end && *eol == '\0') {
  620|       |        // omit NULL byte
  621|      0|        cmark_strbuf_put(&parser->linebuf, buffer, chunk_len);
  622|       |        // add replacement character
  623|      0|        cmark_strbuf_put(&parser->linebuf, repl, 3);
  624|      0|      } else {
  625|      0|        cmark_strbuf_put(&parser->linebuf, buffer, chunk_len);
  626|      0|      }
  627|      0|    }
  628|       |
  629|     56|    buffer += chunk_len;
  630|     56|    if (buffer < end) {
  631|     56|      if (*buffer == '\0') {
  632|       |        // skip over NULL
  633|      0|        buffer++;
  634|     56|      } else {
  635|       |        // skip over line ending characters
  636|     56|        if (*buffer == '\r') {
  637|      0|          buffer++;
  638|      0|          if (buffer == end)
  639|      0|            parser->last_buffer_ended_with_cr = true;
  640|      0|        }
  641|     56|        if (buffer < end && *buffer == '\n')
  642|     56|          buffer++;
  643|     56|      }
  644|     56|    }
  645|     56|  }
  646|      2|}
  647|       |
  648|      8|static void chop_trailing_hashtags(cmark_chunk *ch) {
  649|      8|  bufsize_t n, orig_n;
  650|       |
  651|      8|  cmark_chunk_rtrim(ch);
  652|      8|  orig_n = n = ch->len - 1;
  653|       |
  654|       |  // if string ends in space followed by #s, remove these:
  655|      8|  while (n >= 0 && peek_at(ch, n) == '#')
  656|      0|    n--;
  657|       |
  658|       |  // Check for a space before the final #s:
  659|      8|  if (n != orig_n && n >= 0 && S_is_space_or_tab(peek_at(ch, n))) {
  660|      0|    ch->len = n;
  661|      0|    cmark_chunk_rtrim(ch);
  662|      0|  }
  663|      8|}
  664|       |
  665|       |// Check for thematic break.  On failure, return 0 and update
  666|       |// thematic_break_kill_pos with the index at which the
  667|       |// parse fails.  On success, return length of match.
  668|       |// "...three or more hyphens, asterisks,
  669|       |// or underscores on a line by themselves. If you wish, you may use
  670|       |// spaces between the hyphens or asterisks."
  671|       |static int S_scan_thematic_break(cmark_parser *parser, cmark_chunk *input,
  672|     78|                                 bufsize_t offset) {
  673|     78|  bufsize_t i;
  674|     78|  char c;
  675|     78|  char nextc = '\0';
  676|     78|  int count;
  677|     78|  i = offset;
  678|     78|  c = peek_at(input, i);
  679|     78|  if (!(c == '*' || c == '_' || c == '-')) {
  680|     48|    parser->thematic_break_kill_pos = i;
  681|     48|    return 0;
  682|     48|  }
  683|     30|  count = 1;
  684|     60|  while ((nextc = peek_at(input, ++i))) {
  685|     60|    if (nextc == c) {
  686|      0|      count++;
  687|     60|    } else if (nextc != ' ' && nextc != '\t') {
  688|     30|      break;
  689|     30|    }
  690|     60|  }
  691|     30|  if (count >= 3 && (nextc == '\r' || nextc == '\n')) {
  692|      0|    return (i - offset) + 1;
  693|     30|  } else {
  694|     30|    parser->thematic_break_kill_pos = i;
  695|     30|    return 0;
  696|     30|  }
  697|     30|}
  698|       |
  699|       |// Find first nonspace character from current offset, setting
  700|       |// parser->first_nonspace, parser->first_nonspace_column,
  701|       |// parser->indent, and parser->blank. Does not advance parser->offset.
  702|    226|static void S_find_first_nonspace(cmark_parser *parser, cmark_chunk *input) {
  703|    226|  char c;
  704|    226|  int chars_to_tab = TAB_STOP - (parser->column % TAB_STOP);
  705|       |
  706|    226|  if (parser->first_nonspace <= parser->offset) {
  707|    226|    parser->first_nonspace = parser->offset;
  708|    226|    parser->first_nonspace_column = parser->column;
  709|    226|    while ((c = peek_at(input, parser->first_nonspace))) {
  710|    226|      if (c == ' ') {
  711|      0|        parser->first_nonspace += 1;
  712|      0|        parser->first_nonspace_column += 1;
  713|      0|        chars_to_tab = chars_to_tab - 1;
  714|      0|        if (chars_to_tab == 0) {
  715|      0|          chars_to_tab = TAB_STOP;
  716|      0|        }
  717|    226|      } else if (c == '\t') {
  718|      0|        parser->first_nonspace += 1;
  719|      0|        parser->first_nonspace_column += chars_to_tab;
  720|      0|        chars_to_tab = TAB_STOP;
  721|    226|      } else {
  722|    226|        break;
  723|    226|      }
  724|    226|    }
  725|    226|  }
  726|       |
  727|    226|  parser->indent = parser->first_nonspace_column - parser->column;
  728|    226|  parser->blank = S_is_line_end_char(peek_at(input, parser->first_nonspace));
  729|    226|}
  730|       |
  731|       |// Advance parser->offset and parser->column.  parser->offset is the
  732|       |// byte position in input; parser->column is a virtual column number
  733|       |// that takes into account tabs. (Multibyte characters are not taken
  734|       |// into account, because the Markdown line prefixes we are interested in
  735|       |// analyzing are entirely ASCII.)  The count parameter indicates
  736|       |// how far to advance the offset.  If columns is true, then count
  737|       |// indicates a number of columns; otherwise, a number of bytes.
  738|       |// If advancing a certain number of columns partially consumes
  739|       |// a tab character, parser->partially_consumed_tab is set to true.
  740|       |static void S_advance_offset(cmark_parser *parser, cmark_chunk *input,
  741|    114|                             bufsize_t count, bool columns) {
  742|    114|  char c;
  743|    114|  int chars_to_tab;
  744|    114|  int chars_to_advance;
  745|    198|  while (count > 0 && (c = peek_at(input, parser->offset))) {
  746|     84|    if (c == '\t') {
  747|      0|      chars_to_tab = TAB_STOP - (parser->column % TAB_STOP);
  748|      0|      if (columns) {
  749|      0|        parser->partially_consumed_tab = chars_to_tab > count;
  750|      0|        chars_to_advance = MIN(count, chars_to_tab);
  751|      0|        parser->column += chars_to_advance;
  752|      0|        parser->offset += (parser->partially_consumed_tab ? 0 : 1);
  753|      0|        count -= chars_to_advance;
  754|      0|      } else {
  755|      0|        parser->partially_consumed_tab = false;
  756|      0|        parser->column += chars_to_tab;
  757|      0|        parser->offset += 1;
  758|      0|        count -= 1;
  759|      0|      }
  760|     84|    } else {
  761|     84|      parser->partially_consumed_tab = false;
  762|     84|      parser->offset += 1;
  763|     84|      parser->column += 1; // assume ascii; block starts are ascii
  764|     84|      count -= 1;
  765|     84|    }
  766|     84|  }
  767|    114|}
  768|       |
  769|     96|static bool S_last_child_is_open(cmark_node *container) {
  770|     96|  return container->last_child &&
  771|     96|         (container->last_child->flags & CMARK_NODE__OPEN);
  772|     96|}
  773|       |
  774|      0|static bool parse_block_quote_prefix(cmark_parser *parser, cmark_chunk *input) {
  775|      0|  bool res = false;
  776|      0|  bufsize_t matched = 0;
  777|       |
  778|      0|  matched =
  779|      0|      parser->indent <= 3 && peek_at(input, parser->first_nonspace) == '>';
  780|      0|  if (matched) {
  781|       |
  782|      0|    S_advance_offset(parser, input, parser->indent + 1, true);
  783|       |
  784|      0|    if (S_is_space_or_tab(peek_at(input, parser->offset))) {
  785|      0|      S_advance_offset(parser, input, 1, true);
  786|      0|    }
  787|       |
  788|      0|    res = true;
  789|      0|  }
  790|      0|  return res;
  791|      0|}
  792|       |
  793|       |static bool parse_node_item_prefix(cmark_parser *parser, cmark_chunk *input,
  794|     34|                                   cmark_node *container) {
  795|     34|  bool res = false;
  796|       |
  797|     34|  if (parser->indent >=
  798|     34|      container->as.list.marker_offset + container->as.list.padding) {
  799|      0|    S_advance_offset(parser, input, container->as.list.marker_offset +
  800|      0|                                        container->as.list.padding,
  801|      0|                     true);
  802|      0|    res = true;
  803|     34|  } else if (parser->blank && container->first_child != NULL) {
  804|       |    // if container->first_child is NULL, then the opening line
  805|       |    // of the list item was blank after the list marker; in this
  806|       |    // case, we are done with the list item.
  807|      6|    S_advance_offset(parser, input, parser->first_nonspace - parser->offset,
  808|      6|                     false);
  809|      6|    res = true;
  810|      6|  }
  811|     34|  return res;
  812|     34|}
  813|       |
  814|       |static bool parse_code_block_prefix(cmark_parser *parser, cmark_chunk *input,
  815|       |                                    cmark_node *container,
  816|      0|                                    bool *should_continue) {
  817|      0|  bool res = false;
  818|       |
  819|      0|  if (!container->as.code.fenced) { // indented
  820|      0|    if (parser->indent >= CODE_INDENT) {
  821|      0|      S_advance_offset(parser, input, CODE_INDENT, true);
  822|      0|      res = true;
  823|      0|    } else if (parser->blank) {
  824|      0|      S_advance_offset(parser, input, parser->first_nonspace - parser->offset,
  825|      0|                       false);
  826|      0|      res = true;
  827|      0|    }
  828|      0|  } else { // fenced
  829|      0|    bufsize_t matched = 0;
  830|       |
  831|      0|    if (parser->indent <= 3 && (peek_at(input, parser->first_nonspace) ==
  832|      0|                                container->as.code.fence_char)) {
  833|      0|      matched = scan_close_code_fence(input, parser->first_nonspace);
  834|      0|    }
  835|       |
  836|      0|    if (matched >= container->as.code.fence_length) {
  837|       |      // closing fence - and since we're at
  838|       |      // the end of a line, we can stop processing it:
  839|      0|      *should_continue = false;
  840|      0|      S_advance_offset(parser, input, matched, false);
  841|      0|      parser->current = finalize(parser, container);
  842|      0|    } else {
  843|       |      // skip opt. spaces of fence parser->offset
  844|      0|      int i = container->as.code.fence_offset;
  845|       |
  846|      0|      while (i > 0 && S_is_space_or_tab(peek_at(input, parser->offset))) {
  847|      0|        S_advance_offset(parser, input, 1, true);
  848|      0|        i--;
  849|      0|      }
  850|      0|      res = true;
  851|      0|    }
  852|      0|  }
  853|       |
  854|      0|  return res;
  855|      0|}
  856|       |
  857|       |static bool parse_html_block_prefix(cmark_parser *parser,
  858|      0|                                    cmark_node *container) {
  859|      0|  bool res = false;
  860|      0|  int html_block_type = container->as.html_block_type;
  861|       |
  862|      0|  assert(html_block_type >= 1 && html_block_type <= 7);
  863|      0|  switch (html_block_type) {
  864|      0|  case 1:
  865|      0|  case 2:
  866|      0|  case 3:
  867|      0|  case 4:
  868|      0|  case 5:
  869|       |    // these types of blocks can accept blanks
  870|      0|    res = true;
  871|      0|    break;
  872|      0|  case 6:
  873|      0|  case 7:
  874|      0|    res = !parser->blank;
  875|      0|    break;
  876|      0|  }
  877|       |
  878|      0|  return res;
  879|      0|}
  880|       |
  881|       |/**
  882|       | * For each containing node, try to parse the associated line start.
  883|       | *
  884|       | * Will not close unmatched blocks, as we may have a lazy continuation
  885|       | * line -> http://spec.commonmark.org/0.24/#lazy-continuation-line
  886|       | *
  887|       | * Returns: The last matching node, or NULL
  888|       | */
  889|       |static cmark_node *check_open_blocks(cmark_parser *parser, cmark_chunk *input,
  890|     56|                                     bool *all_matched) {
  891|     56|  bool should_continue = true;
  892|     56|  *all_matched = false;
  893|     56|  cmark_node *container = parser->root;
  894|     56|  cmark_node_type cont_type;
  895|       |
  896|     96|  while (S_last_child_is_open(container)) {
  897|     84|    container = container->last_child;
  898|     84|    cont_type = S_type(container);
  899|       |
  900|     84|    S_find_first_nonspace(parser, input);
  901|       |
  902|     84|    switch (cont_type) {
  903|      0|    case CMARK_NODE_BLOCK_QUOTE:
  904|      0|      if (!parse_block_quote_prefix(parser, input))
  905|      0|        goto done;
  906|      0|      break;
  907|     34|    case CMARK_NODE_ITEM:
  908|     34|      if (!parse_node_item_prefix(parser, input, container))
  909|     28|        goto done;
  910|      6|      break;
  911|      6|    case CMARK_NODE_CODE_BLOCK:
  912|      0|      if (!parse_code_block_prefix(parser, input, container, &should_continue))
  913|      0|        goto done;
  914|      0|      break;
  915|      8|    case CMARK_NODE_HEADING:
  916|       |      // a heading can never contain more than one line
  917|      8|      goto done;
  918|      0|    case CMARK_NODE_HTML_BLOCK:
  919|      0|      if (!parse_html_block_prefix(parser, container))
  920|      0|        goto done;
  921|      0|      break;
  922|      8|    case CMARK_NODE_PARAGRAPH:
  923|      8|      if (parser->blank)
  924|      8|        goto done;
  925|      0|      break;
  926|     34|    default:
  927|     34|      break;
  928|     84|    }
  929|     84|  }
  930|       |
  931|     12|  *all_matched = true;
  932|       |
  933|     56|done:
  934|     56|  if (!*all_matched) {
  935|     44|    container = container->parent; // back up to last matching node
  936|     44|  }
  937|       |
  938|     56|  if (!should_continue) {
  939|      0|    container = NULL;
  940|      0|  }
  941|       |
  942|     56|  return container;
  943|     12|}
  944|       |
  945|       |static void open_new_blocks(cmark_parser *parser, cmark_node **container,
  946|     56|                            cmark_chunk *input, bool all_matched) {
  947|     56|  bool indented;
  948|     56|  cmark_list *data = NULL;
  949|     56|  bool maybe_lazy = S_type(parser->current) == CMARK_NODE_PARAGRAPH;
  950|     56|  cmark_node_type cont_type = S_type(*container);
  951|     56|  bufsize_t matched = 0;
  952|     56|  int lev = 0;
  953|     56|  bool save_partially_consumed_tab;
  954|     56|  bool has_content;
  955|     56|  int save_offset;
  956|     56|  int save_column;
  957|       |
  958|     86|  while (cont_type != CMARK_NODE_CODE_BLOCK &&
  959|     86|         cont_type != CMARK_NODE_HTML_BLOCK) {
  960|       |
  961|     86|    S_find_first_nonspace(parser, input);
  962|     86|    indented = parser->indent >= CODE_INDENT;
  963|       |
  964|     86|    if (!indented && peek_at(input, parser->first_nonspace) == '>') {
  965|       |
  966|      0|      bufsize_t blockquote_startpos = parser->first_nonspace;
  967|       |
  968|      0|      S_advance_offset(parser, input,
  969|      0|                       parser->first_nonspace + 1 - parser->offset, false);
  970|       |      // optional following character
  971|      0|      if (S_is_space_or_tab(peek_at(input, parser->offset))) {
  972|      0|        S_advance_offset(parser, input, 1, true);
  973|      0|      }
  974|      0|      *container = add_child(parser, *container, CMARK_NODE_BLOCK_QUOTE,
  975|      0|                             blockquote_startpos + 1);
  976|       |
  977|     86|    } else if (!indented && (matched = scan_atx_heading_start(
  978|     86|                                 input, parser->first_nonspace))) {
  979|      8|      bufsize_t hashpos;
  980|      8|      int level = 0;
  981|      8|      bufsize_t heading_startpos = parser->first_nonspace;
  982|       |
  983|      8|      S_advance_offset(parser, input,
  984|      8|                       parser->first_nonspace + matched - parser->offset,
  985|      8|                       false);
  986|      8|      *container = add_child(parser, *container, CMARK_NODE_HEADING,
  987|      8|                             heading_startpos + 1);
  988|       |
  989|      8|      hashpos = cmark_chunk_strchr(input, '#', parser->first_nonspace);
  990|       |
  991|     24|      while (peek_at(input, hashpos) == '#') {
  992|     16|        level++;
  993|     16|        hashpos++;
  994|     16|      }
  995|       |
  996|      8|      (*container)->as.heading.level = level;
  997|      8|      (*container)->as.heading.setext = false;
  998|      8|      (*container)->internal_offset = matched;
  999|       |
 1000|     78|    } else if (!indented && (matched = scan_open_code_fence(
 1001|     78|                                 input, parser->first_nonspace))) {
 1002|      0|      *container = add_child(parser, *container, CMARK_NODE_CODE_BLOCK,
 1003|      0|                             parser->first_nonspace + 1);
 1004|      0|      (*container)->as.code.fenced = true;
 1005|      0|      (*container)->as.code.fence_char = peek_at(input, parser->first_nonspace);
 1006|      0|      (*container)->as.code.fence_length = (matched > 255) ? 255 : matched;
 1007|      0|      (*container)->as.code.fence_offset =
 1008|      0|          (int8_t)(parser->first_nonspace - parser->offset);
 1009|      0|      (*container)->as.code.info = NULL;
 1010|      0|      S_advance_offset(parser, input,
 1011|      0|                       parser->first_nonspace + matched - parser->offset,
 1012|      0|                       false);
 1013|       |
 1014|     78|    } else if (!indented && ((matched = scan_html_block_start(
 1015|     78|                                  input, parser->first_nonspace)) ||
 1016|     78|                             (cont_type != CMARK_NODE_PARAGRAPH &&
 1017|     78|                              !maybe_lazy &&
 1018|     78|                              (matched = scan_html_block_start_7(
 1019|     48|                                   input, parser->first_nonspace))))) {
 1020|      0|      *container = add_child(parser, *container, CMARK_NODE_HTML_BLOCK,
 1021|      0|                             parser->first_nonspace + 1);
 1022|      0|      (*container)->as.html_block_type = matched;
 1023|       |      // note, we don't adjust parser->offset because the tag is part of the
 1024|       |      // text
 1025|     78|    } else if (!indented && cont_type == CMARK_NODE_PARAGRAPH &&
 1026|     78|               (lev =
 1027|      0|                    scan_setext_heading_line(input, parser->first_nonspace))) {
 1028|       |      // finalize paragraph, resolving reference links
 1029|      0|      has_content = resolve_reference_link_definitions(parser);
 1030|       |
 1031|      0|      if (has_content) {
 1032|       |
 1033|      0|        (*container)->type = (uint16_t)CMARK_NODE_HEADING;
 1034|      0|        (*container)->as.heading.level = lev;
 1035|      0|        (*container)->as.heading.setext = true;
 1036|      0|        S_advance_offset(parser, input, input->len - 1 - parser->offset, false);
 1037|      0|      }
 1038|     78|    } else if (!indented &&
 1039|     78|               !(cont_type == CMARK_NODE_PARAGRAPH && !all_matched) &&
 1040|     78|               (parser->thematic_break_kill_pos <= parser->first_nonspace) &&
 1041|     78|               S_scan_thematic_break(parser, input, parser->first_nonspace)) {
 1042|       |      // it's only now that we know the line is not part of a setext heading:
 1043|      0|      *container = add_child(parser, *container, CMARK_NODE_THEMATIC_BREAK,
 1044|      0|                             parser->first_nonspace + 1);
 1045|      0|      S_advance_offset(parser, input, input->len - 1 - parser->offset, false);
 1046|     78|    } else if ((!indented || cont_type == CMARK_NODE_LIST) &&
 1047|     78|               parser->indent < 4 &&
 1048|     78|               (matched = parse_list_marker(
 1049|     78|                    parser->mem, input, parser->first_nonspace,
 1050|     78|                    (*container)->type == CMARK_NODE_PARAGRAPH, &data))) {
 1051|       |
 1052|       |      // Note that we can have new list items starting with >= 4
 1053|       |      // spaces indent, as long as the list container is still open.
 1054|     30|      int i = 0;
 1055|       |
 1056|       |      // compute padding:
 1057|     30|      S_advance_offset(parser, input,
 1058|     30|                       parser->first_nonspace + matched - parser->offset,
 1059|     30|                       false);
 1060|       |
 1061|     30|      save_partially_consumed_tab = parser->partially_consumed_tab;
 1062|     30|      save_offset = parser->offset;
 1063|     30|      save_column = parser->column;
 1064|       |
 1065|     60|      while (parser->column - save_column <= 5 &&
 1066|     60|             S_is_space_or_tab(peek_at(input, parser->offset))) {
 1067|     30|        S_advance_offset(parser, input, 1, true);
 1068|     30|      }
 1069|       |
 1070|     30|      i = parser->column - save_column;
 1071|     30|      if (i >= 5 || i < 1 ||
 1072|       |          // only spaces after list marker:
 1073|     30|          S_is_line_end_char(peek_at(input, parser->offset))) {
 1074|      0|        data->padding = matched + 1;
 1075|      0|        parser->offset = save_offset;
 1076|      0|        parser->column = save_column;
 1077|      0|        parser->partially_consumed_tab = save_partially_consumed_tab;
 1078|      0|        if (i > 0) {
 1079|      0|          S_advance_offset(parser, input, 1, true);
 1080|      0|        }
 1081|     30|      } else {
 1082|     30|        data->padding = matched + i;
 1083|     30|      }
 1084|       |
 1085|       |      // check container; if it's a list, see if this list item
 1086|       |      // can continue the list; otherwise, create a list container.
 1087|       |
 1088|     30|      data->marker_offset = parser->indent;
 1089|       |
 1090|     30|      if (cont_type != CMARK_NODE_LIST ||
 1091|     30|          !lists_match(&((*container)->as.list), data)) {
 1092|      8|        *container = add_child(parser, *container, CMARK_NODE_LIST,
 1093|      8|                               parser->first_nonspace + 1);
 1094|       |
 1095|      8|        memcpy(&((*container)->as.list), data, sizeof(*data));
 1096|      8|      }
 1097|       |
 1098|       |      // add the list item
 1099|     30|      *container = add_child(parser, *container, CMARK_NODE_ITEM,
 1100|     30|                             parser->first_nonspace + 1);
 1101|       |      /* TODO: static */
 1102|     30|      memcpy(&((*container)->as.list), data, sizeof(*data));
 1103|     30|      parser->mem->free(data);
 1104|     48|    } else if (indented && !maybe_lazy && !parser->blank) {
 1105|      0|      S_advance_offset(parser, input, CODE_INDENT, true);
 1106|      0|      *container = add_child(parser, *container, CMARK_NODE_CODE_BLOCK,
 1107|      0|                             parser->offset + 1);
 1108|      0|      (*container)->as.code.fenced = false;
 1109|      0|      (*container)->as.code.fence_char = 0;
 1110|      0|      (*container)->as.code.fence_length = 0;
 1111|      0|      (*container)->as.code.fence_offset = 0;
 1112|      0|      (*container)->as.code.info = NULL;
 1113|       |
 1114|     48|    } else {
 1115|     48|      break;
 1116|     48|    }
 1117|       |
 1118|     38|    if (accepts_lines(S_type(*container))) {
 1119|       |      // if it's a line container, it can't contain other containers
 1120|      8|      break;
 1121|      8|    }
 1122|       |
 1123|     30|    cont_type = S_type(*container);
 1124|     30|    maybe_lazy = false;
 1125|     30|  }
 1126|     56|}
 1127|       |
 1128|       |static void add_text_to_container(cmark_parser *parser, cmark_node *container,
 1129|       |                                  cmark_node *last_matched_container,
 1130|     56|                                  cmark_chunk *input) {
 1131|     56|  cmark_node *tmp;
 1132|       |  // what remains at parser->offset is a text line.  add the text to the
 1133|       |  // appropriate container.
 1134|       |
 1135|     56|  S_find_first_nonspace(parser, input);
 1136|       |
 1137|     56|  if (parser->blank && container->last_child)
 1138|     16|    S_set_last_line_blank(container->last_child, true);
 1139|       |
 1140|       |  // block quote lines are never blank as they start with >
 1141|       |  // and we don't count blanks in fenced code for purposes of tight/loose
 1142|       |  // lists or breaking out of lists.  we also don't set last_line_blank
 1143|       |  // on an empty list item.
 1144|     56|  const cmark_node_type ctype = S_type(container);
 1145|     56|  const bool last_line_blank =
 1146|     56|      (parser->blank && ctype != CMARK_NODE_BLOCK_QUOTE &&
 1147|     56|       ctype != CMARK_NODE_HEADING && ctype != CMARK_NODE_THEMATIC_BREAK &&
 1148|     56|       !(ctype == CMARK_NODE_CODE_BLOCK && container->as.code.fenced) &&
 1149|     56|       !(ctype == CMARK_NODE_ITEM && container->first_child == NULL &&
 1150|     16|         container->start_line == parser->line_number));
 1151|       |
 1152|     56|  S_set_last_line_blank(container, last_line_blank);
 1153|       |
 1154|     56|  tmp = container;
 1155|    136|  while (tmp->parent) {
 1156|     80|    S_set_last_line_blank(tmp->parent, false);
 1157|     80|    tmp = tmp->parent;
 1158|     80|  }
 1159|       |
 1160|       |  // If the last line processed belonged to a paragraph node,
 1161|       |  // and we didn't match all of the line prefixes for the open containers,
 1162|       |  // and we didn't start any new containers,
 1163|       |  // and the line isn't blank,
 1164|       |  // then treat this as a "lazy continuation line" and add it to
 1165|       |  // the open paragraph.
 1166|     56|  if (parser->current != last_matched_container &&
 1167|     56|      container == last_matched_container && !parser->blank &&
 1168|     56|      S_type(parser->current) == CMARK_NODE_PARAGRAPH) {
 1169|      0|    add_line(input, parser);
 1170|     56|  } else { // not a lazy continuation
 1171|       |    // Finalize any blocks that were not matched and set cur to container:
 1172|    122|    while (parser->current != last_matched_container) {
 1173|     66|      parser->current = finalize(parser, parser->current);
 1174|     66|      assert(parser->current != NULL);
 1175|     66|    }
 1176|       |
 1177|     56|    if (S_type(container) == CMARK_NODE_CODE_BLOCK) {
 1178|      0|      add_line(input, parser);
 1179|     56|    } else if (S_type(container) == CMARK_NODE_HTML_BLOCK) {
 1180|      0|      add_line(input, parser);
 1181|       |
 1182|      0|      int matches_end_condition;
 1183|      0|      switch (container->as.html_block_type) {
 1184|      0|      case 1:
 1185|       |        // </script>, </style>, </textarea>, </pre>
 1186|      0|        matches_end_condition =
 1187|      0|            scan_html_block_end_1(input, parser->first_nonspace);
 1188|      0|        break;
 1189|      0|      case 2:
 1190|       |        // -->
 1191|      0|        matches_end_condition =
 1192|      0|            scan_html_block_end_2(input, parser->first_nonspace);
 1193|      0|        break;
 1194|      0|      case 3:
 1195|       |        // ?>
 1196|      0|        matches_end_condition =
 1197|      0|            scan_html_block_end_3(input, parser->first_nonspace);
 1198|      0|        break;
 1199|      0|      case 4:
 1200|       |        // >
 1201|      0|        matches_end_condition =
 1202|      0|            scan_html_block_end_4(input, parser->first_nonspace);
 1203|      0|        break;
 1204|      0|      case 5:
 1205|       |        // ]]>
 1206|      0|        matches_end_condition =
 1207|      0|            scan_html_block_end_5(input, parser->first_nonspace);
 1208|      0|        break;
 1209|      0|      default:
 1210|      0|        matches_end_condition = 0;
 1211|      0|        break;
 1212|      0|      }
 1213|       |
 1214|      0|      if (matches_end_condition) {
 1215|      0|        container = finalize(parser, container);
 1216|      0|        assert(parser->current != NULL);
 1217|      0|      }
 1218|     56|    } else if (parser->blank) {
 1219|       |      // ??? do nothing
 1220|     40|    } else if (accepts_lines(S_type(container))) {
 1221|      8|      if (S_type(container) == CMARK_NODE_HEADING &&
 1222|      8|          container->as.heading.setext == false) {
 1223|      8|        chop_trailing_hashtags(input);
 1224|      8|      }
 1225|      8|      S_advance_offset(parser, input, parser->first_nonspace - parser->offset,
 1226|      8|                       false);
 1227|      8|      add_line(input, parser);
 1228|     32|    } else {
 1229|       |      // create paragraph container for line
 1230|     32|      container = add_child(parser, container, CMARK_NODE_PARAGRAPH,
 1231|     32|                            parser->first_nonspace + 1);
 1232|     32|      S_advance_offset(parser, input, parser->first_nonspace - parser->offset,
 1233|     32|                       false);
 1234|     32|      add_line(input, parser);
 1235|     32|    }
 1236|       |
 1237|     56|    parser->current = container;
 1238|     56|  }
 1239|     56|}
 1240|       |
 1241|       |/* See http://spec.commonmark.org/0.24/#phase-1-block-structure */
 1242|       |static void S_process_line(cmark_parser *parser, const unsigned char *buffer,
 1243|     56|                           bufsize_t bytes) {
 1244|     56|  cmark_node *last_matched_container;
 1245|     56|  bool all_matched = true;
 1246|     56|  cmark_node *container;
 1247|     56|  cmark_chunk input;
 1248|       |
 1249|     56|  if (parser->options & CMARK_OPT_VALIDATE_UTF8)
 1250|      0|    cmark_utf8proc_check(&parser->curline, buffer, bytes);
 1251|     56|  else
 1252|     56|    cmark_strbuf_put(&parser->curline, buffer, bytes);
 1253|       |
 1254|     56|  bytes = parser->curline.size;
 1255|       |
 1256|       |  // ensure line ends with a newline:
 1257|     56|  if (bytes == 0 || !S_is_line_end_char(parser->curline.ptr[bytes - 1]))
 1258|     56|    cmark_strbuf_putc(&parser->curline, '\n');
 1259|       |
 1260|     56|  parser->offset = 0;
 1261|     56|  parser->column = 0;
 1262|     56|  parser->first_nonspace = 0;
 1263|     56|  parser->first_nonspace_column = 0;
 1264|     56|  parser->thematic_break_kill_pos = 0;
 1265|     56|  parser->indent = 0;
 1266|     56|  parser->blank = false;
 1267|     56|  parser->partially_consumed_tab = false;
 1268|       |
 1269|     56|  input.data = parser->curline.ptr;
 1270|     56|  input.len = parser->curline.size;
 1271|       |
 1272|     56|  parser->line_number++;
 1273|       |
 1274|     56|  last_matched_container = check_open_blocks(parser, &input, &all_matched);
 1275|       |
 1276|     56|  if (!last_matched_container)
 1277|      0|    goto finished;
 1278|       |
 1279|     56|  container = last_matched_container;
 1280|       |
 1281|     56|  open_new_blocks(parser, &container, &input, all_matched);
 1282|       |
 1283|     56|  add_text_to_container(parser, container, last_matched_container, &input);
 1284|       |
 1285|     56|finished:
 1286|     56|  parser->last_line_length = input.len;
 1287|     56|  if (parser->last_line_length &&
 1288|     56|      input.data[parser->last_line_length - 1] == '\n')
 1289|     48|    parser->last_line_length -= 1;
 1290|     56|  if (parser->last_line_length &&
 1291|     56|      input.data[parser->last_line_length - 1] == '\r')
 1292|      0|    parser->last_line_length -= 1;
 1293|       |
 1294|     56|  cmark_strbuf_clear(&parser->curline);
 1295|     56|}
 1296|       |
 1297|      2|cmark_node *cmark_parser_finish(cmark_parser *parser) {
 1298|      2|  if (parser->linebuf.size) {
 1299|      0|    S_process_line(parser, parser->linebuf.ptr, parser->linebuf.size);
 1300|      0|    cmark_strbuf_clear(&parser->linebuf);
 1301|      0|  }
 1302|       |
 1303|      2|  finalize_document(parser);
 1304|       |
 1305|      2|  cmark_consolidate_text_nodes(parser->root);
 1306|       |
 1307|      2|  cmark_strbuf_free(&parser->curline);
 1308|       |
 1309|       |#if CMARK_DEBUG_NODES
 1310|       |  if (cmark_node_check(parser->root, stderr)) {
 1311|       |    abort();
 1312|       |  }
 1313|       |#endif
 1314|      2|  return parser->root;
 1315|      2|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/buffer.c:
    1|       |#include <stdarg.h>
    2|       |#include <string.h>
    3|       |#include <assert.h>
    4|       |#include <string.h>
    5|       |#include <stdio.h>
    6|       |#include <stdlib.h>
    7|       |#include <stdint.h>
    8|       |#include <limits.h>
    9|       |
   10|       |#include "config.h"
   11|       |#include "cmark_ctype.h"
   12|       |#include "buffer.h"
   13|       |
   14|       |/* Used as default value for cmark_strbuf->ptr so that people can always
   15|       | * assume ptr is non-NULL and zero terminated even for new cmark_strbufs.
   16|       | */
   17|       |unsigned char cmark_strbuf__initbuf[1];
   18|       |
   19|       |#ifndef MIN
   20|      0|#define MIN(x, y) ((x < y) ? x : y)
   21|       |#endif
   22|       |
   23|       |void cmark_strbuf_init(cmark_mem *mem, cmark_strbuf *buf,
   24|     72|                       bufsize_t initial_size) {
   25|     72|  buf->mem = mem;
   26|     72|  buf->asize = 0;
   27|     72|  buf->size = 0;
   28|     72|  buf->ptr = cmark_strbuf__initbuf;
   29|       |
   30|     72|  if (initial_size > 0)
   31|      2|    cmark_strbuf_grow(buf, initial_size);
   32|     72|}
   33|       |
   34|    152|static CMARK_INLINE void S_strbuf_grow_by(cmark_strbuf *buf, bufsize_t add) {
   35|    152|  cmark_strbuf_grow(buf, buf->size + add);
   36|    152|}
   37|       |
   38|    154|void cmark_strbuf_grow(cmark_strbuf *buf, bufsize_t target_size) {
   39|    154|  assert(target_size > 0);
   40|       |
   41|    154|  if (target_size < buf->asize)
   42|     96|    return;
   43|       |
   44|     58|  if (target_size > (bufsize_t)(INT32_MAX / 2)) {
   45|      0|    fprintf(stderr,
   46|      0|      "[cmark] cmark_strbuf_grow requests buffer with size > %d, aborting\n",
   47|      0|         (INT32_MAX / 2));
   48|      0|    abort();
   49|      0|  }
   50|       |
   51|       |  /* Oversize the buffer by 50% to guarantee amortized linear time
   52|       |   * complexity on append operations. */
   53|     58|  bufsize_t new_size = target_size + target_size / 2;
   54|     58|  new_size += 1;
   55|     58|  new_size = (new_size + 7) & ~7;
   56|       |
   57|     58|  buf->ptr = (unsigned char *)buf->mem->realloc(buf->asize ? buf->ptr : NULL,
   58|     58|                                                new_size);
   59|     58|  buf->asize = new_size;
   60|     58|}
   61|       |
   62|      0|bufsize_t cmark_strbuf_len(const cmark_strbuf *buf) { return buf->size; }
   63|       |
   64|     10|void cmark_strbuf_free(cmark_strbuf *buf) {
   65|     10|  if (!buf)
   66|      0|    return;
   67|       |
   68|     10|  if (buf->ptr != cmark_strbuf__initbuf)
   69|      2|    buf->mem->free(buf->ptr);
   70|       |
   71|     10|  cmark_strbuf_init(buf->mem, buf, 0);
   72|     10|}
   73|       |
   74|     56|void cmark_strbuf_clear(cmark_strbuf *buf) {
   75|     56|  buf->size = 0;
   76|       |
   77|     56|  if (buf->asize > 0)
   78|     56|    buf->ptr[0] = '\0';
   79|     56|}
   80|       |
   81|       |void cmark_strbuf_set(cmark_strbuf *buf, const unsigned char *data,
   82|      0|                      bufsize_t len) {
   83|      0|  if (len <= 0 || data == NULL) {
   84|      0|    cmark_strbuf_clear(buf);
   85|      0|  } else {
   86|      0|    if (data != buf->ptr) {
   87|      0|      if (len >= buf->asize)
   88|      0|        cmark_strbuf_grow(buf, len);
   89|      0|      memmove(buf->ptr, data, len);
   90|      0|    }
   91|      0|    buf->size = len;
   92|      0|    buf->ptr[buf->size] = '\0';
   93|      0|  }
   94|      0|}
   95|       |
   96|      0|void cmark_strbuf_sets(cmark_strbuf *buf, const char *string) {
   97|      0|  cmark_strbuf_set(buf, (const unsigned char *)string,
   98|      0|                   string ? strlen(string) : 0);
   99|      0|}
  100|       |
  101|     56|void cmark_strbuf_putc(cmark_strbuf *buf, int c) {
  102|     56|  S_strbuf_grow_by(buf, 1);
  103|     56|  buf->ptr[buf->size++] = (unsigned char)(c & 0xFF);
  104|     56|  buf->ptr[buf->size] = '\0';
  105|     56|}
  106|       |
  107|       |void cmark_strbuf_put(cmark_strbuf *buf, const unsigned char *data,
  108|    112|                      bufsize_t len) {
  109|    112|  if (len <= 0)
  110|     16|    return;
  111|       |
  112|     96|  S_strbuf_grow_by(buf, len);
  113|     96|  memmove(buf->ptr + buf->size, data, len);
  114|     96|  buf->size += len;
  115|     96|  buf->ptr[buf->size] = '\0';
  116|     96|}
  117|       |
  118|      0|void cmark_strbuf_puts(cmark_strbuf *buf, const char *string) {
  119|      0|  cmark_strbuf_put(buf, (const unsigned char *)string, strlen(string));
  120|      0|}
  121|       |
  122|       |void cmark_strbuf_copy_cstr(char *data, bufsize_t datasize,
  123|      0|                            const cmark_strbuf *buf) {
  124|      0|  bufsize_t copylen;
  125|       |
  126|      0|  assert(buf);
  127|      0|  if (!data || datasize <= 0)
  128|      0|    return;
  129|       |
  130|      0|  data[0] = '\0';
  131|       |
  132|      0|  if (buf->size == 0 || buf->asize <= 0)
  133|      0|    return;
  134|       |
  135|      0|  copylen = buf->size;
  136|      0|  if (copylen > datasize - 1)
  137|      0|    copylen = datasize - 1;
  138|      0|  memmove(data, buf->ptr, copylen);
  139|      0|  data[copylen] = '\0';
  140|      0|}
  141|       |
  142|      0|void cmark_strbuf_swap(cmark_strbuf *buf_a, cmark_strbuf *buf_b) {
  143|      0|  cmark_strbuf t = *buf_a;
  144|      0|  *buf_a = *buf_b;
  145|      0|  *buf_b = t;
  146|      0|}
  147|       |
  148|     56|unsigned char *cmark_strbuf_detach(cmark_strbuf *buf) {
  149|     56|  unsigned char *data = buf->ptr;
  150|       |
  151|     56|  if (buf->asize == 0) {
  152|       |    /* return an empty string */
  153|      0|    return (unsigned char *)buf->mem->calloc(1, 1);
  154|      0|  }
  155|       |
  156|     56|  cmark_strbuf_init(buf->mem, buf, 0);
  157|     56|  return data;
  158|     56|}
  159|       |
  160|      0|int cmark_strbuf_cmp(const cmark_strbuf *a, const cmark_strbuf *b) {
  161|      0|  int result = memcmp(a->ptr, b->ptr, MIN(a->size, b->size));
  162|      0|  return (result != 0) ? result
  163|      0|                       : (a->size < b->size) ? -1 : (a->size > b->size) ? 1 : 0;
  164|      0|}
  165|       |
  166|      0|bufsize_t cmark_strbuf_strchr(const cmark_strbuf *buf, int c, bufsize_t pos) {
  167|      0|  if (pos >= buf->size)
  168|      0|    return -1;
  169|      0|  if (pos < 0)
  170|      0|    pos = 0;
  171|       |
  172|      0|  const unsigned char *p =
  173|      0|      (unsigned char *)memchr(buf->ptr + pos, c, buf->size - pos);
  174|      0|  if (!p)
  175|      0|    return -1;
  176|       |
  177|      0|  return (bufsize_t)(p - (const unsigned char *)buf->ptr);
  178|      0|}
  179|       |
  180|      0|bufsize_t cmark_strbuf_strrchr(const cmark_strbuf *buf, int c, bufsize_t pos) {
  181|      0|  if (pos < 0 || buf->size == 0)
  182|      0|    return -1;
  183|      0|  if (pos >= buf->size)
  184|      0|    pos = buf->size - 1;
  185|       |
  186|      0|  bufsize_t i;
  187|      0|  for (i = pos; i >= 0; i--) {
  188|      0|    if (buf->ptr[i] == (unsigned char)c)
  189|      0|      return i;
  190|      0|  }
  191|       |
  192|      0|  return -1;
  193|      0|}
  194|       |
  195|     16|void cmark_strbuf_truncate(cmark_strbuf *buf, bufsize_t len) {
  196|     16|  if (len < 0)
  197|      0|    len = 0;
  198|       |
  199|     16|  if (len < buf->size) {
  200|      0|    buf->size = len;
  201|      0|    buf->ptr[buf->size] = '\0';
  202|      0|  }
  203|     16|}
  204|       |
  205|     32|void cmark_strbuf_drop(cmark_strbuf *buf, bufsize_t n) {
  206|     32|  if (n > 0) {
  207|      0|    if (n > buf->size)
  208|      0|      n = buf->size;
  209|      0|    buf->size = buf->size - n;
  210|      0|    if (buf->size)
  211|      0|      memmove(buf->ptr, buf->ptr + n, buf->size);
  212|       |
  213|      0|    buf->ptr[buf->size] = '\0';
  214|      0|  }
  215|     32|}
  216|       |
  217|      0|void cmark_strbuf_rtrim(cmark_strbuf *buf) {
  218|      0|  if (!buf->size)
  219|      0|    return;
  220|       |
  221|      0|  while (buf->size > 0) {
  222|      0|    if (!cmark_isspace(buf->ptr[buf->size - 1]))
  223|      0|      break;
  224|       |
  225|      0|    buf->size--;
  226|      0|  }
  227|       |
  228|      0|  buf->ptr[buf->size] = '\0';
  229|      0|}
  230|       |
  231|      0|void cmark_strbuf_trim(cmark_strbuf *buf) {
  232|      0|  bufsize_t i = 0;
  233|       |
  234|      0|  if (!buf->size)
  235|      0|    return;
  236|       |
  237|      0|  while (i < buf->size && cmark_isspace(buf->ptr[i]))
  238|      0|    i++;
  239|       |
  240|      0|  cmark_strbuf_drop(buf, i);
  241|       |
  242|      0|  cmark_strbuf_rtrim(buf);
  243|      0|}
  244|       |
  245|       |// Destructively modify string, collapsing consecutive
  246|       |// space and newline characters into a single space.
  247|      0|void cmark_strbuf_normalize_whitespace(cmark_strbuf *s) {
  248|      0|  bool last_char_was_space = false;
  249|      0|  bufsize_t r, w;
  250|       |
  251|      0|  for (r = 0, w = 0; r < s->size; ++r) {
  252|      0|    if (cmark_isspace(s->ptr[r])) {
  253|      0|      if (!last_char_was_space) {
  254|      0|        s->ptr[w++] = ' ';
  255|      0|        last_char_was_space = true;
  256|      0|      }
  257|      0|    } else {
  258|      0|      s->ptr[w++] = s->ptr[r];
  259|      0|      last_char_was_space = false;
  260|      0|    }
  261|      0|  }
  262|       |
  263|      0|  cmark_strbuf_truncate(s, w);
  264|      0|}
  265|       |
  266|       |// Destructively unescape a string: remove backslashes before punctuation chars.
  267|     16|extern void cmark_strbuf_unescape(cmark_strbuf *buf) {
  268|     16|  bufsize_t r, w;
  269|       |
  270|    820|  for (r = 0, w = 0; r < buf->size; ++r) {
  271|    804|    if (buf->ptr[r] == '\\' && cmark_ispunct(buf->ptr[r + 1]))
  272|      0|      r++;
  273|       |
  274|    804|    buf->ptr[w++] = buf->ptr[r];
  275|    804|  }
  276|       |
  277|     16|  cmark_strbuf_truncate(buf, w);
  278|     16|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/buffer.h:
    1|       |#ifndef CMARK_BUFFER_H
    2|       |#define CMARK_BUFFER_H
    3|       |
    4|       |#include <stddef.h>
    5|       |#include <stdarg.h>
    6|       |#include <string.h>
    7|       |#include <limits.h>
    8|       |#include <stdint.h>
    9|       |#include "config.h"
   10|       |#include "cmark.h"
   11|       |
   12|       |#ifdef __cplusplus
   13|       |extern "C" {
   14|       |#endif
   15|       |
   16|       |typedef int32_t bufsize_t;
   17|       |
   18|       |typedef struct {
   19|       |  cmark_mem *mem;
   20|       |  unsigned char *ptr;
   21|       |  bufsize_t asize, size;
   22|       |} cmark_strbuf;
   23|       |
   24|       |extern unsigned char cmark_strbuf__initbuf[];
   25|       |
   26|       |#define CMARK_BUF_INIT(mem)                                                    \
   27|     34|  { mem, cmark_strbuf__initbuf, 0, 0 }
   28|       |
   29|       |/**
   30|       | * Initialize a cmark_strbuf structure.
   31|       | *
   32|       | * For the cases where CMARK_BUF_INIT cannot be used to do static
   33|       | * initialization.
   34|       | */
   35|       |void cmark_strbuf_init(cmark_mem *mem, cmark_strbuf *buf,
   36|       |                       bufsize_t initial_size);
   37|       |
   38|       |/**
   39|       | * Grow the buffer to hold at least `target_size` bytes.
   40|       | */
   41|       |void cmark_strbuf_grow(cmark_strbuf *buf, bufsize_t target_size);
   42|       |
   43|       |void cmark_strbuf_free(cmark_strbuf *buf);
   44|       |void cmark_strbuf_swap(cmark_strbuf *buf_a, cmark_strbuf *buf_b);
   45|       |
   46|       |bufsize_t cmark_strbuf_len(const cmark_strbuf *buf);
   47|       |
   48|       |int cmark_strbuf_cmp(const cmark_strbuf *a, const cmark_strbuf *b);
   49|       |
   50|       |unsigned char *cmark_strbuf_detach(cmark_strbuf *buf);
   51|       |void cmark_strbuf_copy_cstr(char *data, bufsize_t datasize,
   52|       |                            const cmark_strbuf *buf);
   53|       |
   54|       |/*
   55|       |static CMARK_INLINE const char *cmark_strbuf_cstr(const cmark_strbuf *buf) {
   56|       | return (char *)buf->ptr;
   57|       |}
   58|       |*/
   59|       |
   60|       |#define cmark_strbuf_at(buf, n) ((buf)->ptr[n])
   61|       |
   62|       |void cmark_strbuf_set(cmark_strbuf *buf, const unsigned char *data,
   63|       |                      bufsize_t len);
   64|       |void cmark_strbuf_sets(cmark_strbuf *buf, const char *string);
   65|       |void cmark_strbuf_putc(cmark_strbuf *buf, int c);
   66|       |void cmark_strbuf_put(cmark_strbuf *buf, const unsigned char *data,
   67|       |                      bufsize_t len);
   68|       |void cmark_strbuf_puts(cmark_strbuf *buf, const char *string);
   69|       |void cmark_strbuf_clear(cmark_strbuf *buf);
   70|       |
   71|       |bufsize_t cmark_strbuf_strchr(const cmark_strbuf *buf, int c, bufsize_t pos);
   72|       |bufsize_t cmark_strbuf_strrchr(const cmark_strbuf *buf, int c, bufsize_t pos);
   73|       |void cmark_strbuf_drop(cmark_strbuf *buf, bufsize_t n);
   74|       |void cmark_strbuf_truncate(cmark_strbuf *buf, bufsize_t len);
   75|       |void cmark_strbuf_rtrim(cmark_strbuf *buf);
   76|       |void cmark_strbuf_trim(cmark_strbuf *buf);
   77|       |void cmark_strbuf_normalize_whitespace(cmark_strbuf *s);
   78|       |void cmark_strbuf_unescape(cmark_strbuf *s);
   79|       |
   80|       |#ifdef __cplusplus
   81|       |}
   82|       |#endif
   83|       |
   84|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/case_fold_switch.inc:
    1|      0|    switch (c) {
    2|      0|      case 0x0041:
    3|      0|        bufpush(0x0061);
    4|      0|        break;
    5|      0|      case 0x0042:
    6|      0|        bufpush(0x0062);
    7|      0|        break;
    8|      0|      case 0x0043:
    9|      0|        bufpush(0x0063);
   10|      0|        break;
   11|      0|      case 0x0044:
   12|      0|        bufpush(0x0064);
   13|      0|        break;
   14|      0|      case 0x0045:
   15|      0|        bufpush(0x0065);
   16|      0|        break;
   17|      0|      case 0x0046:
   18|      0|        bufpush(0x0066);
   19|      0|        break;
   20|      0|      case 0x0047:
   21|      0|        bufpush(0x0067);
   22|      0|        break;
   23|      0|      case 0x0048:
   24|      0|        bufpush(0x0068);
   25|      0|        break;
   26|      0|      case 0x0049:
   27|      0|        bufpush(0x0069);
   28|      0|        break;
   29|      0|      case 0x004A:
   30|      0|        bufpush(0x006A);
   31|      0|        break;
   32|      0|      case 0x004B:
   33|      0|        bufpush(0x006B);
   34|      0|        break;
   35|      0|      case 0x004C:
   36|      0|        bufpush(0x006C);
   37|      0|        break;
   38|      0|      case 0x004D:
   39|      0|        bufpush(0x006D);
   40|      0|        break;
   41|      0|      case 0x004E:
   42|      0|        bufpush(0x006E);
   43|      0|        break;
   44|      0|      case 0x004F:
   45|      0|        bufpush(0x006F);
   46|      0|        break;
   47|      0|      case 0x0050:
   48|      0|        bufpush(0x0070);
   49|      0|        break;
   50|      0|      case 0x0051:
   51|      0|        bufpush(0x0071);
   52|      0|        break;
   53|      0|      case 0x0052:
   54|      0|        bufpush(0x0072);
   55|      0|        break;
   56|      0|      case 0x0053:
   57|      0|        bufpush(0x0073);
   58|      0|        break;
   59|      0|      case 0x0054:
   60|      0|        bufpush(0x0074);
   61|      0|        break;
   62|      0|      case 0x0055:
   63|      0|        bufpush(0x0075);
   64|      0|        break;
   65|      0|      case 0x0056:
   66|      0|        bufpush(0x0076);
   67|      0|        break;
   68|      0|      case 0x0057:
   69|      0|        bufpush(0x0077);
   70|      0|        break;
   71|      0|      case 0x0058:
   72|      0|        bufpush(0x0078);
   73|      0|        break;
   74|      0|      case 0x0059:
   75|      0|        bufpush(0x0079);
   76|      0|        break;
   77|      0|      case 0x005A:
   78|      0|        bufpush(0x007A);
   79|      0|        break;
   80|      0|      case 0x00B5:
   81|      0|        bufpush(0x03BC);
   82|      0|        break;
   83|      0|      case 0x00C0:
   84|      0|        bufpush(0x00E0);
   85|      0|        break;
   86|      0|      case 0x00C1:
   87|      0|        bufpush(0x00E1);
   88|      0|        break;
   89|      0|      case 0x00C2:
   90|      0|        bufpush(0x00E2);
   91|      0|        break;
   92|      0|      case 0x00C3:
   93|      0|        bufpush(0x00E3);
   94|      0|        break;
   95|      0|      case 0x00C4:
   96|      0|        bufpush(0x00E4);
   97|      0|        break;
   98|      0|      case 0x00C5:
   99|      0|        bufpush(0x00E5);
  100|      0|        break;
  101|      0|      case 0x00C6:
  102|      0|        bufpush(0x00E6);
  103|      0|        break;
  104|      0|      case 0x00C7:
  105|      0|        bufpush(0x00E7);
  106|      0|        break;
  107|      0|      case 0x00C8:
  108|      0|        bufpush(0x00E8);
  109|      0|        break;
  110|      0|      case 0x00C9:
  111|      0|        bufpush(0x00E9);
  112|      0|        break;
  113|      0|      case 0x00CA:
  114|      0|        bufpush(0x00EA);
  115|      0|        break;
  116|      0|      case 0x00CB:
  117|      0|        bufpush(0x00EB);
  118|      0|        break;
  119|      0|      case 0x00CC:
  120|      0|        bufpush(0x00EC);
  121|      0|        break;
  122|      0|      case 0x00CD:
  123|      0|        bufpush(0x00ED);
  124|      0|        break;
  125|      0|      case 0x00CE:
  126|      0|        bufpush(0x00EE);
  127|      0|        break;
  128|      0|      case 0x00CF:
  129|      0|        bufpush(0x00EF);
  130|      0|        break;
  131|      0|      case 0x00D0:
  132|      0|        bufpush(0x00F0);
  133|      0|        break;
  134|      0|      case 0x00D1:
  135|      0|        bufpush(0x00F1);
  136|      0|        break;
  137|      0|      case 0x00D2:
  138|      0|        bufpush(0x00F2);
  139|      0|        break;
  140|      0|      case 0x00D3:
  141|      0|        bufpush(0x00F3);
  142|      0|        break;
  143|      0|      case 0x00D4:
  144|      0|        bufpush(0x00F4);
  145|      0|        break;
  146|      0|      case 0x00D5:
  147|      0|        bufpush(0x00F5);
  148|      0|        break;
  149|      0|      case 0x00D6:
  150|      0|        bufpush(0x00F6);
  151|      0|        break;
  152|      0|      case 0x00D8:
  153|      0|        bufpush(0x00F8);
  154|      0|        break;
  155|      0|      case 0x00D9:
  156|      0|        bufpush(0x00F9);
  157|      0|        break;
  158|      0|      case 0x00DA:
  159|      0|        bufpush(0x00FA);
  160|      0|        break;
  161|      0|      case 0x00DB:
  162|      0|        bufpush(0x00FB);
  163|      0|        break;
  164|      0|      case 0x00DC:
  165|      0|        bufpush(0x00FC);
  166|      0|        break;
  167|      0|      case 0x00DD:
  168|      0|        bufpush(0x00FD);
  169|      0|        break;
  170|      0|      case 0x00DE:
  171|      0|        bufpush(0x00FE);
  172|      0|        break;
  173|      0|      case 0x00DF:
  174|      0|        bufpush(0x0073);
  175|      0|        bufpush(0x0073);
  176|      0|        break;
  177|      0|      case 0x0100:
  178|      0|        bufpush(0x0101);
  179|      0|        break;
  180|      0|      case 0x0102:
  181|      0|        bufpush(0x0103);
  182|      0|        break;
  183|      0|      case 0x0104:
  184|      0|        bufpush(0x0105);
  185|      0|        break;
  186|      0|      case 0x0106:
  187|      0|        bufpush(0x0107);
  188|      0|        break;
  189|      0|      case 0x0108:
  190|      0|        bufpush(0x0109);
  191|      0|        break;
  192|      0|      case 0x010A:
  193|      0|        bufpush(0x010B);
  194|      0|        break;
  195|      0|      case 0x010C:
  196|      0|        bufpush(0x010D);
  197|      0|        break;
  198|      0|      case 0x010E:
  199|      0|        bufpush(0x010F);
  200|      0|        break;
  201|      0|      case 0x0110:
  202|      0|        bufpush(0x0111);
  203|      0|        break;
  204|      0|      case 0x0112:
  205|      0|        bufpush(0x0113);
  206|      0|        break;
  207|      0|      case 0x0114:
  208|      0|        bufpush(0x0115);
  209|      0|        break;
  210|      0|      case 0x0116:
  211|      0|        bufpush(0x0117);
  212|      0|        break;
  213|      0|      case 0x0118:
  214|      0|        bufpush(0x0119);
  215|      0|        break;
  216|      0|      case 0x011A:
  217|      0|        bufpush(0x011B);
  218|      0|        break;
  219|      0|      case 0x011C:
  220|      0|        bufpush(0x011D);
  221|      0|        break;
  222|      0|      case 0x011E:
  223|      0|        bufpush(0x011F);
  224|      0|        break;
  225|      0|      case 0x0120:
  226|      0|        bufpush(0x0121);
  227|      0|        break;
  228|      0|      case 0x0122:
  229|      0|        bufpush(0x0123);
  230|      0|        break;
  231|      0|      case 0x0124:
  232|      0|        bufpush(0x0125);
  233|      0|        break;
  234|      0|      case 0x0126:
  235|      0|        bufpush(0x0127);
  236|      0|        break;
  237|      0|      case 0x0128:
  238|      0|        bufpush(0x0129);
  239|      0|        break;
  240|      0|      case 0x012A:
  241|      0|        bufpush(0x012B);
  242|      0|        break;
  243|      0|      case 0x012C:
  244|      0|        bufpush(0x012D);
  245|      0|        break;
  246|      0|      case 0x012E:
  247|      0|        bufpush(0x012F);
  248|      0|        break;
  249|      0|      case 0x0130:
  250|      0|        bufpush(0x0069);
  251|      0|        bufpush(0x0307);
  252|      0|        break;
  253|      0|      case 0x0132:
  254|      0|        bufpush(0x0133);
  255|      0|        break;
  256|      0|      case 0x0134:
  257|      0|        bufpush(0x0135);
  258|      0|        break;
  259|      0|      case 0x0136:
  260|      0|        bufpush(0x0137);
  261|      0|        break;
  262|      0|      case 0x0139:
  263|      0|        bufpush(0x013A);
  264|      0|        break;
  265|      0|      case 0x013B:
  266|      0|        bufpush(0x013C);
  267|      0|        break;
  268|      0|      case 0x013D:
  269|      0|        bufpush(0x013E);
  270|      0|        break;
  271|      0|      case 0x013F:
  272|      0|        bufpush(0x0140);
  273|      0|        break;
  274|      0|      case 0x0141:
  275|      0|        bufpush(0x0142);
  276|      0|        break;
  277|      0|      case 0x0143:
  278|      0|        bufpush(0x0144);
  279|      0|        break;
  280|      0|      case 0x0145:
  281|      0|        bufpush(0x0146);
  282|      0|        break;
  283|      0|      case 0x0147:
  284|      0|        bufpush(0x0148);
  285|      0|        break;
  286|      0|      case 0x0149:
  287|      0|        bufpush(0x02BC);
  288|      0|        bufpush(0x006E);
  289|      0|        break;
  290|      0|      case 0x014A:
  291|      0|        bufpush(0x014B);
  292|      0|        break;
  293|      0|      case 0x014C:
  294|      0|        bufpush(0x014D);
  295|      0|        break;
  296|      0|      case 0x014E:
  297|      0|        bufpush(0x014F);
  298|      0|        break;
  299|      0|      case 0x0150:
  300|      0|        bufpush(0x0151);
  301|      0|        break;
  302|      0|      case 0x0152:
  303|      0|        bufpush(0x0153);
  304|      0|        break;
  305|      0|      case 0x0154:
  306|      0|        bufpush(0x0155);
  307|      0|        break;
  308|      0|      case 0x0156:
  309|      0|        bufpush(0x0157);
  310|      0|        break;
  311|      0|      case 0x0158:
  312|      0|        bufpush(0x0159);
  313|      0|        break;
  314|      0|      case 0x015A:
  315|      0|        bufpush(0x015B);
  316|      0|        break;
  317|      0|      case 0x015C:
  318|      0|        bufpush(0x015D);
  319|      0|        break;
  320|      0|      case 0x015E:
  321|      0|        bufpush(0x015F);
  322|      0|        break;
  323|      0|      case 0x0160:
  324|      0|        bufpush(0x0161);
  325|      0|        break;
  326|      0|      case 0x0162:
  327|      0|        bufpush(0x0163);
  328|      0|        break;
  329|      0|      case 0x0164:
  330|      0|        bufpush(0x0165);
  331|      0|        break;
  332|      0|      case 0x0166:
  333|      0|        bufpush(0x0167);
  334|      0|        break;
  335|      0|      case 0x0168:
  336|      0|        bufpush(0x0169);
  337|      0|        break;
  338|      0|      case 0x016A:
  339|      0|        bufpush(0x016B);
  340|      0|        break;
  341|      0|      case 0x016C:
  342|      0|        bufpush(0x016D);
  343|      0|        break;
  344|      0|      case 0x016E:
  345|      0|        bufpush(0x016F);
  346|      0|        break;
  347|      0|      case 0x0170:
  348|      0|        bufpush(0x0171);
  349|      0|        break;
  350|      0|      case 0x0172:
  351|      0|        bufpush(0x0173);
  352|      0|        break;
  353|      0|      case 0x0174:
  354|      0|        bufpush(0x0175);
  355|      0|        break;
  356|      0|      case 0x0176:
  357|      0|        bufpush(0x0177);
  358|      0|        break;
  359|      0|      case 0x0178:
  360|      0|        bufpush(0x00FF);
  361|      0|        break;
  362|      0|      case 0x0179:
  363|      0|        bufpush(0x017A);
  364|      0|        break;
  365|      0|      case 0x017B:
  366|      0|        bufpush(0x017C);
  367|      0|        break;
  368|      0|      case 0x017D:
  369|      0|        bufpush(0x017E);
  370|      0|        break;
  371|      0|      case 0x017F:
  372|      0|        bufpush(0x0073);
  373|      0|        break;
  374|      0|      case 0x0181:
  375|      0|        bufpush(0x0253);
  376|      0|        break;
  377|      0|      case 0x0182:
  378|      0|        bufpush(0x0183);
  379|      0|        break;
  380|      0|      case 0x0184:
  381|      0|        bufpush(0x0185);
  382|      0|        break;
  383|      0|      case 0x0186:
  384|      0|        bufpush(0x0254);
  385|      0|        break;
  386|      0|      case 0x0187:
  387|      0|        bufpush(0x0188);
  388|      0|        break;
  389|      0|      case 0x0189:
  390|      0|        bufpush(0x0256);
  391|      0|        break;
  392|      0|      case 0x018A:
  393|      0|        bufpush(0x0257);
  394|      0|        break;
  395|      0|      case 0x018B:
  396|      0|        bufpush(0x018C);
  397|      0|        break;
  398|      0|      case 0x018E:
  399|      0|        bufpush(0x01DD);
  400|      0|        break;
  401|      0|      case 0x018F:
  402|      0|        bufpush(0x0259);
  403|      0|        break;
  404|      0|      case 0x0190:
  405|      0|        bufpush(0x025B);
  406|      0|        break;
  407|      0|      case 0x0191:
  408|      0|        bufpush(0x0192);
  409|      0|        break;
  410|      0|      case 0x0193:
  411|      0|        bufpush(0x0260);
  412|      0|        break;
  413|      0|      case 0x0194:
  414|      0|        bufpush(0x0263);
  415|      0|        break;
  416|      0|      case 0x0196:
  417|      0|        bufpush(0x0269);
  418|      0|        break;
  419|      0|      case 0x0197:
  420|      0|        bufpush(0x0268);
  421|      0|        break;
  422|      0|      case 0x0198:
  423|      0|        bufpush(0x0199);
  424|      0|        break;
  425|      0|      case 0x019C:
  426|      0|        bufpush(0x026F);
  427|      0|        break;
  428|      0|      case 0x019D:
  429|      0|        bufpush(0x0272);
  430|      0|        break;
  431|      0|      case 0x019F:
  432|      0|        bufpush(0x0275);
  433|      0|        break;
  434|      0|      case 0x01A0:
  435|      0|        bufpush(0x01A1);
  436|      0|        break;
  437|      0|      case 0x01A2:
  438|      0|        bufpush(0x01A3);
  439|      0|        break;
  440|      0|      case 0x01A4:
  441|      0|        bufpush(0x01A5);
  442|      0|        break;
  443|      0|      case 0x01A6:
  444|      0|        bufpush(0x0280);
  445|      0|        break;
  446|      0|      case 0x01A7:
  447|      0|        bufpush(0x01A8);
  448|      0|        break;
  449|      0|      case 0x01A9:
  450|      0|        bufpush(0x0283);
  451|      0|        break;
  452|      0|      case 0x01AC:
  453|      0|        bufpush(0x01AD);
  454|      0|        break;
  455|      0|      case 0x01AE:
  456|      0|        bufpush(0x0288);
  457|      0|        break;
  458|      0|      case 0x01AF:
  459|      0|        bufpush(0x01B0);
  460|      0|        break;
  461|      0|      case 0x01B1:
  462|      0|        bufpush(0x028A);
  463|      0|        break;
  464|      0|      case 0x01B2:
  465|      0|        bufpush(0x028B);
  466|      0|        break;
  467|      0|      case 0x01B3:
  468|      0|        bufpush(0x01B4);
  469|      0|        break;
  470|      0|      case 0x01B5:
  471|      0|        bufpush(0x01B6);
  472|      0|        break;
  473|      0|      case 0x01B7:
  474|      0|        bufpush(0x0292);
  475|      0|        break;
  476|      0|      case 0x01B8:
  477|      0|        bufpush(0x01B9);
  478|      0|        break;
  479|      0|      case 0x01BC:
  480|      0|        bufpush(0x01BD);
  481|      0|        break;
  482|      0|      case 0x01C4:
  483|      0|        bufpush(0x01C6);
  484|      0|        break;
  485|      0|      case 0x01C5:
  486|      0|        bufpush(0x01C6);
  487|      0|        break;
  488|      0|      case 0x01C7:
  489|      0|        bufpush(0x01C9);
  490|      0|        break;
  491|      0|      case 0x01C8:
  492|      0|        bufpush(0x01C9);
  493|      0|        break;
  494|      0|      case 0x01CA:
  495|      0|        bufpush(0x01CC);
  496|      0|        break;
  497|      0|      case 0x01CB:
  498|      0|        bufpush(0x01CC);
  499|      0|        break;
  500|      0|      case 0x01CD:
  501|      0|        bufpush(0x01CE);
  502|      0|        break;
  503|      0|      case 0x01CF:
  504|      0|        bufpush(0x01D0);
  505|      0|        break;
  506|      0|      case 0x01D1:
  507|      0|        bufpush(0x01D2);
  508|      0|        break;
  509|      0|      case 0x01D3:
  510|      0|        bufpush(0x01D4);
  511|      0|        break;
  512|      0|      case 0x01D5:
  513|      0|        bufpush(0x01D6);
  514|      0|        break;
  515|      0|      case 0x01D7:
  516|      0|        bufpush(0x01D8);
  517|      0|        break;
  518|      0|      case 0x01D9:
  519|      0|        bufpush(0x01DA);
  520|      0|        break;
  521|      0|      case 0x01DB:
  522|      0|        bufpush(0x01DC);
  523|      0|        break;
  524|      0|      case 0x01DE:
  525|      0|        bufpush(0x01DF);
  526|      0|        break;
  527|      0|      case 0x01E0:
  528|      0|        bufpush(0x01E1);
  529|      0|        break;
  530|      0|      case 0x01E2:
  531|      0|        bufpush(0x01E3);
  532|      0|        break;
  533|      0|      case 0x01E4:
  534|      0|        bufpush(0x01E5);
  535|      0|        break;
  536|      0|      case 0x01E6:
  537|      0|        bufpush(0x01E7);
  538|      0|        break;
  539|      0|      case 0x01E8:
  540|      0|        bufpush(0x01E9);
  541|      0|        break;
  542|      0|      case 0x01EA:
  543|      0|        bufpush(0x01EB);
  544|      0|        break;
  545|      0|      case 0x01EC:
  546|      0|        bufpush(0x01ED);
  547|      0|        break;
  548|      0|      case 0x01EE:
  549|      0|        bufpush(0x01EF);
  550|      0|        break;
  551|      0|      case 0x01F0:
  552|      0|        bufpush(0x006A);
  553|      0|        bufpush(0x030C);
  554|      0|        break;
  555|      0|      case 0x01F1:
  556|      0|        bufpush(0x01F3);
  557|      0|        break;
  558|      0|      case 0x01F2:
  559|      0|        bufpush(0x01F3);
  560|      0|        break;
  561|      0|      case 0x01F4:
  562|      0|        bufpush(0x01F5);
  563|      0|        break;
  564|      0|      case 0x01F6:
  565|      0|        bufpush(0x0195);
  566|      0|        break;
  567|      0|      case 0x01F7:
  568|      0|        bufpush(0x01BF);
  569|      0|        break;
  570|      0|      case 0x01F8:
  571|      0|        bufpush(0x01F9);
  572|      0|        break;
  573|      0|      case 0x01FA:
  574|      0|        bufpush(0x01FB);
  575|      0|        break;
  576|      0|      case 0x01FC:
  577|      0|        bufpush(0x01FD);
  578|      0|        break;
  579|      0|      case 0x01FE:
  580|      0|        bufpush(0x01FF);
  581|      0|        break;
  582|      0|      case 0x0200:
  583|      0|        bufpush(0x0201);
  584|      0|        break;
  585|      0|      case 0x0202:
  586|      0|        bufpush(0x0203);
  587|      0|        break;
  588|      0|      case 0x0204:
  589|      0|        bufpush(0x0205);
  590|      0|        break;
  591|      0|      case 0x0206:
  592|      0|        bufpush(0x0207);
  593|      0|        break;
  594|      0|      case 0x0208:
  595|      0|        bufpush(0x0209);
  596|      0|        break;
  597|      0|      case 0x020A:
  598|      0|        bufpush(0x020B);
  599|      0|        break;
  600|      0|      case 0x020C:
  601|      0|        bufpush(0x020D);
  602|      0|        break;
  603|      0|      case 0x020E:
  604|      0|        bufpush(0x020F);
  605|      0|        break;
  606|      0|      case 0x0210:
  607|      0|        bufpush(0x0211);
  608|      0|        break;
  609|      0|      case 0x0212:
  610|      0|        bufpush(0x0213);
  611|      0|        break;
  612|      0|      case 0x0214:
  613|      0|        bufpush(0x0215);
  614|      0|        break;
  615|      0|      case 0x0216:
  616|      0|        bufpush(0x0217);
  617|      0|        break;
  618|      0|      case 0x0218:
  619|      0|        bufpush(0x0219);
  620|      0|        break;
  621|      0|      case 0x021A:
  622|      0|        bufpush(0x021B);
  623|      0|        break;
  624|      0|      case 0x021C:
  625|      0|        bufpush(0x021D);
  626|      0|        break;
  627|      0|      case 0x021E:
  628|      0|        bufpush(0x021F);
  629|      0|        break;
  630|      0|      case 0x0220:
  631|      0|        bufpush(0x019E);
  632|      0|        break;
  633|      0|      case 0x0222:
  634|      0|        bufpush(0x0223);
  635|      0|        break;
  636|      0|      case 0x0224:
  637|      0|        bufpush(0x0225);
  638|      0|        break;
  639|      0|      case 0x0226:
  640|      0|        bufpush(0x0227);
  641|      0|        break;
  642|      0|      case 0x0228:
  643|      0|        bufpush(0x0229);
  644|      0|        break;
  645|      0|      case 0x022A:
  646|      0|        bufpush(0x022B);
  647|      0|        break;
  648|      0|      case 0x022C:
  649|      0|        bufpush(0x022D);
  650|      0|        break;
  651|      0|      case 0x022E:
  652|      0|        bufpush(0x022F);
  653|      0|        break;
  654|      0|      case 0x0230:
  655|      0|        bufpush(0x0231);
  656|      0|        break;
  657|      0|      case 0x0232:
  658|      0|        bufpush(0x0233);
  659|      0|        break;
  660|      0|      case 0x023A:
  661|      0|        bufpush(0x2C65);
  662|      0|        break;
  663|      0|      case 0x023B:
  664|      0|        bufpush(0x023C);
  665|      0|        break;
  666|      0|      case 0x023D:
  667|      0|        bufpush(0x019A);
  668|      0|        break;
  669|      0|      case 0x023E:
  670|      0|        bufpush(0x2C66);
  671|      0|        break;
  672|      0|      case 0x0241:
  673|      0|        bufpush(0x0242);
  674|      0|        break;
  675|      0|      case 0x0243:
  676|      0|        bufpush(0x0180);
  677|      0|        break;
  678|      0|      case 0x0244:
  679|      0|        bufpush(0x0289);
  680|      0|        break;
  681|      0|      case 0x0245:
  682|      0|        bufpush(0x028C);
  683|      0|        break;
  684|      0|      case 0x0246:
  685|      0|        bufpush(0x0247);
  686|      0|        break;
  687|      0|      case 0x0248:
  688|      0|        bufpush(0x0249);
  689|      0|        break;
  690|      0|      case 0x024A:
  691|      0|        bufpush(0x024B);
  692|      0|        break;
  693|      0|      case 0x024C:
  694|      0|        bufpush(0x024D);
  695|      0|        break;
  696|      0|      case 0x024E:
  697|      0|        bufpush(0x024F);
  698|      0|        break;
  699|      0|      case 0x0345:
  700|      0|        bufpush(0x03B9);
  701|      0|        break;
  702|      0|      case 0x0370:
  703|      0|        bufpush(0x0371);
  704|      0|        break;
  705|      0|      case 0x0372:
  706|      0|        bufpush(0x0373);
  707|      0|        break;
  708|      0|      case 0x0376:
  709|      0|        bufpush(0x0377);
  710|      0|        break;
  711|      0|      case 0x037F:
  712|      0|        bufpush(0x03F3);
  713|      0|        break;
  714|      0|      case 0x0386:
  715|      0|        bufpush(0x03AC);
  716|      0|        break;
  717|      0|      case 0x0388:
  718|      0|        bufpush(0x03AD);
  719|      0|        break;
  720|      0|      case 0x0389:
  721|      0|        bufpush(0x03AE);
  722|      0|        break;
  723|      0|      case 0x038A:
  724|      0|        bufpush(0x03AF);
  725|      0|        break;
  726|      0|      case 0x038C:
  727|      0|        bufpush(0x03CC);
  728|      0|        break;
  729|      0|      case 0x038E:
  730|      0|        bufpush(0x03CD);
  731|      0|        break;
  732|      0|      case 0x038F:
  733|      0|        bufpush(0x03CE);
  734|      0|        break;
  735|      0|      case 0x0390:
  736|      0|        bufpush(0x03B9);
  737|      0|        bufpush(0x0308);
  738|      0|        bufpush(0x0301);
  739|      0|        break;
  740|      0|      case 0x0391:
  741|      0|        bufpush(0x03B1);
  742|      0|        break;
  743|      0|      case 0x0392:
  744|      0|        bufpush(0x03B2);
  745|      0|        break;
  746|      0|      case 0x0393:
  747|      0|        bufpush(0x03B3);
  748|      0|        break;
  749|      0|      case 0x0394:
  750|      0|        bufpush(0x03B4);
  751|      0|        break;
  752|      0|      case 0x0395:
  753|      0|        bufpush(0x03B5);
  754|      0|        break;
  755|      0|      case 0x0396:
  756|      0|        bufpush(0x03B6);
  757|      0|        break;
  758|      0|      case 0x0397:
  759|      0|        bufpush(0x03B7);
  760|      0|        break;
  761|      0|      case 0x0398:
  762|      0|        bufpush(0x03B8);
  763|      0|        break;
  764|      0|      case 0x0399:
  765|      0|        bufpush(0x03B9);
  766|      0|        break;
  767|      0|      case 0x039A:
  768|      0|        bufpush(0x03BA);
  769|      0|        break;
  770|      0|      case 0x039B:
  771|      0|        bufpush(0x03BB);
  772|      0|        break;
  773|      0|      case 0x039C:
  774|      0|        bufpush(0x03BC);
  775|      0|        break;
  776|      0|      case 0x039D:
  777|      0|        bufpush(0x03BD);
  778|      0|        break;
  779|      0|      case 0x039E:
  780|      0|        bufpush(0x03BE);
  781|      0|        break;
  782|      0|      case 0x039F:
  783|      0|        bufpush(0x03BF);
  784|      0|        break;
  785|      0|      case 0x03A0:
  786|      0|        bufpush(0x03C0);
  787|      0|        break;
  788|      0|      case 0x03A1:
  789|      0|        bufpush(0x03C1);
  790|      0|        break;
  791|      0|      case 0x03A3:
  792|      0|        bufpush(0x03C3);
  793|      0|        break;
  794|      0|      case 0x03A4:
  795|      0|        bufpush(0x03C4);
  796|      0|        break;
  797|      0|      case 0x03A5:
  798|      0|        bufpush(0x03C5);
  799|      0|        break;
  800|      0|      case 0x03A6:
  801|      0|        bufpush(0x03C6);
  802|      0|        break;
  803|      0|      case 0x03A7:
  804|      0|        bufpush(0x03C7);
  805|      0|        break;
  806|      0|      case 0x03A8:
  807|      0|        bufpush(0x03C8);
  808|      0|        break;
  809|      0|      case 0x03A9:
  810|      0|        bufpush(0x03C9);
  811|      0|        break;
  812|      0|      case 0x03AA:
  813|      0|        bufpush(0x03CA);
  814|      0|        break;
  815|      0|      case 0x03AB:
  816|      0|        bufpush(0x03CB);
  817|      0|        break;
  818|      0|      case 0x03B0:
  819|      0|        bufpush(0x03C5);
  820|      0|        bufpush(0x0308);
  821|      0|        bufpush(0x0301);
  822|      0|        break;
  823|      0|      case 0x03C2:
  824|      0|        bufpush(0x03C3);
  825|      0|        break;
  826|      0|      case 0x03CF:
  827|      0|        bufpush(0x03D7);
  828|      0|        break;
  829|      0|      case 0x03D0:
  830|      0|        bufpush(0x03B2);
  831|      0|        break;
  832|      0|      case 0x03D1:
  833|      0|        bufpush(0x03B8);
  834|      0|        break;
  835|      0|      case 0x03D5:
  836|      0|        bufpush(0x03C6);
  837|      0|        break;
  838|      0|      case 0x03D6:
  839|      0|        bufpush(0x03C0);
  840|      0|        break;
  841|      0|      case 0x03D8:
  842|      0|        bufpush(0x03D9);
  843|      0|        break;
  844|      0|      case 0x03DA:
  845|      0|        bufpush(0x03DB);
  846|      0|        break;
  847|      0|      case 0x03DC:
  848|      0|        bufpush(0x03DD);
  849|      0|        break;
  850|      0|      case 0x03DE:
  851|      0|        bufpush(0x03DF);
  852|      0|        break;
  853|      0|      case 0x03E0:
  854|      0|        bufpush(0x03E1);
  855|      0|        break;
  856|      0|      case 0x03E2:
  857|      0|        bufpush(0x03E3);
  858|      0|        break;
  859|      0|      case 0x03E4:
  860|      0|        bufpush(0x03E5);
  861|      0|        break;
  862|      0|      case 0x03E6:
  863|      0|        bufpush(0x03E7);
  864|      0|        break;
  865|      0|      case 0x03E8:
  866|      0|        bufpush(0x03E9);
  867|      0|        break;
  868|      0|      case 0x03EA:
  869|      0|        bufpush(0x03EB);
  870|      0|        break;
  871|      0|      case 0x03EC:
  872|      0|        bufpush(0x03ED);
  873|      0|        break;
  874|      0|      case 0x03EE:
  875|      0|        bufpush(0x03EF);
  876|      0|        break;
  877|      0|      case 0x03F0:
  878|      0|        bufpush(0x03BA);
  879|      0|        break;
  880|      0|      case 0x03F1:
  881|      0|        bufpush(0x03C1);
  882|      0|        break;
  883|      0|      case 0x03F4:
  884|      0|        bufpush(0x03B8);
  885|      0|        break;
  886|      0|      case 0x03F5:
  887|      0|        bufpush(0x03B5);
  888|      0|        break;
  889|      0|      case 0x03F7:
  890|      0|        bufpush(0x03F8);
  891|      0|        break;
  892|      0|      case 0x03F9:
  893|      0|        bufpush(0x03F2);
  894|      0|        break;
  895|      0|      case 0x03FA:
  896|      0|        bufpush(0x03FB);
  897|      0|        break;
  898|      0|      case 0x03FD:
  899|      0|        bufpush(0x037B);
  900|      0|        break;
  901|      0|      case 0x03FE:
  902|      0|        bufpush(0x037C);
  903|      0|        break;
  904|      0|      case 0x03FF:
  905|      0|        bufpush(0x037D);
  906|      0|        break;
  907|      0|      case 0x0400:
  908|      0|        bufpush(0x0450);
  909|      0|        break;
  910|      0|      case 0x0401:
  911|      0|        bufpush(0x0451);
  912|      0|        break;
  913|      0|      case 0x0402:
  914|      0|        bufpush(0x0452);
  915|      0|        break;
  916|      0|      case 0x0403:
  917|      0|        bufpush(0x0453);
  918|      0|        break;
  919|      0|      case 0x0404:
  920|      0|        bufpush(0x0454);
  921|      0|        break;
  922|      0|      case 0x0405:
  923|      0|        bufpush(0x0455);
  924|      0|        break;
  925|      0|      case 0x0406:
  926|      0|        bufpush(0x0456);
  927|      0|        break;
  928|      0|      case 0x0407:
  929|      0|        bufpush(0x0457);
  930|      0|        break;
  931|      0|      case 0x0408:
  932|      0|        bufpush(0x0458);
  933|      0|        break;
  934|      0|      case 0x0409:
  935|      0|        bufpush(0x0459);
  936|      0|        break;
  937|      0|      case 0x040A:
  938|      0|        bufpush(0x045A);
  939|      0|        break;
  940|      0|      case 0x040B:
  941|      0|        bufpush(0x045B);
  942|      0|        break;
  943|      0|      case 0x040C:
  944|      0|        bufpush(0x045C);
  945|      0|        break;
  946|      0|      case 0x040D:
  947|      0|        bufpush(0x045D);
  948|      0|        break;
  949|      0|      case 0x040E:
  950|      0|        bufpush(0x045E);
  951|      0|        break;
  952|      0|      case 0x040F:
  953|      0|        bufpush(0x045F);
  954|      0|        break;
  955|      0|      case 0x0410:
  956|      0|        bufpush(0x0430);
  957|      0|        break;
  958|      0|      case 0x0411:
  959|      0|        bufpush(0x0431);
  960|      0|        break;
  961|      0|      case 0x0412:
  962|      0|        bufpush(0x0432);
  963|      0|        break;
  964|      0|      case 0x0413:
  965|      0|        bufpush(0x0433);
  966|      0|        break;
  967|      0|      case 0x0414:
  968|      0|        bufpush(0x0434);
  969|      0|        break;
  970|      0|      case 0x0415:
  971|      0|        bufpush(0x0435);
  972|      0|        break;
  973|      0|      case 0x0416:
  974|      0|        bufpush(0x0436);
  975|      0|        break;
  976|      0|      case 0x0417:
  977|      0|        bufpush(0x0437);
  978|      0|        break;
  979|      0|      case 0x0418:
  980|      0|        bufpush(0x0438);
  981|      0|        break;
  982|      0|      case 0x0419:
  983|      0|        bufpush(0x0439);
  984|      0|        break;
  985|      0|      case 0x041A:
  986|      0|        bufpush(0x043A);
  987|      0|        break;
  988|      0|      case 0x041B:
  989|      0|        bufpush(0x043B);
  990|      0|        break;
  991|      0|      case 0x041C:
  992|      0|        bufpush(0x043C);
  993|      0|        break;
  994|      0|      case 0x041D:
  995|      0|        bufpush(0x043D);
  996|      0|        break;
  997|      0|      case 0x041E:
  998|      0|        bufpush(0x043E);
  999|      0|        break;
 1000|      0|      case 0x041F:
 1001|      0|        bufpush(0x043F);
 1002|      0|        break;
 1003|      0|      case 0x0420:
 1004|      0|        bufpush(0x0440);
 1005|      0|        break;
 1006|      0|      case 0x0421:
 1007|      0|        bufpush(0x0441);
 1008|      0|        break;
 1009|      0|      case 0x0422:
 1010|      0|        bufpush(0x0442);
 1011|      0|        break;
 1012|      0|      case 0x0423:
 1013|      0|        bufpush(0x0443);
 1014|      0|        break;
 1015|      0|      case 0x0424:
 1016|      0|        bufpush(0x0444);
 1017|      0|        break;
 1018|      0|      case 0x0425:
 1019|      0|        bufpush(0x0445);
 1020|      0|        break;
 1021|      0|      case 0x0426:
 1022|      0|        bufpush(0x0446);
 1023|      0|        break;
 1024|      0|      case 0x0427:
 1025|      0|        bufpush(0x0447);
 1026|      0|        break;
 1027|      0|      case 0x0428:
 1028|      0|        bufpush(0x0448);
 1029|      0|        break;
 1030|      0|      case 0x0429:
 1031|      0|        bufpush(0x0449);
 1032|      0|        break;
 1033|      0|      case 0x042A:
 1034|      0|        bufpush(0x044A);
 1035|      0|        break;
 1036|      0|      case 0x042B:
 1037|      0|        bufpush(0x044B);
 1038|      0|        break;
 1039|      0|      case 0x042C:
 1040|      0|        bufpush(0x044C);
 1041|      0|        break;
 1042|      0|      case 0x042D:
 1043|      0|        bufpush(0x044D);
 1044|      0|        break;
 1045|      0|      case 0x042E:
 1046|      0|        bufpush(0x044E);
 1047|      0|        break;
 1048|      0|      case 0x042F:
 1049|      0|        bufpush(0x044F);
 1050|      0|        break;
 1051|      0|      case 0x0460:
 1052|      0|        bufpush(0x0461);
 1053|      0|        break;
 1054|      0|      case 0x0462:
 1055|      0|        bufpush(0x0463);
 1056|      0|        break;
 1057|      0|      case 0x0464:
 1058|      0|        bufpush(0x0465);
 1059|      0|        break;
 1060|      0|      case 0x0466:
 1061|      0|        bufpush(0x0467);
 1062|      0|        break;
 1063|      0|      case 0x0468:
 1064|      0|        bufpush(0x0469);
 1065|      0|        break;
 1066|      0|      case 0x046A:
 1067|      0|        bufpush(0x046B);
 1068|      0|        break;
 1069|      0|      case 0x046C:
 1070|      0|        bufpush(0x046D);
 1071|      0|        break;
 1072|      0|      case 0x046E:
 1073|      0|        bufpush(0x046F);
 1074|      0|        break;
 1075|      0|      case 0x0470:
 1076|      0|        bufpush(0x0471);
 1077|      0|        break;
 1078|      0|      case 0x0472:
 1079|      0|        bufpush(0x0473);
 1080|      0|        break;
 1081|      0|      case 0x0474:
 1082|      0|        bufpush(0x0475);
 1083|      0|        break;
 1084|      0|      case 0x0476:
 1085|      0|        bufpush(0x0477);
 1086|      0|        break;
 1087|      0|      case 0x0478:
 1088|      0|        bufpush(0x0479);
 1089|      0|        break;
 1090|      0|      case 0x047A:
 1091|      0|        bufpush(0x047B);
 1092|      0|        break;
 1093|      0|      case 0x047C:
 1094|      0|        bufpush(0x047D);
 1095|      0|        break;
 1096|      0|      case 0x047E:
 1097|      0|        bufpush(0x047F);
 1098|      0|        break;
 1099|      0|      case 0x0480:
 1100|      0|        bufpush(0x0481);
 1101|      0|        break;
 1102|      0|      case 0x048A:
 1103|      0|        bufpush(0x048B);
 1104|      0|        break;
 1105|      0|      case 0x048C:
 1106|      0|        bufpush(0x048D);
 1107|      0|        break;
 1108|      0|      case 0x048E:
 1109|      0|        bufpush(0x048F);
 1110|      0|        break;
 1111|      0|      case 0x0490:
 1112|      0|        bufpush(0x0491);
 1113|      0|        break;
 1114|      0|      case 0x0492:
 1115|      0|        bufpush(0x0493);
 1116|      0|        break;
 1117|      0|      case 0x0494:
 1118|      0|        bufpush(0x0495);
 1119|      0|        break;
 1120|      0|      case 0x0496:
 1121|      0|        bufpush(0x0497);
 1122|      0|        break;
 1123|      0|      case 0x0498:
 1124|      0|        bufpush(0x0499);
 1125|      0|        break;
 1126|      0|      case 0x049A:
 1127|      0|        bufpush(0x049B);
 1128|      0|        break;
 1129|      0|      case 0x049C:
 1130|      0|        bufpush(0x049D);
 1131|      0|        break;
 1132|      0|      case 0x049E:
 1133|      0|        bufpush(0x049F);
 1134|      0|        break;
 1135|      0|      case 0x04A0:
 1136|      0|        bufpush(0x04A1);
 1137|      0|        break;
 1138|      0|      case 0x04A2:
 1139|      0|        bufpush(0x04A3);
 1140|      0|        break;
 1141|      0|      case 0x04A4:
 1142|      0|        bufpush(0x04A5);
 1143|      0|        break;
 1144|      0|      case 0x04A6:
 1145|      0|        bufpush(0x04A7);
 1146|      0|        break;
 1147|      0|      case 0x04A8:
 1148|      0|        bufpush(0x04A9);
 1149|      0|        break;
 1150|      0|      case 0x04AA:
 1151|      0|        bufpush(0x04AB);
 1152|      0|        break;
 1153|      0|      case 0x04AC:
 1154|      0|        bufpush(0x04AD);
 1155|      0|        break;
 1156|      0|      case 0x04AE:
 1157|      0|        bufpush(0x04AF);
 1158|      0|        break;
 1159|      0|      case 0x04B0:
 1160|      0|        bufpush(0x04B1);
 1161|      0|        break;
 1162|      0|      case 0x04B2:
 1163|      0|        bufpush(0x04B3);
 1164|      0|        break;
 1165|      0|      case 0x04B4:
 1166|      0|        bufpush(0x04B5);
 1167|      0|        break;
 1168|      0|      case 0x04B6:
 1169|      0|        bufpush(0x04B7);
 1170|      0|        break;
 1171|      0|      case 0x04B8:
 1172|      0|        bufpush(0x04B9);
 1173|      0|        break;
 1174|      0|      case 0x04BA:
 1175|      0|        bufpush(0x04BB);
 1176|      0|        break;
 1177|      0|      case 0x04BC:
 1178|      0|        bufpush(0x04BD);
 1179|      0|        break;
 1180|      0|      case 0x04BE:
 1181|      0|        bufpush(0x04BF);
 1182|      0|        break;
 1183|      0|      case 0x04C0:
 1184|      0|        bufpush(0x04CF);
 1185|      0|        break;
 1186|      0|      case 0x04C1:
 1187|      0|        bufpush(0x04C2);
 1188|      0|        break;
 1189|      0|      case 0x04C3:
 1190|      0|        bufpush(0x04C4);
 1191|      0|        break;
 1192|      0|      case 0x04C5:
 1193|      0|        bufpush(0x04C6);
 1194|      0|        break;
 1195|      0|      case 0x04C7:
 1196|      0|        bufpush(0x04C8);
 1197|      0|        break;
 1198|      0|      case 0x04C9:
 1199|      0|        bufpush(0x04CA);
 1200|      0|        break;
 1201|      0|      case 0x04CB:
 1202|      0|        bufpush(0x04CC);
 1203|      0|        break;
 1204|      0|      case 0x04CD:
 1205|      0|        bufpush(0x04CE);
 1206|      0|        break;
 1207|      0|      case 0x04D0:
 1208|      0|        bufpush(0x04D1);
 1209|      0|        break;
 1210|      0|      case 0x04D2:
 1211|      0|        bufpush(0x04D3);
 1212|      0|        break;
 1213|      0|      case 0x04D4:
 1214|      0|        bufpush(0x04D5);
 1215|      0|        break;
 1216|      0|      case 0x04D6:
 1217|      0|        bufpush(0x04D7);
 1218|      0|        break;
 1219|      0|      case 0x04D8:
 1220|      0|        bufpush(0x04D9);
 1221|      0|        break;
 1222|      0|      case 0x04DA:
 1223|      0|        bufpush(0x04DB);
 1224|      0|        break;
 1225|      0|      case 0x04DC:
 1226|      0|        bufpush(0x04DD);
 1227|      0|        break;
 1228|      0|      case 0x04DE:
 1229|      0|        bufpush(0x04DF);
 1230|      0|        break;
 1231|      0|      case 0x04E0:
 1232|      0|        bufpush(0x04E1);
 1233|      0|        break;
 1234|      0|      case 0x04E2:
 1235|      0|        bufpush(0x04E3);
 1236|      0|        break;
 1237|      0|      case 0x04E4:
 1238|      0|        bufpush(0x04E5);
 1239|      0|        break;
 1240|      0|      case 0x04E6:
 1241|      0|        bufpush(0x04E7);
 1242|      0|        break;
 1243|      0|      case 0x04E8:
 1244|      0|        bufpush(0x04E9);
 1245|      0|        break;
 1246|      0|      case 0x04EA:
 1247|      0|        bufpush(0x04EB);
 1248|      0|        break;
 1249|      0|      case 0x04EC:
 1250|      0|        bufpush(0x04ED);
 1251|      0|        break;
 1252|      0|      case 0x04EE:
 1253|      0|        bufpush(0x04EF);
 1254|      0|        break;
 1255|      0|      case 0x04F0:
 1256|      0|        bufpush(0x04F1);
 1257|      0|        break;
 1258|      0|      case 0x04F2:
 1259|      0|        bufpush(0x04F3);
 1260|      0|        break;
 1261|      0|      case 0x04F4:
 1262|      0|        bufpush(0x04F5);
 1263|      0|        break;
 1264|      0|      case 0x04F6:
 1265|      0|        bufpush(0x04F7);
 1266|      0|        break;
 1267|      0|      case 0x04F8:
 1268|      0|        bufpush(0x04F9);
 1269|      0|        break;
 1270|      0|      case 0x04FA:
 1271|      0|        bufpush(0x04FB);
 1272|      0|        break;
 1273|      0|      case 0x04FC:
 1274|      0|        bufpush(0x04FD);
 1275|      0|        break;
 1276|      0|      case 0x04FE:
 1277|      0|        bufpush(0x04FF);
 1278|      0|        break;
 1279|      0|      case 0x0500:
 1280|      0|        bufpush(0x0501);
 1281|      0|        break;
 1282|      0|      case 0x0502:
 1283|      0|        bufpush(0x0503);
 1284|      0|        break;
 1285|      0|      case 0x0504:
 1286|      0|        bufpush(0x0505);
 1287|      0|        break;
 1288|      0|      case 0x0506:
 1289|      0|        bufpush(0x0507);
 1290|      0|        break;
 1291|      0|      case 0x0508:
 1292|      0|        bufpush(0x0509);
 1293|      0|        break;
 1294|      0|      case 0x050A:
 1295|      0|        bufpush(0x050B);
 1296|      0|        break;
 1297|      0|      case 0x050C:
 1298|      0|        bufpush(0x050D);
 1299|      0|        break;
 1300|      0|      case 0x050E:
 1301|      0|        bufpush(0x050F);
 1302|      0|        break;
 1303|      0|      case 0x0510:
 1304|      0|        bufpush(0x0511);
 1305|      0|        break;
 1306|      0|      case 0x0512:
 1307|      0|        bufpush(0x0513);
 1308|      0|        break;
 1309|      0|      case 0x0514:
 1310|      0|        bufpush(0x0515);
 1311|      0|        break;
 1312|      0|      case 0x0516:
 1313|      0|        bufpush(0x0517);
 1314|      0|        break;
 1315|      0|      case 0x0518:
 1316|      0|        bufpush(0x0519);
 1317|      0|        break;
 1318|      0|      case 0x051A:
 1319|      0|        bufpush(0x051B);
 1320|      0|        break;
 1321|      0|      case 0x051C:
 1322|      0|        bufpush(0x051D);
 1323|      0|        break;
 1324|      0|      case 0x051E:
 1325|      0|        bufpush(0x051F);
 1326|      0|        break;
 1327|      0|      case 0x0520:
 1328|      0|        bufpush(0x0521);
 1329|      0|        break;
 1330|      0|      case 0x0522:
 1331|      0|        bufpush(0x0523);
 1332|      0|        break;
 1333|      0|      case 0x0524:
 1334|      0|        bufpush(0x0525);
 1335|      0|        break;
 1336|      0|      case 0x0526:
 1337|      0|        bufpush(0x0527);
 1338|      0|        break;
 1339|      0|      case 0x0528:
 1340|      0|        bufpush(0x0529);
 1341|      0|        break;
 1342|      0|      case 0x052A:
 1343|      0|        bufpush(0x052B);
 1344|      0|        break;
 1345|      0|      case 0x052C:
 1346|      0|        bufpush(0x052D);
 1347|      0|        break;
 1348|      0|      case 0x052E:
 1349|      0|        bufpush(0x052F);
 1350|      0|        break;
 1351|      0|      case 0x0531:
 1352|      0|        bufpush(0x0561);
 1353|      0|        break;
 1354|      0|      case 0x0532:
 1355|      0|        bufpush(0x0562);
 1356|      0|        break;
 1357|      0|      case 0x0533:
 1358|      0|        bufpush(0x0563);
 1359|      0|        break;
 1360|      0|      case 0x0534:
 1361|      0|        bufpush(0x0564);
 1362|      0|        break;
 1363|      0|      case 0x0535:
 1364|      0|        bufpush(0x0565);
 1365|      0|        break;
 1366|      0|      case 0x0536:
 1367|      0|        bufpush(0x0566);
 1368|      0|        break;
 1369|      0|      case 0x0537:
 1370|      0|        bufpush(0x0567);
 1371|      0|        break;
 1372|      0|      case 0x0538:
 1373|      0|        bufpush(0x0568);
 1374|      0|        break;
 1375|      0|      case 0x0539:
 1376|      0|        bufpush(0x0569);
 1377|      0|        break;
 1378|      0|      case 0x053A:
 1379|      0|        bufpush(0x056A);
 1380|      0|        break;
 1381|      0|      case 0x053B:
 1382|      0|        bufpush(0x056B);
 1383|      0|        break;
 1384|      0|      case 0x053C:
 1385|      0|        bufpush(0x056C);
 1386|      0|        break;
 1387|      0|      case 0x053D:
 1388|      0|        bufpush(0x056D);
 1389|      0|        break;
 1390|      0|      case 0x053E:
 1391|      0|        bufpush(0x056E);
 1392|      0|        break;
 1393|      0|      case 0x053F:
 1394|      0|        bufpush(0x056F);
 1395|      0|        break;
 1396|      0|      case 0x0540:
 1397|      0|        bufpush(0x0570);
 1398|      0|        break;
 1399|      0|      case 0x0541:
 1400|      0|        bufpush(0x0571);
 1401|      0|        break;
 1402|      0|      case 0x0542:
 1403|      0|        bufpush(0x0572);
 1404|      0|        break;
 1405|      0|      case 0x0543:
 1406|      0|        bufpush(0x0573);
 1407|      0|        break;
 1408|      0|      case 0x0544:
 1409|      0|        bufpush(0x0574);
 1410|      0|        break;
 1411|      0|      case 0x0545:
 1412|      0|        bufpush(0x0575);
 1413|      0|        break;
 1414|      0|      case 0x0546:
 1415|      0|        bufpush(0x0576);
 1416|      0|        break;
 1417|      0|      case 0x0547:
 1418|      0|        bufpush(0x0577);
 1419|      0|        break;
 1420|      0|      case 0x0548:
 1421|      0|        bufpush(0x0578);
 1422|      0|        break;
 1423|      0|      case 0x0549:
 1424|      0|        bufpush(0x0579);
 1425|      0|        break;
 1426|      0|      case 0x054A:
 1427|      0|        bufpush(0x057A);
 1428|      0|        break;
 1429|      0|      case 0x054B:
 1430|      0|        bufpush(0x057B);
 1431|      0|        break;
 1432|      0|      case 0x054C:
 1433|      0|        bufpush(0x057C);
 1434|      0|        break;
 1435|      0|      case 0x054D:
 1436|      0|        bufpush(0x057D);
 1437|      0|        break;
 1438|      0|      case 0x054E:
 1439|      0|        bufpush(0x057E);
 1440|      0|        break;
 1441|      0|      case 0x054F:
 1442|      0|        bufpush(0x057F);
 1443|      0|        break;
 1444|      0|      case 0x0550:
 1445|      0|        bufpush(0x0580);
 1446|      0|        break;
 1447|      0|      case 0x0551:
 1448|      0|        bufpush(0x0581);
 1449|      0|        break;
 1450|      0|      case 0x0552:
 1451|      0|        bufpush(0x0582);
 1452|      0|        break;
 1453|      0|      case 0x0553:
 1454|      0|        bufpush(0x0583);
 1455|      0|        break;
 1456|      0|      case 0x0554:
 1457|      0|        bufpush(0x0584);
 1458|      0|        break;
 1459|      0|      case 0x0555:
 1460|      0|        bufpush(0x0585);
 1461|      0|        break;
 1462|      0|      case 0x0556:
 1463|      0|        bufpush(0x0586);
 1464|      0|        break;
 1465|      0|      case 0x0587:
 1466|      0|        bufpush(0x0565);
 1467|      0|        bufpush(0x0582);
 1468|      0|        break;
 1469|      0|      case 0x10A0:
 1470|      0|        bufpush(0x2D00);
 1471|      0|        break;
 1472|      0|      case 0x10A1:
 1473|      0|        bufpush(0x2D01);
 1474|      0|        break;
 1475|      0|      case 0x10A2:
 1476|      0|        bufpush(0x2D02);
 1477|      0|        break;
 1478|      0|      case 0x10A3:
 1479|      0|        bufpush(0x2D03);
 1480|      0|        break;
 1481|      0|      case 0x10A4:
 1482|      0|        bufpush(0x2D04);
 1483|      0|        break;
 1484|      0|      case 0x10A5:
 1485|      0|        bufpush(0x2D05);
 1486|      0|        break;
 1487|      0|      case 0x10A6:
 1488|      0|        bufpush(0x2D06);
 1489|      0|        break;
 1490|      0|      case 0x10A7:
 1491|      0|        bufpush(0x2D07);
 1492|      0|        break;
 1493|      0|      case 0x10A8:
 1494|      0|        bufpush(0x2D08);
 1495|      0|        break;
 1496|      0|      case 0x10A9:
 1497|      0|        bufpush(0x2D09);
 1498|      0|        break;
 1499|      0|      case 0x10AA:
 1500|      0|        bufpush(0x2D0A);
 1501|      0|        break;
 1502|      0|      case 0x10AB:
 1503|      0|        bufpush(0x2D0B);
 1504|      0|        break;
 1505|      0|      case 0x10AC:
 1506|      0|        bufpush(0x2D0C);
 1507|      0|        break;
 1508|      0|      case 0x10AD:
 1509|      0|        bufpush(0x2D0D);
 1510|      0|        break;
 1511|      0|      case 0x10AE:
 1512|      0|        bufpush(0x2D0E);
 1513|      0|        break;
 1514|      0|      case 0x10AF:
 1515|      0|        bufpush(0x2D0F);
 1516|      0|        break;
 1517|      0|      case 0x10B0:
 1518|      0|        bufpush(0x2D10);
 1519|      0|        break;
 1520|      0|      case 0x10B1:
 1521|      0|        bufpush(0x2D11);
 1522|      0|        break;
 1523|      0|      case 0x10B2:
 1524|      0|        bufpush(0x2D12);
 1525|      0|        break;
 1526|      0|      case 0x10B3:
 1527|      0|        bufpush(0x2D13);
 1528|      0|        break;
 1529|      0|      case 0x10B4:
 1530|      0|        bufpush(0x2D14);
 1531|      0|        break;
 1532|      0|      case 0x10B5:
 1533|      0|        bufpush(0x2D15);
 1534|      0|        break;
 1535|      0|      case 0x10B6:
 1536|      0|        bufpush(0x2D16);
 1537|      0|        break;
 1538|      0|      case 0x10B7:
 1539|      0|        bufpush(0x2D17);
 1540|      0|        break;
 1541|      0|      case 0x10B8:
 1542|      0|        bufpush(0x2D18);
 1543|      0|        break;
 1544|      0|      case 0x10B9:
 1545|      0|        bufpush(0x2D19);
 1546|      0|        break;
 1547|      0|      case 0x10BA:
 1548|      0|        bufpush(0x2D1A);
 1549|      0|        break;
 1550|      0|      case 0x10BB:
 1551|      0|        bufpush(0x2D1B);
 1552|      0|        break;
 1553|      0|      case 0x10BC:
 1554|      0|        bufpush(0x2D1C);
 1555|      0|        break;
 1556|      0|      case 0x10BD:
 1557|      0|        bufpush(0x2D1D);
 1558|      0|        break;
 1559|      0|      case 0x10BE:
 1560|      0|        bufpush(0x2D1E);
 1561|      0|        break;
 1562|      0|      case 0x10BF:
 1563|      0|        bufpush(0x2D1F);
 1564|      0|        break;
 1565|      0|      case 0x10C0:
 1566|      0|        bufpush(0x2D20);
 1567|      0|        break;
 1568|      0|      case 0x10C1:
 1569|      0|        bufpush(0x2D21);
 1570|      0|        break;
 1571|      0|      case 0x10C2:
 1572|      0|        bufpush(0x2D22);
 1573|      0|        break;
 1574|      0|      case 0x10C3:
 1575|      0|        bufpush(0x2D23);
 1576|      0|        break;
 1577|      0|      case 0x10C4:
 1578|      0|        bufpush(0x2D24);
 1579|      0|        break;
 1580|      0|      case 0x10C5:
 1581|      0|        bufpush(0x2D25);
 1582|      0|        break;
 1583|      0|      case 0x10C7:
 1584|      0|        bufpush(0x2D27);
 1585|      0|        break;
 1586|      0|      case 0x10CD:
 1587|      0|        bufpush(0x2D2D);
 1588|      0|        break;
 1589|      0|      case 0x13F8:
 1590|      0|        bufpush(0x13F0);
 1591|      0|        break;
 1592|      0|      case 0x13F9:
 1593|      0|        bufpush(0x13F1);
 1594|      0|        break;
 1595|      0|      case 0x13FA:
 1596|      0|        bufpush(0x13F2);
 1597|      0|        break;
 1598|      0|      case 0x13FB:
 1599|      0|        bufpush(0x13F3);
 1600|      0|        break;
 1601|      0|      case 0x13FC:
 1602|      0|        bufpush(0x13F4);
 1603|      0|        break;
 1604|      0|      case 0x13FD:
 1605|      0|        bufpush(0x13F5);
 1606|      0|        break;
 1607|      0|      case 0x1C80:
 1608|      0|        bufpush(0x0432);
 1609|      0|        break;
 1610|      0|      case 0x1C81:
 1611|      0|        bufpush(0x0434);
 1612|      0|        break;
 1613|      0|      case 0x1C82:
 1614|      0|        bufpush(0x043E);
 1615|      0|        break;
 1616|      0|      case 0x1C83:
 1617|      0|        bufpush(0x0441);
 1618|      0|        break;
 1619|      0|      case 0x1C84:
 1620|      0|        bufpush(0x0442);
 1621|      0|        break;
 1622|      0|      case 0x1C85:
 1623|      0|        bufpush(0x0442);
 1624|      0|        break;
 1625|      0|      case 0x1C86:
 1626|      0|        bufpush(0x044A);
 1627|      0|        break;
 1628|      0|      case 0x1C87:
 1629|      0|        bufpush(0x0463);
 1630|      0|        break;
 1631|      0|      case 0x1C88:
 1632|      0|        bufpush(0xA64B);
 1633|      0|        break;
 1634|      0|      case 0x1C90:
 1635|      0|        bufpush(0x10D0);
 1636|      0|        break;
 1637|      0|      case 0x1C91:
 1638|      0|        bufpush(0x10D1);
 1639|      0|        break;
 1640|      0|      case 0x1C92:
 1641|      0|        bufpush(0x10D2);
 1642|      0|        break;
 1643|      0|      case 0x1C93:
 1644|      0|        bufpush(0x10D3);
 1645|      0|        break;
 1646|      0|      case 0x1C94:
 1647|      0|        bufpush(0x10D4);
 1648|      0|        break;
 1649|      0|      case 0x1C95:
 1650|      0|        bufpush(0x10D5);
 1651|      0|        break;
 1652|      0|      case 0x1C96:
 1653|      0|        bufpush(0x10D6);
 1654|      0|        break;
 1655|      0|      case 0x1C97:
 1656|      0|        bufpush(0x10D7);
 1657|      0|        break;
 1658|      0|      case 0x1C98:
 1659|      0|        bufpush(0x10D8);
 1660|      0|        break;
 1661|      0|      case 0x1C99:
 1662|      0|        bufpush(0x10D9);
 1663|      0|        break;
 1664|      0|      case 0x1C9A:
 1665|      0|        bufpush(0x10DA);
 1666|      0|        break;
 1667|      0|      case 0x1C9B:
 1668|      0|        bufpush(0x10DB);
 1669|      0|        break;
 1670|      0|      case 0x1C9C:
 1671|      0|        bufpush(0x10DC);
 1672|      0|        break;
 1673|      0|      case 0x1C9D:
 1674|      0|        bufpush(0x10DD);
 1675|      0|        break;
 1676|      0|      case 0x1C9E:
 1677|      0|        bufpush(0x10DE);
 1678|      0|        break;
 1679|      0|      case 0x1C9F:
 1680|      0|        bufpush(0x10DF);
 1681|      0|        break;
 1682|      0|      case 0x1CA0:
 1683|      0|        bufpush(0x10E0);
 1684|      0|        break;
 1685|      0|      case 0x1CA1:
 1686|      0|        bufpush(0x10E1);
 1687|      0|        break;
 1688|      0|      case 0x1CA2:
 1689|      0|        bufpush(0x10E2);
 1690|      0|        break;
 1691|      0|      case 0x1CA3:
 1692|      0|        bufpush(0x10E3);
 1693|      0|        break;
 1694|      0|      case 0x1CA4:
 1695|      0|        bufpush(0x10E4);
 1696|      0|        break;
 1697|      0|      case 0x1CA5:
 1698|      0|        bufpush(0x10E5);
 1699|      0|        break;
 1700|      0|      case 0x1CA6:
 1701|      0|        bufpush(0x10E6);
 1702|      0|        break;
 1703|      0|      case 0x1CA7:
 1704|      0|        bufpush(0x10E7);
 1705|      0|        break;
 1706|      0|      case 0x1CA8:
 1707|      0|        bufpush(0x10E8);
 1708|      0|        break;
 1709|      0|      case 0x1CA9:
 1710|      0|        bufpush(0x10E9);
 1711|      0|        break;
 1712|      0|      case 0x1CAA:
 1713|      0|        bufpush(0x10EA);
 1714|      0|        break;
 1715|      0|      case 0x1CAB:
 1716|      0|        bufpush(0x10EB);
 1717|      0|        break;
 1718|      0|      case 0x1CAC:
 1719|      0|        bufpush(0x10EC);
 1720|      0|        break;
 1721|      0|      case 0x1CAD:
 1722|      0|        bufpush(0x10ED);
 1723|      0|        break;
 1724|      0|      case 0x1CAE:
 1725|      0|        bufpush(0x10EE);
 1726|      0|        break;
 1727|      0|      case 0x1CAF:
 1728|      0|        bufpush(0x10EF);
 1729|      0|        break;
 1730|      0|      case 0x1CB0:
 1731|      0|        bufpush(0x10F0);
 1732|      0|        break;
 1733|      0|      case 0x1CB1:
 1734|      0|        bufpush(0x10F1);
 1735|      0|        break;
 1736|      0|      case 0x1CB2:
 1737|      0|        bufpush(0x10F2);
 1738|      0|        break;
 1739|      0|      case 0x1CB3:
 1740|      0|        bufpush(0x10F3);
 1741|      0|        break;
 1742|      0|      case 0x1CB4:
 1743|      0|        bufpush(0x10F4);
 1744|      0|        break;
 1745|      0|      case 0x1CB5:
 1746|      0|        bufpush(0x10F5);
 1747|      0|        break;
 1748|      0|      case 0x1CB6:
 1749|      0|        bufpush(0x10F6);
 1750|      0|        break;
 1751|      0|      case 0x1CB7:
 1752|      0|        bufpush(0x10F7);
 1753|      0|        break;
 1754|      0|      case 0x1CB8:
 1755|      0|        bufpush(0x10F8);
 1756|      0|        break;
 1757|      0|      case 0x1CB9:
 1758|      0|        bufpush(0x10F9);
 1759|      0|        break;
 1760|      0|      case 0x1CBA:
 1761|      0|        bufpush(0x10FA);
 1762|      0|        break;
 1763|      0|      case 0x1CBD:
 1764|      0|        bufpush(0x10FD);
 1765|      0|        break;
 1766|      0|      case 0x1CBE:
 1767|      0|        bufpush(0x10FE);
 1768|      0|        break;
 1769|      0|      case 0x1CBF:
 1770|      0|        bufpush(0x10FF);
 1771|      0|        break;
 1772|      0|      case 0x1E00:
 1773|      0|        bufpush(0x1E01);
 1774|      0|        break;
 1775|      0|      case 0x1E02:
 1776|      0|        bufpush(0x1E03);
 1777|      0|        break;
 1778|      0|      case 0x1E04:
 1779|      0|        bufpush(0x1E05);
 1780|      0|        break;
 1781|      0|      case 0x1E06:
 1782|      0|        bufpush(0x1E07);
 1783|      0|        break;
 1784|      0|      case 0x1E08:
 1785|      0|        bufpush(0x1E09);
 1786|      0|        break;
 1787|      0|      case 0x1E0A:
 1788|      0|        bufpush(0x1E0B);
 1789|      0|        break;
 1790|      0|      case 0x1E0C:
 1791|      0|        bufpush(0x1E0D);
 1792|      0|        break;
 1793|      0|      case 0x1E0E:
 1794|      0|        bufpush(0x1E0F);
 1795|      0|        break;
 1796|      0|      case 0x1E10:
 1797|      0|        bufpush(0x1E11);
 1798|      0|        break;
 1799|      0|      case 0x1E12:
 1800|      0|        bufpush(0x1E13);
 1801|      0|        break;
 1802|      0|      case 0x1E14:
 1803|      0|        bufpush(0x1E15);
 1804|      0|        break;
 1805|      0|      case 0x1E16:
 1806|      0|        bufpush(0x1E17);
 1807|      0|        break;
 1808|      0|      case 0x1E18:
 1809|      0|        bufpush(0x1E19);
 1810|      0|        break;
 1811|      0|      case 0x1E1A:
 1812|      0|        bufpush(0x1E1B);
 1813|      0|        break;
 1814|      0|      case 0x1E1C:
 1815|      0|        bufpush(0x1E1D);
 1816|      0|        break;
 1817|      0|      case 0x1E1E:
 1818|      0|        bufpush(0x1E1F);
 1819|      0|        break;
 1820|      0|      case 0x1E20:
 1821|      0|        bufpush(0x1E21);
 1822|      0|        break;
 1823|      0|      case 0x1E22:
 1824|      0|        bufpush(0x1E23);
 1825|      0|        break;
 1826|      0|      case 0x1E24:
 1827|      0|        bufpush(0x1E25);
 1828|      0|        break;
 1829|      0|      case 0x1E26:
 1830|      0|        bufpush(0x1E27);
 1831|      0|        break;
 1832|      0|      case 0x1E28:
 1833|      0|        bufpush(0x1E29);
 1834|      0|        break;
 1835|      0|      case 0x1E2A:
 1836|      0|        bufpush(0x1E2B);
 1837|      0|        break;
 1838|      0|      case 0x1E2C:
 1839|      0|        bufpush(0x1E2D);
 1840|      0|        break;
 1841|      0|      case 0x1E2E:
 1842|      0|        bufpush(0x1E2F);
 1843|      0|        break;
 1844|      0|      case 0x1E30:
 1845|      0|        bufpush(0x1E31);
 1846|      0|        break;
 1847|      0|      case 0x1E32:
 1848|      0|        bufpush(0x1E33);
 1849|      0|        break;
 1850|      0|      case 0x1E34:
 1851|      0|        bufpush(0x1E35);
 1852|      0|        break;
 1853|      0|      case 0x1E36:
 1854|      0|        bufpush(0x1E37);
 1855|      0|        break;
 1856|      0|      case 0x1E38:
 1857|      0|        bufpush(0x1E39);
 1858|      0|        break;
 1859|      0|      case 0x1E3A:
 1860|      0|        bufpush(0x1E3B);
 1861|      0|        break;
 1862|      0|      case 0x1E3C:
 1863|      0|        bufpush(0x1E3D);
 1864|      0|        break;
 1865|      0|      case 0x1E3E:
 1866|      0|        bufpush(0x1E3F);
 1867|      0|        break;
 1868|      0|      case 0x1E40:
 1869|      0|        bufpush(0x1E41);
 1870|      0|        break;
 1871|      0|      case 0x1E42:
 1872|      0|        bufpush(0x1E43);
 1873|      0|        break;
 1874|      0|      case 0x1E44:
 1875|      0|        bufpush(0x1E45);
 1876|      0|        break;
 1877|      0|      case 0x1E46:
 1878|      0|        bufpush(0x1E47);
 1879|      0|        break;
 1880|      0|      case 0x1E48:
 1881|      0|        bufpush(0x1E49);
 1882|      0|        break;
 1883|      0|      case 0x1E4A:
 1884|      0|        bufpush(0x1E4B);
 1885|      0|        break;
 1886|      0|      case 0x1E4C:
 1887|      0|        bufpush(0x1E4D);
 1888|      0|        break;
 1889|      0|      case 0x1E4E:
 1890|      0|        bufpush(0x1E4F);
 1891|      0|        break;
 1892|      0|      case 0x1E50:
 1893|      0|        bufpush(0x1E51);
 1894|      0|        break;
 1895|      0|      case 0x1E52:
 1896|      0|        bufpush(0x1E53);
 1897|      0|        break;
 1898|      0|      case 0x1E54:
 1899|      0|        bufpush(0x1E55);
 1900|      0|        break;
 1901|      0|      case 0x1E56:
 1902|      0|        bufpush(0x1E57);
 1903|      0|        break;
 1904|      0|      case 0x1E58:
 1905|      0|        bufpush(0x1E59);
 1906|      0|        break;
 1907|      0|      case 0x1E5A:
 1908|      0|        bufpush(0x1E5B);
 1909|      0|        break;
 1910|      0|      case 0x1E5C:
 1911|      0|        bufpush(0x1E5D);
 1912|      0|        break;
 1913|      0|      case 0x1E5E:
 1914|      0|        bufpush(0x1E5F);
 1915|      0|        break;
 1916|      0|      case 0x1E60:
 1917|      0|        bufpush(0x1E61);
 1918|      0|        break;
 1919|      0|      case 0x1E62:
 1920|      0|        bufpush(0x1E63);
 1921|      0|        break;
 1922|      0|      case 0x1E64:
 1923|      0|        bufpush(0x1E65);
 1924|      0|        break;
 1925|      0|      case 0x1E66:
 1926|      0|        bufpush(0x1E67);
 1927|      0|        break;
 1928|      0|      case 0x1E68:
 1929|      0|        bufpush(0x1E69);
 1930|      0|        break;
 1931|      0|      case 0x1E6A:
 1932|      0|        bufpush(0x1E6B);
 1933|      0|        break;
 1934|      0|      case 0x1E6C:
 1935|      0|        bufpush(0x1E6D);
 1936|      0|        break;
 1937|      0|      case 0x1E6E:
 1938|      0|        bufpush(0x1E6F);
 1939|      0|        break;
 1940|      0|      case 0x1E70:
 1941|      0|        bufpush(0x1E71);
 1942|      0|        break;
 1943|      0|      case 0x1E72:
 1944|      0|        bufpush(0x1E73);
 1945|      0|        break;
 1946|      0|      case 0x1E74:
 1947|      0|        bufpush(0x1E75);
 1948|      0|        break;
 1949|      0|      case 0x1E76:
 1950|      0|        bufpush(0x1E77);
 1951|      0|        break;
 1952|      0|      case 0x1E78:
 1953|      0|        bufpush(0x1E79);
 1954|      0|        break;
 1955|      0|      case 0x1E7A:
 1956|      0|        bufpush(0x1E7B);
 1957|      0|        break;
 1958|      0|      case 0x1E7C:
 1959|      0|        bufpush(0x1E7D);
 1960|      0|        break;
 1961|      0|      case 0x1E7E:
 1962|      0|        bufpush(0x1E7F);
 1963|      0|        break;
 1964|      0|      case 0x1E80:
 1965|      0|        bufpush(0x1E81);
 1966|      0|        break;
 1967|      0|      case 0x1E82:
 1968|      0|        bufpush(0x1E83);
 1969|      0|        break;
 1970|      0|      case 0x1E84:
 1971|      0|        bufpush(0x1E85);
 1972|      0|        break;
 1973|      0|      case 0x1E86:
 1974|      0|        bufpush(0x1E87);
 1975|      0|        break;
 1976|      0|      case 0x1E88:
 1977|      0|        bufpush(0x1E89);
 1978|      0|        break;
 1979|      0|      case 0x1E8A:
 1980|      0|        bufpush(0x1E8B);
 1981|      0|        break;
 1982|      0|      case 0x1E8C:
 1983|      0|        bufpush(0x1E8D);
 1984|      0|        break;
 1985|      0|      case 0x1E8E:
 1986|      0|        bufpush(0x1E8F);
 1987|      0|        break;
 1988|      0|      case 0x1E90:
 1989|      0|        bufpush(0x1E91);
 1990|      0|        break;
 1991|      0|      case 0x1E92:
 1992|      0|        bufpush(0x1E93);
 1993|      0|        break;
 1994|      0|      case 0x1E94:
 1995|      0|        bufpush(0x1E95);
 1996|      0|        break;
 1997|      0|      case 0x1E96:
 1998|      0|        bufpush(0x0068);
 1999|      0|        bufpush(0x0331);
 2000|      0|        break;
 2001|      0|      case 0x1E97:
 2002|      0|        bufpush(0x0074);
 2003|      0|        bufpush(0x0308);
 2004|      0|        break;
 2005|      0|      case 0x1E98:
 2006|      0|        bufpush(0x0077);
 2007|      0|        bufpush(0x030A);
 2008|      0|        break;
 2009|      0|      case 0x1E99:
 2010|      0|        bufpush(0x0079);
 2011|      0|        bufpush(0x030A);
 2012|      0|        break;
 2013|      0|      case 0x1E9A:
 2014|      0|        bufpush(0x0061);
 2015|      0|        bufpush(0x02BE);
 2016|      0|        break;
 2017|      0|      case 0x1E9B:
 2018|      0|        bufpush(0x1E61);
 2019|      0|        break;
 2020|      0|      case 0x1E9E:
 2021|      0|        bufpush(0x0073);
 2022|      0|        bufpush(0x0073);
 2023|      0|        break;
 2024|      0|      case 0x1EA0:
 2025|      0|        bufpush(0x1EA1);
 2026|      0|        break;
 2027|      0|      case 0x1EA2:
 2028|      0|        bufpush(0x1EA3);
 2029|      0|        break;
 2030|      0|      case 0x1EA4:
 2031|      0|        bufpush(0x1EA5);
 2032|      0|        break;
 2033|      0|      case 0x1EA6:
 2034|      0|        bufpush(0x1EA7);
 2035|      0|        break;
 2036|      0|      case 0x1EA8:
 2037|      0|        bufpush(0x1EA9);
 2038|      0|        break;
 2039|      0|      case 0x1EAA:
 2040|      0|        bufpush(0x1EAB);
 2041|      0|        break;
 2042|      0|      case 0x1EAC:
 2043|      0|        bufpush(0x1EAD);
 2044|      0|        break;
 2045|      0|      case 0x1EAE:
 2046|      0|        bufpush(0x1EAF);
 2047|      0|        break;
 2048|      0|      case 0x1EB0:
 2049|      0|        bufpush(0x1EB1);
 2050|      0|        break;
 2051|      0|      case 0x1EB2:
 2052|      0|        bufpush(0x1EB3);
 2053|      0|        break;
 2054|      0|      case 0x1EB4:
 2055|      0|        bufpush(0x1EB5);
 2056|      0|        break;
 2057|      0|      case 0x1EB6:
 2058|      0|        bufpush(0x1EB7);
 2059|      0|        break;
 2060|      0|      case 0x1EB8:
 2061|      0|        bufpush(0x1EB9);
 2062|      0|        break;
 2063|      0|      case 0x1EBA:
 2064|      0|        bufpush(0x1EBB);
 2065|      0|        break;
 2066|      0|      case 0x1EBC:
 2067|      0|        bufpush(0x1EBD);
 2068|      0|        break;
 2069|      0|      case 0x1EBE:
 2070|      0|        bufpush(0x1EBF);
 2071|      0|        break;
 2072|      0|      case 0x1EC0:
 2073|      0|        bufpush(0x1EC1);
 2074|      0|        break;
 2075|      0|      case 0x1EC2:
 2076|      0|        bufpush(0x1EC3);
 2077|      0|        break;
 2078|      0|      case 0x1EC4:
 2079|      0|        bufpush(0x1EC5);
 2080|      0|        break;
 2081|      0|      case 0x1EC6:
 2082|      0|        bufpush(0x1EC7);
 2083|      0|        break;
 2084|      0|      case 0x1EC8:
 2085|      0|        bufpush(0x1EC9);
 2086|      0|        break;
 2087|      0|      case 0x1ECA:
 2088|      0|        bufpush(0x1ECB);
 2089|      0|        break;
 2090|      0|      case 0x1ECC:
 2091|      0|        bufpush(0x1ECD);
 2092|      0|        break;
 2093|      0|      case 0x1ECE:
 2094|      0|        bufpush(0x1ECF);
 2095|      0|        break;
 2096|      0|      case 0x1ED0:
 2097|      0|        bufpush(0x1ED1);
 2098|      0|        break;
 2099|      0|      case 0x1ED2:
 2100|      0|        bufpush(0x1ED3);
 2101|      0|        break;
 2102|      0|      case 0x1ED4:
 2103|      0|        bufpush(0x1ED5);
 2104|      0|        break;
 2105|      0|      case 0x1ED6:
 2106|      0|        bufpush(0x1ED7);
 2107|      0|        break;
 2108|      0|      case 0x1ED8:
 2109|      0|        bufpush(0x1ED9);
 2110|      0|        break;
 2111|      0|      case 0x1EDA:
 2112|      0|        bufpush(0x1EDB);
 2113|      0|        break;
 2114|      0|      case 0x1EDC:
 2115|      0|        bufpush(0x1EDD);
 2116|      0|        break;
 2117|      0|      case 0x1EDE:
 2118|      0|        bufpush(0x1EDF);
 2119|      0|        break;
 2120|      0|      case 0x1EE0:
 2121|      0|        bufpush(0x1EE1);
 2122|      0|        break;
 2123|      0|      case 0x1EE2:
 2124|      0|        bufpush(0x1EE3);
 2125|      0|        break;
 2126|      0|      case 0x1EE4:
 2127|      0|        bufpush(0x1EE5);
 2128|      0|        break;
 2129|      0|      case 0x1EE6:
 2130|      0|        bufpush(0x1EE7);
 2131|      0|        break;
 2132|      0|      case 0x1EE8:
 2133|      0|        bufpush(0x1EE9);
 2134|      0|        break;
 2135|      0|      case 0x1EEA:
 2136|      0|        bufpush(0x1EEB);
 2137|      0|        break;
 2138|      0|      case 0x1EEC:
 2139|      0|        bufpush(0x1EED);
 2140|      0|        break;
 2141|      0|      case 0x1EEE:
 2142|      0|        bufpush(0x1EEF);
 2143|      0|        break;
 2144|      0|      case 0x1EF0:
 2145|      0|        bufpush(0x1EF1);
 2146|      0|        break;
 2147|      0|      case 0x1EF2:
 2148|      0|        bufpush(0x1EF3);
 2149|      0|        break;
 2150|      0|      case 0x1EF4:
 2151|      0|        bufpush(0x1EF5);
 2152|      0|        break;
 2153|      0|      case 0x1EF6:
 2154|      0|        bufpush(0x1EF7);
 2155|      0|        break;
 2156|      0|      case 0x1EF8:
 2157|      0|        bufpush(0x1EF9);
 2158|      0|        break;
 2159|      0|      case 0x1EFA:
 2160|      0|        bufpush(0x1EFB);
 2161|      0|        break;
 2162|      0|      case 0x1EFC:
 2163|      0|        bufpush(0x1EFD);
 2164|      0|        break;
 2165|      0|      case 0x1EFE:
 2166|      0|        bufpush(0x1EFF);
 2167|      0|        break;
 2168|      0|      case 0x1F08:
 2169|      0|        bufpush(0x1F00);
 2170|      0|        break;
 2171|      0|      case 0x1F09:
 2172|      0|        bufpush(0x1F01);
 2173|      0|        break;
 2174|      0|      case 0x1F0A:
 2175|      0|        bufpush(0x1F02);
 2176|      0|        break;
 2177|      0|      case 0x1F0B:
 2178|      0|        bufpush(0x1F03);
 2179|      0|        break;
 2180|      0|      case 0x1F0C:
 2181|      0|        bufpush(0x1F04);
 2182|      0|        break;
 2183|      0|      case 0x1F0D:
 2184|      0|        bufpush(0x1F05);
 2185|      0|        break;
 2186|      0|      case 0x1F0E:
 2187|      0|        bufpush(0x1F06);
 2188|      0|        break;
 2189|      0|      case 0x1F0F:
 2190|      0|        bufpush(0x1F07);
 2191|      0|        break;
 2192|      0|      case 0x1F18:
 2193|      0|        bufpush(0x1F10);
 2194|      0|        break;
 2195|      0|      case 0x1F19:
 2196|      0|        bufpush(0x1F11);
 2197|      0|        break;
 2198|      0|      case 0x1F1A:
 2199|      0|        bufpush(0x1F12);
 2200|      0|        break;
 2201|      0|      case 0x1F1B:
 2202|      0|        bufpush(0x1F13);
 2203|      0|        break;
 2204|      0|      case 0x1F1C:
 2205|      0|        bufpush(0x1F14);
 2206|      0|        break;
 2207|      0|      case 0x1F1D:
 2208|      0|        bufpush(0x1F15);
 2209|      0|        break;
 2210|      0|      case 0x1F28:
 2211|      0|        bufpush(0x1F20);
 2212|      0|        break;
 2213|      0|      case 0x1F29:
 2214|      0|        bufpush(0x1F21);
 2215|      0|        break;
 2216|      0|      case 0x1F2A:
 2217|      0|        bufpush(0x1F22);
 2218|      0|        break;
 2219|      0|      case 0x1F2B:
 2220|      0|        bufpush(0x1F23);
 2221|      0|        break;
 2222|      0|      case 0x1F2C:
 2223|      0|        bufpush(0x1F24);
 2224|      0|        break;
 2225|      0|      case 0x1F2D:
 2226|      0|        bufpush(0x1F25);
 2227|      0|        break;
 2228|      0|      case 0x1F2E:
 2229|      0|        bufpush(0x1F26);
 2230|      0|        break;
 2231|      0|      case 0x1F2F:
 2232|      0|        bufpush(0x1F27);
 2233|      0|        break;
 2234|      0|      case 0x1F38:
 2235|      0|        bufpush(0x1F30);
 2236|      0|        break;
 2237|      0|      case 0x1F39:
 2238|      0|        bufpush(0x1F31);
 2239|      0|        break;
 2240|      0|      case 0x1F3A:
 2241|      0|        bufpush(0x1F32);
 2242|      0|        break;
 2243|      0|      case 0x1F3B:
 2244|      0|        bufpush(0x1F33);
 2245|      0|        break;
 2246|      0|      case 0x1F3C:
 2247|      0|        bufpush(0x1F34);
 2248|      0|        break;
 2249|      0|      case 0x1F3D:
 2250|      0|        bufpush(0x1F35);
 2251|      0|        break;
 2252|      0|      case 0x1F3E:
 2253|      0|        bufpush(0x1F36);
 2254|      0|        break;
 2255|      0|      case 0x1F3F:
 2256|      0|        bufpush(0x1F37);
 2257|      0|        break;
 2258|      0|      case 0x1F48:
 2259|      0|        bufpush(0x1F40);
 2260|      0|        break;
 2261|      0|      case 0x1F49:
 2262|      0|        bufpush(0x1F41);
 2263|      0|        break;
 2264|      0|      case 0x1F4A:
 2265|      0|        bufpush(0x1F42);
 2266|      0|        break;
 2267|      0|      case 0x1F4B:
 2268|      0|        bufpush(0x1F43);
 2269|      0|        break;
 2270|      0|      case 0x1F4C:
 2271|      0|        bufpush(0x1F44);
 2272|      0|        break;
 2273|      0|      case 0x1F4D:
 2274|      0|        bufpush(0x1F45);
 2275|      0|        break;
 2276|      0|      case 0x1F50:
 2277|      0|        bufpush(0x03C5);
 2278|      0|        bufpush(0x0313);
 2279|      0|        break;
 2280|      0|      case 0x1F52:
 2281|      0|        bufpush(0x03C5);
 2282|      0|        bufpush(0x0313);
 2283|      0|        bufpush(0x0300);
 2284|      0|        break;
 2285|      0|      case 0x1F54:
 2286|      0|        bufpush(0x03C5);
 2287|      0|        bufpush(0x0313);
 2288|      0|        bufpush(0x0301);
 2289|      0|        break;
 2290|      0|      case 0x1F56:
 2291|      0|        bufpush(0x03C5);
 2292|      0|        bufpush(0x0313);
 2293|      0|        bufpush(0x0342);
 2294|      0|        break;
 2295|      0|      case 0x1F59:
 2296|      0|        bufpush(0x1F51);
 2297|      0|        break;
 2298|      0|      case 0x1F5B:
 2299|      0|        bufpush(0x1F53);
 2300|      0|        break;
 2301|      0|      case 0x1F5D:
 2302|      0|        bufpush(0x1F55);
 2303|      0|        break;
 2304|      0|      case 0x1F5F:
 2305|      0|        bufpush(0x1F57);
 2306|      0|        break;
 2307|      0|      case 0x1F68:
 2308|      0|        bufpush(0x1F60);
 2309|      0|        break;
 2310|      0|      case 0x1F69:
 2311|      0|        bufpush(0x1F61);
 2312|      0|        break;
 2313|      0|      case 0x1F6A:
 2314|      0|        bufpush(0x1F62);
 2315|      0|        break;
 2316|      0|      case 0x1F6B:
 2317|      0|        bufpush(0x1F63);
 2318|      0|        break;
 2319|      0|      case 0x1F6C:
 2320|      0|        bufpush(0x1F64);
 2321|      0|        break;
 2322|      0|      case 0x1F6D:
 2323|      0|        bufpush(0x1F65);
 2324|      0|        break;
 2325|      0|      case 0x1F6E:
 2326|      0|        bufpush(0x1F66);
 2327|      0|        break;
 2328|      0|      case 0x1F6F:
 2329|      0|        bufpush(0x1F67);
 2330|      0|        break;
 2331|      0|      case 0x1F80:
 2332|      0|        bufpush(0x1F00);
 2333|      0|        bufpush(0x03B9);
 2334|      0|        break;
 2335|      0|      case 0x1F81:
 2336|      0|        bufpush(0x1F01);
 2337|      0|        bufpush(0x03B9);
 2338|      0|        break;
 2339|      0|      case 0x1F82:
 2340|      0|        bufpush(0x1F02);
 2341|      0|        bufpush(0x03B9);
 2342|      0|        break;
 2343|      0|      case 0x1F83:
 2344|      0|        bufpush(0x1F03);
 2345|      0|        bufpush(0x03B9);
 2346|      0|        break;
 2347|      0|      case 0x1F84:
 2348|      0|        bufpush(0x1F04);
 2349|      0|        bufpush(0x03B9);
 2350|      0|        break;
 2351|      0|      case 0x1F85:
 2352|      0|        bufpush(0x1F05);
 2353|      0|        bufpush(0x03B9);
 2354|      0|        break;
 2355|      0|      case 0x1F86:
 2356|      0|        bufpush(0x1F06);
 2357|      0|        bufpush(0x03B9);
 2358|      0|        break;
 2359|      0|      case 0x1F87:
 2360|      0|        bufpush(0x1F07);
 2361|      0|        bufpush(0x03B9);
 2362|      0|        break;
 2363|      0|      case 0x1F88:
 2364|      0|        bufpush(0x1F00);
 2365|      0|        bufpush(0x03B9);
 2366|      0|        break;
 2367|      0|      case 0x1F89:
 2368|      0|        bufpush(0x1F01);
 2369|      0|        bufpush(0x03B9);
 2370|      0|        break;
 2371|      0|      case 0x1F8A:
 2372|      0|        bufpush(0x1F02);
 2373|      0|        bufpush(0x03B9);
 2374|      0|        break;
 2375|      0|      case 0x1F8B:
 2376|      0|        bufpush(0x1F03);
 2377|      0|        bufpush(0x03B9);
 2378|      0|        break;
 2379|      0|      case 0x1F8C:
 2380|      0|        bufpush(0x1F04);
 2381|      0|        bufpush(0x03B9);
 2382|      0|        break;
 2383|      0|      case 0x1F8D:
 2384|      0|        bufpush(0x1F05);
 2385|      0|        bufpush(0x03B9);
 2386|      0|        break;
 2387|      0|      case 0x1F8E:
 2388|      0|        bufpush(0x1F06);
 2389|      0|        bufpush(0x03B9);
 2390|      0|        break;
 2391|      0|      case 0x1F8F:
 2392|      0|        bufpush(0x1F07);
 2393|      0|        bufpush(0x03B9);
 2394|      0|        break;
 2395|      0|      case 0x1F90:
 2396|      0|        bufpush(0x1F20);
 2397|      0|        bufpush(0x03B9);
 2398|      0|        break;
 2399|      0|      case 0x1F91:
 2400|      0|        bufpush(0x1F21);
 2401|      0|        bufpush(0x03B9);
 2402|      0|        break;
 2403|      0|      case 0x1F92:
 2404|      0|        bufpush(0x1F22);
 2405|      0|        bufpush(0x03B9);
 2406|      0|        break;
 2407|      0|      case 0x1F93:
 2408|      0|        bufpush(0x1F23);
 2409|      0|        bufpush(0x03B9);
 2410|      0|        break;
 2411|      0|      case 0x1F94:
 2412|      0|        bufpush(0x1F24);
 2413|      0|        bufpush(0x03B9);
 2414|      0|        break;
 2415|      0|      case 0x1F95:
 2416|      0|        bufpush(0x1F25);
 2417|      0|        bufpush(0x03B9);
 2418|      0|        break;
 2419|      0|      case 0x1F96:
 2420|      0|        bufpush(0x1F26);
 2421|      0|        bufpush(0x03B9);
 2422|      0|        break;
 2423|      0|      case 0x1F97:
 2424|      0|        bufpush(0x1F27);
 2425|      0|        bufpush(0x03B9);
 2426|      0|        break;
 2427|      0|      case 0x1F98:
 2428|      0|        bufpush(0x1F20);
 2429|      0|        bufpush(0x03B9);
 2430|      0|        break;
 2431|      0|      case 0x1F99:
 2432|      0|        bufpush(0x1F21);
 2433|      0|        bufpush(0x03B9);
 2434|      0|        break;
 2435|      0|      case 0x1F9A:
 2436|      0|        bufpush(0x1F22);
 2437|      0|        bufpush(0x03B9);
 2438|      0|        break;
 2439|      0|      case 0x1F9B:
 2440|      0|        bufpush(0x1F23);
 2441|      0|        bufpush(0x03B9);
 2442|      0|        break;
 2443|      0|      case 0x1F9C:
 2444|      0|        bufpush(0x1F24);
 2445|      0|        bufpush(0x03B9);
 2446|      0|        break;
 2447|      0|      case 0x1F9D:
 2448|      0|        bufpush(0x1F25);
 2449|      0|        bufpush(0x03B9);
 2450|      0|        break;
 2451|      0|      case 0x1F9E:
 2452|      0|        bufpush(0x1F26);
 2453|      0|        bufpush(0x03B9);
 2454|      0|        break;
 2455|      0|      case 0x1F9F:
 2456|      0|        bufpush(0x1F27);
 2457|      0|        bufpush(0x03B9);
 2458|      0|        break;
 2459|      0|      case 0x1FA0:
 2460|      0|        bufpush(0x1F60);
 2461|      0|        bufpush(0x03B9);
 2462|      0|        break;
 2463|      0|      case 0x1FA1:
 2464|      0|        bufpush(0x1F61);
 2465|      0|        bufpush(0x03B9);
 2466|      0|        break;
 2467|      0|      case 0x1FA2:
 2468|      0|        bufpush(0x1F62);
 2469|      0|        bufpush(0x03B9);
 2470|      0|        break;
 2471|      0|      case 0x1FA3:
 2472|      0|        bufpush(0x1F63);
 2473|      0|        bufpush(0x03B9);
 2474|      0|        break;
 2475|      0|      case 0x1FA4:
 2476|      0|        bufpush(0x1F64);
 2477|      0|        bufpush(0x03B9);
 2478|      0|        break;
 2479|      0|      case 0x1FA5:
 2480|      0|        bufpush(0x1F65);
 2481|      0|        bufpush(0x03B9);
 2482|      0|        break;
 2483|      0|      case 0x1FA6:
 2484|      0|        bufpush(0x1F66);
 2485|      0|        bufpush(0x03B9);
 2486|      0|        break;
 2487|      0|      case 0x1FA7:
 2488|      0|        bufpush(0x1F67);
 2489|      0|        bufpush(0x03B9);
 2490|      0|        break;
 2491|      0|      case 0x1FA8:
 2492|      0|        bufpush(0x1F60);
 2493|      0|        bufpush(0x03B9);
 2494|      0|        break;
 2495|      0|      case 0x1FA9:
 2496|      0|        bufpush(0x1F61);
 2497|      0|        bufpush(0x03B9);
 2498|      0|        break;
 2499|      0|      case 0x1FAA:
 2500|      0|        bufpush(0x1F62);
 2501|      0|        bufpush(0x03B9);
 2502|      0|        break;
 2503|      0|      case 0x1FAB:
 2504|      0|        bufpush(0x1F63);
 2505|      0|        bufpush(0x03B9);
 2506|      0|        break;
 2507|      0|      case 0x1FAC:
 2508|      0|        bufpush(0x1F64);
 2509|      0|        bufpush(0x03B9);
 2510|      0|        break;
 2511|      0|      case 0x1FAD:
 2512|      0|        bufpush(0x1F65);
 2513|      0|        bufpush(0x03B9);
 2514|      0|        break;
 2515|      0|      case 0x1FAE:
 2516|      0|        bufpush(0x1F66);
 2517|      0|        bufpush(0x03B9);
 2518|      0|        break;
 2519|      0|      case 0x1FAF:
 2520|      0|        bufpush(0x1F67);
 2521|      0|        bufpush(0x03B9);
 2522|      0|        break;
 2523|      0|      case 0x1FB2:
 2524|      0|        bufpush(0x1F70);
 2525|      0|        bufpush(0x03B9);
 2526|      0|        break;
 2527|      0|      case 0x1FB3:
 2528|      0|        bufpush(0x03B1);
 2529|      0|        bufpush(0x03B9);
 2530|      0|        break;
 2531|      0|      case 0x1FB4:
 2532|      0|        bufpush(0x03AC);
 2533|      0|        bufpush(0x03B9);
 2534|      0|        break;
 2535|      0|      case 0x1FB6:
 2536|      0|        bufpush(0x03B1);
 2537|      0|        bufpush(0x0342);
 2538|      0|        break;
 2539|      0|      case 0x1FB7:
 2540|      0|        bufpush(0x03B1);
 2541|      0|        bufpush(0x0342);
 2542|      0|        bufpush(0x03B9);
 2543|      0|        break;
 2544|      0|      case 0x1FB8:
 2545|      0|        bufpush(0x1FB0);
 2546|      0|        break;
 2547|      0|      case 0x1FB9:
 2548|      0|        bufpush(0x1FB1);
 2549|      0|        break;
 2550|      0|      case 0x1FBA:
 2551|      0|        bufpush(0x1F70);
 2552|      0|        break;
 2553|      0|      case 0x1FBB:
 2554|      0|        bufpush(0x1F71);
 2555|      0|        break;
 2556|      0|      case 0x1FBC:
 2557|      0|        bufpush(0x03B1);
 2558|      0|        bufpush(0x03B9);
 2559|      0|        break;
 2560|      0|      case 0x1FBE:
 2561|      0|        bufpush(0x03B9);
 2562|      0|        break;
 2563|      0|      case 0x1FC2:
 2564|      0|        bufpush(0x1F74);
 2565|      0|        bufpush(0x03B9);
 2566|      0|        break;
 2567|      0|      case 0x1FC3:
 2568|      0|        bufpush(0x03B7);
 2569|      0|        bufpush(0x03B9);
 2570|      0|        break;
 2571|      0|      case 0x1FC4:
 2572|      0|        bufpush(0x03AE);
 2573|      0|        bufpush(0x03B9);
 2574|      0|        break;
 2575|      0|      case 0x1FC6:
 2576|      0|        bufpush(0x03B7);
 2577|      0|        bufpush(0x0342);
 2578|      0|        break;
 2579|      0|      case 0x1FC7:
 2580|      0|        bufpush(0x03B7);
 2581|      0|        bufpush(0x0342);
 2582|      0|        bufpush(0x03B9);
 2583|      0|        break;
 2584|      0|      case 0x1FC8:
 2585|      0|        bufpush(0x1F72);
 2586|      0|        break;
 2587|      0|      case 0x1FC9:
 2588|      0|        bufpush(0x1F73);
 2589|      0|        break;
 2590|      0|      case 0x1FCA:
 2591|      0|        bufpush(0x1F74);
 2592|      0|        break;
 2593|      0|      case 0x1FCB:
 2594|      0|        bufpush(0x1F75);
 2595|      0|        break;
 2596|      0|      case 0x1FCC:
 2597|      0|        bufpush(0x03B7);
 2598|      0|        bufpush(0x03B9);
 2599|      0|        break;
 2600|      0|      case 0x1FD2:
 2601|      0|        bufpush(0x03B9);
 2602|      0|        bufpush(0x0308);
 2603|      0|        bufpush(0x0300);
 2604|      0|        break;
 2605|      0|      case 0x1FD3:
 2606|      0|        bufpush(0x03B9);
 2607|      0|        bufpush(0x0308);
 2608|      0|        bufpush(0x0301);
 2609|      0|        break;
 2610|      0|      case 0x1FD6:
 2611|      0|        bufpush(0x03B9);
 2612|      0|        bufpush(0x0342);
 2613|      0|        break;
 2614|      0|      case 0x1FD7:
 2615|      0|        bufpush(0x03B9);
 2616|      0|        bufpush(0x0308);
 2617|      0|        bufpush(0x0342);
 2618|      0|        break;
 2619|      0|      case 0x1FD8:
 2620|      0|        bufpush(0x1FD0);
 2621|      0|        break;
 2622|      0|      case 0x1FD9:
 2623|      0|        bufpush(0x1FD1);
 2624|      0|        break;
 2625|      0|      case 0x1FDA:
 2626|      0|        bufpush(0x1F76);
 2627|      0|        break;
 2628|      0|      case 0x1FDB:
 2629|      0|        bufpush(0x1F77);
 2630|      0|        break;
 2631|      0|      case 0x1FE2:
 2632|      0|        bufpush(0x03C5);
 2633|      0|        bufpush(0x0308);
 2634|      0|        bufpush(0x0300);
 2635|      0|        break;
 2636|      0|      case 0x1FE3:
 2637|      0|        bufpush(0x03C5);
 2638|      0|        bufpush(0x0308);
 2639|      0|        bufpush(0x0301);
 2640|      0|        break;
 2641|      0|      case 0x1FE4:
 2642|      0|        bufpush(0x03C1);
 2643|      0|        bufpush(0x0313);
 2644|      0|        break;
 2645|      0|      case 0x1FE6:
 2646|      0|        bufpush(0x03C5);
 2647|      0|        bufpush(0x0342);
 2648|      0|        break;
 2649|      0|      case 0x1FE7:
 2650|      0|        bufpush(0x03C5);
 2651|      0|        bufpush(0x0308);
 2652|      0|        bufpush(0x0342);
 2653|      0|        break;
 2654|      0|      case 0x1FE8:
 2655|      0|        bufpush(0x1FE0);
 2656|      0|        break;
 2657|      0|      case 0x1FE9:
 2658|      0|        bufpush(0x1FE1);
 2659|      0|        break;
 2660|      0|      case 0x1FEA:
 2661|      0|        bufpush(0x1F7A);
 2662|      0|        break;
 2663|      0|      case 0x1FEB:
 2664|      0|        bufpush(0x1F7B);
 2665|      0|        break;
 2666|      0|      case 0x1FEC:
 2667|      0|        bufpush(0x1FE5);
 2668|      0|        break;
 2669|      0|      case 0x1FF2:
 2670|      0|        bufpush(0x1F7C);
 2671|      0|        bufpush(0x03B9);
 2672|      0|        break;
 2673|      0|      case 0x1FF3:
 2674|      0|        bufpush(0x03C9);
 2675|      0|        bufpush(0x03B9);
 2676|      0|        break;
 2677|      0|      case 0x1FF4:
 2678|      0|        bufpush(0x03CE);
 2679|      0|        bufpush(0x03B9);
 2680|      0|        break;
 2681|      0|      case 0x1FF6:
 2682|      0|        bufpush(0x03C9);
 2683|      0|        bufpush(0x0342);
 2684|      0|        break;
 2685|      0|      case 0x1FF7:
 2686|      0|        bufpush(0x03C9);
 2687|      0|        bufpush(0x0342);
 2688|      0|        bufpush(0x03B9);
 2689|      0|        break;
 2690|      0|      case 0x1FF8:
 2691|      0|        bufpush(0x1F78);
 2692|      0|        break;
 2693|      0|      case 0x1FF9:
 2694|      0|        bufpush(0x1F79);
 2695|      0|        break;
 2696|      0|      case 0x1FFA:
 2697|      0|        bufpush(0x1F7C);
 2698|      0|        break;
 2699|      0|      case 0x1FFB:
 2700|      0|        bufpush(0x1F7D);
 2701|      0|        break;
 2702|      0|      case 0x1FFC:
 2703|      0|        bufpush(0x03C9);
 2704|      0|        bufpush(0x03B9);
 2705|      0|        break;
 2706|      0|      case 0x2126:
 2707|      0|        bufpush(0x03C9);
 2708|      0|        break;
 2709|      0|      case 0x212A:
 2710|      0|        bufpush(0x006B);
 2711|      0|        break;
 2712|      0|      case 0x212B:
 2713|      0|        bufpush(0x00E5);
 2714|      0|        break;
 2715|      0|      case 0x2132:
 2716|      0|        bufpush(0x214E);
 2717|      0|        break;
 2718|      0|      case 0x2160:
 2719|      0|        bufpush(0x2170);
 2720|      0|        break;
 2721|      0|      case 0x2161:
 2722|      0|        bufpush(0x2171);
 2723|      0|        break;
 2724|      0|      case 0x2162:
 2725|      0|        bufpush(0x2172);
 2726|      0|        break;
 2727|      0|      case 0x2163:
 2728|      0|        bufpush(0x2173);
 2729|      0|        break;
 2730|      0|      case 0x2164:
 2731|      0|        bufpush(0x2174);
 2732|      0|        break;
 2733|      0|      case 0x2165:
 2734|      0|        bufpush(0x2175);
 2735|      0|        break;
 2736|      0|      case 0x2166:
 2737|      0|        bufpush(0x2176);
 2738|      0|        break;
 2739|      0|      case 0x2167:
 2740|      0|        bufpush(0x2177);
 2741|      0|        break;
 2742|      0|      case 0x2168:
 2743|      0|        bufpush(0x2178);
 2744|      0|        break;
 2745|      0|      case 0x2169:
 2746|      0|        bufpush(0x2179);
 2747|      0|        break;
 2748|      0|      case 0x216A:
 2749|      0|        bufpush(0x217A);
 2750|      0|        break;
 2751|      0|      case 0x216B:
 2752|      0|        bufpush(0x217B);
 2753|      0|        break;
 2754|      0|      case 0x216C:
 2755|      0|        bufpush(0x217C);
 2756|      0|        break;
 2757|      0|      case 0x216D:
 2758|      0|        bufpush(0x217D);
 2759|      0|        break;
 2760|      0|      case 0x216E:
 2761|      0|        bufpush(0x217E);
 2762|      0|        break;
 2763|      0|      case 0x216F:
 2764|      0|        bufpush(0x217F);
 2765|      0|        break;
 2766|      0|      case 0x2183:
 2767|      0|        bufpush(0x2184);
 2768|      0|        break;
 2769|      0|      case 0x24B6:
 2770|      0|        bufpush(0x24D0);
 2771|      0|        break;
 2772|      0|      case 0x24B7:
 2773|      0|        bufpush(0x24D1);
 2774|      0|        break;
 2775|      0|      case 0x24B8:
 2776|      0|        bufpush(0x24D2);
 2777|      0|        break;
 2778|      0|      case 0x24B9:
 2779|      0|        bufpush(0x24D3);
 2780|      0|        break;
 2781|      0|      case 0x24BA:
 2782|      0|        bufpush(0x24D4);
 2783|      0|        break;
 2784|      0|      case 0x24BB:
 2785|      0|        bufpush(0x24D5);
 2786|      0|        break;
 2787|      0|      case 0x24BC:
 2788|      0|        bufpush(0x24D6);
 2789|      0|        break;
 2790|      0|      case 0x24BD:
 2791|      0|        bufpush(0x24D7);
 2792|      0|        break;
 2793|      0|      case 0x24BE:
 2794|      0|        bufpush(0x24D8);
 2795|      0|        break;
 2796|      0|      case 0x24BF:
 2797|      0|        bufpush(0x24D9);
 2798|      0|        break;
 2799|      0|      case 0x24C0:
 2800|      0|        bufpush(0x24DA);
 2801|      0|        break;
 2802|      0|      case 0x24C1:
 2803|      0|        bufpush(0x24DB);
 2804|      0|        break;
 2805|      0|      case 0x24C2:
 2806|      0|        bufpush(0x24DC);
 2807|      0|        break;
 2808|      0|      case 0x24C3:
 2809|      0|        bufpush(0x24DD);
 2810|      0|        break;
 2811|      0|      case 0x24C4:
 2812|      0|        bufpush(0x24DE);
 2813|      0|        break;
 2814|      0|      case 0x24C5:
 2815|      0|        bufpush(0x24DF);
 2816|      0|        break;
 2817|      0|      case 0x24C6:
 2818|      0|        bufpush(0x24E0);
 2819|      0|        break;
 2820|      0|      case 0x24C7:
 2821|      0|        bufpush(0x24E1);
 2822|      0|        break;
 2823|      0|      case 0x24C8:
 2824|      0|        bufpush(0x24E2);
 2825|      0|        break;
 2826|      0|      case 0x24C9:
 2827|      0|        bufpush(0x24E3);
 2828|      0|        break;
 2829|      0|      case 0x24CA:
 2830|      0|        bufpush(0x24E4);
 2831|      0|        break;
 2832|      0|      case 0x24CB:
 2833|      0|        bufpush(0x24E5);
 2834|      0|        break;
 2835|      0|      case 0x24CC:
 2836|      0|        bufpush(0x24E6);
 2837|      0|        break;
 2838|      0|      case 0x24CD:
 2839|      0|        bufpush(0x24E7);
 2840|      0|        break;
 2841|      0|      case 0x24CE:
 2842|      0|        bufpush(0x24E8);
 2843|      0|        break;
 2844|      0|      case 0x24CF:
 2845|      0|        bufpush(0x24E9);
 2846|      0|        break;
 2847|      0|      case 0x2C00:
 2848|      0|        bufpush(0x2C30);
 2849|      0|        break;
 2850|      0|      case 0x2C01:
 2851|      0|        bufpush(0x2C31);
 2852|      0|        break;
 2853|      0|      case 0x2C02:
 2854|      0|        bufpush(0x2C32);
 2855|      0|        break;
 2856|      0|      case 0x2C03:
 2857|      0|        bufpush(0x2C33);
 2858|      0|        break;
 2859|      0|      case 0x2C04:
 2860|      0|        bufpush(0x2C34);
 2861|      0|        break;
 2862|      0|      case 0x2C05:
 2863|      0|        bufpush(0x2C35);
 2864|      0|        break;
 2865|      0|      case 0x2C06:
 2866|      0|        bufpush(0x2C36);
 2867|      0|        break;
 2868|      0|      case 0x2C07:
 2869|      0|        bufpush(0x2C37);
 2870|      0|        break;
 2871|      0|      case 0x2C08:
 2872|      0|        bufpush(0x2C38);
 2873|      0|        break;
 2874|      0|      case 0x2C09:
 2875|      0|        bufpush(0x2C39);
 2876|      0|        break;
 2877|      0|      case 0x2C0A:
 2878|      0|        bufpush(0x2C3A);
 2879|      0|        break;
 2880|      0|      case 0x2C0B:
 2881|      0|        bufpush(0x2C3B);
 2882|      0|        break;
 2883|      0|      case 0x2C0C:
 2884|      0|        bufpush(0x2C3C);
 2885|      0|        break;
 2886|      0|      case 0x2C0D:
 2887|      0|        bufpush(0x2C3D);
 2888|      0|        break;
 2889|      0|      case 0x2C0E:
 2890|      0|        bufpush(0x2C3E);
 2891|      0|        break;
 2892|      0|      case 0x2C0F:
 2893|      0|        bufpush(0x2C3F);
 2894|      0|        break;
 2895|      0|      case 0x2C10:
 2896|      0|        bufpush(0x2C40);
 2897|      0|        break;
 2898|      0|      case 0x2C11:
 2899|      0|        bufpush(0x2C41);
 2900|      0|        break;
 2901|      0|      case 0x2C12:
 2902|      0|        bufpush(0x2C42);
 2903|      0|        break;
 2904|      0|      case 0x2C13:
 2905|      0|        bufpush(0x2C43);
 2906|      0|        break;
 2907|      0|      case 0x2C14:
 2908|      0|        bufpush(0x2C44);
 2909|      0|        break;
 2910|      0|      case 0x2C15:
 2911|      0|        bufpush(0x2C45);
 2912|      0|        break;
 2913|      0|      case 0x2C16:
 2914|      0|        bufpush(0x2C46);
 2915|      0|        break;
 2916|      0|      case 0x2C17:
 2917|      0|        bufpush(0x2C47);
 2918|      0|        break;
 2919|      0|      case 0x2C18:
 2920|      0|        bufpush(0x2C48);
 2921|      0|        break;
 2922|      0|      case 0x2C19:
 2923|      0|        bufpush(0x2C49);
 2924|      0|        break;
 2925|      0|      case 0x2C1A:
 2926|      0|        bufpush(0x2C4A);
 2927|      0|        break;
 2928|      0|      case 0x2C1B:
 2929|      0|        bufpush(0x2C4B);
 2930|      0|        break;
 2931|      0|      case 0x2C1C:
 2932|      0|        bufpush(0x2C4C);
 2933|      0|        break;
 2934|      0|      case 0x2C1D:
 2935|      0|        bufpush(0x2C4D);
 2936|      0|        break;
 2937|      0|      case 0x2C1E:
 2938|      0|        bufpush(0x2C4E);
 2939|      0|        break;
 2940|      0|      case 0x2C1F:
 2941|      0|        bufpush(0x2C4F);
 2942|      0|        break;
 2943|      0|      case 0x2C20:
 2944|      0|        bufpush(0x2C50);
 2945|      0|        break;
 2946|      0|      case 0x2C21:
 2947|      0|        bufpush(0x2C51);
 2948|      0|        break;
 2949|      0|      case 0x2C22:
 2950|      0|        bufpush(0x2C52);
 2951|      0|        break;
 2952|      0|      case 0x2C23:
 2953|      0|        bufpush(0x2C53);
 2954|      0|        break;
 2955|      0|      case 0x2C24:
 2956|      0|        bufpush(0x2C54);
 2957|      0|        break;
 2958|      0|      case 0x2C25:
 2959|      0|        bufpush(0x2C55);
 2960|      0|        break;
 2961|      0|      case 0x2C26:
 2962|      0|        bufpush(0x2C56);
 2963|      0|        break;
 2964|      0|      case 0x2C27:
 2965|      0|        bufpush(0x2C57);
 2966|      0|        break;
 2967|      0|      case 0x2C28:
 2968|      0|        bufpush(0x2C58);
 2969|      0|        break;
 2970|      0|      case 0x2C29:
 2971|      0|        bufpush(0x2C59);
 2972|      0|        break;
 2973|      0|      case 0x2C2A:
 2974|      0|        bufpush(0x2C5A);
 2975|      0|        break;
 2976|      0|      case 0x2C2B:
 2977|      0|        bufpush(0x2C5B);
 2978|      0|        break;
 2979|      0|      case 0x2C2C:
 2980|      0|        bufpush(0x2C5C);
 2981|      0|        break;
 2982|      0|      case 0x2C2D:
 2983|      0|        bufpush(0x2C5D);
 2984|      0|        break;
 2985|      0|      case 0x2C2E:
 2986|      0|        bufpush(0x2C5E);
 2987|      0|        break;
 2988|      0|      case 0x2C2F:
 2989|      0|        bufpush(0x2C5F);
 2990|      0|        break;
 2991|      0|      case 0x2C60:
 2992|      0|        bufpush(0x2C61);
 2993|      0|        break;
 2994|      0|      case 0x2C62:
 2995|      0|        bufpush(0x026B);
 2996|      0|        break;
 2997|      0|      case 0x2C63:
 2998|      0|        bufpush(0x1D7D);
 2999|      0|        break;
 3000|      0|      case 0x2C64:
 3001|      0|        bufpush(0x027D);
 3002|      0|        break;
 3003|      0|      case 0x2C67:
 3004|      0|        bufpush(0x2C68);
 3005|      0|        break;
 3006|      0|      case 0x2C69:
 3007|      0|        bufpush(0x2C6A);
 3008|      0|        break;
 3009|      0|      case 0x2C6B:
 3010|      0|        bufpush(0x2C6C);
 3011|      0|        break;
 3012|      0|      case 0x2C6D:
 3013|      0|        bufpush(0x0251);
 3014|      0|        break;
 3015|      0|      case 0x2C6E:
 3016|      0|        bufpush(0x0271);
 3017|      0|        break;
 3018|      0|      case 0x2C6F:
 3019|      0|        bufpush(0x0250);
 3020|      0|        break;
 3021|      0|      case 0x2C70:
 3022|      0|        bufpush(0x0252);
 3023|      0|        break;
 3024|      0|      case 0x2C72:
 3025|      0|        bufpush(0x2C73);
 3026|      0|        break;
 3027|      0|      case 0x2C75:
 3028|      0|        bufpush(0x2C76);
 3029|      0|        break;
 3030|      0|      case 0x2C7E:
 3031|      0|        bufpush(0x023F);
 3032|      0|        break;
 3033|      0|      case 0x2C7F:
 3034|      0|        bufpush(0x0240);
 3035|      0|        break;
 3036|      0|      case 0x2C80:
 3037|      0|        bufpush(0x2C81);
 3038|      0|        break;
 3039|      0|      case 0x2C82:
 3040|      0|        bufpush(0x2C83);
 3041|      0|        break;
 3042|      0|      case 0x2C84:
 3043|      0|        bufpush(0x2C85);
 3044|      0|        break;
 3045|      0|      case 0x2C86:
 3046|      0|        bufpush(0x2C87);
 3047|      0|        break;
 3048|      0|      case 0x2C88:
 3049|      0|        bufpush(0x2C89);
 3050|      0|        break;
 3051|      0|      case 0x2C8A:
 3052|      0|        bufpush(0x2C8B);
 3053|      0|        break;
 3054|      0|      case 0x2C8C:
 3055|      0|        bufpush(0x2C8D);
 3056|      0|        break;
 3057|      0|      case 0x2C8E:
 3058|      0|        bufpush(0x2C8F);
 3059|      0|        break;
 3060|      0|      case 0x2C90:
 3061|      0|        bufpush(0x2C91);
 3062|      0|        break;
 3063|      0|      case 0x2C92:
 3064|      0|        bufpush(0x2C93);
 3065|      0|        break;
 3066|      0|      case 0x2C94:
 3067|      0|        bufpush(0x2C95);
 3068|      0|        break;
 3069|      0|      case 0x2C96:
 3070|      0|        bufpush(0x2C97);
 3071|      0|        break;
 3072|      0|      case 0x2C98:
 3073|      0|        bufpush(0x2C99);
 3074|      0|        break;
 3075|      0|      case 0x2C9A:
 3076|      0|        bufpush(0x2C9B);
 3077|      0|        break;
 3078|      0|      case 0x2C9C:
 3079|      0|        bufpush(0x2C9D);
 3080|      0|        break;
 3081|      0|      case 0x2C9E:
 3082|      0|        bufpush(0x2C9F);
 3083|      0|        break;
 3084|      0|      case 0x2CA0:
 3085|      0|        bufpush(0x2CA1);
 3086|      0|        break;
 3087|      0|      case 0x2CA2:
 3088|      0|        bufpush(0x2CA3);
 3089|      0|        break;
 3090|      0|      case 0x2CA4:
 3091|      0|        bufpush(0x2CA5);
 3092|      0|        break;
 3093|      0|      case 0x2CA6:
 3094|      0|        bufpush(0x2CA7);
 3095|      0|        break;
 3096|      0|      case 0x2CA8:
 3097|      0|        bufpush(0x2CA9);
 3098|      0|        break;
 3099|      0|      case 0x2CAA:
 3100|      0|        bufpush(0x2CAB);
 3101|      0|        break;
 3102|      0|      case 0x2CAC:
 3103|      0|        bufpush(0x2CAD);
 3104|      0|        break;
 3105|      0|      case 0x2CAE:
 3106|      0|        bufpush(0x2CAF);
 3107|      0|        break;
 3108|      0|      case 0x2CB0:
 3109|      0|        bufpush(0x2CB1);
 3110|      0|        break;
 3111|      0|      case 0x2CB2:
 3112|      0|        bufpush(0x2CB3);
 3113|      0|        break;
 3114|      0|      case 0x2CB4:
 3115|      0|        bufpush(0x2CB5);
 3116|      0|        break;
 3117|      0|      case 0x2CB6:
 3118|      0|        bufpush(0x2CB7);
 3119|      0|        break;
 3120|      0|      case 0x2CB8:
 3121|      0|        bufpush(0x2CB9);
 3122|      0|        break;
 3123|      0|      case 0x2CBA:
 3124|      0|        bufpush(0x2CBB);
 3125|      0|        break;
 3126|      0|      case 0x2CBC:
 3127|      0|        bufpush(0x2CBD);
 3128|      0|        break;
 3129|      0|      case 0x2CBE:
 3130|      0|        bufpush(0x2CBF);
 3131|      0|        break;
 3132|      0|      case 0x2CC0:
 3133|      0|        bufpush(0x2CC1);
 3134|      0|        break;
 3135|      0|      case 0x2CC2:
 3136|      0|        bufpush(0x2CC3);
 3137|      0|        break;
 3138|      0|      case 0x2CC4:
 3139|      0|        bufpush(0x2CC5);
 3140|      0|        break;
 3141|      0|      case 0x2CC6:
 3142|      0|        bufpush(0x2CC7);
 3143|      0|        break;
 3144|      0|      case 0x2CC8:
 3145|      0|        bufpush(0x2CC9);
 3146|      0|        break;
 3147|      0|      case 0x2CCA:
 3148|      0|        bufpush(0x2CCB);
 3149|      0|        break;
 3150|      0|      case 0x2CCC:
 3151|      0|        bufpush(0x2CCD);
 3152|      0|        break;
 3153|      0|      case 0x2CCE:
 3154|      0|        bufpush(0x2CCF);
 3155|      0|        break;
 3156|      0|      case 0x2CD0:
 3157|      0|        bufpush(0x2CD1);
 3158|      0|        break;
 3159|      0|      case 0x2CD2:
 3160|      0|        bufpush(0x2CD3);
 3161|      0|        break;
 3162|      0|      case 0x2CD4:
 3163|      0|        bufpush(0x2CD5);
 3164|      0|        break;
 3165|      0|      case 0x2CD6:
 3166|      0|        bufpush(0x2CD7);
 3167|      0|        break;
 3168|      0|      case 0x2CD8:
 3169|      0|        bufpush(0x2CD9);
 3170|      0|        break;
 3171|      0|      case 0x2CDA:
 3172|      0|        bufpush(0x2CDB);
 3173|      0|        break;
 3174|      0|      case 0x2CDC:
 3175|      0|        bufpush(0x2CDD);
 3176|      0|        break;
 3177|      0|      case 0x2CDE:
 3178|      0|        bufpush(0x2CDF);
 3179|      0|        break;
 3180|      0|      case 0x2CE0:
 3181|      0|        bufpush(0x2CE1);
 3182|      0|        break;
 3183|      0|      case 0x2CE2:
 3184|      0|        bufpush(0x2CE3);
 3185|      0|        break;
 3186|      0|      case 0x2CEB:
 3187|      0|        bufpush(0x2CEC);
 3188|      0|        break;
 3189|      0|      case 0x2CED:
 3190|      0|        bufpush(0x2CEE);
 3191|      0|        break;
 3192|      0|      case 0x2CF2:
 3193|      0|        bufpush(0x2CF3);
 3194|      0|        break;
 3195|      0|      case 0xA640:
 3196|      0|        bufpush(0xA641);
 3197|      0|        break;
 3198|      0|      case 0xA642:
 3199|      0|        bufpush(0xA643);
 3200|      0|        break;
 3201|      0|      case 0xA644:
 3202|      0|        bufpush(0xA645);
 3203|      0|        break;
 3204|      0|      case 0xA646:
 3205|      0|        bufpush(0xA647);
 3206|      0|        break;
 3207|      0|      case 0xA648:
 3208|      0|        bufpush(0xA649);
 3209|      0|        break;
 3210|      0|      case 0xA64A:
 3211|      0|        bufpush(0xA64B);
 3212|      0|        break;
 3213|      0|      case 0xA64C:
 3214|      0|        bufpush(0xA64D);
 3215|      0|        break;
 3216|      0|      case 0xA64E:
 3217|      0|        bufpush(0xA64F);
 3218|      0|        break;
 3219|      0|      case 0xA650:
 3220|      0|        bufpush(0xA651);
 3221|      0|        break;
 3222|      0|      case 0xA652:
 3223|      0|        bufpush(0xA653);
 3224|      0|        break;
 3225|      0|      case 0xA654:
 3226|      0|        bufpush(0xA655);
 3227|      0|        break;
 3228|      0|      case 0xA656:
 3229|      0|        bufpush(0xA657);
 3230|      0|        break;
 3231|      0|      case 0xA658:
 3232|      0|        bufpush(0xA659);
 3233|      0|        break;
 3234|      0|      case 0xA65A:
 3235|      0|        bufpush(0xA65B);
 3236|      0|        break;
 3237|      0|      case 0xA65C:
 3238|      0|        bufpush(0xA65D);
 3239|      0|        break;
 3240|      0|      case 0xA65E:
 3241|      0|        bufpush(0xA65F);
 3242|      0|        break;
 3243|      0|      case 0xA660:
 3244|      0|        bufpush(0xA661);
 3245|      0|        break;
 3246|      0|      case 0xA662:
 3247|      0|        bufpush(0xA663);
 3248|      0|        break;
 3249|      0|      case 0xA664:
 3250|      0|        bufpush(0xA665);
 3251|      0|        break;
 3252|      0|      case 0xA666:
 3253|      0|        bufpush(0xA667);
 3254|      0|        break;
 3255|      0|      case 0xA668:
 3256|      0|        bufpush(0xA669);
 3257|      0|        break;
 3258|      0|      case 0xA66A:
 3259|      0|        bufpush(0xA66B);
 3260|      0|        break;
 3261|      0|      case 0xA66C:
 3262|      0|        bufpush(0xA66D);
 3263|      0|        break;
 3264|      0|      case 0xA680:
 3265|      0|        bufpush(0xA681);
 3266|      0|        break;
 3267|      0|      case 0xA682:
 3268|      0|        bufpush(0xA683);
 3269|      0|        break;
 3270|      0|      case 0xA684:
 3271|      0|        bufpush(0xA685);
 3272|      0|        break;
 3273|      0|      case 0xA686:
 3274|      0|        bufpush(0xA687);
 3275|      0|        break;
 3276|      0|      case 0xA688:
 3277|      0|        bufpush(0xA689);
 3278|      0|        break;
 3279|      0|      case 0xA68A:
 3280|      0|        bufpush(0xA68B);
 3281|      0|        break;
 3282|      0|      case 0xA68C:
 3283|      0|        bufpush(0xA68D);
 3284|      0|        break;
 3285|      0|      case 0xA68E:
 3286|      0|        bufpush(0xA68F);
 3287|      0|        break;
 3288|      0|      case 0xA690:
 3289|      0|        bufpush(0xA691);
 3290|      0|        break;
 3291|      0|      case 0xA692:
 3292|      0|        bufpush(0xA693);
 3293|      0|        break;
 3294|      0|      case 0xA694:
 3295|      0|        bufpush(0xA695);
 3296|      0|        break;
 3297|      0|      case 0xA696:
 3298|      0|        bufpush(0xA697);
 3299|      0|        break;
 3300|      0|      case 0xA698:
 3301|      0|        bufpush(0xA699);
 3302|      0|        break;
 3303|      0|      case 0xA69A:
 3304|      0|        bufpush(0xA69B);
 3305|      0|        break;
 3306|      0|      case 0xA722:
 3307|      0|        bufpush(0xA723);
 3308|      0|        break;
 3309|      0|      case 0xA724:
 3310|      0|        bufpush(0xA725);
 3311|      0|        break;
 3312|      0|      case 0xA726:
 3313|      0|        bufpush(0xA727);
 3314|      0|        break;
 3315|      0|      case 0xA728:
 3316|      0|        bufpush(0xA729);
 3317|      0|        break;
 3318|      0|      case 0xA72A:
 3319|      0|        bufpush(0xA72B);
 3320|      0|        break;
 3321|      0|      case 0xA72C:
 3322|      0|        bufpush(0xA72D);
 3323|      0|        break;
 3324|      0|      case 0xA72E:
 3325|      0|        bufpush(0xA72F);
 3326|      0|        break;
 3327|      0|      case 0xA732:
 3328|      0|        bufpush(0xA733);
 3329|      0|        break;
 3330|      0|      case 0xA734:
 3331|      0|        bufpush(0xA735);
 3332|      0|        break;
 3333|      0|      case 0xA736:
 3334|      0|        bufpush(0xA737);
 3335|      0|        break;
 3336|      0|      case 0xA738:
 3337|      0|        bufpush(0xA739);
 3338|      0|        break;
 3339|      0|      case 0xA73A:
 3340|      0|        bufpush(0xA73B);
 3341|      0|        break;
 3342|      0|      case 0xA73C:
 3343|      0|        bufpush(0xA73D);
 3344|      0|        break;
 3345|      0|      case 0xA73E:
 3346|      0|        bufpush(0xA73F);
 3347|      0|        break;
 3348|      0|      case 0xA740:
 3349|      0|        bufpush(0xA741);
 3350|      0|        break;
 3351|      0|      case 0xA742:
 3352|      0|        bufpush(0xA743);
 3353|      0|        break;
 3354|      0|      case 0xA744:
 3355|      0|        bufpush(0xA745);
 3356|      0|        break;
 3357|      0|      case 0xA746:
 3358|      0|        bufpush(0xA747);
 3359|      0|        break;
 3360|      0|      case 0xA748:
 3361|      0|        bufpush(0xA749);
 3362|      0|        break;
 3363|      0|      case 0xA74A:
 3364|      0|        bufpush(0xA74B);
 3365|      0|        break;
 3366|      0|      case 0xA74C:
 3367|      0|        bufpush(0xA74D);
 3368|      0|        break;
 3369|      0|      case 0xA74E:
 3370|      0|        bufpush(0xA74F);
 3371|      0|        break;
 3372|      0|      case 0xA750:
 3373|      0|        bufpush(0xA751);
 3374|      0|        break;
 3375|      0|      case 0xA752:
 3376|      0|        bufpush(0xA753);
 3377|      0|        break;
 3378|      0|      case 0xA754:
 3379|      0|        bufpush(0xA755);
 3380|      0|        break;
 3381|      0|      case 0xA756:
 3382|      0|        bufpush(0xA757);
 3383|      0|        break;
 3384|      0|      case 0xA758:
 3385|      0|        bufpush(0xA759);
 3386|      0|        break;
 3387|      0|      case 0xA75A:
 3388|      0|        bufpush(0xA75B);
 3389|      0|        break;
 3390|      0|      case 0xA75C:
 3391|      0|        bufpush(0xA75D);
 3392|      0|        break;
 3393|      0|      case 0xA75E:
 3394|      0|        bufpush(0xA75F);
 3395|      0|        break;
 3396|      0|      case 0xA760:
 3397|      0|        bufpush(0xA761);
 3398|      0|        break;
 3399|      0|      case 0xA762:
 3400|      0|        bufpush(0xA763);
 3401|      0|        break;
 3402|      0|      case 0xA764:
 3403|      0|        bufpush(0xA765);
 3404|      0|        break;
 3405|      0|      case 0xA766:
 3406|      0|        bufpush(0xA767);
 3407|      0|        break;
 3408|      0|      case 0xA768:
 3409|      0|        bufpush(0xA769);
 3410|      0|        break;
 3411|      0|      case 0xA76A:
 3412|      0|        bufpush(0xA76B);
 3413|      0|        break;
 3414|      0|      case 0xA76C:
 3415|      0|        bufpush(0xA76D);
 3416|      0|        break;
 3417|      0|      case 0xA76E:
 3418|      0|        bufpush(0xA76F);
 3419|      0|        break;
 3420|      0|      case 0xA779:
 3421|      0|        bufpush(0xA77A);
 3422|      0|        break;
 3423|      0|      case 0xA77B:
 3424|      0|        bufpush(0xA77C);
 3425|      0|        break;
 3426|      0|      case 0xA77D:
 3427|      0|        bufpush(0x1D79);
 3428|      0|        break;
 3429|      0|      case 0xA77E:
 3430|      0|        bufpush(0xA77F);
 3431|      0|        break;
 3432|      0|      case 0xA780:
 3433|      0|        bufpush(0xA781);
 3434|      0|        break;
 3435|      0|      case 0xA782:
 3436|      0|        bufpush(0xA783);
 3437|      0|        break;
 3438|      0|      case 0xA784:
 3439|      0|        bufpush(0xA785);
 3440|      0|        break;
 3441|      0|      case 0xA786:
 3442|      0|        bufpush(0xA787);
 3443|      0|        break;
 3444|      0|      case 0xA78B:
 3445|      0|        bufpush(0xA78C);
 3446|      0|        break;
 3447|      0|      case 0xA78D:
 3448|      0|        bufpush(0x0265);
 3449|      0|        break;
 3450|      0|      case 0xA790:
 3451|      0|        bufpush(0xA791);
 3452|      0|        break;
 3453|      0|      case 0xA792:
 3454|      0|        bufpush(0xA793);
 3455|      0|        break;
 3456|      0|      case 0xA796:
 3457|      0|        bufpush(0xA797);
 3458|      0|        break;
 3459|      0|      case 0xA798:
 3460|      0|        bufpush(0xA799);
 3461|      0|        break;
 3462|      0|      case 0xA79A:
 3463|      0|        bufpush(0xA79B);
 3464|      0|        break;
 3465|      0|      case 0xA79C:
 3466|      0|        bufpush(0xA79D);
 3467|      0|        break;
 3468|      0|      case 0xA79E:
 3469|      0|        bufpush(0xA79F);
 3470|      0|        break;
 3471|      0|      case 0xA7A0:
 3472|      0|        bufpush(0xA7A1);
 3473|      0|        break;
 3474|      0|      case 0xA7A2:
 3475|      0|        bufpush(0xA7A3);
 3476|      0|        break;
 3477|      0|      case 0xA7A4:
 3478|      0|        bufpush(0xA7A5);
 3479|      0|        break;
 3480|      0|      case 0xA7A6:
 3481|      0|        bufpush(0xA7A7);
 3482|      0|        break;
 3483|      0|      case 0xA7A8:
 3484|      0|        bufpush(0xA7A9);
 3485|      0|        break;
 3486|      0|      case 0xA7AA:
 3487|      0|        bufpush(0x0266);
 3488|      0|        break;
 3489|      0|      case 0xA7AB:
 3490|      0|        bufpush(0x025C);
 3491|      0|        break;
 3492|      0|      case 0xA7AC:
 3493|      0|        bufpush(0x0261);
 3494|      0|        break;
 3495|      0|      case 0xA7AD:
 3496|      0|        bufpush(0x026C);
 3497|      0|        break;
 3498|      0|      case 0xA7AE:
 3499|      0|        bufpush(0x026A);
 3500|      0|        break;
 3501|      0|      case 0xA7B0:
 3502|      0|        bufpush(0x029E);
 3503|      0|        break;
 3504|      0|      case 0xA7B1:
 3505|      0|        bufpush(0x0287);
 3506|      0|        break;
 3507|      0|      case 0xA7B2:
 3508|      0|        bufpush(0x029D);
 3509|      0|        break;
 3510|      0|      case 0xA7B3:
 3511|      0|        bufpush(0xAB53);
 3512|      0|        break;
 3513|      0|      case 0xA7B4:
 3514|      0|        bufpush(0xA7B5);
 3515|      0|        break;
 3516|      0|      case 0xA7B6:
 3517|      0|        bufpush(0xA7B7);
 3518|      0|        break;
 3519|      0|      case 0xA7B8:
 3520|      0|        bufpush(0xA7B9);
 3521|      0|        break;
 3522|      0|      case 0xA7BA:
 3523|      0|        bufpush(0xA7BB);
 3524|      0|        break;
 3525|      0|      case 0xA7BC:
 3526|      0|        bufpush(0xA7BD);
 3527|      0|        break;
 3528|      0|      case 0xA7BE:
 3529|      0|        bufpush(0xA7BF);
 3530|      0|        break;
 3531|      0|      case 0xA7C0:
 3532|      0|        bufpush(0xA7C1);
 3533|      0|        break;
 3534|      0|      case 0xA7C2:
 3535|      0|        bufpush(0xA7C3);
 3536|      0|        break;
 3537|      0|      case 0xA7C4:
 3538|      0|        bufpush(0xA794);
 3539|      0|        break;
 3540|      0|      case 0xA7C5:
 3541|      0|        bufpush(0x0282);
 3542|      0|        break;
 3543|      0|      case 0xA7C6:
 3544|      0|        bufpush(0x1D8E);
 3545|      0|        break;
 3546|      0|      case 0xA7C7:
 3547|      0|        bufpush(0xA7C8);
 3548|      0|        break;
 3549|      0|      case 0xA7C9:
 3550|      0|        bufpush(0xA7CA);
 3551|      0|        break;
 3552|      0|      case 0xA7D0:
 3553|      0|        bufpush(0xA7D1);
 3554|      0|        break;
 3555|      0|      case 0xA7D6:
 3556|      0|        bufpush(0xA7D7);
 3557|      0|        break;
 3558|      0|      case 0xA7D8:
 3559|      0|        bufpush(0xA7D9);
 3560|      0|        break;
 3561|      0|      case 0xA7F5:
 3562|      0|        bufpush(0xA7F6);
 3563|      0|        break;
 3564|      0|      case 0xAB70:
 3565|      0|        bufpush(0x13A0);
 3566|      0|        break;
 3567|      0|      case 0xAB71:
 3568|      0|        bufpush(0x13A1);
 3569|      0|        break;
 3570|      0|      case 0xAB72:
 3571|      0|        bufpush(0x13A2);
 3572|      0|        break;
 3573|      0|      case 0xAB73:
 3574|      0|        bufpush(0x13A3);
 3575|      0|        break;
 3576|      0|      case 0xAB74:
 3577|      0|        bufpush(0x13A4);
 3578|      0|        break;
 3579|      0|      case 0xAB75:
 3580|      0|        bufpush(0x13A5);
 3581|      0|        break;
 3582|      0|      case 0xAB76:
 3583|      0|        bufpush(0x13A6);
 3584|      0|        break;
 3585|      0|      case 0xAB77:
 3586|      0|        bufpush(0x13A7);
 3587|      0|        break;
 3588|      0|      case 0xAB78:
 3589|      0|        bufpush(0x13A8);
 3590|      0|        break;
 3591|      0|      case 0xAB79:
 3592|      0|        bufpush(0x13A9);
 3593|      0|        break;
 3594|      0|      case 0xAB7A:
 3595|      0|        bufpush(0x13AA);
 3596|      0|        break;
 3597|      0|      case 0xAB7B:
 3598|      0|        bufpush(0x13AB);
 3599|      0|        break;
 3600|      0|      case 0xAB7C:
 3601|      0|        bufpush(0x13AC);
 3602|      0|        break;
 3603|      0|      case 0xAB7D:
 3604|      0|        bufpush(0x13AD);
 3605|      0|        break;
 3606|      0|      case 0xAB7E:
 3607|      0|        bufpush(0x13AE);
 3608|      0|        break;
 3609|      0|      case 0xAB7F:
 3610|      0|        bufpush(0x13AF);
 3611|      0|        break;
 3612|      0|      case 0xAB80:
 3613|      0|        bufpush(0x13B0);
 3614|      0|        break;
 3615|      0|      case 0xAB81:
 3616|      0|        bufpush(0x13B1);
 3617|      0|        break;
 3618|      0|      case 0xAB82:
 3619|      0|        bufpush(0x13B2);
 3620|      0|        break;
 3621|      0|      case 0xAB83:
 3622|      0|        bufpush(0x13B3);
 3623|      0|        break;
 3624|      0|      case 0xAB84:
 3625|      0|        bufpush(0x13B4);
 3626|      0|        break;
 3627|      0|      case 0xAB85:
 3628|      0|        bufpush(0x13B5);
 3629|      0|        break;
 3630|      0|      case 0xAB86:
 3631|      0|        bufpush(0x13B6);
 3632|      0|        break;
 3633|      0|      case 0xAB87:
 3634|      0|        bufpush(0x13B7);
 3635|      0|        break;
 3636|      0|      case 0xAB88:
 3637|      0|        bufpush(0x13B8);
 3638|      0|        break;
 3639|      0|      case 0xAB89:
 3640|      0|        bufpush(0x13B9);
 3641|      0|        break;
 3642|      0|      case 0xAB8A:
 3643|      0|        bufpush(0x13BA);
 3644|      0|        break;
 3645|      0|      case 0xAB8B:
 3646|      0|        bufpush(0x13BB);
 3647|      0|        break;
 3648|      0|      case 0xAB8C:
 3649|      0|        bufpush(0x13BC);
 3650|      0|        break;
 3651|      0|      case 0xAB8D:
 3652|      0|        bufpush(0x13BD);
 3653|      0|        break;
 3654|      0|      case 0xAB8E:
 3655|      0|        bufpush(0x13BE);
 3656|      0|        break;
 3657|      0|      case 0xAB8F:
 3658|      0|        bufpush(0x13BF);
 3659|      0|        break;
 3660|      0|      case 0xAB90:
 3661|      0|        bufpush(0x13C0);
 3662|      0|        break;
 3663|      0|      case 0xAB91:
 3664|      0|        bufpush(0x13C1);
 3665|      0|        break;
 3666|      0|      case 0xAB92:
 3667|      0|        bufpush(0x13C2);
 3668|      0|        break;
 3669|      0|      case 0xAB93:
 3670|      0|        bufpush(0x13C3);
 3671|      0|        break;
 3672|      0|      case 0xAB94:
 3673|      0|        bufpush(0x13C4);
 3674|      0|        break;
 3675|      0|      case 0xAB95:
 3676|      0|        bufpush(0x13C5);
 3677|      0|        break;
 3678|      0|      case 0xAB96:
 3679|      0|        bufpush(0x13C6);
 3680|      0|        break;
 3681|      0|      case 0xAB97:
 3682|      0|        bufpush(0x13C7);
 3683|      0|        break;
 3684|      0|      case 0xAB98:
 3685|      0|        bufpush(0x13C8);
 3686|      0|        break;
 3687|      0|      case 0xAB99:
 3688|      0|        bufpush(0x13C9);
 3689|      0|        break;
 3690|      0|      case 0xAB9A:
 3691|      0|        bufpush(0x13CA);
 3692|      0|        break;
 3693|      0|      case 0xAB9B:
 3694|      0|        bufpush(0x13CB);
 3695|      0|        break;
 3696|      0|      case 0xAB9C:
 3697|      0|        bufpush(0x13CC);
 3698|      0|        break;
 3699|      0|      case 0xAB9D:
 3700|      0|        bufpush(0x13CD);
 3701|      0|        break;
 3702|      0|      case 0xAB9E:
 3703|      0|        bufpush(0x13CE);
 3704|      0|        break;
 3705|      0|      case 0xAB9F:
 3706|      0|        bufpush(0x13CF);
 3707|      0|        break;
 3708|      0|      case 0xABA0:
 3709|      0|        bufpush(0x13D0);
 3710|      0|        break;
 3711|      0|      case 0xABA1:
 3712|      0|        bufpush(0x13D1);
 3713|      0|        break;
 3714|      0|      case 0xABA2:
 3715|      0|        bufpush(0x13D2);
 3716|      0|        break;
 3717|      0|      case 0xABA3:
 3718|      0|        bufpush(0x13D3);
 3719|      0|        break;
 3720|      0|      case 0xABA4:
 3721|      0|        bufpush(0x13D4);
 3722|      0|        break;
 3723|      0|      case 0xABA5:
 3724|      0|        bufpush(0x13D5);
 3725|      0|        break;
 3726|      0|      case 0xABA6:
 3727|      0|        bufpush(0x13D6);
 3728|      0|        break;
 3729|      0|      case 0xABA7:
 3730|      0|        bufpush(0x13D7);
 3731|      0|        break;
 3732|      0|      case 0xABA8:
 3733|      0|        bufpush(0x13D8);
 3734|      0|        break;
 3735|      0|      case 0xABA9:
 3736|      0|        bufpush(0x13D9);
 3737|      0|        break;
 3738|      0|      case 0xABAA:
 3739|      0|        bufpush(0x13DA);
 3740|      0|        break;
 3741|      0|      case 0xABAB:
 3742|      0|        bufpush(0x13DB);
 3743|      0|        break;
 3744|      0|      case 0xABAC:
 3745|      0|        bufpush(0x13DC);
 3746|      0|        break;
 3747|      0|      case 0xABAD:
 3748|      0|        bufpush(0x13DD);
 3749|      0|        break;
 3750|      0|      case 0xABAE:
 3751|      0|        bufpush(0x13DE);
 3752|      0|        break;
 3753|      0|      case 0xABAF:
 3754|      0|        bufpush(0x13DF);
 3755|      0|        break;
 3756|      0|      case 0xABB0:
 3757|      0|        bufpush(0x13E0);
 3758|      0|        break;
 3759|      0|      case 0xABB1:
 3760|      0|        bufpush(0x13E1);
 3761|      0|        break;
 3762|      0|      case 0xABB2:
 3763|      0|        bufpush(0x13E2);
 3764|      0|        break;
 3765|      0|      case 0xABB3:
 3766|      0|        bufpush(0x13E3);
 3767|      0|        break;
 3768|      0|      case 0xABB4:
 3769|      0|        bufpush(0x13E4);
 3770|      0|        break;
 3771|      0|      case 0xABB5:
 3772|      0|        bufpush(0x13E5);
 3773|      0|        break;
 3774|      0|      case 0xABB6:
 3775|      0|        bufpush(0x13E6);
 3776|      0|        break;
 3777|      0|      case 0xABB7:
 3778|      0|        bufpush(0x13E7);
 3779|      0|        break;
 3780|      0|      case 0xABB8:
 3781|      0|        bufpush(0x13E8);
 3782|      0|        break;
 3783|      0|      case 0xABB9:
 3784|      0|        bufpush(0x13E9);
 3785|      0|        break;
 3786|      0|      case 0xABBA:
 3787|      0|        bufpush(0x13EA);
 3788|      0|        break;
 3789|      0|      case 0xABBB:
 3790|      0|        bufpush(0x13EB);
 3791|      0|        break;
 3792|      0|      case 0xABBC:
 3793|      0|        bufpush(0x13EC);
 3794|      0|        break;
 3795|      0|      case 0xABBD:
 3796|      0|        bufpush(0x13ED);
 3797|      0|        break;
 3798|      0|      case 0xABBE:
 3799|      0|        bufpush(0x13EE);
 3800|      0|        break;
 3801|      0|      case 0xABBF:
 3802|      0|        bufpush(0x13EF);
 3803|      0|        break;
 3804|      0|      case 0xFB00:
 3805|      0|        bufpush(0x0066);
 3806|      0|        bufpush(0x0066);
 3807|      0|        break;
 3808|      0|      case 0xFB01:
 3809|      0|        bufpush(0x0066);
 3810|      0|        bufpush(0x0069);
 3811|      0|        break;
 3812|      0|      case 0xFB02:
 3813|      0|        bufpush(0x0066);
 3814|      0|        bufpush(0x006C);
 3815|      0|        break;
 3816|      0|      case 0xFB03:
 3817|      0|        bufpush(0x0066);
 3818|      0|        bufpush(0x0066);
 3819|      0|        bufpush(0x0069);
 3820|      0|        break;
 3821|      0|      case 0xFB04:
 3822|      0|        bufpush(0x0066);
 3823|      0|        bufpush(0x0066);
 3824|      0|        bufpush(0x006C);
 3825|      0|        break;
 3826|      0|      case 0xFB05:
 3827|      0|        bufpush(0x0073);
 3828|      0|        bufpush(0x0074);
 3829|      0|        break;
 3830|      0|      case 0xFB06:
 3831|      0|        bufpush(0x0073);
 3832|      0|        bufpush(0x0074);
 3833|      0|        break;
 3834|      0|      case 0xFB13:
 3835|      0|        bufpush(0x0574);
 3836|      0|        bufpush(0x0576);
 3837|      0|        break;
 3838|      0|      case 0xFB14:
 3839|      0|        bufpush(0x0574);
 3840|      0|        bufpush(0x0565);
 3841|      0|        break;
 3842|      0|      case 0xFB15:
 3843|      0|        bufpush(0x0574);
 3844|      0|        bufpush(0x056B);
 3845|      0|        break;
 3846|      0|      case 0xFB16:
 3847|      0|        bufpush(0x057E);
 3848|      0|        bufpush(0x0576);
 3849|      0|        break;
 3850|      0|      case 0xFB17:
 3851|      0|        bufpush(0x0574);
 3852|      0|        bufpush(0x056D);
 3853|      0|        break;
 3854|      0|      case 0xFF21:
 3855|      0|        bufpush(0xFF41);
 3856|      0|        break;
 3857|      0|      case 0xFF22:
 3858|      0|        bufpush(0xFF42);
 3859|      0|        break;
 3860|      0|      case 0xFF23:
 3861|      0|        bufpush(0xFF43);
 3862|      0|        break;
 3863|      0|      case 0xFF24:
 3864|      0|        bufpush(0xFF44);
 3865|      0|        break;
 3866|      0|      case 0xFF25:
 3867|      0|        bufpush(0xFF45);
 3868|      0|        break;
 3869|      0|      case 0xFF26:
 3870|      0|        bufpush(0xFF46);
 3871|      0|        break;
 3872|      0|      case 0xFF27:
 3873|      0|        bufpush(0xFF47);
 3874|      0|        break;
 3875|      0|      case 0xFF28:
 3876|      0|        bufpush(0xFF48);
 3877|      0|        break;
 3878|      0|      case 0xFF29:
 3879|      0|        bufpush(0xFF49);
 3880|      0|        break;
 3881|      0|      case 0xFF2A:
 3882|      0|        bufpush(0xFF4A);
 3883|      0|        break;
 3884|      0|      case 0xFF2B:
 3885|      0|        bufpush(0xFF4B);
 3886|      0|        break;
 3887|      0|      case 0xFF2C:
 3888|      0|        bufpush(0xFF4C);
 3889|      0|        break;
 3890|      0|      case 0xFF2D:
 3891|      0|        bufpush(0xFF4D);
 3892|      0|        break;
 3893|      0|      case 0xFF2E:
 3894|      0|        bufpush(0xFF4E);
 3895|      0|        break;
 3896|      0|      case 0xFF2F:
 3897|      0|        bufpush(0xFF4F);
 3898|      0|        break;
 3899|      0|      case 0xFF30:
 3900|      0|        bufpush(0xFF50);
 3901|      0|        break;
 3902|      0|      case 0xFF31:
 3903|      0|        bufpush(0xFF51);
 3904|      0|        break;
 3905|      0|      case 0xFF32:
 3906|      0|        bufpush(0xFF52);
 3907|      0|        break;
 3908|      0|      case 0xFF33:
 3909|      0|        bufpush(0xFF53);
 3910|      0|        break;
 3911|      0|      case 0xFF34:
 3912|      0|        bufpush(0xFF54);
 3913|      0|        break;
 3914|      0|      case 0xFF35:
 3915|      0|        bufpush(0xFF55);
 3916|      0|        break;
 3917|      0|      case 0xFF36:
 3918|      0|        bufpush(0xFF56);
 3919|      0|        break;
 3920|      0|      case 0xFF37:
 3921|      0|        bufpush(0xFF57);
 3922|      0|        break;
 3923|      0|      case 0xFF38:
 3924|      0|        bufpush(0xFF58);
 3925|      0|        break;
 3926|      0|      case 0xFF39:
 3927|      0|        bufpush(0xFF59);
 3928|      0|        break;
 3929|      0|      case 0xFF3A:
 3930|      0|        bufpush(0xFF5A);
 3931|      0|        break;
 3932|      0|      case 0x10400:
 3933|      0|        bufpush(0x10428);
 3934|      0|        break;
 3935|      0|      case 0x10401:
 3936|      0|        bufpush(0x10429);
 3937|      0|        break;
 3938|      0|      case 0x10402:
 3939|      0|        bufpush(0x1042A);
 3940|      0|        break;
 3941|      0|      case 0x10403:
 3942|      0|        bufpush(0x1042B);
 3943|      0|        break;
 3944|      0|      case 0x10404:
 3945|      0|        bufpush(0x1042C);
 3946|      0|        break;
 3947|      0|      case 0x10405:
 3948|      0|        bufpush(0x1042D);
 3949|      0|        break;
 3950|      0|      case 0x10406:
 3951|      0|        bufpush(0x1042E);
 3952|      0|        break;
 3953|      0|      case 0x10407:
 3954|      0|        bufpush(0x1042F);
 3955|      0|        break;
 3956|      0|      case 0x10408:
 3957|      0|        bufpush(0x10430);
 3958|      0|        break;
 3959|      0|      case 0x10409:
 3960|      0|        bufpush(0x10431);
 3961|      0|        break;
 3962|      0|      case 0x1040A:
 3963|      0|        bufpush(0x10432);
 3964|      0|        break;
 3965|      0|      case 0x1040B:
 3966|      0|        bufpush(0x10433);
 3967|      0|        break;
 3968|      0|      case 0x1040C:
 3969|      0|        bufpush(0x10434);
 3970|      0|        break;
 3971|      0|      case 0x1040D:
 3972|      0|        bufpush(0x10435);
 3973|      0|        break;
 3974|      0|      case 0x1040E:
 3975|      0|        bufpush(0x10436);
 3976|      0|        break;
 3977|      0|      case 0x1040F:
 3978|      0|        bufpush(0x10437);
 3979|      0|        break;
 3980|      0|      case 0x10410:
 3981|      0|        bufpush(0x10438);
 3982|      0|        break;
 3983|      0|      case 0x10411:
 3984|      0|        bufpush(0x10439);
 3985|      0|        break;
 3986|      0|      case 0x10412:
 3987|      0|        bufpush(0x1043A);
 3988|      0|        break;
 3989|      0|      case 0x10413:
 3990|      0|        bufpush(0x1043B);
 3991|      0|        break;
 3992|      0|      case 0x10414:
 3993|      0|        bufpush(0x1043C);
 3994|      0|        break;
 3995|      0|      case 0x10415:
 3996|      0|        bufpush(0x1043D);
 3997|      0|        break;
 3998|      0|      case 0x10416:
 3999|      0|        bufpush(0x1043E);
 4000|      0|        break;
 4001|      0|      case 0x10417:
 4002|      0|        bufpush(0x1043F);
 4003|      0|        break;
 4004|      0|      case 0x10418:
 4005|      0|        bufpush(0x10440);
 4006|      0|        break;
 4007|      0|      case 0x10419:
 4008|      0|        bufpush(0x10441);
 4009|      0|        break;
 4010|      0|      case 0x1041A:
 4011|      0|        bufpush(0x10442);
 4012|      0|        break;
 4013|      0|      case 0x1041B:
 4014|      0|        bufpush(0x10443);
 4015|      0|        break;
 4016|      0|      case 0x1041C:
 4017|      0|        bufpush(0x10444);
 4018|      0|        break;
 4019|      0|      case 0x1041D:
 4020|      0|        bufpush(0x10445);
 4021|      0|        break;
 4022|      0|      case 0x1041E:
 4023|      0|        bufpush(0x10446);
 4024|      0|        break;
 4025|      0|      case 0x1041F:
 4026|      0|        bufpush(0x10447);
 4027|      0|        break;
 4028|      0|      case 0x10420:
 4029|      0|        bufpush(0x10448);
 4030|      0|        break;
 4031|      0|      case 0x10421:
 4032|      0|        bufpush(0x10449);
 4033|      0|        break;
 4034|      0|      case 0x10422:
 4035|      0|        bufpush(0x1044A);
 4036|      0|        break;
 4037|      0|      case 0x10423:
 4038|      0|        bufpush(0x1044B);
 4039|      0|        break;
 4040|      0|      case 0x10424:
 4041|      0|        bufpush(0x1044C);
 4042|      0|        break;
 4043|      0|      case 0x10425:
 4044|      0|        bufpush(0x1044D);
 4045|      0|        break;
 4046|      0|      case 0x10426:
 4047|      0|        bufpush(0x1044E);
 4048|      0|        break;
 4049|      0|      case 0x10427:
 4050|      0|        bufpush(0x1044F);
 4051|      0|        break;
 4052|      0|      case 0x104B0:
 4053|      0|        bufpush(0x104D8);
 4054|      0|        break;
 4055|      0|      case 0x104B1:
 4056|      0|        bufpush(0x104D9);
 4057|      0|        break;
 4058|      0|      case 0x104B2:
 4059|      0|        bufpush(0x104DA);
 4060|      0|        break;
 4061|      0|      case 0x104B3:
 4062|      0|        bufpush(0x104DB);
 4063|      0|        break;
 4064|      0|      case 0x104B4:
 4065|      0|        bufpush(0x104DC);
 4066|      0|        break;
 4067|      0|      case 0x104B5:
 4068|      0|        bufpush(0x104DD);
 4069|      0|        break;
 4070|      0|      case 0x104B6:
 4071|      0|        bufpush(0x104DE);
 4072|      0|        break;
 4073|      0|      case 0x104B7:
 4074|      0|        bufpush(0x104DF);
 4075|      0|        break;
 4076|      0|      case 0x104B8:
 4077|      0|        bufpush(0x104E0);
 4078|      0|        break;
 4079|      0|      case 0x104B9:
 4080|      0|        bufpush(0x104E1);
 4081|      0|        break;
 4082|      0|      case 0x104BA:
 4083|      0|        bufpush(0x104E2);
 4084|      0|        break;
 4085|      0|      case 0x104BB:
 4086|      0|        bufpush(0x104E3);
 4087|      0|        break;
 4088|      0|      case 0x104BC:
 4089|      0|        bufpush(0x104E4);
 4090|      0|        break;
 4091|      0|      case 0x104BD:
 4092|      0|        bufpush(0x104E5);
 4093|      0|        break;
 4094|      0|      case 0x104BE:
 4095|      0|        bufpush(0x104E6);
 4096|      0|        break;
 4097|      0|      case 0x104BF:
 4098|      0|        bufpush(0x104E7);
 4099|      0|        break;
 4100|      0|      case 0x104C0:
 4101|      0|        bufpush(0x104E8);
 4102|      0|        break;
 4103|      0|      case 0x104C1:
 4104|      0|        bufpush(0x104E9);
 4105|      0|        break;
 4106|      0|      case 0x104C2:
 4107|      0|        bufpush(0x104EA);
 4108|      0|        break;
 4109|      0|      case 0x104C3:
 4110|      0|        bufpush(0x104EB);
 4111|      0|        break;
 4112|      0|      case 0x104C4:
 4113|      0|        bufpush(0x104EC);
 4114|      0|        break;
 4115|      0|      case 0x104C5:
 4116|      0|        bufpush(0x104ED);
 4117|      0|        break;
 4118|      0|      case 0x104C6:
 4119|      0|        bufpush(0x104EE);
 4120|      0|        break;
 4121|      0|      case 0x104C7:
 4122|      0|        bufpush(0x104EF);
 4123|      0|        break;
 4124|      0|      case 0x104C8:
 4125|      0|        bufpush(0x104F0);
 4126|      0|        break;
 4127|      0|      case 0x104C9:
 4128|      0|        bufpush(0x104F1);
 4129|      0|        break;
 4130|      0|      case 0x104CA:
 4131|      0|        bufpush(0x104F2);
 4132|      0|        break;
 4133|      0|      case 0x104CB:
 4134|      0|        bufpush(0x104F3);
 4135|      0|        break;
 4136|      0|      case 0x104CC:
 4137|      0|        bufpush(0x104F4);
 4138|      0|        break;
 4139|      0|      case 0x104CD:
 4140|      0|        bufpush(0x104F5);
 4141|      0|        break;
 4142|      0|      case 0x104CE:
 4143|      0|        bufpush(0x104F6);
 4144|      0|        break;
 4145|      0|      case 0x104CF:
 4146|      0|        bufpush(0x104F7);
 4147|      0|        break;
 4148|      0|      case 0x104D0:
 4149|      0|        bufpush(0x104F8);
 4150|      0|        break;
 4151|      0|      case 0x104D1:
 4152|      0|        bufpush(0x104F9);
 4153|      0|        break;
 4154|      0|      case 0x104D2:
 4155|      0|        bufpush(0x104FA);
 4156|      0|        break;
 4157|      0|      case 0x104D3:
 4158|      0|        bufpush(0x104FB);
 4159|      0|        break;
 4160|      0|      case 0x10570:
 4161|      0|        bufpush(0x10597);
 4162|      0|        break;
 4163|      0|      case 0x10571:
 4164|      0|        bufpush(0x10598);
 4165|      0|        break;
 4166|      0|      case 0x10572:
 4167|      0|        bufpush(0x10599);
 4168|      0|        break;
 4169|      0|      case 0x10573:
 4170|      0|        bufpush(0x1059A);
 4171|      0|        break;
 4172|      0|      case 0x10574:
 4173|      0|        bufpush(0x1059B);
 4174|      0|        break;
 4175|      0|      case 0x10575:
 4176|      0|        bufpush(0x1059C);
 4177|      0|        break;
 4178|      0|      case 0x10576:
 4179|      0|        bufpush(0x1059D);
 4180|      0|        break;
 4181|      0|      case 0x10577:
 4182|      0|        bufpush(0x1059E);
 4183|      0|        break;
 4184|      0|      case 0x10578:
 4185|      0|        bufpush(0x1059F);
 4186|      0|        break;
 4187|      0|      case 0x10579:
 4188|      0|        bufpush(0x105A0);
 4189|      0|        break;
 4190|      0|      case 0x1057A:
 4191|      0|        bufpush(0x105A1);
 4192|      0|        break;
 4193|      0|      case 0x1057C:
 4194|      0|        bufpush(0x105A3);
 4195|      0|        break;
 4196|      0|      case 0x1057D:
 4197|      0|        bufpush(0x105A4);
 4198|      0|        break;
 4199|      0|      case 0x1057E:
 4200|      0|        bufpush(0x105A5);
 4201|      0|        break;
 4202|      0|      case 0x1057F:
 4203|      0|        bufpush(0x105A6);
 4204|      0|        break;
 4205|      0|      case 0x10580:
 4206|      0|        bufpush(0x105A7);
 4207|      0|        break;
 4208|      0|      case 0x10581:
 4209|      0|        bufpush(0x105A8);
 4210|      0|        break;
 4211|      0|      case 0x10582:
 4212|      0|        bufpush(0x105A9);
 4213|      0|        break;
 4214|      0|      case 0x10583:
 4215|      0|        bufpush(0x105AA);
 4216|      0|        break;
 4217|      0|      case 0x10584:
 4218|      0|        bufpush(0x105AB);
 4219|      0|        break;
 4220|      0|      case 0x10585:
 4221|      0|        bufpush(0x105AC);
 4222|      0|        break;
 4223|      0|      case 0x10586:
 4224|      0|        bufpush(0x105AD);
 4225|      0|        break;
 4226|      0|      case 0x10587:
 4227|      0|        bufpush(0x105AE);
 4228|      0|        break;
 4229|      0|      case 0x10588:
 4230|      0|        bufpush(0x105AF);
 4231|      0|        break;
 4232|      0|      case 0x10589:
 4233|      0|        bufpush(0x105B0);
 4234|      0|        break;
 4235|      0|      case 0x1058A:
 4236|      0|        bufpush(0x105B1);
 4237|      0|        break;
 4238|      0|      case 0x1058C:
 4239|      0|        bufpush(0x105B3);
 4240|      0|        break;
 4241|      0|      case 0x1058D:
 4242|      0|        bufpush(0x105B4);
 4243|      0|        break;
 4244|      0|      case 0x1058E:
 4245|      0|        bufpush(0x105B5);
 4246|      0|        break;
 4247|      0|      case 0x1058F:
 4248|      0|        bufpush(0x105B6);
 4249|      0|        break;
 4250|      0|      case 0x10590:
 4251|      0|        bufpush(0x105B7);
 4252|      0|        break;
 4253|      0|      case 0x10591:
 4254|      0|        bufpush(0x105B8);
 4255|      0|        break;
 4256|      0|      case 0x10592:
 4257|      0|        bufpush(0x105B9);
 4258|      0|        break;
 4259|      0|      case 0x10594:
 4260|      0|        bufpush(0x105BB);
 4261|      0|        break;
 4262|      0|      case 0x10595:
 4263|      0|        bufpush(0x105BC);
 4264|      0|        break;
 4265|      0|      case 0x10C80:
 4266|      0|        bufpush(0x10CC0);
 4267|      0|        break;
 4268|      0|      case 0x10C81:
 4269|      0|        bufpush(0x10CC1);
 4270|      0|        break;
 4271|      0|      case 0x10C82:
 4272|      0|        bufpush(0x10CC2);
 4273|      0|        break;
 4274|      0|      case 0x10C83:
 4275|      0|        bufpush(0x10CC3);
 4276|      0|        break;
 4277|      0|      case 0x10C84:
 4278|      0|        bufpush(0x10CC4);
 4279|      0|        break;
 4280|      0|      case 0x10C85:
 4281|      0|        bufpush(0x10CC5);
 4282|      0|        break;
 4283|      0|      case 0x10C86:
 4284|      0|        bufpush(0x10CC6);
 4285|      0|        break;
 4286|      0|      case 0x10C87:
 4287|      0|        bufpush(0x10CC7);
 4288|      0|        break;
 4289|      0|      case 0x10C88:
 4290|      0|        bufpush(0x10CC8);
 4291|      0|        break;
 4292|      0|      case 0x10C89:
 4293|      0|        bufpush(0x10CC9);
 4294|      0|        break;
 4295|      0|      case 0x10C8A:
 4296|      0|        bufpush(0x10CCA);
 4297|      0|        break;
 4298|      0|      case 0x10C8B:
 4299|      0|        bufpush(0x10CCB);
 4300|      0|        break;
 4301|      0|      case 0x10C8C:
 4302|      0|        bufpush(0x10CCC);
 4303|      0|        break;
 4304|      0|      case 0x10C8D:
 4305|      0|        bufpush(0x10CCD);
 4306|      0|        break;
 4307|      0|      case 0x10C8E:
 4308|      0|        bufpush(0x10CCE);
 4309|      0|        break;
 4310|      0|      case 0x10C8F:
 4311|      0|        bufpush(0x10CCF);
 4312|      0|        break;
 4313|      0|      case 0x10C90:
 4314|      0|        bufpush(0x10CD0);
 4315|      0|        break;
 4316|      0|      case 0x10C91:
 4317|      0|        bufpush(0x10CD1);
 4318|      0|        break;
 4319|      0|      case 0x10C92:
 4320|      0|        bufpush(0x10CD2);
 4321|      0|        break;
 4322|      0|      case 0x10C93:
 4323|      0|        bufpush(0x10CD3);
 4324|      0|        break;
 4325|      0|      case 0x10C94:
 4326|      0|        bufpush(0x10CD4);
 4327|      0|        break;
 4328|      0|      case 0x10C95:
 4329|      0|        bufpush(0x10CD5);
 4330|      0|        break;
 4331|      0|      case 0x10C96:
 4332|      0|        bufpush(0x10CD6);
 4333|      0|        break;
 4334|      0|      case 0x10C97:
 4335|      0|        bufpush(0x10CD7);
 4336|      0|        break;
 4337|      0|      case 0x10C98:
 4338|      0|        bufpush(0x10CD8);
 4339|      0|        break;
 4340|      0|      case 0x10C99:
 4341|      0|        bufpush(0x10CD9);
 4342|      0|        break;
 4343|      0|      case 0x10C9A:
 4344|      0|        bufpush(0x10CDA);
 4345|      0|        break;
 4346|      0|      case 0x10C9B:
 4347|      0|        bufpush(0x10CDB);
 4348|      0|        break;
 4349|      0|      case 0x10C9C:
 4350|      0|        bufpush(0x10CDC);
 4351|      0|        break;
 4352|      0|      case 0x10C9D:
 4353|      0|        bufpush(0x10CDD);
 4354|      0|        break;
 4355|      0|      case 0x10C9E:
 4356|      0|        bufpush(0x10CDE);
 4357|      0|        break;
 4358|      0|      case 0x10C9F:
 4359|      0|        bufpush(0x10CDF);
 4360|      0|        break;
 4361|      0|      case 0x10CA0:
 4362|      0|        bufpush(0x10CE0);
 4363|      0|        break;
 4364|      0|      case 0x10CA1:
 4365|      0|        bufpush(0x10CE1);
 4366|      0|        break;
 4367|      0|      case 0x10CA2:
 4368|      0|        bufpush(0x10CE2);
 4369|      0|        break;
 4370|      0|      case 0x10CA3:
 4371|      0|        bufpush(0x10CE3);
 4372|      0|        break;
 4373|      0|      case 0x10CA4:
 4374|      0|        bufpush(0x10CE4);
 4375|      0|        break;
 4376|      0|      case 0x10CA5:
 4377|      0|        bufpush(0x10CE5);
 4378|      0|        break;
 4379|      0|      case 0x10CA6:
 4380|      0|        bufpush(0x10CE6);
 4381|      0|        break;
 4382|      0|      case 0x10CA7:
 4383|      0|        bufpush(0x10CE7);
 4384|      0|        break;
 4385|      0|      case 0x10CA8:
 4386|      0|        bufpush(0x10CE8);
 4387|      0|        break;
 4388|      0|      case 0x10CA9:
 4389|      0|        bufpush(0x10CE9);
 4390|      0|        break;
 4391|      0|      case 0x10CAA:
 4392|      0|        bufpush(0x10CEA);
 4393|      0|        break;
 4394|      0|      case 0x10CAB:
 4395|      0|        bufpush(0x10CEB);
 4396|      0|        break;
 4397|      0|      case 0x10CAC:
 4398|      0|        bufpush(0x10CEC);
 4399|      0|        break;
 4400|      0|      case 0x10CAD:
 4401|      0|        bufpush(0x10CED);
 4402|      0|        break;
 4403|      0|      case 0x10CAE:
 4404|      0|        bufpush(0x10CEE);
 4405|      0|        break;
 4406|      0|      case 0x10CAF:
 4407|      0|        bufpush(0x10CEF);
 4408|      0|        break;
 4409|      0|      case 0x10CB0:
 4410|      0|        bufpush(0x10CF0);
 4411|      0|        break;
 4412|      0|      case 0x10CB1:
 4413|      0|        bufpush(0x10CF1);
 4414|      0|        break;
 4415|      0|      case 0x10CB2:
 4416|      0|        bufpush(0x10CF2);
 4417|      0|        break;
 4418|      0|      case 0x118A0:
 4419|      0|        bufpush(0x118C0);
 4420|      0|        break;
 4421|      0|      case 0x118A1:
 4422|      0|        bufpush(0x118C1);
 4423|      0|        break;
 4424|      0|      case 0x118A2:
 4425|      0|        bufpush(0x118C2);
 4426|      0|        break;
 4427|      0|      case 0x118A3:
 4428|      0|        bufpush(0x118C3);
 4429|      0|        break;
 4430|      0|      case 0x118A4:
 4431|      0|        bufpush(0x118C4);
 4432|      0|        break;
 4433|      0|      case 0x118A5:
 4434|      0|        bufpush(0x118C5);
 4435|      0|        break;
 4436|      0|      case 0x118A6:
 4437|      0|        bufpush(0x118C6);
 4438|      0|        break;
 4439|      0|      case 0x118A7:
 4440|      0|        bufpush(0x118C7);
 4441|      0|        break;
 4442|      0|      case 0x118A8:
 4443|      0|        bufpush(0x118C8);
 4444|      0|        break;
 4445|      0|      case 0x118A9:
 4446|      0|        bufpush(0x118C9);
 4447|      0|        break;
 4448|      0|      case 0x118AA:
 4449|      0|        bufpush(0x118CA);
 4450|      0|        break;
 4451|      0|      case 0x118AB:
 4452|      0|        bufpush(0x118CB);
 4453|      0|        break;
 4454|      0|      case 0x118AC:
 4455|      0|        bufpush(0x118CC);
 4456|      0|        break;
 4457|      0|      case 0x118AD:
 4458|      0|        bufpush(0x118CD);
 4459|      0|        break;
 4460|      0|      case 0x118AE:
 4461|      0|        bufpush(0x118CE);
 4462|      0|        break;
 4463|      0|      case 0x118AF:
 4464|      0|        bufpush(0x118CF);
 4465|      0|        break;
 4466|      0|      case 0x118B0:
 4467|      0|        bufpush(0x118D0);
 4468|      0|        break;
 4469|      0|      case 0x118B1:
 4470|      0|        bufpush(0x118D1);
 4471|      0|        break;
 4472|      0|      case 0x118B2:
 4473|      0|        bufpush(0x118D2);
 4474|      0|        break;
 4475|      0|      case 0x118B3:
 4476|      0|        bufpush(0x118D3);
 4477|      0|        break;
 4478|      0|      case 0x118B4:
 4479|      0|        bufpush(0x118D4);
 4480|      0|        break;
 4481|      0|      case 0x118B5:
 4482|      0|        bufpush(0x118D5);
 4483|      0|        break;
 4484|      0|      case 0x118B6:
 4485|      0|        bufpush(0x118D6);
 4486|      0|        break;
 4487|      0|      case 0x118B7:
 4488|      0|        bufpush(0x118D7);
 4489|      0|        break;
 4490|      0|      case 0x118B8:
 4491|      0|        bufpush(0x118D8);
 4492|      0|        break;
 4493|      0|      case 0x118B9:
 4494|      0|        bufpush(0x118D9);
 4495|      0|        break;
 4496|      0|      case 0x118BA:
 4497|      0|        bufpush(0x118DA);
 4498|      0|        break;
 4499|      0|      case 0x118BB:
 4500|      0|        bufpush(0x118DB);
 4501|      0|        break;
 4502|      0|      case 0x118BC:
 4503|      0|        bufpush(0x118DC);
 4504|      0|        break;
 4505|      0|      case 0x118BD:
 4506|      0|        bufpush(0x118DD);
 4507|      0|        break;
 4508|      0|      case 0x118BE:
 4509|      0|        bufpush(0x118DE);
 4510|      0|        break;
 4511|      0|      case 0x118BF:
 4512|      0|        bufpush(0x118DF);
 4513|      0|        break;
 4514|      0|      case 0x16E40:
 4515|      0|        bufpush(0x16E60);
 4516|      0|        break;
 4517|      0|      case 0x16E41:
 4518|      0|        bufpush(0x16E61);
 4519|      0|        break;
 4520|      0|      case 0x16E42:
 4521|      0|        bufpush(0x16E62);
 4522|      0|        break;
 4523|      0|      case 0x16E43:
 4524|      0|        bufpush(0x16E63);
 4525|      0|        break;
 4526|      0|      case 0x16E44:
 4527|      0|        bufpush(0x16E64);
 4528|      0|        break;
 4529|      0|      case 0x16E45:
 4530|      0|        bufpush(0x16E65);
 4531|      0|        break;
 4532|      0|      case 0x16E46:
 4533|      0|        bufpush(0x16E66);
 4534|      0|        break;
 4535|      0|      case 0x16E47:
 4536|      0|        bufpush(0x16E67);
 4537|      0|        break;
 4538|      0|      case 0x16E48:
 4539|      0|        bufpush(0x16E68);
 4540|      0|        break;
 4541|      0|      case 0x16E49:
 4542|      0|        bufpush(0x16E69);
 4543|      0|        break;
 4544|      0|      case 0x16E4A:
 4545|      0|        bufpush(0x16E6A);
 4546|      0|        break;
 4547|      0|      case 0x16E4B:
 4548|      0|        bufpush(0x16E6B);
 4549|      0|        break;
 4550|      0|      case 0x16E4C:
 4551|      0|        bufpush(0x16E6C);
 4552|      0|        break;
 4553|      0|      case 0x16E4D:
 4554|      0|        bufpush(0x16E6D);
 4555|      0|        break;
 4556|      0|      case 0x16E4E:
 4557|      0|        bufpush(0x16E6E);
 4558|      0|        break;
 4559|      0|      case 0x16E4F:
 4560|      0|        bufpush(0x16E6F);
 4561|      0|        break;
 4562|      0|      case 0x16E50:
 4563|      0|        bufpush(0x16E70);
 4564|      0|        break;
 4565|      0|      case 0x16E51:
 4566|      0|        bufpush(0x16E71);
 4567|      0|        break;
 4568|      0|      case 0x16E52:
 4569|      0|        bufpush(0x16E72);
 4570|      0|        break;
 4571|      0|      case 0x16E53:
 4572|      0|        bufpush(0x16E73);
 4573|      0|        break;
 4574|      0|      case 0x16E54:
 4575|      0|        bufpush(0x16E74);
 4576|      0|        break;
 4577|      0|      case 0x16E55:
 4578|      0|        bufpush(0x16E75);
 4579|      0|        break;
 4580|      0|      case 0x16E56:
 4581|      0|        bufpush(0x16E76);
 4582|      0|        break;
 4583|      0|      case 0x16E57:
 4584|      0|        bufpush(0x16E77);
 4585|      0|        break;
 4586|      0|      case 0x16E58:
 4587|      0|        bufpush(0x16E78);
 4588|      0|        break;
 4589|      0|      case 0x16E59:
 4590|      0|        bufpush(0x16E79);
 4591|      0|        break;
 4592|      0|      case 0x16E5A:
 4593|      0|        bufpush(0x16E7A);
 4594|      0|        break;
 4595|      0|      case 0x16E5B:
 4596|      0|        bufpush(0x16E7B);
 4597|      0|        break;
 4598|      0|      case 0x16E5C:
 4599|      0|        bufpush(0x16E7C);
 4600|      0|        break;
 4601|      0|      case 0x16E5D:
 4602|      0|        bufpush(0x16E7D);
 4603|      0|        break;
 4604|      0|      case 0x16E5E:
 4605|      0|        bufpush(0x16E7E);
 4606|      0|        break;
 4607|      0|      case 0x16E5F:
 4608|      0|        bufpush(0x16E7F);
 4609|      0|        break;
 4610|      0|      case 0x1E900:
 4611|      0|        bufpush(0x1E922);
 4612|      0|        break;
 4613|      0|      case 0x1E901:
 4614|      0|        bufpush(0x1E923);
 4615|      0|        break;
 4616|      0|      case 0x1E902:
 4617|      0|        bufpush(0x1E924);
 4618|      0|        break;
 4619|      0|      case 0x1E903:
 4620|      0|        bufpush(0x1E925);
 4621|      0|        break;
 4622|      0|      case 0x1E904:
 4623|      0|        bufpush(0x1E926);
 4624|      0|        break;
 4625|      0|      case 0x1E905:
 4626|      0|        bufpush(0x1E927);
 4627|      0|        break;
 4628|      0|      case 0x1E906:
 4629|      0|        bufpush(0x1E928);
 4630|      0|        break;
 4631|      0|      case 0x1E907:
 4632|      0|        bufpush(0x1E929);
 4633|      0|        break;
 4634|      0|      case 0x1E908:
 4635|      0|        bufpush(0x1E92A);
 4636|      0|        break;
 4637|      0|      case 0x1E909:
 4638|      0|        bufpush(0x1E92B);
 4639|      0|        break;
 4640|      0|      case 0x1E90A:
 4641|      0|        bufpush(0x1E92C);
 4642|      0|        break;
 4643|      0|      case 0x1E90B:
 4644|      0|        bufpush(0x1E92D);
 4645|      0|        break;
 4646|      0|      case 0x1E90C:
 4647|      0|        bufpush(0x1E92E);
 4648|      0|        break;
 4649|      0|      case 0x1E90D:
 4650|      0|        bufpush(0x1E92F);
 4651|      0|        break;
 4652|      0|      case 0x1E90E:
 4653|      0|        bufpush(0x1E930);
 4654|      0|        break;
 4655|      0|      case 0x1E90F:
 4656|      0|        bufpush(0x1E931);
 4657|      0|        break;
 4658|      0|      case 0x1E910:
 4659|      0|        bufpush(0x1E932);
 4660|      0|        break;
 4661|      0|      case 0x1E911:
 4662|      0|        bufpush(0x1E933);
 4663|      0|        break;
 4664|      0|      case 0x1E912:
 4665|      0|        bufpush(0x1E934);
 4666|      0|        break;
 4667|      0|      case 0x1E913:
 4668|      0|        bufpush(0x1E935);
 4669|      0|        break;
 4670|      0|      case 0x1E914:
 4671|      0|        bufpush(0x1E936);
 4672|      0|        break;
 4673|      0|      case 0x1E915:
 4674|      0|        bufpush(0x1E937);
 4675|      0|        break;
 4676|      0|      case 0x1E916:
 4677|      0|        bufpush(0x1E938);
 4678|      0|        break;
 4679|      0|      case 0x1E917:
 4680|      0|        bufpush(0x1E939);
 4681|      0|        break;
 4682|      0|      case 0x1E918:
 4683|      0|        bufpush(0x1E93A);
 4684|      0|        break;
 4685|      0|      case 0x1E919:
 4686|      0|        bufpush(0x1E93B);
 4687|      0|        break;
 4688|      0|      case 0x1E91A:
 4689|      0|        bufpush(0x1E93C);
 4690|      0|        break;
 4691|      0|      case 0x1E91B:
 4692|      0|        bufpush(0x1E93D);
 4693|      0|        break;
 4694|      0|      case 0x1E91C:
 4695|      0|        bufpush(0x1E93E);
 4696|      0|        break;
 4697|      0|      case 0x1E91D:
 4698|      0|        bufpush(0x1E93F);
 4699|      0|        break;
 4700|      0|      case 0x1E91E:
 4701|      0|        bufpush(0x1E940);
 4702|      0|        break;
 4703|      0|      case 0x1E91F:
 4704|      0|        bufpush(0x1E941);
 4705|      0|        break;
 4706|      0|      case 0x1E920:
 4707|      0|        bufpush(0x1E942);
 4708|      0|        break;
 4709|      0|      case 0x1E921:
 4710|      0|        bufpush(0x1E943);
 4711|      0|        break;
 4712|      0|      default:
 4713|      0|        bufpush(c);
 4714|      0|    }

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/chunk.h:
    1|       |#ifndef CMARK_CHUNK_H
    2|       |#define CMARK_CHUNK_H
    3|       |
    4|       |#include <string.h>
    5|       |#include <stdlib.h>
    6|       |#include <assert.h>
    7|       |#include "cmark.h"
    8|       |#include "buffer.h"
    9|       |#include "cmark_ctype.h"
   10|       |
   11|       |#define CMARK_CHUNK_EMPTY                                                      \
   12|       |  { NULL, 0 }
   13|       |
   14|       |typedef struct {
   15|       |  const unsigned char *data;
   16|       |  bufsize_t len;
   17|       |} cmark_chunk;
   18|       |
   19|       |// NOLINTNEXTLINE(clang-diagnostic-unused-function)
   20|     32|static CMARK_INLINE void cmark_chunk_free(cmark_chunk *c) {
   21|     32|  c->data = NULL;
   22|     32|  c->len = 0;
   23|     32|}
  ------------------
  | Unexecuted instantiation: blocks.c:cmark_chunk_free
  ------------------
  | Unexecuted instantiation: commonmark.c:cmark_chunk_free
  ------------------
  | Unexecuted instantiation: html.c:cmark_chunk_free
  ------------------
  | inlines.c:cmark_chunk_free:
  |   20|     32|static CMARK_INLINE void cmark_chunk_free(cmark_chunk *c) {
  |   21|     32|  c->data = NULL;
  |   22|     32|  c->len = 0;
  |   23|     32|}
  ------------------
  | Unexecuted instantiation: latex.c:cmark_chunk_free
  ------------------
  | Unexecuted instantiation: references.c:cmark_chunk_free
  ------------------
  | Unexecuted instantiation: scanners.c:cmark_chunk_free
  ------------------
   24|       |
   25|     20|static CMARK_INLINE void cmark_chunk_ltrim(cmark_chunk *c) {
   26|     20|  while (c->len && cmark_isspace(c->data[0])) {
   27|      0|    c->data++;
   28|      0|    c->len--;
   29|      0|  }
   30|     20|}
  ------------------
  | Unexecuted instantiation: blocks.c:cmark_chunk_ltrim
  ------------------
  | Unexecuted instantiation: commonmark.c:cmark_chunk_ltrim
  ------------------
  | Unexecuted instantiation: html.c:cmark_chunk_ltrim
  ------------------
  | inlines.c:cmark_chunk_ltrim:
  |   25|     20|static CMARK_INLINE void cmark_chunk_ltrim(cmark_chunk *c) {
  |   26|     20|  while (c->len && cmark_isspace(c->data[0])) {
  |   27|      0|    c->data++;
  |   28|      0|    c->len--;
  |   29|      0|  }
  |   30|     20|}
  ------------------
  | Unexecuted instantiation: latex.c:cmark_chunk_ltrim
  ------------------
  | Unexecuted instantiation: references.c:cmark_chunk_ltrim
  ------------------
  | Unexecuted instantiation: scanners.c:cmark_chunk_ltrim
  ------------------
   31|       |
   32|     68|static CMARK_INLINE void cmark_chunk_rtrim(cmark_chunk *c) {
   33|    108|  while (c->len > 0) {
   34|    108|    if (!cmark_isspace(c->data[c->len - 1]))
   35|     68|      break;
   36|       |
   37|     40|    c->len--;
   38|     40|  }
   39|     68|}
  ------------------
  | blocks.c:cmark_chunk_rtrim:
  |   32|      8|static CMARK_INLINE void cmark_chunk_rtrim(cmark_chunk *c) {
  |   33|     16|  while (c->len > 0) {
  |   34|     16|    if (!cmark_isspace(c->data[c->len - 1]))
  |   35|      8|      break;
  |   36|       |
  |   37|      8|    c->len--;
  |   38|      8|  }
  |   39|      8|}
  ------------------
  | Unexecuted instantiation: commonmark.c:cmark_chunk_rtrim
  ------------------
  | Unexecuted instantiation: html.c:cmark_chunk_rtrim
  ------------------
  | inlines.c:cmark_chunk_rtrim:
  |   32|     60|static CMARK_INLINE void cmark_chunk_rtrim(cmark_chunk *c) {
  |   33|     92|  while (c->len > 0) {
  |   34|     92|    if (!cmark_isspace(c->data[c->len - 1]))
  |   35|     60|      break;
  |   36|       |
  |   37|     32|    c->len--;
  |   38|     32|  }
  |   39|     60|}
  ------------------
  | Unexecuted instantiation: latex.c:cmark_chunk_rtrim
  ------------------
  | Unexecuted instantiation: references.c:cmark_chunk_rtrim
  ------------------
  | Unexecuted instantiation: scanners.c:cmark_chunk_rtrim
  ------------------
   40|       |
   41|       |// NOLINTNEXTLINE(clang-diagnostic-unused-function)
   42|     20|static CMARK_INLINE void cmark_chunk_trim(cmark_chunk *c) {
   43|     20|  cmark_chunk_ltrim(c);
   44|     20|  cmark_chunk_rtrim(c);
   45|     20|}
  ------------------
  | Unexecuted instantiation: blocks.c:cmark_chunk_trim
  ------------------
  | Unexecuted instantiation: commonmark.c:cmark_chunk_trim
  ------------------
  | Unexecuted instantiation: html.c:cmark_chunk_trim
  ------------------
  | inlines.c:cmark_chunk_trim:
  |   42|     20|static CMARK_INLINE void cmark_chunk_trim(cmark_chunk *c) {
  |   43|     20|  cmark_chunk_ltrim(c);
  |   44|     20|  cmark_chunk_rtrim(c);
  |   45|     20|}
  ------------------
  | Unexecuted instantiation: latex.c:cmark_chunk_trim
  ------------------
  | Unexecuted instantiation: references.c:cmark_chunk_trim
  ------------------
  | Unexecuted instantiation: scanners.c:cmark_chunk_trim
  ------------------
   46|       |
   47|       |// NOLINTNEXTLINE(clang-diagnostic-unused-function)
   48|       |static CMARK_INLINE bufsize_t cmark_chunk_strchr(cmark_chunk *ch, int c,
   49|      8|                                                 bufsize_t offset) {
   50|      8|  const unsigned char *p =
   51|      8|      (unsigned char *)memchr(ch->data + offset, c, ch->len - offset);
   52|      8|  return p ? (bufsize_t)(p - ch->data) : ch->len;
   53|      8|}
  ------------------
  | blocks.c:cmark_chunk_strchr:
  |   49|      8|                                                 bufsize_t offset) {
  |   50|      8|  const unsigned char *p =
  |   51|      8|      (unsigned char *)memchr(ch->data + offset, c, ch->len - offset);
  |   52|      8|  return p ? (bufsize_t)(p - ch->data) : ch->len;
  |   53|      8|}
  ------------------
  | Unexecuted instantiation: commonmark.c:cmark_chunk_strchr
  ------------------
  | Unexecuted instantiation: html.c:cmark_chunk_strchr
  ------------------
  | Unexecuted instantiation: inlines.c:cmark_chunk_strchr
  ------------------
  | Unexecuted instantiation: latex.c:cmark_chunk_strchr
  ------------------
  | Unexecuted instantiation: references.c:cmark_chunk_strchr
  ------------------
  | Unexecuted instantiation: scanners.c:cmark_chunk_strchr
  ------------------
   54|       |
   55|       |// NOLINTNEXTLINE(clang-diagnostic-unused-function)
   56|     16|static CMARK_INLINE cmark_chunk cmark_chunk_literal(const char *data) {
   57|     16|  bufsize_t len = data ? (bufsize_t)strlen(data) : 0;
   58|     16|  cmark_chunk c = {(unsigned char *)data, len};
   59|     16|  return c;
   60|     16|}
  ------------------
  | Unexecuted instantiation: blocks.c:cmark_chunk_literal
  ------------------
  | Unexecuted instantiation: commonmark.c:cmark_chunk_literal
  ------------------
  | Unexecuted instantiation: html.c:cmark_chunk_literal
  ------------------
  | inlines.c:cmark_chunk_literal:
  |   56|     16|static CMARK_INLINE cmark_chunk cmark_chunk_literal(const char *data) {
  |   57|     16|  bufsize_t len = data ? (bufsize_t)strlen(data) : 0;
  |   58|     16|  cmark_chunk c = {(unsigned char *)data, len};
  |   59|     16|  return c;
  |   60|     16|}
  ------------------
  | Unexecuted instantiation: latex.c:cmark_chunk_literal
  ------------------
  | Unexecuted instantiation: references.c:cmark_chunk_literal
  ------------------
  | Unexecuted instantiation: scanners.c:cmark_chunk_literal
  ------------------
   61|       |
   62|       |// NOLINTNEXTLINE(clang-diagnostic-unused-function)
   63|       |static CMARK_INLINE cmark_chunk cmark_chunk_dup(const cmark_chunk *ch,
   64|     84|                                                bufsize_t pos, bufsize_t len) {
   65|     84|  cmark_chunk c = {ch->data + pos, len};
   66|     84|  return c;
   67|     84|}
  ------------------
  | Unexecuted instantiation: blocks.c:cmark_chunk_dup
  ------------------
  | Unexecuted instantiation: commonmark.c:cmark_chunk_dup
  ------------------
  | Unexecuted instantiation: html.c:cmark_chunk_dup
  ------------------
  | inlines.c:cmark_chunk_dup:
  |   64|     84|                                                bufsize_t pos, bufsize_t len) {
  |   65|     84|  cmark_chunk c = {ch->data + pos, len};
  |   66|     84|  return c;
  |   67|     84|}
  ------------------
  | Unexecuted instantiation: latex.c:cmark_chunk_dup
  ------------------
  | Unexecuted instantiation: references.c:cmark_chunk_dup
  ------------------
  | Unexecuted instantiation: scanners.c:cmark_chunk_dup
  ------------------
   68|       |
   69|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/cmark.c:
    1|       |#include <stdlib.h>
    2|       |#include <assert.h>
    3|       |#include <stdio.h>
    4|       |#include "node.h"
    5|       |#include "houdini.h"
    6|       |#include "cmark.h"
    7|       |#include "buffer.h"
    8|       |
    9|      0|int cmark_version() { return CMARK_VERSION; }
   10|       |
   11|      0|const char *cmark_version_string() { return CMARK_VERSION_STRING; }
   12|       |
   13|    230|static void *xcalloc(size_t nmem, size_t size) {
   14|    230|  void *ptr = calloc(nmem, size);
   15|    230|  if (!ptr) {
   16|      0|    fprintf(stderr, "[cmark] calloc returned null pointer, aborting\n");
   17|      0|    abort();
   18|      0|  }
   19|    230|  return ptr;
   20|    230|}
   21|       |
   22|    138|static void *xrealloc(void *ptr, size_t size) {
   23|    138|  void *new_ptr = realloc(ptr, size);
   24|    138|  if (!new_ptr) {
   25|      0|    fprintf(stderr, "[cmark] realloc returned null pointer, aborting\n");
   26|      0|    abort();
   27|      0|  }
   28|    138|  return new_ptr;
   29|    138|}
   30|       |
   31|       |cmark_mem DEFAULT_MEM_ALLOCATOR = {xcalloc, xrealloc, free};
   32|       |
   33|      0|cmark_mem *cmark_get_default_mem_allocator() {
   34|      0|  return &DEFAULT_MEM_ALLOCATOR;
   35|      0|}
   36|       |
   37|       |
   38|      0|char *cmark_markdown_to_html(const char *text, size_t len, int options) {
   39|      0|  cmark_node *doc;
   40|      0|  char *result;
   41|       |
   42|      0|  doc = cmark_parse_document(text, len, options);
   43|       |
   44|      0|  result = cmark_render_html(doc, options);
   45|      0|  cmark_node_free(doc);
   46|       |
   47|      0|  return result;
   48|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/cmark.h:
    1|       |#ifndef CMARK_H
    2|       |#define CMARK_H
    3|       |
    4|       |#include <stdio.h>
    5|       |#include <cmark_export.h>
    6|       |#include <cmark_version.h>
    7|       |
    8|       |#ifdef __cplusplus
    9|       |extern "C" {
   10|       |#endif
   11|       |
   12|       |/** # NAME
   13|       | *
   14|       | * **cmark** - CommonMark parsing, manipulating, and rendering
   15|       | */
   16|       |
   17|       |/** # DESCRIPTION
   18|       | *
   19|       | * ## Simple Interface
   20|       | */
   21|       |
   22|       |/** Convert 'text' (assumed to be a UTF-8 encoded string with length
   23|       | * 'len') from CommonMark Markdown to HTML, returning a null-terminated,
   24|       | * UTF-8-encoded string. It is the caller's responsibility
   25|       | * to free the returned buffer.
   26|       | */
   27|       |CMARK_EXPORT
   28|       |char *cmark_markdown_to_html(const char *text, size_t len, int options);
   29|       |
   30|       |/** ## Node Structure
   31|       | */
   32|       |
   33|       |typedef enum {
   34|       |  /* Error status */
   35|       |  CMARK_NODE_NONE,
   36|       |
   37|       |  /* Block */
   38|       |  CMARK_NODE_DOCUMENT,
   39|       |  CMARK_NODE_BLOCK_QUOTE,
   40|       |  CMARK_NODE_LIST,
   41|       |  CMARK_NODE_ITEM,
   42|       |  CMARK_NODE_CODE_BLOCK,
   43|       |  CMARK_NODE_HTML_BLOCK,
   44|       |  CMARK_NODE_CUSTOM_BLOCK,
   45|       |  CMARK_NODE_PARAGRAPH,
   46|       |  CMARK_NODE_HEADING,
   47|       |  CMARK_NODE_THEMATIC_BREAK,
   48|       |
   49|       |  CMARK_NODE_FIRST_BLOCK = CMARK_NODE_DOCUMENT,
   50|       |  CMARK_NODE_LAST_BLOCK = CMARK_NODE_THEMATIC_BREAK,
   51|       |
   52|       |  /* Inline */
   53|       |  CMARK_NODE_TEXT,
   54|       |  CMARK_NODE_SOFTBREAK,
   55|       |  CMARK_NODE_LINEBREAK,
   56|       |  CMARK_NODE_CODE,
   57|       |  CMARK_NODE_HTML_INLINE,
   58|       |  CMARK_NODE_CUSTOM_INLINE,
   59|       |  CMARK_NODE_EMPH,
   60|       |  CMARK_NODE_STRONG,
   61|       |  CMARK_NODE_LINK,
   62|       |  CMARK_NODE_IMAGE,
   63|       |
   64|       |  CMARK_NODE_FIRST_INLINE = CMARK_NODE_TEXT,
   65|       |  CMARK_NODE_LAST_INLINE = CMARK_NODE_IMAGE
   66|       |} cmark_node_type;
   67|       |
   68|       |/* For backwards compatibility: */
   69|       |#define CMARK_NODE_HEADER CMARK_NODE_HEADING
   70|       |#define CMARK_NODE_HRULE CMARK_NODE_THEMATIC_BREAK
   71|       |#define CMARK_NODE_HTML CMARK_NODE_HTML_BLOCK
   72|       |#define CMARK_NODE_INLINE_HTML CMARK_NODE_HTML_INLINE
   73|       |
   74|       |typedef enum {
   75|       |  CMARK_NO_LIST,
   76|       |  CMARK_BULLET_LIST,
   77|       |  CMARK_ORDERED_LIST
   78|       |} cmark_list_type;
   79|       |
   80|       |typedef enum {
   81|       |  CMARK_NO_DELIM,
   82|       |  CMARK_PERIOD_DELIM,
   83|       |  CMARK_PAREN_DELIM
   84|       |} cmark_delim_type;
   85|       |
   86|       |typedef struct cmark_node cmark_node;
   87|       |typedef struct cmark_parser cmark_parser;
   88|       |typedef struct cmark_iter cmark_iter;
   89|       |
   90|       |/**
   91|       | * ## Custom memory allocator support
   92|       | */
   93|       |
   94|       |/** Defines the memory allocation functions to be used by CMark
   95|       | * when parsing and allocating a document tree
   96|       | */
   97|       |typedef struct cmark_mem {
   98|       |  void *(*calloc)(size_t, size_t);
   99|       |  void *(*realloc)(void *, size_t);
  100|       |  void (*free)(void *);
  101|       |} cmark_mem;
  102|       |
  103|       |/** Returns a pointer to the default memory allocator.
  104|       | */
  105|       |CMARK_EXPORT cmark_mem *cmark_get_default_mem_allocator();
  106|       |
  107|       |/**
  108|       | * ## Creating and Destroying Nodes
  109|       | */
  110|       |
  111|       |/** Creates a new node of type 'type'.  Note that the node may have
  112|       | * other required properties, which it is the caller's responsibility
  113|       | * to assign.
  114|       | */
  115|       |CMARK_EXPORT cmark_node *cmark_node_new(cmark_node_type type);
  116|       |
  117|       |/** Same as `cmark_node_new`, but explicitly listing the memory
  118|       | * allocator used to allocate the node.  Note:  be sure to use the same
  119|       | * allocator for every node in a tree, or bad things can happen.
  120|       | */
  121|       |CMARK_EXPORT cmark_node *cmark_node_new_with_mem(cmark_node_type type,
  122|       |                                                 cmark_mem *mem);
  123|       |
  124|       |/** Frees the memory allocated for a node and any children.
  125|       | */
  126|       |CMARK_EXPORT void cmark_node_free(cmark_node *node);
  127|       |
  128|       |/**
  129|       | * ## Tree Traversal
  130|       | */
  131|       |
  132|       |/** Returns the next node in the sequence after 'node', or NULL if
  133|       | * there is none.
  134|       | */
  135|       |CMARK_EXPORT cmark_node *cmark_node_next(cmark_node *node);
  136|       |
  137|       |/** Returns the previous node in the sequence after 'node', or NULL if
  138|       | * there is none.
  139|       | */
  140|       |CMARK_EXPORT cmark_node *cmark_node_previous(cmark_node *node);
  141|       |
  142|       |/** Returns the parent of 'node', or NULL if there is none.
  143|       | */
  144|       |CMARK_EXPORT cmark_node *cmark_node_parent(cmark_node *node);
  145|       |
  146|       |/** Returns the first child of 'node', or NULL if 'node' has no children.
  147|       | */
  148|       |CMARK_EXPORT cmark_node *cmark_node_first_child(cmark_node *node);
  149|       |
  150|       |/** Returns the last child of 'node', or NULL if 'node' has no children.
  151|       | */
  152|       |CMARK_EXPORT cmark_node *cmark_node_last_child(cmark_node *node);
  153|       |
  154|       |/**
  155|       | * ## Iterator
  156|       | *
  157|       | * An iterator will walk through a tree of nodes, starting from a root
  158|       | * node, returning one node at a time, together with information about
  159|       | * whether the node is being entered or exited.  The iterator will
  160|       | * first descend to a child node, if there is one.  When there is no
  161|       | * child, the iterator will go to the next sibling.  When there is no
  162|       | * next sibling, the iterator will return to the parent (but with
  163|       | * a 'cmark_event_type' of `CMARK_EVENT_EXIT`).  The iterator will
  164|       | * return `CMARK_EVENT_DONE` when it reaches the root node again.
  165|       | * One natural application is an HTML renderer, where an `ENTER` event
  166|       | * outputs an open tag and an `EXIT` event outputs a close tag.
  167|       | * An iterator might also be used to transform an AST in some systematic
  168|       | * way, for example, turning all level-3 headings into regular paragraphs.
  169|       | *
  170|       | *     void
  171|       | *     usage_example(cmark_node *root) {
  172|       | *         cmark_event_type ev_type;
  173|       | *         cmark_iter *iter = cmark_iter_new(root);
  174|       | *
  175|       | *         while ((ev_type = cmark_iter_next(iter)) != CMARK_EVENT_DONE) {
  176|       | *             cmark_node *cur = cmark_iter_get_node(iter);
  177|       | *             // Do something with `cur` and `ev_type`
  178|       | *         }
  179|       | *
  180|       | *         cmark_iter_free(iter);
  181|       | *     }
  182|       | *
  183|       | * Iterators will never return `EXIT` events for leaf nodes, which are nodes
  184|       | * of type:
  185|       | *
  186|       | * * CMARK_NODE_HTML_BLOCK
  187|       | * * CMARK_NODE_THEMATIC_BREAK
  188|       | * * CMARK_NODE_CODE_BLOCK
  189|       | * * CMARK_NODE_TEXT
  190|       | * * CMARK_NODE_SOFTBREAK
  191|       | * * CMARK_NODE_LINEBREAK
  192|       | * * CMARK_NODE_CODE
  193|       | * * CMARK_NODE_HTML_INLINE
  194|       | *
  195|       | * Nodes must only be modified after an `EXIT` event, or an `ENTER` event for
  196|       | * leaf nodes.
  197|       | */
  198|       |
  199|       |typedef enum {
  200|       |  CMARK_EVENT_NONE,
  201|       |  CMARK_EVENT_DONE,
  202|       |  CMARK_EVENT_ENTER,
  203|       |  CMARK_EVENT_EXIT
  204|       |} cmark_event_type;
  205|       |
  206|       |/** Creates a new iterator starting at 'root'.  The current node and event
  207|       | * type are undefined until 'cmark_iter_next' is called for the first time.
  208|       | * The memory allocated for the iterator should be released using
  209|       | * 'cmark_iter_free' when it is no longer needed.
  210|       | */
  211|       |CMARK_EXPORT
  212|       |cmark_iter *cmark_iter_new(cmark_node *root);
  213|       |
  214|       |/** Frees the memory allocated for an iterator.
  215|       | */
  216|       |CMARK_EXPORT
  217|       |void cmark_iter_free(cmark_iter *iter);
  218|       |
  219|       |/** Advances to the next node and returns the event type (`CMARK_EVENT_ENTER`,
  220|       | * `CMARK_EVENT_EXIT` or `CMARK_EVENT_DONE`).
  221|       | */
  222|       |CMARK_EXPORT
  223|       |cmark_event_type cmark_iter_next(cmark_iter *iter);
  224|       |
  225|       |/** Returns the current node.
  226|       | */
  227|       |CMARK_EXPORT
  228|       |cmark_node *cmark_iter_get_node(cmark_iter *iter);
  229|       |
  230|       |/** Returns the current event type.
  231|       | */
  232|       |CMARK_EXPORT
  233|       |cmark_event_type cmark_iter_get_event_type(cmark_iter *iter);
  234|       |
  235|       |/** Returns the root node.
  236|       | */
  237|       |CMARK_EXPORT
  238|       |cmark_node *cmark_iter_get_root(cmark_iter *iter);
  239|       |
  240|       |/** Resets the iterator so that the current node is 'current' and
  241|       | * the event type is 'event_type'.  The new current node must be a
  242|       | * descendant of the root node or the root node itself.
  243|       | */
  244|       |CMARK_EXPORT
  245|       |void cmark_iter_reset(cmark_iter *iter, cmark_node *current,
  246|       |                      cmark_event_type event_type);
  247|       |
  248|       |/**
  249|       | * ## Accessors
  250|       | */
  251|       |
  252|       |/** Returns the user data of 'node'.
  253|       | */
  254|       |CMARK_EXPORT void *cmark_node_get_user_data(cmark_node *node);
  255|       |
  256|       |/** Sets arbitrary user data for 'node'.  Returns 1 on success,
  257|       | * 0 on failure.
  258|       | */
  259|       |CMARK_EXPORT int cmark_node_set_user_data(cmark_node *node, void *user_data);
  260|       |
  261|       |/** Returns the type of 'node', or `CMARK_NODE_NONE` on error.
  262|       | */
  263|       |CMARK_EXPORT cmark_node_type cmark_node_get_type(cmark_node *node);
  264|       |
  265|       |/** Like 'cmark_node_get_type', but returns a string representation
  266|       |    of the type, or `"<unknown>"`.
  267|       | */
  268|       |CMARK_EXPORT
  269|       |const char *cmark_node_get_type_string(cmark_node *node);
  270|       |
  271|       |/** Returns the string contents of 'node', or an empty
  272|       |    string if none is set.  Returns NULL if called on a
  273|       |    node that does not have string content.
  274|       | */
  275|       |CMARK_EXPORT const char *cmark_node_get_literal(cmark_node *node);
  276|       |
  277|       |/** Sets the string contents of 'node'.  Returns 1 on success,
  278|       | * 0 on failure.
  279|       | */
  280|       |CMARK_EXPORT int cmark_node_set_literal(cmark_node *node, const char *content);
  281|       |
  282|       |/** Returns the heading level of 'node', or 0 if 'node' is not a heading.
  283|       | */
  284|       |CMARK_EXPORT int cmark_node_get_heading_level(cmark_node *node);
  285|       |
  286|       |/* For backwards compatibility */
  287|       |#define cmark_node_get_header_level cmark_node_get_heading_level
  288|       |#define cmark_node_set_header_level cmark_node_set_heading_level
  289|       |
  290|       |/** Sets the heading level of 'node', returning 1 on success and 0 on error.
  291|       | */
  292|       |CMARK_EXPORT int cmark_node_set_heading_level(cmark_node *node, int level);
  293|       |
  294|       |/** Returns the list type of 'node', or `CMARK_NO_LIST` if 'node'
  295|       | * is not a list.
  296|       | */
  297|       |CMARK_EXPORT cmark_list_type cmark_node_get_list_type(cmark_node *node);
  298|       |
  299|       |/** Sets the list type of 'node', returning 1 on success and 0 on error.
  300|       | */
  301|       |CMARK_EXPORT int cmark_node_set_list_type(cmark_node *node,
  302|       |                                          cmark_list_type type);
  303|       |
  304|       |/** Returns the list delimiter type of 'node', or `CMARK_NO_DELIM` if 'node'
  305|       | * is not a list.
  306|       | */
  307|       |CMARK_EXPORT cmark_delim_type cmark_node_get_list_delim(cmark_node *node);
  308|       |
  309|       |/** Sets the list delimiter type of 'node', returning 1 on success and 0
  310|       | * on error.
  311|       | */
  312|       |CMARK_EXPORT int cmark_node_set_list_delim(cmark_node *node,
  313|       |                                           cmark_delim_type delim);
  314|       |
  315|       |/** Returns starting number of 'node', if it is an ordered list, otherwise 0.
  316|       | */
  317|       |CMARK_EXPORT int cmark_node_get_list_start(cmark_node *node);
  318|       |
  319|       |/** Sets starting number of 'node', if it is an ordered list. Returns 1
  320|       | * on success, 0 on failure.
  321|       | */
  322|       |CMARK_EXPORT int cmark_node_set_list_start(cmark_node *node, int start);
  323|       |
  324|       |/** Returns 1 if 'node' is a tight list, 0 otherwise.
  325|       | */
  326|       |CMARK_EXPORT int cmark_node_get_list_tight(cmark_node *node);
  327|       |
  328|       |/** Sets the "tightness" of a list.  Returns 1 on success, 0 on failure.
  329|       | */
  330|       |CMARK_EXPORT int cmark_node_set_list_tight(cmark_node *node, int tight);
  331|       |
  332|       |/** Returns the info string from a fenced code block.
  333|       | */
  334|       |CMARK_EXPORT const char *cmark_node_get_fence_info(cmark_node *node);
  335|       |
  336|       |/** Sets the info string in a fenced code block, returning 1 on
  337|       | * success and 0 on failure.
  338|       | */
  339|       |CMARK_EXPORT int cmark_node_set_fence_info(cmark_node *node, const char *info);
  340|       |
  341|       |/** Returns the URL of a link or image 'node', or an empty string
  342|       |    if no URL is set.  Returns NULL if called on a node that is
  343|       |    not a link or image.
  344|       | */
  345|       |CMARK_EXPORT const char *cmark_node_get_url(cmark_node *node);
  346|       |
  347|       |/** Sets the URL of a link or image 'node'. Returns 1 on success,
  348|       | * 0 on failure.
  349|       | */
  350|       |CMARK_EXPORT int cmark_node_set_url(cmark_node *node, const char *url);
  351|       |
  352|       |/** Returns the title of a link or image 'node', or an empty
  353|       |    string if no title is set.  Returns NULL if called on a node
  354|       |    that is not a link or image.
  355|       | */
  356|       |CMARK_EXPORT const char *cmark_node_get_title(cmark_node *node);
  357|       |
  358|       |/** Sets the title of a link or image 'node'. Returns 1 on success,
  359|       | * 0 on failure.
  360|       | */
  361|       |CMARK_EXPORT int cmark_node_set_title(cmark_node *node, const char *title);
  362|       |
  363|       |/** Returns the literal "on enter" text for a custom 'node', or
  364|       |    an empty string if no on_enter is set.  Returns NULL if called
  365|       |    on a non-custom node.
  366|       | */
  367|       |CMARK_EXPORT const char *cmark_node_get_on_enter(cmark_node *node);
  368|       |
  369|       |/** Sets the literal text to render "on enter" for a custom 'node'.
  370|       |    Any children of the node will be rendered after this text.
  371|       |    Returns 1 on success 0 on failure.
  372|       | */
  373|       |CMARK_EXPORT int cmark_node_set_on_enter(cmark_node *node,
  374|       |                                         const char *on_enter);
  375|       |
  376|       |/** Returns the literal "on exit" text for a custom 'node', or
  377|       |    an empty string if no on_exit is set.  Returns NULL if
  378|       |    called on a non-custom node.
  379|       | */
  380|       |CMARK_EXPORT const char *cmark_node_get_on_exit(cmark_node *node);
  381|       |
  382|       |/** Sets the literal text to render "on exit" for a custom 'node'.
  383|       |    Any children of the node will be rendered before this text.
  384|       |    Returns 1 on success 0 on failure.
  385|       | */
  386|       |CMARK_EXPORT int cmark_node_set_on_exit(cmark_node *node, const char *on_exit);
  387|       |
  388|       |/** Returns the line on which 'node' begins.
  389|       | */
  390|       |CMARK_EXPORT int cmark_node_get_start_line(cmark_node *node);
  391|       |
  392|       |/** Returns the column at which 'node' begins.
  393|       | */
  394|       |CMARK_EXPORT int cmark_node_get_start_column(cmark_node *node);
  395|       |
  396|       |/** Returns the line on which 'node' ends.
  397|       | */
  398|       |CMARK_EXPORT int cmark_node_get_end_line(cmark_node *node);
  399|       |
  400|       |/** Returns the column at which 'node' ends.
  401|       | */
  402|       |CMARK_EXPORT int cmark_node_get_end_column(cmark_node *node);
  403|       |
  404|       |/**
  405|       | * ## Tree Manipulation
  406|       | */
  407|       |
  408|       |/** Unlinks a 'node', removing it from the tree, but not freeing its
  409|       | * memory.  (Use 'cmark_node_free' for that.)
  410|       | */
  411|       |CMARK_EXPORT void cmark_node_unlink(cmark_node *node);
  412|       |
  413|       |/** Inserts 'sibling' before 'node'.  Returns 1 on success, 0 on failure.
  414|       | */
  415|       |CMARK_EXPORT int cmark_node_insert_before(cmark_node *node,
  416|       |                                          cmark_node *sibling);
  417|       |
  418|       |/** Inserts 'sibling' after 'node'. Returns 1 on success, 0 on failure.
  419|       | */
  420|       |CMARK_EXPORT int cmark_node_insert_after(cmark_node *node, cmark_node *sibling);
  421|       |
  422|       |/** Replaces 'oldnode' with 'newnode' and unlinks 'oldnode' (but does
  423|       | * not free its memory).
  424|       | * Returns 1 on success, 0 on failure.
  425|       | */
  426|       |CMARK_EXPORT int cmark_node_replace(cmark_node *oldnode, cmark_node *newnode);
  427|       |
  428|       |/** Adds 'child' to the beginning of the children of 'node'.
  429|       | * Returns 1 on success, 0 on failure.
  430|       | */
  431|       |CMARK_EXPORT int cmark_node_prepend_child(cmark_node *node, cmark_node *child);
  432|       |
  433|       |/** Adds 'child' to the end of the children of 'node'.
  434|       | * Returns 1 on success, 0 on failure.
  435|       | */
  436|       |CMARK_EXPORT int cmark_node_append_child(cmark_node *node, cmark_node *child);
  437|       |
  438|       |/** Consolidates adjacent text nodes.
  439|       | */
  440|       |CMARK_EXPORT void cmark_consolidate_text_nodes(cmark_node *root);
  441|       |
  442|       |/**
  443|       | * ## Parsing
  444|       | *
  445|       | * Simple interface:
  446|       | *
  447|       | *     cmark_node *document = cmark_parse_document("Hello *world*", 13,
  448|       | *                                                 CMARK_OPT_DEFAULT);
  449|       | *
  450|       | * Streaming interface:
  451|       | *
  452|       | *     cmark_parser *parser = cmark_parser_new(CMARK_OPT_DEFAULT);
  453|       | *     FILE *fp = fopen("myfile.md", "rb");
  454|       | *     while ((bytes = fread(buffer, 1, sizeof(buffer), fp)) > 0) {
  455|       | *         cmark_parser_feed(parser, buffer, bytes);
  456|       | *         if (bytes < sizeof(buffer)) {
  457|       | *             break;
  458|       | *         }
  459|       | *     }
  460|       | *     document = cmark_parser_finish(parser);
  461|       | *     cmark_parser_free(parser);
  462|       | */
  463|       |
  464|       |/** Creates a new parser object.
  465|       | */
  466|       |CMARK_EXPORT
  467|       |cmark_parser *cmark_parser_new(int options);
  468|       |
  469|       |/** Creates a new parser object with the given memory allocator
  470|       | */
  471|       |CMARK_EXPORT
  472|       |cmark_parser *cmark_parser_new_with_mem(int options, cmark_mem *mem);
  473|       |
  474|       |/** Frees memory allocated for a parser object.
  475|       | */
  476|       |CMARK_EXPORT
  477|       |void cmark_parser_free(cmark_parser *parser);
  478|       |
  479|       |/** Feeds a string of length 'len' to 'parser'.
  480|       | */
  481|       |CMARK_EXPORT
  482|       |void cmark_parser_feed(cmark_parser *parser, const char *buffer, size_t len);
  483|       |
  484|       |/** Finish parsing and return a pointer to a tree of nodes.
  485|       | */
  486|       |CMARK_EXPORT
  487|       |cmark_node *cmark_parser_finish(cmark_parser *parser);
  488|       |
  489|       |/** Parse a CommonMark document in 'buffer' of length 'len'.
  490|       | * Returns a pointer to a tree of nodes.  The memory allocated for
  491|       | * the node tree should be released using 'cmark_node_free'
  492|       | * when it is no longer needed.
  493|       | */
  494|       |CMARK_EXPORT
  495|       |cmark_node *cmark_parse_document(const char *buffer, size_t len, int options);
  496|       |
  497|       |/** Parse a CommonMark document in file 'f', returning a pointer to
  498|       | * a tree of nodes.  The memory allocated for the node tree should be
  499|       | * released using 'cmark_node_free' when it is no longer needed.
  500|       | */
  501|       |CMARK_EXPORT
  502|       |cmark_node *cmark_parse_file(FILE *f, int options);
  503|       |
  504|       |/**
  505|       | * ## Rendering
  506|       | */
  507|       |
  508|       |/** Render a 'node' tree as XML.  It is the caller's responsibility
  509|       | * to free the returned buffer.
  510|       | */
  511|       |CMARK_EXPORT
  512|       |char *cmark_render_xml(cmark_node *root, int options);
  513|       |
  514|       |/** Render a 'node' tree as an HTML fragment.  It is up to the user
  515|       | * to add an appropriate header and footer. It is the caller's
  516|       | * responsibility to free the returned buffer.
  517|       | */
  518|       |CMARK_EXPORT
  519|       |char *cmark_render_html(cmark_node *root, int options);
  520|       |
  521|       |/** Render a 'node' tree as a groff man page, without the header.
  522|       | * It is the caller's responsibility to free the returned buffer.
  523|       | */
  524|       |CMARK_EXPORT
  525|       |char *cmark_render_man(cmark_node *root, int options, int width);
  526|       |
  527|       |/** Render a 'node' tree as a commonmark document.
  528|       | * It is the caller's responsibility to free the returned buffer.
  529|       | */
  530|       |CMARK_EXPORT
  531|       |char *cmark_render_commonmark(cmark_node *root, int options, int width);
  532|       |
  533|       |/** Render a 'node' tree as a LaTeX document.
  534|       | * It is the caller's responsibility to free the returned buffer.
  535|       | */
  536|       |CMARK_EXPORT
  537|       |char *cmark_render_latex(cmark_node *root, int options, int width);
  538|       |
  539|       |/**
  540|       | * ## Options
  541|       | */
  542|       |
  543|       |/** Default options.
  544|       | */
  545|       |#define CMARK_OPT_DEFAULT 0
  546|       |
  547|       |/**
  548|       | * ### Options affecting rendering
  549|       | */
  550|       |
  551|       |/** Include a `data-sourcepos` attribute on all block elements.
  552|       | */
  553|      0|#define CMARK_OPT_SOURCEPOS (1 << 1)
  554|       |
  555|       |/** Render `softbreak` elements as hard line breaks.
  556|       | */
  557|      0|#define CMARK_OPT_HARDBREAKS (1 << 2)
  558|       |
  559|       |/** `CMARK_OPT_SAFE` is defined here for API compatibility,
  560|       |    but it no longer has any effect. "Safe" mode is now the default:
  561|       |    set `CMARK_OPT_UNSAFE` to disable it.
  562|       | */
  563|       |#define CMARK_OPT_SAFE (1 << 3)
  564|       |
  565|       |/** Render raw HTML and unsafe links (`javascript:`, `vbscript:`,
  566|       | * `file:`, and `data:`, except for `image/png`, `image/gif`,
  567|       | * `image/jpeg`, or `image/webp` mime types).  By default,
  568|       | * raw HTML is replaced by a placeholder HTML comment. Unsafe
  569|       | * links are replaced by empty strings.
  570|       | */
  571|      0|#define CMARK_OPT_UNSAFE (1 << 17)
  572|       |
  573|       |/** Render `softbreak` elements as spaces.
  574|       | */
  575|      0|#define CMARK_OPT_NOBREAKS (1 << 4)
  576|       |
  577|       |/**
  578|       | * ### Options affecting parsing
  579|       | */
  580|       |
  581|       |/** Legacy option (no effect).
  582|       | */
  583|       |#define CMARK_OPT_NORMALIZE (1 << 8)
  584|       |
  585|       |/** Validate UTF-8 in the input before parsing, replacing illegal
  586|       | * sequences with the replacement character U+FFFD.
  587|       | */
  588|     56|#define CMARK_OPT_VALIDATE_UTF8 (1 << 9)
  589|       |
  590|       |/** Convert straight quotes to curly, --- to em dashes, -- to en dashes.
  591|       | */
  592|  3.89k|#define CMARK_OPT_SMART (1 << 10)
  593|       |
  594|       |/**
  595|       | * ## Version information
  596|       | */
  597|       |
  598|       |/** The library version as integer for runtime checks. Also available as
  599|       | * macro CMARK_VERSION for compile time checks.
  600|       | *
  601|       | * * Bits 16-23 contain the major version.
  602|       | * * Bits 8-15 contain the minor version.
  603|       | * * Bits 0-7 contain the patchlevel.
  604|       | *
  605|       | * In hexadecimal format, the number 0x010203 represents version 1.2.3.
  606|       | */
  607|       |CMARK_EXPORT
  608|       |int cmark_version(void);
  609|       |
  610|       |/** The library version string for runtime checks. Also available as
  611|       | * macro CMARK_VERSION_STRING for compile time checks.
  612|       | */
  613|       |CMARK_EXPORT
  614|       |const char *cmark_version_string(void);
  615|       |
  616|       |/** # AUTHORS
  617|       | *
  618|       | * John MacFarlane, Vicent Marti,  Kārlis Gaņģis, Nick Wellnhofer.
  619|       | */
  620|       |
  621|       |#ifndef CMARK_NO_SHORT_NAMES
  622|       |#define NODE_DOCUMENT CMARK_NODE_DOCUMENT
  623|       |#define NODE_BLOCK_QUOTE CMARK_NODE_BLOCK_QUOTE
  624|       |#define NODE_LIST CMARK_NODE_LIST
  625|       |#define NODE_ITEM CMARK_NODE_ITEM
  626|       |#define NODE_CODE_BLOCK CMARK_NODE_CODE_BLOCK
  627|       |#define NODE_HTML_BLOCK CMARK_NODE_HTML_BLOCK
  628|       |#define NODE_CUSTOM_BLOCK CMARK_NODE_CUSTOM_BLOCK
  629|       |#define NODE_PARAGRAPH CMARK_NODE_PARAGRAPH
  630|       |#define NODE_HEADING CMARK_NODE_HEADING
  631|       |#define NODE_HEADER CMARK_NODE_HEADER
  632|       |#define NODE_THEMATIC_BREAK CMARK_NODE_THEMATIC_BREAK
  633|       |#define NODE_HRULE CMARK_NODE_HRULE
  634|       |#define NODE_TEXT CMARK_NODE_TEXT
  635|       |#define NODE_SOFTBREAK CMARK_NODE_SOFTBREAK
  636|       |#define NODE_LINEBREAK CMARK_NODE_LINEBREAK
  637|       |#define NODE_CODE CMARK_NODE_CODE
  638|       |#define NODE_HTML_INLINE CMARK_NODE_HTML_INLINE
  639|       |#define NODE_CUSTOM_INLINE CMARK_NODE_CUSTOM_INLINE
  640|       |#define NODE_EMPH CMARK_NODE_EMPH
  641|       |#define NODE_STRONG CMARK_NODE_STRONG
  642|       |#define NODE_LINK CMARK_NODE_LINK
  643|       |#define NODE_IMAGE CMARK_NODE_IMAGE
  644|       |#define BULLET_LIST CMARK_BULLET_LIST
  645|       |#define ORDERED_LIST CMARK_ORDERED_LIST
  646|       |#define PERIOD_DELIM CMARK_PERIOD_DELIM
  647|       |#define PAREN_DELIM CMARK_PAREN_DELIM
  648|       |#endif
  649|       |
  650|       |#ifdef __cplusplus
  651|       |}
  652|       |#endif
  653|       |
  654|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/cmark_ctype.c:
    1|       |#include <stdint.h>
    2|       |
    3|       |#include "cmark_ctype.h"
    4|       |
    5|       |/** 1 = space, 2 = punct, 3 = digit, 4 = alpha, 0 = other
    6|       | */
    7|       |static const uint8_t cmark_ctype_class[256] = {
    8|       |    /*      0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
    9|       |    /* 0 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0,
   10|       |    /* 1 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   11|       |    /* 2 */ 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
   12|       |    /* 3 */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
   13|       |    /* 4 */ 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
   14|       |    /* 5 */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2,
   15|       |    /* 6 */ 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
   16|       |    /* 7 */ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 0,
   17|       |    /* 8 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   18|       |    /* 9 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   19|       |    /* a */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   20|       |    /* b */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   21|       |    /* c */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   22|       |    /* d */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   23|       |    /* e */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   24|       |    /* f */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
   25|       |
   26|       |/**
   27|       | * Returns 1 if c is a "whitespace" character as defined by the spec.
   28|       | */
   29|    972|int cmark_isspace(char c) { return cmark_ctype_class[(uint8_t)c] == 1; }
   30|       |
   31|       |/**
   32|       | * Returns 1 if c is an ascii punctuation character.
   33|       | */
   34|      0|int cmark_ispunct(char c) { return cmark_ctype_class[(uint8_t)c] == 2; }
   35|       |
   36|      0|int cmark_isalnum(char c) {
   37|      0|  uint8_t result;
   38|      0|  result = cmark_ctype_class[(uint8_t)c];
   39|      0|  return (result == 3 || result == 4);
   40|      0|}
   41|       |
   42|     68|int cmark_isdigit(char c) { return cmark_ctype_class[(uint8_t)c] == 3; }
   43|       |
   44|      0|int cmark_isalpha(char c) { return cmark_ctype_class[(uint8_t)c] == 4; }

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/commonmark.c:
    1|       |#include <stdlib.h>
    2|       |#include <stdio.h>
    3|       |#include <string.h>
    4|       |#include <stdint.h>
    5|       |#include <assert.h>
    6|       |
    7|       |#include "config.h"
    8|       |#include "cmark.h"
    9|       |#include "node.h"
   10|       |#include "buffer.h"
   11|       |#include "utf8.h"
   12|       |#include "scanners.h"
   13|       |#include "render.h"
   14|       |
   15|      0|#define OUT(s, wrap, escaping) renderer->out(renderer, s, wrap, escaping)
   16|      0|#define LIT(s) renderer->out(renderer, s, false, LITERAL)
   17|      0|#define CR() renderer->cr(renderer)
   18|      0|#define BLANKLINE() renderer->blankline(renderer)
   19|       |#define ENCODED_SIZE 20
   20|       |#define LISTMARKER_SIZE 20
   21|       |
   22|       |// Functions to convert cmark_nodes to commonmark strings.
   23|       |
   24|       |static CMARK_INLINE void outc(cmark_renderer *renderer, cmark_escaping escape,
   25|      0|                              int32_t c, unsigned char nextc) {
   26|      0|  bool needs_escaping = false;
   27|      0|  bool follows_digit =
   28|      0|      renderer->buffer->size > 0 &&
   29|      0|      cmark_isdigit(renderer->buffer->ptr[renderer->buffer->size - 1]);
   30|      0|  char encoded[ENCODED_SIZE];
   31|      0|  int options = renderer->options;
   32|       |
   33|      0|  needs_escaping =
   34|      0|      c < 0x80 && escape != LITERAL &&
   35|      0|      ((escape == NORMAL &&
   36|      0|        (c < 0x20 ||
   37|      0|         c == '*' || c == '_' || c == '[' || c == ']' || c == '#' || c == '<' ||
   38|      0|         c == '>' || c == '\\' || c == '`' || c == '!' ||
   39|      0|         (c == '&' && cmark_isalpha(nextc)) || (c == '!' && nextc == '[') ||
   40|      0|         ((CMARK_OPT_SMART & options) &&
   41|      0|            ((c == '-' && nextc == '-') ||
   42|      0|             (c == '.' && nextc == '.') ||
   43|      0|             c == '"' || c == '\'')) ||
   44|      0|         (renderer->begin_content && (c == '-' || c == '+' || c == '=') &&
   45|       |          // begin_content doesn't get set to false til we've passed digits
   46|       |          // at the beginning of line, so...
   47|      0|          !follows_digit) ||
   48|      0|         (renderer->begin_content && (c == '.' || c == ')') && follows_digit &&
   49|      0|          (nextc == 0 || cmark_isspace(nextc))))) ||
   50|      0|       (escape == URL &&
   51|      0|        (c == '`' || c == '<' || c == '>' || cmark_isspace(c) || c == '\\' ||
   52|      0|         c == ')' || c == '(')) ||
   53|      0|       (escape == TITLE &&
   54|      0|        (c == '`' || c == '<' || c == '>' || c == '"' || c == '\\')));
   55|       |
   56|      0|  if (needs_escaping) {
   57|      0|    if (escape == URL && cmark_isspace(c)) {
   58|       |      // use percent encoding for spaces
   59|      0|      snprintf(encoded, ENCODED_SIZE, "%%%2X", c);
   60|      0|      cmark_strbuf_puts(renderer->buffer, encoded);
   61|      0|      renderer->column += 3;
   62|      0|    } else if (cmark_ispunct(c)) {
   63|      0|      cmark_render_ascii(renderer, "\\");
   64|      0|      cmark_render_code_point(renderer, c);
   65|      0|    } else { // render as entity
   66|      0|      snprintf(encoded, ENCODED_SIZE, "&#%d;", c);
   67|      0|      cmark_strbuf_puts(renderer->buffer, encoded);
   68|      0|      renderer->column += strlen(encoded);
   69|      0|    }
   70|      0|  } else {
   71|      0|    cmark_render_code_point(renderer, c);
   72|      0|  }
   73|      0|}
   74|       |
   75|      0|static int longest_backtick_sequence(const char *code) {
   76|      0|  int longest = 0;
   77|      0|  int current = 0;
   78|      0|  size_t i = 0;
   79|      0|  size_t code_len = strlen(code);
   80|      0|  while (i <= code_len) {
   81|      0|    if (code[i] == '`') {
   82|      0|      current++;
   83|      0|    } else {
   84|      0|      if (current > longest) {
   85|      0|        longest = current;
   86|      0|      }
   87|      0|      current = 0;
   88|      0|    }
   89|      0|    i++;
   90|      0|  }
   91|      0|  return longest;
   92|      0|}
   93|       |
   94|      0|static int shortest_unused_backtick_sequence(const char *code) {
   95|       |  // note: if the shortest sequence is >= 32, this returns 32
   96|       |  // so as not to overflow the bit array.
   97|      0|  uint32_t used = 1;
   98|      0|  int current = 0;
   99|      0|  size_t i = 0;
  100|      0|  size_t code_len = strlen(code);
  101|      0|  while (i <= code_len) {
  102|      0|    if (code[i] == '`') {
  103|      0|      current++;
  104|      0|    } else {
  105|      0|      if (current > 0 && current < 32) {
  106|      0|        used |= (1U << current);
  107|      0|      }
  108|      0|      current = 0;
  109|      0|    }
  110|      0|    i++;
  111|      0|  }
  112|       |  // return number of first bit that is 0:
  113|      0|  i = 0;
  114|      0|  while (i < 32 && used & 1) {
  115|      0|    used = used >> 1;
  116|      0|    i++;
  117|      0|  }
  118|      0|  return (int)i;
  119|      0|}
  120|       |
  121|      0|static bool is_autolink(cmark_node *node) {
  122|      0|  const unsigned char *title;
  123|      0|  const unsigned char *url;
  124|      0|  cmark_node *link_text;
  125|       |
  126|      0|  if (node->type != CMARK_NODE_LINK) {
  127|      0|    return false;
  128|      0|  }
  129|       |
  130|      0|  url = node->as.link.url;
  131|      0|  if (url == NULL || _scan_scheme(url) == 0) {
  132|      0|    return false;
  133|      0|  }
  134|       |
  135|      0|  title = node->as.link.title;
  136|       |  // if it has a title, we can't treat it as an autolink:
  137|      0|  if (title && title[0]) {
  138|      0|    return false;
  139|      0|  }
  140|       |
  141|      0|  link_text = node->first_child;
  142|      0|  if (link_text == NULL) {
  143|      0|    return false;
  144|      0|  }
  145|      0|  cmark_consolidate_text_nodes(link_text);
  146|      0|  if (strncmp((const char *)url, "mailto:", 7) == 0) {
  147|      0|    url += 7;
  148|      0|  }
  149|      0|  return link_text->data != NULL &&
  150|      0|         strcmp((const char *)url, (char *)link_text->data) == 0;
  151|      0|}
  152|       |
  153|       |// if node is a block node, returns node.
  154|       |// otherwise returns first block-level node that is an ancestor of node.
  155|       |// if there is no block-level ancestor, returns NULL.
  156|      0|static cmark_node *get_containing_block(cmark_node *node) {
  157|      0|  while (node) {
  158|      0|    if (node->type >= CMARK_NODE_FIRST_BLOCK &&
  159|      0|        node->type <= CMARK_NODE_LAST_BLOCK) {
  160|      0|      return node;
  161|      0|    } else {
  162|      0|      node = node->parent;
  163|      0|    }
  164|      0|  }
  165|      0|  return NULL;
  166|      0|}
  167|       |
  168|       |static int S_render_node(cmark_renderer *renderer, cmark_node *node,
  169|      0|                         cmark_event_type ev_type, int options) {
  170|      0|  cmark_node *tmp;
  171|      0|  int list_number;
  172|      0|  cmark_delim_type list_delim;
  173|      0|  size_t numticks;
  174|      0|  bool extra_spaces;
  175|      0|  size_t i;
  176|      0|  bool entering = (ev_type == CMARK_EVENT_ENTER);
  177|      0|  const char *info, *code, *title;
  178|      0|  char fencechar[2] = {'\0', '\0'};
  179|      0|  size_t code_len;
  180|      0|  char listmarker[LISTMARKER_SIZE];
  181|      0|  const char *emph_delim;
  182|      0|  bool first_in_list_item;
  183|      0|  bufsize_t marker_width;
  184|      0|  bool has_nonspace;
  185|      0|  bool allow_wrap = renderer->width > 0 && !(CMARK_OPT_NOBREAKS & options) &&
  186|      0|                    !(CMARK_OPT_HARDBREAKS & options);
  187|       |
  188|       |  // Don't adjust tight list status til we've started the list.
  189|       |  // Otherwise we loose the blank line between a paragraph and
  190|       |  // a following list.
  191|      0|  if (!(node->type == CMARK_NODE_ITEM && node->prev == NULL && entering)) {
  192|      0|    tmp = get_containing_block(node);
  193|      0|    renderer->in_tight_list_item =
  194|      0|        tmp && // tmp might be NULL if there is no containing block
  195|      0|        ((tmp->type == CMARK_NODE_ITEM &&
  196|      0|          cmark_node_get_list_tight(tmp->parent)) ||
  197|      0|         (tmp && tmp->parent && tmp->parent->type == CMARK_NODE_ITEM &&
  198|      0|          cmark_node_get_list_tight(tmp->parent->parent)));
  199|      0|  }
  200|       |
  201|      0|  switch (node->type) {
  202|      0|  case CMARK_NODE_DOCUMENT:
  203|      0|    break;
  204|       |
  205|      0|  case CMARK_NODE_BLOCK_QUOTE:
  206|      0|    if (entering) {
  207|      0|      LIT("> ");
  208|      0|      renderer->begin_content = true;
  209|      0|      cmark_strbuf_puts(renderer->prefix, "> ");
  210|      0|    } else {
  211|      0|      cmark_strbuf_truncate(renderer->prefix, renderer->prefix->size - 2);
  212|      0|      BLANKLINE();
  213|      0|    }
  214|      0|    break;
  215|       |
  216|      0|  case CMARK_NODE_LIST:
  217|      0|    if (!entering && node->next && (node->next->type == CMARK_NODE_LIST)) {
  218|       |      // this ensures that a following indented code block or list will be
  219|       |      // inteprereted correctly.
  220|      0|      CR();
  221|      0|      LIT("<!-- end list -->");
  222|      0|      BLANKLINE();
  223|      0|    }
  224|      0|    break;
  225|       |
  226|      0|  case CMARK_NODE_ITEM:
  227|      0|    if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {
  228|      0|      marker_width = 4;
  229|      0|    } else {
  230|      0|      list_number = cmark_node_get_list_start(node->parent);
  231|      0|      list_delim = cmark_node_get_list_delim(node->parent);
  232|      0|      tmp = node;
  233|      0|      while (tmp->prev) {
  234|      0|        tmp = tmp->prev;
  235|      0|        list_number += 1;
  236|      0|      }
  237|       |      // we ensure a width of at least 4 so
  238|       |      // we get nice transition from single digits
  239|       |      // to double
  240|      0|      snprintf(listmarker, LISTMARKER_SIZE, "%d%s%s", list_number,
  241|      0|               list_delim == CMARK_PAREN_DELIM ? ")" : ".",
  242|      0|               list_number < 10 ? "  " : " ");
  243|      0|      marker_width = strlen(listmarker);
  244|      0|    }
  245|      0|    if (entering) {
  246|      0|      if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {
  247|      0|        LIT("  - ");
  248|      0|        renderer->begin_content = true;
  249|      0|      } else {
  250|      0|        LIT(listmarker);
  251|      0|        renderer->begin_content = true;
  252|      0|      }
  253|      0|      for (i = marker_width; i--;) {
  254|      0|        cmark_strbuf_putc(renderer->prefix, ' ');
  255|      0|      }
  256|      0|    } else {
  257|      0|      cmark_strbuf_truncate(renderer->prefix,
  258|      0|                            renderer->prefix->size - marker_width);
  259|      0|      CR();
  260|      0|    }
  261|      0|    break;
  262|       |
  263|      0|  case CMARK_NODE_HEADING:
  264|      0|    if (entering) {
  265|      0|      for (i = cmark_node_get_heading_level(node); i > 0; i--) {
  266|      0|        LIT("#");
  267|      0|      }
  268|      0|      LIT(" ");
  269|      0|      renderer->begin_content = true;
  270|      0|      renderer->no_linebreaks = true;
  271|      0|    } else {
  272|      0|      renderer->no_linebreaks = false;
  273|      0|      BLANKLINE();
  274|      0|    }
  275|      0|    break;
  276|       |
  277|      0|  case CMARK_NODE_CODE_BLOCK:
  278|       |
  279|      0|    first_in_list_item = node->prev == NULL && node->parent &&
  280|      0|                         node->parent->type == CMARK_NODE_ITEM;
  281|       |
  282|      0|    if (!first_in_list_item) {
  283|      0|      BLANKLINE();
  284|      0|    }
  285|      0|    info = cmark_node_get_fence_info(node);
  286|      0|    fencechar[0] = strchr(info, '`') == NULL ? '`' : '~';
  287|      0|    code = cmark_node_get_literal(node);
  288|       |
  289|      0|    numticks = longest_backtick_sequence(code) + 1;
  290|      0|    if (numticks < 3) {
  291|      0|      numticks = 3;
  292|      0|    }
  293|      0|    for (i = 0; i < numticks; i++) {
  294|      0|      LIT(fencechar);
  295|      0|    }
  296|      0|    LIT(" ");
  297|      0|    OUT(info, false, LITERAL);
  298|      0|    CR();
  299|      0|    OUT(cmark_node_get_literal(node), false, LITERAL);
  300|      0|    CR();
  301|      0|    for (i = 0; i < numticks; i++) {
  302|      0|      LIT(fencechar);
  303|      0|    }
  304|       |
  305|      0|    BLANKLINE();
  306|      0|    break;
  307|       |
  308|      0|  case CMARK_NODE_HTML_BLOCK:
  309|      0|    BLANKLINE();
  310|      0|    OUT(cmark_node_get_literal(node), false, LITERAL);
  311|      0|    BLANKLINE();
  312|      0|    break;
  313|       |
  314|      0|  case CMARK_NODE_CUSTOM_BLOCK:
  315|      0|    BLANKLINE();
  316|      0|    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),
  317|      0|        false, LITERAL);
  318|      0|    BLANKLINE();
  319|      0|    break;
  320|       |
  321|      0|  case CMARK_NODE_THEMATIC_BREAK:
  322|      0|    BLANKLINE();
  323|      0|    LIT("-----");
  324|      0|    BLANKLINE();
  325|      0|    break;
  326|       |
  327|      0|  case CMARK_NODE_PARAGRAPH:
  328|      0|    if (!entering) {
  329|      0|      BLANKLINE();
  330|      0|    }
  331|      0|    break;
  332|       |
  333|      0|  case CMARK_NODE_TEXT:
  334|      0|    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);
  335|      0|    break;
  336|       |
  337|      0|  case CMARK_NODE_LINEBREAK:
  338|      0|    if (!(CMARK_OPT_HARDBREAKS & options)) {
  339|      0|      LIT("  ");
  340|      0|    }
  341|      0|    CR();
  342|      0|    break;
  343|       |
  344|      0|  case CMARK_NODE_SOFTBREAK:
  345|      0|    if (CMARK_OPT_HARDBREAKS & options) {
  346|      0|      LIT("  ");
  347|      0|      CR();
  348|      0|    } else if (!renderer->no_linebreaks && renderer->width == 0 &&
  349|      0|               !(CMARK_OPT_HARDBREAKS & options) &&
  350|      0|               !(CMARK_OPT_NOBREAKS & options)) {
  351|      0|      CR();
  352|      0|    } else {
  353|      0|      OUT(" ", allow_wrap, LITERAL);
  354|      0|    }
  355|      0|    break;
  356|       |
  357|      0|  case CMARK_NODE_CODE:
  358|      0|    code = cmark_node_get_literal(node);
  359|      0|    code_len = strlen(code);
  360|      0|    numticks = shortest_unused_backtick_sequence(code);
  361|      0|    has_nonspace = false;
  362|      0|    for (i=0; i < code_len; i++) {
  363|      0|      if (code[i] != ' ') {
  364|      0|        has_nonspace = true;
  365|      0|        break;
  366|      0|      }
  367|      0|    }
  368|      0|    extra_spaces = code_len == 0 ||
  369|      0|            code[0] == '`' || code[code_len - 1] == '`' ||
  370|      0|            (has_nonspace && code[0] == ' ' && code[code_len - 1] == ' ');
  371|      0|    for (i = 0; i < numticks; i++) {
  372|      0|      LIT("`");
  373|      0|    }
  374|      0|    if (extra_spaces) {
  375|      0|      LIT(" ");
  376|      0|    }
  377|      0|    OUT(cmark_node_get_literal(node), allow_wrap, LITERAL);
  378|      0|    if (extra_spaces) {
  379|      0|      LIT(" ");
  380|      0|    }
  381|      0|    for (i = 0; i < numticks; i++) {
  382|      0|      LIT("`");
  383|      0|    }
  384|      0|    break;
  385|       |
  386|      0|  case CMARK_NODE_HTML_INLINE:
  387|      0|    OUT(cmark_node_get_literal(node), false, LITERAL);
  388|      0|    break;
  389|       |
  390|      0|  case CMARK_NODE_CUSTOM_INLINE:
  391|      0|    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),
  392|      0|        false, LITERAL);
  393|      0|    break;
  394|       |
  395|      0|  case CMARK_NODE_STRONG:
  396|      0|    if (entering) {
  397|      0|      LIT("**");
  398|      0|    } else {
  399|      0|      LIT("**");
  400|      0|    }
  401|      0|    break;
  402|       |
  403|      0|  case CMARK_NODE_EMPH:
  404|       |    // If we have EMPH(EMPH(x)), we need to use *_x_*
  405|       |    // because **x** is STRONG(x):
  406|      0|    if (node->parent && node->parent->type == CMARK_NODE_EMPH &&
  407|      0|        node->next == NULL && node->prev == NULL) {
  408|      0|      emph_delim = "_";
  409|      0|    } else {
  410|      0|      emph_delim = "*";
  411|      0|    }
  412|      0|    if (entering) {
  413|      0|      LIT(emph_delim);
  414|      0|    } else {
  415|      0|      LIT(emph_delim);
  416|      0|    }
  417|      0|    break;
  418|       |
  419|      0|  case CMARK_NODE_LINK:
  420|      0|    if (is_autolink(node)) {
  421|      0|      if (entering) {
  422|      0|        LIT("<");
  423|      0|        if (strncmp(cmark_node_get_url(node), "mailto:", 7) == 0) {
  424|      0|          LIT((const char *)cmark_node_get_url(node) + 7);
  425|      0|        } else {
  426|      0|          LIT((const char *)cmark_node_get_url(node));
  427|      0|        }
  428|      0|        LIT(">");
  429|       |        // return signal to skip contents of node...
  430|      0|        return 0;
  431|      0|      }
  432|      0|    } else {
  433|      0|      if (entering) {
  434|      0|        LIT("[");
  435|      0|      } else {
  436|      0|        LIT("](");
  437|      0|        OUT(cmark_node_get_url(node), false, URL);
  438|      0|        title = cmark_node_get_title(node);
  439|      0|        if (strlen(title) > 0) {
  440|      0|          LIT(" \"");
  441|      0|          OUT(title, false, TITLE);
  442|      0|          LIT("\"");
  443|      0|        }
  444|      0|        LIT(")");
  445|      0|      }
  446|      0|    }
  447|      0|    break;
  448|       |
  449|      0|  case CMARK_NODE_IMAGE:
  450|      0|    if (entering) {
  451|      0|      LIT("![");
  452|      0|    } else {
  453|      0|      LIT("](");
  454|      0|      OUT(cmark_node_get_url(node), false, URL);
  455|      0|      title = cmark_node_get_title(node);
  456|      0|      if (strlen(title) > 0) {
  457|      0|        OUT(" \"", allow_wrap, LITERAL);
  458|      0|        OUT(title, false, TITLE);
  459|      0|        LIT("\"");
  460|      0|      }
  461|      0|      LIT(")");
  462|      0|    }
  463|      0|    break;
  464|       |
  465|      0|  default:
  466|      0|    assert(false);
  467|      0|    break;
  468|      0|  }
  469|       |
  470|      0|  return 1;
  471|      0|}
  472|       |
  473|      0|char *cmark_render_commonmark(cmark_node *root, int options, int width) {
  474|      0|  if (options & CMARK_OPT_HARDBREAKS) {
  475|       |    // disable breaking on width, since it has
  476|       |    // a different meaning with OPT_HARDBREAKS
  477|      0|    width = 0;
  478|      0|  }
  479|      0|  return cmark_render(root, options, width, outc, S_render_node);
  480|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/entities.inc:
    1|       |/* Autogenerated by tools/make_headers_inc.py */
    2|       |
    3|       |struct cmark_entity_node {
    4|       |	unsigned char *entity;
    5|       |        unsigned char bytes[8];
    6|       |};
    7|       |
    8|      0|#define CMARK_ENTITY_MIN_LENGTH 2
    9|      0|#define CMARK_ENTITY_MAX_LENGTH 32
   10|      0|#define CMARK_NUM_ENTITIES 2125
   11|       |
   12|       |static const struct cmark_entity_node cmark_entities[] = {
   13|       |{(unsigned char*)"AElig", {195, 134, 0}},
   14|       |{(unsigned char*)"AMP", {38, 0}},
   15|       |{(unsigned char*)"Aacute", {195, 129, 0}},
   16|       |{(unsigned char*)"Abreve", {196, 130, 0}},
   17|       |{(unsigned char*)"Acirc", {195, 130, 0}},
   18|       |{(unsigned char*)"Acy", {208, 144, 0}},
   19|       |{(unsigned char*)"Afr", {240, 157, 148, 132, 0}},
   20|       |{(unsigned char*)"Agrave", {195, 128, 0}},
   21|       |{(unsigned char*)"Alpha", {206, 145, 0}},
   22|       |{(unsigned char*)"Amacr", {196, 128, 0}},
   23|       |{(unsigned char*)"And", {226, 169, 147, 0}},
   24|       |{(unsigned char*)"Aogon", {196, 132, 0}},
   25|       |{(unsigned char*)"Aopf", {240, 157, 148, 184, 0}},
   26|       |{(unsigned char*)"ApplyFunction", {226, 129, 161, 0}},
   27|       |{(unsigned char*)"Aring", {195, 133, 0}},
   28|       |{(unsigned char*)"Ascr", {240, 157, 146, 156, 0}},
   29|       |{(unsigned char*)"Assign", {226, 137, 148, 0}},
   30|       |{(unsigned char*)"Atilde", {195, 131, 0}},
   31|       |{(unsigned char*)"Auml", {195, 132, 0}},
   32|       |{(unsigned char*)"Backslash", {226, 136, 150, 0}},
   33|       |{(unsigned char*)"Barv", {226, 171, 167, 0}},
   34|       |{(unsigned char*)"Barwed", {226, 140, 134, 0}},
   35|       |{(unsigned char*)"Bcy", {208, 145, 0}},
   36|       |{(unsigned char*)"Because", {226, 136, 181, 0}},
   37|       |{(unsigned char*)"Bernoullis", {226, 132, 172, 0}},
   38|       |{(unsigned char*)"Beta", {206, 146, 0}},
   39|       |{(unsigned char*)"Bfr", {240, 157, 148, 133, 0}},
   40|       |{(unsigned char*)"Bopf", {240, 157, 148, 185, 0}},
   41|       |{(unsigned char*)"Breve", {203, 152, 0}},
   42|       |{(unsigned char*)"Bscr", {226, 132, 172, 0}},
   43|       |{(unsigned char*)"Bumpeq", {226, 137, 142, 0}},
   44|       |{(unsigned char*)"CHcy", {208, 167, 0}},
   45|       |{(unsigned char*)"COPY", {194, 169, 0}},
   46|       |{(unsigned char*)"Cacute", {196, 134, 0}},
   47|       |{(unsigned char*)"Cap", {226, 139, 146, 0}},
   48|       |{(unsigned char*)"CapitalDifferentialD", {226, 133, 133, 0}},
   49|       |{(unsigned char*)"Cayleys", {226, 132, 173, 0}},
   50|       |{(unsigned char*)"Ccaron", {196, 140, 0}},
   51|       |{(unsigned char*)"Ccedil", {195, 135, 0}},
   52|       |{(unsigned char*)"Ccirc", {196, 136, 0}},
   53|       |{(unsigned char*)"Cconint", {226, 136, 176, 0}},
   54|       |{(unsigned char*)"Cdot", {196, 138, 0}},
   55|       |{(unsigned char*)"Cedilla", {194, 184, 0}},
   56|       |{(unsigned char*)"CenterDot", {194, 183, 0}},
   57|       |{(unsigned char*)"Cfr", {226, 132, 173, 0}},
   58|       |{(unsigned char*)"Chi", {206, 167, 0}},
   59|       |{(unsigned char*)"CircleDot", {226, 138, 153, 0}},
   60|       |{(unsigned char*)"CircleMinus", {226, 138, 150, 0}},
   61|       |{(unsigned char*)"CirclePlus", {226, 138, 149, 0}},
   62|       |{(unsigned char*)"CircleTimes", {226, 138, 151, 0}},
   63|       |{(unsigned char*)"ClockwiseContourIntegral", {226, 136, 178, 0}},
   64|       |{(unsigned char*)"CloseCurlyDoubleQuote", {226, 128, 157, 0}},
   65|       |{(unsigned char*)"CloseCurlyQuote", {226, 128, 153, 0}},
   66|       |{(unsigned char*)"Colon", {226, 136, 183, 0}},
   67|       |{(unsigned char*)"Colone", {226, 169, 180, 0}},
   68|       |{(unsigned char*)"Congruent", {226, 137, 161, 0}},
   69|       |{(unsigned char*)"Conint", {226, 136, 175, 0}},
   70|       |{(unsigned char*)"ContourIntegral", {226, 136, 174, 0}},
   71|       |{(unsigned char*)"Copf", {226, 132, 130, 0}},
   72|       |{(unsigned char*)"Coproduct", {226, 136, 144, 0}},
   73|       |{(unsigned char*)"CounterClockwiseContourIntegral", {226, 136, 179, 0}},
   74|       |{(unsigned char*)"Cross", {226, 168, 175, 0}},
   75|       |{(unsigned char*)"Cscr", {240, 157, 146, 158, 0}},
   76|       |{(unsigned char*)"Cup", {226, 139, 147, 0}},
   77|       |{(unsigned char*)"CupCap", {226, 137, 141, 0}},
   78|       |{(unsigned char*)"DD", {226, 133, 133, 0}},
   79|       |{(unsigned char*)"DDotrahd", {226, 164, 145, 0}},
   80|       |{(unsigned char*)"DJcy", {208, 130, 0}},
   81|       |{(unsigned char*)"DScy", {208, 133, 0}},
   82|       |{(unsigned char*)"DZcy", {208, 143, 0}},
   83|       |{(unsigned char*)"Dagger", {226, 128, 161, 0}},
   84|       |{(unsigned char*)"Darr", {226, 134, 161, 0}},
   85|       |{(unsigned char*)"Dashv", {226, 171, 164, 0}},
   86|       |{(unsigned char*)"Dcaron", {196, 142, 0}},
   87|       |{(unsigned char*)"Dcy", {208, 148, 0}},
   88|       |{(unsigned char*)"Del", {226, 136, 135, 0}},
   89|       |{(unsigned char*)"Delta", {206, 148, 0}},
   90|       |{(unsigned char*)"Dfr", {240, 157, 148, 135, 0}},
   91|       |{(unsigned char*)"DiacriticalAcute", {194, 180, 0}},
   92|       |{(unsigned char*)"DiacriticalDot", {203, 153, 0}},
   93|       |{(unsigned char*)"DiacriticalDoubleAcute", {203, 157, 0}},
   94|       |{(unsigned char*)"DiacriticalGrave", {96, 0}},
   95|       |{(unsigned char*)"DiacriticalTilde", {203, 156, 0}},
   96|       |{(unsigned char*)"Diamond", {226, 139, 132, 0}},
   97|       |{(unsigned char*)"DifferentialD", {226, 133, 134, 0}},
   98|       |{(unsigned char*)"Dopf", {240, 157, 148, 187, 0}},
   99|       |{(unsigned char*)"Dot", {194, 168, 0}},
  100|       |{(unsigned char*)"DotDot", {226, 131, 156, 0}},
  101|       |{(unsigned char*)"DotEqual", {226, 137, 144, 0}},
  102|       |{(unsigned char*)"DoubleContourIntegral", {226, 136, 175, 0}},
  103|       |{(unsigned char*)"DoubleDot", {194, 168, 0}},
  104|       |{(unsigned char*)"DoubleDownArrow", {226, 135, 147, 0}},
  105|       |{(unsigned char*)"DoubleLeftArrow", {226, 135, 144, 0}},
  106|       |{(unsigned char*)"DoubleLeftRightArrow", {226, 135, 148, 0}},
  107|       |{(unsigned char*)"DoubleLeftTee", {226, 171, 164, 0}},
  108|       |{(unsigned char*)"DoubleLongLeftArrow", {226, 159, 184, 0}},
  109|       |{(unsigned char*)"DoubleLongLeftRightArrow", {226, 159, 186, 0}},
  110|       |{(unsigned char*)"DoubleLongRightArrow", {226, 159, 185, 0}},
  111|       |{(unsigned char*)"DoubleRightArrow", {226, 135, 146, 0}},
  112|       |{(unsigned char*)"DoubleRightTee", {226, 138, 168, 0}},
  113|       |{(unsigned char*)"DoubleUpArrow", {226, 135, 145, 0}},
  114|       |{(unsigned char*)"DoubleUpDownArrow", {226, 135, 149, 0}},
  115|       |{(unsigned char*)"DoubleVerticalBar", {226, 136, 165, 0}},
  116|       |{(unsigned char*)"DownArrow", {226, 134, 147, 0}},
  117|       |{(unsigned char*)"DownArrowBar", {226, 164, 147, 0}},
  118|       |{(unsigned char*)"DownArrowUpArrow", {226, 135, 181, 0}},
  119|       |{(unsigned char*)"DownBreve", {204, 145, 0}},
  120|       |{(unsigned char*)"DownLeftRightVector", {226, 165, 144, 0}},
  121|       |{(unsigned char*)"DownLeftTeeVector", {226, 165, 158, 0}},
  122|       |{(unsigned char*)"DownLeftVector", {226, 134, 189, 0}},
  123|       |{(unsigned char*)"DownLeftVectorBar", {226, 165, 150, 0}},
  124|       |{(unsigned char*)"DownRightTeeVector", {226, 165, 159, 0}},
  125|       |{(unsigned char*)"DownRightVector", {226, 135, 129, 0}},
  126|       |{(unsigned char*)"DownRightVectorBar", {226, 165, 151, 0}},
  127|       |{(unsigned char*)"DownTee", {226, 138, 164, 0}},
  128|       |{(unsigned char*)"DownTeeArrow", {226, 134, 167, 0}},
  129|       |{(unsigned char*)"Downarrow", {226, 135, 147, 0}},
  130|       |{(unsigned char*)"Dscr", {240, 157, 146, 159, 0}},
  131|       |{(unsigned char*)"Dstrok", {196, 144, 0}},
  132|       |{(unsigned char*)"ENG", {197, 138, 0}},
  133|       |{(unsigned char*)"ETH", {195, 144, 0}},
  134|       |{(unsigned char*)"Eacute", {195, 137, 0}},
  135|       |{(unsigned char*)"Ecaron", {196, 154, 0}},
  136|       |{(unsigned char*)"Ecirc", {195, 138, 0}},
  137|       |{(unsigned char*)"Ecy", {208, 173, 0}},
  138|       |{(unsigned char*)"Edot", {196, 150, 0}},
  139|       |{(unsigned char*)"Efr", {240, 157, 148, 136, 0}},
  140|       |{(unsigned char*)"Egrave", {195, 136, 0}},
  141|       |{(unsigned char*)"Element", {226, 136, 136, 0}},
  142|       |{(unsigned char*)"Emacr", {196, 146, 0}},
  143|       |{(unsigned char*)"EmptySmallSquare", {226, 151, 187, 0}},
  144|       |{(unsigned char*)"EmptyVerySmallSquare", {226, 150, 171, 0}},
  145|       |{(unsigned char*)"Eogon", {196, 152, 0}},
  146|       |{(unsigned char*)"Eopf", {240, 157, 148, 188, 0}},
  147|       |{(unsigned char*)"Epsilon", {206, 149, 0}},
  148|       |{(unsigned char*)"Equal", {226, 169, 181, 0}},
  149|       |{(unsigned char*)"EqualTilde", {226, 137, 130, 0}},
  150|       |{(unsigned char*)"Equilibrium", {226, 135, 140, 0}},
  151|       |{(unsigned char*)"Escr", {226, 132, 176, 0}},
  152|       |{(unsigned char*)"Esim", {226, 169, 179, 0}},
  153|       |{(unsigned char*)"Eta", {206, 151, 0}},
  154|       |{(unsigned char*)"Euml", {195, 139, 0}},
  155|       |{(unsigned char*)"Exists", {226, 136, 131, 0}},
  156|       |{(unsigned char*)"ExponentialE", {226, 133, 135, 0}},
  157|       |{(unsigned char*)"Fcy", {208, 164, 0}},
  158|       |{(unsigned char*)"Ffr", {240, 157, 148, 137, 0}},
  159|       |{(unsigned char*)"FilledSmallSquare", {226, 151, 188, 0}},
  160|       |{(unsigned char*)"FilledVerySmallSquare", {226, 150, 170, 0}},
  161|       |{(unsigned char*)"Fopf", {240, 157, 148, 189, 0}},
  162|       |{(unsigned char*)"ForAll", {226, 136, 128, 0}},
  163|       |{(unsigned char*)"Fouriertrf", {226, 132, 177, 0}},
  164|       |{(unsigned char*)"Fscr", {226, 132, 177, 0}},
  165|       |{(unsigned char*)"GJcy", {208, 131, 0}},
  166|       |{(unsigned char*)"GT", {62, 0}},
  167|       |{(unsigned char*)"Gamma", {206, 147, 0}},
  168|       |{(unsigned char*)"Gammad", {207, 156, 0}},
  169|       |{(unsigned char*)"Gbreve", {196, 158, 0}},
  170|       |{(unsigned char*)"Gcedil", {196, 162, 0}},
  171|       |{(unsigned char*)"Gcirc", {196, 156, 0}},
  172|       |{(unsigned char*)"Gcy", {208, 147, 0}},
  173|       |{(unsigned char*)"Gdot", {196, 160, 0}},
  174|       |{(unsigned char*)"Gfr", {240, 157, 148, 138, 0}},
  175|       |{(unsigned char*)"Gg", {226, 139, 153, 0}},
  176|       |{(unsigned char*)"Gopf", {240, 157, 148, 190, 0}},
  177|       |{(unsigned char*)"GreaterEqual", {226, 137, 165, 0}},
  178|       |{(unsigned char*)"GreaterEqualLess", {226, 139, 155, 0}},
  179|       |{(unsigned char*)"GreaterFullEqual", {226, 137, 167, 0}},
  180|       |{(unsigned char*)"GreaterGreater", {226, 170, 162, 0}},
  181|       |{(unsigned char*)"GreaterLess", {226, 137, 183, 0}},
  182|       |{(unsigned char*)"GreaterSlantEqual", {226, 169, 190, 0}},
  183|       |{(unsigned char*)"GreaterTilde", {226, 137, 179, 0}},
  184|       |{(unsigned char*)"Gscr", {240, 157, 146, 162, 0}},
  185|       |{(unsigned char*)"Gt", {226, 137, 171, 0}},
  186|       |{(unsigned char*)"HARDcy", {208, 170, 0}},
  187|       |{(unsigned char*)"Hacek", {203, 135, 0}},
  188|       |{(unsigned char*)"Hat", {94, 0}},
  189|       |{(unsigned char*)"Hcirc", {196, 164, 0}},
  190|       |{(unsigned char*)"Hfr", {226, 132, 140, 0}},
  191|       |{(unsigned char*)"HilbertSpace", {226, 132, 139, 0}},
  192|       |{(unsigned char*)"Hopf", {226, 132, 141, 0}},
  193|       |{(unsigned char*)"HorizontalLine", {226, 148, 128, 0}},
  194|       |{(unsigned char*)"Hscr", {226, 132, 139, 0}},
  195|       |{(unsigned char*)"Hstrok", {196, 166, 0}},
  196|       |{(unsigned char*)"HumpDownHump", {226, 137, 142, 0}},
  197|       |{(unsigned char*)"HumpEqual", {226, 137, 143, 0}},
  198|       |{(unsigned char*)"IEcy", {208, 149, 0}},
  199|       |{(unsigned char*)"IJlig", {196, 178, 0}},
  200|       |{(unsigned char*)"IOcy", {208, 129, 0}},
  201|       |{(unsigned char*)"Iacute", {195, 141, 0}},
  202|       |{(unsigned char*)"Icirc", {195, 142, 0}},
  203|       |{(unsigned char*)"Icy", {208, 152, 0}},
  204|       |{(unsigned char*)"Idot", {196, 176, 0}},
  205|       |{(unsigned char*)"Ifr", {226, 132, 145, 0}},
  206|       |{(unsigned char*)"Igrave", {195, 140, 0}},
  207|       |{(unsigned char*)"Im", {226, 132, 145, 0}},
  208|       |{(unsigned char*)"Imacr", {196, 170, 0}},
  209|       |{(unsigned char*)"ImaginaryI", {226, 133, 136, 0}},
  210|       |{(unsigned char*)"Implies", {226, 135, 146, 0}},
  211|       |{(unsigned char*)"Int", {226, 136, 172, 0}},
  212|       |{(unsigned char*)"Integral", {226, 136, 171, 0}},
  213|       |{(unsigned char*)"Intersection", {226, 139, 130, 0}},
  214|       |{(unsigned char*)"InvisibleComma", {226, 129, 163, 0}},
  215|       |{(unsigned char*)"InvisibleTimes", {226, 129, 162, 0}},
  216|       |{(unsigned char*)"Iogon", {196, 174, 0}},
  217|       |{(unsigned char*)"Iopf", {240, 157, 149, 128, 0}},
  218|       |{(unsigned char*)"Iota", {206, 153, 0}},
  219|       |{(unsigned char*)"Iscr", {226, 132, 144, 0}},
  220|       |{(unsigned char*)"Itilde", {196, 168, 0}},
  221|       |{(unsigned char*)"Iukcy", {208, 134, 0}},
  222|       |{(unsigned char*)"Iuml", {195, 143, 0}},
  223|       |{(unsigned char*)"Jcirc", {196, 180, 0}},
  224|       |{(unsigned char*)"Jcy", {208, 153, 0}},
  225|       |{(unsigned char*)"Jfr", {240, 157, 148, 141, 0}},
  226|       |{(unsigned char*)"Jopf", {240, 157, 149, 129, 0}},
  227|       |{(unsigned char*)"Jscr", {240, 157, 146, 165, 0}},
  228|       |{(unsigned char*)"Jsercy", {208, 136, 0}},
  229|       |{(unsigned char*)"Jukcy", {208, 132, 0}},
  230|       |{(unsigned char*)"KHcy", {208, 165, 0}},
  231|       |{(unsigned char*)"KJcy", {208, 140, 0}},
  232|       |{(unsigned char*)"Kappa", {206, 154, 0}},
  233|       |{(unsigned char*)"Kcedil", {196, 182, 0}},
  234|       |{(unsigned char*)"Kcy", {208, 154, 0}},
  235|       |{(unsigned char*)"Kfr", {240, 157, 148, 142, 0}},
  236|       |{(unsigned char*)"Kopf", {240, 157, 149, 130, 0}},
  237|       |{(unsigned char*)"Kscr", {240, 157, 146, 166, 0}},
  238|       |{(unsigned char*)"LJcy", {208, 137, 0}},
  239|       |{(unsigned char*)"LT", {60, 0}},
  240|       |{(unsigned char*)"Lacute", {196, 185, 0}},
  241|       |{(unsigned char*)"Lambda", {206, 155, 0}},
  242|       |{(unsigned char*)"Lang", {226, 159, 170, 0}},
  243|       |{(unsigned char*)"Laplacetrf", {226, 132, 146, 0}},
  244|       |{(unsigned char*)"Larr", {226, 134, 158, 0}},
  245|       |{(unsigned char*)"Lcaron", {196, 189, 0}},
  246|       |{(unsigned char*)"Lcedil", {196, 187, 0}},
  247|       |{(unsigned char*)"Lcy", {208, 155, 0}},
  248|       |{(unsigned char*)"LeftAngleBracket", {226, 159, 168, 0}},
  249|       |{(unsigned char*)"LeftArrow", {226, 134, 144, 0}},
  250|       |{(unsigned char*)"LeftArrowBar", {226, 135, 164, 0}},
  251|       |{(unsigned char*)"LeftArrowRightArrow", {226, 135, 134, 0}},
  252|       |{(unsigned char*)"LeftCeiling", {226, 140, 136, 0}},
  253|       |{(unsigned char*)"LeftDoubleBracket", {226, 159, 166, 0}},
  254|       |{(unsigned char*)"LeftDownTeeVector", {226, 165, 161, 0}},
  255|       |{(unsigned char*)"LeftDownVector", {226, 135, 131, 0}},
  256|       |{(unsigned char*)"LeftDownVectorBar", {226, 165, 153, 0}},
  257|       |{(unsigned char*)"LeftFloor", {226, 140, 138, 0}},
  258|       |{(unsigned char*)"LeftRightArrow", {226, 134, 148, 0}},
  259|       |{(unsigned char*)"LeftRightVector", {226, 165, 142, 0}},
  260|       |{(unsigned char*)"LeftTee", {226, 138, 163, 0}},
  261|       |{(unsigned char*)"LeftTeeArrow", {226, 134, 164, 0}},
  262|       |{(unsigned char*)"LeftTeeVector", {226, 165, 154, 0}},
  263|       |{(unsigned char*)"LeftTriangle", {226, 138, 178, 0}},
  264|       |{(unsigned char*)"LeftTriangleBar", {226, 167, 143, 0}},
  265|       |{(unsigned char*)"LeftTriangleEqual", {226, 138, 180, 0}},
  266|       |{(unsigned char*)"LeftUpDownVector", {226, 165, 145, 0}},
  267|       |{(unsigned char*)"LeftUpTeeVector", {226, 165, 160, 0}},
  268|       |{(unsigned char*)"LeftUpVector", {226, 134, 191, 0}},
  269|       |{(unsigned char*)"LeftUpVectorBar", {226, 165, 152, 0}},
  270|       |{(unsigned char*)"LeftVector", {226, 134, 188, 0}},
  271|       |{(unsigned char*)"LeftVectorBar", {226, 165, 146, 0}},
  272|       |{(unsigned char*)"Leftarrow", {226, 135, 144, 0}},
  273|       |{(unsigned char*)"Leftrightarrow", {226, 135, 148, 0}},
  274|       |{(unsigned char*)"LessEqualGreater", {226, 139, 154, 0}},
  275|       |{(unsigned char*)"LessFullEqual", {226, 137, 166, 0}},
  276|       |{(unsigned char*)"LessGreater", {226, 137, 182, 0}},
  277|       |{(unsigned char*)"LessLess", {226, 170, 161, 0}},
  278|       |{(unsigned char*)"LessSlantEqual", {226, 169, 189, 0}},
  279|       |{(unsigned char*)"LessTilde", {226, 137, 178, 0}},
  280|       |{(unsigned char*)"Lfr", {240, 157, 148, 143, 0}},
  281|       |{(unsigned char*)"Ll", {226, 139, 152, 0}},
  282|       |{(unsigned char*)"Lleftarrow", {226, 135, 154, 0}},
  283|       |{(unsigned char*)"Lmidot", {196, 191, 0}},
  284|       |{(unsigned char*)"LongLeftArrow", {226, 159, 181, 0}},
  285|       |{(unsigned char*)"LongLeftRightArrow", {226, 159, 183, 0}},
  286|       |{(unsigned char*)"LongRightArrow", {226, 159, 182, 0}},
  287|       |{(unsigned char*)"Longleftarrow", {226, 159, 184, 0}},
  288|       |{(unsigned char*)"Longleftrightarrow", {226, 159, 186, 0}},
  289|       |{(unsigned char*)"Longrightarrow", {226, 159, 185, 0}},
  290|       |{(unsigned char*)"Lopf", {240, 157, 149, 131, 0}},
  291|       |{(unsigned char*)"LowerLeftArrow", {226, 134, 153, 0}},
  292|       |{(unsigned char*)"LowerRightArrow", {226, 134, 152, 0}},
  293|       |{(unsigned char*)"Lscr", {226, 132, 146, 0}},
  294|       |{(unsigned char*)"Lsh", {226, 134, 176, 0}},
  295|       |{(unsigned char*)"Lstrok", {197, 129, 0}},
  296|       |{(unsigned char*)"Lt", {226, 137, 170, 0}},
  297|       |{(unsigned char*)"Map", {226, 164, 133, 0}},
  298|       |{(unsigned char*)"Mcy", {208, 156, 0}},
  299|       |{(unsigned char*)"MediumSpace", {226, 129, 159, 0}},
  300|       |{(unsigned char*)"Mellintrf", {226, 132, 179, 0}},
  301|       |{(unsigned char*)"Mfr", {240, 157, 148, 144, 0}},
  302|       |{(unsigned char*)"MinusPlus", {226, 136, 147, 0}},
  303|       |{(unsigned char*)"Mopf", {240, 157, 149, 132, 0}},
  304|       |{(unsigned char*)"Mscr", {226, 132, 179, 0}},
  305|       |{(unsigned char*)"Mu", {206, 156, 0}},
  306|       |{(unsigned char*)"NJcy", {208, 138, 0}},
  307|       |{(unsigned char*)"Nacute", {197, 131, 0}},
  308|       |{(unsigned char*)"Ncaron", {197, 135, 0}},
  309|       |{(unsigned char*)"Ncedil", {197, 133, 0}},
  310|       |{(unsigned char*)"Ncy", {208, 157, 0}},
  311|       |{(unsigned char*)"NegativeMediumSpace", {226, 128, 139, 0}},
  312|       |{(unsigned char*)"NegativeThickSpace", {226, 128, 139, 0}},
  313|       |{(unsigned char*)"NegativeThinSpace", {226, 128, 139, 0}},
  314|       |{(unsigned char*)"NegativeVeryThinSpace", {226, 128, 139, 0}},
  315|       |{(unsigned char*)"NestedGreaterGreater", {226, 137, 171, 0}},
  316|       |{(unsigned char*)"NestedLessLess", {226, 137, 170, 0}},
  317|       |{(unsigned char*)"NewLine", {10, 0}},
  318|       |{(unsigned char*)"Nfr", {240, 157, 148, 145, 0}},
  319|       |{(unsigned char*)"NoBreak", {226, 129, 160, 0}},
  320|       |{(unsigned char*)"NonBreakingSpace", {194, 160, 0}},
  321|       |{(unsigned char*)"Nopf", {226, 132, 149, 0}},
  322|       |{(unsigned char*)"Not", {226, 171, 172, 0}},
  323|       |{(unsigned char*)"NotCongruent", {226, 137, 162, 0}},
  324|       |{(unsigned char*)"NotCupCap", {226, 137, 173, 0}},
  325|       |{(unsigned char*)"NotDoubleVerticalBar", {226, 136, 166, 0}},
  326|       |{(unsigned char*)"NotElement", {226, 136, 137, 0}},
  327|       |{(unsigned char*)"NotEqual", {226, 137, 160, 0}},
  328|       |{(unsigned char*)"NotEqualTilde", {226, 137, 130, 204, 184, 0}},
  329|       |{(unsigned char*)"NotExists", {226, 136, 132, 0}},
  330|       |{(unsigned char*)"NotGreater", {226, 137, 175, 0}},
  331|       |{(unsigned char*)"NotGreaterEqual", {226, 137, 177, 0}},
  332|       |{(unsigned char*)"NotGreaterFullEqual", {226, 137, 167, 204, 184, 0}},
  333|       |{(unsigned char*)"NotGreaterGreater", {226, 137, 171, 204, 184, 0}},
  334|       |{(unsigned char*)"NotGreaterLess", {226, 137, 185, 0}},
  335|       |{(unsigned char*)"NotGreaterSlantEqual", {226, 169, 190, 204, 184, 0}},
  336|       |{(unsigned char*)"NotGreaterTilde", {226, 137, 181, 0}},
  337|       |{(unsigned char*)"NotHumpDownHump", {226, 137, 142, 204, 184, 0}},
  338|       |{(unsigned char*)"NotHumpEqual", {226, 137, 143, 204, 184, 0}},
  339|       |{(unsigned char*)"NotLeftTriangle", {226, 139, 170, 0}},
  340|       |{(unsigned char*)"NotLeftTriangleBar", {226, 167, 143, 204, 184, 0}},
  341|       |{(unsigned char*)"NotLeftTriangleEqual", {226, 139, 172, 0}},
  342|       |{(unsigned char*)"NotLess", {226, 137, 174, 0}},
  343|       |{(unsigned char*)"NotLessEqual", {226, 137, 176, 0}},
  344|       |{(unsigned char*)"NotLessGreater", {226, 137, 184, 0}},
  345|       |{(unsigned char*)"NotLessLess", {226, 137, 170, 204, 184, 0}},
  346|       |{(unsigned char*)"NotLessSlantEqual", {226, 169, 189, 204, 184, 0}},
  347|       |{(unsigned char*)"NotLessTilde", {226, 137, 180, 0}},
  348|       |{(unsigned char*)"NotNestedGreaterGreater", {226, 170, 162, 204, 184, 0}},
  349|       |{(unsigned char*)"NotNestedLessLess", {226, 170, 161, 204, 184, 0}},
  350|       |{(unsigned char*)"NotPrecedes", {226, 138, 128, 0}},
  351|       |{(unsigned char*)"NotPrecedesEqual", {226, 170, 175, 204, 184, 0}},
  352|       |{(unsigned char*)"NotPrecedesSlantEqual", {226, 139, 160, 0}},
  353|       |{(unsigned char*)"NotReverseElement", {226, 136, 140, 0}},
  354|       |{(unsigned char*)"NotRightTriangle", {226, 139, 171, 0}},
  355|       |{(unsigned char*)"NotRightTriangleBar", {226, 167, 144, 204, 184, 0}},
  356|       |{(unsigned char*)"NotRightTriangleEqual", {226, 139, 173, 0}},
  357|       |{(unsigned char*)"NotSquareSubset", {226, 138, 143, 204, 184, 0}},
  358|       |{(unsigned char*)"NotSquareSubsetEqual", {226, 139, 162, 0}},
  359|       |{(unsigned char*)"NotSquareSuperset", {226, 138, 144, 204, 184, 0}},
  360|       |{(unsigned char*)"NotSquareSupersetEqual", {226, 139, 163, 0}},
  361|       |{(unsigned char*)"NotSubset", {226, 138, 130, 226, 131, 146, 0}},
  362|       |{(unsigned char*)"NotSubsetEqual", {226, 138, 136, 0}},
  363|       |{(unsigned char*)"NotSucceeds", {226, 138, 129, 0}},
  364|       |{(unsigned char*)"NotSucceedsEqual", {226, 170, 176, 204, 184, 0}},
  365|       |{(unsigned char*)"NotSucceedsSlantEqual", {226, 139, 161, 0}},
  366|       |{(unsigned char*)"NotSucceedsTilde", {226, 137, 191, 204, 184, 0}},
  367|       |{(unsigned char*)"NotSuperset", {226, 138, 131, 226, 131, 146, 0}},
  368|       |{(unsigned char*)"NotSupersetEqual", {226, 138, 137, 0}},
  369|       |{(unsigned char*)"NotTilde", {226, 137, 129, 0}},
  370|       |{(unsigned char*)"NotTildeEqual", {226, 137, 132, 0}},
  371|       |{(unsigned char*)"NotTildeFullEqual", {226, 137, 135, 0}},
  372|       |{(unsigned char*)"NotTildeTilde", {226, 137, 137, 0}},
  373|       |{(unsigned char*)"NotVerticalBar", {226, 136, 164, 0}},
  374|       |{(unsigned char*)"Nscr", {240, 157, 146, 169, 0}},
  375|       |{(unsigned char*)"Ntilde", {195, 145, 0}},
  376|       |{(unsigned char*)"Nu", {206, 157, 0}},
  377|       |{(unsigned char*)"OElig", {197, 146, 0}},
  378|       |{(unsigned char*)"Oacute", {195, 147, 0}},
  379|       |{(unsigned char*)"Ocirc", {195, 148, 0}},
  380|       |{(unsigned char*)"Ocy", {208, 158, 0}},
  381|       |{(unsigned char*)"Odblac", {197, 144, 0}},
  382|       |{(unsigned char*)"Ofr", {240, 157, 148, 146, 0}},
  383|       |{(unsigned char*)"Ograve", {195, 146, 0}},
  384|       |{(unsigned char*)"Omacr", {197, 140, 0}},
  385|       |{(unsigned char*)"Omega", {206, 169, 0}},
  386|       |{(unsigned char*)"Omicron", {206, 159, 0}},
  387|       |{(unsigned char*)"Oopf", {240, 157, 149, 134, 0}},
  388|       |{(unsigned char*)"OpenCurlyDoubleQuote", {226, 128, 156, 0}},
  389|       |{(unsigned char*)"OpenCurlyQuote", {226, 128, 152, 0}},
  390|       |{(unsigned char*)"Or", {226, 169, 148, 0}},
  391|       |{(unsigned char*)"Oscr", {240, 157, 146, 170, 0}},
  392|       |{(unsigned char*)"Oslash", {195, 152, 0}},
  393|       |{(unsigned char*)"Otilde", {195, 149, 0}},
  394|       |{(unsigned char*)"Otimes", {226, 168, 183, 0}},
  395|       |{(unsigned char*)"Ouml", {195, 150, 0}},
  396|       |{(unsigned char*)"OverBar", {226, 128, 190, 0}},
  397|       |{(unsigned char*)"OverBrace", {226, 143, 158, 0}},
  398|       |{(unsigned char*)"OverBracket", {226, 142, 180, 0}},
  399|       |{(unsigned char*)"OverParenthesis", {226, 143, 156, 0}},
  400|       |{(unsigned char*)"PartialD", {226, 136, 130, 0}},
  401|       |{(unsigned char*)"Pcy", {208, 159, 0}},
  402|       |{(unsigned char*)"Pfr", {240, 157, 148, 147, 0}},
  403|       |{(unsigned char*)"Phi", {206, 166, 0}},
  404|       |{(unsigned char*)"Pi", {206, 160, 0}},
  405|       |{(unsigned char*)"PlusMinus", {194, 177, 0}},
  406|       |{(unsigned char*)"Poincareplane", {226, 132, 140, 0}},
  407|       |{(unsigned char*)"Popf", {226, 132, 153, 0}},
  408|       |{(unsigned char*)"Pr", {226, 170, 187, 0}},
  409|       |{(unsigned char*)"Precedes", {226, 137, 186, 0}},
  410|       |{(unsigned char*)"PrecedesEqual", {226, 170, 175, 0}},
  411|       |{(unsigned char*)"PrecedesSlantEqual", {226, 137, 188, 0}},
  412|       |{(unsigned char*)"PrecedesTilde", {226, 137, 190, 0}},
  413|       |{(unsigned char*)"Prime", {226, 128, 179, 0}},
  414|       |{(unsigned char*)"Product", {226, 136, 143, 0}},
  415|       |{(unsigned char*)"Proportion", {226, 136, 183, 0}},
  416|       |{(unsigned char*)"Proportional", {226, 136, 157, 0}},
  417|       |{(unsigned char*)"Pscr", {240, 157, 146, 171, 0}},
  418|       |{(unsigned char*)"Psi", {206, 168, 0}},
  419|       |{(unsigned char*)"QUOT", {34, 0}},
  420|       |{(unsigned char*)"Qfr", {240, 157, 148, 148, 0}},
  421|       |{(unsigned char*)"Qopf", {226, 132, 154, 0}},
  422|       |{(unsigned char*)"Qscr", {240, 157, 146, 172, 0}},
  423|       |{(unsigned char*)"RBarr", {226, 164, 144, 0}},
  424|       |{(unsigned char*)"REG", {194, 174, 0}},
  425|       |{(unsigned char*)"Racute", {197, 148, 0}},
  426|       |{(unsigned char*)"Rang", {226, 159, 171, 0}},
  427|       |{(unsigned char*)"Rarr", {226, 134, 160, 0}},
  428|       |{(unsigned char*)"Rarrtl", {226, 164, 150, 0}},
  429|       |{(unsigned char*)"Rcaron", {197, 152, 0}},
  430|       |{(unsigned char*)"Rcedil", {197, 150, 0}},
  431|       |{(unsigned char*)"Rcy", {208, 160, 0}},
  432|       |{(unsigned char*)"Re", {226, 132, 156, 0}},
  433|       |{(unsigned char*)"ReverseElement", {226, 136, 139, 0}},
  434|       |{(unsigned char*)"ReverseEquilibrium", {226, 135, 139, 0}},
  435|       |{(unsigned char*)"ReverseUpEquilibrium", {226, 165, 175, 0}},
  436|       |{(unsigned char*)"Rfr", {226, 132, 156, 0}},
  437|       |{(unsigned char*)"Rho", {206, 161, 0}},
  438|       |{(unsigned char*)"RightAngleBracket", {226, 159, 169, 0}},
  439|       |{(unsigned char*)"RightArrow", {226, 134, 146, 0}},
  440|       |{(unsigned char*)"RightArrowBar", {226, 135, 165, 0}},
  441|       |{(unsigned char*)"RightArrowLeftArrow", {226, 135, 132, 0}},
  442|       |{(unsigned char*)"RightCeiling", {226, 140, 137, 0}},
  443|       |{(unsigned char*)"RightDoubleBracket", {226, 159, 167, 0}},
  444|       |{(unsigned char*)"RightDownTeeVector", {226, 165, 157, 0}},
  445|       |{(unsigned char*)"RightDownVector", {226, 135, 130, 0}},
  446|       |{(unsigned char*)"RightDownVectorBar", {226, 165, 149, 0}},
  447|       |{(unsigned char*)"RightFloor", {226, 140, 139, 0}},
  448|       |{(unsigned char*)"RightTee", {226, 138, 162, 0}},
  449|       |{(unsigned char*)"RightTeeArrow", {226, 134, 166, 0}},
  450|       |{(unsigned char*)"RightTeeVector", {226, 165, 155, 0}},
  451|       |{(unsigned char*)"RightTriangle", {226, 138, 179, 0}},
  452|       |{(unsigned char*)"RightTriangleBar", {226, 167, 144, 0}},
  453|       |{(unsigned char*)"RightTriangleEqual", {226, 138, 181, 0}},
  454|       |{(unsigned char*)"RightUpDownVector", {226, 165, 143, 0}},
  455|       |{(unsigned char*)"RightUpTeeVector", {226, 165, 156, 0}},
  456|       |{(unsigned char*)"RightUpVector", {226, 134, 190, 0}},
  457|       |{(unsigned char*)"RightUpVectorBar", {226, 165, 148, 0}},
  458|       |{(unsigned char*)"RightVector", {226, 135, 128, 0}},
  459|       |{(unsigned char*)"RightVectorBar", {226, 165, 147, 0}},
  460|       |{(unsigned char*)"Rightarrow", {226, 135, 146, 0}},
  461|       |{(unsigned char*)"Ropf", {226, 132, 157, 0}},
  462|       |{(unsigned char*)"RoundImplies", {226, 165, 176, 0}},
  463|       |{(unsigned char*)"Rrightarrow", {226, 135, 155, 0}},
  464|       |{(unsigned char*)"Rscr", {226, 132, 155, 0}},
  465|       |{(unsigned char*)"Rsh", {226, 134, 177, 0}},
  466|       |{(unsigned char*)"RuleDelayed", {226, 167, 180, 0}},
  467|       |{(unsigned char*)"SHCHcy", {208, 169, 0}},
  468|       |{(unsigned char*)"SHcy", {208, 168, 0}},
  469|       |{(unsigned char*)"SOFTcy", {208, 172, 0}},
  470|       |{(unsigned char*)"Sacute", {197, 154, 0}},
  471|       |{(unsigned char*)"Sc", {226, 170, 188, 0}},
  472|       |{(unsigned char*)"Scaron", {197, 160, 0}},
  473|       |{(unsigned char*)"Scedil", {197, 158, 0}},
  474|       |{(unsigned char*)"Scirc", {197, 156, 0}},
  475|       |{(unsigned char*)"Scy", {208, 161, 0}},
  476|       |{(unsigned char*)"Sfr", {240, 157, 148, 150, 0}},
  477|       |{(unsigned char*)"ShortDownArrow", {226, 134, 147, 0}},
  478|       |{(unsigned char*)"ShortLeftArrow", {226, 134, 144, 0}},
  479|       |{(unsigned char*)"ShortRightArrow", {226, 134, 146, 0}},
  480|       |{(unsigned char*)"ShortUpArrow", {226, 134, 145, 0}},
  481|       |{(unsigned char*)"Sigma", {206, 163, 0}},
  482|       |{(unsigned char*)"SmallCircle", {226, 136, 152, 0}},
  483|       |{(unsigned char*)"Sopf", {240, 157, 149, 138, 0}},
  484|       |{(unsigned char*)"Sqrt", {226, 136, 154, 0}},
  485|       |{(unsigned char*)"Square", {226, 150, 161, 0}},
  486|       |{(unsigned char*)"SquareIntersection", {226, 138, 147, 0}},
  487|       |{(unsigned char*)"SquareSubset", {226, 138, 143, 0}},
  488|       |{(unsigned char*)"SquareSubsetEqual", {226, 138, 145, 0}},
  489|       |{(unsigned char*)"SquareSuperset", {226, 138, 144, 0}},
  490|       |{(unsigned char*)"SquareSupersetEqual", {226, 138, 146, 0}},
  491|       |{(unsigned char*)"SquareUnion", {226, 138, 148, 0}},
  492|       |{(unsigned char*)"Sscr", {240, 157, 146, 174, 0}},
  493|       |{(unsigned char*)"Star", {226, 139, 134, 0}},
  494|       |{(unsigned char*)"Sub", {226, 139, 144, 0}},
  495|       |{(unsigned char*)"Subset", {226, 139, 144, 0}},
  496|       |{(unsigned char*)"SubsetEqual", {226, 138, 134, 0}},
  497|       |{(unsigned char*)"Succeeds", {226, 137, 187, 0}},
  498|       |{(unsigned char*)"SucceedsEqual", {226, 170, 176, 0}},
  499|       |{(unsigned char*)"SucceedsSlantEqual", {226, 137, 189, 0}},
  500|       |{(unsigned char*)"SucceedsTilde", {226, 137, 191, 0}},
  501|       |{(unsigned char*)"SuchThat", {226, 136, 139, 0}},
  502|       |{(unsigned char*)"Sum", {226, 136, 145, 0}},
  503|       |{(unsigned char*)"Sup", {226, 139, 145, 0}},
  504|       |{(unsigned char*)"Superset", {226, 138, 131, 0}},
  505|       |{(unsigned char*)"SupersetEqual", {226, 138, 135, 0}},
  506|       |{(unsigned char*)"Supset", {226, 139, 145, 0}},
  507|       |{(unsigned char*)"THORN", {195, 158, 0}},
  508|       |{(unsigned char*)"TRADE", {226, 132, 162, 0}},
  509|       |{(unsigned char*)"TSHcy", {208, 139, 0}},
  510|       |{(unsigned char*)"TScy", {208, 166, 0}},
  511|       |{(unsigned char*)"Tab", {9, 0}},
  512|       |{(unsigned char*)"Tau", {206, 164, 0}},
  513|       |{(unsigned char*)"Tcaron", {197, 164, 0}},
  514|       |{(unsigned char*)"Tcedil", {197, 162, 0}},
  515|       |{(unsigned char*)"Tcy", {208, 162, 0}},
  516|       |{(unsigned char*)"Tfr", {240, 157, 148, 151, 0}},
  517|       |{(unsigned char*)"Therefore", {226, 136, 180, 0}},
  518|       |{(unsigned char*)"Theta", {206, 152, 0}},
  519|       |{(unsigned char*)"ThickSpace", {226, 129, 159, 226, 128, 138, 0}},
  520|       |{(unsigned char*)"ThinSpace", {226, 128, 137, 0}},
  521|       |{(unsigned char*)"Tilde", {226, 136, 188, 0}},
  522|       |{(unsigned char*)"TildeEqual", {226, 137, 131, 0}},
  523|       |{(unsigned char*)"TildeFullEqual", {226, 137, 133, 0}},
  524|       |{(unsigned char*)"TildeTilde", {226, 137, 136, 0}},
  525|       |{(unsigned char*)"Topf", {240, 157, 149, 139, 0}},
  526|       |{(unsigned char*)"TripleDot", {226, 131, 155, 0}},
  527|       |{(unsigned char*)"Tscr", {240, 157, 146, 175, 0}},
  528|       |{(unsigned char*)"Tstrok", {197, 166, 0}},
  529|       |{(unsigned char*)"Uacute", {195, 154, 0}},
  530|       |{(unsigned char*)"Uarr", {226, 134, 159, 0}},
  531|       |{(unsigned char*)"Uarrocir", {226, 165, 137, 0}},
  532|       |{(unsigned char*)"Ubrcy", {208, 142, 0}},
  533|       |{(unsigned char*)"Ubreve", {197, 172, 0}},
  534|       |{(unsigned char*)"Ucirc", {195, 155, 0}},
  535|       |{(unsigned char*)"Ucy", {208, 163, 0}},
  536|       |{(unsigned char*)"Udblac", {197, 176, 0}},
  537|       |{(unsigned char*)"Ufr", {240, 157, 148, 152, 0}},
  538|       |{(unsigned char*)"Ugrave", {195, 153, 0}},
  539|       |{(unsigned char*)"Umacr", {197, 170, 0}},
  540|       |{(unsigned char*)"UnderBar", {95, 0}},
  541|       |{(unsigned char*)"UnderBrace", {226, 143, 159, 0}},
  542|       |{(unsigned char*)"UnderBracket", {226, 142, 181, 0}},
  543|       |{(unsigned char*)"UnderParenthesis", {226, 143, 157, 0}},
  544|       |{(unsigned char*)"Union", {226, 139, 131, 0}},
  545|       |{(unsigned char*)"UnionPlus", {226, 138, 142, 0}},
  546|       |{(unsigned char*)"Uogon", {197, 178, 0}},
  547|       |{(unsigned char*)"Uopf", {240, 157, 149, 140, 0}},
  548|       |{(unsigned char*)"UpArrow", {226, 134, 145, 0}},
  549|       |{(unsigned char*)"UpArrowBar", {226, 164, 146, 0}},
  550|       |{(unsigned char*)"UpArrowDownArrow", {226, 135, 133, 0}},
  551|       |{(unsigned char*)"UpDownArrow", {226, 134, 149, 0}},
  552|       |{(unsigned char*)"UpEquilibrium", {226, 165, 174, 0}},
  553|       |{(unsigned char*)"UpTee", {226, 138, 165, 0}},
  554|       |{(unsigned char*)"UpTeeArrow", {226, 134, 165, 0}},
  555|       |{(unsigned char*)"Uparrow", {226, 135, 145, 0}},
  556|       |{(unsigned char*)"Updownarrow", {226, 135, 149, 0}},
  557|       |{(unsigned char*)"UpperLeftArrow", {226, 134, 150, 0}},
  558|       |{(unsigned char*)"UpperRightArrow", {226, 134, 151, 0}},
  559|       |{(unsigned char*)"Upsi", {207, 146, 0}},
  560|       |{(unsigned char*)"Upsilon", {206, 165, 0}},
  561|       |{(unsigned char*)"Uring", {197, 174, 0}},
  562|       |{(unsigned char*)"Uscr", {240, 157, 146, 176, 0}},
  563|       |{(unsigned char*)"Utilde", {197, 168, 0}},
  564|       |{(unsigned char*)"Uuml", {195, 156, 0}},
  565|       |{(unsigned char*)"VDash", {226, 138, 171, 0}},
  566|       |{(unsigned char*)"Vbar", {226, 171, 171, 0}},
  567|       |{(unsigned char*)"Vcy", {208, 146, 0}},
  568|       |{(unsigned char*)"Vdash", {226, 138, 169, 0}},
  569|       |{(unsigned char*)"Vdashl", {226, 171, 166, 0}},
  570|       |{(unsigned char*)"Vee", {226, 139, 129, 0}},
  571|       |{(unsigned char*)"Verbar", {226, 128, 150, 0}},
  572|       |{(unsigned char*)"Vert", {226, 128, 150, 0}},
  573|       |{(unsigned char*)"VerticalBar", {226, 136, 163, 0}},
  574|       |{(unsigned char*)"VerticalLine", {124, 0}},
  575|       |{(unsigned char*)"VerticalSeparator", {226, 157, 152, 0}},
  576|       |{(unsigned char*)"VerticalTilde", {226, 137, 128, 0}},
  577|       |{(unsigned char*)"VeryThinSpace", {226, 128, 138, 0}},
  578|       |{(unsigned char*)"Vfr", {240, 157, 148, 153, 0}},
  579|       |{(unsigned char*)"Vopf", {240, 157, 149, 141, 0}},
  580|       |{(unsigned char*)"Vscr", {240, 157, 146, 177, 0}},
  581|       |{(unsigned char*)"Vvdash", {226, 138, 170, 0}},
  582|       |{(unsigned char*)"Wcirc", {197, 180, 0}},
  583|       |{(unsigned char*)"Wedge", {226, 139, 128, 0}},
  584|       |{(unsigned char*)"Wfr", {240, 157, 148, 154, 0}},
  585|       |{(unsigned char*)"Wopf", {240, 157, 149, 142, 0}},
  586|       |{(unsigned char*)"Wscr", {240, 157, 146, 178, 0}},
  587|       |{(unsigned char*)"Xfr", {240, 157, 148, 155, 0}},
  588|       |{(unsigned char*)"Xi", {206, 158, 0}},
  589|       |{(unsigned char*)"Xopf", {240, 157, 149, 143, 0}},
  590|       |{(unsigned char*)"Xscr", {240, 157, 146, 179, 0}},
  591|       |{(unsigned char*)"YAcy", {208, 175, 0}},
  592|       |{(unsigned char*)"YIcy", {208, 135, 0}},
  593|       |{(unsigned char*)"YUcy", {208, 174, 0}},
  594|       |{(unsigned char*)"Yacute", {195, 157, 0}},
  595|       |{(unsigned char*)"Ycirc", {197, 182, 0}},
  596|       |{(unsigned char*)"Ycy", {208, 171, 0}},
  597|       |{(unsigned char*)"Yfr", {240, 157, 148, 156, 0}},
  598|       |{(unsigned char*)"Yopf", {240, 157, 149, 144, 0}},
  599|       |{(unsigned char*)"Yscr", {240, 157, 146, 180, 0}},
  600|       |{(unsigned char*)"Yuml", {197, 184, 0}},
  601|       |{(unsigned char*)"ZHcy", {208, 150, 0}},
  602|       |{(unsigned char*)"Zacute", {197, 185, 0}},
  603|       |{(unsigned char*)"Zcaron", {197, 189, 0}},
  604|       |{(unsigned char*)"Zcy", {208, 151, 0}},
  605|       |{(unsigned char*)"Zdot", {197, 187, 0}},
  606|       |{(unsigned char*)"ZeroWidthSpace", {226, 128, 139, 0}},
  607|       |{(unsigned char*)"Zeta", {206, 150, 0}},
  608|       |{(unsigned char*)"Zfr", {226, 132, 168, 0}},
  609|       |{(unsigned char*)"Zopf", {226, 132, 164, 0}},
  610|       |{(unsigned char*)"Zscr", {240, 157, 146, 181, 0}},
  611|       |{(unsigned char*)"aacute", {195, 161, 0}},
  612|       |{(unsigned char*)"abreve", {196, 131, 0}},
  613|       |{(unsigned char*)"ac", {226, 136, 190, 0}},
  614|       |{(unsigned char*)"acE", {226, 136, 190, 204, 179, 0}},
  615|       |{(unsigned char*)"acd", {226, 136, 191, 0}},
  616|       |{(unsigned char*)"acirc", {195, 162, 0}},
  617|       |{(unsigned char*)"acute", {194, 180, 0}},
  618|       |{(unsigned char*)"acy", {208, 176, 0}},
  619|       |{(unsigned char*)"aelig", {195, 166, 0}},
  620|       |{(unsigned char*)"af", {226, 129, 161, 0}},
  621|       |{(unsigned char*)"afr", {240, 157, 148, 158, 0}},
  622|       |{(unsigned char*)"agrave", {195, 160, 0}},
  623|       |{(unsigned char*)"alefsym", {226, 132, 181, 0}},
  624|       |{(unsigned char*)"aleph", {226, 132, 181, 0}},
  625|       |{(unsigned char*)"alpha", {206, 177, 0}},
  626|       |{(unsigned char*)"amacr", {196, 129, 0}},
  627|       |{(unsigned char*)"amalg", {226, 168, 191, 0}},
  628|       |{(unsigned char*)"amp", {38, 0}},
  629|       |{(unsigned char*)"and", {226, 136, 167, 0}},
  630|       |{(unsigned char*)"andand", {226, 169, 149, 0}},
  631|       |{(unsigned char*)"andd", {226, 169, 156, 0}},
  632|       |{(unsigned char*)"andslope", {226, 169, 152, 0}},
  633|       |{(unsigned char*)"andv", {226, 169, 154, 0}},
  634|       |{(unsigned char*)"ang", {226, 136, 160, 0}},
  635|       |{(unsigned char*)"ange", {226, 166, 164, 0}},
  636|       |{(unsigned char*)"angle", {226, 136, 160, 0}},
  637|       |{(unsigned char*)"angmsd", {226, 136, 161, 0}},
  638|       |{(unsigned char*)"angmsdaa", {226, 166, 168, 0}},
  639|       |{(unsigned char*)"angmsdab", {226, 166, 169, 0}},
  640|       |{(unsigned char*)"angmsdac", {226, 166, 170, 0}},
  641|       |{(unsigned char*)"angmsdad", {226, 166, 171, 0}},
  642|       |{(unsigned char*)"angmsdae", {226, 166, 172, 0}},
  643|       |{(unsigned char*)"angmsdaf", {226, 166, 173, 0}},
  644|       |{(unsigned char*)"angmsdag", {226, 166, 174, 0}},
  645|       |{(unsigned char*)"angmsdah", {226, 166, 175, 0}},
  646|       |{(unsigned char*)"angrt", {226, 136, 159, 0}},
  647|       |{(unsigned char*)"angrtvb", {226, 138, 190, 0}},
  648|       |{(unsigned char*)"angrtvbd", {226, 166, 157, 0}},
  649|       |{(unsigned char*)"angsph", {226, 136, 162, 0}},
  650|       |{(unsigned char*)"angst", {195, 133, 0}},
  651|       |{(unsigned char*)"angzarr", {226, 141, 188, 0}},
  652|       |{(unsigned char*)"aogon", {196, 133, 0}},
  653|       |{(unsigned char*)"aopf", {240, 157, 149, 146, 0}},
  654|       |{(unsigned char*)"ap", {226, 137, 136, 0}},
  655|       |{(unsigned char*)"apE", {226, 169, 176, 0}},
  656|       |{(unsigned char*)"apacir", {226, 169, 175, 0}},
  657|       |{(unsigned char*)"ape", {226, 137, 138, 0}},
  658|       |{(unsigned char*)"apid", {226, 137, 139, 0}},
  659|       |{(unsigned char*)"apos", {39, 0}},
  660|       |{(unsigned char*)"approx", {226, 137, 136, 0}},
  661|       |{(unsigned char*)"approxeq", {226, 137, 138, 0}},
  662|       |{(unsigned char*)"aring", {195, 165, 0}},
  663|       |{(unsigned char*)"ascr", {240, 157, 146, 182, 0}},
  664|       |{(unsigned char*)"ast", {42, 0}},
  665|       |{(unsigned char*)"asymp", {226, 137, 136, 0}},
  666|       |{(unsigned char*)"asympeq", {226, 137, 141, 0}},
  667|       |{(unsigned char*)"atilde", {195, 163, 0}},
  668|       |{(unsigned char*)"auml", {195, 164, 0}},
  669|       |{(unsigned char*)"awconint", {226, 136, 179, 0}},
  670|       |{(unsigned char*)"awint", {226, 168, 145, 0}},
  671|       |{(unsigned char*)"bNot", {226, 171, 173, 0}},
  672|       |{(unsigned char*)"backcong", {226, 137, 140, 0}},
  673|       |{(unsigned char*)"backepsilon", {207, 182, 0}},
  674|       |{(unsigned char*)"backprime", {226, 128, 181, 0}},
  675|       |{(unsigned char*)"backsim", {226, 136, 189, 0}},
  676|       |{(unsigned char*)"backsimeq", {226, 139, 141, 0}},
  677|       |{(unsigned char*)"barvee", {226, 138, 189, 0}},
  678|       |{(unsigned char*)"barwed", {226, 140, 133, 0}},
  679|       |{(unsigned char*)"barwedge", {226, 140, 133, 0}},
  680|       |{(unsigned char*)"bbrk", {226, 142, 181, 0}},
  681|       |{(unsigned char*)"bbrktbrk", {226, 142, 182, 0}},
  682|       |{(unsigned char*)"bcong", {226, 137, 140, 0}},
  683|       |{(unsigned char*)"bcy", {208, 177, 0}},
  684|       |{(unsigned char*)"bdquo", {226, 128, 158, 0}},
  685|       |{(unsigned char*)"becaus", {226, 136, 181, 0}},
  686|       |{(unsigned char*)"because", {226, 136, 181, 0}},
  687|       |{(unsigned char*)"bemptyv", {226, 166, 176, 0}},
  688|       |{(unsigned char*)"bepsi", {207, 182, 0}},
  689|       |{(unsigned char*)"bernou", {226, 132, 172, 0}},
  690|       |{(unsigned char*)"beta", {206, 178, 0}},
  691|       |{(unsigned char*)"beth", {226, 132, 182, 0}},
  692|       |{(unsigned char*)"between", {226, 137, 172, 0}},
  693|       |{(unsigned char*)"bfr", {240, 157, 148, 159, 0}},
  694|       |{(unsigned char*)"bigcap", {226, 139, 130, 0}},
  695|       |{(unsigned char*)"bigcirc", {226, 151, 175, 0}},
  696|       |{(unsigned char*)"bigcup", {226, 139, 131, 0}},
  697|       |{(unsigned char*)"bigodot", {226, 168, 128, 0}},
  698|       |{(unsigned char*)"bigoplus", {226, 168, 129, 0}},
  699|       |{(unsigned char*)"bigotimes", {226, 168, 130, 0}},
  700|       |{(unsigned char*)"bigsqcup", {226, 168, 134, 0}},
  701|       |{(unsigned char*)"bigstar", {226, 152, 133, 0}},
  702|       |{(unsigned char*)"bigtriangledown", {226, 150, 189, 0}},
  703|       |{(unsigned char*)"bigtriangleup", {226, 150, 179, 0}},
  704|       |{(unsigned char*)"biguplus", {226, 168, 132, 0}},
  705|       |{(unsigned char*)"bigvee", {226, 139, 129, 0}},
  706|       |{(unsigned char*)"bigwedge", {226, 139, 128, 0}},
  707|       |{(unsigned char*)"bkarow", {226, 164, 141, 0}},
  708|       |{(unsigned char*)"blacklozenge", {226, 167, 171, 0}},
  709|       |{(unsigned char*)"blacksquare", {226, 150, 170, 0}},
  710|       |{(unsigned char*)"blacktriangle", {226, 150, 180, 0}},
  711|       |{(unsigned char*)"blacktriangledown", {226, 150, 190, 0}},
  712|       |{(unsigned char*)"blacktriangleleft", {226, 151, 130, 0}},
  713|       |{(unsigned char*)"blacktriangleright", {226, 150, 184, 0}},
  714|       |{(unsigned char*)"blank", {226, 144, 163, 0}},
  715|       |{(unsigned char*)"blk12", {226, 150, 146, 0}},
  716|       |{(unsigned char*)"blk14", {226, 150, 145, 0}},
  717|       |{(unsigned char*)"blk34", {226, 150, 147, 0}},
  718|       |{(unsigned char*)"block", {226, 150, 136, 0}},
  719|       |{(unsigned char*)"bne", {61, 226, 131, 165, 0}},
  720|       |{(unsigned char*)"bnequiv", {226, 137, 161, 226, 131, 165, 0}},
  721|       |{(unsigned char*)"bnot", {226, 140, 144, 0}},
  722|       |{(unsigned char*)"bopf", {240, 157, 149, 147, 0}},
  723|       |{(unsigned char*)"bot", {226, 138, 165, 0}},
  724|       |{(unsigned char*)"bottom", {226, 138, 165, 0}},
  725|       |{(unsigned char*)"bowtie", {226, 139, 136, 0}},
  726|       |{(unsigned char*)"boxDL", {226, 149, 151, 0}},
  727|       |{(unsigned char*)"boxDR", {226, 149, 148, 0}},
  728|       |{(unsigned char*)"boxDl", {226, 149, 150, 0}},
  729|       |{(unsigned char*)"boxDr", {226, 149, 147, 0}},
  730|       |{(unsigned char*)"boxH", {226, 149, 144, 0}},
  731|       |{(unsigned char*)"boxHD", {226, 149, 166, 0}},
  732|       |{(unsigned char*)"boxHU", {226, 149, 169, 0}},
  733|       |{(unsigned char*)"boxHd", {226, 149, 164, 0}},
  734|       |{(unsigned char*)"boxHu", {226, 149, 167, 0}},
  735|       |{(unsigned char*)"boxUL", {226, 149, 157, 0}},
  736|       |{(unsigned char*)"boxUR", {226, 149, 154, 0}},
  737|       |{(unsigned char*)"boxUl", {226, 149, 156, 0}},
  738|       |{(unsigned char*)"boxUr", {226, 149, 153, 0}},
  739|       |{(unsigned char*)"boxV", {226, 149, 145, 0}},
  740|       |{(unsigned char*)"boxVH", {226, 149, 172, 0}},
  741|       |{(unsigned char*)"boxVL", {226, 149, 163, 0}},
  742|       |{(unsigned char*)"boxVR", {226, 149, 160, 0}},
  743|       |{(unsigned char*)"boxVh", {226, 149, 171, 0}},
  744|       |{(unsigned char*)"boxVl", {226, 149, 162, 0}},
  745|       |{(unsigned char*)"boxVr", {226, 149, 159, 0}},
  746|       |{(unsigned char*)"boxbox", {226, 167, 137, 0}},
  747|       |{(unsigned char*)"boxdL", {226, 149, 149, 0}},
  748|       |{(unsigned char*)"boxdR", {226, 149, 146, 0}},
  749|       |{(unsigned char*)"boxdl", {226, 148, 144, 0}},
  750|       |{(unsigned char*)"boxdr", {226, 148, 140, 0}},
  751|       |{(unsigned char*)"boxh", {226, 148, 128, 0}},
  752|       |{(unsigned char*)"boxhD", {226, 149, 165, 0}},
  753|       |{(unsigned char*)"boxhU", {226, 149, 168, 0}},
  754|       |{(unsigned char*)"boxhd", {226, 148, 172, 0}},
  755|       |{(unsigned char*)"boxhu", {226, 148, 180, 0}},
  756|       |{(unsigned char*)"boxminus", {226, 138, 159, 0}},
  757|       |{(unsigned char*)"boxplus", {226, 138, 158, 0}},
  758|       |{(unsigned char*)"boxtimes", {226, 138, 160, 0}},
  759|       |{(unsigned char*)"boxuL", {226, 149, 155, 0}},
  760|       |{(unsigned char*)"boxuR", {226, 149, 152, 0}},
  761|       |{(unsigned char*)"boxul", {226, 148, 152, 0}},
  762|       |{(unsigned char*)"boxur", {226, 148, 148, 0}},
  763|       |{(unsigned char*)"boxv", {226, 148, 130, 0}},
  764|       |{(unsigned char*)"boxvH", {226, 149, 170, 0}},
  765|       |{(unsigned char*)"boxvL", {226, 149, 161, 0}},
  766|       |{(unsigned char*)"boxvR", {226, 149, 158, 0}},
  767|       |{(unsigned char*)"boxvh", {226, 148, 188, 0}},
  768|       |{(unsigned char*)"boxvl", {226, 148, 164, 0}},
  769|       |{(unsigned char*)"boxvr", {226, 148, 156, 0}},
  770|       |{(unsigned char*)"bprime", {226, 128, 181, 0}},
  771|       |{(unsigned char*)"breve", {203, 152, 0}},
  772|       |{(unsigned char*)"brvbar", {194, 166, 0}},
  773|       |{(unsigned char*)"bscr", {240, 157, 146, 183, 0}},
  774|       |{(unsigned char*)"bsemi", {226, 129, 143, 0}},
  775|       |{(unsigned char*)"bsim", {226, 136, 189, 0}},
  776|       |{(unsigned char*)"bsime", {226, 139, 141, 0}},
  777|       |{(unsigned char*)"bsol", {92, 0}},
  778|       |{(unsigned char*)"bsolb", {226, 167, 133, 0}},
  779|       |{(unsigned char*)"bsolhsub", {226, 159, 136, 0}},
  780|       |{(unsigned char*)"bull", {226, 128, 162, 0}},
  781|       |{(unsigned char*)"bullet", {226, 128, 162, 0}},
  782|       |{(unsigned char*)"bump", {226, 137, 142, 0}},
  783|       |{(unsigned char*)"bumpE", {226, 170, 174, 0}},
  784|       |{(unsigned char*)"bumpe", {226, 137, 143, 0}},
  785|       |{(unsigned char*)"bumpeq", {226, 137, 143, 0}},
  786|       |{(unsigned char*)"cacute", {196, 135, 0}},
  787|       |{(unsigned char*)"cap", {226, 136, 169, 0}},
  788|       |{(unsigned char*)"capand", {226, 169, 132, 0}},
  789|       |{(unsigned char*)"capbrcup", {226, 169, 137, 0}},
  790|       |{(unsigned char*)"capcap", {226, 169, 139, 0}},
  791|       |{(unsigned char*)"capcup", {226, 169, 135, 0}},
  792|       |{(unsigned char*)"capdot", {226, 169, 128, 0}},
  793|       |{(unsigned char*)"caps", {226, 136, 169, 239, 184, 128, 0}},
  794|       |{(unsigned char*)"caret", {226, 129, 129, 0}},
  795|       |{(unsigned char*)"caron", {203, 135, 0}},
  796|       |{(unsigned char*)"ccaps", {226, 169, 141, 0}},
  797|       |{(unsigned char*)"ccaron", {196, 141, 0}},
  798|       |{(unsigned char*)"ccedil", {195, 167, 0}},
  799|       |{(unsigned char*)"ccirc", {196, 137, 0}},
  800|       |{(unsigned char*)"ccups", {226, 169, 140, 0}},
  801|       |{(unsigned char*)"ccupssm", {226, 169, 144, 0}},
  802|       |{(unsigned char*)"cdot", {196, 139, 0}},
  803|       |{(unsigned char*)"cedil", {194, 184, 0}},
  804|       |{(unsigned char*)"cemptyv", {226, 166, 178, 0}},
  805|       |{(unsigned char*)"cent", {194, 162, 0}},
  806|       |{(unsigned char*)"centerdot", {194, 183, 0}},
  807|       |{(unsigned char*)"cfr", {240, 157, 148, 160, 0}},
  808|       |{(unsigned char*)"chcy", {209, 135, 0}},
  809|       |{(unsigned char*)"check", {226, 156, 147, 0}},
  810|       |{(unsigned char*)"checkmark", {226, 156, 147, 0}},
  811|       |{(unsigned char*)"chi", {207, 135, 0}},
  812|       |{(unsigned char*)"cir", {226, 151, 139, 0}},
  813|       |{(unsigned char*)"cirE", {226, 167, 131, 0}},
  814|       |{(unsigned char*)"circ", {203, 134, 0}},
  815|       |{(unsigned char*)"circeq", {226, 137, 151, 0}},
  816|       |{(unsigned char*)"circlearrowleft", {226, 134, 186, 0}},
  817|       |{(unsigned char*)"circlearrowright", {226, 134, 187, 0}},
  818|       |{(unsigned char*)"circledR", {194, 174, 0}},
  819|       |{(unsigned char*)"circledS", {226, 147, 136, 0}},
  820|       |{(unsigned char*)"circledast", {226, 138, 155, 0}},
  821|       |{(unsigned char*)"circledcirc", {226, 138, 154, 0}},
  822|       |{(unsigned char*)"circleddash", {226, 138, 157, 0}},
  823|       |{(unsigned char*)"cire", {226, 137, 151, 0}},
  824|       |{(unsigned char*)"cirfnint", {226, 168, 144, 0}},
  825|       |{(unsigned char*)"cirmid", {226, 171, 175, 0}},
  826|       |{(unsigned char*)"cirscir", {226, 167, 130, 0}},
  827|       |{(unsigned char*)"clubs", {226, 153, 163, 0}},
  828|       |{(unsigned char*)"clubsuit", {226, 153, 163, 0}},
  829|       |{(unsigned char*)"colon", {58, 0}},
  830|       |{(unsigned char*)"colone", {226, 137, 148, 0}},
  831|       |{(unsigned char*)"coloneq", {226, 137, 148, 0}},
  832|       |{(unsigned char*)"comma", {44, 0}},
  833|       |{(unsigned char*)"commat", {64, 0}},
  834|       |{(unsigned char*)"comp", {226, 136, 129, 0}},
  835|       |{(unsigned char*)"compfn", {226, 136, 152, 0}},
  836|       |{(unsigned char*)"complement", {226, 136, 129, 0}},
  837|       |{(unsigned char*)"complexes", {226, 132, 130, 0}},
  838|       |{(unsigned char*)"cong", {226, 137, 133, 0}},
  839|       |{(unsigned char*)"congdot", {226, 169, 173, 0}},
  840|       |{(unsigned char*)"conint", {226, 136, 174, 0}},
  841|       |{(unsigned char*)"copf", {240, 157, 149, 148, 0}},
  842|       |{(unsigned char*)"coprod", {226, 136, 144, 0}},
  843|       |{(unsigned char*)"copy", {194, 169, 0}},
  844|       |{(unsigned char*)"copysr", {226, 132, 151, 0}},
  845|       |{(unsigned char*)"crarr", {226, 134, 181, 0}},
  846|       |{(unsigned char*)"cross", {226, 156, 151, 0}},
  847|       |{(unsigned char*)"cscr", {240, 157, 146, 184, 0}},
  848|       |{(unsigned char*)"csub", {226, 171, 143, 0}},
  849|       |{(unsigned char*)"csube", {226, 171, 145, 0}},
  850|       |{(unsigned char*)"csup", {226, 171, 144, 0}},
  851|       |{(unsigned char*)"csupe", {226, 171, 146, 0}},
  852|       |{(unsigned char*)"ctdot", {226, 139, 175, 0}},
  853|       |{(unsigned char*)"cudarrl", {226, 164, 184, 0}},
  854|       |{(unsigned char*)"cudarrr", {226, 164, 181, 0}},
  855|       |{(unsigned char*)"cuepr", {226, 139, 158, 0}},
  856|       |{(unsigned char*)"cuesc", {226, 139, 159, 0}},
  857|       |{(unsigned char*)"cularr", {226, 134, 182, 0}},
  858|       |{(unsigned char*)"cularrp", {226, 164, 189, 0}},
  859|       |{(unsigned char*)"cup", {226, 136, 170, 0}},
  860|       |{(unsigned char*)"cupbrcap", {226, 169, 136, 0}},
  861|       |{(unsigned char*)"cupcap", {226, 169, 134, 0}},
  862|       |{(unsigned char*)"cupcup", {226, 169, 138, 0}},
  863|       |{(unsigned char*)"cupdot", {226, 138, 141, 0}},
  864|       |{(unsigned char*)"cupor", {226, 169, 133, 0}},
  865|       |{(unsigned char*)"cups", {226, 136, 170, 239, 184, 128, 0}},
  866|       |{(unsigned char*)"curarr", {226, 134, 183, 0}},
  867|       |{(unsigned char*)"curarrm", {226, 164, 188, 0}},
  868|       |{(unsigned char*)"curlyeqprec", {226, 139, 158, 0}},
  869|       |{(unsigned char*)"curlyeqsucc", {226, 139, 159, 0}},
  870|       |{(unsigned char*)"curlyvee", {226, 139, 142, 0}},
  871|       |{(unsigned char*)"curlywedge", {226, 139, 143, 0}},
  872|       |{(unsigned char*)"curren", {194, 164, 0}},
  873|       |{(unsigned char*)"curvearrowleft", {226, 134, 182, 0}},
  874|       |{(unsigned char*)"curvearrowright", {226, 134, 183, 0}},
  875|       |{(unsigned char*)"cuvee", {226, 139, 142, 0}},
  876|       |{(unsigned char*)"cuwed", {226, 139, 143, 0}},
  877|       |{(unsigned char*)"cwconint", {226, 136, 178, 0}},
  878|       |{(unsigned char*)"cwint", {226, 136, 177, 0}},
  879|       |{(unsigned char*)"cylcty", {226, 140, 173, 0}},
  880|       |{(unsigned char*)"dArr", {226, 135, 147, 0}},
  881|       |{(unsigned char*)"dHar", {226, 165, 165, 0}},
  882|       |{(unsigned char*)"dagger", {226, 128, 160, 0}},
  883|       |{(unsigned char*)"daleth", {226, 132, 184, 0}},
  884|       |{(unsigned char*)"darr", {226, 134, 147, 0}},
  885|       |{(unsigned char*)"dash", {226, 128, 144, 0}},
  886|       |{(unsigned char*)"dashv", {226, 138, 163, 0}},
  887|       |{(unsigned char*)"dbkarow", {226, 164, 143, 0}},
  888|       |{(unsigned char*)"dblac", {203, 157, 0}},
  889|       |{(unsigned char*)"dcaron", {196, 143, 0}},
  890|       |{(unsigned char*)"dcy", {208, 180, 0}},
  891|       |{(unsigned char*)"dd", {226, 133, 134, 0}},
  892|       |{(unsigned char*)"ddagger", {226, 128, 161, 0}},
  893|       |{(unsigned char*)"ddarr", {226, 135, 138, 0}},
  894|       |{(unsigned char*)"ddotseq", {226, 169, 183, 0}},
  895|       |{(unsigned char*)"deg", {194, 176, 0}},
  896|       |{(unsigned char*)"delta", {206, 180, 0}},
  897|       |{(unsigned char*)"demptyv", {226, 166, 177, 0}},
  898|       |{(unsigned char*)"dfisht", {226, 165, 191, 0}},
  899|       |{(unsigned char*)"dfr", {240, 157, 148, 161, 0}},
  900|       |{(unsigned char*)"dharl", {226, 135, 131, 0}},
  901|       |{(unsigned char*)"dharr", {226, 135, 130, 0}},
  902|       |{(unsigned char*)"diam", {226, 139, 132, 0}},
  903|       |{(unsigned char*)"diamond", {226, 139, 132, 0}},
  904|       |{(unsigned char*)"diamondsuit", {226, 153, 166, 0}},
  905|       |{(unsigned char*)"diams", {226, 153, 166, 0}},
  906|       |{(unsigned char*)"die", {194, 168, 0}},
  907|       |{(unsigned char*)"digamma", {207, 157, 0}},
  908|       |{(unsigned char*)"disin", {226, 139, 178, 0}},
  909|       |{(unsigned char*)"div", {195, 183, 0}},
  910|       |{(unsigned char*)"divide", {195, 183, 0}},
  911|       |{(unsigned char*)"divideontimes", {226, 139, 135, 0}},
  912|       |{(unsigned char*)"divonx", {226, 139, 135, 0}},
  913|       |{(unsigned char*)"djcy", {209, 146, 0}},
  914|       |{(unsigned char*)"dlcorn", {226, 140, 158, 0}},
  915|       |{(unsigned char*)"dlcrop", {226, 140, 141, 0}},
  916|       |{(unsigned char*)"dollar", {36, 0}},
  917|       |{(unsigned char*)"dopf", {240, 157, 149, 149, 0}},
  918|       |{(unsigned char*)"dot", {203, 153, 0}},
  919|       |{(unsigned char*)"doteq", {226, 137, 144, 0}},
  920|       |{(unsigned char*)"doteqdot", {226, 137, 145, 0}},
  921|       |{(unsigned char*)"dotminus", {226, 136, 184, 0}},
  922|       |{(unsigned char*)"dotplus", {226, 136, 148, 0}},
  923|       |{(unsigned char*)"dotsquare", {226, 138, 161, 0}},
  924|       |{(unsigned char*)"doublebarwedge", {226, 140, 134, 0}},
  925|       |{(unsigned char*)"downarrow", {226, 134, 147, 0}},
  926|       |{(unsigned char*)"downdownarrows", {226, 135, 138, 0}},
  927|       |{(unsigned char*)"downharpoonleft", {226, 135, 131, 0}},
  928|       |{(unsigned char*)"downharpoonright", {226, 135, 130, 0}},
  929|       |{(unsigned char*)"drbkarow", {226, 164, 144, 0}},
  930|       |{(unsigned char*)"drcorn", {226, 140, 159, 0}},
  931|       |{(unsigned char*)"drcrop", {226, 140, 140, 0}},
  932|       |{(unsigned char*)"dscr", {240, 157, 146, 185, 0}},
  933|       |{(unsigned char*)"dscy", {209, 149, 0}},
  934|       |{(unsigned char*)"dsol", {226, 167, 182, 0}},
  935|       |{(unsigned char*)"dstrok", {196, 145, 0}},
  936|       |{(unsigned char*)"dtdot", {226, 139, 177, 0}},
  937|       |{(unsigned char*)"dtri", {226, 150, 191, 0}},
  938|       |{(unsigned char*)"dtrif", {226, 150, 190, 0}},
  939|       |{(unsigned char*)"duarr", {226, 135, 181, 0}},
  940|       |{(unsigned char*)"duhar", {226, 165, 175, 0}},
  941|       |{(unsigned char*)"dwangle", {226, 166, 166, 0}},
  942|       |{(unsigned char*)"dzcy", {209, 159, 0}},
  943|       |{(unsigned char*)"dzigrarr", {226, 159, 191, 0}},
  944|       |{(unsigned char*)"eDDot", {226, 169, 183, 0}},
  945|       |{(unsigned char*)"eDot", {226, 137, 145, 0}},
  946|       |{(unsigned char*)"eacute", {195, 169, 0}},
  947|       |{(unsigned char*)"easter", {226, 169, 174, 0}},
  948|       |{(unsigned char*)"ecaron", {196, 155, 0}},
  949|       |{(unsigned char*)"ecir", {226, 137, 150, 0}},
  950|       |{(unsigned char*)"ecirc", {195, 170, 0}},
  951|       |{(unsigned char*)"ecolon", {226, 137, 149, 0}},
  952|       |{(unsigned char*)"ecy", {209, 141, 0}},
  953|       |{(unsigned char*)"edot", {196, 151, 0}},
  954|       |{(unsigned char*)"ee", {226, 133, 135, 0}},
  955|       |{(unsigned char*)"efDot", {226, 137, 146, 0}},
  956|       |{(unsigned char*)"efr", {240, 157, 148, 162, 0}},
  957|       |{(unsigned char*)"eg", {226, 170, 154, 0}},
  958|       |{(unsigned char*)"egrave", {195, 168, 0}},
  959|       |{(unsigned char*)"egs", {226, 170, 150, 0}},
  960|       |{(unsigned char*)"egsdot", {226, 170, 152, 0}},
  961|       |{(unsigned char*)"el", {226, 170, 153, 0}},
  962|       |{(unsigned char*)"elinters", {226, 143, 167, 0}},
  963|       |{(unsigned char*)"ell", {226, 132, 147, 0}},
  964|       |{(unsigned char*)"els", {226, 170, 149, 0}},
  965|       |{(unsigned char*)"elsdot", {226, 170, 151, 0}},
  966|       |{(unsigned char*)"emacr", {196, 147, 0}},
  967|       |{(unsigned char*)"empty", {226, 136, 133, 0}},
  968|       |{(unsigned char*)"emptyset", {226, 136, 133, 0}},
  969|       |{(unsigned char*)"emptyv", {226, 136, 133, 0}},
  970|       |{(unsigned char*)"emsp", {226, 128, 131, 0}},
  971|       |{(unsigned char*)"emsp13", {226, 128, 132, 0}},
  972|       |{(unsigned char*)"emsp14", {226, 128, 133, 0}},
  973|       |{(unsigned char*)"eng", {197, 139, 0}},
  974|       |{(unsigned char*)"ensp", {226, 128, 130, 0}},
  975|       |{(unsigned char*)"eogon", {196, 153, 0}},
  976|       |{(unsigned char*)"eopf", {240, 157, 149, 150, 0}},
  977|       |{(unsigned char*)"epar", {226, 139, 149, 0}},
  978|       |{(unsigned char*)"eparsl", {226, 167, 163, 0}},
  979|       |{(unsigned char*)"eplus", {226, 169, 177, 0}},
  980|       |{(unsigned char*)"epsi", {206, 181, 0}},
  981|       |{(unsigned char*)"epsilon", {206, 181, 0}},
  982|       |{(unsigned char*)"epsiv", {207, 181, 0}},
  983|       |{(unsigned char*)"eqcirc", {226, 137, 150, 0}},
  984|       |{(unsigned char*)"eqcolon", {226, 137, 149, 0}},
  985|       |{(unsigned char*)"eqsim", {226, 137, 130, 0}},
  986|       |{(unsigned char*)"eqslantgtr", {226, 170, 150, 0}},
  987|       |{(unsigned char*)"eqslantless", {226, 170, 149, 0}},
  988|       |{(unsigned char*)"equals", {61, 0}},
  989|       |{(unsigned char*)"equest", {226, 137, 159, 0}},
  990|       |{(unsigned char*)"equiv", {226, 137, 161, 0}},
  991|       |{(unsigned char*)"equivDD", {226, 169, 184, 0}},
  992|       |{(unsigned char*)"eqvparsl", {226, 167, 165, 0}},
  993|       |{(unsigned char*)"erDot", {226, 137, 147, 0}},
  994|       |{(unsigned char*)"erarr", {226, 165, 177, 0}},
  995|       |{(unsigned char*)"escr", {226, 132, 175, 0}},
  996|       |{(unsigned char*)"esdot", {226, 137, 144, 0}},
  997|       |{(unsigned char*)"esim", {226, 137, 130, 0}},
  998|       |{(unsigned char*)"eta", {206, 183, 0}},
  999|       |{(unsigned char*)"eth", {195, 176, 0}},
 1000|       |{(unsigned char*)"euml", {195, 171, 0}},
 1001|       |{(unsigned char*)"euro", {226, 130, 172, 0}},
 1002|       |{(unsigned char*)"excl", {33, 0}},
 1003|       |{(unsigned char*)"exist", {226, 136, 131, 0}},
 1004|       |{(unsigned char*)"expectation", {226, 132, 176, 0}},
 1005|       |{(unsigned char*)"exponentiale", {226, 133, 135, 0}},
 1006|       |{(unsigned char*)"fallingdotseq", {226, 137, 146, 0}},
 1007|       |{(unsigned char*)"fcy", {209, 132, 0}},
 1008|       |{(unsigned char*)"female", {226, 153, 128, 0}},
 1009|       |{(unsigned char*)"ffilig", {239, 172, 131, 0}},
 1010|       |{(unsigned char*)"fflig", {239, 172, 128, 0}},
 1011|       |{(unsigned char*)"ffllig", {239, 172, 132, 0}},
 1012|       |{(unsigned char*)"ffr", {240, 157, 148, 163, 0}},
 1013|       |{(unsigned char*)"filig", {239, 172, 129, 0}},
 1014|       |{(unsigned char*)"fjlig", {102, 106, 0}},
 1015|       |{(unsigned char*)"flat", {226, 153, 173, 0}},
 1016|       |{(unsigned char*)"fllig", {239, 172, 130, 0}},
 1017|       |{(unsigned char*)"fltns", {226, 150, 177, 0}},
 1018|       |{(unsigned char*)"fnof", {198, 146, 0}},
 1019|       |{(unsigned char*)"fopf", {240, 157, 149, 151, 0}},
 1020|       |{(unsigned char*)"forall", {226, 136, 128, 0}},
 1021|       |{(unsigned char*)"fork", {226, 139, 148, 0}},
 1022|       |{(unsigned char*)"forkv", {226, 171, 153, 0}},
 1023|       |{(unsigned char*)"fpartint", {226, 168, 141, 0}},
 1024|       |{(unsigned char*)"frac12", {194, 189, 0}},
 1025|       |{(unsigned char*)"frac13", {226, 133, 147, 0}},
 1026|       |{(unsigned char*)"frac14", {194, 188, 0}},
 1027|       |{(unsigned char*)"frac15", {226, 133, 149, 0}},
 1028|       |{(unsigned char*)"frac16", {226, 133, 153, 0}},
 1029|       |{(unsigned char*)"frac18", {226, 133, 155, 0}},
 1030|       |{(unsigned char*)"frac23", {226, 133, 148, 0}},
 1031|       |{(unsigned char*)"frac25", {226, 133, 150, 0}},
 1032|       |{(unsigned char*)"frac34", {194, 190, 0}},
 1033|       |{(unsigned char*)"frac35", {226, 133, 151, 0}},
 1034|       |{(unsigned char*)"frac38", {226, 133, 156, 0}},
 1035|       |{(unsigned char*)"frac45", {226, 133, 152, 0}},
 1036|       |{(unsigned char*)"frac56", {226, 133, 154, 0}},
 1037|       |{(unsigned char*)"frac58", {226, 133, 157, 0}},
 1038|       |{(unsigned char*)"frac78", {226, 133, 158, 0}},
 1039|       |{(unsigned char*)"frasl", {226, 129, 132, 0}},
 1040|       |{(unsigned char*)"frown", {226, 140, 162, 0}},
 1041|       |{(unsigned char*)"fscr", {240, 157, 146, 187, 0}},
 1042|       |{(unsigned char*)"gE", {226, 137, 167, 0}},
 1043|       |{(unsigned char*)"gEl", {226, 170, 140, 0}},
 1044|       |{(unsigned char*)"gacute", {199, 181, 0}},
 1045|       |{(unsigned char*)"gamma", {206, 179, 0}},
 1046|       |{(unsigned char*)"gammad", {207, 157, 0}},
 1047|       |{(unsigned char*)"gap", {226, 170, 134, 0}},
 1048|       |{(unsigned char*)"gbreve", {196, 159, 0}},
 1049|       |{(unsigned char*)"gcirc", {196, 157, 0}},
 1050|       |{(unsigned char*)"gcy", {208, 179, 0}},
 1051|       |{(unsigned char*)"gdot", {196, 161, 0}},
 1052|       |{(unsigned char*)"ge", {226, 137, 165, 0}},
 1053|       |{(unsigned char*)"gel", {226, 139, 155, 0}},
 1054|       |{(unsigned char*)"geq", {226, 137, 165, 0}},
 1055|       |{(unsigned char*)"geqq", {226, 137, 167, 0}},
 1056|       |{(unsigned char*)"geqslant", {226, 169, 190, 0}},
 1057|       |{(unsigned char*)"ges", {226, 169, 190, 0}},
 1058|       |{(unsigned char*)"gescc", {226, 170, 169, 0}},
 1059|       |{(unsigned char*)"gesdot", {226, 170, 128, 0}},
 1060|       |{(unsigned char*)"gesdoto", {226, 170, 130, 0}},
 1061|       |{(unsigned char*)"gesdotol", {226, 170, 132, 0}},
 1062|       |{(unsigned char*)"gesl", {226, 139, 155, 239, 184, 128, 0}},
 1063|       |{(unsigned char*)"gesles", {226, 170, 148, 0}},
 1064|       |{(unsigned char*)"gfr", {240, 157, 148, 164, 0}},
 1065|       |{(unsigned char*)"gg", {226, 137, 171, 0}},
 1066|       |{(unsigned char*)"ggg", {226, 139, 153, 0}},
 1067|       |{(unsigned char*)"gimel", {226, 132, 183, 0}},
 1068|       |{(unsigned char*)"gjcy", {209, 147, 0}},
 1069|       |{(unsigned char*)"gl", {226, 137, 183, 0}},
 1070|       |{(unsigned char*)"glE", {226, 170, 146, 0}},
 1071|       |{(unsigned char*)"gla", {226, 170, 165, 0}},
 1072|       |{(unsigned char*)"glj", {226, 170, 164, 0}},
 1073|       |{(unsigned char*)"gnE", {226, 137, 169, 0}},
 1074|       |{(unsigned char*)"gnap", {226, 170, 138, 0}},
 1075|       |{(unsigned char*)"gnapprox", {226, 170, 138, 0}},
 1076|       |{(unsigned char*)"gne", {226, 170, 136, 0}},
 1077|       |{(unsigned char*)"gneq", {226, 170, 136, 0}},
 1078|       |{(unsigned char*)"gneqq", {226, 137, 169, 0}},
 1079|       |{(unsigned char*)"gnsim", {226, 139, 167, 0}},
 1080|       |{(unsigned char*)"gopf", {240, 157, 149, 152, 0}},
 1081|       |{(unsigned char*)"grave", {96, 0}},
 1082|       |{(unsigned char*)"gscr", {226, 132, 138, 0}},
 1083|       |{(unsigned char*)"gsim", {226, 137, 179, 0}},
 1084|       |{(unsigned char*)"gsime", {226, 170, 142, 0}},
 1085|       |{(unsigned char*)"gsiml", {226, 170, 144, 0}},
 1086|       |{(unsigned char*)"gt", {62, 0}},
 1087|       |{(unsigned char*)"gtcc", {226, 170, 167, 0}},
 1088|       |{(unsigned char*)"gtcir", {226, 169, 186, 0}},
 1089|       |{(unsigned char*)"gtdot", {226, 139, 151, 0}},
 1090|       |{(unsigned char*)"gtlPar", {226, 166, 149, 0}},
 1091|       |{(unsigned char*)"gtquest", {226, 169, 188, 0}},
 1092|       |{(unsigned char*)"gtrapprox", {226, 170, 134, 0}},
 1093|       |{(unsigned char*)"gtrarr", {226, 165, 184, 0}},
 1094|       |{(unsigned char*)"gtrdot", {226, 139, 151, 0}},
 1095|       |{(unsigned char*)"gtreqless", {226, 139, 155, 0}},
 1096|       |{(unsigned char*)"gtreqqless", {226, 170, 140, 0}},
 1097|       |{(unsigned char*)"gtrless", {226, 137, 183, 0}},
 1098|       |{(unsigned char*)"gtrsim", {226, 137, 179, 0}},
 1099|       |{(unsigned char*)"gvertneqq", {226, 137, 169, 239, 184, 128, 0}},
 1100|       |{(unsigned char*)"gvnE", {226, 137, 169, 239, 184, 128, 0}},
 1101|       |{(unsigned char*)"hArr", {226, 135, 148, 0}},
 1102|       |{(unsigned char*)"hairsp", {226, 128, 138, 0}},
 1103|       |{(unsigned char*)"half", {194, 189, 0}},
 1104|       |{(unsigned char*)"hamilt", {226, 132, 139, 0}},
 1105|       |{(unsigned char*)"hardcy", {209, 138, 0}},
 1106|       |{(unsigned char*)"harr", {226, 134, 148, 0}},
 1107|       |{(unsigned char*)"harrcir", {226, 165, 136, 0}},
 1108|       |{(unsigned char*)"harrw", {226, 134, 173, 0}},
 1109|       |{(unsigned char*)"hbar", {226, 132, 143, 0}},
 1110|       |{(unsigned char*)"hcirc", {196, 165, 0}},
 1111|       |{(unsigned char*)"hearts", {226, 153, 165, 0}},
 1112|       |{(unsigned char*)"heartsuit", {226, 153, 165, 0}},
 1113|       |{(unsigned char*)"hellip", {226, 128, 166, 0}},
 1114|       |{(unsigned char*)"hercon", {226, 138, 185, 0}},
 1115|       |{(unsigned char*)"hfr", {240, 157, 148, 165, 0}},
 1116|       |{(unsigned char*)"hksearow", {226, 164, 165, 0}},
 1117|       |{(unsigned char*)"hkswarow", {226, 164, 166, 0}},
 1118|       |{(unsigned char*)"hoarr", {226, 135, 191, 0}},
 1119|       |{(unsigned char*)"homtht", {226, 136, 187, 0}},
 1120|       |{(unsigned char*)"hookleftarrow", {226, 134, 169, 0}},
 1121|       |{(unsigned char*)"hookrightarrow", {226, 134, 170, 0}},
 1122|       |{(unsigned char*)"hopf", {240, 157, 149, 153, 0}},
 1123|       |{(unsigned char*)"horbar", {226, 128, 149, 0}},
 1124|       |{(unsigned char*)"hscr", {240, 157, 146, 189, 0}},
 1125|       |{(unsigned char*)"hslash", {226, 132, 143, 0}},
 1126|       |{(unsigned char*)"hstrok", {196, 167, 0}},
 1127|       |{(unsigned char*)"hybull", {226, 129, 131, 0}},
 1128|       |{(unsigned char*)"hyphen", {226, 128, 144, 0}},
 1129|       |{(unsigned char*)"iacute", {195, 173, 0}},
 1130|       |{(unsigned char*)"ic", {226, 129, 163, 0}},
 1131|       |{(unsigned char*)"icirc", {195, 174, 0}},
 1132|       |{(unsigned char*)"icy", {208, 184, 0}},
 1133|       |{(unsigned char*)"iecy", {208, 181, 0}},
 1134|       |{(unsigned char*)"iexcl", {194, 161, 0}},
 1135|       |{(unsigned char*)"iff", {226, 135, 148, 0}},
 1136|       |{(unsigned char*)"ifr", {240, 157, 148, 166, 0}},
 1137|       |{(unsigned char*)"igrave", {195, 172, 0}},
 1138|       |{(unsigned char*)"ii", {226, 133, 136, 0}},
 1139|       |{(unsigned char*)"iiiint", {226, 168, 140, 0}},
 1140|       |{(unsigned char*)"iiint", {226, 136, 173, 0}},
 1141|       |{(unsigned char*)"iinfin", {226, 167, 156, 0}},
 1142|       |{(unsigned char*)"iiota", {226, 132, 169, 0}},
 1143|       |{(unsigned char*)"ijlig", {196, 179, 0}},
 1144|       |{(unsigned char*)"imacr", {196, 171, 0}},
 1145|       |{(unsigned char*)"image", {226, 132, 145, 0}},
 1146|       |{(unsigned char*)"imagline", {226, 132, 144, 0}},
 1147|       |{(unsigned char*)"imagpart", {226, 132, 145, 0}},
 1148|       |{(unsigned char*)"imath", {196, 177, 0}},
 1149|       |{(unsigned char*)"imof", {226, 138, 183, 0}},
 1150|       |{(unsigned char*)"imped", {198, 181, 0}},
 1151|       |{(unsigned char*)"in", {226, 136, 136, 0}},
 1152|       |{(unsigned char*)"incare", {226, 132, 133, 0}},
 1153|       |{(unsigned char*)"infin", {226, 136, 158, 0}},
 1154|       |{(unsigned char*)"infintie", {226, 167, 157, 0}},
 1155|       |{(unsigned char*)"inodot", {196, 177, 0}},
 1156|       |{(unsigned char*)"int", {226, 136, 171, 0}},
 1157|       |{(unsigned char*)"intcal", {226, 138, 186, 0}},
 1158|       |{(unsigned char*)"integers", {226, 132, 164, 0}},
 1159|       |{(unsigned char*)"intercal", {226, 138, 186, 0}},
 1160|       |{(unsigned char*)"intlarhk", {226, 168, 151, 0}},
 1161|       |{(unsigned char*)"intprod", {226, 168, 188, 0}},
 1162|       |{(unsigned char*)"iocy", {209, 145, 0}},
 1163|       |{(unsigned char*)"iogon", {196, 175, 0}},
 1164|       |{(unsigned char*)"iopf", {240, 157, 149, 154, 0}},
 1165|       |{(unsigned char*)"iota", {206, 185, 0}},
 1166|       |{(unsigned char*)"iprod", {226, 168, 188, 0}},
 1167|       |{(unsigned char*)"iquest", {194, 191, 0}},
 1168|       |{(unsigned char*)"iscr", {240, 157, 146, 190, 0}},
 1169|       |{(unsigned char*)"isin", {226, 136, 136, 0}},
 1170|       |{(unsigned char*)"isinE", {226, 139, 185, 0}},
 1171|       |{(unsigned char*)"isindot", {226, 139, 181, 0}},
 1172|       |{(unsigned char*)"isins", {226, 139, 180, 0}},
 1173|       |{(unsigned char*)"isinsv", {226, 139, 179, 0}},
 1174|       |{(unsigned char*)"isinv", {226, 136, 136, 0}},
 1175|       |{(unsigned char*)"it", {226, 129, 162, 0}},
 1176|       |{(unsigned char*)"itilde", {196, 169, 0}},
 1177|       |{(unsigned char*)"iukcy", {209, 150, 0}},
 1178|       |{(unsigned char*)"iuml", {195, 175, 0}},
 1179|       |{(unsigned char*)"jcirc", {196, 181, 0}},
 1180|       |{(unsigned char*)"jcy", {208, 185, 0}},
 1181|       |{(unsigned char*)"jfr", {240, 157, 148, 167, 0}},
 1182|       |{(unsigned char*)"jmath", {200, 183, 0}},
 1183|       |{(unsigned char*)"jopf", {240, 157, 149, 155, 0}},
 1184|       |{(unsigned char*)"jscr", {240, 157, 146, 191, 0}},
 1185|       |{(unsigned char*)"jsercy", {209, 152, 0}},
 1186|       |{(unsigned char*)"jukcy", {209, 148, 0}},
 1187|       |{(unsigned char*)"kappa", {206, 186, 0}},
 1188|       |{(unsigned char*)"kappav", {207, 176, 0}},
 1189|       |{(unsigned char*)"kcedil", {196, 183, 0}},
 1190|       |{(unsigned char*)"kcy", {208, 186, 0}},
 1191|       |{(unsigned char*)"kfr", {240, 157, 148, 168, 0}},
 1192|       |{(unsigned char*)"kgreen", {196, 184, 0}},
 1193|       |{(unsigned char*)"khcy", {209, 133, 0}},
 1194|       |{(unsigned char*)"kjcy", {209, 156, 0}},
 1195|       |{(unsigned char*)"kopf", {240, 157, 149, 156, 0}},
 1196|       |{(unsigned char*)"kscr", {240, 157, 147, 128, 0}},
 1197|       |{(unsigned char*)"lAarr", {226, 135, 154, 0}},
 1198|       |{(unsigned char*)"lArr", {226, 135, 144, 0}},
 1199|       |{(unsigned char*)"lAtail", {226, 164, 155, 0}},
 1200|       |{(unsigned char*)"lBarr", {226, 164, 142, 0}},
 1201|       |{(unsigned char*)"lE", {226, 137, 166, 0}},
 1202|       |{(unsigned char*)"lEg", {226, 170, 139, 0}},
 1203|       |{(unsigned char*)"lHar", {226, 165, 162, 0}},
 1204|       |{(unsigned char*)"lacute", {196, 186, 0}},
 1205|       |{(unsigned char*)"laemptyv", {226, 166, 180, 0}},
 1206|       |{(unsigned char*)"lagran", {226, 132, 146, 0}},
 1207|       |{(unsigned char*)"lambda", {206, 187, 0}},
 1208|       |{(unsigned char*)"lang", {226, 159, 168, 0}},
 1209|       |{(unsigned char*)"langd", {226, 166, 145, 0}},
 1210|       |{(unsigned char*)"langle", {226, 159, 168, 0}},
 1211|       |{(unsigned char*)"lap", {226, 170, 133, 0}},
 1212|       |{(unsigned char*)"laquo", {194, 171, 0}},
 1213|       |{(unsigned char*)"larr", {226, 134, 144, 0}},
 1214|       |{(unsigned char*)"larrb", {226, 135, 164, 0}},
 1215|       |{(unsigned char*)"larrbfs", {226, 164, 159, 0}},
 1216|       |{(unsigned char*)"larrfs", {226, 164, 157, 0}},
 1217|       |{(unsigned char*)"larrhk", {226, 134, 169, 0}},
 1218|       |{(unsigned char*)"larrlp", {226, 134, 171, 0}},
 1219|       |{(unsigned char*)"larrpl", {226, 164, 185, 0}},
 1220|       |{(unsigned char*)"larrsim", {226, 165, 179, 0}},
 1221|       |{(unsigned char*)"larrtl", {226, 134, 162, 0}},
 1222|       |{(unsigned char*)"lat", {226, 170, 171, 0}},
 1223|       |{(unsigned char*)"latail", {226, 164, 153, 0}},
 1224|       |{(unsigned char*)"late", {226, 170, 173, 0}},
 1225|       |{(unsigned char*)"lates", {226, 170, 173, 239, 184, 128, 0}},
 1226|       |{(unsigned char*)"lbarr", {226, 164, 140, 0}},
 1227|       |{(unsigned char*)"lbbrk", {226, 157, 178, 0}},
 1228|       |{(unsigned char*)"lbrace", {123, 0}},
 1229|       |{(unsigned char*)"lbrack", {91, 0}},
 1230|       |{(unsigned char*)"lbrke", {226, 166, 139, 0}},
 1231|       |{(unsigned char*)"lbrksld", {226, 166, 143, 0}},
 1232|       |{(unsigned char*)"lbrkslu", {226, 166, 141, 0}},
 1233|       |{(unsigned char*)"lcaron", {196, 190, 0}},
 1234|       |{(unsigned char*)"lcedil", {196, 188, 0}},
 1235|       |{(unsigned char*)"lceil", {226, 140, 136, 0}},
 1236|       |{(unsigned char*)"lcub", {123, 0}},
 1237|       |{(unsigned char*)"lcy", {208, 187, 0}},
 1238|       |{(unsigned char*)"ldca", {226, 164, 182, 0}},
 1239|       |{(unsigned char*)"ldquo", {226, 128, 156, 0}},
 1240|       |{(unsigned char*)"ldquor", {226, 128, 158, 0}},
 1241|       |{(unsigned char*)"ldrdhar", {226, 165, 167, 0}},
 1242|       |{(unsigned char*)"ldrushar", {226, 165, 139, 0}},
 1243|       |{(unsigned char*)"ldsh", {226, 134, 178, 0}},
 1244|       |{(unsigned char*)"le", {226, 137, 164, 0}},
 1245|       |{(unsigned char*)"leftarrow", {226, 134, 144, 0}},
 1246|       |{(unsigned char*)"leftarrowtail", {226, 134, 162, 0}},
 1247|       |{(unsigned char*)"leftharpoondown", {226, 134, 189, 0}},
 1248|       |{(unsigned char*)"leftharpoonup", {226, 134, 188, 0}},
 1249|       |{(unsigned char*)"leftleftarrows", {226, 135, 135, 0}},
 1250|       |{(unsigned char*)"leftrightarrow", {226, 134, 148, 0}},
 1251|       |{(unsigned char*)"leftrightarrows", {226, 135, 134, 0}},
 1252|       |{(unsigned char*)"leftrightharpoons", {226, 135, 139, 0}},
 1253|       |{(unsigned char*)"leftrightsquigarrow", {226, 134, 173, 0}},
 1254|       |{(unsigned char*)"leftthreetimes", {226, 139, 139, 0}},
 1255|       |{(unsigned char*)"leg", {226, 139, 154, 0}},
 1256|       |{(unsigned char*)"leq", {226, 137, 164, 0}},
 1257|       |{(unsigned char*)"leqq", {226, 137, 166, 0}},
 1258|       |{(unsigned char*)"leqslant", {226, 169, 189, 0}},
 1259|       |{(unsigned char*)"les", {226, 169, 189, 0}},
 1260|       |{(unsigned char*)"lescc", {226, 170, 168, 0}},
 1261|       |{(unsigned char*)"lesdot", {226, 169, 191, 0}},
 1262|       |{(unsigned char*)"lesdoto", {226, 170, 129, 0}},
 1263|       |{(unsigned char*)"lesdotor", {226, 170, 131, 0}},
 1264|       |{(unsigned char*)"lesg", {226, 139, 154, 239, 184, 128, 0}},
 1265|       |{(unsigned char*)"lesges", {226, 170, 147, 0}},
 1266|       |{(unsigned char*)"lessapprox", {226, 170, 133, 0}},
 1267|       |{(unsigned char*)"lessdot", {226, 139, 150, 0}},
 1268|       |{(unsigned char*)"lesseqgtr", {226, 139, 154, 0}},
 1269|       |{(unsigned char*)"lesseqqgtr", {226, 170, 139, 0}},
 1270|       |{(unsigned char*)"lessgtr", {226, 137, 182, 0}},
 1271|       |{(unsigned char*)"lesssim", {226, 137, 178, 0}},
 1272|       |{(unsigned char*)"lfisht", {226, 165, 188, 0}},
 1273|       |{(unsigned char*)"lfloor", {226, 140, 138, 0}},
 1274|       |{(unsigned char*)"lfr", {240, 157, 148, 169, 0}},
 1275|       |{(unsigned char*)"lg", {226, 137, 182, 0}},
 1276|       |{(unsigned char*)"lgE", {226, 170, 145, 0}},
 1277|       |{(unsigned char*)"lhard", {226, 134, 189, 0}},
 1278|       |{(unsigned char*)"lharu", {226, 134, 188, 0}},
 1279|       |{(unsigned char*)"lharul", {226, 165, 170, 0}},
 1280|       |{(unsigned char*)"lhblk", {226, 150, 132, 0}},
 1281|       |{(unsigned char*)"ljcy", {209, 153, 0}},
 1282|       |{(unsigned char*)"ll", {226, 137, 170, 0}},
 1283|       |{(unsigned char*)"llarr", {226, 135, 135, 0}},
 1284|       |{(unsigned char*)"llcorner", {226, 140, 158, 0}},
 1285|       |{(unsigned char*)"llhard", {226, 165, 171, 0}},
 1286|       |{(unsigned char*)"lltri", {226, 151, 186, 0}},
 1287|       |{(unsigned char*)"lmidot", {197, 128, 0}},
 1288|       |{(unsigned char*)"lmoust", {226, 142, 176, 0}},
 1289|       |{(unsigned char*)"lmoustache", {226, 142, 176, 0}},
 1290|       |{(unsigned char*)"lnE", {226, 137, 168, 0}},
 1291|       |{(unsigned char*)"lnap", {226, 170, 137, 0}},
 1292|       |{(unsigned char*)"lnapprox", {226, 170, 137, 0}},
 1293|       |{(unsigned char*)"lne", {226, 170, 135, 0}},
 1294|       |{(unsigned char*)"lneq", {226, 170, 135, 0}},
 1295|       |{(unsigned char*)"lneqq", {226, 137, 168, 0}},
 1296|       |{(unsigned char*)"lnsim", {226, 139, 166, 0}},
 1297|       |{(unsigned char*)"loang", {226, 159, 172, 0}},
 1298|       |{(unsigned char*)"loarr", {226, 135, 189, 0}},
 1299|       |{(unsigned char*)"lobrk", {226, 159, 166, 0}},
 1300|       |{(unsigned char*)"longleftarrow", {226, 159, 181, 0}},
 1301|       |{(unsigned char*)"longleftrightarrow", {226, 159, 183, 0}},
 1302|       |{(unsigned char*)"longmapsto", {226, 159, 188, 0}},
 1303|       |{(unsigned char*)"longrightarrow", {226, 159, 182, 0}},
 1304|       |{(unsigned char*)"looparrowleft", {226, 134, 171, 0}},
 1305|       |{(unsigned char*)"looparrowright", {226, 134, 172, 0}},
 1306|       |{(unsigned char*)"lopar", {226, 166, 133, 0}},
 1307|       |{(unsigned char*)"lopf", {240, 157, 149, 157, 0}},
 1308|       |{(unsigned char*)"loplus", {226, 168, 173, 0}},
 1309|       |{(unsigned char*)"lotimes", {226, 168, 180, 0}},
 1310|       |{(unsigned char*)"lowast", {226, 136, 151, 0}},
 1311|       |{(unsigned char*)"lowbar", {95, 0}},
 1312|       |{(unsigned char*)"loz", {226, 151, 138, 0}},
 1313|       |{(unsigned char*)"lozenge", {226, 151, 138, 0}},
 1314|       |{(unsigned char*)"lozf", {226, 167, 171, 0}},
 1315|       |{(unsigned char*)"lpar", {40, 0}},
 1316|       |{(unsigned char*)"lparlt", {226, 166, 147, 0}},
 1317|       |{(unsigned char*)"lrarr", {226, 135, 134, 0}},
 1318|       |{(unsigned char*)"lrcorner", {226, 140, 159, 0}},
 1319|       |{(unsigned char*)"lrhar", {226, 135, 139, 0}},
 1320|       |{(unsigned char*)"lrhard", {226, 165, 173, 0}},
 1321|       |{(unsigned char*)"lrm", {226, 128, 142, 0}},
 1322|       |{(unsigned char*)"lrtri", {226, 138, 191, 0}},
 1323|       |{(unsigned char*)"lsaquo", {226, 128, 185, 0}},
 1324|       |{(unsigned char*)"lscr", {240, 157, 147, 129, 0}},
 1325|       |{(unsigned char*)"lsh", {226, 134, 176, 0}},
 1326|       |{(unsigned char*)"lsim", {226, 137, 178, 0}},
 1327|       |{(unsigned char*)"lsime", {226, 170, 141, 0}},
 1328|       |{(unsigned char*)"lsimg", {226, 170, 143, 0}},
 1329|       |{(unsigned char*)"lsqb", {91, 0}},
 1330|       |{(unsigned char*)"lsquo", {226, 128, 152, 0}},
 1331|       |{(unsigned char*)"lsquor", {226, 128, 154, 0}},
 1332|       |{(unsigned char*)"lstrok", {197, 130, 0}},
 1333|       |{(unsigned char*)"lt", {60, 0}},
 1334|       |{(unsigned char*)"ltcc", {226, 170, 166, 0}},
 1335|       |{(unsigned char*)"ltcir", {226, 169, 185, 0}},
 1336|       |{(unsigned char*)"ltdot", {226, 139, 150, 0}},
 1337|       |{(unsigned char*)"lthree", {226, 139, 139, 0}},
 1338|       |{(unsigned char*)"ltimes", {226, 139, 137, 0}},
 1339|       |{(unsigned char*)"ltlarr", {226, 165, 182, 0}},
 1340|       |{(unsigned char*)"ltquest", {226, 169, 187, 0}},
 1341|       |{(unsigned char*)"ltrPar", {226, 166, 150, 0}},
 1342|       |{(unsigned char*)"ltri", {226, 151, 131, 0}},
 1343|       |{(unsigned char*)"ltrie", {226, 138, 180, 0}},
 1344|       |{(unsigned char*)"ltrif", {226, 151, 130, 0}},
 1345|       |{(unsigned char*)"lurdshar", {226, 165, 138, 0}},
 1346|       |{(unsigned char*)"luruhar", {226, 165, 166, 0}},
 1347|       |{(unsigned char*)"lvertneqq", {226, 137, 168, 239, 184, 128, 0}},
 1348|       |{(unsigned char*)"lvnE", {226, 137, 168, 239, 184, 128, 0}},
 1349|       |{(unsigned char*)"mDDot", {226, 136, 186, 0}},
 1350|       |{(unsigned char*)"macr", {194, 175, 0}},
 1351|       |{(unsigned char*)"male", {226, 153, 130, 0}},
 1352|       |{(unsigned char*)"malt", {226, 156, 160, 0}},
 1353|       |{(unsigned char*)"maltese", {226, 156, 160, 0}},
 1354|       |{(unsigned char*)"map", {226, 134, 166, 0}},
 1355|       |{(unsigned char*)"mapsto", {226, 134, 166, 0}},
 1356|       |{(unsigned char*)"mapstodown", {226, 134, 167, 0}},
 1357|       |{(unsigned char*)"mapstoleft", {226, 134, 164, 0}},
 1358|       |{(unsigned char*)"mapstoup", {226, 134, 165, 0}},
 1359|       |{(unsigned char*)"marker", {226, 150, 174, 0}},
 1360|       |{(unsigned char*)"mcomma", {226, 168, 169, 0}},
 1361|       |{(unsigned char*)"mcy", {208, 188, 0}},
 1362|       |{(unsigned char*)"mdash", {226, 128, 148, 0}},
 1363|       |{(unsigned char*)"measuredangle", {226, 136, 161, 0}},
 1364|       |{(unsigned char*)"mfr", {240, 157, 148, 170, 0}},
 1365|       |{(unsigned char*)"mho", {226, 132, 167, 0}},
 1366|       |{(unsigned char*)"micro", {194, 181, 0}},
 1367|       |{(unsigned char*)"mid", {226, 136, 163, 0}},
 1368|       |{(unsigned char*)"midast", {42, 0}},
 1369|       |{(unsigned char*)"midcir", {226, 171, 176, 0}},
 1370|       |{(unsigned char*)"middot", {194, 183, 0}},
 1371|       |{(unsigned char*)"minus", {226, 136, 146, 0}},
 1372|       |{(unsigned char*)"minusb", {226, 138, 159, 0}},
 1373|       |{(unsigned char*)"minusd", {226, 136, 184, 0}},
 1374|       |{(unsigned char*)"minusdu", {226, 168, 170, 0}},
 1375|       |{(unsigned char*)"mlcp", {226, 171, 155, 0}},
 1376|       |{(unsigned char*)"mldr", {226, 128, 166, 0}},
 1377|       |{(unsigned char*)"mnplus", {226, 136, 147, 0}},
 1378|       |{(unsigned char*)"models", {226, 138, 167, 0}},
 1379|       |{(unsigned char*)"mopf", {240, 157, 149, 158, 0}},
 1380|       |{(unsigned char*)"mp", {226, 136, 147, 0}},
 1381|       |{(unsigned char*)"mscr", {240, 157, 147, 130, 0}},
 1382|       |{(unsigned char*)"mstpos", {226, 136, 190, 0}},
 1383|       |{(unsigned char*)"mu", {206, 188, 0}},
 1384|       |{(unsigned char*)"multimap", {226, 138, 184, 0}},
 1385|       |{(unsigned char*)"mumap", {226, 138, 184, 0}},
 1386|       |{(unsigned char*)"nGg", {226, 139, 153, 204, 184, 0}},
 1387|       |{(unsigned char*)"nGt", {226, 137, 171, 226, 131, 146, 0}},
 1388|       |{(unsigned char*)"nGtv", {226, 137, 171, 204, 184, 0}},
 1389|       |{(unsigned char*)"nLeftarrow", {226, 135, 141, 0}},
 1390|       |{(unsigned char*)"nLeftrightarrow", {226, 135, 142, 0}},
 1391|       |{(unsigned char*)"nLl", {226, 139, 152, 204, 184, 0}},
 1392|       |{(unsigned char*)"nLt", {226, 137, 170, 226, 131, 146, 0}},
 1393|       |{(unsigned char*)"nLtv", {226, 137, 170, 204, 184, 0}},
 1394|       |{(unsigned char*)"nRightarrow", {226, 135, 143, 0}},
 1395|       |{(unsigned char*)"nVDash", {226, 138, 175, 0}},
 1396|       |{(unsigned char*)"nVdash", {226, 138, 174, 0}},
 1397|       |{(unsigned char*)"nabla", {226, 136, 135, 0}},
 1398|       |{(unsigned char*)"nacute", {197, 132, 0}},
 1399|       |{(unsigned char*)"nang", {226, 136, 160, 226, 131, 146, 0}},
 1400|       |{(unsigned char*)"nap", {226, 137, 137, 0}},
 1401|       |{(unsigned char*)"napE", {226, 169, 176, 204, 184, 0}},
 1402|       |{(unsigned char*)"napid", {226, 137, 139, 204, 184, 0}},
 1403|       |{(unsigned char*)"napos", {197, 137, 0}},
 1404|       |{(unsigned char*)"napprox", {226, 137, 137, 0}},
 1405|       |{(unsigned char*)"natur", {226, 153, 174, 0}},
 1406|       |{(unsigned char*)"natural", {226, 153, 174, 0}},
 1407|       |{(unsigned char*)"naturals", {226, 132, 149, 0}},
 1408|       |{(unsigned char*)"nbsp", {194, 160, 0}},
 1409|       |{(unsigned char*)"nbump", {226, 137, 142, 204, 184, 0}},
 1410|       |{(unsigned char*)"nbumpe", {226, 137, 143, 204, 184, 0}},
 1411|       |{(unsigned char*)"ncap", {226, 169, 131, 0}},
 1412|       |{(unsigned char*)"ncaron", {197, 136, 0}},
 1413|       |{(unsigned char*)"ncedil", {197, 134, 0}},
 1414|       |{(unsigned char*)"ncong", {226, 137, 135, 0}},
 1415|       |{(unsigned char*)"ncongdot", {226, 169, 173, 204, 184, 0}},
 1416|       |{(unsigned char*)"ncup", {226, 169, 130, 0}},
 1417|       |{(unsigned char*)"ncy", {208, 189, 0}},
 1418|       |{(unsigned char*)"ndash", {226, 128, 147, 0}},
 1419|       |{(unsigned char*)"ne", {226, 137, 160, 0}},
 1420|       |{(unsigned char*)"neArr", {226, 135, 151, 0}},
 1421|       |{(unsigned char*)"nearhk", {226, 164, 164, 0}},
 1422|       |{(unsigned char*)"nearr", {226, 134, 151, 0}},
 1423|       |{(unsigned char*)"nearrow", {226, 134, 151, 0}},
 1424|       |{(unsigned char*)"nedot", {226, 137, 144, 204, 184, 0}},
 1425|       |{(unsigned char*)"nequiv", {226, 137, 162, 0}},
 1426|       |{(unsigned char*)"nesear", {226, 164, 168, 0}},
 1427|       |{(unsigned char*)"nesim", {226, 137, 130, 204, 184, 0}},
 1428|       |{(unsigned char*)"nexist", {226, 136, 132, 0}},
 1429|       |{(unsigned char*)"nexists", {226, 136, 132, 0}},
 1430|       |{(unsigned char*)"nfr", {240, 157, 148, 171, 0}},
 1431|       |{(unsigned char*)"ngE", {226, 137, 167, 204, 184, 0}},
 1432|       |{(unsigned char*)"nge", {226, 137, 177, 0}},
 1433|       |{(unsigned char*)"ngeq", {226, 137, 177, 0}},
 1434|       |{(unsigned char*)"ngeqq", {226, 137, 167, 204, 184, 0}},
 1435|       |{(unsigned char*)"ngeqslant", {226, 169, 190, 204, 184, 0}},
 1436|       |{(unsigned char*)"nges", {226, 169, 190, 204, 184, 0}},
 1437|       |{(unsigned char*)"ngsim", {226, 137, 181, 0}},
 1438|       |{(unsigned char*)"ngt", {226, 137, 175, 0}},
 1439|       |{(unsigned char*)"ngtr", {226, 137, 175, 0}},
 1440|       |{(unsigned char*)"nhArr", {226, 135, 142, 0}},
 1441|       |{(unsigned char*)"nharr", {226, 134, 174, 0}},
 1442|       |{(unsigned char*)"nhpar", {226, 171, 178, 0}},
 1443|       |{(unsigned char*)"ni", {226, 136, 139, 0}},
 1444|       |{(unsigned char*)"nis", {226, 139, 188, 0}},
 1445|       |{(unsigned char*)"nisd", {226, 139, 186, 0}},
 1446|       |{(unsigned char*)"niv", {226, 136, 139, 0}},
 1447|       |{(unsigned char*)"njcy", {209, 154, 0}},
 1448|       |{(unsigned char*)"nlArr", {226, 135, 141, 0}},
 1449|       |{(unsigned char*)"nlE", {226, 137, 166, 204, 184, 0}},
 1450|       |{(unsigned char*)"nlarr", {226, 134, 154, 0}},
 1451|       |{(unsigned char*)"nldr", {226, 128, 165, 0}},
 1452|       |{(unsigned char*)"nle", {226, 137, 176, 0}},
 1453|       |{(unsigned char*)"nleftarrow", {226, 134, 154, 0}},
 1454|       |{(unsigned char*)"nleftrightarrow", {226, 134, 174, 0}},
 1455|       |{(unsigned char*)"nleq", {226, 137, 176, 0}},
 1456|       |{(unsigned char*)"nleqq", {226, 137, 166, 204, 184, 0}},
 1457|       |{(unsigned char*)"nleqslant", {226, 169, 189, 204, 184, 0}},
 1458|       |{(unsigned char*)"nles", {226, 169, 189, 204, 184, 0}},
 1459|       |{(unsigned char*)"nless", {226, 137, 174, 0}},
 1460|       |{(unsigned char*)"nlsim", {226, 137, 180, 0}},
 1461|       |{(unsigned char*)"nlt", {226, 137, 174, 0}},
 1462|       |{(unsigned char*)"nltri", {226, 139, 170, 0}},
 1463|       |{(unsigned char*)"nltrie", {226, 139, 172, 0}},
 1464|       |{(unsigned char*)"nmid", {226, 136, 164, 0}},
 1465|       |{(unsigned char*)"nopf", {240, 157, 149, 159, 0}},
 1466|       |{(unsigned char*)"not", {194, 172, 0}},
 1467|       |{(unsigned char*)"notin", {226, 136, 137, 0}},
 1468|       |{(unsigned char*)"notinE", {226, 139, 185, 204, 184, 0}},
 1469|       |{(unsigned char*)"notindot", {226, 139, 181, 204, 184, 0}},
 1470|       |{(unsigned char*)"notinva", {226, 136, 137, 0}},
 1471|       |{(unsigned char*)"notinvb", {226, 139, 183, 0}},
 1472|       |{(unsigned char*)"notinvc", {226, 139, 182, 0}},
 1473|       |{(unsigned char*)"notni", {226, 136, 140, 0}},
 1474|       |{(unsigned char*)"notniva", {226, 136, 140, 0}},
 1475|       |{(unsigned char*)"notnivb", {226, 139, 190, 0}},
 1476|       |{(unsigned char*)"notnivc", {226, 139, 189, 0}},
 1477|       |{(unsigned char*)"npar", {226, 136, 166, 0}},
 1478|       |{(unsigned char*)"nparallel", {226, 136, 166, 0}},
 1479|       |{(unsigned char*)"nparsl", {226, 171, 189, 226, 131, 165, 0}},
 1480|       |{(unsigned char*)"npart", {226, 136, 130, 204, 184, 0}},
 1481|       |{(unsigned char*)"npolint", {226, 168, 148, 0}},
 1482|       |{(unsigned char*)"npr", {226, 138, 128, 0}},
 1483|       |{(unsigned char*)"nprcue", {226, 139, 160, 0}},
 1484|       |{(unsigned char*)"npre", {226, 170, 175, 204, 184, 0}},
 1485|       |{(unsigned char*)"nprec", {226, 138, 128, 0}},
 1486|       |{(unsigned char*)"npreceq", {226, 170, 175, 204, 184, 0}},
 1487|       |{(unsigned char*)"nrArr", {226, 135, 143, 0}},
 1488|       |{(unsigned char*)"nrarr", {226, 134, 155, 0}},
 1489|       |{(unsigned char*)"nrarrc", {226, 164, 179, 204, 184, 0}},
 1490|       |{(unsigned char*)"nrarrw", {226, 134, 157, 204, 184, 0}},
 1491|       |{(unsigned char*)"nrightarrow", {226, 134, 155, 0}},
 1492|       |{(unsigned char*)"nrtri", {226, 139, 171, 0}},
 1493|       |{(unsigned char*)"nrtrie", {226, 139, 173, 0}},
 1494|       |{(unsigned char*)"nsc", {226, 138, 129, 0}},
 1495|       |{(unsigned char*)"nsccue", {226, 139, 161, 0}},
 1496|       |{(unsigned char*)"nsce", {226, 170, 176, 204, 184, 0}},
 1497|       |{(unsigned char*)"nscr", {240, 157, 147, 131, 0}},
 1498|       |{(unsigned char*)"nshortmid", {226, 136, 164, 0}},
 1499|       |{(unsigned char*)"nshortparallel", {226, 136, 166, 0}},
 1500|       |{(unsigned char*)"nsim", {226, 137, 129, 0}},
 1501|       |{(unsigned char*)"nsime", {226, 137, 132, 0}},
 1502|       |{(unsigned char*)"nsimeq", {226, 137, 132, 0}},
 1503|       |{(unsigned char*)"nsmid", {226, 136, 164, 0}},
 1504|       |{(unsigned char*)"nspar", {226, 136, 166, 0}},
 1505|       |{(unsigned char*)"nsqsube", {226, 139, 162, 0}},
 1506|       |{(unsigned char*)"nsqsupe", {226, 139, 163, 0}},
 1507|       |{(unsigned char*)"nsub", {226, 138, 132, 0}},
 1508|       |{(unsigned char*)"nsubE", {226, 171, 133, 204, 184, 0}},
 1509|       |{(unsigned char*)"nsube", {226, 138, 136, 0}},
 1510|       |{(unsigned char*)"nsubset", {226, 138, 130, 226, 131, 146, 0}},
 1511|       |{(unsigned char*)"nsubseteq", {226, 138, 136, 0}},
 1512|       |{(unsigned char*)"nsubseteqq", {226, 171, 133, 204, 184, 0}},
 1513|       |{(unsigned char*)"nsucc", {226, 138, 129, 0}},
 1514|       |{(unsigned char*)"nsucceq", {226, 170, 176, 204, 184, 0}},
 1515|       |{(unsigned char*)"nsup", {226, 138, 133, 0}},
 1516|       |{(unsigned char*)"nsupE", {226, 171, 134, 204, 184, 0}},
 1517|       |{(unsigned char*)"nsupe", {226, 138, 137, 0}},
 1518|       |{(unsigned char*)"nsupset", {226, 138, 131, 226, 131, 146, 0}},
 1519|       |{(unsigned char*)"nsupseteq", {226, 138, 137, 0}},
 1520|       |{(unsigned char*)"nsupseteqq", {226, 171, 134, 204, 184, 0}},
 1521|       |{(unsigned char*)"ntgl", {226, 137, 185, 0}},
 1522|       |{(unsigned char*)"ntilde", {195, 177, 0}},
 1523|       |{(unsigned char*)"ntlg", {226, 137, 184, 0}},
 1524|       |{(unsigned char*)"ntriangleleft", {226, 139, 170, 0}},
 1525|       |{(unsigned char*)"ntrianglelefteq", {226, 139, 172, 0}},
 1526|       |{(unsigned char*)"ntriangleright", {226, 139, 171, 0}},
 1527|       |{(unsigned char*)"ntrianglerighteq", {226, 139, 173, 0}},
 1528|       |{(unsigned char*)"nu", {206, 189, 0}},
 1529|       |{(unsigned char*)"num", {35, 0}},
 1530|       |{(unsigned char*)"numero", {226, 132, 150, 0}},
 1531|       |{(unsigned char*)"numsp", {226, 128, 135, 0}},
 1532|       |{(unsigned char*)"nvDash", {226, 138, 173, 0}},
 1533|       |{(unsigned char*)"nvHarr", {226, 164, 132, 0}},
 1534|       |{(unsigned char*)"nvap", {226, 137, 141, 226, 131, 146, 0}},
 1535|       |{(unsigned char*)"nvdash", {226, 138, 172, 0}},
 1536|       |{(unsigned char*)"nvge", {226, 137, 165, 226, 131, 146, 0}},
 1537|       |{(unsigned char*)"nvgt", {62, 226, 131, 146, 0}},
 1538|       |{(unsigned char*)"nvinfin", {226, 167, 158, 0}},
 1539|       |{(unsigned char*)"nvlArr", {226, 164, 130, 0}},
 1540|       |{(unsigned char*)"nvle", {226, 137, 164, 226, 131, 146, 0}},
 1541|       |{(unsigned char*)"nvlt", {60, 226, 131, 146, 0}},
 1542|       |{(unsigned char*)"nvltrie", {226, 138, 180, 226, 131, 146, 0}},
 1543|       |{(unsigned char*)"nvrArr", {226, 164, 131, 0}},
 1544|       |{(unsigned char*)"nvrtrie", {226, 138, 181, 226, 131, 146, 0}},
 1545|       |{(unsigned char*)"nvsim", {226, 136, 188, 226, 131, 146, 0}},
 1546|       |{(unsigned char*)"nwArr", {226, 135, 150, 0}},
 1547|       |{(unsigned char*)"nwarhk", {226, 164, 163, 0}},
 1548|       |{(unsigned char*)"nwarr", {226, 134, 150, 0}},
 1549|       |{(unsigned char*)"nwarrow", {226, 134, 150, 0}},
 1550|       |{(unsigned char*)"nwnear", {226, 164, 167, 0}},
 1551|       |{(unsigned char*)"oS", {226, 147, 136, 0}},
 1552|       |{(unsigned char*)"oacute", {195, 179, 0}},
 1553|       |{(unsigned char*)"oast", {226, 138, 155, 0}},
 1554|       |{(unsigned char*)"ocir", {226, 138, 154, 0}},
 1555|       |{(unsigned char*)"ocirc", {195, 180, 0}},
 1556|       |{(unsigned char*)"ocy", {208, 190, 0}},
 1557|       |{(unsigned char*)"odash", {226, 138, 157, 0}},
 1558|       |{(unsigned char*)"odblac", {197, 145, 0}},
 1559|       |{(unsigned char*)"odiv", {226, 168, 184, 0}},
 1560|       |{(unsigned char*)"odot", {226, 138, 153, 0}},
 1561|       |{(unsigned char*)"odsold", {226, 166, 188, 0}},
 1562|       |{(unsigned char*)"oelig", {197, 147, 0}},
 1563|       |{(unsigned char*)"ofcir", {226, 166, 191, 0}},
 1564|       |{(unsigned char*)"ofr", {240, 157, 148, 172, 0}},
 1565|       |{(unsigned char*)"ogon", {203, 155, 0}},
 1566|       |{(unsigned char*)"ograve", {195, 178, 0}},
 1567|       |{(unsigned char*)"ogt", {226, 167, 129, 0}},
 1568|       |{(unsigned char*)"ohbar", {226, 166, 181, 0}},
 1569|       |{(unsigned char*)"ohm", {206, 169, 0}},
 1570|       |{(unsigned char*)"oint", {226, 136, 174, 0}},
 1571|       |{(unsigned char*)"olarr", {226, 134, 186, 0}},
 1572|       |{(unsigned char*)"olcir", {226, 166, 190, 0}},
 1573|       |{(unsigned char*)"olcross", {226, 166, 187, 0}},
 1574|       |{(unsigned char*)"oline", {226, 128, 190, 0}},
 1575|       |{(unsigned char*)"olt", {226, 167, 128, 0}},
 1576|       |{(unsigned char*)"omacr", {197, 141, 0}},
 1577|       |{(unsigned char*)"omega", {207, 137, 0}},
 1578|       |{(unsigned char*)"omicron", {206, 191, 0}},
 1579|       |{(unsigned char*)"omid", {226, 166, 182, 0}},
 1580|       |{(unsigned char*)"ominus", {226, 138, 150, 0}},
 1581|       |{(unsigned char*)"oopf", {240, 157, 149, 160, 0}},
 1582|       |{(unsigned char*)"opar", {226, 166, 183, 0}},
 1583|       |{(unsigned char*)"operp", {226, 166, 185, 0}},
 1584|       |{(unsigned char*)"oplus", {226, 138, 149, 0}},
 1585|       |{(unsigned char*)"or", {226, 136, 168, 0}},
 1586|       |{(unsigned char*)"orarr", {226, 134, 187, 0}},
 1587|       |{(unsigned char*)"ord", {226, 169, 157, 0}},
 1588|       |{(unsigned char*)"order", {226, 132, 180, 0}},
 1589|       |{(unsigned char*)"orderof", {226, 132, 180, 0}},
 1590|       |{(unsigned char*)"ordf", {194, 170, 0}},
 1591|       |{(unsigned char*)"ordm", {194, 186, 0}},
 1592|       |{(unsigned char*)"origof", {226, 138, 182, 0}},
 1593|       |{(unsigned char*)"oror", {226, 169, 150, 0}},
 1594|       |{(unsigned char*)"orslope", {226, 169, 151, 0}},
 1595|       |{(unsigned char*)"orv", {226, 169, 155, 0}},
 1596|       |{(unsigned char*)"oscr", {226, 132, 180, 0}},
 1597|       |{(unsigned char*)"oslash", {195, 184, 0}},
 1598|       |{(unsigned char*)"osol", {226, 138, 152, 0}},
 1599|       |{(unsigned char*)"otilde", {195, 181, 0}},
 1600|       |{(unsigned char*)"otimes", {226, 138, 151, 0}},
 1601|       |{(unsigned char*)"otimesas", {226, 168, 182, 0}},
 1602|       |{(unsigned char*)"ouml", {195, 182, 0}},
 1603|       |{(unsigned char*)"ovbar", {226, 140, 189, 0}},
 1604|       |{(unsigned char*)"par", {226, 136, 165, 0}},
 1605|       |{(unsigned char*)"para", {194, 182, 0}},
 1606|       |{(unsigned char*)"parallel", {226, 136, 165, 0}},
 1607|       |{(unsigned char*)"parsim", {226, 171, 179, 0}},
 1608|       |{(unsigned char*)"parsl", {226, 171, 189, 0}},
 1609|       |{(unsigned char*)"part", {226, 136, 130, 0}},
 1610|       |{(unsigned char*)"pcy", {208, 191, 0}},
 1611|       |{(unsigned char*)"percnt", {37, 0}},
 1612|       |{(unsigned char*)"period", {46, 0}},
 1613|       |{(unsigned char*)"permil", {226, 128, 176, 0}},
 1614|       |{(unsigned char*)"perp", {226, 138, 165, 0}},
 1615|       |{(unsigned char*)"pertenk", {226, 128, 177, 0}},
 1616|       |{(unsigned char*)"pfr", {240, 157, 148, 173, 0}},
 1617|       |{(unsigned char*)"phi", {207, 134, 0}},
 1618|       |{(unsigned char*)"phiv", {207, 149, 0}},
 1619|       |{(unsigned char*)"phmmat", {226, 132, 179, 0}},
 1620|       |{(unsigned char*)"phone", {226, 152, 142, 0}},
 1621|       |{(unsigned char*)"pi", {207, 128, 0}},
 1622|       |{(unsigned char*)"pitchfork", {226, 139, 148, 0}},
 1623|       |{(unsigned char*)"piv", {207, 150, 0}},
 1624|       |{(unsigned char*)"planck", {226, 132, 143, 0}},
 1625|       |{(unsigned char*)"planckh", {226, 132, 142, 0}},
 1626|       |{(unsigned char*)"plankv", {226, 132, 143, 0}},
 1627|       |{(unsigned char*)"plus", {43, 0}},
 1628|       |{(unsigned char*)"plusacir", {226, 168, 163, 0}},
 1629|       |{(unsigned char*)"plusb", {226, 138, 158, 0}},
 1630|       |{(unsigned char*)"pluscir", {226, 168, 162, 0}},
 1631|       |{(unsigned char*)"plusdo", {226, 136, 148, 0}},
 1632|       |{(unsigned char*)"plusdu", {226, 168, 165, 0}},
 1633|       |{(unsigned char*)"pluse", {226, 169, 178, 0}},
 1634|       |{(unsigned char*)"plusmn", {194, 177, 0}},
 1635|       |{(unsigned char*)"plussim", {226, 168, 166, 0}},
 1636|       |{(unsigned char*)"plustwo", {226, 168, 167, 0}},
 1637|       |{(unsigned char*)"pm", {194, 177, 0}},
 1638|       |{(unsigned char*)"pointint", {226, 168, 149, 0}},
 1639|       |{(unsigned char*)"popf", {240, 157, 149, 161, 0}},
 1640|       |{(unsigned char*)"pound", {194, 163, 0}},
 1641|       |{(unsigned char*)"pr", {226, 137, 186, 0}},
 1642|       |{(unsigned char*)"prE", {226, 170, 179, 0}},
 1643|       |{(unsigned char*)"prap", {226, 170, 183, 0}},
 1644|       |{(unsigned char*)"prcue", {226, 137, 188, 0}},
 1645|       |{(unsigned char*)"pre", {226, 170, 175, 0}},
 1646|       |{(unsigned char*)"prec", {226, 137, 186, 0}},
 1647|       |{(unsigned char*)"precapprox", {226, 170, 183, 0}},
 1648|       |{(unsigned char*)"preccurlyeq", {226, 137, 188, 0}},
 1649|       |{(unsigned char*)"preceq", {226, 170, 175, 0}},
 1650|       |{(unsigned char*)"precnapprox", {226, 170, 185, 0}},
 1651|       |{(unsigned char*)"precneqq", {226, 170, 181, 0}},
 1652|       |{(unsigned char*)"precnsim", {226, 139, 168, 0}},
 1653|       |{(unsigned char*)"precsim", {226, 137, 190, 0}},
 1654|       |{(unsigned char*)"prime", {226, 128, 178, 0}},
 1655|       |{(unsigned char*)"primes", {226, 132, 153, 0}},
 1656|       |{(unsigned char*)"prnE", {226, 170, 181, 0}},
 1657|       |{(unsigned char*)"prnap", {226, 170, 185, 0}},
 1658|       |{(unsigned char*)"prnsim", {226, 139, 168, 0}},
 1659|       |{(unsigned char*)"prod", {226, 136, 143, 0}},
 1660|       |{(unsigned char*)"profalar", {226, 140, 174, 0}},
 1661|       |{(unsigned char*)"profline", {226, 140, 146, 0}},
 1662|       |{(unsigned char*)"profsurf", {226, 140, 147, 0}},
 1663|       |{(unsigned char*)"prop", {226, 136, 157, 0}},
 1664|       |{(unsigned char*)"propto", {226, 136, 157, 0}},
 1665|       |{(unsigned char*)"prsim", {226, 137, 190, 0}},
 1666|       |{(unsigned char*)"prurel", {226, 138, 176, 0}},
 1667|       |{(unsigned char*)"pscr", {240, 157, 147, 133, 0}},
 1668|       |{(unsigned char*)"psi", {207, 136, 0}},
 1669|       |{(unsigned char*)"puncsp", {226, 128, 136, 0}},
 1670|       |{(unsigned char*)"qfr", {240, 157, 148, 174, 0}},
 1671|       |{(unsigned char*)"qint", {226, 168, 140, 0}},
 1672|       |{(unsigned char*)"qopf", {240, 157, 149, 162, 0}},
 1673|       |{(unsigned char*)"qprime", {226, 129, 151, 0}},
 1674|       |{(unsigned char*)"qscr", {240, 157, 147, 134, 0}},
 1675|       |{(unsigned char*)"quaternions", {226, 132, 141, 0}},
 1676|       |{(unsigned char*)"quatint", {226, 168, 150, 0}},
 1677|       |{(unsigned char*)"quest", {63, 0}},
 1678|       |{(unsigned char*)"questeq", {226, 137, 159, 0}},
 1679|       |{(unsigned char*)"quot", {34, 0}},
 1680|       |{(unsigned char*)"rAarr", {226, 135, 155, 0}},
 1681|       |{(unsigned char*)"rArr", {226, 135, 146, 0}},
 1682|       |{(unsigned char*)"rAtail", {226, 164, 156, 0}},
 1683|       |{(unsigned char*)"rBarr", {226, 164, 143, 0}},
 1684|       |{(unsigned char*)"rHar", {226, 165, 164, 0}},
 1685|       |{(unsigned char*)"race", {226, 136, 189, 204, 177, 0}},
 1686|       |{(unsigned char*)"racute", {197, 149, 0}},
 1687|       |{(unsigned char*)"radic", {226, 136, 154, 0}},
 1688|       |{(unsigned char*)"raemptyv", {226, 166, 179, 0}},
 1689|       |{(unsigned char*)"rang", {226, 159, 169, 0}},
 1690|       |{(unsigned char*)"rangd", {226, 166, 146, 0}},
 1691|       |{(unsigned char*)"range", {226, 166, 165, 0}},
 1692|       |{(unsigned char*)"rangle", {226, 159, 169, 0}},
 1693|       |{(unsigned char*)"raquo", {194, 187, 0}},
 1694|       |{(unsigned char*)"rarr", {226, 134, 146, 0}},
 1695|       |{(unsigned char*)"rarrap", {226, 165, 181, 0}},
 1696|       |{(unsigned char*)"rarrb", {226, 135, 165, 0}},
 1697|       |{(unsigned char*)"rarrbfs", {226, 164, 160, 0}},
 1698|       |{(unsigned char*)"rarrc", {226, 164, 179, 0}},
 1699|       |{(unsigned char*)"rarrfs", {226, 164, 158, 0}},
 1700|       |{(unsigned char*)"rarrhk", {226, 134, 170, 0}},
 1701|       |{(unsigned char*)"rarrlp", {226, 134, 172, 0}},
 1702|       |{(unsigned char*)"rarrpl", {226, 165, 133, 0}},
 1703|       |{(unsigned char*)"rarrsim", {226, 165, 180, 0}},
 1704|       |{(unsigned char*)"rarrtl", {226, 134, 163, 0}},
 1705|       |{(unsigned char*)"rarrw", {226, 134, 157, 0}},
 1706|       |{(unsigned char*)"ratail", {226, 164, 154, 0}},
 1707|       |{(unsigned char*)"ratio", {226, 136, 182, 0}},
 1708|       |{(unsigned char*)"rationals", {226, 132, 154, 0}},
 1709|       |{(unsigned char*)"rbarr", {226, 164, 141, 0}},
 1710|       |{(unsigned char*)"rbbrk", {226, 157, 179, 0}},
 1711|       |{(unsigned char*)"rbrace", {125, 0}},
 1712|       |{(unsigned char*)"rbrack", {93, 0}},
 1713|       |{(unsigned char*)"rbrke", {226, 166, 140, 0}},
 1714|       |{(unsigned char*)"rbrksld", {226, 166, 142, 0}},
 1715|       |{(unsigned char*)"rbrkslu", {226, 166, 144, 0}},
 1716|       |{(unsigned char*)"rcaron", {197, 153, 0}},
 1717|       |{(unsigned char*)"rcedil", {197, 151, 0}},
 1718|       |{(unsigned char*)"rceil", {226, 140, 137, 0}},
 1719|       |{(unsigned char*)"rcub", {125, 0}},
 1720|       |{(unsigned char*)"rcy", {209, 128, 0}},
 1721|       |{(unsigned char*)"rdca", {226, 164, 183, 0}},
 1722|       |{(unsigned char*)"rdldhar", {226, 165, 169, 0}},
 1723|       |{(unsigned char*)"rdquo", {226, 128, 157, 0}},
 1724|       |{(unsigned char*)"rdquor", {226, 128, 157, 0}},
 1725|       |{(unsigned char*)"rdsh", {226, 134, 179, 0}},
 1726|       |{(unsigned char*)"real", {226, 132, 156, 0}},
 1727|       |{(unsigned char*)"realine", {226, 132, 155, 0}},
 1728|       |{(unsigned char*)"realpart", {226, 132, 156, 0}},
 1729|       |{(unsigned char*)"reals", {226, 132, 157, 0}},
 1730|       |{(unsigned char*)"rect", {226, 150, 173, 0}},
 1731|       |{(unsigned char*)"reg", {194, 174, 0}},
 1732|       |{(unsigned char*)"rfisht", {226, 165, 189, 0}},
 1733|       |{(unsigned char*)"rfloor", {226, 140, 139, 0}},
 1734|       |{(unsigned char*)"rfr", {240, 157, 148, 175, 0}},
 1735|       |{(unsigned char*)"rhard", {226, 135, 129, 0}},
 1736|       |{(unsigned char*)"rharu", {226, 135, 128, 0}},
 1737|       |{(unsigned char*)"rharul", {226, 165, 172, 0}},
 1738|       |{(unsigned char*)"rho", {207, 129, 0}},
 1739|       |{(unsigned char*)"rhov", {207, 177, 0}},
 1740|       |{(unsigned char*)"rightarrow", {226, 134, 146, 0}},
 1741|       |{(unsigned char*)"rightarrowtail", {226, 134, 163, 0}},
 1742|       |{(unsigned char*)"rightharpoondown", {226, 135, 129, 0}},
 1743|       |{(unsigned char*)"rightharpoonup", {226, 135, 128, 0}},
 1744|       |{(unsigned char*)"rightleftarrows", {226, 135, 132, 0}},
 1745|       |{(unsigned char*)"rightleftharpoons", {226, 135, 140, 0}},
 1746|       |{(unsigned char*)"rightrightarrows", {226, 135, 137, 0}},
 1747|       |{(unsigned char*)"rightsquigarrow", {226, 134, 157, 0}},
 1748|       |{(unsigned char*)"rightthreetimes", {226, 139, 140, 0}},
 1749|       |{(unsigned char*)"ring", {203, 154, 0}},
 1750|       |{(unsigned char*)"risingdotseq", {226, 137, 147, 0}},
 1751|       |{(unsigned char*)"rlarr", {226, 135, 132, 0}},
 1752|       |{(unsigned char*)"rlhar", {226, 135, 140, 0}},
 1753|       |{(unsigned char*)"rlm", {226, 128, 143, 0}},
 1754|       |{(unsigned char*)"rmoust", {226, 142, 177, 0}},
 1755|       |{(unsigned char*)"rmoustache", {226, 142, 177, 0}},
 1756|       |{(unsigned char*)"rnmid", {226, 171, 174, 0}},
 1757|       |{(unsigned char*)"roang", {226, 159, 173, 0}},
 1758|       |{(unsigned char*)"roarr", {226, 135, 190, 0}},
 1759|       |{(unsigned char*)"robrk", {226, 159, 167, 0}},
 1760|       |{(unsigned char*)"ropar", {226, 166, 134, 0}},
 1761|       |{(unsigned char*)"ropf", {240, 157, 149, 163, 0}},
 1762|       |{(unsigned char*)"roplus", {226, 168, 174, 0}},
 1763|       |{(unsigned char*)"rotimes", {226, 168, 181, 0}},
 1764|       |{(unsigned char*)"rpar", {41, 0}},
 1765|       |{(unsigned char*)"rpargt", {226, 166, 148, 0}},
 1766|       |{(unsigned char*)"rppolint", {226, 168, 146, 0}},
 1767|       |{(unsigned char*)"rrarr", {226, 135, 137, 0}},
 1768|       |{(unsigned char*)"rsaquo", {226, 128, 186, 0}},
 1769|       |{(unsigned char*)"rscr", {240, 157, 147, 135, 0}},
 1770|       |{(unsigned char*)"rsh", {226, 134, 177, 0}},
 1771|       |{(unsigned char*)"rsqb", {93, 0}},
 1772|       |{(unsigned char*)"rsquo", {226, 128, 153, 0}},
 1773|       |{(unsigned char*)"rsquor", {226, 128, 153, 0}},
 1774|       |{(unsigned char*)"rthree", {226, 139, 140, 0}},
 1775|       |{(unsigned char*)"rtimes", {226, 139, 138, 0}},
 1776|       |{(unsigned char*)"rtri", {226, 150, 185, 0}},
 1777|       |{(unsigned char*)"rtrie", {226, 138, 181, 0}},
 1778|       |{(unsigned char*)"rtrif", {226, 150, 184, 0}},
 1779|       |{(unsigned char*)"rtriltri", {226, 167, 142, 0}},
 1780|       |{(unsigned char*)"ruluhar", {226, 165, 168, 0}},
 1781|       |{(unsigned char*)"rx", {226, 132, 158, 0}},
 1782|       |{(unsigned char*)"sacute", {197, 155, 0}},
 1783|       |{(unsigned char*)"sbquo", {226, 128, 154, 0}},
 1784|       |{(unsigned char*)"sc", {226, 137, 187, 0}},
 1785|       |{(unsigned char*)"scE", {226, 170, 180, 0}},
 1786|       |{(unsigned char*)"scap", {226, 170, 184, 0}},
 1787|       |{(unsigned char*)"scaron", {197, 161, 0}},
 1788|       |{(unsigned char*)"sccue", {226, 137, 189, 0}},
 1789|       |{(unsigned char*)"sce", {226, 170, 176, 0}},
 1790|       |{(unsigned char*)"scedil", {197, 159, 0}},
 1791|       |{(unsigned char*)"scirc", {197, 157, 0}},
 1792|       |{(unsigned char*)"scnE", {226, 170, 182, 0}},
 1793|       |{(unsigned char*)"scnap", {226, 170, 186, 0}},
 1794|       |{(unsigned char*)"scnsim", {226, 139, 169, 0}},
 1795|       |{(unsigned char*)"scpolint", {226, 168, 147, 0}},
 1796|       |{(unsigned char*)"scsim", {226, 137, 191, 0}},
 1797|       |{(unsigned char*)"scy", {209, 129, 0}},
 1798|       |{(unsigned char*)"sdot", {226, 139, 133, 0}},
 1799|       |{(unsigned char*)"sdotb", {226, 138, 161, 0}},
 1800|       |{(unsigned char*)"sdote", {226, 169, 166, 0}},
 1801|       |{(unsigned char*)"seArr", {226, 135, 152, 0}},
 1802|       |{(unsigned char*)"searhk", {226, 164, 165, 0}},
 1803|       |{(unsigned char*)"searr", {226, 134, 152, 0}},
 1804|       |{(unsigned char*)"searrow", {226, 134, 152, 0}},
 1805|       |{(unsigned char*)"sect", {194, 167, 0}},
 1806|       |{(unsigned char*)"semi", {59, 0}},
 1807|       |{(unsigned char*)"seswar", {226, 164, 169, 0}},
 1808|       |{(unsigned char*)"setminus", {226, 136, 150, 0}},
 1809|       |{(unsigned char*)"setmn", {226, 136, 150, 0}},
 1810|       |{(unsigned char*)"sext", {226, 156, 182, 0}},
 1811|       |{(unsigned char*)"sfr", {240, 157, 148, 176, 0}},
 1812|       |{(unsigned char*)"sfrown", {226, 140, 162, 0}},
 1813|       |{(unsigned char*)"sharp", {226, 153, 175, 0}},
 1814|       |{(unsigned char*)"shchcy", {209, 137, 0}},
 1815|       |{(unsigned char*)"shcy", {209, 136, 0}},
 1816|       |{(unsigned char*)"shortmid", {226, 136, 163, 0}},
 1817|       |{(unsigned char*)"shortparallel", {226, 136, 165, 0}},
 1818|       |{(unsigned char*)"shy", {194, 173, 0}},
 1819|       |{(unsigned char*)"sigma", {207, 131, 0}},
 1820|       |{(unsigned char*)"sigmaf", {207, 130, 0}},
 1821|       |{(unsigned char*)"sigmav", {207, 130, 0}},
 1822|       |{(unsigned char*)"sim", {226, 136, 188, 0}},
 1823|       |{(unsigned char*)"simdot", {226, 169, 170, 0}},
 1824|       |{(unsigned char*)"sime", {226, 137, 131, 0}},
 1825|       |{(unsigned char*)"simeq", {226, 137, 131, 0}},
 1826|       |{(unsigned char*)"simg", {226, 170, 158, 0}},
 1827|       |{(unsigned char*)"simgE", {226, 170, 160, 0}},
 1828|       |{(unsigned char*)"siml", {226, 170, 157, 0}},
 1829|       |{(unsigned char*)"simlE", {226, 170, 159, 0}},
 1830|       |{(unsigned char*)"simne", {226, 137, 134, 0}},
 1831|       |{(unsigned char*)"simplus", {226, 168, 164, 0}},
 1832|       |{(unsigned char*)"simrarr", {226, 165, 178, 0}},
 1833|       |{(unsigned char*)"slarr", {226, 134, 144, 0}},
 1834|       |{(unsigned char*)"smallsetminus", {226, 136, 150, 0}},
 1835|       |{(unsigned char*)"smashp", {226, 168, 179, 0}},
 1836|       |{(unsigned char*)"smeparsl", {226, 167, 164, 0}},
 1837|       |{(unsigned char*)"smid", {226, 136, 163, 0}},
 1838|       |{(unsigned char*)"smile", {226, 140, 163, 0}},
 1839|       |{(unsigned char*)"smt", {226, 170, 170, 0}},
 1840|       |{(unsigned char*)"smte", {226, 170, 172, 0}},
 1841|       |{(unsigned char*)"smtes", {226, 170, 172, 239, 184, 128, 0}},
 1842|       |{(unsigned char*)"softcy", {209, 140, 0}},
 1843|       |{(unsigned char*)"sol", {47, 0}},
 1844|       |{(unsigned char*)"solb", {226, 167, 132, 0}},
 1845|       |{(unsigned char*)"solbar", {226, 140, 191, 0}},
 1846|       |{(unsigned char*)"sopf", {240, 157, 149, 164, 0}},
 1847|       |{(unsigned char*)"spades", {226, 153, 160, 0}},
 1848|       |{(unsigned char*)"spadesuit", {226, 153, 160, 0}},
 1849|       |{(unsigned char*)"spar", {226, 136, 165, 0}},
 1850|       |{(unsigned char*)"sqcap", {226, 138, 147, 0}},
 1851|       |{(unsigned char*)"sqcaps", {226, 138, 147, 239, 184, 128, 0}},
 1852|       |{(unsigned char*)"sqcup", {226, 138, 148, 0}},
 1853|       |{(unsigned char*)"sqcups", {226, 138, 148, 239, 184, 128, 0}},
 1854|       |{(unsigned char*)"sqsub", {226, 138, 143, 0}},
 1855|       |{(unsigned char*)"sqsube", {226, 138, 145, 0}},
 1856|       |{(unsigned char*)"sqsubset", {226, 138, 143, 0}},
 1857|       |{(unsigned char*)"sqsubseteq", {226, 138, 145, 0}},
 1858|       |{(unsigned char*)"sqsup", {226, 138, 144, 0}},
 1859|       |{(unsigned char*)"sqsupe", {226, 138, 146, 0}},
 1860|       |{(unsigned char*)"sqsupset", {226, 138, 144, 0}},
 1861|       |{(unsigned char*)"sqsupseteq", {226, 138, 146, 0}},
 1862|       |{(unsigned char*)"squ", {226, 150, 161, 0}},
 1863|       |{(unsigned char*)"square", {226, 150, 161, 0}},
 1864|       |{(unsigned char*)"squarf", {226, 150, 170, 0}},
 1865|       |{(unsigned char*)"squf", {226, 150, 170, 0}},
 1866|       |{(unsigned char*)"srarr", {226, 134, 146, 0}},
 1867|       |{(unsigned char*)"sscr", {240, 157, 147, 136, 0}},
 1868|       |{(unsigned char*)"ssetmn", {226, 136, 150, 0}},
 1869|       |{(unsigned char*)"ssmile", {226, 140, 163, 0}},
 1870|       |{(unsigned char*)"sstarf", {226, 139, 134, 0}},
 1871|       |{(unsigned char*)"star", {226, 152, 134, 0}},
 1872|       |{(unsigned char*)"starf", {226, 152, 133, 0}},
 1873|       |{(unsigned char*)"straightepsilon", {207, 181, 0}},
 1874|       |{(unsigned char*)"straightphi", {207, 149, 0}},
 1875|       |{(unsigned char*)"strns", {194, 175, 0}},
 1876|       |{(unsigned char*)"sub", {226, 138, 130, 0}},
 1877|       |{(unsigned char*)"subE", {226, 171, 133, 0}},
 1878|       |{(unsigned char*)"subdot", {226, 170, 189, 0}},
 1879|       |{(unsigned char*)"sube", {226, 138, 134, 0}},
 1880|       |{(unsigned char*)"subedot", {226, 171, 131, 0}},
 1881|       |{(unsigned char*)"submult", {226, 171, 129, 0}},
 1882|       |{(unsigned char*)"subnE", {226, 171, 139, 0}},
 1883|       |{(unsigned char*)"subne", {226, 138, 138, 0}},
 1884|       |{(unsigned char*)"subplus", {226, 170, 191, 0}},
 1885|       |{(unsigned char*)"subrarr", {226, 165, 185, 0}},
 1886|       |{(unsigned char*)"subset", {226, 138, 130, 0}},
 1887|       |{(unsigned char*)"subseteq", {226, 138, 134, 0}},
 1888|       |{(unsigned char*)"subseteqq", {226, 171, 133, 0}},
 1889|       |{(unsigned char*)"subsetneq", {226, 138, 138, 0}},
 1890|       |{(unsigned char*)"subsetneqq", {226, 171, 139, 0}},
 1891|       |{(unsigned char*)"subsim", {226, 171, 135, 0}},
 1892|       |{(unsigned char*)"subsub", {226, 171, 149, 0}},
 1893|       |{(unsigned char*)"subsup", {226, 171, 147, 0}},
 1894|       |{(unsigned char*)"succ", {226, 137, 187, 0}},
 1895|       |{(unsigned char*)"succapprox", {226, 170, 184, 0}},
 1896|       |{(unsigned char*)"succcurlyeq", {226, 137, 189, 0}},
 1897|       |{(unsigned char*)"succeq", {226, 170, 176, 0}},
 1898|       |{(unsigned char*)"succnapprox", {226, 170, 186, 0}},
 1899|       |{(unsigned char*)"succneqq", {226, 170, 182, 0}},
 1900|       |{(unsigned char*)"succnsim", {226, 139, 169, 0}},
 1901|       |{(unsigned char*)"succsim", {226, 137, 191, 0}},
 1902|       |{(unsigned char*)"sum", {226, 136, 145, 0}},
 1903|       |{(unsigned char*)"sung", {226, 153, 170, 0}},
 1904|       |{(unsigned char*)"sup", {226, 138, 131, 0}},
 1905|       |{(unsigned char*)"sup1", {194, 185, 0}},
 1906|       |{(unsigned char*)"sup2", {194, 178, 0}},
 1907|       |{(unsigned char*)"sup3", {194, 179, 0}},
 1908|       |{(unsigned char*)"supE", {226, 171, 134, 0}},
 1909|       |{(unsigned char*)"supdot", {226, 170, 190, 0}},
 1910|       |{(unsigned char*)"supdsub", {226, 171, 152, 0}},
 1911|       |{(unsigned char*)"supe", {226, 138, 135, 0}},
 1912|       |{(unsigned char*)"supedot", {226, 171, 132, 0}},
 1913|       |{(unsigned char*)"suphsol", {226, 159, 137, 0}},
 1914|       |{(unsigned char*)"suphsub", {226, 171, 151, 0}},
 1915|       |{(unsigned char*)"suplarr", {226, 165, 187, 0}},
 1916|       |{(unsigned char*)"supmult", {226, 171, 130, 0}},
 1917|       |{(unsigned char*)"supnE", {226, 171, 140, 0}},
 1918|       |{(unsigned char*)"supne", {226, 138, 139, 0}},
 1919|       |{(unsigned char*)"supplus", {226, 171, 128, 0}},
 1920|       |{(unsigned char*)"supset", {226, 138, 131, 0}},
 1921|       |{(unsigned char*)"supseteq", {226, 138, 135, 0}},
 1922|       |{(unsigned char*)"supseteqq", {226, 171, 134, 0}},
 1923|       |{(unsigned char*)"supsetneq", {226, 138, 139, 0}},
 1924|       |{(unsigned char*)"supsetneqq", {226, 171, 140, 0}},
 1925|       |{(unsigned char*)"supsim", {226, 171, 136, 0}},
 1926|       |{(unsigned char*)"supsub", {226, 171, 148, 0}},
 1927|       |{(unsigned char*)"supsup", {226, 171, 150, 0}},
 1928|       |{(unsigned char*)"swArr", {226, 135, 153, 0}},
 1929|       |{(unsigned char*)"swarhk", {226, 164, 166, 0}},
 1930|       |{(unsigned char*)"swarr", {226, 134, 153, 0}},
 1931|       |{(unsigned char*)"swarrow", {226, 134, 153, 0}},
 1932|       |{(unsigned char*)"swnwar", {226, 164, 170, 0}},
 1933|       |{(unsigned char*)"szlig", {195, 159, 0}},
 1934|       |{(unsigned char*)"target", {226, 140, 150, 0}},
 1935|       |{(unsigned char*)"tau", {207, 132, 0}},
 1936|       |{(unsigned char*)"tbrk", {226, 142, 180, 0}},
 1937|       |{(unsigned char*)"tcaron", {197, 165, 0}},
 1938|       |{(unsigned char*)"tcedil", {197, 163, 0}},
 1939|       |{(unsigned char*)"tcy", {209, 130, 0}},
 1940|       |{(unsigned char*)"tdot", {226, 131, 155, 0}},
 1941|       |{(unsigned char*)"telrec", {226, 140, 149, 0}},
 1942|       |{(unsigned char*)"tfr", {240, 157, 148, 177, 0}},
 1943|       |{(unsigned char*)"there4", {226, 136, 180, 0}},
 1944|       |{(unsigned char*)"therefore", {226, 136, 180, 0}},
 1945|       |{(unsigned char*)"theta", {206, 184, 0}},
 1946|       |{(unsigned char*)"thetasym", {207, 145, 0}},
 1947|       |{(unsigned char*)"thetav", {207, 145, 0}},
 1948|       |{(unsigned char*)"thickapprox", {226, 137, 136, 0}},
 1949|       |{(unsigned char*)"thicksim", {226, 136, 188, 0}},
 1950|       |{(unsigned char*)"thinsp", {226, 128, 137, 0}},
 1951|       |{(unsigned char*)"thkap", {226, 137, 136, 0}},
 1952|       |{(unsigned char*)"thksim", {226, 136, 188, 0}},
 1953|       |{(unsigned char*)"thorn", {195, 190, 0}},
 1954|       |{(unsigned char*)"tilde", {203, 156, 0}},
 1955|       |{(unsigned char*)"times", {195, 151, 0}},
 1956|       |{(unsigned char*)"timesb", {226, 138, 160, 0}},
 1957|       |{(unsigned char*)"timesbar", {226, 168, 177, 0}},
 1958|       |{(unsigned char*)"timesd", {226, 168, 176, 0}},
 1959|       |{(unsigned char*)"tint", {226, 136, 173, 0}},
 1960|       |{(unsigned char*)"toea", {226, 164, 168, 0}},
 1961|       |{(unsigned char*)"top", {226, 138, 164, 0}},
 1962|       |{(unsigned char*)"topbot", {226, 140, 182, 0}},
 1963|       |{(unsigned char*)"topcir", {226, 171, 177, 0}},
 1964|       |{(unsigned char*)"topf", {240, 157, 149, 165, 0}},
 1965|       |{(unsigned char*)"topfork", {226, 171, 154, 0}},
 1966|       |{(unsigned char*)"tosa", {226, 164, 169, 0}},
 1967|       |{(unsigned char*)"tprime", {226, 128, 180, 0}},
 1968|       |{(unsigned char*)"trade", {226, 132, 162, 0}},
 1969|       |{(unsigned char*)"triangle", {226, 150, 181, 0}},
 1970|       |{(unsigned char*)"triangledown", {226, 150, 191, 0}},
 1971|       |{(unsigned char*)"triangleleft", {226, 151, 131, 0}},
 1972|       |{(unsigned char*)"trianglelefteq", {226, 138, 180, 0}},
 1973|       |{(unsigned char*)"triangleq", {226, 137, 156, 0}},
 1974|       |{(unsigned char*)"triangleright", {226, 150, 185, 0}},
 1975|       |{(unsigned char*)"trianglerighteq", {226, 138, 181, 0}},
 1976|       |{(unsigned char*)"tridot", {226, 151, 172, 0}},
 1977|       |{(unsigned char*)"trie", {226, 137, 156, 0}},
 1978|       |{(unsigned char*)"triminus", {226, 168, 186, 0}},
 1979|       |{(unsigned char*)"triplus", {226, 168, 185, 0}},
 1980|       |{(unsigned char*)"trisb", {226, 167, 141, 0}},
 1981|       |{(unsigned char*)"tritime", {226, 168, 187, 0}},
 1982|       |{(unsigned char*)"trpezium", {226, 143, 162, 0}},
 1983|       |{(unsigned char*)"tscr", {240, 157, 147, 137, 0}},
 1984|       |{(unsigned char*)"tscy", {209, 134, 0}},
 1985|       |{(unsigned char*)"tshcy", {209, 155, 0}},
 1986|       |{(unsigned char*)"tstrok", {197, 167, 0}},
 1987|       |{(unsigned char*)"twixt", {226, 137, 172, 0}},
 1988|       |{(unsigned char*)"twoheadleftarrow", {226, 134, 158, 0}},
 1989|       |{(unsigned char*)"twoheadrightarrow", {226, 134, 160, 0}},
 1990|       |{(unsigned char*)"uArr", {226, 135, 145, 0}},
 1991|       |{(unsigned char*)"uHar", {226, 165, 163, 0}},
 1992|       |{(unsigned char*)"uacute", {195, 186, 0}},
 1993|       |{(unsigned char*)"uarr", {226, 134, 145, 0}},
 1994|       |{(unsigned char*)"ubrcy", {209, 158, 0}},
 1995|       |{(unsigned char*)"ubreve", {197, 173, 0}},
 1996|       |{(unsigned char*)"ucirc", {195, 187, 0}},
 1997|       |{(unsigned char*)"ucy", {209, 131, 0}},
 1998|       |{(unsigned char*)"udarr", {226, 135, 133, 0}},
 1999|       |{(unsigned char*)"udblac", {197, 177, 0}},
 2000|       |{(unsigned char*)"udhar", {226, 165, 174, 0}},
 2001|       |{(unsigned char*)"ufisht", {226, 165, 190, 0}},
 2002|       |{(unsigned char*)"ufr", {240, 157, 148, 178, 0}},
 2003|       |{(unsigned char*)"ugrave", {195, 185, 0}},
 2004|       |{(unsigned char*)"uharl", {226, 134, 191, 0}},
 2005|       |{(unsigned char*)"uharr", {226, 134, 190, 0}},
 2006|       |{(unsigned char*)"uhblk", {226, 150, 128, 0}},
 2007|       |{(unsigned char*)"ulcorn", {226, 140, 156, 0}},
 2008|       |{(unsigned char*)"ulcorner", {226, 140, 156, 0}},
 2009|       |{(unsigned char*)"ulcrop", {226, 140, 143, 0}},
 2010|       |{(unsigned char*)"ultri", {226, 151, 184, 0}},
 2011|       |{(unsigned char*)"umacr", {197, 171, 0}},
 2012|       |{(unsigned char*)"uml", {194, 168, 0}},
 2013|       |{(unsigned char*)"uogon", {197, 179, 0}},
 2014|       |{(unsigned char*)"uopf", {240, 157, 149, 166, 0}},
 2015|       |{(unsigned char*)"uparrow", {226, 134, 145, 0}},
 2016|       |{(unsigned char*)"updownarrow", {226, 134, 149, 0}},
 2017|       |{(unsigned char*)"upharpoonleft", {226, 134, 191, 0}},
 2018|       |{(unsigned char*)"upharpoonright", {226, 134, 190, 0}},
 2019|       |{(unsigned char*)"uplus", {226, 138, 142, 0}},
 2020|       |{(unsigned char*)"upsi", {207, 133, 0}},
 2021|       |{(unsigned char*)"upsih", {207, 146, 0}},
 2022|       |{(unsigned char*)"upsilon", {207, 133, 0}},
 2023|       |{(unsigned char*)"upuparrows", {226, 135, 136, 0}},
 2024|       |{(unsigned char*)"urcorn", {226, 140, 157, 0}},
 2025|       |{(unsigned char*)"urcorner", {226, 140, 157, 0}},
 2026|       |{(unsigned char*)"urcrop", {226, 140, 142, 0}},
 2027|       |{(unsigned char*)"uring", {197, 175, 0}},
 2028|       |{(unsigned char*)"urtri", {226, 151, 185, 0}},
 2029|       |{(unsigned char*)"uscr", {240, 157, 147, 138, 0}},
 2030|       |{(unsigned char*)"utdot", {226, 139, 176, 0}},
 2031|       |{(unsigned char*)"utilde", {197, 169, 0}},
 2032|       |{(unsigned char*)"utri", {226, 150, 181, 0}},
 2033|       |{(unsigned char*)"utrif", {226, 150, 180, 0}},
 2034|       |{(unsigned char*)"uuarr", {226, 135, 136, 0}},
 2035|       |{(unsigned char*)"uuml", {195, 188, 0}},
 2036|       |{(unsigned char*)"uwangle", {226, 166, 167, 0}},
 2037|       |{(unsigned char*)"vArr", {226, 135, 149, 0}},
 2038|       |{(unsigned char*)"vBar", {226, 171, 168, 0}},
 2039|       |{(unsigned char*)"vBarv", {226, 171, 169, 0}},
 2040|       |{(unsigned char*)"vDash", {226, 138, 168, 0}},
 2041|       |{(unsigned char*)"vangrt", {226, 166, 156, 0}},
 2042|       |{(unsigned char*)"varepsilon", {207, 181, 0}},
 2043|       |{(unsigned char*)"varkappa", {207, 176, 0}},
 2044|       |{(unsigned char*)"varnothing", {226, 136, 133, 0}},
 2045|       |{(unsigned char*)"varphi", {207, 149, 0}},
 2046|       |{(unsigned char*)"varpi", {207, 150, 0}},
 2047|       |{(unsigned char*)"varpropto", {226, 136, 157, 0}},
 2048|       |{(unsigned char*)"varr", {226, 134, 149, 0}},
 2049|       |{(unsigned char*)"varrho", {207, 177, 0}},
 2050|       |{(unsigned char*)"varsigma", {207, 130, 0}},
 2051|       |{(unsigned char*)"varsubsetneq", {226, 138, 138, 239, 184, 128, 0}},
 2052|       |{(unsigned char*)"varsubsetneqq", {226, 171, 139, 239, 184, 128, 0}},
 2053|       |{(unsigned char*)"varsupsetneq", {226, 138, 139, 239, 184, 128, 0}},
 2054|       |{(unsigned char*)"varsupsetneqq", {226, 171, 140, 239, 184, 128, 0}},
 2055|       |{(unsigned char*)"vartheta", {207, 145, 0}},
 2056|       |{(unsigned char*)"vartriangleleft", {226, 138, 178, 0}},
 2057|       |{(unsigned char*)"vartriangleright", {226, 138, 179, 0}},
 2058|       |{(unsigned char*)"vcy", {208, 178, 0}},
 2059|       |{(unsigned char*)"vdash", {226, 138, 162, 0}},
 2060|       |{(unsigned char*)"vee", {226, 136, 168, 0}},
 2061|       |{(unsigned char*)"veebar", {226, 138, 187, 0}},
 2062|       |{(unsigned char*)"veeeq", {226, 137, 154, 0}},
 2063|       |{(unsigned char*)"vellip", {226, 139, 174, 0}},
 2064|       |{(unsigned char*)"verbar", {124, 0}},
 2065|       |{(unsigned char*)"vert", {124, 0}},
 2066|       |{(unsigned char*)"vfr", {240, 157, 148, 179, 0}},
 2067|       |{(unsigned char*)"vltri", {226, 138, 178, 0}},
 2068|       |{(unsigned char*)"vnsub", {226, 138, 130, 226, 131, 146, 0}},
 2069|       |{(unsigned char*)"vnsup", {226, 138, 131, 226, 131, 146, 0}},
 2070|       |{(unsigned char*)"vopf", {240, 157, 149, 167, 0}},
 2071|       |{(unsigned char*)"vprop", {226, 136, 157, 0}},
 2072|       |{(unsigned char*)"vrtri", {226, 138, 179, 0}},
 2073|       |{(unsigned char*)"vscr", {240, 157, 147, 139, 0}},
 2074|       |{(unsigned char*)"vsubnE", {226, 171, 139, 239, 184, 128, 0}},
 2075|       |{(unsigned char*)"vsubne", {226, 138, 138, 239, 184, 128, 0}},
 2076|       |{(unsigned char*)"vsupnE", {226, 171, 140, 239, 184, 128, 0}},
 2077|       |{(unsigned char*)"vsupne", {226, 138, 139, 239, 184, 128, 0}},
 2078|       |{(unsigned char*)"vzigzag", {226, 166, 154, 0}},
 2079|       |{(unsigned char*)"wcirc", {197, 181, 0}},
 2080|       |{(unsigned char*)"wedbar", {226, 169, 159, 0}},
 2081|       |{(unsigned char*)"wedge", {226, 136, 167, 0}},
 2082|       |{(unsigned char*)"wedgeq", {226, 137, 153, 0}},
 2083|       |{(unsigned char*)"weierp", {226, 132, 152, 0}},
 2084|       |{(unsigned char*)"wfr", {240, 157, 148, 180, 0}},
 2085|       |{(unsigned char*)"wopf", {240, 157, 149, 168, 0}},
 2086|       |{(unsigned char*)"wp", {226, 132, 152, 0}},
 2087|       |{(unsigned char*)"wr", {226, 137, 128, 0}},
 2088|       |{(unsigned char*)"wreath", {226, 137, 128, 0}},
 2089|       |{(unsigned char*)"wscr", {240, 157, 147, 140, 0}},
 2090|       |{(unsigned char*)"xcap", {226, 139, 130, 0}},
 2091|       |{(unsigned char*)"xcirc", {226, 151, 175, 0}},
 2092|       |{(unsigned char*)"xcup", {226, 139, 131, 0}},
 2093|       |{(unsigned char*)"xdtri", {226, 150, 189, 0}},
 2094|       |{(unsigned char*)"xfr", {240, 157, 148, 181, 0}},
 2095|       |{(unsigned char*)"xhArr", {226, 159, 186, 0}},
 2096|       |{(unsigned char*)"xharr", {226, 159, 183, 0}},
 2097|       |{(unsigned char*)"xi", {206, 190, 0}},
 2098|       |{(unsigned char*)"xlArr", {226, 159, 184, 0}},
 2099|       |{(unsigned char*)"xlarr", {226, 159, 181, 0}},
 2100|       |{(unsigned char*)"xmap", {226, 159, 188, 0}},
 2101|       |{(unsigned char*)"xnis", {226, 139, 187, 0}},
 2102|       |{(unsigned char*)"xodot", {226, 168, 128, 0}},
 2103|       |{(unsigned char*)"xopf", {240, 157, 149, 169, 0}},
 2104|       |{(unsigned char*)"xoplus", {226, 168, 129, 0}},
 2105|       |{(unsigned char*)"xotime", {226, 168, 130, 0}},
 2106|       |{(unsigned char*)"xrArr", {226, 159, 185, 0}},
 2107|       |{(unsigned char*)"xrarr", {226, 159, 182, 0}},
 2108|       |{(unsigned char*)"xscr", {240, 157, 147, 141, 0}},
 2109|       |{(unsigned char*)"xsqcup", {226, 168, 134, 0}},
 2110|       |{(unsigned char*)"xuplus", {226, 168, 132, 0}},
 2111|       |{(unsigned char*)"xutri", {226, 150, 179, 0}},
 2112|       |{(unsigned char*)"xvee", {226, 139, 129, 0}},
 2113|       |{(unsigned char*)"xwedge", {226, 139, 128, 0}},
 2114|       |{(unsigned char*)"yacute", {195, 189, 0}},
 2115|       |{(unsigned char*)"yacy", {209, 143, 0}},
 2116|       |{(unsigned char*)"ycirc", {197, 183, 0}},
 2117|       |{(unsigned char*)"ycy", {209, 139, 0}},
 2118|       |{(unsigned char*)"yen", {194, 165, 0}},
 2119|       |{(unsigned char*)"yfr", {240, 157, 148, 182, 0}},
 2120|       |{(unsigned char*)"yicy", {209, 151, 0}},
 2121|       |{(unsigned char*)"yopf", {240, 157, 149, 170, 0}},
 2122|       |{(unsigned char*)"yscr", {240, 157, 147, 142, 0}},
 2123|       |{(unsigned char*)"yucy", {209, 142, 0}},
 2124|       |{(unsigned char*)"yuml", {195, 191, 0}},
 2125|       |{(unsigned char*)"zacute", {197, 186, 0}},
 2126|       |{(unsigned char*)"zcaron", {197, 190, 0}},
 2127|       |{(unsigned char*)"zcy", {208, 183, 0}},
 2128|       |{(unsigned char*)"zdot", {197, 188, 0}},
 2129|       |{(unsigned char*)"zeetrf", {226, 132, 168, 0}},
 2130|       |{(unsigned char*)"zeta", {206, 182, 0}},
 2131|       |{(unsigned char*)"zfr", {240, 157, 148, 183, 0}},
 2132|       |{(unsigned char*)"zhcy", {208, 182, 0}},
 2133|       |{(unsigned char*)"zigrarr", {226, 135, 157, 0}},
 2134|       |{(unsigned char*)"zopf", {240, 157, 149, 171, 0}},
 2135|       |{(unsigned char*)"zscr", {240, 157, 147, 143, 0}},
 2136|       |{(unsigned char*)"zwj", {226, 128, 141, 0}},
 2137|       |{(unsigned char*)"zwnj", {226, 128, 140, 0}},
 2138|       |};

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/houdini.h:
    1|       |#ifndef CMARK_HOUDINI_H
    2|       |#define CMARK_HOUDINI_H
    3|       |
    4|       |#ifdef __cplusplus
    5|       |extern "C" {
    6|       |#endif
    7|       |
    8|       |#include <stdint.h>
    9|       |#include "config.h"
   10|       |#include "buffer.h"
   11|       |
   12|       |#ifdef HAVE___BUILTIN_EXPECT
   13|     16|#define likely(x) __builtin_expect((x), 1)
   14|     16|#define unlikely(x) __builtin_expect((x), 0)
   15|       |#else
   16|       |#define likely(x) (x)
   17|       |#define unlikely(x) (x)
   18|       |#endif
   19|       |
   20|       |#ifdef HOUDINI_USE_LOCALE
   21|       |#define _isxdigit(c) isxdigit(c)
   22|       |#define _isdigit(c) isdigit(c)
   23|       |#else
   24|       |/*
   25|       | * Helper _isdigit methods -- do not trust the current locale
   26|       | * */
   27|      0|#define _isxdigit(c) (strchr("0123456789ABCDEFabcdef", (c)) != NULL)
   28|      0|#define _isdigit(c) ((c) >= '0' && (c) <= '9')
   29|       |#endif
   30|       |
   31|       |#define HOUDINI_ESCAPED_SIZE(x) (((x)*12) / 10)
   32|      0|#define HOUDINI_UNESCAPED_SIZE(x) (x)
   33|       |
   34|       |extern bufsize_t houdini_unescape_ent(cmark_strbuf *ob, const uint8_t *src,
   35|       |                                      bufsize_t size);
   36|       |extern int houdini_escape_html(cmark_strbuf *ob, const uint8_t *src,
   37|       |                               bufsize_t size);
   38|       |extern int houdini_escape_html0(cmark_strbuf *ob, const uint8_t *src,
   39|       |                                bufsize_t size, int secure);
   40|       |extern int houdini_unescape_html(cmark_strbuf *ob, const uint8_t *src,
   41|       |                                 bufsize_t size);
   42|       |extern void houdini_unescape_html_f(cmark_strbuf *ob, const uint8_t *src,
   43|       |                                    bufsize_t size);
   44|       |extern int houdini_escape_href(cmark_strbuf *ob, const uint8_t *src,
   45|       |                               bufsize_t size);
   46|       |
   47|       |#ifdef __cplusplus
   48|       |}
   49|       |#endif
   50|       |
   51|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/houdini_href_e.c:
    1|       |#include <assert.h>
    2|       |#include <stdio.h>
    3|       |#include <string.h>
    4|       |
    5|       |#include "houdini.h"
    6|       |
    7|       |/*
    8|       | * The following characters will not be escaped:
    9|       | *
   10|       | *              -_.+!*'(),%#@?=;:/,+&$~ alphanum
   11|       | *
   12|       | * Note that this character set is the addition of:
   13|       | *
   14|       | *      - The characters which are safe to be in an URL
   15|       | *      - The characters which are *not* safe to be in
   16|       | *      an URL because they are RESERVED characters.
   17|       | *
   18|       | * We assume (lazily) that any RESERVED char that
   19|       | * appears inside an URL is actually meant to
   20|       | * have its native function (i.e. as an URL
   21|       | * component/separator) and hence needs no escaping.
   22|       | *
   23|       | * There are two exceptions: the characters & (amp)
   24|       | * and ' (single quote) do not appear in the table.
   25|       | * They are meant to appear in the URL as components,
   26|       | * yet they require special HTML-entity escaping
   27|       | * to generate valid HTML markup.
   28|       | *
   29|       | * All other characters will be escaped to %XX.
   30|       | *
   31|       | */
   32|       |static const char HREF_SAFE[] = {
   33|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   34|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,
   35|       |    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   36|       |    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,
   37|       |    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   38|       |    1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   39|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   40|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   41|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   42|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   43|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   44|       |};
   45|       |
   46|      0|int houdini_escape_href(cmark_strbuf *ob, const uint8_t *src, bufsize_t size) {
   47|      0|  static const uint8_t hex_chars[] = "0123456789ABCDEF";
   48|      0|  bufsize_t i = 0, org;
   49|      0|  uint8_t hex_str[3];
   50|       |
   51|      0|  hex_str[0] = '%';
   52|       |
   53|      0|  while (i < size) {
   54|      0|    org = i;
   55|      0|    while (i < size && HREF_SAFE[src[i]] != 0)
   56|      0|      i++;
   57|       |
   58|      0|    if (likely(i > org))
   59|      0|      cmark_strbuf_put(ob, src + org, i - org);
   60|       |
   61|       |    /* escaping */
   62|      0|    if (i >= size)
   63|      0|      break;
   64|       |
   65|      0|    switch (src[i]) {
   66|       |    /* amp appears all the time in URLs, but needs
   67|       |     * HTML-entity escaping to be inside an href */
   68|      0|    case '&':
   69|      0|      cmark_strbuf_puts(ob, "&amp;");
   70|      0|      break;
   71|       |
   72|       |    /* the single quote is a valid URL character
   73|       |     * according to the standard; it needs HTML
   74|       |     * entity escaping too */
   75|      0|    case '\'':
   76|      0|      cmark_strbuf_puts(ob, "&#x27;");
   77|      0|      break;
   78|       |
   79|       |/* the space can be escaped to %20 or a plus
   80|       | * sign. we're going with the generic escape
   81|       | * for now. the plus thing is more commonly seen
   82|       | * when building GET strings */
   83|       |#if 0
   84|       |    case ' ':
   85|       |      cmark_strbuf_putc(ob, '+');
   86|       |      break;
   87|       |#endif
   88|       |
   89|       |    /* every other character goes with a %XX escaping */
   90|      0|    default:
   91|      0|      hex_str[1] = hex_chars[(src[i] >> 4) & 0xF];
   92|      0|      hex_str[2] = hex_chars[src[i] & 0xF];
   93|      0|      cmark_strbuf_put(ob, hex_str, 3);
   94|      0|    }
   95|       |
   96|      0|    i++;
   97|      0|  }
   98|       |
   99|      0|  return 1;
  100|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/houdini_html_e.c:
    1|       |#include <assert.h>
    2|       |#include <stdio.h>
    3|       |#include <string.h>
    4|       |
    5|       |#include "houdini.h"
    6|       |
    7|       |/**
    8|       | * According to the OWASP rules:
    9|       | *
   10|       | * & --> &amp;
   11|       | * < --> &lt;
   12|       | * > --> &gt;
   13|       | * " --> &quot;
   14|       | * ' --> &#x27;     &apos; is not recommended
   15|       | * / --> &#x2F;     forward slash is included as it helps end an HTML entity
   16|       | *
   17|       | */
   18|       |static const char HTML_ESCAPE_TABLE[] = {
   19|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   20|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 4,
   21|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   22|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   23|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   24|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   25|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   26|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   27|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   28|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   29|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   30|       |};
   31|       |
   32|       |static const char *HTML_ESCAPES[] = {"",      "&quot;", "&amp;", "&#39;",
   33|       |                                     "&#47;", "&lt;",   "&gt;"};
   34|       |
   35|       |int houdini_escape_html0(cmark_strbuf *ob, const uint8_t *src, bufsize_t size,
   36|      0|                         int secure) {
   37|      0|  bufsize_t i = 0, org, esc = 0;
   38|       |
   39|      0|  while (i < size) {
   40|      0|    org = i;
   41|      0|    while (i < size && (esc = HTML_ESCAPE_TABLE[src[i]]) == 0)
   42|      0|      i++;
   43|       |
   44|      0|    if (i > org)
   45|      0|      cmark_strbuf_put(ob, src + org, i - org);
   46|       |
   47|       |    /* escaping */
   48|      0|    if (unlikely(i >= size))
   49|      0|      break;
   50|       |
   51|       |    /* The forward slash is only escaped in secure mode */
   52|      0|    if ((src[i] == '/' || src[i] == '\'') && !secure) {
   53|      0|      cmark_strbuf_putc(ob, src[i]);
   54|      0|    } else {
   55|      0|      cmark_strbuf_puts(ob, HTML_ESCAPES[esc]);
   56|      0|    }
   57|       |
   58|      0|    i++;
   59|      0|  }
   60|       |
   61|      0|  return 1;
   62|      0|}
   63|       |
   64|      0|int houdini_escape_html(cmark_strbuf *ob, const uint8_t *src, bufsize_t size) {
   65|      0|  return houdini_escape_html0(ob, src, size, 1);
   66|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/houdini_html_u.c:
    1|       |#include <assert.h>
    2|       |#include <stdio.h>
    3|       |#include <string.h>
    4|       |
    5|       |#include "buffer.h"
    6|       |#include "houdini.h"
    7|       |#include "utf8.h"
    8|       |#include "entities.inc"
    9|       |
   10|       |/* Binary tree lookup code for entities added by JGM */
   11|       |
   12|       |static const unsigned char *S_lookup(int i, int low, int hi,
   13|      0|                                     const unsigned char *s, int len) {
   14|      0|  int j;
   15|      0|  int cmp =
   16|      0|      strncmp((const char *)s, (const char *)cmark_entities[i].entity, len);
   17|      0|  if (cmp == 0 && cmark_entities[i].entity[len] == 0) {
   18|      0|    return (const unsigned char *)cmark_entities[i].bytes;
   19|      0|  } else if (cmp <= 0 && i > low) {
   20|      0|    j = i - ((i - low) / 2);
   21|      0|    if (j == i)
   22|      0|      j -= 1;
   23|      0|    return S_lookup(j, low, i - 1, s, len);
   24|      0|  } else if (cmp > 0 && i < hi) {
   25|      0|    j = i + ((hi - i) / 2);
   26|      0|    if (j == i)
   27|      0|      j += 1;
   28|      0|    return S_lookup(j, i + 1, hi, s, len);
   29|      0|  } else {
   30|      0|    return NULL;
   31|      0|  }
   32|      0|}
   33|       |
   34|      0|static const unsigned char *S_lookup_entity(const unsigned char *s, int len) {
   35|      0|  return S_lookup(CMARK_NUM_ENTITIES / 2, 0, CMARK_NUM_ENTITIES - 1, s, len);
   36|      0|}
   37|       |
   38|       |bufsize_t houdini_unescape_ent(cmark_strbuf *ob, const uint8_t *src,
   39|      0|                               bufsize_t size) {
   40|      0|  bufsize_t i = 0;
   41|       |
   42|      0|  if (size >= 3 && src[0] == '#') {
   43|      0|    int codepoint = 0;
   44|      0|    int num_digits = 0;
   45|      0|    int max_digits = 7;
   46|       |
   47|      0|    if (_isdigit(src[1])) {
   48|      0|      for (i = 1; i < size && _isdigit(src[i]); ++i) {
   49|      0|        codepoint = (codepoint * 10) + (src[i] - '0');
   50|       |
   51|      0|        if (codepoint >= 0x110000) {
   52|       |          // Keep counting digits but
   53|       |          // avoid integer overflow.
   54|      0|          codepoint = 0x110000;
   55|      0|        }
   56|      0|      }
   57|       |
   58|      0|      num_digits = i - 1;
   59|      0|      max_digits = 7;
   60|      0|    }
   61|       |
   62|      0|    else if (src[1] == 'x' || src[1] == 'X') {
   63|      0|      for (i = 2; i < size && _isxdigit(src[i]); ++i) {
   64|      0|        codepoint = (codepoint * 16) + ((src[i] | 32) % 39 - 9);
   65|       |
   66|      0|        if (codepoint >= 0x110000) {
   67|       |          // Keep counting digits but
   68|       |          // avoid integer overflow.
   69|      0|          codepoint = 0x110000;
   70|      0|        }
   71|      0|      }
   72|       |
   73|      0|      num_digits = i - 2;
   74|      0|      max_digits = 6;
   75|      0|    }
   76|       |
   77|      0|    if (num_digits >= 1 && num_digits <= max_digits &&
   78|      0|                    i < size && src[i] == ';') {
   79|      0|      if (codepoint == 0 || (codepoint >= 0xD800 && codepoint < 0xE000) ||
   80|      0|          codepoint >= 0x110000) {
   81|      0|        codepoint = 0xFFFD;
   82|      0|      }
   83|      0|      cmark_utf8proc_encode_char(codepoint, ob);
   84|      0|      return i + 1;
   85|      0|    }
   86|      0|  }
   87|       |
   88|      0|  else {
   89|      0|    if (size > CMARK_ENTITY_MAX_LENGTH)
   90|      0|      size = CMARK_ENTITY_MAX_LENGTH;
   91|       |
   92|      0|    for (i = CMARK_ENTITY_MIN_LENGTH; i < size; ++i) {
   93|      0|      if (src[i] == ' ')
   94|      0|        break;
   95|       |
   96|      0|      if (src[i] == ';') {
   97|      0|        const unsigned char *entity = S_lookup_entity(src, i);
   98|       |
   99|      0|        if (entity != NULL) {
  100|      0|          cmark_strbuf_puts(ob, (const char *)entity);
  101|      0|          return i + 1;
  102|      0|        }
  103|       |
  104|      0|        break;
  105|      0|      }
  106|      0|    }
  107|      0|  }
  108|       |
  109|      0|  return 0;
  110|      0|}
  111|       |
  112|       |int houdini_unescape_html(cmark_strbuf *ob, const uint8_t *src,
  113|     16|                          bufsize_t size) {
  114|     16|  bufsize_t i = 0, org, ent;
  115|       |
  116|     16|  while (i < size) {
  117|     16|    org = i;
  118|    820|    while (i < size && src[i] != '&')
  119|    804|      i++;
  120|       |
  121|     16|    if (likely(i > org)) {
  122|     16|      if (unlikely(org == 0)) {
  123|     16|        if (i >= size)
  124|     16|          return 0;
  125|       |
  126|      0|        cmark_strbuf_grow(ob, HOUDINI_UNESCAPED_SIZE(size));
  127|      0|      }
  128|       |
  129|      0|      cmark_strbuf_put(ob, src + org, i - org);
  130|      0|    }
  131|       |
  132|       |    /* escaping */
  133|      0|    if (i >= size)
  134|      0|      break;
  135|       |
  136|      0|    i++;
  137|       |
  138|      0|    ent = houdini_unescape_ent(ob, src + i, size - i);
  139|      0|    i += ent;
  140|       |
  141|       |    /* not really an entity */
  142|      0|    if (ent == 0)
  143|      0|      cmark_strbuf_putc(ob, '&');
  144|      0|  }
  145|       |
  146|      0|  return 1;
  147|     16|}
  148|       |
  149|       |void houdini_unescape_html_f(cmark_strbuf *ob, const uint8_t *src,
  150|     16|                             bufsize_t size) {
  151|     16|  if (!houdini_unescape_html(ob, src, size))
  152|     16|    cmark_strbuf_put(ob, src, size);
  153|     16|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/html.c:
    1|       |#include <stdlib.h>
    2|       |#include <stdio.h>
    3|       |#include <string.h>
    4|       |#include <assert.h>
    5|       |#include "cmark_ctype.h"
    6|       |#include "config.h"
    7|       |#include "cmark.h"
    8|       |#include "node.h"
    9|       |#include "buffer.h"
   10|       |#include "houdini.h"
   11|       |#include "scanners.h"
   12|       |
   13|       |#define BUFFER_SIZE 100
   14|       |
   15|       |// Functions to convert cmark_nodes to HTML strings.
   16|       |
   17|       |static void escape_html(cmark_strbuf *dest, const unsigned char *source,
   18|      0|                        bufsize_t length) {
   19|      0|  houdini_escape_html0(dest, source, length, 0);
   20|      0|}
   21|       |
   22|      0|static CMARK_INLINE void cr(cmark_strbuf *html) {
   23|      0|  if (html->size && html->ptr[html->size - 1] != '\n')
   24|      0|    cmark_strbuf_putc(html, '\n');
   25|      0|}
   26|       |
   27|       |struct render_state {
   28|       |  cmark_strbuf *html;
   29|       |  cmark_node *plain;
   30|       |};
   31|       |
   32|       |static void S_render_sourcepos(cmark_node *node, cmark_strbuf *html,
   33|      0|                               int options) {
   34|      0|  char buffer[BUFFER_SIZE];
   35|      0|  if (CMARK_OPT_SOURCEPOS & options) {
   36|      0|    snprintf(buffer, BUFFER_SIZE, " data-sourcepos=\"%d:%d-%d:%d\"",
   37|      0|             cmark_node_get_start_line(node), cmark_node_get_start_column(node),
   38|      0|             cmark_node_get_end_line(node), cmark_node_get_end_column(node));
   39|      0|    cmark_strbuf_puts(html, buffer);
   40|      0|  }
   41|      0|}
   42|       |
   43|       |static int S_render_node(cmark_node *node, cmark_event_type ev_type,
   44|      0|                         struct render_state *state, int options) {
   45|      0|  cmark_node *parent;
   46|      0|  cmark_node *grandparent;
   47|      0|  cmark_strbuf *html = state->html;
   48|      0|  char start_heading[] = "<h0";
   49|      0|  char end_heading[] = "</h0";
   50|      0|  bool tight;
   51|      0|  char buffer[BUFFER_SIZE];
   52|       |
   53|      0|  bool entering = (ev_type == CMARK_EVENT_ENTER);
   54|       |
   55|      0|  if (state->plain == node) { // back at original node
   56|      0|    state->plain = NULL;
   57|      0|  }
   58|       |
   59|      0|  if (state->plain != NULL) {
   60|      0|    switch (node->type) {
   61|      0|    case CMARK_NODE_TEXT:
   62|      0|    case CMARK_NODE_CODE:
   63|      0|    case CMARK_NODE_HTML_INLINE:
   64|      0|      escape_html(html, node->data, node->len);
   65|      0|      break;
   66|       |
   67|      0|    case CMARK_NODE_LINEBREAK:
   68|      0|    case CMARK_NODE_SOFTBREAK:
   69|      0|      cmark_strbuf_putc(html, ' ');
   70|      0|      break;
   71|       |
   72|      0|    default:
   73|      0|      break;
   74|      0|    }
   75|      0|    return 1;
   76|      0|  }
   77|       |
   78|      0|  switch (node->type) {
   79|      0|  case CMARK_NODE_DOCUMENT:
   80|      0|    break;
   81|       |
   82|      0|  case CMARK_NODE_BLOCK_QUOTE:
   83|      0|    if (entering) {
   84|      0|      cr(html);
   85|      0|      cmark_strbuf_puts(html, "<blockquote");
   86|      0|      S_render_sourcepos(node, html, options);
   87|      0|      cmark_strbuf_puts(html, ">\n");
   88|      0|    } else {
   89|      0|      cr(html);
   90|      0|      cmark_strbuf_puts(html, "</blockquote>\n");
   91|      0|    }
   92|      0|    break;
   93|       |
   94|      0|  case CMARK_NODE_LIST: {
   95|      0|    cmark_list_type list_type = (cmark_list_type)node->as.list.list_type;
   96|      0|    int start = node->as.list.start;
   97|       |
   98|      0|    if (entering) {
   99|      0|      cr(html);
  100|      0|      if (list_type == CMARK_BULLET_LIST) {
  101|      0|        cmark_strbuf_puts(html, "<ul");
  102|      0|        S_render_sourcepos(node, html, options);
  103|      0|        cmark_strbuf_puts(html, ">\n");
  104|      0|      } else if (start == 1) {
  105|      0|        cmark_strbuf_puts(html, "<ol");
  106|      0|        S_render_sourcepos(node, html, options);
  107|      0|        cmark_strbuf_puts(html, ">\n");
  108|      0|      } else {
  109|      0|        snprintf(buffer, BUFFER_SIZE, "<ol start=\"%d\"", start);
  110|      0|        cmark_strbuf_puts(html, buffer);
  111|      0|        S_render_sourcepos(node, html, options);
  112|      0|        cmark_strbuf_puts(html, ">\n");
  113|      0|      }
  114|      0|    } else {
  115|      0|      cmark_strbuf_puts(html,
  116|      0|                        list_type == CMARK_BULLET_LIST ? "</ul>\n" : "</ol>\n");
  117|      0|    }
  118|      0|    break;
  119|      0|  }
  120|       |
  121|      0|  case CMARK_NODE_ITEM:
  122|      0|    if (entering) {
  123|      0|      cr(html);
  124|      0|      cmark_strbuf_puts(html, "<li");
  125|      0|      S_render_sourcepos(node, html, options);
  126|      0|      cmark_strbuf_putc(html, '>');
  127|      0|    } else {
  128|      0|      cmark_strbuf_puts(html, "</li>\n");
  129|      0|    }
  130|      0|    break;
  131|       |
  132|      0|  case CMARK_NODE_HEADING:
  133|      0|    if (entering) {
  134|      0|      cr(html);
  135|      0|      start_heading[2] = (char)('0' + node->as.heading.level);
  136|      0|      cmark_strbuf_puts(html, start_heading);
  137|      0|      S_render_sourcepos(node, html, options);
  138|      0|      cmark_strbuf_putc(html, '>');
  139|      0|    } else {
  140|      0|      end_heading[3] = (char)('0' + node->as.heading.level);
  141|      0|      cmark_strbuf_puts(html, end_heading);
  142|      0|      cmark_strbuf_puts(html, ">\n");
  143|      0|    }
  144|      0|    break;
  145|       |
  146|      0|  case CMARK_NODE_CODE_BLOCK:
  147|      0|    cr(html);
  148|       |
  149|      0|    if (node->as.code.info == NULL || node->as.code.info[0] == 0) {
  150|      0|      cmark_strbuf_puts(html, "<pre");
  151|      0|      S_render_sourcepos(node, html, options);
  152|      0|      cmark_strbuf_puts(html, "><code>");
  153|      0|    } else {
  154|      0|      bufsize_t first_tag = 0;
  155|      0|      while (node->as.code.info[first_tag] &&
  156|      0|             !cmark_isspace(node->as.code.info[first_tag])) {
  157|      0|        first_tag += 1;
  158|      0|      }
  159|       |
  160|      0|      cmark_strbuf_puts(html, "<pre");
  161|      0|      S_render_sourcepos(node, html, options);
  162|      0|      cmark_strbuf_puts(html, "><code class=\"language-");
  163|      0|      escape_html(html, node->as.code.info, first_tag);
  164|      0|      cmark_strbuf_puts(html, "\">");
  165|      0|    }
  166|       |
  167|      0|    escape_html(html, node->data, node->len);
  168|      0|    cmark_strbuf_puts(html, "</code></pre>\n");
  169|      0|    break;
  170|       |
  171|      0|  case CMARK_NODE_HTML_BLOCK:
  172|      0|    cr(html);
  173|      0|    if (!(options & CMARK_OPT_UNSAFE)) {
  174|      0|      cmark_strbuf_puts(html, "<!-- raw HTML omitted -->");
  175|      0|    } else {
  176|      0|      cmark_strbuf_put(html, node->data, node->len);
  177|      0|    }
  178|      0|    cr(html);
  179|      0|    break;
  180|       |
  181|      0|  case CMARK_NODE_CUSTOM_BLOCK: {
  182|      0|    unsigned char *block = entering ? node->as.custom.on_enter :
  183|      0|                                      node->as.custom.on_exit;
  184|      0|    cr(html);
  185|      0|    if (block) {
  186|      0|      cmark_strbuf_puts(html, (char *)block);
  187|      0|    }
  188|      0|    cr(html);
  189|      0|    break;
  190|      0|  }
  191|       |
  192|      0|  case CMARK_NODE_THEMATIC_BREAK:
  193|      0|    cr(html);
  194|      0|    cmark_strbuf_puts(html, "<hr");
  195|      0|    S_render_sourcepos(node, html, options);
  196|      0|    cmark_strbuf_puts(html, " />\n");
  197|      0|    break;
  198|       |
  199|      0|  case CMARK_NODE_PARAGRAPH:
  200|      0|    parent = cmark_node_parent(node);
  201|      0|    grandparent = cmark_node_parent(parent);
  202|      0|    if (grandparent != NULL && grandparent->type == CMARK_NODE_LIST) {
  203|      0|      tight = grandparent->as.list.tight;
  204|      0|    } else {
  205|      0|      tight = false;
  206|      0|    }
  207|      0|    if (!tight) {
  208|      0|      if (entering) {
  209|      0|        cr(html);
  210|      0|        cmark_strbuf_puts(html, "<p");
  211|      0|        S_render_sourcepos(node, html, options);
  212|      0|        cmark_strbuf_putc(html, '>');
  213|      0|      } else {
  214|      0|        cmark_strbuf_puts(html, "</p>\n");
  215|      0|      }
  216|      0|    }
  217|      0|    break;
  218|       |
  219|      0|  case CMARK_NODE_TEXT:
  220|      0|    escape_html(html, node->data, node->len);
  221|      0|    break;
  222|       |
  223|      0|  case CMARK_NODE_LINEBREAK:
  224|      0|    cmark_strbuf_puts(html, "<br />\n");
  225|      0|    break;
  226|       |
  227|      0|  case CMARK_NODE_SOFTBREAK:
  228|      0|    if (options & CMARK_OPT_HARDBREAKS) {
  229|      0|      cmark_strbuf_puts(html, "<br />\n");
  230|      0|    } else if (options & CMARK_OPT_NOBREAKS) {
  231|      0|      cmark_strbuf_putc(html, ' ');
  232|      0|    } else {
  233|      0|      cmark_strbuf_putc(html, '\n');
  234|      0|    }
  235|      0|    break;
  236|       |
  237|      0|  case CMARK_NODE_CODE:
  238|      0|    cmark_strbuf_puts(html, "<code>");
  239|      0|    escape_html(html, node->data, node->len);
  240|      0|    cmark_strbuf_puts(html, "</code>");
  241|      0|    break;
  242|       |
  243|      0|  case CMARK_NODE_HTML_INLINE:
  244|      0|    if (!(options & CMARK_OPT_UNSAFE)) {
  245|      0|      cmark_strbuf_puts(html, "<!-- raw HTML omitted -->");
  246|      0|    } else {
  247|      0|      cmark_strbuf_put(html, node->data, node->len);
  248|      0|    }
  249|      0|    break;
  250|       |
  251|      0|  case CMARK_NODE_CUSTOM_INLINE: {
  252|      0|    unsigned char *block = entering ? node->as.custom.on_enter :
  253|      0|                                      node->as.custom.on_exit;
  254|      0|    if (block) {
  255|      0|      cmark_strbuf_puts(html, (char *)block);
  256|      0|    }
  257|      0|    break;
  258|      0|  }
  259|       |
  260|      0|  case CMARK_NODE_STRONG:
  261|      0|    if (entering) {
  262|      0|      cmark_strbuf_puts(html, "<strong>");
  263|      0|    } else {
  264|      0|      cmark_strbuf_puts(html, "</strong>");
  265|      0|    }
  266|      0|    break;
  267|       |
  268|      0|  case CMARK_NODE_EMPH:
  269|      0|    if (entering) {
  270|      0|      cmark_strbuf_puts(html, "<em>");
  271|      0|    } else {
  272|      0|      cmark_strbuf_puts(html, "</em>");
  273|      0|    }
  274|      0|    break;
  275|       |
  276|      0|  case CMARK_NODE_LINK:
  277|      0|    if (entering) {
  278|      0|      cmark_strbuf_puts(html, "<a href=\"");
  279|      0|      if (node->as.link.url && ((options & CMARK_OPT_UNSAFE) ||
  280|      0|                                !(_scan_dangerous_url(node->as.link.url)))) {
  281|      0|        houdini_escape_href(html, node->as.link.url,
  282|      0|                            strlen((char *)node->as.link.url));
  283|      0|      }
  284|      0|      if (node->as.link.title) {
  285|      0|        cmark_strbuf_puts(html, "\" title=\"");
  286|      0|        escape_html(html, node->as.link.title,
  287|      0|                    strlen((char *)node->as.link.title));
  288|      0|      }
  289|      0|      cmark_strbuf_puts(html, "\">");
  290|      0|    } else {
  291|      0|      cmark_strbuf_puts(html, "</a>");
  292|      0|    }
  293|      0|    break;
  294|       |
  295|      0|  case CMARK_NODE_IMAGE:
  296|      0|    if (entering) {
  297|      0|      cmark_strbuf_puts(html, "<img src=\"");
  298|      0|      if (node->as.link.url && ((options & CMARK_OPT_UNSAFE) ||
  299|      0|                                !(_scan_dangerous_url(node->as.link.url)))) {
  300|      0|        houdini_escape_href(html, node->as.link.url,
  301|      0|                            strlen((char *)node->as.link.url));
  302|      0|      }
  303|      0|      cmark_strbuf_puts(html, "\" alt=\"");
  304|      0|      state->plain = node;
  305|      0|    } else {
  306|      0|      if (node->as.link.title) {
  307|      0|        cmark_strbuf_puts(html, "\" title=\"");
  308|      0|        escape_html(html, node->as.link.title,
  309|      0|                    strlen((char *)node->as.link.title));
  310|      0|      }
  311|       |
  312|      0|      cmark_strbuf_puts(html, "\" />");
  313|      0|    }
  314|      0|    break;
  315|       |
  316|      0|  default:
  317|      0|    assert(false);
  318|      0|    break;
  319|      0|  }
  320|       |
  321|       |  // cmark_strbuf_putc(html, 'x');
  322|      0|  return 1;
  323|      0|}
  324|       |
  325|      0|char *cmark_render_html(cmark_node *root, int options) {
  326|      0|  char *result;
  327|      0|  cmark_strbuf html = CMARK_BUF_INIT(root->mem);
  328|      0|  cmark_event_type ev_type;
  329|      0|  cmark_node *cur;
  330|      0|  struct render_state state = {&html, NULL};
  331|      0|  cmark_iter *iter = cmark_iter_new(root);
  332|       |
  333|      0|  while ((ev_type = cmark_iter_next(iter)) != CMARK_EVENT_DONE) {
  334|      0|    cur = cmark_iter_get_node(iter);
  335|      0|    S_render_node(cur, ev_type, &state, options);
  336|      0|  }
  337|      0|  result = (char *)cmark_strbuf_detach(&html);
  338|       |
  339|      0|  cmark_iter_free(iter);
  340|      0|  return result;
  341|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/include/cmark_version.h:
    1|       |#ifndef CMARK_VERSION_H
    2|       |#define CMARK_VERSION_H
    3|       |
    4|      0|#define CMARK_VERSION ((0 << 16) | (30 << 8)  | 2)
    5|      0|#define CMARK_VERSION_STRING "0.30.2"
    6|       |
    7|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/inlines.c:
    1|       |#include <stdlib.h>
    2|       |#include <string.h>
    3|       |#include <stdio.h>
    4|       |
    5|       |#include "cmark_ctype.h"
    6|       |#include "config.h"
    7|       |#include "node.h"
    8|       |#include "parser.h"
    9|       |#include "references.h"
   10|       |#include "cmark.h"
   11|       |#include "houdini.h"
   12|       |#include "utf8.h"
   13|       |#include "scanners.h"
   14|       |#include "inlines.h"
   15|       |
   16|       |static const char *EMDASH = "\xE2\x80\x94";
   17|       |static const char *ENDASH = "\xE2\x80\x93";
   18|       |static const char *ELLIPSES = "\xE2\x80\xA6";
   19|       |static const char *LEFTDOUBLEQUOTE = "\xE2\x80\x9C";
   20|       |static const char *RIGHTDOUBLEQUOTE = "\xE2\x80\x9D";
   21|       |static const char *LEFTSINGLEQUOTE = "\xE2\x80\x98";
   22|       |static const char *RIGHTSINGLEQUOTE = "\xE2\x80\x99";
   23|       |
   24|       |// Macros for creating various kinds of simple.
   25|      0|#define make_linebreak(mem) make_simple(mem, CMARK_NODE_LINEBREAK)
   26|      0|#define make_softbreak(mem) make_simple(mem, CMARK_NODE_SOFTBREAK)
   27|      0|#define make_emph(mem) make_simple(mem, CMARK_NODE_EMPH)
   28|      0|#define make_strong(mem) make_simple(mem, CMARK_NODE_STRONG)
   29|       |
   30|  44.0k|#define MAXBACKTICKS 1000
   31|       |
   32|       |typedef struct delimiter {
   33|       |  struct delimiter *previous;
   34|       |  struct delimiter *next;
   35|       |  cmark_node *inl_text;
   36|       |  bufsize_t position;
   37|       |  bufsize_t length;
   38|       |  unsigned char delim_char;
   39|       |  bool can_open;
   40|       |  bool can_close;
   41|       |} delimiter;
   42|       |
   43|       |typedef struct bracket {
   44|       |  struct bracket *previous;
   45|       |  cmark_node *inl_text;
   46|       |  bufsize_t position;
   47|       |  bool image;
   48|       |  bool active;
   49|       |  bool bracket_after;
   50|       |} bracket;
   51|       |
   52|      0|#define FLAG_SKIP_HTML_CDATA        (1u << 0)
   53|      0|#define FLAG_SKIP_HTML_DECLARATION  (1u << 1)
   54|      0|#define FLAG_SKIP_HTML_PI           (1u << 2)
   55|       |
   56|       |typedef struct {
   57|       |  cmark_mem *mem;
   58|       |  cmark_chunk input;
   59|       |  unsigned flags;
   60|       |  int line;
   61|       |  bufsize_t pos;
   62|       |  int block_offset;
   63|       |  int column_offset;
   64|       |  cmark_reference_map *refmap;
   65|       |  delimiter *last_delim;
   66|       |  bracket *last_bracket;
   67|       |  bufsize_t backticks[MAXBACKTICKS + 1];
   68|       |  bool scanned_for_backticks;
   69|       |} subject;
   70|       |
   71|     64|static CMARK_INLINE bool S_is_line_end_char(char c) {
   72|     64|  return (c == '\n' || c == '\r');
   73|     64|}
   74|       |
   75|       |static delimiter *S_insert_emph(subject *subj, delimiter *opener,
   76|       |                                delimiter *closer);
   77|       |
   78|       |static int parse_inline(subject *subj, cmark_node *parent, int options);
   79|       |
   80|       |static void subject_from_buf(cmark_mem *mem, int line_number, int block_offset, subject *e,
   81|       |                             cmark_chunk *chunk, cmark_reference_map *refmap);
   82|       |static bufsize_t subject_find_special_char(subject *subj, int options);
   83|       |
   84|       |// Create an inline with a literal string value.
   85|       |static CMARK_INLINE cmark_node *make_literal(subject *subj, cmark_node_type t,
   86|     80|                                             int start_column, int end_column) {
   87|     80|  cmark_node *e = (cmark_node *)subj->mem->calloc(1, sizeof(*e));
   88|     80|  e->mem = subj->mem;
   89|     80|  e->type = (uint16_t)t;
   90|     80|  e->start_line = e->end_line = subj->line;
   91|       |  // columns are 1 based.
   92|     80|  e->start_column = start_column + 1 + subj->column_offset + subj->block_offset;
   93|     80|  e->end_column = end_column + 1 + subj->column_offset + subj->block_offset;
   94|     80|  return e;
   95|     80|}
   96|       |
   97|       |// Create an inline with no value.
   98|     16|static CMARK_INLINE cmark_node *make_simple(cmark_mem *mem, cmark_node_type t) {
   99|     16|  cmark_node *e = (cmark_node *)mem->calloc(1, sizeof(*e));
  100|     16|  e->mem = mem;
  101|     16|  e->type = t;
  102|     16|  return e;
  103|     16|}
  104|       |
  105|     80|static cmark_node *make_str(subject *subj, int sc, int ec, cmark_chunk s) {
  106|     80|  cmark_node *e = make_literal(subj, CMARK_NODE_TEXT, sc, ec);
  107|     80|  e->data = (unsigned char *)subj->mem->realloc(NULL, s.len + 1);
  108|     80|  if (s.data != NULL) {
  109|     80|    memcpy(e->data, s.data, s.len);
  110|     80|  }
  111|     80|  e->data[s.len] = 0;
  112|     80|  e->len = s.len;
  113|     80|  return e;
  114|     80|}
  115|       |
  116|       |static cmark_node *make_str_from_buf(subject *subj, int sc, int ec,
  117|      0|                                     cmark_strbuf *buf) {
  118|      0|  cmark_node *e = make_literal(subj, CMARK_NODE_TEXT, sc, ec);
  119|      0|  e->len = buf->size;
  120|      0|  e->data = cmark_strbuf_detach(buf);
  121|      0|  return e;
  122|      0|}
  123|       |
  124|       |// Like make_str, but parses entities.
  125|       |static cmark_node *make_str_with_entities(subject *subj,
  126|       |                                          int start_column, int end_column,
  127|      0|                                          cmark_chunk *content) {
  128|      0|  cmark_strbuf unescaped = CMARK_BUF_INIT(subj->mem);
  129|       |
  130|      0|  if (houdini_unescape_html(&unescaped, content->data, content->len)) {
  131|      0|    return make_str_from_buf(subj, start_column, end_column, &unescaped);
  132|      0|  } else {
  133|      0|    return make_str(subj, start_column, end_column, *content);
  134|      0|  }
  135|      0|}
  136|       |
  137|       |// Like cmark_node_append_child but without costly sanity checks.
  138|       |// Assumes that child was newly created.
  139|     96|static void append_child(cmark_node *node, cmark_node *child) {
  140|     96|  cmark_node *old_last_child = node->last_child;
  141|       |
  142|     96|  child->next = NULL;
  143|     96|  child->prev = old_last_child;
  144|     96|  child->parent = node;
  145|     96|  node->last_child = child;
  146|       |
  147|     96|  if (old_last_child) {
  148|     40|    old_last_child->next = child;
  149|     56|  } else {
  150|       |    // Also set first_child if node previously had no children.
  151|     56|    node->first_child = child;
  152|     56|  }
  153|     96|}
  154|       |
  155|       |// Duplicate a chunk by creating a copy of the buffer not by reusing the
  156|       |// buffer like cmark_chunk_dup does.
  157|      0|static unsigned char *cmark_strdup(cmark_mem *mem, unsigned char *src) {
  158|      0|  if (src == NULL) {
  159|      0|    return NULL;
  160|      0|  }
  161|      0|  size_t len = strlen((char *)src);
  162|      0|  unsigned char *data = (unsigned char *)mem->realloc(NULL, len + 1);
  163|      0|  memcpy(data, src, len + 1);
  164|      0|  return data;
  165|      0|}
  166|       |
  167|       |static unsigned char *cmark_clean_autolink(cmark_mem *mem, cmark_chunk *url,
  168|      0|                                           int is_email) {
  169|      0|  cmark_strbuf buf = CMARK_BUF_INIT(mem);
  170|       |
  171|      0|  cmark_chunk_trim(url);
  172|       |
  173|      0|  if (is_email)
  174|      0|    cmark_strbuf_puts(&buf, "mailto:");
  175|       |
  176|      0|  houdini_unescape_html_f(&buf, url->data, url->len);
  177|      0|  return cmark_strbuf_detach(&buf);
  178|      0|}
  179|       |
  180|       |static CMARK_INLINE cmark_node *make_autolink(subject *subj,
  181|       |                                              int start_column, int end_column,
  182|      0|                                              cmark_chunk url, int is_email) {
  183|      0|  cmark_node *link = make_simple(subj->mem, CMARK_NODE_LINK);
  184|      0|  link->as.link.url = cmark_clean_autolink(subj->mem, &url, is_email);
  185|      0|  link->as.link.title = NULL;
  186|      0|  link->start_line = link->end_line = subj->line;
  187|      0|  link->start_column = start_column + 1;
  188|      0|  link->end_column = end_column + 1;
  189|      0|  append_child(link, make_str_with_entities(subj, start_column + 1, end_column - 1, &url));
  190|      0|  return link;
  191|      0|}
  192|       |
  193|       |static void subject_from_buf(cmark_mem *mem, int line_number, int block_offset, subject *e,
  194|     44|                             cmark_chunk *chunk, cmark_reference_map *refmap) {
  195|     44|  int i;
  196|     44|  e->mem = mem;
  197|     44|  e->input = *chunk;
  198|     44|  e->flags = 0;
  199|     44|  e->line = line_number;
  200|     44|  e->pos = 0;
  201|     44|  e->block_offset = block_offset;
  202|     44|  e->column_offset = 0;
  203|     44|  e->refmap = refmap;
  204|     44|  e->last_delim = NULL;
  205|     44|  e->last_bracket = NULL;
  206|  44.0k|  for (i = 0; i <= MAXBACKTICKS; i++) {
  207|  44.0k|    e->backticks[i] = 0;
  208|  44.0k|  }
  209|     44|  e->scanned_for_backticks = false;
  210|     44|}
  211|       |
  212|      0|static CMARK_INLINE int isbacktick(int c) { return (c == '`'); }
  213|       |
  214|    288|static CMARK_INLINE unsigned char peek_char(subject *subj) {
  215|       |  // NULL bytes should have been stripped out by now.  If they're
  216|       |  // present, it's a programming error:
  217|    288|  assert(!(subj->pos < subj->input.len && subj->input.data[subj->pos] == 0));
  218|    288|  return (subj->pos < subj->input.len) ? subj->input.data[subj->pos] : 0;
  219|    288|}
  220|       |
  221|     16|static CMARK_INLINE unsigned char peek_at(subject *subj, bufsize_t pos) {
  222|     16|  return subj->input.data[pos];
  223|     16|}
  224|       |
  225|       |// Return true if there are more characters in the subject.
  226|    136|static CMARK_INLINE int is_eof(subject *subj) {
  227|    136|  return (subj->pos >= subj->input.len);
  228|    136|}
  229|       |
  230|       |// Advance the subject.  Doesn't check for eof.
  231|    140|#define advance(subj) (subj)->pos += 1
  232|       |
  233|      0|static CMARK_INLINE bool skip_spaces(subject *subj) {
  234|      0|  bool skipped = false;
  235|      0|  while (peek_char(subj) == ' ' || peek_char(subj) == '\t') {
  236|      0|    advance(subj);
  237|      0|    skipped = true;
  238|      0|  }
  239|      0|  return skipped;
  240|      0|}
  241|       |
  242|      0|static CMARK_INLINE bool skip_line_end(subject *subj) {
  243|      0|  bool seen_line_end_char = false;
  244|      0|  if (peek_char(subj) == '\r') {
  245|      0|    advance(subj);
  246|      0|    seen_line_end_char = true;
  247|      0|  }
  248|      0|  if (peek_char(subj) == '\n') {
  249|      0|    advance(subj);
  250|      0|    seen_line_end_char = true;
  251|      0|  }
  252|      0|  return seen_line_end_char || is_eof(subj);
  253|      0|}
  254|       |
  255|       |// Take characters while a predicate holds, and return a string.
  256|      0|static CMARK_INLINE cmark_chunk take_while(subject *subj, int (*f)(int)) {
  257|      0|  unsigned char c;
  258|      0|  bufsize_t startpos = subj->pos;
  259|      0|  bufsize_t len = 0;
  260|       |
  261|      0|  while ((c = peek_char(subj)) && (*f)(c)) {
  262|      0|    advance(subj);
  263|      0|    len++;
  264|      0|  }
  265|       |
  266|      0|  return cmark_chunk_dup(&subj->input, startpos, len);
  267|      0|}
  268|       |
  269|       |// Return the number of newlines in a given span of text in a subject.  If
  270|       |// the number is greater than zero, also return the number of characters
  271|       |// between the last newline and the end of the span in `since_newline`.
  272|      0|static int count_newlines(subject *subj, bufsize_t from, bufsize_t len, int *since_newline) {
  273|      0|  int nls = 0;
  274|      0|  int since_nl = 0;
  275|       |
  276|      0|  while (len--) {
  277|      0|    if (subj->input.data[from++] == '\n') {
  278|      0|      ++nls;
  279|      0|      since_nl = 0;
  280|      0|    } else {
  281|      0|      ++since_nl;
  282|      0|    }
  283|      0|  }
  284|       |
  285|      0|  if (!nls)
  286|      0|    return 0;
  287|       |
  288|      0|  *since_newline = since_nl;
  289|      0|  return nls;
  290|      0|}
  291|       |
  292|       |// Adjust `node`'s `end_line`, `end_column`, and `subj`'s `line` and
  293|       |// `column_offset` according to the number of newlines in a just-matched span
  294|       |// of text in `subj`.
  295|      0|static void adjust_subj_node_newlines(subject *subj, cmark_node *node, int matchlen, int extra, int options) {
  296|      0|  if (!(options & CMARK_OPT_SOURCEPOS)) {
  297|      0|    return;
  298|      0|  }
  299|       |
  300|      0|  int since_newline;
  301|      0|  int newlines = count_newlines(subj, subj->pos - matchlen - extra, matchlen, &since_newline);
  302|      0|  if (newlines) {
  303|      0|    subj->line += newlines;
  304|      0|    node->end_line += newlines;
  305|      0|    node->end_column = since_newline;
  306|      0|    subj->column_offset = -subj->pos + since_newline + extra;
  307|      0|  }
  308|      0|}
  309|       |
  310|       |// Try to process a backtick code span that began with a
  311|       |// span of ticks of length openticklength length (already
  312|       |// parsed).  Return 0 if you don't find matching closing
  313|       |// backticks, otherwise return the position in the subject
  314|       |// after the closing backticks.
  315|       |static bufsize_t scan_to_closing_backticks(subject *subj,
  316|      0|                                           bufsize_t openticklength) {
  317|       |
  318|      0|  bool found = false;
  319|      0|  if (openticklength > MAXBACKTICKS) {
  320|       |    // we limit backtick string length because of the array subj->backticks:
  321|      0|    return 0;
  322|      0|  }
  323|      0|  if (subj->scanned_for_backticks &&
  324|      0|      subj->backticks[openticklength] <= subj->pos) {
  325|       |    // return if we already know there's no closer
  326|      0|    return 0;
  327|      0|  }
  328|      0|  while (!found) {
  329|       |    // read non backticks
  330|      0|    unsigned char c;
  331|      0|    while ((c = peek_char(subj)) && c != '`') {
  332|      0|      advance(subj);
  333|      0|    }
  334|      0|    if (is_eof(subj)) {
  335|      0|      break;
  336|      0|    }
  337|      0|    bufsize_t numticks = 0;
  338|      0|    while (peek_char(subj) == '`') {
  339|      0|      advance(subj);
  340|      0|      numticks++;
  341|      0|    }
  342|       |    // store position of ender
  343|      0|    if (numticks <= MAXBACKTICKS) {
  344|      0|      subj->backticks[numticks] = subj->pos - numticks;
  345|      0|    }
  346|      0|    if (numticks == openticklength) {
  347|      0|      return (subj->pos);
  348|      0|    }
  349|      0|  }
  350|       |  // got through whole input without finding closer
  351|      0|  subj->scanned_for_backticks = true;
  352|      0|  return 0;
  353|      0|}
  354|       |
  355|       |// Destructively modify string, converting newlines to
  356|       |// spaces, then removing a single leading + trailing space,
  357|       |// unless the code span consists entirely of space characters.
  358|      0|static void S_normalize_code(cmark_strbuf *s) {
  359|      0|  bufsize_t r, w;
  360|      0|  bool contains_nonspace = false;
  361|       |
  362|      0|  for (r = 0, w = 0; r < s->size; ++r) {
  363|      0|    switch (s->ptr[r]) {
  364|      0|    case '\r':
  365|      0|      if (s->ptr[r + 1] != '\n') {
  366|      0|        s->ptr[w++] = ' ';
  367|      0|      }
  368|      0|      break;
  369|      0|    case '\n':
  370|      0|      s->ptr[w++] = ' ';
  371|      0|      break;
  372|      0|    default:
  373|      0|      s->ptr[w++] = s->ptr[r];
  374|      0|    }
  375|      0|    if (s->ptr[r] != ' ') {
  376|      0|      contains_nonspace = true;
  377|      0|    }
  378|      0|  }
  379|       |
  380|       |  // begins and ends with space?
  381|      0|  if (contains_nonspace &&
  382|      0|      s->ptr[0] == ' ' && s->ptr[w - 1] == ' ') {
  383|      0|    cmark_strbuf_drop(s, 1);
  384|      0|    cmark_strbuf_truncate(s, w - 2);
  385|      0|  } else {
  386|      0|    cmark_strbuf_truncate(s, w);
  387|      0|  }
  388|       |
  389|      0|}
  390|       |
  391|       |
  392|       |// Parse backtick code section or raw backticks, return an inline.
  393|       |// Assumes that the subject has a backtick at the current position.
  394|      0|static cmark_node *handle_backticks(subject *subj, int options) {
  395|      0|  cmark_chunk openticks = take_while(subj, isbacktick);
  396|      0|  bufsize_t startpos = subj->pos;
  397|      0|  bufsize_t endpos = scan_to_closing_backticks(subj, openticks.len);
  398|       |
  399|      0|  if (endpos == 0) {      // not found
  400|      0|    subj->pos = startpos; // rewind
  401|      0|    return make_str(subj, subj->pos, subj->pos, openticks);
  402|      0|  } else {
  403|      0|    cmark_strbuf buf = CMARK_BUF_INIT(subj->mem);
  404|       |
  405|      0|    cmark_strbuf_set(&buf, subj->input.data + startpos,
  406|      0|                     endpos - startpos - openticks.len);
  407|      0|    S_normalize_code(&buf);
  408|       |
  409|      0|    cmark_node *node = make_literal(subj, CMARK_NODE_CODE, startpos,
  410|      0|                                    endpos - openticks.len - 1);
  411|      0|    node->len = buf.size;
  412|      0|    node->data = cmark_strbuf_detach(&buf);
  413|      0|    adjust_subj_node_newlines(subj, node, endpos - startpos, openticks.len, options);
  414|      0|    return node;
  415|      0|  }
  416|      0|}
  417|       |
  418|       |
  419|       |// Scan ***, **, or * and return number scanned, or 0.
  420|       |// Advances position.
  421|       |static int scan_delims(subject *subj, unsigned char c, bool *can_open,
  422|      0|                       bool *can_close) {
  423|      0|  int numdelims = 0;
  424|      0|  bufsize_t before_char_pos;
  425|      0|  int32_t after_char = 0;
  426|      0|  int32_t before_char = 0;
  427|      0|  int len;
  428|      0|  bool left_flanking, right_flanking;
  429|       |
  430|      0|  if (subj->pos == 0) {
  431|      0|    before_char = 10;
  432|      0|  } else {
  433|      0|    before_char_pos = subj->pos - 1;
  434|       |    // walk back to the beginning of the UTF_8 sequence:
  435|      0|    while (peek_at(subj, before_char_pos) >> 6 == 2 && before_char_pos > 0) {
  436|      0|      before_char_pos -= 1;
  437|      0|    }
  438|      0|    len = cmark_utf8proc_iterate(subj->input.data + before_char_pos,
  439|      0|                                 subj->pos - before_char_pos, &before_char);
  440|      0|    if (len == -1) {
  441|      0|      before_char = 10;
  442|      0|    }
  443|      0|  }
  444|       |
  445|      0|  if (c == '\'' || c == '"') {
  446|      0|    numdelims++;
  447|      0|    advance(subj); // limit to 1 delim for quotes
  448|      0|  } else {
  449|      0|    while (peek_char(subj) == c) {
  450|      0|      numdelims++;
  451|      0|      advance(subj);
  452|      0|    }
  453|      0|  }
  454|       |
  455|      0|  len = cmark_utf8proc_iterate(subj->input.data + subj->pos,
  456|      0|                               subj->input.len - subj->pos, &after_char);
  457|      0|  if (len == -1) {
  458|      0|    after_char = 10;
  459|      0|  }
  460|      0|  left_flanking = numdelims > 0 && !cmark_utf8proc_is_space(after_char) &&
  461|      0|                  (!cmark_utf8proc_is_punctuation(after_char) ||
  462|      0|                   cmark_utf8proc_is_space(before_char) ||
  463|      0|                   cmark_utf8proc_is_punctuation(before_char));
  464|      0|  right_flanking = numdelims > 0 && !cmark_utf8proc_is_space(before_char) &&
  465|      0|                   (!cmark_utf8proc_is_punctuation(before_char) ||
  466|      0|                    cmark_utf8proc_is_space(after_char) ||
  467|      0|                    cmark_utf8proc_is_punctuation(after_char));
  468|      0|  if (c == '_') {
  469|      0|    *can_open = left_flanking &&
  470|      0|                (!right_flanking || cmark_utf8proc_is_punctuation(before_char));
  471|      0|    *can_close = right_flanking &&
  472|      0|                 (!left_flanking || cmark_utf8proc_is_punctuation(after_char));
  473|      0|  } else if (c == '\'' || c == '"') {
  474|      0|    *can_open = left_flanking &&
  475|      0|         (!right_flanking || before_char == '(' || before_char == '[') &&
  476|      0|         before_char != ']' && before_char != ')';
  477|      0|    *can_close = right_flanking;
  478|      0|  } else {
  479|      0|    *can_open = left_flanking;
  480|      0|    *can_close = right_flanking;
  481|      0|  }
  482|      0|  return numdelims;
  483|      0|}
  484|       |
  485|       |/*
  486|       |static void print_delimiters(subject *subj)
  487|       |{
  488|       |        delimiter *delim;
  489|       |        delim = subj->last_delim;
  490|       |        while (delim != NULL) {
  491|       |                printf("Item at stack pos %p: %d %d %d next(%p) prev(%p)\n",
  492|       |                       (void*)delim, delim->delim_char,
  493|       |                       delim->can_open, delim->can_close,
  494|       |                       (void*)delim->next, (void*)delim->previous);
  495|       |                delim = delim->previous;
  496|       |        }
  497|       |}
  498|       |*/
  499|       |
  500|      0|static void remove_delimiter(subject *subj, delimiter *delim) {
  501|      0|  if (delim == NULL)
  502|      0|    return;
  503|      0|  if (delim->next == NULL) {
  504|       |    // end of list:
  505|      0|    assert(delim == subj->last_delim);
  506|      0|    subj->last_delim = delim->previous;
  507|      0|  } else {
  508|      0|    delim->next->previous = delim->previous;
  509|      0|  }
  510|      0|  if (delim->previous != NULL) {
  511|      0|    delim->previous->next = delim->next;
  512|      0|  }
  513|      0|  subj->mem->free(delim);
  514|      0|}
  515|       |
  516|     16|static void pop_bracket(subject *subj) {
  517|     16|  bracket *b;
  518|     16|  if (subj->last_bracket == NULL)
  519|      0|    return;
  520|     16|  b = subj->last_bracket;
  521|     16|  subj->last_bracket = subj->last_bracket->previous;
  522|     16|  subj->mem->free(b);
  523|     16|}
  524|       |
  525|       |static void push_delimiter(subject *subj, unsigned char c, bool can_open,
  526|      0|                           bool can_close, cmark_node *inl_text) {
  527|      0|  delimiter *delim = (delimiter *)subj->mem->calloc(1, sizeof(delimiter));
  528|      0|  delim->delim_char = c;
  529|      0|  delim->can_open = can_open;
  530|      0|  delim->can_close = can_close;
  531|      0|  delim->inl_text = inl_text;
  532|      0|  delim->position = subj->pos;
  533|      0|  delim->length = inl_text->len;
  534|      0|  delim->previous = subj->last_delim;
  535|      0|  delim->next = NULL;
  536|      0|  if (delim->previous != NULL) {
  537|      0|    delim->previous->next = delim;
  538|      0|  }
  539|      0|  subj->last_delim = delim;
  540|      0|}
  541|       |
  542|     16|static void push_bracket(subject *subj, bool image, cmark_node *inl_text) {
  543|     16|  bracket *b = (bracket *)subj->mem->calloc(1, sizeof(bracket));
  544|     16|  if (subj->last_bracket != NULL) {
  545|      0|    subj->last_bracket->bracket_after = true;
  546|      0|  }
  547|     16|  b->image = image;
  548|     16|  b->active = true;
  549|     16|  b->inl_text = inl_text;
  550|     16|  b->previous = subj->last_bracket;
  551|     16|  b->position = subj->pos;
  552|     16|  b->bracket_after = false;
  553|     16|  subj->last_bracket = b;
  554|     16|}
  555|       |
  556|       |// Assumes the subject has a c at the current position.
  557|      0|static cmark_node *handle_delim(subject *subj, unsigned char c, bool smart) {
  558|      0|  bufsize_t numdelims;
  559|      0|  cmark_node *inl_text;
  560|      0|  bool can_open, can_close;
  561|      0|  cmark_chunk contents;
  562|       |
  563|      0|  numdelims = scan_delims(subj, c, &can_open, &can_close);
  564|       |
  565|      0|  if (c == '\'' && smart) {
  566|      0|    contents = cmark_chunk_literal(RIGHTSINGLEQUOTE);
  567|      0|  } else if (c == '"' && smart) {
  568|      0|    contents =
  569|      0|        cmark_chunk_literal(can_close ? RIGHTDOUBLEQUOTE : LEFTDOUBLEQUOTE);
  570|      0|  } else {
  571|      0|    contents = cmark_chunk_dup(&subj->input, subj->pos - numdelims, numdelims);
  572|      0|  }
  573|       |
  574|      0|  inl_text = make_str(subj, subj->pos - numdelims, subj->pos - 1, contents);
  575|       |
  576|      0|  if ((can_open || can_close) && (!(c == '\'' || c == '"') || smart)) {
  577|      0|    push_delimiter(subj, c, can_open, can_close, inl_text);
  578|      0|  }
  579|       |
  580|      0|  return inl_text;
  581|      0|}
  582|       |
  583|       |// Assumes we have a hyphen at the current position.
  584|      0|static cmark_node *handle_hyphen(subject *subj, bool smart) {
  585|      0|  int startpos = subj->pos;
  586|       |
  587|      0|  advance(subj);
  588|       |
  589|      0|  if (!smart || peek_char(subj) != '-') {
  590|      0|    return make_str(subj, subj->pos - 1, subj->pos - 1, cmark_chunk_literal("-"));
  591|      0|  }
  592|       |
  593|      0|  while (smart && peek_char(subj) == '-') {
  594|      0|    advance(subj);
  595|      0|  }
  596|       |
  597|      0|  int numhyphens = subj->pos - startpos;
  598|      0|  int en_count = 0;
  599|      0|  int em_count = 0;
  600|      0|  int i;
  601|      0|  cmark_strbuf buf = CMARK_BUF_INIT(subj->mem);
  602|       |
  603|      0|  if (numhyphens % 3 == 0) { // if divisible by 3, use all em dashes
  604|      0|    em_count = numhyphens / 3;
  605|      0|  } else if (numhyphens % 2 == 0) { // if divisible by 2, use all en dashes
  606|      0|    en_count = numhyphens / 2;
  607|      0|  } else if (numhyphens % 3 == 2) { // use one en dash at end
  608|      0|    en_count = 1;
  609|      0|    em_count = (numhyphens - 2) / 3;
  610|      0|  } else { // use two en dashes at the end
  611|      0|    en_count = 2;
  612|      0|    em_count = (numhyphens - 4) / 3;
  613|      0|  }
  614|       |
  615|      0|  for (i = em_count; i > 0; i--) {
  616|      0|    cmark_strbuf_puts(&buf, EMDASH);
  617|      0|  }
  618|       |
  619|      0|  for (i = en_count; i > 0; i--) {
  620|      0|    cmark_strbuf_puts(&buf, ENDASH);
  621|      0|  }
  622|       |
  623|      0|  return make_str_from_buf(subj, startpos, subj->pos - 1, &buf);
  624|      0|}
  625|       |
  626|       |// Assumes we have a period at the current position.
  627|      0|static cmark_node *handle_period(subject *subj, bool smart) {
  628|      0|  advance(subj);
  629|      0|  if (smart && peek_char(subj) == '.') {
  630|      0|    advance(subj);
  631|      0|    if (peek_char(subj) == '.') {
  632|      0|      advance(subj);
  633|      0|      return make_str(subj, subj->pos - 3, subj->pos - 1, cmark_chunk_literal(ELLIPSES));
  634|      0|    } else {
  635|      0|      return make_str(subj, subj->pos - 2, subj->pos - 1, cmark_chunk_literal(".."));
  636|      0|    }
  637|      0|  } else {
  638|      0|    return make_str(subj, subj->pos - 1, subj->pos - 1, cmark_chunk_literal("."));
  639|      0|  }
  640|      0|}
  641|       |
  642|     56|static void process_emphasis(subject *subj, bufsize_t stack_bottom) {
  643|     56|  delimiter *candidate;
  644|     56|  delimiter *closer = NULL;
  645|     56|  delimiter *opener;
  646|     56|  delimiter *old_closer;
  647|     56|  bool opener_found;
  648|     56|  int openers_bottom_index = 0;
  649|     56|  bufsize_t openers_bottom[9] = {stack_bottom, stack_bottom, stack_bottom,
  650|     56|                                 stack_bottom, stack_bottom, stack_bottom,
  651|     56|                                 stack_bottom, stack_bottom, stack_bottom};
  652|       |
  653|       |  // move back to first relevant delim.
  654|     56|  candidate = subj->last_delim;
  655|     56|  while (candidate != NULL && candidate->position >= stack_bottom) {
  656|      0|    closer = candidate;
  657|      0|    candidate = candidate->previous;
  658|      0|  }
  659|       |
  660|       |  // now move forward, looking for closers, and handling each
  661|     56|  while (closer != NULL) {
  662|      0|    if (closer->can_close) {
  663|      0|      switch (closer->delim_char) {
  664|      0|      case '"':
  665|      0|        openers_bottom_index = 0;
  666|      0|        break;
  667|      0|      case '\'':
  668|      0|        openers_bottom_index = 1;
  669|      0|        break;
  670|      0|      case '_':
  671|      0|        openers_bottom_index = 2;
  672|      0|        break;
  673|      0|      case '*':
  674|      0|        openers_bottom_index = 3 +
  675|      0|                (closer->can_open ? 3 : 0) + (closer->length % 3);
  676|      0|        break;
  677|      0|      default:
  678|      0|        assert(false);
  679|      0|      }
  680|       |
  681|       |      // Now look backwards for first matching opener:
  682|      0|      opener = closer->previous;
  683|      0|      opener_found = false;
  684|      0|      while (opener != NULL &&
  685|      0|             opener->position >= openers_bottom[openers_bottom_index]) {
  686|      0|        if (opener->can_open && opener->delim_char == closer->delim_char) {
  687|       |          // interior closer of size 2 can't match opener of size 1
  688|       |          // or of size 1 can't match 2
  689|      0|          if (!(closer->can_open || opener->can_close) ||
  690|      0|              closer->length % 3 == 0 ||
  691|      0|              (opener->length + closer->length) % 3 != 0) {
  692|      0|            opener_found = true;
  693|      0|            break;
  694|      0|          }
  695|      0|        }
  696|      0|        opener = opener->previous;
  697|      0|      }
  698|      0|      old_closer = closer;
  699|      0|      if (closer->delim_char == '*' || closer->delim_char == '_') {
  700|      0|        if (opener_found) {
  701|      0|          closer = S_insert_emph(subj, opener, closer);
  702|      0|        } else {
  703|      0|          closer = closer->next;
  704|      0|        }
  705|      0|      } else if (closer->delim_char == '\'' || closer->delim_char == '"') {
  706|      0|        if (closer->delim_char == '\'') {
  707|      0|          cmark_node_set_literal(closer->inl_text, RIGHTSINGLEQUOTE);
  708|      0|        } else {
  709|      0|          cmark_node_set_literal(closer->inl_text, RIGHTDOUBLEQUOTE);
  710|      0|        }
  711|      0|        closer = closer->next;
  712|      0|        if (opener_found) {
  713|      0|          if (old_closer->delim_char == '\'') {
  714|      0|            cmark_node_set_literal(opener->inl_text, LEFTSINGLEQUOTE);
  715|      0|          } else {
  716|      0|            cmark_node_set_literal(opener->inl_text, LEFTDOUBLEQUOTE);
  717|      0|          }
  718|      0|          remove_delimiter(subj, opener);
  719|      0|          remove_delimiter(subj, old_closer);
  720|      0|        }
  721|      0|      }
  722|      0|      if (!opener_found) {
  723|       |        // set lower bound for future searches for openers
  724|      0|        openers_bottom[openers_bottom_index] = old_closer->position;
  725|      0|        if (!old_closer->can_open) {
  726|       |          // we can remove a closer that can't be an
  727|       |          // opener, once we've seen there's no
  728|       |          // matching opener:
  729|      0|          remove_delimiter(subj, old_closer);
  730|      0|        }
  731|      0|      }
  732|      0|    } else {
  733|      0|      closer = closer->next;
  734|      0|    }
  735|      0|  }
  736|       |  // free all delimiters in list until stack_bottom:
  737|     56|  while (subj->last_delim != NULL &&
  738|     56|         subj->last_delim->position >= stack_bottom) {
  739|      0|    remove_delimiter(subj, subj->last_delim);
  740|      0|  }
  741|     56|}
  742|       |
  743|       |static delimiter *S_insert_emph(subject *subj, delimiter *opener,
  744|      0|                                delimiter *closer) {
  745|      0|  delimiter *delim, *tmp_delim;
  746|      0|  bufsize_t use_delims;
  747|      0|  cmark_node *opener_inl = opener->inl_text;
  748|      0|  cmark_node *closer_inl = closer->inl_text;
  749|      0|  bufsize_t opener_num_chars = opener_inl->len;
  750|      0|  bufsize_t closer_num_chars = closer_inl->len;
  751|      0|  cmark_node *tmp, *tmpnext, *emph;
  752|       |
  753|       |  // calculate the actual number of characters used from this closer
  754|      0|  use_delims = (closer_num_chars >= 2 && opener_num_chars >= 2) ? 2 : 1;
  755|       |
  756|       |  // remove used characters from associated inlines.
  757|      0|  opener_num_chars -= use_delims;
  758|      0|  closer_num_chars -= use_delims;
  759|      0|  opener_inl->len = opener_num_chars;
  760|      0|  opener_inl->data[opener_num_chars] = 0;
  761|      0|  closer_inl->len = closer_num_chars;
  762|      0|  closer_inl->data[closer_num_chars] = 0;
  763|       |
  764|       |  // free delimiters between opener and closer
  765|      0|  delim = closer->previous;
  766|      0|  while (delim != NULL && delim != opener) {
  767|      0|    tmp_delim = delim->previous;
  768|      0|    remove_delimiter(subj, delim);
  769|      0|    delim = tmp_delim;
  770|      0|  }
  771|       |
  772|       |  // create new emph or strong, and splice it in to our inlines
  773|       |  // between the opener and closer
  774|      0|  emph = use_delims == 1 ? make_emph(subj->mem) : make_strong(subj->mem);
  775|       |
  776|      0|  tmp = opener_inl->next;
  777|      0|  while (tmp && tmp != closer_inl) {
  778|      0|    tmpnext = tmp->next;
  779|      0|    cmark_node_unlink(tmp);
  780|      0|    append_child(emph, tmp);
  781|      0|    tmp = tmpnext;
  782|      0|  }
  783|      0|  cmark_node_insert_after(opener_inl, emph);
  784|       |
  785|      0|  emph->start_line = opener_inl->start_line;
  786|      0|  emph->end_line = closer_inl->end_line;
  787|      0|  emph->start_column = opener_inl->start_column;
  788|      0|  emph->end_column = closer_inl->end_column;
  789|       |
  790|       |  // if opener has 0 characters, remove it and its associated inline
  791|      0|  if (opener_num_chars == 0) {
  792|      0|    cmark_node_free(opener_inl);
  793|      0|    remove_delimiter(subj, opener);
  794|      0|  }
  795|       |
  796|       |  // if closer has 0 characters, remove it and its associated inline
  797|      0|  if (closer_num_chars == 0) {
  798|       |    // remove empty closer inline
  799|      0|    cmark_node_free(closer_inl);
  800|       |    // remove closer from list
  801|      0|    tmp_delim = closer->next;
  802|      0|    remove_delimiter(subj, closer);
  803|      0|    closer = tmp_delim;
  804|      0|  }
  805|       |
  806|      0|  return closer;
  807|      0|}
  808|       |
  809|       |// Parse backslash-escape or just a backslash, returning an inline.
  810|      0|static cmark_node *handle_backslash(subject *subj) {
  811|      0|  advance(subj);
  812|      0|  unsigned char nextchar = peek_char(subj);
  813|      0|  if (cmark_ispunct(
  814|      0|          nextchar)) { // only ascii symbols and newline can be escaped
  815|      0|    advance(subj);
  816|      0|    return make_str(subj, subj->pos - 2, subj->pos - 1, cmark_chunk_dup(&subj->input, subj->pos - 1, 1));
  817|      0|  } else if (!is_eof(subj) && skip_line_end(subj)) {
  818|      0|    return make_linebreak(subj->mem);
  819|      0|  } else {
  820|      0|    return make_str(subj, subj->pos - 1, subj->pos - 1, cmark_chunk_literal("\\"));
  821|      0|  }
  822|      0|}
  823|       |
  824|       |// Parse an entity or a regular "&" string.
  825|       |// Assumes the subject has an '&' character at the current position.
  826|      0|static cmark_node *handle_entity(subject *subj) {
  827|      0|  cmark_strbuf ent = CMARK_BUF_INIT(subj->mem);
  828|      0|  bufsize_t len;
  829|       |
  830|      0|  advance(subj);
  831|       |
  832|      0|  len = houdini_unescape_ent(&ent, subj->input.data + subj->pos,
  833|      0|                             subj->input.len - subj->pos);
  834|       |
  835|      0|  if (len <= 0)
  836|      0|    return make_str(subj, subj->pos - 1, subj->pos - 1, cmark_chunk_literal("&"));
  837|       |
  838|      0|  subj->pos += len;
  839|      0|  return make_str_from_buf(subj, subj->pos - 1 - len, subj->pos - 1, &ent);
  840|      0|}
  841|       |
  842|       |// Clean a URL: remove surrounding whitespace, and remove \ that escape
  843|       |// punctuation.
  844|     16|unsigned char *cmark_clean_url(cmark_mem *mem, cmark_chunk *url) {
  845|     16|  cmark_strbuf buf = CMARK_BUF_INIT(mem);
  846|       |
  847|     16|  cmark_chunk_trim(url);
  848|       |
  849|     16|  houdini_unescape_html_f(&buf, url->data, url->len);
  850|       |
  851|     16|  cmark_strbuf_unescape(&buf);
  852|     16|  return cmark_strbuf_detach(&buf);
  853|     16|}
  854|       |
  855|     16|unsigned char *cmark_clean_title(cmark_mem *mem, cmark_chunk *title) {
  856|     16|  cmark_strbuf buf = CMARK_BUF_INIT(mem);
  857|     16|  unsigned char first, last;
  858|       |
  859|     16|  if (title->len == 0) {
  860|     16|    return NULL;
  861|     16|  }
  862|       |
  863|      0|  first = title->data[0];
  864|      0|  last = title->data[title->len - 1];
  865|       |
  866|       |  // remove surrounding quotes if any:
  867|      0|  if ((first == '\'' && last == '\'') || (first == '(' && last == ')') ||
  868|      0|      (first == '"' && last == '"')) {
  869|      0|    houdini_unescape_html_f(&buf, title->data + 1, title->len - 2);
  870|      0|  } else {
  871|      0|    houdini_unescape_html_f(&buf, title->data, title->len);
  872|      0|  }
  873|       |
  874|      0|  cmark_strbuf_unescape(&buf);
  875|      0|  return cmark_strbuf_detach(&buf);
  876|     16|}
  877|       |
  878|       |// Parse an autolink or HTML tag.
  879|       |// Assumes the subject has a '<' character at the current position.
  880|      0|static cmark_node *handle_pointy_brace(subject *subj, int options) {
  881|      0|  bufsize_t matchlen = 0;
  882|      0|  cmark_chunk contents;
  883|       |
  884|      0|  advance(subj); // advance past first <
  885|       |
  886|       |  // first try to match a URL autolink
  887|      0|  matchlen = scan_autolink_uri(&subj->input, subj->pos);
  888|      0|  if (matchlen > 0) {
  889|      0|    contents = cmark_chunk_dup(&subj->input, subj->pos, matchlen - 1);
  890|      0|    subj->pos += matchlen;
  891|       |
  892|      0|    return make_autolink(subj, subj->pos - 1 - matchlen, subj->pos - 1, contents, 0);
  893|      0|  }
  894|       |
  895|       |  // next try to match an email autolink
  896|      0|  matchlen = scan_autolink_email(&subj->input, subj->pos);
  897|      0|  if (matchlen > 0) {
  898|      0|    contents = cmark_chunk_dup(&subj->input, subj->pos, matchlen - 1);
  899|      0|    subj->pos += matchlen;
  900|       |
  901|      0|    return make_autolink(subj, subj->pos - 1 - matchlen, subj->pos - 1, contents, 1);
  902|      0|  }
  903|       |
  904|       |  // finally, try to match an html tag
  905|      0|  if (subj->pos + 2 <= subj->input.len) {
  906|      0|    int c = subj->input.data[subj->pos];
  907|      0|    if (c == '!') {
  908|      0|      c = subj->input.data[subj->pos+1];
  909|      0|      if (c == '-') {
  910|      0|        matchlen = scan_html_comment(&subj->input, subj->pos + 2);
  911|      0|        if (matchlen > 0)
  912|      0|          matchlen += 2; // prefix "<-"
  913|      0|      } else if (c == '[') {
  914|      0|        if ((subj->flags & FLAG_SKIP_HTML_CDATA) == 0) {
  915|      0|          matchlen = scan_html_cdata(&subj->input, subj->pos + 2);
  916|      0|          if (matchlen > 0) {
  917|       |            // The regex doesn't require the final "]]>". But if we're not at
  918|       |            // the end of input, it must come after the match. Otherwise,
  919|       |            // disable subsequent scans to avoid quadratic behavior.
  920|      0|            matchlen += 5; // prefix "![", suffix "]]>"
  921|      0|            if (subj->pos + matchlen > subj->input.len) {
  922|      0|              subj->flags |= FLAG_SKIP_HTML_CDATA;
  923|      0|              matchlen = 0;
  924|      0|            }
  925|      0|          }
  926|      0|        }
  927|      0|      } else if ((subj->flags & FLAG_SKIP_HTML_DECLARATION) == 0) {
  928|      0|        matchlen = scan_html_declaration(&subj->input, subj->pos + 1);
  929|      0|        if (matchlen > 0) {
  930|      0|          matchlen += 2; // prefix "!", suffix ">"
  931|      0|          if (subj->pos + matchlen > subj->input.len) {
  932|      0|            subj->flags |= FLAG_SKIP_HTML_DECLARATION;
  933|      0|            matchlen = 0;
  934|      0|          }
  935|      0|        }
  936|      0|      }
  937|      0|    } else if (c == '?') {
  938|      0|      if ((subj->flags & FLAG_SKIP_HTML_PI) == 0) {
  939|       |        // Note that we allow an empty match.
  940|      0|        matchlen = scan_html_pi(&subj->input, subj->pos + 1);
  941|      0|        matchlen += 3; // prefix "?", suffix "?>"
  942|      0|        if (subj->pos + matchlen > subj->input.len) {
  943|      0|          subj->flags |= FLAG_SKIP_HTML_PI;
  944|      0|          matchlen = 0;
  945|      0|        }
  946|      0|      }
  947|      0|    } else {
  948|      0|      matchlen = scan_html_tag(&subj->input, subj->pos);
  949|      0|    }
  950|      0|  }
  951|      0|  if (matchlen > 0) {
  952|      0|    const unsigned char *src = subj->input.data + subj->pos - 1;
  953|      0|    bufsize_t len = matchlen + 1;
  954|      0|    subj->pos += matchlen;
  955|      0|    cmark_node *node = make_literal(subj, CMARK_NODE_HTML_INLINE,
  956|      0|                                    subj->pos - matchlen - 1, subj->pos - 1);
  957|      0|    node->data = (unsigned char *)subj->mem->realloc(NULL, len + 1);
  958|      0|    memcpy(node->data, src, len);
  959|      0|    node->data[len] = 0;
  960|      0|    node->len = len;
  961|      0|    adjust_subj_node_newlines(subj, node, matchlen, 1, options);
  962|      0|    return node;
  963|      0|  }
  964|       |
  965|       |  // if nothing matches, just return the opening <:
  966|      0|  return make_str(subj, subj->pos - 1, subj->pos - 1, cmark_chunk_literal("<"));
  967|      0|}
  968|       |
  969|       |// Parse a link label.  Returns 1 if successful.
  970|       |// Note:  unescaped brackets are not allowed in labels.
  971|       |// The label begins with `[` and ends with the first `]` character
  972|       |// encountered.  Backticks in labels do not start code spans.
  973|      4|static int link_label(subject *subj, cmark_chunk *raw_label) {
  974|      4|  bufsize_t startpos = subj->pos;
  975|      4|  int length = 0;
  976|      4|  unsigned char c;
  977|       |
  978|       |  // advance past [
  979|      4|  if (peek_char(subj) == '[') {
  980|      4|    advance(subj);
  981|      4|  } else {
  982|      0|    return 0;
  983|      0|  }
  984|       |
  985|    104|  while ((c = peek_char(subj)) && c != '[' && c != ']') {
  986|    100|    if (c == '\\') {
  987|      0|      advance(subj);
  988|      0|      length++;
  989|      0|      if (cmark_ispunct(peek_char(subj))) {
  990|      0|        advance(subj);
  991|      0|        length++;
  992|      0|      }
  993|    100|    } else {
  994|    100|      advance(subj);
  995|    100|      length++;
  996|    100|    }
  997|    100|    if (length > MAX_LINK_LABEL_LENGTH) {
  998|      0|      goto noMatch;
  999|      0|    }
 1000|    100|  }
 1001|       |
 1002|      4|  if (c == ']') { // match found
 1003|      4|    *raw_label =
 1004|      4|        cmark_chunk_dup(&subj->input, startpos + 1, subj->pos - (startpos + 1));
 1005|      4|    cmark_chunk_trim(raw_label);
 1006|      4|    advance(subj); // advance past ]
 1007|      4|    return 1;
 1008|      4|  }
 1009|       |
 1010|      0|noMatch:
 1011|      0|  subj->pos = startpos; // rewind
 1012|      0|  return 0;
 1013|      4|}
 1014|       |
 1015|       |static bufsize_t manual_scan_link_url_2(cmark_chunk *input, bufsize_t offset,
 1016|     16|                                        cmark_chunk *output) {
 1017|     16|  bufsize_t i = offset;
 1018|     16|  size_t nb_p = 0;
 1019|       |
 1020|    820|  while (i < input->len) {
 1021|    820|    if (input->data[i] == '\\' &&
 1022|    820|        i + 1 < input-> len &&
 1023|    820|        cmark_ispunct(input->data[i+1]))
 1024|      0|      i += 2;
 1025|    820|    else if (input->data[i] == '(') {
 1026|      0|      ++nb_p;
 1027|      0|      ++i;
 1028|      0|      if (nb_p > 32)
 1029|      0|        return -1;
 1030|    820|    } else if (input->data[i] == ')') {
 1031|     16|      if (nb_p == 0)
 1032|     16|        break;
 1033|      0|      --nb_p;
 1034|      0|      ++i;
 1035|    804|    } else if (cmark_isspace(input->data[i])) {
 1036|      0|      if (i == offset) {
 1037|      0|        return -1;
 1038|      0|      }
 1039|      0|      break;
 1040|    804|    } else {
 1041|    804|      ++i;
 1042|    804|    }
 1043|    820|  }
 1044|       |
 1045|     16|  if (i >= input->len || nb_p != 0)
 1046|      0|    return -1;
 1047|       |
 1048|     16|  {
 1049|     16|    cmark_chunk result = {input->data + offset, i - offset};
 1050|     16|    *output = result;
 1051|     16|  }
 1052|     16|  return i - offset;
 1053|     16|}
 1054|       |
 1055|       |static bufsize_t manual_scan_link_url(cmark_chunk *input, bufsize_t offset,
 1056|     16|                                      cmark_chunk *output) {
 1057|     16|  bufsize_t i = offset;
 1058|       |
 1059|     16|  if (i < input->len && input->data[i] == '<') {
 1060|      0|    ++i;
 1061|      0|    while (i < input->len) {
 1062|      0|      if (input->data[i] == '>') {
 1063|      0|        ++i;
 1064|      0|        break;
 1065|      0|      } else if (input->data[i] == '\\')
 1066|      0|        i += 2;
 1067|      0|      else if (input->data[i] == '\n' || input->data[i] == '<')
 1068|      0|        return -1;
 1069|      0|      else
 1070|      0|        ++i;
 1071|      0|    }
 1072|     16|  } else {
 1073|     16|    return manual_scan_link_url_2(input, offset, output);
 1074|     16|  }
 1075|       |
 1076|      0|  if (i >= input->len)
 1077|      0|    return -1;
 1078|       |
 1079|      0|  {
 1080|      0|    cmark_chunk result = {input->data + offset + 1, i - 2 - offset};
 1081|      0|    *output = result;
 1082|      0|  }
 1083|      0|  return i - offset;
 1084|      0|}
 1085|       |
 1086|       |// Return a link, an image, or a literal close bracket.
 1087|     16|static cmark_node *handle_close_bracket(subject *subj) {
 1088|     16|  bufsize_t initial_pos, after_link_text_pos;
 1089|     16|  bufsize_t endurl, starttitle, endtitle, endall;
 1090|     16|  bufsize_t sps, n;
 1091|     16|  cmark_reference *ref = NULL;
 1092|     16|  cmark_chunk url_chunk, title_chunk;
 1093|     16|  unsigned char *url, *title;
 1094|     16|  bracket *opener;
 1095|     16|  cmark_node *inl;
 1096|     16|  cmark_chunk raw_label;
 1097|     16|  int found_label;
 1098|     16|  cmark_node *tmp, *tmpnext;
 1099|     16|  bool is_image;
 1100|       |
 1101|     16|  advance(subj); // advance past ]
 1102|     16|  initial_pos = subj->pos;
 1103|       |
 1104|       |  // get last [ or ![
 1105|     16|  opener = subj->last_bracket;
 1106|       |
 1107|     16|  if (opener == NULL) {
 1108|      0|    return make_str(subj, subj->pos - 1, subj->pos - 1, cmark_chunk_literal("]"));
 1109|      0|  }
 1110|       |
 1111|     16|  if (!opener->active) {
 1112|       |    // take delimiter off stack
 1113|      0|    pop_bracket(subj);
 1114|      0|    return make_str(subj, subj->pos - 1, subj->pos - 1, cmark_chunk_literal("]"));
 1115|      0|  }
 1116|       |
 1117|       |  // If we got here, we matched a potential link/image text.
 1118|       |  // Now we check to see if it's a link/image.
 1119|     16|  is_image = opener->image;
 1120|       |
 1121|     16|  after_link_text_pos = subj->pos;
 1122|       |
 1123|       |  // First, look for an inline link.
 1124|     16|  if (peek_char(subj) == '(' &&
 1125|     16|      ((sps = scan_spacechars(&subj->input, subj->pos + 1)) > -1) &&
 1126|     16|      ((n = manual_scan_link_url(&subj->input, subj->pos + 1 + sps,
 1127|     16|                                 &url_chunk)) > -1)) {
 1128|       |
 1129|       |    // try to parse an explicit link:
 1130|     16|    endurl = subj->pos + 1 + sps + n;
 1131|     16|    starttitle = endurl + scan_spacechars(&subj->input, endurl);
 1132|       |
 1133|       |    // ensure there are spaces btw url and title
 1134|     16|    endtitle = (starttitle == endurl)
 1135|     16|                   ? starttitle
 1136|     16|                   : starttitle + scan_link_title(&subj->input, starttitle);
 1137|       |
 1138|     16|    endall = endtitle + scan_spacechars(&subj->input, endtitle);
 1139|       |
 1140|     16|    if (peek_at(subj, endall) == ')') {
 1141|     16|      subj->pos = endall + 1;
 1142|       |
 1143|     16|      title_chunk =
 1144|     16|          cmark_chunk_dup(&subj->input, starttitle, endtitle - starttitle);
 1145|     16|      url = cmark_clean_url(subj->mem, &url_chunk);
 1146|     16|      title = cmark_clean_title(subj->mem, &title_chunk);
 1147|     16|      cmark_chunk_free(&url_chunk);
 1148|     16|      cmark_chunk_free(&title_chunk);
 1149|     16|      goto match;
 1150|       |
 1151|     16|    } else {
 1152|       |      // it could still be a shortcut reference link
 1153|      0|      subj->pos = after_link_text_pos;
 1154|      0|    }
 1155|     16|  }
 1156|       |
 1157|       |  // Next, look for a following [link label] that matches in refmap.
 1158|       |  // skip spaces
 1159|      0|  raw_label = cmark_chunk_literal("");
 1160|      0|  found_label = link_label(subj, &raw_label);
 1161|      0|  if (!found_label) {
 1162|       |    // If we have a shortcut reference link, back up
 1163|       |    // to before the spacse we skipped.
 1164|      0|    subj->pos = initial_pos;
 1165|      0|  }
 1166|       |
 1167|      0|  if ((!found_label || raw_label.len == 0) && !opener->bracket_after) {
 1168|      0|    cmark_chunk_free(&raw_label);
 1169|      0|    raw_label = cmark_chunk_dup(&subj->input, opener->position,
 1170|      0|                                initial_pos - opener->position - 1);
 1171|      0|    found_label = true;
 1172|      0|  }
 1173|       |
 1174|      0|  if (found_label) {
 1175|      0|    ref = cmark_reference_lookup(subj->refmap, &raw_label);
 1176|      0|    cmark_chunk_free(&raw_label);
 1177|      0|  }
 1178|       |
 1179|      0|  if (ref != NULL) { // found
 1180|      0|    url = cmark_strdup(subj->mem, ref->url);
 1181|      0|    title = cmark_strdup(subj->mem, ref->title);
 1182|      0|    goto match;
 1183|      0|  } else {
 1184|      0|    goto noMatch;
 1185|      0|  }
 1186|       |
 1187|      0|noMatch:
 1188|       |  // If we fall through to here, it means we didn't match a link:
 1189|      0|  pop_bracket(subj); // remove this opener from delimiter list
 1190|      0|  subj->pos = initial_pos;
 1191|      0|  return make_str(subj, subj->pos - 1, subj->pos - 1, cmark_chunk_literal("]"));
 1192|       |
 1193|     16|match:
 1194|     16|  inl = make_simple(subj->mem, is_image ? CMARK_NODE_IMAGE : CMARK_NODE_LINK);
 1195|     16|  inl->as.link.url = url;
 1196|     16|  inl->as.link.title = title;
 1197|     16|  inl->start_line = inl->end_line = subj->line;
 1198|     16|  inl->start_column = opener->inl_text->start_column;
 1199|     16|  inl->end_column = subj->pos + subj->column_offset + subj->block_offset;
 1200|     16|  cmark_node_insert_before(opener->inl_text, inl);
 1201|       |  // Add link text:
 1202|     16|  tmp = opener->inl_text->next;
 1203|     32|  while (tmp) {
 1204|     16|    tmpnext = tmp->next;
 1205|     16|    cmark_node_unlink(tmp);
 1206|     16|    append_child(inl, tmp);
 1207|     16|    tmp = tmpnext;
 1208|     16|  }
 1209|       |
 1210|       |  // Free the bracket [:
 1211|     16|  cmark_node_free(opener->inl_text);
 1212|       |
 1213|     16|  process_emphasis(subj, opener->position);
 1214|     16|  pop_bracket(subj);
 1215|       |
 1216|       |  // Now, if we have a link, we also want to deactivate earlier link
 1217|       |  // delimiters. (This code can be removed if we decide to allow links
 1218|       |  // inside links.)
 1219|     16|  if (!is_image) {
 1220|     16|    opener = subj->last_bracket;
 1221|     16|    while (opener != NULL) {
 1222|      0|      if (!opener->image) {
 1223|      0|        if (!opener->active) {
 1224|      0|          break;
 1225|      0|        } else {
 1226|      0|          opener->active = false;
 1227|      0|        }
 1228|      0|      }
 1229|      0|      opener = opener->previous;
 1230|      0|    }
 1231|     16|  }
 1232|       |
 1233|     16|  return NULL;
 1234|      0|}
 1235|       |
 1236|       |// Parse a hard or soft linebreak, returning an inline.
 1237|       |// Assumes the subject has a cr or newline at the current position.
 1238|      0|static cmark_node *handle_newline(subject *subj) {
 1239|      0|  bufsize_t nlpos = subj->pos;
 1240|       |  // skip over cr, crlf, or lf:
 1241|      0|  if (peek_at(subj, subj->pos) == '\r') {
 1242|      0|    advance(subj);
 1243|      0|  }
 1244|      0|  if (peek_at(subj, subj->pos) == '\n') {
 1245|      0|    advance(subj);
 1246|      0|  }
 1247|      0|  ++subj->line;
 1248|      0|  subj->column_offset = -subj->pos;
 1249|       |  // skip spaces at beginning of line
 1250|      0|  skip_spaces(subj);
 1251|      0|  if (nlpos > 1 && peek_at(subj, nlpos - 1) == ' ' &&
 1252|      0|      peek_at(subj, nlpos - 2) == ' ') {
 1253|      0|    return make_linebreak(subj->mem);
 1254|      0|  } else {
 1255|      0|    return make_softbreak(subj->mem);
 1256|      0|  }
 1257|      0|}
 1258|       |
 1259|     64|static bufsize_t subject_find_special_char(subject *subj, int options) {
 1260|       |  // "\r\n\\`&_*[]<!"
 1261|     64|  static const int8_t SPECIAL_CHARS[256] = {
 1262|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1263|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
 1264|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1265|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1,
 1266|     64|      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1267|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1268|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1269|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1270|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1271|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1272|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 1273|       |
 1274|       |  // " ' . -
 1275|     64|  static const char SMART_PUNCT_CHARS[] = {
 1276|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1277|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0,
 1278|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1279|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1280|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1281|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1282|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1283|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1284|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1285|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1286|     64|      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1287|     64|  };
 1288|       |
 1289|     64|  bufsize_t n = subj->pos + 1;
 1290|       |
 1291|  2.01k|  while (n < subj->input.len) {
 1292|  1.97k|    if (SPECIAL_CHARS[subj->input.data[n]])
 1293|     28|      return n;
 1294|  1.94k|    if (options & CMARK_OPT_SMART && SMART_PUNCT_CHARS[subj->input.data[n]])
 1295|      0|      return n;
 1296|  1.94k|    n++;
 1297|  1.94k|  }
 1298|       |
 1299|     36|  return subj->input.len;
 1300|     64|}
 1301|       |
 1302|       |// Parse an inline, advancing subject, and add it as a child of parent.
 1303|       |// Return 0 if no inline can be parsed, 1 otherwise.
 1304|     96|static int parse_inline(subject *subj, cmark_node *parent, int options) {
 1305|     96|  cmark_node *new_inl = NULL;
 1306|     96|  cmark_chunk contents;
 1307|     96|  unsigned char c;
 1308|     96|  bufsize_t startpos, endpos;
 1309|     96|  c = peek_char(subj);
 1310|     96|  if (c == 0) {
 1311|      0|    return 0;
 1312|      0|  }
 1313|     96|  switch (c) {
 1314|      0|  case '\r':
 1315|      0|  case '\n':
 1316|      0|    new_inl = handle_newline(subj);
 1317|      0|    break;
 1318|      0|  case '`':
 1319|      0|    new_inl = handle_backticks(subj, options);
 1320|      0|    break;
 1321|      0|  case '\\':
 1322|      0|    new_inl = handle_backslash(subj);
 1323|      0|    break;
 1324|      0|  case '&':
 1325|      0|    new_inl = handle_entity(subj);
 1326|      0|    break;
 1327|      0|  case '<':
 1328|      0|    new_inl = handle_pointy_brace(subj, options);
 1329|      0|    break;
 1330|      0|  case '*':
 1331|      0|  case '_':
 1332|      0|  case '\'':
 1333|      0|  case '"':
 1334|      0|    new_inl = handle_delim(subj, c, (options & CMARK_OPT_SMART) != 0);
 1335|      0|    break;
 1336|      0|  case '-':
 1337|      0|    new_inl = handle_hyphen(subj, (options & CMARK_OPT_SMART) != 0);
 1338|      0|    break;
 1339|      0|  case '.':
 1340|      0|    new_inl = handle_period(subj, (options & CMARK_OPT_SMART) != 0);
 1341|      0|    break;
 1342|     16|  case '[':
 1343|     16|    advance(subj);
 1344|     16|    new_inl = make_str(subj, subj->pos - 1, subj->pos - 1, cmark_chunk_literal("["));
 1345|     16|    push_bracket(subj, false, new_inl);
 1346|     16|    break;
 1347|     16|  case ']':
 1348|     16|    new_inl = handle_close_bracket(subj);
 1349|     16|    break;
 1350|      0|  case '!':
 1351|      0|    advance(subj);
 1352|      0|    if (peek_char(subj) == '[') {
 1353|      0|      advance(subj);
 1354|      0|      new_inl = make_str(subj, subj->pos - 2, subj->pos - 1, cmark_chunk_literal("!["));
 1355|      0|      push_bracket(subj, true, new_inl);
 1356|      0|    } else {
 1357|      0|      new_inl = make_str(subj, subj->pos - 1, subj->pos - 1, cmark_chunk_literal("!"));
 1358|      0|    }
 1359|      0|    break;
 1360|     64|  default:
 1361|     64|    endpos = subject_find_special_char(subj, options);
 1362|     64|    contents = cmark_chunk_dup(&subj->input, subj->pos, endpos - subj->pos);
 1363|     64|    startpos = subj->pos;
 1364|     64|    subj->pos = endpos;
 1365|       |
 1366|       |    // if we're at a newline, strip trailing spaces.
 1367|     64|    if (S_is_line_end_char(peek_char(subj))) {
 1368|      0|      cmark_chunk_rtrim(&contents);
 1369|      0|    }
 1370|       |
 1371|     64|    new_inl = make_str(subj, startpos, endpos - 1, contents);
 1372|     96|  }
 1373|     96|  if (new_inl != NULL) {
 1374|     80|    append_child(parent, new_inl);
 1375|     80|  }
 1376|       |
 1377|     96|  return 1;
 1378|     96|}
 1379|       |
 1380|       |// Parse inlines from parent's string_content, adding as children of parent.
 1381|       |void cmark_parse_inlines(cmark_mem *mem, cmark_node *parent,
 1382|     40|                         cmark_reference_map *refmap, int options) {
 1383|     40|  subject subj;
 1384|     40|  cmark_chunk content = {parent->data, parent->len};
 1385|     40|  subject_from_buf(mem, parent->start_line, parent->start_column - 1 + parent->internal_offset, &subj, &content, refmap);
 1386|     40|  cmark_chunk_rtrim(&subj.input);
 1387|       |
 1388|    136|  while (!is_eof(&subj) && parse_inline(&subj, parent, options))
 1389|     96|    ;
 1390|       |
 1391|     40|  process_emphasis(&subj, 0);
 1392|       |  // free bracket and delim stack
 1393|     40|  while (subj.last_delim) {
 1394|      0|    remove_delimiter(&subj, subj.last_delim);
 1395|      0|  }
 1396|     40|  while (subj.last_bracket) {
 1397|      0|    pop_bracket(&subj);
 1398|      0|  }
 1399|     40|}
 1400|       |
 1401|       |// Parse zero or more space characters, including at most one newline.
 1402|      0|static void spnl(subject *subj) {
 1403|      0|  skip_spaces(subj);
 1404|      0|  if (skip_line_end(subj)) {
 1405|      0|    skip_spaces(subj);
 1406|      0|  }
 1407|      0|}
 1408|       |
 1409|       |// Parse reference.  Assumes string begins with '[' character.
 1410|       |// Modify refmap if a reference is encountered.
 1411|       |// Return 0 if no reference found, otherwise position of subject
 1412|       |// after reference is parsed.
 1413|       |bufsize_t cmark_parse_reference_inline(cmark_mem *mem, cmark_chunk *input,
 1414|      4|                                       cmark_reference_map *refmap) {
 1415|      4|  subject subj;
 1416|       |
 1417|      4|  cmark_chunk lab;
 1418|      4|  cmark_chunk url;
 1419|      4|  cmark_chunk title;
 1420|       |
 1421|      4|  bufsize_t matchlen = 0;
 1422|      4|  bufsize_t beforetitle;
 1423|       |
 1424|      4|  subject_from_buf(mem, -1, 0, &subj, input, NULL);
 1425|       |
 1426|       |  // parse label:
 1427|      4|  if (!link_label(&subj, &lab) || lab.len == 0)
 1428|      0|    return 0;
 1429|       |
 1430|       |  // colon:
 1431|      4|  if (peek_char(&subj) == ':') {
 1432|      0|    advance(&subj);
 1433|      4|  } else {
 1434|      4|    return 0;
 1435|      4|  }
 1436|       |
 1437|       |  // parse link url:
 1438|      0|  spnl(&subj);
 1439|      0|  if ((matchlen = manual_scan_link_url(&subj.input, subj.pos, &url)) > -1) {
 1440|      0|    subj.pos += matchlen;
 1441|      0|  } else {
 1442|      0|    return 0;
 1443|      0|  }
 1444|       |
 1445|       |  // parse optional link_title
 1446|      0|  beforetitle = subj.pos;
 1447|      0|  spnl(&subj);
 1448|      0|  matchlen = subj.pos == beforetitle ? 0 : scan_link_title(&subj.input, subj.pos);
 1449|      0|  if (matchlen) {
 1450|      0|    title = cmark_chunk_dup(&subj.input, subj.pos, matchlen);
 1451|      0|    subj.pos += matchlen;
 1452|      0|  } else {
 1453|      0|    subj.pos = beforetitle;
 1454|      0|    title = cmark_chunk_literal("");
 1455|      0|  }
 1456|       |
 1457|       |  // parse final spaces and newline:
 1458|      0|  skip_spaces(&subj);
 1459|      0|  if (!skip_line_end(&subj)) {
 1460|      0|    if (matchlen) { // try rewinding before title
 1461|      0|      subj.pos = beforetitle;
 1462|      0|      skip_spaces(&subj);
 1463|      0|      if (!skip_line_end(&subj)) {
 1464|      0|        return 0;
 1465|      0|      }
 1466|      0|    } else {
 1467|      0|      return 0;
 1468|      0|    }
 1469|      0|  }
 1470|       |  // insert reference into refmap
 1471|      0|  cmark_reference_create(refmap, &lab, &url, &title);
 1472|      0|  return subj.pos;
 1473|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/iterator.c:
    1|       |#include <assert.h>
    2|       |#include <stdlib.h>
    3|       |
    4|       |#include "config.h"
    5|       |#include "node.h"
    6|       |#include "cmark.h"
    7|       |#include "iterator.h"
    8|       |
    9|       |static const int S_leaf_mask =
   10|       |    (1 << CMARK_NODE_HTML_BLOCK) | (1 << CMARK_NODE_THEMATIC_BREAK) |
   11|       |    (1 << CMARK_NODE_CODE_BLOCK) | (1 << CMARK_NODE_TEXT) |
   12|       |    (1 << CMARK_NODE_SOFTBREAK) | (1 << CMARK_NODE_LINEBREAK) |
   13|       |    (1 << CMARK_NODE_CODE) | (1 << CMARK_NODE_HTML_INLINE);
   14|       |
   15|      4|cmark_iter *cmark_iter_new(cmark_node *root) {
   16|      4|  if (root == NULL) {
   17|      0|    return NULL;
   18|      0|  }
   19|      4|  cmark_mem *mem = root->mem;
   20|      4|  cmark_iter *iter = (cmark_iter *)mem->calloc(1, sizeof(cmark_iter));
   21|      4|  iter->mem = mem;
   22|      4|  iter->root = root;
   23|      4|  iter->cur.ev_type = CMARK_EVENT_NONE;
   24|      4|  iter->cur.node = NULL;
   25|      4|  iter->next.ev_type = CMARK_EVENT_ENTER;
   26|      4|  iter->next.node = root;
   27|      4|  return iter;
   28|      4|}
   29|       |
   30|      4|void cmark_iter_free(cmark_iter *iter) { iter->mem->free(iter); }
   31|       |
   32|    240|static bool S_is_leaf(cmark_node *node) {
   33|    240|  return ((1 << node->type) & S_leaf_mask) != 0;
   34|    240|}
   35|       |
   36|    420|cmark_event_type cmark_iter_next(cmark_iter *iter) {
   37|    420|  cmark_event_type ev_type = iter->next.ev_type;
   38|    420|  cmark_node *node = iter->next.node;
   39|       |
   40|    420|  iter->cur.ev_type = ev_type;
   41|    420|  iter->cur.node = node;
   42|       |
   43|    420|  if (ev_type == CMARK_EVENT_DONE) {
   44|      4|    return ev_type;
   45|      4|  }
   46|       |
   47|       |  /* roll forward to next item, setting both fields */
   48|    416|  if (ev_type == CMARK_EVENT_ENTER && !S_is_leaf(node)) {
   49|    176|    if (node->first_child == NULL) {
   50|       |      /* stay on this node but exit */
   51|     40|      iter->next.ev_type = CMARK_EVENT_EXIT;
   52|    136|    } else {
   53|    136|      iter->next.ev_type = CMARK_EVENT_ENTER;
   54|    136|      iter->next.node = node->first_child;
   55|    136|    }
   56|    240|  } else if (node == iter->root) {
   57|       |    /* don't move past root */
   58|      4|    iter->next.ev_type = CMARK_EVENT_DONE;
   59|      4|    iter->next.node = NULL;
   60|    236|  } else if (node->next) {
   61|    100|    iter->next.ev_type = CMARK_EVENT_ENTER;
   62|    100|    iter->next.node = node->next;
   63|    136|  } else if (node->parent) {
   64|    136|    iter->next.ev_type = CMARK_EVENT_EXIT;
   65|    136|    iter->next.node = node->parent;
   66|    136|  } else {
   67|      0|    assert(false);
   68|      0|    iter->next.ev_type = CMARK_EVENT_DONE;
   69|      0|    iter->next.node = NULL;
   70|      0|  }
   71|       |
   72|      0|  return ev_type;
   73|    420|}
   74|       |
   75|       |void cmark_iter_reset(cmark_iter *iter, cmark_node *current,
   76|      0|                      cmark_event_type event_type) {
   77|      0|  iter->next.ev_type = event_type;
   78|      0|  iter->next.node = current;
   79|      0|  cmark_iter_next(iter);
   80|      0|}
   81|       |
   82|    416|cmark_node *cmark_iter_get_node(cmark_iter *iter) { return iter->cur.node; }
   83|       |
   84|      0|cmark_event_type cmark_iter_get_event_type(cmark_iter *iter) {
   85|      0|  return iter->cur.ev_type;
   86|      0|}
   87|       |
   88|      0|cmark_node *cmark_iter_get_root(cmark_iter *iter) { return iter->root; }
   89|       |
   90|      2|void cmark_consolidate_text_nodes(cmark_node *root) {
   91|      2|  if (root == NULL) {
   92|      0|    return;
   93|      0|  }
   94|      2|  cmark_iter *iter = cmark_iter_new(root);
   95|      2|  cmark_strbuf buf = CMARK_BUF_INIT(iter->mem);
   96|      2|  cmark_event_type ev_type;
   97|      2|  cmark_node *cur, *tmp, *next;
   98|       |
   99|    258|  while ((ev_type = cmark_iter_next(iter)) != CMARK_EVENT_DONE) {
  100|    256|    cur = cmark_iter_get_node(iter);
  101|    256|    if (ev_type == CMARK_EVENT_ENTER && cur->type == CMARK_NODE_TEXT &&
  102|    256|        cur->next && cur->next->type == CMARK_NODE_TEXT) {
  103|      0|      cmark_strbuf_clear(&buf);
  104|      0|      cmark_strbuf_put(&buf, cur->data, cur->len);
  105|      0|      tmp = cur->next;
  106|      0|      while (tmp && tmp->type == CMARK_NODE_TEXT) {
  107|      0|        cmark_iter_next(iter); // advance pointer
  108|      0|        cmark_strbuf_put(&buf, tmp->data, tmp->len);
  109|      0|        cur->end_column = tmp->end_column;
  110|      0|        next = tmp->next;
  111|      0|        cmark_node_free(tmp);
  112|      0|        tmp = next;
  113|      0|      }
  114|      0|      iter->mem->free(cur->data);
  115|      0|      cur->len = buf.size;
  116|      0|      cur->data = cmark_strbuf_detach(&buf);
  117|      0|    }
  118|    256|  }
  119|       |
  120|      2|  cmark_strbuf_free(&buf);
  121|      2|  cmark_iter_free(iter);
  122|      2|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/latex.c:
    1|       |#include <stdlib.h>
    2|       |#include <stdio.h>
    3|       |#include <string.h>
    4|       |#include <assert.h>
    5|       |
    6|       |#include "config.h"
    7|       |#include "cmark.h"
    8|       |#include "node.h"
    9|       |#include "buffer.h"
   10|       |#include "utf8.h"
   11|       |#include "scanners.h"
   12|       |#include "render.h"
   13|       |
   14|      0|#define OUT(s, wrap, escaping) renderer->out(renderer, s, wrap, escaping)
   15|      0|#define LIT(s) renderer->out(renderer, s, false, LITERAL)
   16|      0|#define CR() renderer->cr(renderer)
   17|      0|#define BLANKLINE() renderer->blankline(renderer)
   18|       |#define LIST_NUMBER_STRING_SIZE 20
   19|       |
   20|       |static CMARK_INLINE void outc(cmark_renderer *renderer, cmark_escaping escape,
   21|      0|                              int32_t c, unsigned char nextc) {
   22|      0|  if (escape == LITERAL) {
   23|      0|    cmark_render_code_point(renderer, c);
   24|      0|    return;
   25|      0|  }
   26|       |
   27|      0|  switch (c) {
   28|      0|  case 123: // '{'
   29|      0|  case 125: // '}'
   30|      0|  case 35:  // '#'
   31|      0|  case 37:  // '%'
   32|      0|  case 38:  // '&'
   33|      0|    cmark_render_ascii(renderer, "\\");
   34|      0|    cmark_render_code_point(renderer, c);
   35|      0|    break;
   36|      0|  case 36: // '$'
   37|      0|  case 95: // '_'
   38|      0|    if (escape == NORMAL) {
   39|      0|      cmark_render_ascii(renderer, "\\");
   40|      0|    }
   41|      0|    cmark_render_code_point(renderer, c);
   42|      0|    break;
   43|      0|  case 45:             // '-'
   44|      0|    if (nextc == 45) { // prevent ligature
   45|      0|      cmark_render_ascii(renderer, "-{}");
   46|      0|    } else {
   47|      0|      cmark_render_ascii(renderer, "-");
   48|      0|    }
   49|      0|    break;
   50|      0|  case 126: // '~'
   51|      0|    if (escape == NORMAL) {
   52|      0|      cmark_render_ascii(renderer, "\\textasciitilde{}");
   53|      0|    } else {
   54|      0|      cmark_render_code_point(renderer, c);
   55|      0|    }
   56|      0|    break;
   57|      0|  case 94: // '^'
   58|      0|    cmark_render_ascii(renderer, "\\^{}");
   59|      0|    break;
   60|      0|  case 92: // '\\'
   61|      0|    if (escape == URL) {
   62|       |      // / acts as path sep even on windows:
   63|      0|      cmark_render_ascii(renderer, "/");
   64|      0|    } else {
   65|      0|      cmark_render_ascii(renderer, "\\textbackslash{}");
   66|      0|    }
   67|      0|    break;
   68|      0|  case 124: // '|'
   69|      0|    cmark_render_ascii(renderer, "\\textbar{}");
   70|      0|    break;
   71|      0|  case 60: // '<'
   72|      0|    cmark_render_ascii(renderer, "\\textless{}");
   73|      0|    break;
   74|      0|  case 62: // '>'
   75|      0|    cmark_render_ascii(renderer, "\\textgreater{}");
   76|      0|    break;
   77|      0|  case 91: // '['
   78|      0|  case 93: // ']'
   79|      0|    cmark_render_ascii(renderer, "{");
   80|      0|    cmark_render_code_point(renderer, c);
   81|      0|    cmark_render_ascii(renderer, "}");
   82|      0|    break;
   83|      0|  case 34: // '"'
   84|      0|    cmark_render_ascii(renderer, "\\textquotedbl{}");
   85|       |    // requires \usepackage[T1]{fontenc}
   86|      0|    break;
   87|      0|  case 39: // '\''
   88|      0|    cmark_render_ascii(renderer, "\\textquotesingle{}");
   89|       |    // requires \usepackage{textcomp}
   90|      0|    break;
   91|      0|  case 160: // nbsp
   92|      0|    cmark_render_ascii(renderer, "~");
   93|      0|    break;
   94|      0|  case 8230: // hellip
   95|      0|    cmark_render_ascii(renderer, "\\ldots{}");
   96|      0|    break;
   97|      0|  case 8216: // lsquo
   98|      0|    if (escape == NORMAL) {
   99|      0|      cmark_render_ascii(renderer, "`");
  100|      0|    } else {
  101|      0|      cmark_render_code_point(renderer, c);
  102|      0|    }
  103|      0|    break;
  104|      0|  case 8217: // rsquo
  105|      0|    if (escape == NORMAL) {
  106|      0|      cmark_render_ascii(renderer, "\'");
  107|      0|    } else {
  108|      0|      cmark_render_code_point(renderer, c);
  109|      0|    }
  110|      0|    break;
  111|      0|  case 8220: // ldquo
  112|      0|    if (escape == NORMAL) {
  113|      0|      cmark_render_ascii(renderer, "``");
  114|      0|    } else {
  115|      0|      cmark_render_code_point(renderer, c);
  116|      0|    }
  117|      0|    break;
  118|      0|  case 8221: // rdquo
  119|      0|    if (escape == NORMAL) {
  120|      0|      cmark_render_ascii(renderer, "''");
  121|      0|    } else {
  122|      0|      cmark_render_code_point(renderer, c);
  123|      0|    }
  124|      0|    break;
  125|      0|  case 8212: // emdash
  126|      0|    if (escape == NORMAL) {
  127|      0|      cmark_render_ascii(renderer, "---");
  128|      0|    } else {
  129|      0|      cmark_render_code_point(renderer, c);
  130|      0|    }
  131|      0|    break;
  132|      0|  case 8211: // endash
  133|      0|    if (escape == NORMAL) {
  134|      0|      cmark_render_ascii(renderer, "--");
  135|      0|    } else {
  136|      0|      cmark_render_code_point(renderer, c);
  137|      0|    }
  138|      0|    break;
  139|      0|  default:
  140|      0|    cmark_render_code_point(renderer, c);
  141|      0|  }
  142|      0|}
  143|       |
  144|       |typedef enum {
  145|       |  NO_LINK,
  146|       |  URL_AUTOLINK,
  147|       |  EMAIL_AUTOLINK,
  148|       |  NORMAL_LINK,
  149|       |  INTERNAL_LINK
  150|       |} link_type;
  151|       |
  152|      0|static link_type get_link_type(cmark_node *node) {
  153|      0|  size_t title_len, url_len;
  154|      0|  cmark_node *link_text;
  155|      0|  char *realurl;
  156|      0|  int realurllen;
  157|      0|  bool isemail = false;
  158|       |
  159|      0|  if (node->type != CMARK_NODE_LINK) {
  160|      0|    return NO_LINK;
  161|      0|  }
  162|       |
  163|      0|  const char *url = cmark_node_get_url(node);
  164|      0|  cmark_chunk url_chunk = cmark_chunk_literal(url);
  165|       |
  166|      0|  if (url && *url == '#') {
  167|      0|    return INTERNAL_LINK;
  168|      0|  }
  169|       |
  170|      0|  url_len = strlen(url);
  171|      0|  if (url_len == 0 || scan_scheme(&url_chunk, 0) == 0) {
  172|      0|    return NO_LINK;
  173|      0|  }
  174|       |
  175|      0|  const char *title = cmark_node_get_title(node);
  176|      0|  title_len = strlen(title);
  177|       |  // if it has a title, we can't treat it as an autolink:
  178|      0|  if (title_len == 0) {
  179|       |
  180|      0|    link_text = node->first_child;
  181|      0|    cmark_consolidate_text_nodes(link_text);
  182|       |
  183|      0|    if (!link_text)
  184|      0|      return NO_LINK;
  185|       |
  186|      0|    realurl = (char *)url;
  187|      0|    realurllen = (int)url_len;
  188|      0|    if (strncmp(realurl, "mailto:", 7) == 0) {
  189|      0|      realurl += 7;
  190|      0|      realurllen -= 7;
  191|      0|      isemail = true;
  192|      0|    }
  193|      0|    if (realurllen == link_text->len &&
  194|      0|        strncmp(realurl, (char *)link_text->data,
  195|      0|                link_text->len) == 0) {
  196|      0|      if (isemail) {
  197|      0|        return EMAIL_AUTOLINK;
  198|      0|      } else {
  199|      0|        return URL_AUTOLINK;
  200|      0|      }
  201|      0|    }
  202|      0|  }
  203|       |
  204|      0|  return NORMAL_LINK;
  205|      0|}
  206|       |
  207|      0|static int S_get_enumlevel(cmark_node *node) {
  208|      0|  int enumlevel = 0;
  209|      0|  cmark_node *tmp = node;
  210|      0|  while (tmp) {
  211|      0|    if (tmp->type == CMARK_NODE_LIST &&
  212|      0|        cmark_node_get_list_type(node) == CMARK_ORDERED_LIST) {
  213|      0|      enumlevel++;
  214|      0|    }
  215|      0|    tmp = tmp->parent;
  216|      0|  }
  217|      0|  return enumlevel;
  218|      0|}
  219|       |
  220|       |static int S_render_node(cmark_renderer *renderer, cmark_node *node,
  221|      0|                         cmark_event_type ev_type, int options) {
  222|      0|  int list_number;
  223|      0|  int enumlevel;
  224|      0|  char list_number_string[LIST_NUMBER_STRING_SIZE];
  225|      0|  bool entering = (ev_type == CMARK_EVENT_ENTER);
  226|      0|  cmark_list_type list_type;
  227|      0|  bool allow_wrap = renderer->width > 0 && !(CMARK_OPT_NOBREAKS & options);
  228|       |
  229|       |  // avoid warning about unused parameter:
  230|      0|  (void)(options);
  231|       |
  232|      0|  switch (node->type) {
  233|      0|  case CMARK_NODE_DOCUMENT:
  234|      0|    break;
  235|       |
  236|      0|  case CMARK_NODE_BLOCK_QUOTE:
  237|      0|    if (entering) {
  238|      0|      LIT("\\begin{quote}");
  239|      0|      CR();
  240|      0|    } else {
  241|      0|      LIT("\\end{quote}");
  242|      0|      BLANKLINE();
  243|      0|    }
  244|      0|    break;
  245|       |
  246|      0|  case CMARK_NODE_LIST:
  247|      0|    list_type = cmark_node_get_list_type(node);
  248|      0|    if (entering) {
  249|      0|      LIT("\\begin{");
  250|      0|      LIT(list_type == CMARK_ORDERED_LIST ? "enumerate" : "itemize");
  251|      0|      LIT("}");
  252|      0|      CR();
  253|      0|      list_number = cmark_node_get_list_start(node);
  254|      0|      if (list_number > 1) {
  255|      0|        enumlevel = S_get_enumlevel(node);
  256|       |        // latex normally supports only five levels
  257|      0|        if (enumlevel >= 1 && enumlevel <= 5) {
  258|      0|          snprintf(list_number_string, LIST_NUMBER_STRING_SIZE, "%d",
  259|      0|                   list_number);
  260|      0|          LIT("\\setcounter{enum");
  261|      0|          switch (enumlevel) {
  262|      0|          case 1: LIT("i"); break;
  263|      0|          case 2: LIT("ii"); break;
  264|      0|          case 3: LIT("iii"); break;
  265|      0|          case 4: LIT("iv"); break;
  266|      0|          case 5: LIT("v"); break;
  267|      0|          default: LIT("i"); break;
  268|      0|          }
  269|      0|          LIT("}{");
  270|      0|          OUT(list_number_string, false, NORMAL);
  271|      0|          LIT("}");
  272|      0|        }
  273|      0|        CR();
  274|      0|      }
  275|      0|    } else {
  276|      0|      LIT("\\end{");
  277|      0|      LIT(list_type == CMARK_ORDERED_LIST ? "enumerate" : "itemize");
  278|      0|      LIT("}");
  279|      0|      BLANKLINE();
  280|      0|    }
  281|      0|    break;
  282|       |
  283|      0|  case CMARK_NODE_ITEM:
  284|      0|    if (entering) {
  285|      0|      LIT("\\item ");
  286|      0|    } else {
  287|      0|      CR();
  288|      0|    }
  289|      0|    break;
  290|       |
  291|      0|  case CMARK_NODE_HEADING:
  292|      0|    if (entering) {
  293|      0|      switch (cmark_node_get_heading_level(node)) {
  294|      0|      case 1:
  295|      0|        LIT("\\section");
  296|      0|        break;
  297|      0|      case 2:
  298|      0|        LIT("\\subsection");
  299|      0|        break;
  300|      0|      case 3:
  301|      0|        LIT("\\subsubsection");
  302|      0|        break;
  303|      0|      case 4:
  304|      0|        LIT("\\paragraph");
  305|      0|        break;
  306|      0|      case 5:
  307|      0|        LIT("\\subparagraph");
  308|      0|        break;
  309|      0|      }
  310|      0|      LIT("{");
  311|      0|    } else {
  312|      0|      LIT("}");
  313|      0|      BLANKLINE();
  314|      0|    }
  315|      0|    break;
  316|       |
  317|      0|  case CMARK_NODE_CODE_BLOCK:
  318|      0|    CR();
  319|      0|    LIT("\\begin{verbatim}");
  320|      0|    CR();
  321|      0|    OUT(cmark_node_get_literal(node), false, LITERAL);
  322|      0|    CR();
  323|      0|    LIT("\\end{verbatim}");
  324|      0|    BLANKLINE();
  325|      0|    break;
  326|       |
  327|      0|  case CMARK_NODE_HTML_BLOCK:
  328|      0|    break;
  329|       |
  330|      0|  case CMARK_NODE_CUSTOM_BLOCK:
  331|      0|    CR();
  332|      0|    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),
  333|      0|        false, LITERAL);
  334|      0|    CR();
  335|      0|    break;
  336|       |
  337|      0|  case CMARK_NODE_THEMATIC_BREAK:
  338|      0|    BLANKLINE();
  339|      0|    LIT("\\begin{center}\\rule{0.5\\linewidth}{\\linethickness}\\end{center}");
  340|      0|    BLANKLINE();
  341|      0|    break;
  342|       |
  343|      0|  case CMARK_NODE_PARAGRAPH:
  344|      0|    if (!entering) {
  345|      0|      BLANKLINE();
  346|      0|    }
  347|      0|    break;
  348|       |
  349|      0|  case CMARK_NODE_TEXT:
  350|      0|    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);
  351|      0|    break;
  352|       |
  353|      0|  case CMARK_NODE_LINEBREAK:
  354|      0|    LIT("\\\\");
  355|      0|    CR();
  356|      0|    break;
  357|       |
  358|      0|  case CMARK_NODE_SOFTBREAK:
  359|      0|    if (options & CMARK_OPT_HARDBREAKS) {
  360|      0|      LIT("\\\\");
  361|      0|      CR();
  362|      0|    } else if (renderer->width == 0 && !(CMARK_OPT_NOBREAKS & options)) {
  363|      0|      CR();
  364|      0|    } else {
  365|      0|      OUT(" ", allow_wrap, NORMAL);
  366|      0|    }
  367|      0|    break;
  368|       |
  369|      0|  case CMARK_NODE_CODE:
  370|      0|    LIT("\\texttt{");
  371|      0|    OUT(cmark_node_get_literal(node), false, NORMAL);
  372|      0|    LIT("}");
  373|      0|    break;
  374|       |
  375|      0|  case CMARK_NODE_HTML_INLINE:
  376|      0|    break;
  377|       |
  378|      0|  case CMARK_NODE_CUSTOM_INLINE:
  379|      0|    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),
  380|      0|        false, LITERAL);
  381|      0|    break;
  382|       |
  383|      0|  case CMARK_NODE_STRONG:
  384|      0|    if (entering) {
  385|      0|      LIT("\\textbf{");
  386|      0|    } else {
  387|      0|      LIT("}");
  388|      0|    }
  389|      0|    break;
  390|       |
  391|      0|  case CMARK_NODE_EMPH:
  392|      0|    if (entering) {
  393|      0|      LIT("\\emph{");
  394|      0|    } else {
  395|      0|      LIT("}");
  396|      0|    }
  397|      0|    break;
  398|       |
  399|      0|  case CMARK_NODE_LINK:
  400|      0|    if (entering) {
  401|      0|      const char *url = cmark_node_get_url(node);
  402|       |      // requires \usepackage{hyperref}
  403|      0|      switch (get_link_type(node)) {
  404|      0|      case URL_AUTOLINK:
  405|      0|        LIT("\\url{");
  406|      0|        OUT(url, false, URL);
  407|      0|        LIT("}");
  408|      0|        return 0; // Don't process further nodes to avoid double-rendering artefacts
  409|      0|      case EMAIL_AUTOLINK:
  410|      0|        LIT("\\href{");
  411|      0|        OUT(url, false, URL);
  412|      0|        LIT("}\\nolinkurl{");
  413|      0|        break;
  414|      0|      case NORMAL_LINK:
  415|      0|        LIT("\\href{");
  416|      0|        OUT(url, false, URL);
  417|      0|        LIT("}{");
  418|      0|        break;
  419|      0|      case INTERNAL_LINK:
  420|      0|        LIT("\\protect\\hyperlink{");
  421|      0|        OUT(url + 1, false, URL);
  422|      0|        LIT("}{");
  423|      0|        break;
  424|      0|      case NO_LINK:
  425|      0|        LIT("{"); // error?
  426|      0|      }
  427|      0|    } else {
  428|      0|      LIT("}");
  429|      0|    }
  430|       |
  431|      0|    break;
  432|       |
  433|      0|  case CMARK_NODE_IMAGE:
  434|      0|    if (entering) {
  435|      0|      LIT("\\protect\\includegraphics{");
  436|       |      // requires \include{graphicx}
  437|      0|      OUT(cmark_node_get_url(node), false, URL);
  438|      0|      LIT("}");
  439|      0|      return 0;
  440|      0|    }
  441|      0|    break;
  442|       |
  443|      0|  default:
  444|      0|    assert(false);
  445|      0|    break;
  446|      0|  }
  447|       |
  448|      0|  return 1;
  449|      0|}
  450|       |
  451|      0|char *cmark_render_latex(cmark_node *root, int options, int width) {
  452|      0|  return cmark_render(root, options, width, outc, S_render_node);
  453|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/man.c:
    1|       |#include <stdlib.h>
    2|       |#include <stdio.h>
    3|       |#include <string.h>
    4|       |#include <assert.h>
    5|       |
    6|       |#include "config.h"
    7|       |#include "cmark.h"
    8|       |#include "node.h"
    9|       |#include "buffer.h"
   10|       |#include "utf8.h"
   11|       |#include "render.h"
   12|       |
   13|      0|#define OUT(s, wrap, escaping) renderer->out(renderer, s, wrap, escaping)
   14|      0|#define LIT(s) renderer->out(renderer, s, false, LITERAL)
   15|      0|#define CR() renderer->cr(renderer)
   16|       |#define BLANKLINE() renderer->blankline(renderer)
   17|       |#define LIST_NUMBER_SIZE 20
   18|       |
   19|       |// Functions to convert cmark_nodes to groff man strings.
   20|       |static void S_outc(cmark_renderer *renderer, cmark_escaping escape, int32_t c,
   21|      0|                   unsigned char nextc) {
   22|      0|  (void)(nextc);
   23|       |
   24|      0|  if (escape == LITERAL) {
   25|      0|    cmark_render_code_point(renderer, c);
   26|      0|    return;
   27|      0|  }
   28|       |
   29|      0|  switch (c) {
   30|      0|  case 46:
   31|      0|    if (renderer->begin_line) {
   32|      0|      cmark_render_ascii(renderer, "\\&.");
   33|      0|    } else {
   34|      0|      cmark_render_code_point(renderer, c);
   35|      0|    }
   36|      0|    break;
   37|      0|  case 39:
   38|      0|    if (renderer->begin_line) {
   39|      0|      cmark_render_ascii(renderer, "\\&'");
   40|      0|    } else {
   41|      0|      cmark_render_code_point(renderer, c);
   42|      0|    }
   43|      0|    break;
   44|      0|  case 45:
   45|      0|    cmark_render_ascii(renderer, "\\-");
   46|      0|    break;
   47|      0|  case 92:
   48|      0|    cmark_render_ascii(renderer, "\\e");
   49|      0|    break;
   50|      0|  case 8216: // left single quote
   51|      0|    cmark_render_ascii(renderer, "\\[oq]");
   52|      0|    break;
   53|      0|  case 8217: // right single quote
   54|      0|    cmark_render_ascii(renderer, "\\[cq]");
   55|      0|    break;
   56|      0|  case 8220: // left double quote
   57|      0|    cmark_render_ascii(renderer, "\\[lq]");
   58|      0|    break;
   59|      0|  case 8221: // right double quote
   60|      0|    cmark_render_ascii(renderer, "\\[rq]");
   61|      0|    break;
   62|      0|  case 8212: // em dash
   63|      0|    cmark_render_ascii(renderer, "\\[em]");
   64|      0|    break;
   65|      0|  case 8211: // en dash
   66|      0|    cmark_render_ascii(renderer, "\\[en]");
   67|      0|    break;
   68|      0|  default:
   69|      0|    cmark_render_code_point(renderer, c);
   70|      0|  }
   71|      0|}
   72|       |
   73|       |static int S_render_node(cmark_renderer *renderer, cmark_node *node,
   74|      0|                         cmark_event_type ev_type, int options) {
   75|      0|  cmark_node *tmp;
   76|      0|  int list_number;
   77|      0|  bool entering = (ev_type == CMARK_EVENT_ENTER);
   78|      0|  bool allow_wrap = renderer->width > 0 && !(CMARK_OPT_NOBREAKS & options);
   79|      0|  struct block_number *new_block_number;
   80|      0|  cmark_mem *allocator = cmark_get_default_mem_allocator();
   81|       |
   82|       |  // avoid unused parameter error:
   83|      0|  (void)(options);
   84|       |
   85|       |  // indent inside nested lists
   86|      0|  if (renderer->block_number_in_list_item &&
   87|      0|      node->type < CMARK_NODE_FIRST_INLINE) {
   88|      0|    if (entering) {
   89|      0|      renderer->block_number_in_list_item->number += 1;
   90|      0|      if (renderer->block_number_in_list_item->number == 2) {
   91|      0|        CR();
   92|      0|        LIT(".RS"); // indent
   93|      0|        CR();
   94|      0|      }
   95|      0|    }
   96|      0|  }
   97|       |
   98|      0|  switch (node->type) {
   99|      0|  case CMARK_NODE_DOCUMENT:
  100|      0|    break;
  101|       |
  102|      0|  case CMARK_NODE_BLOCK_QUOTE:
  103|      0|    if (entering) {
  104|      0|      CR();
  105|      0|      LIT(".RS");
  106|      0|      CR();
  107|      0|    } else {
  108|      0|      CR();
  109|      0|      LIT(".RE");
  110|      0|      CR();
  111|      0|    }
  112|      0|    break;
  113|       |
  114|      0|  case CMARK_NODE_LIST:
  115|      0|    break;
  116|       |
  117|      0|  case CMARK_NODE_ITEM:
  118|      0|    if (entering) {
  119|      0|      new_block_number = allocator->calloc(1, sizeof(struct block_number));
  120|      0|      new_block_number->number = 0;
  121|      0|      new_block_number->parent = renderer->block_number_in_list_item;
  122|      0|      renderer->block_number_in_list_item = new_block_number;
  123|      0|      CR();
  124|      0|      LIT(".IP ");
  125|      0|      if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {
  126|      0|        LIT("\\[bu] 2");
  127|      0|      } else {
  128|      0|        list_number = cmark_node_get_list_start(node->parent);
  129|      0|        tmp = node;
  130|      0|        while (tmp->prev) {
  131|      0|          tmp = tmp->prev;
  132|      0|          list_number += 1;
  133|      0|        }
  134|      0|        char list_number_s[LIST_NUMBER_SIZE];
  135|      0|        snprintf(list_number_s, LIST_NUMBER_SIZE, "\"%d.\" 4", list_number);
  136|      0|        LIT(list_number_s);
  137|      0|      }
  138|      0|      CR();
  139|      0|    } else {
  140|      0|      if (renderer->block_number_in_list_item) {
  141|      0|        if (renderer->block_number_in_list_item->number >= 2) {
  142|      0|          CR();
  143|      0|          LIT(".RE"); // de-indent
  144|      0|        }
  145|      0|        new_block_number = renderer->block_number_in_list_item;
  146|      0|        renderer->block_number_in_list_item =
  147|      0|          renderer->block_number_in_list_item->parent;
  148|      0|        allocator->free(new_block_number);
  149|      0|      }
  150|      0|      CR();
  151|      0|    }
  152|      0|    break;
  153|       |
  154|      0|  case CMARK_NODE_HEADING:
  155|      0|    if (entering) {
  156|      0|      CR();
  157|      0|      LIT(cmark_node_get_heading_level(node) == 1 ? ".SH" : ".SS");
  158|      0|      CR();
  159|      0|    } else {
  160|      0|      CR();
  161|      0|    }
  162|      0|    break;
  163|       |
  164|      0|  case CMARK_NODE_CODE_BLOCK:
  165|      0|    CR();
  166|      0|    LIT(".IP\n.nf\n\\f[C]\n");
  167|      0|    OUT(cmark_node_get_literal(node), false, NORMAL);
  168|      0|    CR();
  169|      0|    LIT("\\f[]\n.fi");
  170|      0|    CR();
  171|      0|    break;
  172|       |
  173|      0|  case CMARK_NODE_HTML_BLOCK:
  174|      0|    break;
  175|       |
  176|      0|  case CMARK_NODE_CUSTOM_BLOCK:
  177|      0|    CR();
  178|      0|    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),
  179|      0|        false, LITERAL);
  180|      0|    CR();
  181|      0|    break;
  182|       |
  183|      0|  case CMARK_NODE_THEMATIC_BREAK:
  184|      0|    CR();
  185|      0|    LIT(".PP\n  *  *  *  *  *");
  186|      0|    CR();
  187|      0|    break;
  188|       |
  189|      0|  case CMARK_NODE_PARAGRAPH:
  190|      0|    if (entering) {
  191|       |      // no blank line if first paragraph in list:
  192|      0|      if (node->parent && node->parent->type == CMARK_NODE_ITEM &&
  193|      0|          node->prev == NULL) {
  194|       |        // no blank line or .PP
  195|      0|      } else {
  196|      0|        CR();
  197|      0|        LIT(".PP");
  198|      0|        CR();
  199|      0|      }
  200|      0|    } else {
  201|      0|      CR();
  202|      0|    }
  203|      0|    break;
  204|       |
  205|      0|  case CMARK_NODE_TEXT:
  206|      0|    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);
  207|      0|    break;
  208|       |
  209|      0|  case CMARK_NODE_LINEBREAK:
  210|      0|    LIT(".PD 0\n.P\n.PD");
  211|      0|    CR();
  212|      0|    break;
  213|       |
  214|      0|  case CMARK_NODE_SOFTBREAK:
  215|      0|    if (options & CMARK_OPT_HARDBREAKS) {
  216|      0|      LIT(".PD 0\n.P\n.PD");
  217|      0|      CR();
  218|      0|    } else if (renderer->width == 0 && !(CMARK_OPT_NOBREAKS & options)) {
  219|      0|      CR();
  220|      0|    } else {
  221|      0|      OUT(" ", allow_wrap, LITERAL);
  222|      0|    }
  223|      0|    break;
  224|       |
  225|      0|  case CMARK_NODE_CODE:
  226|      0|    LIT("\\f[C]");
  227|      0|    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);
  228|      0|    LIT("\\f[]");
  229|      0|    break;
  230|       |
  231|      0|  case CMARK_NODE_HTML_INLINE:
  232|      0|    break;
  233|       |
  234|      0|  case CMARK_NODE_CUSTOM_INLINE:
  235|      0|    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),
  236|      0|        false, LITERAL);
  237|      0|    break;
  238|       |
  239|      0|  case CMARK_NODE_STRONG:
  240|      0|    if (entering) {
  241|      0|      LIT("\\f[B]");
  242|      0|    } else {
  243|      0|      LIT("\\f[]");
  244|      0|    }
  245|      0|    break;
  246|       |
  247|      0|  case CMARK_NODE_EMPH:
  248|      0|    if (entering) {
  249|      0|      LIT("\\f[I]");
  250|      0|    } else {
  251|      0|      LIT("\\f[]");
  252|      0|    }
  253|      0|    break;
  254|       |
  255|      0|  case CMARK_NODE_LINK:
  256|      0|    if (!entering) {
  257|      0|      LIT(" (");
  258|      0|      OUT(cmark_node_get_url(node), allow_wrap, URL);
  259|      0|      LIT(")");
  260|      0|    }
  261|      0|    break;
  262|       |
  263|      0|  case CMARK_NODE_IMAGE:
  264|      0|    if (entering) {
  265|      0|      LIT("[IMAGE: ");
  266|      0|    } else {
  267|      0|      LIT("]");
  268|      0|    }
  269|      0|    break;
  270|       |
  271|      0|  default:
  272|      0|    assert(false);
  273|      0|    break;
  274|      0|  }
  275|       |
  276|      0|  return 1;
  277|      0|}
  278|       |
  279|      0|char *cmark_render_man(cmark_node *root, int options, int width) {
  280|      0|  return cmark_render(root, options, width, S_outc, S_render_node);
  281|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/node.c:
    1|       |#include <stdlib.h>
    2|       |#include <string.h>
    3|       |
    4|       |#include "config.h"
    5|       |#include "node.h"
    6|       |
    7|       |static void S_node_unlink(cmark_node *node);
    8|       |
    9|      0|static CMARK_INLINE bool S_is_block(cmark_node *node) {
   10|      0|  if (node == NULL) {
   11|      0|    return false;
   12|      0|  }
   13|      0|  return node->type >= CMARK_NODE_FIRST_BLOCK &&
   14|      0|         node->type <= CMARK_NODE_LAST_BLOCK;
   15|      0|}
   16|       |
   17|     16|static CMARK_INLINE bool S_is_inline(cmark_node *node) {
   18|     16|  if (node == NULL) {
   19|      0|    return false;
   20|      0|  }
   21|     16|  return node->type >= CMARK_NODE_FIRST_INLINE &&
   22|     16|         node->type <= CMARK_NODE_LAST_INLINE;
   23|     16|}
   24|       |
   25|     16|static bool S_can_contain(cmark_node *node, cmark_node *child) {
   26|     16|  if (node == NULL || child == NULL || node == child) {
   27|      0|    return false;
   28|      0|  }
   29|       |
   30|       |  // Verify that child is not an ancestor of node.
   31|     16|  if (child->first_child != NULL) {
   32|      0|    cmark_node *cur = node->parent;
   33|       |
   34|      0|    while (cur != NULL) {
   35|      0|      if (cur == child) {
   36|      0|        return false;
   37|      0|      }
   38|      0|      cur = cur->parent;
   39|      0|    }
   40|      0|  }
   41|       |
   42|     16|  if (child->type == CMARK_NODE_DOCUMENT) {
   43|      0|    return false;
   44|      0|  }
   45|       |
   46|     16|  switch (node->type) {
   47|      0|  case CMARK_NODE_DOCUMENT:
   48|      0|  case CMARK_NODE_BLOCK_QUOTE:
   49|      0|  case CMARK_NODE_ITEM:
   50|      0|    return S_is_block(child) && child->type != CMARK_NODE_ITEM;
   51|       |
   52|      0|  case CMARK_NODE_LIST:
   53|      0|    return child->type == CMARK_NODE_ITEM;
   54|       |
   55|      0|  case CMARK_NODE_CUSTOM_BLOCK:
   56|      0|    return true;
   57|       |
   58|     16|  case CMARK_NODE_PARAGRAPH:
   59|     16|  case CMARK_NODE_HEADING:
   60|     16|  case CMARK_NODE_EMPH:
   61|     16|  case CMARK_NODE_STRONG:
   62|     16|  case CMARK_NODE_LINK:
   63|     16|  case CMARK_NODE_IMAGE:
   64|     16|  case CMARK_NODE_CUSTOM_INLINE:
   65|     16|    return S_is_inline(child);
   66|       |
   67|      0|  default:
   68|      0|    break;
   69|     16|  }
   70|       |
   71|      0|  return false;
   72|     16|}
   73|       |
   74|      0|cmark_node *cmark_node_new_with_mem(cmark_node_type type, cmark_mem *mem) {
   75|      0|  cmark_node *node = (cmark_node *)mem->calloc(1, sizeof(*node));
   76|      0|  node->mem = mem;
   77|      0|  node->type = (uint16_t)type;
   78|       |
   79|      0|  switch (node->type) {
   80|      0|  case CMARK_NODE_HEADING:
   81|      0|    node->as.heading.level = 1;
   82|      0|    break;
   83|       |
   84|      0|  case CMARK_NODE_LIST: {
   85|      0|    cmark_list *list = &node->as.list;
   86|      0|    list->list_type = CMARK_BULLET_LIST;
   87|      0|    list->start = 0;
   88|      0|    list->tight = false;
   89|      0|    break;
   90|      0|  }
   91|       |
   92|      0|  default:
   93|      0|    break;
   94|      0|  }
   95|       |
   96|      0|  return node;
   97|      0|}
   98|       |
   99|      0|cmark_node *cmark_node_new(cmark_node_type type) {
  100|      0|  extern cmark_mem DEFAULT_MEM_ALLOCATOR;
  101|      0|  return cmark_node_new_with_mem(type, &DEFAULT_MEM_ALLOCATOR);
  102|      0|}
  103|       |
  104|       |// Free a cmark_node list and any children.
  105|     18|static void S_free_nodes(cmark_node *e) {
  106|     18|  cmark_mem *mem = e->mem;
  107|     18|  cmark_node *next;
  108|    194|  while (e != NULL) {
  109|    176|    switch (e->type) {
  110|      0|    case CMARK_NODE_CODE_BLOCK:
  111|      0|      mem->free(e->data);
  112|      0|      mem->free(e->as.code.info);
  113|      0|      break;
  114|     80|    case CMARK_NODE_TEXT:
  115|     80|    case CMARK_NODE_HTML_INLINE:
  116|     80|    case CMARK_NODE_CODE:
  117|     80|    case CMARK_NODE_HTML_BLOCK:
  118|     80|      mem->free(e->data);
  119|     80|      break;
  120|     16|    case CMARK_NODE_LINK:
  121|     16|    case CMARK_NODE_IMAGE:
  122|     16|      mem->free(e->as.link.url);
  123|     16|      mem->free(e->as.link.title);
  124|     16|      break;
  125|      0|    case CMARK_NODE_CUSTOM_BLOCK:
  126|      0|    case CMARK_NODE_CUSTOM_INLINE:
  127|      0|      mem->free(e->as.custom.on_enter);
  128|      0|      mem->free(e->as.custom.on_exit);
  129|      0|      break;
  130|     80|    default:
  131|     80|      break;
  132|    176|    }
  133|    176|    if (e->last_child) {
  134|       |      // Splice children into list
  135|     96|      e->last_child->next = e->next;
  136|     96|      e->next = e->first_child;
  137|     96|    }
  138|    176|    next = e->next;
  139|    176|    mem->free(e);
  140|    176|    e = next;
  141|    176|  }
  142|     18|}
  143|       |
  144|     18|void cmark_node_free(cmark_node *node) {
  145|     18|  S_node_unlink(node);
  146|     18|  node->next = NULL;
  147|     18|  S_free_nodes(node);
  148|     18|}
  149|       |
  150|    158|cmark_node_type cmark_node_get_type(cmark_node *node) {
  151|    158|  if (node == NULL) {
  152|      0|    return CMARK_NODE_NONE;
  153|    158|  } else {
  154|    158|    return (cmark_node_type)node->type;
  155|    158|  }
  156|    158|}
  157|       |
  158|      0|const char *cmark_node_get_type_string(cmark_node *node) {
  159|      0|  if (node == NULL) {
  160|      0|    return "NONE";
  161|      0|  }
  162|       |
  163|      0|  switch (node->type) {
  164|      0|  case CMARK_NODE_NONE:
  165|      0|    return "none";
  166|      0|  case CMARK_NODE_DOCUMENT:
  167|      0|    return "document";
  168|      0|  case CMARK_NODE_BLOCK_QUOTE:
  169|      0|    return "block_quote";
  170|      0|  case CMARK_NODE_LIST:
  171|      0|    return "list";
  172|      0|  case CMARK_NODE_ITEM:
  173|      0|    return "item";
  174|      0|  case CMARK_NODE_CODE_BLOCK:
  175|      0|    return "code_block";
  176|      0|  case CMARK_NODE_HTML_BLOCK:
  177|      0|    return "html_block";
  178|      0|  case CMARK_NODE_CUSTOM_BLOCK:
  179|      0|    return "custom_block";
  180|      0|  case CMARK_NODE_PARAGRAPH:
  181|      0|    return "paragraph";
  182|      0|  case CMARK_NODE_HEADING:
  183|      0|    return "heading";
  184|      0|  case CMARK_NODE_THEMATIC_BREAK:
  185|      0|    return "thematic_break";
  186|      0|  case CMARK_NODE_TEXT:
  187|      0|    return "text";
  188|      0|  case CMARK_NODE_SOFTBREAK:
  189|      0|    return "softbreak";
  190|      0|  case CMARK_NODE_LINEBREAK:
  191|      0|    return "linebreak";
  192|      0|  case CMARK_NODE_CODE:
  193|      0|    return "code";
  194|      0|  case CMARK_NODE_HTML_INLINE:
  195|      0|    return "html_inline";
  196|      0|  case CMARK_NODE_CUSTOM_INLINE:
  197|      0|    return "custom_inline";
  198|      0|  case CMARK_NODE_EMPH:
  199|      0|    return "emph";
  200|      0|  case CMARK_NODE_STRONG:
  201|      0|    return "strong";
  202|      0|  case CMARK_NODE_LINK:
  203|      0|    return "link";
  204|      0|  case CMARK_NODE_IMAGE:
  205|      0|    return "image";
  206|      0|  }
  207|       |
  208|      0|  return "<unknown>";
  209|      0|}
  210|       |
  211|    158|cmark_node *cmark_node_next(cmark_node *node) {
  212|    158|  if (node == NULL) {
  213|      0|    return NULL;
  214|    158|  } else {
  215|    158|    return node->next;
  216|    158|  }
  217|    158|}
  218|       |
  219|      0|cmark_node *cmark_node_previous(cmark_node *node) {
  220|      0|  if (node == NULL) {
  221|      0|    return NULL;
  222|      0|  } else {
  223|      0|    return node->prev;
  224|      0|  }
  225|      0|}
  226|       |
  227|      0|cmark_node *cmark_node_parent(cmark_node *node) {
  228|      0|  if (node == NULL) {
  229|      0|    return NULL;
  230|      0|  } else {
  231|      0|    return node->parent;
  232|      0|  }
  233|      0|}
  234|       |
  235|     96|cmark_node *cmark_node_first_child(cmark_node *node) {
  236|     96|  if (node == NULL) {
  237|      0|    return NULL;
  238|     96|  } else {
  239|     96|    return node->first_child;
  240|     96|  }
  241|     96|}
  242|       |
  243|      0|cmark_node *cmark_node_last_child(cmark_node *node) {
  244|      0|  if (node == NULL) {
  245|      0|    return NULL;
  246|      0|  } else {
  247|      0|    return node->last_child;
  248|      0|  }
  249|      0|}
  250|       |
  251|       |static bufsize_t cmark_set_cstr(cmark_mem *mem, unsigned char **dst,
  252|      0|                                const char *src) {
  253|      0|  unsigned char *old = *dst;
  254|      0|  bufsize_t len;
  255|       |
  256|      0|  if (src && src[0]) {
  257|      0|      len = (bufsize_t)strlen(src);
  258|      0|      *dst = (unsigned char *)mem->realloc(NULL, len + 1);
  259|      0|      memcpy(*dst, src, len + 1);
  260|      0|  } else {
  261|      0|      len = 0;
  262|      0|      *dst = NULL;
  263|      0|  }
  264|      0|  if (old) {
  265|      0|    mem->free(old);
  266|      0|  }
  267|       |
  268|      0|  return len;
  269|      0|}
  270|       |
  271|      0|void *cmark_node_get_user_data(cmark_node *node) {
  272|      0|  if (node == NULL) {
  273|      0|    return NULL;
  274|      0|  } else {
  275|      0|    return node->user_data;
  276|      0|  }
  277|      0|}
  278|       |
  279|      0|int cmark_node_set_user_data(cmark_node *node, void *user_data) {
  280|      0|  if (node == NULL) {
  281|      0|    return 0;
  282|      0|  }
  283|      0|  node->user_data = user_data;
  284|      0|  return 1;
  285|      0|}
  286|       |
  287|     64|const char *cmark_node_get_literal(cmark_node *node) {
  288|     64|  if (node == NULL) {
  289|      0|    return NULL;
  290|      0|  }
  291|       |
  292|     64|  switch (node->type) {
  293|      0|  case CMARK_NODE_HTML_BLOCK:
  294|     64|  case CMARK_NODE_TEXT:
  295|     64|  case CMARK_NODE_HTML_INLINE:
  296|     64|  case CMARK_NODE_CODE:
  297|     64|  case CMARK_NODE_CODE_BLOCK:
  298|     64|    return node->data ? (char *)node->data : "";
  299|       |
  300|      0|  default:
  301|      0|    break;
  302|     64|  }
  303|       |
  304|      0|  return NULL;
  305|     64|}
  306|       |
  307|      0|int cmark_node_set_literal(cmark_node *node, const char *content) {
  308|      0|  if (node == NULL) {
  309|      0|    return 0;
  310|      0|  }
  311|       |
  312|      0|  switch (node->type) {
  313|      0|  case CMARK_NODE_HTML_BLOCK:
  314|      0|  case CMARK_NODE_TEXT:
  315|      0|  case CMARK_NODE_HTML_INLINE:
  316|      0|  case CMARK_NODE_CODE:
  317|      0|  case CMARK_NODE_CODE_BLOCK:
  318|      0|    node->len = cmark_set_cstr(node->mem, &node->data, content);
  319|      0|    return 1;
  320|       |
  321|      0|  default:
  322|      0|    break;
  323|      0|  }
  324|       |
  325|      0|  return 0;
  326|      0|}
  327|       |
  328|      8|int cmark_node_get_heading_level(cmark_node *node) {
  329|      8|  if (node == NULL) {
  330|      0|    return 0;
  331|      0|  }
  332|       |
  333|      8|  switch (node->type) {
  334|      8|  case CMARK_NODE_HEADING:
  335|      8|    return node->as.heading.level;
  336|       |
  337|      0|  default:
  338|      0|    break;
  339|      8|  }
  340|       |
  341|      0|  return 0;
  342|      8|}
  343|       |
  344|      0|int cmark_node_set_heading_level(cmark_node *node, int level) {
  345|      0|  if (node == NULL || level < 1 || level > 6) {
  346|      0|    return 0;
  347|      0|  }
  348|       |
  349|      0|  switch (node->type) {
  350|      0|  case CMARK_NODE_HEADING:
  351|      0|    node->as.heading.level = level;
  352|      0|    return 1;
  353|       |
  354|      0|  default:
  355|      0|    break;
  356|      0|  }
  357|       |
  358|      0|  return 0;
  359|      0|}
  360|       |
  361|      8|cmark_list_type cmark_node_get_list_type(cmark_node *node) {
  362|      8|  if (node == NULL) {
  363|      0|    return CMARK_NO_LIST;
  364|      0|  }
  365|       |
  366|      8|  if (node->type == CMARK_NODE_LIST) {
  367|      8|    return (cmark_list_type)node->as.list.list_type;
  368|      8|  } else {
  369|      0|    return CMARK_NO_LIST;
  370|      0|  }
  371|      8|}
  372|       |
  373|      0|int cmark_node_set_list_type(cmark_node *node, cmark_list_type type) {
  374|      0|  if (!(type == CMARK_BULLET_LIST || type == CMARK_ORDERED_LIST)) {
  375|      0|    return 0;
  376|      0|  }
  377|       |
  378|      0|  if (node == NULL) {
  379|      0|    return 0;
  380|      0|  }
  381|       |
  382|      0|  if (node->type == CMARK_NODE_LIST) {
  383|      0|    node->as.list.list_type = (unsigned char)type;
  384|      0|    return 1;
  385|      0|  } else {
  386|      0|    return 0;
  387|      0|  }
  388|      0|}
  389|       |
  390|      0|cmark_delim_type cmark_node_get_list_delim(cmark_node *node) {
  391|      0|  if (node == NULL) {
  392|      0|    return CMARK_NO_DELIM;
  393|      0|  }
  394|       |
  395|      0|  if (node->type == CMARK_NODE_LIST) {
  396|      0|    return (cmark_delim_type)node->as.list.delimiter;
  397|      0|  } else {
  398|      0|    return CMARK_NO_DELIM;
  399|      0|  }
  400|      0|}
  401|       |
  402|      0|int cmark_node_set_list_delim(cmark_node *node, cmark_delim_type delim) {
  403|      0|  if (!(delim == CMARK_PERIOD_DELIM || delim == CMARK_PAREN_DELIM)) {
  404|      0|    return 0;
  405|      0|  }
  406|       |
  407|      0|  if (node == NULL) {
  408|      0|    return 0;
  409|      0|  }
  410|       |
  411|      0|  if (node->type == CMARK_NODE_LIST) {
  412|      0|    node->as.list.delimiter = (unsigned char)delim;
  413|      0|    return 1;
  414|      0|  } else {
  415|      0|    return 0;
  416|      0|  }
  417|      0|}
  418|       |
  419|      0|int cmark_node_get_list_start(cmark_node *node) {
  420|      0|  if (node == NULL) {
  421|      0|    return 0;
  422|      0|  }
  423|       |
  424|      0|  if (node->type == CMARK_NODE_LIST) {
  425|      0|    return node->as.list.start;
  426|      0|  } else {
  427|      0|    return 0;
  428|      0|  }
  429|      0|}
  430|       |
  431|      0|int cmark_node_set_list_start(cmark_node *node, int start) {
  432|      0|  if (node == NULL || start < 0) {
  433|      0|    return 0;
  434|      0|  }
  435|       |
  436|      0|  if (node->type == CMARK_NODE_LIST) {
  437|      0|    node->as.list.start = start;
  438|      0|    return 1;
  439|      0|  } else {
  440|      0|    return 0;
  441|      0|  }
  442|      0|}
  443|       |
  444|      8|int cmark_node_get_list_tight(cmark_node *node) {
  445|      8|  if (node == NULL) {
  446|      0|    return 0;
  447|      0|  }
  448|       |
  449|      8|  if (node->type == CMARK_NODE_LIST) {
  450|      8|    return node->as.list.tight;
  451|      8|  } else {
  452|      0|    return 0;
  453|      0|  }
  454|      8|}
  455|       |
  456|      0|int cmark_node_set_list_tight(cmark_node *node, int tight) {
  457|      0|  if (node == NULL) {
  458|      0|    return 0;
  459|      0|  }
  460|       |
  461|      0|  if (node->type == CMARK_NODE_LIST) {
  462|      0|    node->as.list.tight = tight == 1;
  463|      0|    return 1;
  464|      0|  } else {
  465|      0|    return 0;
  466|      0|  }
  467|      0|}
  468|       |
  469|      0|const char *cmark_node_get_fence_info(cmark_node *node) {
  470|      0|  if (node == NULL) {
  471|      0|    return NULL;
  472|      0|  }
  473|       |
  474|      0|  if (node->type == CMARK_NODE_CODE_BLOCK) {
  475|      0|    return node->as.code.info ? (char *)node->as.code.info : "";
  476|      0|  } else {
  477|      0|    return NULL;
  478|      0|  }
  479|      0|}
  480|       |
  481|      0|int cmark_node_set_fence_info(cmark_node *node, const char *info) {
  482|      0|  if (node == NULL) {
  483|      0|    return 0;
  484|      0|  }
  485|       |
  486|      0|  if (node->type == CMARK_NODE_CODE_BLOCK) {
  487|      0|    cmark_set_cstr(node->mem, &node->as.code.info, info);
  488|      0|    return 1;
  489|      0|  } else {
  490|      0|    return 0;
  491|      0|  }
  492|      0|}
  493|       |
  494|     16|const char *cmark_node_get_url(cmark_node *node) {
  495|     16|  if (node == NULL) {
  496|      0|    return NULL;
  497|      0|  }
  498|       |
  499|     16|  switch (node->type) {
  500|     16|  case CMARK_NODE_LINK:
  501|     16|  case CMARK_NODE_IMAGE:
  502|     16|    return node->as.link.url ? (char *)node->as.link.url : "";
  503|      0|  default:
  504|      0|    break;
  505|     16|  }
  506|       |
  507|      0|  return NULL;
  508|     16|}
  509|       |
  510|      0|int cmark_node_set_url(cmark_node *node, const char *url) {
  511|      0|  if (node == NULL) {
  512|      0|    return 0;
  513|      0|  }
  514|       |
  515|      0|  switch (node->type) {
  516|      0|  case CMARK_NODE_LINK:
  517|      0|  case CMARK_NODE_IMAGE:
  518|      0|    cmark_set_cstr(node->mem, &node->as.link.url, url);
  519|      0|    return 1;
  520|      0|  default:
  521|      0|    break;
  522|      0|  }
  523|       |
  524|      0|  return 0;
  525|      0|}
  526|       |
  527|     16|const char *cmark_node_get_title(cmark_node *node) {
  528|     16|  if (node == NULL) {
  529|      0|    return NULL;
  530|      0|  }
  531|       |
  532|     16|  switch (node->type) {
  533|     16|  case CMARK_NODE_LINK:
  534|     16|  case CMARK_NODE_IMAGE:
  535|     16|    return node->as.link.title ? (char *)node->as.link.title : "";
  536|      0|  default:
  537|      0|    break;
  538|     16|  }
  539|       |
  540|      0|  return NULL;
  541|     16|}
  542|       |
  543|      0|int cmark_node_set_title(cmark_node *node, const char *title) {
  544|      0|  if (node == NULL) {
  545|      0|    return 0;
  546|      0|  }
  547|       |
  548|      0|  switch (node->type) {
  549|      0|  case CMARK_NODE_LINK:
  550|      0|  case CMARK_NODE_IMAGE:
  551|      0|    cmark_set_cstr(node->mem, &node->as.link.title, title);
  552|      0|    return 1;
  553|      0|  default:
  554|      0|    break;
  555|      0|  }
  556|       |
  557|      0|  return 0;
  558|      0|}
  559|       |
  560|      0|const char *cmark_node_get_on_enter(cmark_node *node) {
  561|      0|  if (node == NULL) {
  562|      0|    return NULL;
  563|      0|  }
  564|       |
  565|      0|  switch (node->type) {
  566|      0|  case CMARK_NODE_CUSTOM_INLINE:
  567|      0|  case CMARK_NODE_CUSTOM_BLOCK:
  568|      0|    return node->as.custom.on_enter ? (char *)node->as.custom.on_enter : "";
  569|      0|  default:
  570|      0|    break;
  571|      0|  }
  572|       |
  573|      0|  return NULL;
  574|      0|}
  575|       |
  576|      0|int cmark_node_set_on_enter(cmark_node *node, const char *on_enter) {
  577|      0|  if (node == NULL) {
  578|      0|    return 0;
  579|      0|  }
  580|       |
  581|      0|  switch (node->type) {
  582|      0|  case CMARK_NODE_CUSTOM_INLINE:
  583|      0|  case CMARK_NODE_CUSTOM_BLOCK:
  584|      0|    cmark_set_cstr(node->mem, &node->as.custom.on_enter, on_enter);
  585|      0|    return 1;
  586|      0|  default:
  587|      0|    break;
  588|      0|  }
  589|       |
  590|      0|  return 0;
  591|      0|}
  592|       |
  593|      0|const char *cmark_node_get_on_exit(cmark_node *node) {
  594|      0|  if (node == NULL) {
  595|      0|    return NULL;
  596|      0|  }
  597|       |
  598|      0|  switch (node->type) {
  599|      0|  case CMARK_NODE_CUSTOM_INLINE:
  600|      0|  case CMARK_NODE_CUSTOM_BLOCK:
  601|      0|    return node->as.custom.on_exit ? (char *)node->as.custom.on_exit : "";
  602|      0|  default:
  603|      0|    break;
  604|      0|  }
  605|       |
  606|      0|  return NULL;
  607|      0|}
  608|       |
  609|      0|int cmark_node_set_on_exit(cmark_node *node, const char *on_exit) {
  610|      0|  if (node == NULL) {
  611|      0|    return 0;
  612|      0|  }
  613|       |
  614|      0|  switch (node->type) {
  615|      0|  case CMARK_NODE_CUSTOM_INLINE:
  616|      0|  case CMARK_NODE_CUSTOM_BLOCK:
  617|      0|    cmark_set_cstr(node->mem, &node->as.custom.on_exit, on_exit);
  618|      0|    return 1;
  619|      0|  default:
  620|      0|    break;
  621|      0|  }
  622|       |
  623|      0|  return 0;
  624|      0|}
  625|       |
  626|      0|int cmark_node_get_start_line(cmark_node *node) {
  627|      0|  if (node == NULL) {
  628|      0|    return 0;
  629|      0|  }
  630|      0|  return node->start_line;
  631|      0|}
  632|       |
  633|      0|int cmark_node_get_start_column(cmark_node *node) {
  634|      0|  if (node == NULL) {
  635|      0|    return 0;
  636|      0|  }
  637|      0|  return node->start_column;
  638|      0|}
  639|       |
  640|      0|int cmark_node_get_end_line(cmark_node *node) {
  641|      0|  if (node == NULL) {
  642|      0|    return 0;
  643|      0|  }
  644|      0|  return node->end_line;
  645|      0|}
  646|       |
  647|      0|int cmark_node_get_end_column(cmark_node *node) {
  648|      0|  if (node == NULL) {
  649|      0|    return 0;
  650|      0|  }
  651|      0|  return node->end_column;
  652|      0|}
  653|       |
  654|       |// Unlink a node without adjusting its next, prev, and parent pointers.
  655|     50|static void S_node_unlink(cmark_node *node) {
  656|     50|  if (node == NULL) {
  657|      0|    return;
  658|      0|  }
  659|       |
  660|     50|  if (node->prev) {
  661|     32|    node->prev->next = node->next;
  662|     32|  }
  663|     50|  if (node->next) {
  664|      0|    node->next->prev = node->prev;
  665|      0|  }
  666|       |
  667|       |  // Adjust first_child and last_child of parent.
  668|     50|  cmark_node *parent = node->parent;
  669|     50|  if (parent) {
  670|     32|    if (parent->first_child == node) {
  671|      0|      parent->first_child = node->next;
  672|      0|    }
  673|     32|    if (parent->last_child == node) {
  674|     32|      parent->last_child = node->prev;
  675|     32|    }
  676|     32|  }
  677|     50|}
  678|       |
  679|     16|void cmark_node_unlink(cmark_node *node) {
  680|     16|  S_node_unlink(node);
  681|       |
  682|     16|  node->next = NULL;
  683|     16|  node->prev = NULL;
  684|     16|  node->parent = NULL;
  685|     16|}
  686|       |
  687|     16|int cmark_node_insert_before(cmark_node *node, cmark_node *sibling) {
  688|     16|  if (node == NULL || sibling == NULL) {
  689|      0|    return 0;
  690|      0|  }
  691|       |
  692|     16|  if (!node->parent || !S_can_contain(node->parent, sibling)) {
  693|      0|    return 0;
  694|      0|  }
  695|       |
  696|     16|  S_node_unlink(sibling);
  697|       |
  698|     16|  cmark_node *old_prev = node->prev;
  699|       |
  700|       |  // Insert 'sibling' between 'old_prev' and 'node'.
  701|     16|  if (old_prev) {
  702|     12|    old_prev->next = sibling;
  703|     12|  }
  704|     16|  sibling->prev = old_prev;
  705|     16|  sibling->next = node;
  706|     16|  node->prev = sibling;
  707|       |
  708|       |  // Set new parent.
  709|     16|  cmark_node *parent = node->parent;
  710|     16|  sibling->parent = parent;
  711|       |
  712|       |  // Adjust first_child of parent if inserted as first child.
  713|     16|  if (parent && !old_prev) {
  714|      4|    parent->first_child = sibling;
  715|      4|  }
  716|       |
  717|     16|  return 1;
  718|     16|}
  719|       |
  720|      0|int cmark_node_insert_after(cmark_node *node, cmark_node *sibling) {
  721|      0|  if (node == NULL || sibling == NULL) {
  722|      0|    return 0;
  723|      0|  }
  724|       |
  725|      0|  if (!node->parent || !S_can_contain(node->parent, sibling)) {
  726|      0|    return 0;
  727|      0|  }
  728|       |
  729|      0|  S_node_unlink(sibling);
  730|       |
  731|      0|  cmark_node *old_next = node->next;
  732|       |
  733|       |  // Insert 'sibling' between 'node' and 'old_next'.
  734|      0|  if (old_next) {
  735|      0|    old_next->prev = sibling;
  736|      0|  }
  737|      0|  sibling->next = old_next;
  738|      0|  sibling->prev = node;
  739|      0|  node->next = sibling;
  740|       |
  741|       |  // Set new parent.
  742|      0|  cmark_node *parent = node->parent;
  743|      0|  sibling->parent = parent;
  744|       |
  745|       |  // Adjust last_child of parent if inserted as last child.
  746|      0|  if (parent && !old_next) {
  747|      0|    parent->last_child = sibling;
  748|      0|  }
  749|       |
  750|      0|  return 1;
  751|      0|}
  752|       |
  753|      0|int cmark_node_replace(cmark_node *oldnode, cmark_node *newnode) {
  754|      0|  if (!cmark_node_insert_before(oldnode, newnode)) {
  755|      0|    return 0;
  756|      0|  }
  757|      0|  cmark_node_unlink(oldnode);
  758|      0|  return 1;
  759|      0|}
  760|       |
  761|      0|int cmark_node_prepend_child(cmark_node *node, cmark_node *child) {
  762|      0|  if (!S_can_contain(node, child)) {
  763|      0|    return 0;
  764|      0|  }
  765|       |
  766|      0|  S_node_unlink(child);
  767|       |
  768|      0|  cmark_node *old_first_child = node->first_child;
  769|       |
  770|      0|  child->next = old_first_child;
  771|      0|  child->prev = NULL;
  772|      0|  child->parent = node;
  773|      0|  node->first_child = child;
  774|       |
  775|      0|  if (old_first_child) {
  776|      0|    old_first_child->prev = child;
  777|      0|  } else {
  778|       |    // Also set last_child if node previously had no children.
  779|      0|    node->last_child = child;
  780|      0|  }
  781|       |
  782|      0|  return 1;
  783|      0|}
  784|       |
  785|      0|int cmark_node_append_child(cmark_node *node, cmark_node *child) {
  786|      0|  if (!S_can_contain(node, child)) {
  787|      0|    return 0;
  788|      0|  }
  789|       |
  790|      0|  S_node_unlink(child);
  791|       |
  792|      0|  cmark_node *old_last_child = node->last_child;
  793|       |
  794|      0|  child->next = NULL;
  795|      0|  child->prev = old_last_child;
  796|      0|  child->parent = node;
  797|      0|  node->last_child = child;
  798|       |
  799|      0|  if (old_last_child) {
  800|      0|    old_last_child->next = child;
  801|      0|  } else {
  802|       |    // Also set first_child if node previously had no children.
  803|      0|    node->first_child = child;
  804|      0|  }
  805|       |
  806|      0|  return 1;
  807|      0|}
  808|       |
  809|      0|static void S_print_error(FILE *out, cmark_node *node, const char *elem) {
  810|      0|  if (out == NULL) {
  811|      0|    return;
  812|      0|  }
  813|      0|  fprintf(out, "Invalid '%s' in node type %s at %d:%d\n", elem,
  814|      0|          cmark_node_get_type_string(node), node->start_line,
  815|      0|          node->start_column);
  816|      0|}
  817|       |
  818|      0|int cmark_node_check(cmark_node *node, FILE *out) {
  819|      0|  cmark_node *cur;
  820|      0|  int errors = 0;
  821|       |
  822|      0|  if (!node) {
  823|      0|    return 0;
  824|      0|  }
  825|       |
  826|      0|  cur = node;
  827|      0|  for (;;) {
  828|      0|    if (cur->first_child) {
  829|      0|      if (cur->first_child->prev != NULL) {
  830|      0|        S_print_error(out, cur->first_child, "prev");
  831|      0|        cur->first_child->prev = NULL;
  832|      0|        ++errors;
  833|      0|      }
  834|      0|      if (cur->first_child->parent != cur) {
  835|      0|        S_print_error(out, cur->first_child, "parent");
  836|      0|        cur->first_child->parent = cur;
  837|      0|        ++errors;
  838|      0|      }
  839|      0|      cur = cur->first_child;
  840|      0|      continue;
  841|      0|    }
  842|       |
  843|      0|  next_sibling:
  844|      0|    if (cur == node) {
  845|      0|      break;
  846|      0|    }
  847|      0|    if (cur->next) {
  848|      0|      if (cur->next->prev != cur) {
  849|      0|        S_print_error(out, cur->next, "prev");
  850|      0|        cur->next->prev = cur;
  851|      0|        ++errors;
  852|      0|      }
  853|      0|      if (cur->next->parent != cur->parent) {
  854|      0|        S_print_error(out, cur->next, "parent");
  855|      0|        cur->next->parent = cur->parent;
  856|      0|        ++errors;
  857|      0|      }
  858|      0|      cur = cur->next;
  859|      0|      continue;
  860|      0|    }
  861|       |
  862|      0|    if (cur->parent->last_child != cur) {
  863|      0|      S_print_error(out, cur->parent, "last_child");
  864|      0|      cur->parent->last_child = cur;
  865|      0|      ++errors;
  866|      0|    }
  867|      0|    cur = cur->parent;
  868|      0|    goto next_sibling;
  869|      0|  }
  870|       |
  871|      0|  return errors;
  872|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/parser.h:
    1|       |#ifndef CMARK_AST_H
    2|       |#define CMARK_AST_H
    3|       |
    4|       |#include <stdio.h>
    5|       |#include "references.h"
    6|       |#include "node.h"
    7|       |#include "buffer.h"
    8|       |
    9|       |#ifdef __cplusplus
   10|       |extern "C" {
   11|       |#endif
   12|       |
   13|    100|#define MAX_LINK_LABEL_LENGTH 1000
   14|       |
   15|       |struct cmark_parser {
   16|       |  struct cmark_mem *mem;
   17|       |  struct cmark_reference_map *refmap;
   18|       |  struct cmark_node *root;
   19|       |  struct cmark_node *current;
   20|       |  int line_number;
   21|       |  bufsize_t offset;
   22|       |  bufsize_t column;
   23|       |  bufsize_t first_nonspace;
   24|       |  bufsize_t first_nonspace_column;
   25|       |  bufsize_t thematic_break_kill_pos;
   26|       |  int indent;
   27|       |  bool blank;
   28|       |  bool partially_consumed_tab;
   29|       |  cmark_strbuf curline;
   30|       |  bufsize_t last_line_length;
   31|       |  cmark_strbuf linebuf;
   32|       |  cmark_strbuf content;
   33|       |  int options;
   34|       |  bool last_buffer_ended_with_cr;
   35|       |  unsigned int total_size;
   36|       |};
   37|       |
   38|       |#ifdef __cplusplus
   39|       |}
   40|       |#endif
   41|       |
   42|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/references.c:
    1|       |#include "cmark.h"
    2|       |#include "utf8.h"
    3|       |#include "parser.h"
    4|       |#include "references.h"
    5|       |#include "inlines.h"
    6|       |#include "chunk.h"
    7|       |
    8|      0|static void reference_free(cmark_reference_map *map, cmark_reference *ref) {
    9|      0|  cmark_mem *mem = map->mem;
   10|      0|  if (ref != NULL) {
   11|      0|    mem->free(ref->label);
   12|      0|    mem->free(ref->url);
   13|      0|    mem->free(ref->title);
   14|      0|    mem->free(ref);
   15|      0|  }
   16|      0|}
   17|       |
   18|       |// normalize reference:  collapse internal whitespace to single space,
   19|       |// remove leading/trailing whitespace, case fold
   20|       |// Return NULL if the reference name is actually empty (i.e. composed
   21|       |// solely from whitespace)
   22|      0|static unsigned char *normalize_reference(cmark_mem *mem, cmark_chunk *ref) {
   23|      0|  cmark_strbuf normalized = CMARK_BUF_INIT(mem);
   24|      0|  unsigned char *result;
   25|       |
   26|      0|  if (ref == NULL)
   27|      0|    return NULL;
   28|       |
   29|      0|  if (ref->len == 0)
   30|      0|    return NULL;
   31|       |
   32|      0|  cmark_utf8proc_case_fold(&normalized, ref->data, ref->len);
   33|      0|  cmark_strbuf_trim(&normalized);
   34|      0|  cmark_strbuf_normalize_whitespace(&normalized);
   35|       |
   36|      0|  result = cmark_strbuf_detach(&normalized);
   37|      0|  assert(result);
   38|       |
   39|      0|  if (result[0] == '\0') {
   40|      0|    mem->free(result);
   41|      0|    return NULL;
   42|      0|  }
   43|       |
   44|      0|  return result;
   45|      0|}
   46|       |
   47|       |void cmark_reference_create(cmark_reference_map *map, cmark_chunk *label,
   48|      0|                            cmark_chunk *url, cmark_chunk *title) {
   49|      0|  cmark_reference *ref;
   50|      0|  unsigned char *reflabel = normalize_reference(map->mem, label);
   51|       |
   52|       |  /* empty reference name, or composed from only whitespace */
   53|      0|  if (reflabel == NULL)
   54|      0|    return;
   55|       |
   56|      0|  assert(map->sorted == NULL);
   57|       |
   58|      0|  ref = (cmark_reference *)map->mem->calloc(1, sizeof(*ref));
   59|      0|  ref->label = reflabel;
   60|      0|  ref->url = cmark_clean_url(map->mem, url);
   61|      0|  ref->title = cmark_clean_title(map->mem, title);
   62|      0|  ref->age = map->size;
   63|      0|  ref->next = map->refs;
   64|       |
   65|      0|  if (ref->url != NULL)
   66|      0|    ref->size += strlen((char*)ref->url);
   67|      0|  if (ref->title != NULL)
   68|      0|    ref->size += strlen((char*)ref->title);
   69|       |
   70|      0|  map->refs = ref;
   71|      0|  map->size++;
   72|      0|}
   73|       |
   74|       |static int
   75|      0|labelcmp(const unsigned char *a, const unsigned char *b) {
   76|      0|  return strcmp((const char *)a, (const char *)b);
   77|      0|}
   78|       |
   79|       |static int
   80|      0|refcmp(const void *p1, const void *p2) {
   81|      0|  cmark_reference *r1 = *(cmark_reference **)p1;
   82|      0|  cmark_reference *r2 = *(cmark_reference **)p2;
   83|      0|  int res = labelcmp(r1->label, r2->label);
   84|      0|  return res ? res : ((int)r1->age - (int)r2->age);
   85|      0|}
   86|       |
   87|       |static int
   88|      0|refsearch(const void *label, const void *p2) {
   89|      0|  cmark_reference *ref = *(cmark_reference **)p2;
   90|      0|  return labelcmp((const unsigned char *)label, ref->label);
   91|      0|}
   92|       |
   93|      0|static void sort_references(cmark_reference_map *map) {
   94|      0|  unsigned int i = 0, last = 0, size = map->size;
   95|      0|  cmark_reference *r = map->refs, **sorted = NULL;
   96|       |
   97|      0|  sorted = (cmark_reference **)map->mem->calloc(size, sizeof(cmark_reference *));
   98|      0|  while (r) {
   99|      0|    sorted[i++] = r;
  100|      0|    r = r->next;
  101|      0|  }
  102|       |
  103|      0|  qsort(sorted, size, sizeof(cmark_reference *), refcmp);
  104|       |
  105|      0|  for (i = 1; i < size; i++) {
  106|      0|    if (labelcmp(sorted[i]->label, sorted[last]->label) != 0)
  107|      0|      sorted[++last] = sorted[i];
  108|      0|  }
  109|      0|  map->sorted = sorted;
  110|      0|  map->size = last + 1;
  111|      0|}
  112|       |
  113|       |// Returns reference if refmap contains a reference with matching
  114|       |// label, otherwise NULL.
  115|       |cmark_reference *cmark_reference_lookup(cmark_reference_map *map,
  116|      0|                                        cmark_chunk *label) {
  117|      0|  cmark_reference **ref = NULL;
  118|      0|  cmark_reference *r = NULL;
  119|      0|  unsigned char *norm;
  120|       |
  121|      0|  if (label->len < 1 || label->len > MAX_LINK_LABEL_LENGTH)
  122|      0|    return NULL;
  123|       |
  124|      0|  if (map == NULL || !map->size)
  125|      0|    return NULL;
  126|       |
  127|      0|  norm = normalize_reference(map->mem, label);
  128|      0|  if (norm == NULL)
  129|      0|    return NULL;
  130|       |
  131|      0|  if (!map->sorted)
  132|      0|    sort_references(map);
  133|       |
  134|      0|  ref = (cmark_reference **)bsearch(norm, map->sorted, map->size, sizeof(cmark_reference *),
  135|      0|                refsearch);
  136|      0|  map->mem->free(norm);
  137|       |
  138|      0|  if (ref != NULL) {
  139|      0|    r = ref[0];
  140|       |    /* Check for expansion limit */
  141|      0|    if (map->max_ref_size && r->size > map->max_ref_size - map->ref_size)
  142|      0|      return NULL;
  143|      0|    map->ref_size += r->size;
  144|      0|  }
  145|       |
  146|      0|  return r;
  147|      0|}
  148|       |
  149|      2|void cmark_reference_map_free(cmark_reference_map *map) {
  150|      2|  cmark_reference *ref;
  151|       |
  152|      2|  if (map == NULL)
  153|      0|    return;
  154|       |
  155|      2|  ref = map->refs;
  156|      2|  while (ref) {
  157|      0|    cmark_reference *next = ref->next;
  158|      0|    reference_free(map, ref);
  159|      0|    ref = next;
  160|      0|  }
  161|       |
  162|      2|  map->mem->free(map->sorted);
  163|      2|  map->mem->free(map);
  164|      2|}
  165|       |
  166|      2|cmark_reference_map *cmark_reference_map_new(cmark_mem *mem) {
  167|      2|  cmark_reference_map *map =
  168|      2|      (cmark_reference_map *)mem->calloc(1, sizeof(cmark_reference_map));
  169|      2|  map->mem = mem;
  170|      2|  return map;
  171|      2|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/render.c:
    1|       |#include <stdlib.h>
    2|       |#include "buffer.h"
    3|       |#include "cmark.h"
    4|       |#include "utf8.h"
    5|       |#include "render.h"
    6|       |#include "node.h"
    7|       |#include "cmark_ctype.h"
    8|       |
    9|      0|static CMARK_INLINE void S_cr(cmark_renderer *renderer) {
   10|      0|  if (renderer->need_cr < 1) {
   11|      0|    renderer->need_cr = 1;
   12|      0|  }
   13|      0|}
   14|       |
   15|      0|static CMARK_INLINE void S_blankline(cmark_renderer *renderer) {
   16|      0|  if (renderer->need_cr < 2) {
   17|      0|    renderer->need_cr = 2;
   18|      0|  }
   19|      0|}
   20|       |
   21|       |static void S_out(cmark_renderer *renderer, const char *source, bool wrap,
   22|      0|                  cmark_escaping escape) {
   23|      0|  int length = strlen(source);
   24|      0|  unsigned char nextc;
   25|      0|  int32_t c;
   26|      0|  int i = 0;
   27|      0|  int last_nonspace;
   28|      0|  int len;
   29|      0|  int k = renderer->buffer->size - 1;
   30|       |
   31|      0|  wrap = wrap && !renderer->no_linebreaks;
   32|       |
   33|      0|  if (renderer->in_tight_list_item && renderer->need_cr > 1) {
   34|      0|    renderer->need_cr = 1;
   35|      0|  }
   36|      0|  while (renderer->need_cr) {
   37|      0|    if (k < 0 || renderer->buffer->ptr[k] == '\n') {
   38|      0|      k -= 1;
   39|      0|    } else {
   40|      0|      cmark_strbuf_putc(renderer->buffer, '\n');
   41|      0|      if (renderer->need_cr > 1) {
   42|      0|        cmark_strbuf_put(renderer->buffer, renderer->prefix->ptr,
   43|      0|                         renderer->prefix->size);
   44|      0|      }
   45|      0|    }
   46|      0|    renderer->column = 0;
   47|      0|    renderer->last_breakable = 0;
   48|      0|    renderer->begin_line = true;
   49|      0|    renderer->begin_content = true;
   50|      0|    renderer->need_cr -= 1;
   51|      0|  }
   52|       |
   53|      0|  while (i < length) {
   54|      0|    if (renderer->begin_line) {
   55|      0|      cmark_strbuf_put(renderer->buffer, renderer->prefix->ptr,
   56|      0|                       renderer->prefix->size);
   57|       |      // note: this assumes prefix is ascii:
   58|      0|      renderer->column = renderer->prefix->size;
   59|      0|    }
   60|       |
   61|      0|    len = cmark_utf8proc_iterate((const uint8_t *)source + i, length - i, &c);
   62|      0|    if (len == -1) { // error condition
   63|      0|      return;        // return without rendering rest of string
   64|      0|    }
   65|      0|    nextc = source[i + len];
   66|      0|    if (c == 32 && wrap) {
   67|      0|      if (!renderer->begin_line) {
   68|      0|        last_nonspace = renderer->buffer->size;
   69|      0|        cmark_strbuf_putc(renderer->buffer, ' ');
   70|      0|        renderer->column += 1;
   71|      0|        renderer->begin_line = false;
   72|      0|        renderer->begin_content = false;
   73|       |        // skip following spaces
   74|      0|        while (source[i + 1] == ' ') {
   75|      0|          i++;
   76|      0|        }
   77|       |        // We don't allow breaks that make a digit the first character
   78|       |        // because this causes problems with commonmark output.
   79|      0|        if (!cmark_isdigit(source[i + 1])) {
   80|      0|          renderer->last_breakable = last_nonspace;
   81|      0|        }
   82|      0|      }
   83|       |
   84|      0|    } else if (escape == LITERAL) {
   85|      0|      if (c == 10) {
   86|      0|        cmark_strbuf_putc(renderer->buffer, '\n');
   87|      0|        renderer->column = 0;
   88|      0|        renderer->begin_line = true;
   89|      0|        renderer->begin_content = true;
   90|      0|        renderer->last_breakable = 0;
   91|      0|      } else {
   92|      0|        cmark_render_code_point(renderer, c);
   93|      0|        renderer->begin_line = false;
   94|       |        // we don't set 'begin_content' to false til we've
   95|       |        // finished parsing a digit.  Reason:  in commonmark
   96|       |        // we need to escape a potential list marker after
   97|       |        // a digit:
   98|      0|        renderer->begin_content =
   99|      0|            renderer->begin_content && cmark_isdigit(c) == 1;
  100|      0|      }
  101|      0|    } else {
  102|      0|      (renderer->outc)(renderer, escape, c, nextc);
  103|      0|      renderer->begin_line = false;
  104|      0|      renderer->begin_content =
  105|      0|          renderer->begin_content && cmark_isdigit(c) == 1;
  106|      0|    }
  107|       |
  108|       |    // If adding the character went beyond width, look for an
  109|       |    // earlier place where the line could be broken:
  110|      0|    if (renderer->width > 0 && renderer->column > renderer->width &&
  111|      0|        !renderer->begin_line && renderer->last_breakable > 0) {
  112|       |
  113|       |      // copy from last_breakable to remainder
  114|      0|      unsigned char *src = renderer->buffer->ptr +
  115|      0|                           renderer->last_breakable + 1;
  116|      0|      bufsize_t remainder_len = renderer->buffer->size -
  117|      0|                                renderer->last_breakable - 1;
  118|      0|      unsigned char *remainder =
  119|      0|          (unsigned char *)renderer->mem->realloc(NULL, remainder_len);
  120|      0|      memcpy(remainder, src, remainder_len);
  121|       |      // truncate at last_breakable
  122|      0|      cmark_strbuf_truncate(renderer->buffer, renderer->last_breakable);
  123|       |      // add newline, prefix, and remainder
  124|      0|      cmark_strbuf_putc(renderer->buffer, '\n');
  125|      0|      cmark_strbuf_put(renderer->buffer, renderer->prefix->ptr,
  126|      0|                       renderer->prefix->size);
  127|      0|      cmark_strbuf_put(renderer->buffer, remainder, remainder_len);
  128|      0|      renderer->column = renderer->prefix->size + remainder_len;
  129|      0|      renderer->mem->free(remainder);
  130|      0|      renderer->last_breakable = 0;
  131|      0|      renderer->begin_line = false;
  132|      0|      renderer->begin_content = false;
  133|      0|    }
  134|       |
  135|      0|    i += len;
  136|      0|  }
  137|      0|}
  138|       |
  139|       |// Assumes no newlines, assumes ascii content:
  140|      0|void cmark_render_ascii(cmark_renderer *renderer, const char *s) {
  141|      0|  int origsize = renderer->buffer->size;
  142|      0|  cmark_strbuf_puts(renderer->buffer, s);
  143|      0|  renderer->column += renderer->buffer->size - origsize;
  144|      0|}
  145|       |
  146|      0|void cmark_render_code_point(cmark_renderer *renderer, uint32_t c) {
  147|      0|  cmark_utf8proc_encode_char(c, renderer->buffer);
  148|      0|  renderer->column += 1;
  149|      0|}
  150|       |
  151|       |char *cmark_render(cmark_node *root, int options, int width,
  152|       |                   void (*outc)(cmark_renderer *, cmark_escaping, int32_t,
  153|       |                                unsigned char),
  154|       |                   int (*render_node)(cmark_renderer *renderer,
  155|       |                                      cmark_node *node,
  156|      0|                                      cmark_event_type ev_type, int options)) {
  157|      0|  cmark_mem *mem = root->mem;
  158|      0|  cmark_strbuf pref = CMARK_BUF_INIT(mem);
  159|      0|  cmark_strbuf buf = CMARK_BUF_INIT(mem);
  160|      0|  cmark_node *cur;
  161|      0|  cmark_event_type ev_type;
  162|      0|  char *result;
  163|      0|  cmark_iter *iter = cmark_iter_new(root);
  164|       |
  165|      0|  cmark_renderer renderer = {options,
  166|      0|                             mem,    &buf,    &pref,      0,      width,
  167|      0|                             0,      0,       true,       true,   false,
  168|      0|                             false,  NULL,
  169|      0|                             outc,   S_cr,    S_blankline, S_out};
  170|       |
  171|      0|  while ((ev_type = cmark_iter_next(iter)) != CMARK_EVENT_DONE) {
  172|      0|    cur = cmark_iter_get_node(iter);
  173|      0|    if (!render_node(&renderer, cur, ev_type, options)) {
  174|       |      // a false value causes us to skip processing
  175|       |      // the node's contents.  this is used for
  176|       |      // autolinks.
  177|      0|      cmark_iter_reset(iter, cur, CMARK_EVENT_EXIT);
  178|      0|    }
  179|      0|  }
  180|       |
  181|       |  // ensure final newline
  182|      0|  if (renderer.buffer->size == 0 || renderer.buffer->ptr[renderer.buffer->size - 1] != '\n') {
  183|      0|    cmark_strbuf_putc(renderer.buffer, '\n');
  184|      0|  }
  185|       |
  186|      0|  result = (char *)cmark_strbuf_detach(renderer.buffer);
  187|       |
  188|      0|  cmark_iter_free(iter);
  189|      0|  cmark_strbuf_free(renderer.prefix);
  190|      0|  cmark_strbuf_free(renderer.buffer);
  191|       |
  192|      0|  return result;
  193|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/scanners.c:
    1|       |/* Generated by re2c 1.3 */
    2|       |#include <stdlib.h>
    3|       |#include "chunk.h"
    4|       |#include "scanners.h"
    5|       |
    6|       |bufsize_t _scan_at(bufsize_t (*scanner)(const unsigned char *), cmark_chunk *c,
    7|    338|                   bufsize_t offset) {
    8|    338|  bufsize_t res;
    9|    338|  unsigned char *ptr = (unsigned char *)c->data;
   10|       |
   11|    338|  if (ptr == NULL || offset > c->len) {
   12|      0|    return 0;
   13|    338|  } else {
   14|    338|    unsigned char lim = ptr[c->len];
   15|       |
   16|    338|    ptr[c->len] = '\0';
   17|    338|    res = scanner(ptr + offset);
   18|    338|    ptr[c->len] = lim;
   19|    338|  }
   20|       |
   21|    338|  return res;
   22|    338|}
   23|       |
   24|       |// Try to match a scheme including colon.
   25|      0|bufsize_t _scan_scheme(const unsigned char *p) {
   26|      0|  const unsigned char *marker = NULL;
   27|      0|  const unsigned char *start = p;
   28|       |
   29|      0|  {
   30|      0|    unsigned char yych;
   31|      0|    yych = *p;
   32|      0|    if (yych <= '@')
   33|      0|      goto yy2;
   34|      0|    if (yych <= 'Z')
   35|      0|      goto yy4;
   36|      0|    if (yych <= '`')
   37|      0|      goto yy2;
   38|      0|    if (yych <= 'z')
   39|      0|      goto yy4;
   40|      0|  yy2:
   41|      0|    ++p;
   42|      0|  yy3 : { return 0; }
   43|      0|  yy4:
   44|      0|    yych = *(marker = ++p);
   45|      0|    if (yych <= '/') {
   46|      0|      if (yych <= '+') {
   47|      0|        if (yych <= '*')
   48|      0|          goto yy3;
   49|      0|      } else {
   50|      0|        if (yych <= ',')
   51|      0|          goto yy3;
   52|      0|        if (yych >= '/')
   53|      0|          goto yy3;
   54|      0|      }
   55|      0|    } else {
   56|      0|      if (yych <= 'Z') {
   57|      0|        if (yych <= '9')
   58|      0|          goto yy5;
   59|      0|        if (yych <= '@')
   60|      0|          goto yy3;
   61|      0|      } else {
   62|      0|        if (yych <= '`')
   63|      0|          goto yy3;
   64|      0|        if (yych >= '{')
   65|      0|          goto yy3;
   66|      0|      }
   67|      0|    }
   68|      0|  yy5:
   69|      0|    yych = *++p;
   70|      0|    if (yych <= '9') {
   71|      0|      if (yych <= ',') {
   72|      0|        if (yych == '+')
   73|      0|          goto yy7;
   74|      0|      } else {
   75|      0|        if (yych != '/')
   76|      0|          goto yy7;
   77|      0|      }
   78|      0|    } else {
   79|      0|      if (yych <= 'Z') {
   80|      0|        if (yych <= ':')
   81|      0|          goto yy8;
   82|      0|        if (yych >= 'A')
   83|      0|          goto yy7;
   84|      0|      } else {
   85|      0|        if (yych <= '`')
   86|      0|          goto yy6;
   87|      0|        if (yych <= 'z')
   88|      0|          goto yy7;
   89|      0|      }
   90|      0|    }
   91|      0|  yy6:
   92|      0|    p = marker;
   93|      0|    goto yy3;
   94|      0|  yy7:
   95|      0|    yych = *++p;
   96|      0|    if (yych <= '9') {
   97|      0|      if (yych <= ',') {
   98|      0|        if (yych == '+')
   99|      0|          goto yy10;
  100|      0|        goto yy6;
  101|      0|      } else {
  102|      0|        if (yych == '/')
  103|      0|          goto yy6;
  104|      0|        goto yy10;
  105|      0|      }
  106|      0|    } else {
  107|      0|      if (yych <= 'Z') {
  108|      0|        if (yych <= ':')
  109|      0|          goto yy8;
  110|      0|        if (yych <= '@')
  111|      0|          goto yy6;
  112|      0|        goto yy10;
  113|      0|      } else {
  114|      0|        if (yych <= '`')
  115|      0|          goto yy6;
  116|      0|        if (yych <= 'z')
  117|      0|          goto yy10;
  118|      0|        goto yy6;
  119|      0|      }
  120|      0|    }
  121|      0|  yy8:
  122|      0|    ++p;
  123|      0|    { return (bufsize_t)(p - start); }
  124|      0|  yy10:
  125|      0|    yych = *++p;
  126|      0|    if (yych <= '9') {
  127|      0|      if (yych <= ',') {
  128|      0|        if (yych != '+')
  129|      0|          goto yy6;
  130|      0|      } else {
  131|      0|        if (yych == '/')
  132|      0|          goto yy6;
  133|      0|      }
  134|      0|    } else {
  135|      0|      if (yych <= 'Z') {
  136|      0|        if (yych <= ':')
  137|      0|          goto yy8;
  138|      0|        if (yych <= '@')
  139|      0|          goto yy6;
  140|      0|      } else {
  141|      0|        if (yych <= '`')
  142|      0|          goto yy6;
  143|      0|        if (yych >= '{')
  144|      0|          goto yy6;
  145|      0|      }
  146|      0|    }
  147|      0|    yych = *++p;
  148|      0|    if (yych <= '9') {
  149|      0|      if (yych <= ',') {
  150|      0|        if (yych != '+')
  151|      0|          goto yy6;
  152|      0|      } else {
  153|      0|        if (yych == '/')
  154|      0|          goto yy6;
  155|      0|      }
  156|      0|    } else {
  157|      0|      if (yych <= 'Z') {
  158|      0|        if (yych <= ':')
  159|      0|          goto yy8;
  160|      0|        if (yych <= '@')
  161|      0|          goto yy6;
  162|      0|      } else {
  163|      0|        if (yych <= '`')
  164|      0|          goto yy6;
  165|      0|        if (yych >= '{')
  166|      0|          goto yy6;
  167|      0|      }
  168|      0|    }
  169|      0|    yych = *++p;
  170|      0|    if (yych <= '9') {
  171|      0|      if (yych <= ',') {
  172|      0|        if (yych != '+')
  173|      0|          goto yy6;
  174|      0|      } else {
  175|      0|        if (yych == '/')
  176|      0|          goto yy6;
  177|      0|      }
  178|      0|    } else {
  179|      0|      if (yych <= 'Z') {
  180|      0|        if (yych <= ':')
  181|      0|          goto yy8;
  182|      0|        if (yych <= '@')
  183|      0|          goto yy6;
  184|      0|      } else {
  185|      0|        if (yych <= '`')
  186|      0|          goto yy6;
  187|      0|        if (yych >= '{')
  188|      0|          goto yy6;
  189|      0|      }
  190|      0|    }
  191|      0|    yych = *++p;
  192|      0|    if (yych <= '9') {
  193|      0|      if (yych <= ',') {
  194|      0|        if (yych != '+')
  195|      0|          goto yy6;
  196|      0|      } else {
  197|      0|        if (yych == '/')
  198|      0|          goto yy6;
  199|      0|      }
  200|      0|    } else {
  201|      0|      if (yych <= 'Z') {
  202|      0|        if (yych <= ':')
  203|      0|          goto yy8;
  204|      0|        if (yych <= '@')
  205|      0|          goto yy6;
  206|      0|      } else {
  207|      0|        if (yych <= '`')
  208|      0|          goto yy6;
  209|      0|        if (yych >= '{')
  210|      0|          goto yy6;
  211|      0|      }
  212|      0|    }
  213|      0|    yych = *++p;
  214|      0|    if (yych <= '9') {
  215|      0|      if (yych <= ',') {
  216|      0|        if (yych != '+')
  217|      0|          goto yy6;
  218|      0|      } else {
  219|      0|        if (yych == '/')
  220|      0|          goto yy6;
  221|      0|      }
  222|      0|    } else {
  223|      0|      if (yych <= 'Z') {
  224|      0|        if (yych <= ':')
  225|      0|          goto yy8;
  226|      0|        if (yych <= '@')
  227|      0|          goto yy6;
  228|      0|      } else {
  229|      0|        if (yych <= '`')
  230|      0|          goto yy6;
  231|      0|        if (yych >= '{')
  232|      0|          goto yy6;
  233|      0|      }
  234|      0|    }
  235|      0|    yych = *++p;
  236|      0|    if (yych <= '9') {
  237|      0|      if (yych <= ',') {
  238|      0|        if (yych != '+')
  239|      0|          goto yy6;
  240|      0|      } else {
  241|      0|        if (yych == '/')
  242|      0|          goto yy6;
  243|      0|      }
  244|      0|    } else {
  245|      0|      if (yych <= 'Z') {
  246|      0|        if (yych <= ':')
  247|      0|          goto yy8;
  248|      0|        if (yych <= '@')
  249|      0|          goto yy6;
  250|      0|      } else {
  251|      0|        if (yych <= '`')
  252|      0|          goto yy6;
  253|      0|        if (yych >= '{')
  254|      0|          goto yy6;
  255|      0|      }
  256|      0|    }
  257|      0|    yych = *++p;
  258|      0|    if (yych <= '9') {
  259|      0|      if (yych <= ',') {
  260|      0|        if (yych != '+')
  261|      0|          goto yy6;
  262|      0|      } else {
  263|      0|        if (yych == '/')
  264|      0|          goto yy6;
  265|      0|      }
  266|      0|    } else {
  267|      0|      if (yych <= 'Z') {
  268|      0|        if (yych <= ':')
  269|      0|          goto yy8;
  270|      0|        if (yych <= '@')
  271|      0|          goto yy6;
  272|      0|      } else {
  273|      0|        if (yych <= '`')
  274|      0|          goto yy6;
  275|      0|        if (yych >= '{')
  276|      0|          goto yy6;
  277|      0|      }
  278|      0|    }
  279|      0|    yych = *++p;
  280|      0|    if (yych <= '9') {
  281|      0|      if (yych <= ',') {
  282|      0|        if (yych != '+')
  283|      0|          goto yy6;
  284|      0|      } else {
  285|      0|        if (yych == '/')
  286|      0|          goto yy6;
  287|      0|      }
  288|      0|    } else {
  289|      0|      if (yych <= 'Z') {
  290|      0|        if (yych <= ':')
  291|      0|          goto yy8;
  292|      0|        if (yych <= '@')
  293|      0|          goto yy6;
  294|      0|      } else {
  295|      0|        if (yych <= '`')
  296|      0|          goto yy6;
  297|      0|        if (yych >= '{')
  298|      0|          goto yy6;
  299|      0|      }
  300|      0|    }
  301|      0|    yych = *++p;
  302|      0|    if (yych <= '9') {
  303|      0|      if (yych <= ',') {
  304|      0|        if (yych != '+')
  305|      0|          goto yy6;
  306|      0|      } else {
  307|      0|        if (yych == '/')
  308|      0|          goto yy6;
  309|      0|      }
  310|      0|    } else {
  311|      0|      if (yych <= 'Z') {
  312|      0|        if (yych <= ':')
  313|      0|          goto yy8;
  314|      0|        if (yych <= '@')
  315|      0|          goto yy6;
  316|      0|      } else {
  317|      0|        if (yych <= '`')
  318|      0|          goto yy6;
  319|      0|        if (yych >= '{')
  320|      0|          goto yy6;
  321|      0|      }
  322|      0|    }
  323|      0|    yych = *++p;
  324|      0|    if (yych <= '9') {
  325|      0|      if (yych <= ',') {
  326|      0|        if (yych != '+')
  327|      0|          goto yy6;
  328|      0|      } else {
  329|      0|        if (yych == '/')
  330|      0|          goto yy6;
  331|      0|      }
  332|      0|    } else {
  333|      0|      if (yych <= 'Z') {
  334|      0|        if (yych <= ':')
  335|      0|          goto yy8;
  336|      0|        if (yych <= '@')
  337|      0|          goto yy6;
  338|      0|      } else {
  339|      0|        if (yych <= '`')
  340|      0|          goto yy6;
  341|      0|        if (yych >= '{')
  342|      0|          goto yy6;
  343|      0|      }
  344|      0|    }
  345|      0|    yych = *++p;
  346|      0|    if (yych <= '9') {
  347|      0|      if (yych <= ',') {
  348|      0|        if (yych != '+')
  349|      0|          goto yy6;
  350|      0|      } else {
  351|      0|        if (yych == '/')
  352|      0|          goto yy6;
  353|      0|      }
  354|      0|    } else {
  355|      0|      if (yych <= 'Z') {
  356|      0|        if (yych <= ':')
  357|      0|          goto yy8;
  358|      0|        if (yych <= '@')
  359|      0|          goto yy6;
  360|      0|      } else {
  361|      0|        if (yych <= '`')
  362|      0|          goto yy6;
  363|      0|        if (yych >= '{')
  364|      0|          goto yy6;
  365|      0|      }
  366|      0|    }
  367|      0|    yych = *++p;
  368|      0|    if (yych <= '9') {
  369|      0|      if (yych <= ',') {
  370|      0|        if (yych != '+')
  371|      0|          goto yy6;
  372|      0|      } else {
  373|      0|        if (yych == '/')
  374|      0|          goto yy6;
  375|      0|      }
  376|      0|    } else {
  377|      0|      if (yych <= 'Z') {
  378|      0|        if (yych <= ':')
  379|      0|          goto yy8;
  380|      0|        if (yych <= '@')
  381|      0|          goto yy6;
  382|      0|      } else {
  383|      0|        if (yych <= '`')
  384|      0|          goto yy6;
  385|      0|        if (yych >= '{')
  386|      0|          goto yy6;
  387|      0|      }
  388|      0|    }
  389|      0|    yych = *++p;
  390|      0|    if (yych <= '9') {
  391|      0|      if (yych <= ',') {
  392|      0|        if (yych != '+')
  393|      0|          goto yy6;
  394|      0|      } else {
  395|      0|        if (yych == '/')
  396|      0|          goto yy6;
  397|      0|      }
  398|      0|    } else {
  399|      0|      if (yych <= 'Z') {
  400|      0|        if (yych <= ':')
  401|      0|          goto yy8;
  402|      0|        if (yych <= '@')
  403|      0|          goto yy6;
  404|      0|      } else {
  405|      0|        if (yych <= '`')
  406|      0|          goto yy6;
  407|      0|        if (yych >= '{')
  408|      0|          goto yy6;
  409|      0|      }
  410|      0|    }
  411|      0|    yych = *++p;
  412|      0|    if (yych <= '9') {
  413|      0|      if (yych <= ',') {
  414|      0|        if (yych != '+')
  415|      0|          goto yy6;
  416|      0|      } else {
  417|      0|        if (yych == '/')
  418|      0|          goto yy6;
  419|      0|      }
  420|      0|    } else {
  421|      0|      if (yych <= 'Z') {
  422|      0|        if (yych <= ':')
  423|      0|          goto yy8;
  424|      0|        if (yych <= '@')
  425|      0|          goto yy6;
  426|      0|      } else {
  427|      0|        if (yych <= '`')
  428|      0|          goto yy6;
  429|      0|        if (yych >= '{')
  430|      0|          goto yy6;
  431|      0|      }
  432|      0|    }
  433|      0|    yych = *++p;
  434|      0|    if (yych <= '9') {
  435|      0|      if (yych <= ',') {
  436|      0|        if (yych != '+')
  437|      0|          goto yy6;
  438|      0|      } else {
  439|      0|        if (yych == '/')
  440|      0|          goto yy6;
  441|      0|      }
  442|      0|    } else {
  443|      0|      if (yych <= 'Z') {
  444|      0|        if (yych <= ':')
  445|      0|          goto yy8;
  446|      0|        if (yych <= '@')
  447|      0|          goto yy6;
  448|      0|      } else {
  449|      0|        if (yych <= '`')
  450|      0|          goto yy6;
  451|      0|        if (yych >= '{')
  452|      0|          goto yy6;
  453|      0|      }
  454|      0|    }
  455|      0|    yych = *++p;
  456|      0|    if (yych <= '9') {
  457|      0|      if (yych <= ',') {
  458|      0|        if (yych != '+')
  459|      0|          goto yy6;
  460|      0|      } else {
  461|      0|        if (yych == '/')
  462|      0|          goto yy6;
  463|      0|      }
  464|      0|    } else {
  465|      0|      if (yych <= 'Z') {
  466|      0|        if (yych <= ':')
  467|      0|          goto yy8;
  468|      0|        if (yych <= '@')
  469|      0|          goto yy6;
  470|      0|      } else {
  471|      0|        if (yych <= '`')
  472|      0|          goto yy6;
  473|      0|        if (yych >= '{')
  474|      0|          goto yy6;
  475|      0|      }
  476|      0|    }
  477|      0|    yych = *++p;
  478|      0|    if (yych <= '9') {
  479|      0|      if (yych <= ',') {
  480|      0|        if (yych != '+')
  481|      0|          goto yy6;
  482|      0|      } else {
  483|      0|        if (yych == '/')
  484|      0|          goto yy6;
  485|      0|      }
  486|      0|    } else {
  487|      0|      if (yych <= 'Z') {
  488|      0|        if (yych <= ':')
  489|      0|          goto yy8;
  490|      0|        if (yych <= '@')
  491|      0|          goto yy6;
  492|      0|      } else {
  493|      0|        if (yych <= '`')
  494|      0|          goto yy6;
  495|      0|        if (yych >= '{')
  496|      0|          goto yy6;
  497|      0|      }
  498|      0|    }
  499|      0|    yych = *++p;
  500|      0|    if (yych <= '9') {
  501|      0|      if (yych <= ',') {
  502|      0|        if (yych != '+')
  503|      0|          goto yy6;
  504|      0|      } else {
  505|      0|        if (yych == '/')
  506|      0|          goto yy6;
  507|      0|      }
  508|      0|    } else {
  509|      0|      if (yych <= 'Z') {
  510|      0|        if (yych <= ':')
  511|      0|          goto yy8;
  512|      0|        if (yych <= '@')
  513|      0|          goto yy6;
  514|      0|      } else {
  515|      0|        if (yych <= '`')
  516|      0|          goto yy6;
  517|      0|        if (yych >= '{')
  518|      0|          goto yy6;
  519|      0|      }
  520|      0|    }
  521|      0|    yych = *++p;
  522|      0|    if (yych <= '9') {
  523|      0|      if (yych <= ',') {
  524|      0|        if (yych != '+')
  525|      0|          goto yy6;
  526|      0|      } else {
  527|      0|        if (yych == '/')
  528|      0|          goto yy6;
  529|      0|      }
  530|      0|    } else {
  531|      0|      if (yych <= 'Z') {
  532|      0|        if (yych <= ':')
  533|      0|          goto yy8;
  534|      0|        if (yych <= '@')
  535|      0|          goto yy6;
  536|      0|      } else {
  537|      0|        if (yych <= '`')
  538|      0|          goto yy6;
  539|      0|        if (yych >= '{')
  540|      0|          goto yy6;
  541|      0|      }
  542|      0|    }
  543|      0|    yych = *++p;
  544|      0|    if (yych <= '9') {
  545|      0|      if (yych <= ',') {
  546|      0|        if (yych != '+')
  547|      0|          goto yy6;
  548|      0|      } else {
  549|      0|        if (yych == '/')
  550|      0|          goto yy6;
  551|      0|      }
  552|      0|    } else {
  553|      0|      if (yych <= 'Z') {
  554|      0|        if (yych <= ':')
  555|      0|          goto yy8;
  556|      0|        if (yych <= '@')
  557|      0|          goto yy6;
  558|      0|      } else {
  559|      0|        if (yych <= '`')
  560|      0|          goto yy6;
  561|      0|        if (yych >= '{')
  562|      0|          goto yy6;
  563|      0|      }
  564|      0|    }
  565|      0|    yych = *++p;
  566|      0|    if (yych <= '9') {
  567|      0|      if (yych <= ',') {
  568|      0|        if (yych != '+')
  569|      0|          goto yy6;
  570|      0|      } else {
  571|      0|        if (yych == '/')
  572|      0|          goto yy6;
  573|      0|      }
  574|      0|    } else {
  575|      0|      if (yych <= 'Z') {
  576|      0|        if (yych <= ':')
  577|      0|          goto yy8;
  578|      0|        if (yych <= '@')
  579|      0|          goto yy6;
  580|      0|      } else {
  581|      0|        if (yych <= '`')
  582|      0|          goto yy6;
  583|      0|        if (yych >= '{')
  584|      0|          goto yy6;
  585|      0|      }
  586|      0|    }
  587|      0|    yych = *++p;
  588|      0|    if (yych <= '9') {
  589|      0|      if (yych <= ',') {
  590|      0|        if (yych != '+')
  591|      0|          goto yy6;
  592|      0|      } else {
  593|      0|        if (yych == '/')
  594|      0|          goto yy6;
  595|      0|      }
  596|      0|    } else {
  597|      0|      if (yych <= 'Z') {
  598|      0|        if (yych <= ':')
  599|      0|          goto yy8;
  600|      0|        if (yych <= '@')
  601|      0|          goto yy6;
  602|      0|      } else {
  603|      0|        if (yych <= '`')
  604|      0|          goto yy6;
  605|      0|        if (yych >= '{')
  606|      0|          goto yy6;
  607|      0|      }
  608|      0|    }
  609|      0|    yych = *++p;
  610|      0|    if (yych <= '9') {
  611|      0|      if (yych <= ',') {
  612|      0|        if (yych != '+')
  613|      0|          goto yy6;
  614|      0|      } else {
  615|      0|        if (yych == '/')
  616|      0|          goto yy6;
  617|      0|      }
  618|      0|    } else {
  619|      0|      if (yych <= 'Z') {
  620|      0|        if (yych <= ':')
  621|      0|          goto yy8;
  622|      0|        if (yych <= '@')
  623|      0|          goto yy6;
  624|      0|      } else {
  625|      0|        if (yych <= '`')
  626|      0|          goto yy6;
  627|      0|        if (yych >= '{')
  628|      0|          goto yy6;
  629|      0|      }
  630|      0|    }
  631|      0|    yych = *++p;
  632|      0|    if (yych <= '9') {
  633|      0|      if (yych <= ',') {
  634|      0|        if (yych != '+')
  635|      0|          goto yy6;
  636|      0|      } else {
  637|      0|        if (yych == '/')
  638|      0|          goto yy6;
  639|      0|      }
  640|      0|    } else {
  641|      0|      if (yych <= 'Z') {
  642|      0|        if (yych <= ':')
  643|      0|          goto yy8;
  644|      0|        if (yych <= '@')
  645|      0|          goto yy6;
  646|      0|      } else {
  647|      0|        if (yych <= '`')
  648|      0|          goto yy6;
  649|      0|        if (yych >= '{')
  650|      0|          goto yy6;
  651|      0|      }
  652|      0|    }
  653|      0|    yych = *++p;
  654|      0|    if (yych <= '9') {
  655|      0|      if (yych <= ',') {
  656|      0|        if (yych != '+')
  657|      0|          goto yy6;
  658|      0|      } else {
  659|      0|        if (yych == '/')
  660|      0|          goto yy6;
  661|      0|      }
  662|      0|    } else {
  663|      0|      if (yych <= 'Z') {
  664|      0|        if (yych <= ':')
  665|      0|          goto yy8;
  666|      0|        if (yych <= '@')
  667|      0|          goto yy6;
  668|      0|      } else {
  669|      0|        if (yych <= '`')
  670|      0|          goto yy6;
  671|      0|        if (yych >= '{')
  672|      0|          goto yy6;
  673|      0|      }
  674|      0|    }
  675|      0|    yych = *++p;
  676|      0|    if (yych <= '9') {
  677|      0|      if (yych <= ',') {
  678|      0|        if (yych != '+')
  679|      0|          goto yy6;
  680|      0|      } else {
  681|      0|        if (yych == '/')
  682|      0|          goto yy6;
  683|      0|      }
  684|      0|    } else {
  685|      0|      if (yych <= 'Z') {
  686|      0|        if (yych <= ':')
  687|      0|          goto yy8;
  688|      0|        if (yych <= '@')
  689|      0|          goto yy6;
  690|      0|      } else {
  691|      0|        if (yych <= '`')
  692|      0|          goto yy6;
  693|      0|        if (yych >= '{')
  694|      0|          goto yy6;
  695|      0|      }
  696|      0|    }
  697|      0|    yych = *++p;
  698|      0|    if (yych <= '9') {
  699|      0|      if (yych <= ',') {
  700|      0|        if (yych != '+')
  701|      0|          goto yy6;
  702|      0|      } else {
  703|      0|        if (yych == '/')
  704|      0|          goto yy6;
  705|      0|      }
  706|      0|    } else {
  707|      0|      if (yych <= 'Z') {
  708|      0|        if (yych <= ':')
  709|      0|          goto yy8;
  710|      0|        if (yych <= '@')
  711|      0|          goto yy6;
  712|      0|      } else {
  713|      0|        if (yych <= '`')
  714|      0|          goto yy6;
  715|      0|        if (yych >= '{')
  716|      0|          goto yy6;
  717|      0|      }
  718|      0|    }
  719|      0|    yych = *++p;
  720|      0|    if (yych <= '9') {
  721|      0|      if (yych <= ',') {
  722|      0|        if (yych != '+')
  723|      0|          goto yy6;
  724|      0|      } else {
  725|      0|        if (yych == '/')
  726|      0|          goto yy6;
  727|      0|      }
  728|      0|    } else {
  729|      0|      if (yych <= 'Z') {
  730|      0|        if (yych <= ':')
  731|      0|          goto yy8;
  732|      0|        if (yych <= '@')
  733|      0|          goto yy6;
  734|      0|      } else {
  735|      0|        if (yych <= '`')
  736|      0|          goto yy6;
  737|      0|        if (yych >= '{')
  738|      0|          goto yy6;
  739|      0|      }
  740|      0|    }
  741|      0|    yych = *++p;
  742|      0|    if (yych == ':')
  743|      0|      goto yy8;
  744|      0|    goto yy6;
  745|      0|  }
  746|      0|}
  747|       |
  748|       |// Try to match URI autolink after first <, returning number of chars matched.
  749|      0|bufsize_t _scan_autolink_uri(const unsigned char *p) {
  750|      0|  const unsigned char *marker = NULL;
  751|      0|  const unsigned char *start = p;
  752|       |
  753|      0|  {
  754|      0|    unsigned char yych;
  755|      0|    static const unsigned char yybm[] = {
  756|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  757|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  758|      0|        0,   0,   0,   0,   0,   128, 128, 128, 128, 128, 128, 128, 128, 128,
  759|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  760|      0|        128, 128, 128, 128, 0,   128, 0,   128, 128, 128, 128, 128, 128, 128,
  761|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  762|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  763|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  764|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
  765|      0|        128, 128, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  766|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  767|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  768|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  769|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  770|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  771|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  772|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  773|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  774|      0|        0,   0,   0,   0,
  775|      0|    };
  776|      0|    yych = *p;
  777|      0|    if (yych <= '@')
  778|      0|      goto yy41;
  779|      0|    if (yych <= 'Z')
  780|      0|      goto yy43;
  781|      0|    if (yych <= '`')
  782|      0|      goto yy41;
  783|      0|    if (yych <= 'z')
  784|      0|      goto yy43;
  785|      0|  yy41:
  786|      0|    ++p;
  787|      0|  yy42 : { return 0; }
  788|      0|  yy43:
  789|      0|    yych = *(marker = ++p);
  790|      0|    if (yych <= '/') {
  791|      0|      if (yych <= '+') {
  792|      0|        if (yych <= '*')
  793|      0|          goto yy42;
  794|      0|      } else {
  795|      0|        if (yych <= ',')
  796|      0|          goto yy42;
  797|      0|        if (yych >= '/')
  798|      0|          goto yy42;
  799|      0|      }
  800|      0|    } else {
  801|      0|      if (yych <= 'Z') {
  802|      0|        if (yych <= '9')
  803|      0|          goto yy44;
  804|      0|        if (yych <= '@')
  805|      0|          goto yy42;
  806|      0|      } else {
  807|      0|        if (yych <= '`')
  808|      0|          goto yy42;
  809|      0|        if (yych >= '{')
  810|      0|          goto yy42;
  811|      0|      }
  812|      0|    }
  813|      0|  yy44:
  814|      0|    yych = *++p;
  815|      0|    if (yych <= '9') {
  816|      0|      if (yych <= ',') {
  817|      0|        if (yych == '+')
  818|      0|          goto yy46;
  819|      0|      } else {
  820|      0|        if (yych != '/')
  821|      0|          goto yy46;
  822|      0|      }
  823|      0|    } else {
  824|      0|      if (yych <= 'Z') {
  825|      0|        if (yych <= ':')
  826|      0|          goto yy47;
  827|      0|        if (yych >= 'A')
  828|      0|          goto yy46;
  829|      0|      } else {
  830|      0|        if (yych <= '`')
  831|      0|          goto yy45;
  832|      0|        if (yych <= 'z')
  833|      0|          goto yy46;
  834|      0|      }
  835|      0|    }
  836|      0|  yy45:
  837|      0|    p = marker;
  838|      0|    goto yy42;
  839|      0|  yy46:
  840|      0|    yych = *++p;
  841|      0|    if (yych <= '9') {
  842|      0|      if (yych <= ',') {
  843|      0|        if (yych == '+')
  844|      0|          goto yy49;
  845|      0|        goto yy45;
  846|      0|      } else {
  847|      0|        if (yych == '/')
  848|      0|          goto yy45;
  849|      0|        goto yy49;
  850|      0|      }
  851|      0|    } else {
  852|      0|      if (yych <= 'Z') {
  853|      0|        if (yych <= ':')
  854|      0|          goto yy47;
  855|      0|        if (yych <= '@')
  856|      0|          goto yy45;
  857|      0|        goto yy49;
  858|      0|      } else {
  859|      0|        if (yych <= '`')
  860|      0|          goto yy45;
  861|      0|        if (yych <= 'z')
  862|      0|          goto yy49;
  863|      0|        goto yy45;
  864|      0|      }
  865|      0|    }
  866|      0|  yy47:
  867|      0|    yych = *++p;
  868|      0|    if (yybm[0 + yych] & 128) {
  869|      0|      goto yy47;
  870|      0|    }
  871|      0|    if (yych <= 0xEC) {
  872|      0|      if (yych <= 0xC1) {
  873|      0|        if (yych <= '<')
  874|      0|          goto yy45;
  875|      0|        if (yych <= '>')
  876|      0|          goto yy50;
  877|      0|        goto yy45;
  878|      0|      } else {
  879|      0|        if (yych <= 0xDF)
  880|      0|          goto yy52;
  881|      0|        if (yych <= 0xE0)
  882|      0|          goto yy53;
  883|      0|        goto yy54;
  884|      0|      }
  885|      0|    } else {
  886|      0|      if (yych <= 0xF0) {
  887|      0|        if (yych <= 0xED)
  888|      0|          goto yy55;
  889|      0|        if (yych <= 0xEF)
  890|      0|          goto yy54;
  891|      0|        goto yy56;
  892|      0|      } else {
  893|      0|        if (yych <= 0xF3)
  894|      0|          goto yy57;
  895|      0|        if (yych <= 0xF4)
  896|      0|          goto yy58;
  897|      0|        goto yy45;
  898|      0|      }
  899|      0|    }
  900|      0|  yy49:
  901|      0|    yych = *++p;
  902|      0|    if (yych <= '9') {
  903|      0|      if (yych <= ',') {
  904|      0|        if (yych == '+')
  905|      0|          goto yy59;
  906|      0|        goto yy45;
  907|      0|      } else {
  908|      0|        if (yych == '/')
  909|      0|          goto yy45;
  910|      0|        goto yy59;
  911|      0|      }
  912|      0|    } else {
  913|      0|      if (yych <= 'Z') {
  914|      0|        if (yych <= ':')
  915|      0|          goto yy47;
  916|      0|        if (yych <= '@')
  917|      0|          goto yy45;
  918|      0|        goto yy59;
  919|      0|      } else {
  920|      0|        if (yych <= '`')
  921|      0|          goto yy45;
  922|      0|        if (yych <= 'z')
  923|      0|          goto yy59;
  924|      0|        goto yy45;
  925|      0|      }
  926|      0|    }
  927|      0|  yy50:
  928|      0|    ++p;
  929|      0|    { return (bufsize_t)(p - start); }
  930|      0|  yy52:
  931|      0|    yych = *++p;
  932|      0|    if (yych <= 0x7F)
  933|      0|      goto yy45;
  934|      0|    if (yych <= 0xBF)
  935|      0|      goto yy47;
  936|      0|    goto yy45;
  937|      0|  yy53:
  938|      0|    yych = *++p;
  939|      0|    if (yych <= 0x9F)
  940|      0|      goto yy45;
  941|      0|    if (yych <= 0xBF)
  942|      0|      goto yy52;
  943|      0|    goto yy45;
  944|      0|  yy54:
  945|      0|    yych = *++p;
  946|      0|    if (yych <= 0x7F)
  947|      0|      goto yy45;
  948|      0|    if (yych <= 0xBF)
  949|      0|      goto yy52;
  950|      0|    goto yy45;
  951|      0|  yy55:
  952|      0|    yych = *++p;
  953|      0|    if (yych <= 0x7F)
  954|      0|      goto yy45;
  955|      0|    if (yych <= 0x9F)
  956|      0|      goto yy52;
  957|      0|    goto yy45;
  958|      0|  yy56:
  959|      0|    yych = *++p;
  960|      0|    if (yych <= 0x8F)
  961|      0|      goto yy45;
  962|      0|    if (yych <= 0xBF)
  963|      0|      goto yy54;
  964|      0|    goto yy45;
  965|      0|  yy57:
  966|      0|    yych = *++p;
  967|      0|    if (yych <= 0x7F)
  968|      0|      goto yy45;
  969|      0|    if (yych <= 0xBF)
  970|      0|      goto yy54;
  971|      0|    goto yy45;
  972|      0|  yy58:
  973|      0|    yych = *++p;
  974|      0|    if (yych <= 0x7F)
  975|      0|      goto yy45;
  976|      0|    if (yych <= 0x8F)
  977|      0|      goto yy54;
  978|      0|    goto yy45;
  979|      0|  yy59:
  980|      0|    yych = *++p;
  981|      0|    if (yych <= '9') {
  982|      0|      if (yych <= ',') {
  983|      0|        if (yych != '+')
  984|      0|          goto yy45;
  985|      0|      } else {
  986|      0|        if (yych == '/')
  987|      0|          goto yy45;
  988|      0|      }
  989|      0|    } else {
  990|      0|      if (yych <= 'Z') {
  991|      0|        if (yych <= ':')
  992|      0|          goto yy47;
  993|      0|        if (yych <= '@')
  994|      0|          goto yy45;
  995|      0|      } else {
  996|      0|        if (yych <= '`')
  997|      0|          goto yy45;
  998|      0|        if (yych >= '{')
  999|      0|          goto yy45;
 1000|      0|      }
 1001|      0|    }
 1002|      0|    yych = *++p;
 1003|      0|    if (yych <= '9') {
 1004|      0|      if (yych <= ',') {
 1005|      0|        if (yych != '+')
 1006|      0|          goto yy45;
 1007|      0|      } else {
 1008|      0|        if (yych == '/')
 1009|      0|          goto yy45;
 1010|      0|      }
 1011|      0|    } else {
 1012|      0|      if (yych <= 'Z') {
 1013|      0|        if (yych <= ':')
 1014|      0|          goto yy47;
 1015|      0|        if (yych <= '@')
 1016|      0|          goto yy45;
 1017|      0|      } else {
 1018|      0|        if (yych <= '`')
 1019|      0|          goto yy45;
 1020|      0|        if (yych >= '{')
 1021|      0|          goto yy45;
 1022|      0|      }
 1023|      0|    }
 1024|      0|    yych = *++p;
 1025|      0|    if (yych <= '9') {
 1026|      0|      if (yych <= ',') {
 1027|      0|        if (yych != '+')
 1028|      0|          goto yy45;
 1029|      0|      } else {
 1030|      0|        if (yych == '/')
 1031|      0|          goto yy45;
 1032|      0|      }
 1033|      0|    } else {
 1034|      0|      if (yych <= 'Z') {
 1035|      0|        if (yych <= ':')
 1036|      0|          goto yy47;
 1037|      0|        if (yych <= '@')
 1038|      0|          goto yy45;
 1039|      0|      } else {
 1040|      0|        if (yych <= '`')
 1041|      0|          goto yy45;
 1042|      0|        if (yych >= '{')
 1043|      0|          goto yy45;
 1044|      0|      }
 1045|      0|    }
 1046|      0|    yych = *++p;
 1047|      0|    if (yych <= '9') {
 1048|      0|      if (yych <= ',') {
 1049|      0|        if (yych != '+')
 1050|      0|          goto yy45;
 1051|      0|      } else {
 1052|      0|        if (yych == '/')
 1053|      0|          goto yy45;
 1054|      0|      }
 1055|      0|    } else {
 1056|      0|      if (yych <= 'Z') {
 1057|      0|        if (yych <= ':')
 1058|      0|          goto yy47;
 1059|      0|        if (yych <= '@')
 1060|      0|          goto yy45;
 1061|      0|      } else {
 1062|      0|        if (yych <= '`')
 1063|      0|          goto yy45;
 1064|      0|        if (yych >= '{')
 1065|      0|          goto yy45;
 1066|      0|      }
 1067|      0|    }
 1068|      0|    yych = *++p;
 1069|      0|    if (yych <= '9') {
 1070|      0|      if (yych <= ',') {
 1071|      0|        if (yych != '+')
 1072|      0|          goto yy45;
 1073|      0|      } else {
 1074|      0|        if (yych == '/')
 1075|      0|          goto yy45;
 1076|      0|      }
 1077|      0|    } else {
 1078|      0|      if (yych <= 'Z') {
 1079|      0|        if (yych <= ':')
 1080|      0|          goto yy47;
 1081|      0|        if (yych <= '@')
 1082|      0|          goto yy45;
 1083|      0|      } else {
 1084|      0|        if (yych <= '`')
 1085|      0|          goto yy45;
 1086|      0|        if (yych >= '{')
 1087|      0|          goto yy45;
 1088|      0|      }
 1089|      0|    }
 1090|      0|    yych = *++p;
 1091|      0|    if (yych <= '9') {
 1092|      0|      if (yych <= ',') {
 1093|      0|        if (yych != '+')
 1094|      0|          goto yy45;
 1095|      0|      } else {
 1096|      0|        if (yych == '/')
 1097|      0|          goto yy45;
 1098|      0|      }
 1099|      0|    } else {
 1100|      0|      if (yych <= 'Z') {
 1101|      0|        if (yych <= ':')
 1102|      0|          goto yy47;
 1103|      0|        if (yych <= '@')
 1104|      0|          goto yy45;
 1105|      0|      } else {
 1106|      0|        if (yych <= '`')
 1107|      0|          goto yy45;
 1108|      0|        if (yych >= '{')
 1109|      0|          goto yy45;
 1110|      0|      }
 1111|      0|    }
 1112|      0|    yych = *++p;
 1113|      0|    if (yych <= '9') {
 1114|      0|      if (yych <= ',') {
 1115|      0|        if (yych != '+')
 1116|      0|          goto yy45;
 1117|      0|      } else {
 1118|      0|        if (yych == '/')
 1119|      0|          goto yy45;
 1120|      0|      }
 1121|      0|    } else {
 1122|      0|      if (yych <= 'Z') {
 1123|      0|        if (yych <= ':')
 1124|      0|          goto yy47;
 1125|      0|        if (yych <= '@')
 1126|      0|          goto yy45;
 1127|      0|      } else {
 1128|      0|        if (yych <= '`')
 1129|      0|          goto yy45;
 1130|      0|        if (yych >= '{')
 1131|      0|          goto yy45;
 1132|      0|      }
 1133|      0|    }
 1134|      0|    yych = *++p;
 1135|      0|    if (yych <= '9') {
 1136|      0|      if (yych <= ',') {
 1137|      0|        if (yych != '+')
 1138|      0|          goto yy45;
 1139|      0|      } else {
 1140|      0|        if (yych == '/')
 1141|      0|          goto yy45;
 1142|      0|      }
 1143|      0|    } else {
 1144|      0|      if (yych <= 'Z') {
 1145|      0|        if (yych <= ':')
 1146|      0|          goto yy47;
 1147|      0|        if (yych <= '@')
 1148|      0|          goto yy45;
 1149|      0|      } else {
 1150|      0|        if (yych <= '`')
 1151|      0|          goto yy45;
 1152|      0|        if (yych >= '{')
 1153|      0|          goto yy45;
 1154|      0|      }
 1155|      0|    }
 1156|      0|    yych = *++p;
 1157|      0|    if (yych <= '9') {
 1158|      0|      if (yych <= ',') {
 1159|      0|        if (yych != '+')
 1160|      0|          goto yy45;
 1161|      0|      } else {
 1162|      0|        if (yych == '/')
 1163|      0|          goto yy45;
 1164|      0|      }
 1165|      0|    } else {
 1166|      0|      if (yych <= 'Z') {
 1167|      0|        if (yych <= ':')
 1168|      0|          goto yy47;
 1169|      0|        if (yych <= '@')
 1170|      0|          goto yy45;
 1171|      0|      } else {
 1172|      0|        if (yych <= '`')
 1173|      0|          goto yy45;
 1174|      0|        if (yych >= '{')
 1175|      0|          goto yy45;
 1176|      0|      }
 1177|      0|    }
 1178|      0|    yych = *++p;
 1179|      0|    if (yych <= '9') {
 1180|      0|      if (yych <= ',') {
 1181|      0|        if (yych != '+')
 1182|      0|          goto yy45;
 1183|      0|      } else {
 1184|      0|        if (yych == '/')
 1185|      0|          goto yy45;
 1186|      0|      }
 1187|      0|    } else {
 1188|      0|      if (yych <= 'Z') {
 1189|      0|        if (yych <= ':')
 1190|      0|          goto yy47;
 1191|      0|        if (yych <= '@')
 1192|      0|          goto yy45;
 1193|      0|      } else {
 1194|      0|        if (yych <= '`')
 1195|      0|          goto yy45;
 1196|      0|        if (yych >= '{')
 1197|      0|          goto yy45;
 1198|      0|      }
 1199|      0|    }
 1200|      0|    yych = *++p;
 1201|      0|    if (yych <= '9') {
 1202|      0|      if (yych <= ',') {
 1203|      0|        if (yych != '+')
 1204|      0|          goto yy45;
 1205|      0|      } else {
 1206|      0|        if (yych == '/')
 1207|      0|          goto yy45;
 1208|      0|      }
 1209|      0|    } else {
 1210|      0|      if (yych <= 'Z') {
 1211|      0|        if (yych <= ':')
 1212|      0|          goto yy47;
 1213|      0|        if (yych <= '@')
 1214|      0|          goto yy45;
 1215|      0|      } else {
 1216|      0|        if (yych <= '`')
 1217|      0|          goto yy45;
 1218|      0|        if (yych >= '{')
 1219|      0|          goto yy45;
 1220|      0|      }
 1221|      0|    }
 1222|      0|    yych = *++p;
 1223|      0|    if (yych <= '9') {
 1224|      0|      if (yych <= ',') {
 1225|      0|        if (yych != '+')
 1226|      0|          goto yy45;
 1227|      0|      } else {
 1228|      0|        if (yych == '/')
 1229|      0|          goto yy45;
 1230|      0|      }
 1231|      0|    } else {
 1232|      0|      if (yych <= 'Z') {
 1233|      0|        if (yych <= ':')
 1234|      0|          goto yy47;
 1235|      0|        if (yych <= '@')
 1236|      0|          goto yy45;
 1237|      0|      } else {
 1238|      0|        if (yych <= '`')
 1239|      0|          goto yy45;
 1240|      0|        if (yych >= '{')
 1241|      0|          goto yy45;
 1242|      0|      }
 1243|      0|    }
 1244|      0|    yych = *++p;
 1245|      0|    if (yych <= '9') {
 1246|      0|      if (yych <= ',') {
 1247|      0|        if (yych != '+')
 1248|      0|          goto yy45;
 1249|      0|      } else {
 1250|      0|        if (yych == '/')
 1251|      0|          goto yy45;
 1252|      0|      }
 1253|      0|    } else {
 1254|      0|      if (yych <= 'Z') {
 1255|      0|        if (yych <= ':')
 1256|      0|          goto yy47;
 1257|      0|        if (yych <= '@')
 1258|      0|          goto yy45;
 1259|      0|      } else {
 1260|      0|        if (yych <= '`')
 1261|      0|          goto yy45;
 1262|      0|        if (yych >= '{')
 1263|      0|          goto yy45;
 1264|      0|      }
 1265|      0|    }
 1266|      0|    yych = *++p;
 1267|      0|    if (yych <= '9') {
 1268|      0|      if (yych <= ',') {
 1269|      0|        if (yych != '+')
 1270|      0|          goto yy45;
 1271|      0|      } else {
 1272|      0|        if (yych == '/')
 1273|      0|          goto yy45;
 1274|      0|      }
 1275|      0|    } else {
 1276|      0|      if (yych <= 'Z') {
 1277|      0|        if (yych <= ':')
 1278|      0|          goto yy47;
 1279|      0|        if (yych <= '@')
 1280|      0|          goto yy45;
 1281|      0|      } else {
 1282|      0|        if (yych <= '`')
 1283|      0|          goto yy45;
 1284|      0|        if (yych >= '{')
 1285|      0|          goto yy45;
 1286|      0|      }
 1287|      0|    }
 1288|      0|    yych = *++p;
 1289|      0|    if (yych <= '9') {
 1290|      0|      if (yych <= ',') {
 1291|      0|        if (yych != '+')
 1292|      0|          goto yy45;
 1293|      0|      } else {
 1294|      0|        if (yych == '/')
 1295|      0|          goto yy45;
 1296|      0|      }
 1297|      0|    } else {
 1298|      0|      if (yych <= 'Z') {
 1299|      0|        if (yych <= ':')
 1300|      0|          goto yy47;
 1301|      0|        if (yych <= '@')
 1302|      0|          goto yy45;
 1303|      0|      } else {
 1304|      0|        if (yych <= '`')
 1305|      0|          goto yy45;
 1306|      0|        if (yych >= '{')
 1307|      0|          goto yy45;
 1308|      0|      }
 1309|      0|    }
 1310|      0|    yych = *++p;
 1311|      0|    if (yych <= '9') {
 1312|      0|      if (yych <= ',') {
 1313|      0|        if (yych != '+')
 1314|      0|          goto yy45;
 1315|      0|      } else {
 1316|      0|        if (yych == '/')
 1317|      0|          goto yy45;
 1318|      0|      }
 1319|      0|    } else {
 1320|      0|      if (yych <= 'Z') {
 1321|      0|        if (yych <= ':')
 1322|      0|          goto yy47;
 1323|      0|        if (yych <= '@')
 1324|      0|          goto yy45;
 1325|      0|      } else {
 1326|      0|        if (yych <= '`')
 1327|      0|          goto yy45;
 1328|      0|        if (yych >= '{')
 1329|      0|          goto yy45;
 1330|      0|      }
 1331|      0|    }
 1332|      0|    yych = *++p;
 1333|      0|    if (yych <= '9') {
 1334|      0|      if (yych <= ',') {
 1335|      0|        if (yych != '+')
 1336|      0|          goto yy45;
 1337|      0|      } else {
 1338|      0|        if (yych == '/')
 1339|      0|          goto yy45;
 1340|      0|      }
 1341|      0|    } else {
 1342|      0|      if (yych <= 'Z') {
 1343|      0|        if (yych <= ':')
 1344|      0|          goto yy47;
 1345|      0|        if (yych <= '@')
 1346|      0|          goto yy45;
 1347|      0|      } else {
 1348|      0|        if (yych <= '`')
 1349|      0|          goto yy45;
 1350|      0|        if (yych >= '{')
 1351|      0|          goto yy45;
 1352|      0|      }
 1353|      0|    }
 1354|      0|    yych = *++p;
 1355|      0|    if (yych <= '9') {
 1356|      0|      if (yych <= ',') {
 1357|      0|        if (yych != '+')
 1358|      0|          goto yy45;
 1359|      0|      } else {
 1360|      0|        if (yych == '/')
 1361|      0|          goto yy45;
 1362|      0|      }
 1363|      0|    } else {
 1364|      0|      if (yych <= 'Z') {
 1365|      0|        if (yych <= ':')
 1366|      0|          goto yy47;
 1367|      0|        if (yych <= '@')
 1368|      0|          goto yy45;
 1369|      0|      } else {
 1370|      0|        if (yych <= '`')
 1371|      0|          goto yy45;
 1372|      0|        if (yych >= '{')
 1373|      0|          goto yy45;
 1374|      0|      }
 1375|      0|    }
 1376|      0|    yych = *++p;
 1377|      0|    if (yych <= '9') {
 1378|      0|      if (yych <= ',') {
 1379|      0|        if (yych != '+')
 1380|      0|          goto yy45;
 1381|      0|      } else {
 1382|      0|        if (yych == '/')
 1383|      0|          goto yy45;
 1384|      0|      }
 1385|      0|    } else {
 1386|      0|      if (yych <= 'Z') {
 1387|      0|        if (yych <= ':')
 1388|      0|          goto yy47;
 1389|      0|        if (yych <= '@')
 1390|      0|          goto yy45;
 1391|      0|      } else {
 1392|      0|        if (yych <= '`')
 1393|      0|          goto yy45;
 1394|      0|        if (yych >= '{')
 1395|      0|          goto yy45;
 1396|      0|      }
 1397|      0|    }
 1398|      0|    yych = *++p;
 1399|      0|    if (yych <= '9') {
 1400|      0|      if (yych <= ',') {
 1401|      0|        if (yych != '+')
 1402|      0|          goto yy45;
 1403|      0|      } else {
 1404|      0|        if (yych == '/')
 1405|      0|          goto yy45;
 1406|      0|      }
 1407|      0|    } else {
 1408|      0|      if (yych <= 'Z') {
 1409|      0|        if (yych <= ':')
 1410|      0|          goto yy47;
 1411|      0|        if (yych <= '@')
 1412|      0|          goto yy45;
 1413|      0|      } else {
 1414|      0|        if (yych <= '`')
 1415|      0|          goto yy45;
 1416|      0|        if (yych >= '{')
 1417|      0|          goto yy45;
 1418|      0|      }
 1419|      0|    }
 1420|      0|    yych = *++p;
 1421|      0|    if (yych <= '9') {
 1422|      0|      if (yych <= ',') {
 1423|      0|        if (yych != '+')
 1424|      0|          goto yy45;
 1425|      0|      } else {
 1426|      0|        if (yych == '/')
 1427|      0|          goto yy45;
 1428|      0|      }
 1429|      0|    } else {
 1430|      0|      if (yych <= 'Z') {
 1431|      0|        if (yych <= ':')
 1432|      0|          goto yy47;
 1433|      0|        if (yych <= '@')
 1434|      0|          goto yy45;
 1435|      0|      } else {
 1436|      0|        if (yych <= '`')
 1437|      0|          goto yy45;
 1438|      0|        if (yych >= '{')
 1439|      0|          goto yy45;
 1440|      0|      }
 1441|      0|    }
 1442|      0|    yych = *++p;
 1443|      0|    if (yych <= '9') {
 1444|      0|      if (yych <= ',') {
 1445|      0|        if (yych != '+')
 1446|      0|          goto yy45;
 1447|      0|      } else {
 1448|      0|        if (yych == '/')
 1449|      0|          goto yy45;
 1450|      0|      }
 1451|      0|    } else {
 1452|      0|      if (yych <= 'Z') {
 1453|      0|        if (yych <= ':')
 1454|      0|          goto yy47;
 1455|      0|        if (yych <= '@')
 1456|      0|          goto yy45;
 1457|      0|      } else {
 1458|      0|        if (yych <= '`')
 1459|      0|          goto yy45;
 1460|      0|        if (yych >= '{')
 1461|      0|          goto yy45;
 1462|      0|      }
 1463|      0|    }
 1464|      0|    yych = *++p;
 1465|      0|    if (yych <= '9') {
 1466|      0|      if (yych <= ',') {
 1467|      0|        if (yych != '+')
 1468|      0|          goto yy45;
 1469|      0|      } else {
 1470|      0|        if (yych == '/')
 1471|      0|          goto yy45;
 1472|      0|      }
 1473|      0|    } else {
 1474|      0|      if (yych <= 'Z') {
 1475|      0|        if (yych <= ':')
 1476|      0|          goto yy47;
 1477|      0|        if (yych <= '@')
 1478|      0|          goto yy45;
 1479|      0|      } else {
 1480|      0|        if (yych <= '`')
 1481|      0|          goto yy45;
 1482|      0|        if (yych >= '{')
 1483|      0|          goto yy45;
 1484|      0|      }
 1485|      0|    }
 1486|      0|    yych = *++p;
 1487|      0|    if (yych <= '9') {
 1488|      0|      if (yych <= ',') {
 1489|      0|        if (yych != '+')
 1490|      0|          goto yy45;
 1491|      0|      } else {
 1492|      0|        if (yych == '/')
 1493|      0|          goto yy45;
 1494|      0|      }
 1495|      0|    } else {
 1496|      0|      if (yych <= 'Z') {
 1497|      0|        if (yych <= ':')
 1498|      0|          goto yy47;
 1499|      0|        if (yych <= '@')
 1500|      0|          goto yy45;
 1501|      0|      } else {
 1502|      0|        if (yych <= '`')
 1503|      0|          goto yy45;
 1504|      0|        if (yych >= '{')
 1505|      0|          goto yy45;
 1506|      0|      }
 1507|      0|    }
 1508|      0|    yych = *++p;
 1509|      0|    if (yych <= '9') {
 1510|      0|      if (yych <= ',') {
 1511|      0|        if (yych != '+')
 1512|      0|          goto yy45;
 1513|      0|      } else {
 1514|      0|        if (yych == '/')
 1515|      0|          goto yy45;
 1516|      0|      }
 1517|      0|    } else {
 1518|      0|      if (yych <= 'Z') {
 1519|      0|        if (yych <= ':')
 1520|      0|          goto yy47;
 1521|      0|        if (yych <= '@')
 1522|      0|          goto yy45;
 1523|      0|      } else {
 1524|      0|        if (yych <= '`')
 1525|      0|          goto yy45;
 1526|      0|        if (yych >= '{')
 1527|      0|          goto yy45;
 1528|      0|      }
 1529|      0|    }
 1530|      0|    yych = *++p;
 1531|      0|    if (yych <= '9') {
 1532|      0|      if (yych <= ',') {
 1533|      0|        if (yych != '+')
 1534|      0|          goto yy45;
 1535|      0|      } else {
 1536|      0|        if (yych == '/')
 1537|      0|          goto yy45;
 1538|      0|      }
 1539|      0|    } else {
 1540|      0|      if (yych <= 'Z') {
 1541|      0|        if (yych <= ':')
 1542|      0|          goto yy47;
 1543|      0|        if (yych <= '@')
 1544|      0|          goto yy45;
 1545|      0|      } else {
 1546|      0|        if (yych <= '`')
 1547|      0|          goto yy45;
 1548|      0|        if (yych >= '{')
 1549|      0|          goto yy45;
 1550|      0|      }
 1551|      0|    }
 1552|      0|    yych = *++p;
 1553|      0|    if (yych <= '9') {
 1554|      0|      if (yych <= ',') {
 1555|      0|        if (yych != '+')
 1556|      0|          goto yy45;
 1557|      0|      } else {
 1558|      0|        if (yych == '/')
 1559|      0|          goto yy45;
 1560|      0|      }
 1561|      0|    } else {
 1562|      0|      if (yych <= 'Z') {
 1563|      0|        if (yych <= ':')
 1564|      0|          goto yy47;
 1565|      0|        if (yych <= '@')
 1566|      0|          goto yy45;
 1567|      0|      } else {
 1568|      0|        if (yych <= '`')
 1569|      0|          goto yy45;
 1570|      0|        if (yych >= '{')
 1571|      0|          goto yy45;
 1572|      0|      }
 1573|      0|    }
 1574|      0|    yych = *++p;
 1575|      0|    if (yych == ':')
 1576|      0|      goto yy47;
 1577|      0|    goto yy45;
 1578|      0|  }
 1579|      0|}
 1580|       |
 1581|       |// Try to match email autolink after first <, returning num of chars matched.
 1582|      0|bufsize_t _scan_autolink_email(const unsigned char *p) {
 1583|      0|  const unsigned char *marker = NULL;
 1584|      0|  const unsigned char *start = p;
 1585|       |
 1586|      0|  {
 1587|      0|    unsigned char yych;
 1588|      0|    static const unsigned char yybm[] = {
 1589|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 1590|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 1591|      0|        0,   0,   0,   0,   0,   128, 0,   128, 128, 128, 128, 128, 0,   0,
 1592|      0|        128, 128, 0,   128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 1593|      0|        128, 128, 0,   0,   0,   128, 0,   128, 0,   128, 128, 128, 128, 128,
 1594|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 1595|      0|        128, 128, 128, 128, 128, 128, 128, 0,   0,   0,   128, 128, 128, 128,
 1596|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 1597|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 1598|      0|        128, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 1599|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 1600|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 1601|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 1602|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 1603|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 1604|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 1605|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 1606|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 1607|      0|        0,   0,   0,   0,
 1608|      0|    };
 1609|      0|    yych = *p;
 1610|      0|    if (yych <= '9') {
 1611|      0|      if (yych <= '\'') {
 1612|      0|        if (yych == '!')
 1613|      0|          goto yy91;
 1614|      0|        if (yych >= '#')
 1615|      0|          goto yy91;
 1616|      0|      } else {
 1617|      0|        if (yych <= ')')
 1618|      0|          goto yy89;
 1619|      0|        if (yych != ',')
 1620|      0|          goto yy91;
 1621|      0|      }
 1622|      0|    } else {
 1623|      0|      if (yych <= '?') {
 1624|      0|        if (yych == '=')
 1625|      0|          goto yy91;
 1626|      0|        if (yych >= '?')
 1627|      0|          goto yy91;
 1628|      0|      } else {
 1629|      0|        if (yych <= 'Z') {
 1630|      0|          if (yych >= 'A')
 1631|      0|            goto yy91;
 1632|      0|        } else {
 1633|      0|          if (yych <= ']')
 1634|      0|            goto yy89;
 1635|      0|          if (yych <= '~')
 1636|      0|            goto yy91;
 1637|      0|        }
 1638|      0|      }
 1639|      0|    }
 1640|      0|  yy89:
 1641|      0|    ++p;
 1642|      0|  yy90 : { return 0; }
 1643|      0|  yy91:
 1644|      0|    yych = *(marker = ++p);
 1645|      0|    if (yych <= ',') {
 1646|      0|      if (yych <= '"') {
 1647|      0|        if (yych == '!')
 1648|      0|          goto yy93;
 1649|      0|        goto yy90;
 1650|      0|      } else {
 1651|      0|        if (yych <= '\'')
 1652|      0|          goto yy93;
 1653|      0|        if (yych <= ')')
 1654|      0|          goto yy90;
 1655|      0|        if (yych <= '+')
 1656|      0|          goto yy93;
 1657|      0|        goto yy90;
 1658|      0|      }
 1659|      0|    } else {
 1660|      0|      if (yych <= '>') {
 1661|      0|        if (yych <= '9')
 1662|      0|          goto yy93;
 1663|      0|        if (yych == '=')
 1664|      0|          goto yy93;
 1665|      0|        goto yy90;
 1666|      0|      } else {
 1667|      0|        if (yych <= 'Z')
 1668|      0|          goto yy93;
 1669|      0|        if (yych <= ']')
 1670|      0|          goto yy90;
 1671|      0|        if (yych <= '~')
 1672|      0|          goto yy93;
 1673|      0|        goto yy90;
 1674|      0|      }
 1675|      0|    }
 1676|      0|  yy92:
 1677|      0|    yych = *++p;
 1678|      0|  yy93:
 1679|      0|    if (yybm[0 + yych] & 128) {
 1680|      0|      goto yy92;
 1681|      0|    }
 1682|      0|    if (yych <= '>')
 1683|      0|      goto yy94;
 1684|      0|    if (yych <= '@')
 1685|      0|      goto yy95;
 1686|      0|  yy94:
 1687|      0|    p = marker;
 1688|      0|    goto yy90;
 1689|      0|  yy95:
 1690|      0|    yych = *++p;
 1691|      0|    if (yych <= '@') {
 1692|      0|      if (yych <= '/')
 1693|      0|        goto yy94;
 1694|      0|      if (yych >= ':')
 1695|      0|        goto yy94;
 1696|      0|    } else {
 1697|      0|      if (yych <= 'Z')
 1698|      0|        goto yy96;
 1699|      0|      if (yych <= '`')
 1700|      0|        goto yy94;
 1701|      0|      if (yych >= '{')
 1702|      0|        goto yy94;
 1703|      0|    }
 1704|      0|  yy96:
 1705|      0|    yych = *++p;
 1706|      0|    if (yych <= '=') {
 1707|      0|      if (yych <= '.') {
 1708|      0|        if (yych <= ',')
 1709|      0|          goto yy94;
 1710|      0|        if (yych >= '.')
 1711|      0|          goto yy95;
 1712|      0|      } else {
 1713|      0|        if (yych <= '/')
 1714|      0|          goto yy94;
 1715|      0|        if (yych <= '9')
 1716|      0|          goto yy98;
 1717|      0|        goto yy94;
 1718|      0|      }
 1719|      0|    } else {
 1720|      0|      if (yych <= 'Z') {
 1721|      0|        if (yych <= '>')
 1722|      0|          goto yy99;
 1723|      0|        if (yych <= '@')
 1724|      0|          goto yy94;
 1725|      0|        goto yy98;
 1726|      0|      } else {
 1727|      0|        if (yych <= '`')
 1728|      0|          goto yy94;
 1729|      0|        if (yych <= 'z')
 1730|      0|          goto yy98;
 1731|      0|        goto yy94;
 1732|      0|      }
 1733|      0|    }
 1734|      0|    yych = *++p;
 1735|      0|    if (yych <= '9') {
 1736|      0|      if (yych == '-')
 1737|      0|        goto yy101;
 1738|      0|      if (yych <= '/')
 1739|      0|        goto yy94;
 1740|      0|      goto yy102;
 1741|      0|    } else {
 1742|      0|      if (yych <= 'Z') {
 1743|      0|        if (yych <= '@')
 1744|      0|          goto yy94;
 1745|      0|        goto yy102;
 1746|      0|      } else {
 1747|      0|        if (yych <= '`')
 1748|      0|          goto yy94;
 1749|      0|        if (yych <= 'z')
 1750|      0|          goto yy102;
 1751|      0|        goto yy94;
 1752|      0|      }
 1753|      0|    }
 1754|      0|  yy98:
 1755|      0|    yych = *++p;
 1756|      0|    if (yych <= '=') {
 1757|      0|      if (yych <= '.') {
 1758|      0|        if (yych <= ',')
 1759|      0|          goto yy94;
 1760|      0|        if (yych <= '-')
 1761|      0|          goto yy101;
 1762|      0|        goto yy95;
 1763|      0|      } else {
 1764|      0|        if (yych <= '/')
 1765|      0|          goto yy94;
 1766|      0|        if (yych <= '9')
 1767|      0|          goto yy102;
 1768|      0|        goto yy94;
 1769|      0|      }
 1770|      0|    } else {
 1771|      0|      if (yych <= 'Z') {
 1772|      0|        if (yych <= '>')
 1773|      0|          goto yy99;
 1774|      0|        if (yych <= '@')
 1775|      0|          goto yy94;
 1776|      0|        goto yy102;
 1777|      0|      } else {
 1778|      0|        if (yych <= '`')
 1779|      0|          goto yy94;
 1780|      0|        if (yych <= 'z')
 1781|      0|          goto yy102;
 1782|      0|        goto yy94;
 1783|      0|      }
 1784|      0|    }
 1785|      0|  yy99:
 1786|      0|    ++p;
 1787|      0|    { return (bufsize_t)(p - start); }
 1788|      0|  yy101:
 1789|      0|    yych = *++p;
 1790|      0|    if (yych <= '9') {
 1791|      0|      if (yych == '-')
 1792|      0|        goto yy103;
 1793|      0|      if (yych <= '/')
 1794|      0|        goto yy94;
 1795|      0|      goto yy104;
 1796|      0|    } else {
 1797|      0|      if (yych <= 'Z') {
 1798|      0|        if (yych <= '@')
 1799|      0|          goto yy94;
 1800|      0|        goto yy104;
 1801|      0|      } else {
 1802|      0|        if (yych <= '`')
 1803|      0|          goto yy94;
 1804|      0|        if (yych <= 'z')
 1805|      0|          goto yy104;
 1806|      0|        goto yy94;
 1807|      0|      }
 1808|      0|    }
 1809|      0|  yy102:
 1810|      0|    yych = *++p;
 1811|      0|    if (yych <= '=') {
 1812|      0|      if (yych <= '.') {
 1813|      0|        if (yych <= ',')
 1814|      0|          goto yy94;
 1815|      0|        if (yych >= '.')
 1816|      0|          goto yy95;
 1817|      0|      } else {
 1818|      0|        if (yych <= '/')
 1819|      0|          goto yy94;
 1820|      0|        if (yych <= '9')
 1821|      0|          goto yy104;
 1822|      0|        goto yy94;
 1823|      0|      }
 1824|      0|    } else {
 1825|      0|      if (yych <= 'Z') {
 1826|      0|        if (yych <= '>')
 1827|      0|          goto yy99;
 1828|      0|        if (yych <= '@')
 1829|      0|          goto yy94;
 1830|      0|        goto yy104;
 1831|      0|      } else {
 1832|      0|        if (yych <= '`')
 1833|      0|          goto yy94;
 1834|      0|        if (yych <= 'z')
 1835|      0|          goto yy104;
 1836|      0|        goto yy94;
 1837|      0|      }
 1838|      0|    }
 1839|      0|  yy103:
 1840|      0|    yych = *++p;
 1841|      0|    if (yych <= '9') {
 1842|      0|      if (yych == '-')
 1843|      0|        goto yy105;
 1844|      0|      if (yych <= '/')
 1845|      0|        goto yy94;
 1846|      0|      goto yy106;
 1847|      0|    } else {
 1848|      0|      if (yych <= 'Z') {
 1849|      0|        if (yych <= '@')
 1850|      0|          goto yy94;
 1851|      0|        goto yy106;
 1852|      0|      } else {
 1853|      0|        if (yych <= '`')
 1854|      0|          goto yy94;
 1855|      0|        if (yych <= 'z')
 1856|      0|          goto yy106;
 1857|      0|        goto yy94;
 1858|      0|      }
 1859|      0|    }
 1860|      0|  yy104:
 1861|      0|    yych = *++p;
 1862|      0|    if (yych <= '=') {
 1863|      0|      if (yych <= '.') {
 1864|      0|        if (yych <= ',')
 1865|      0|          goto yy94;
 1866|      0|        if (yych >= '.')
 1867|      0|          goto yy95;
 1868|      0|      } else {
 1869|      0|        if (yych <= '/')
 1870|      0|          goto yy94;
 1871|      0|        if (yych <= '9')
 1872|      0|          goto yy106;
 1873|      0|        goto yy94;
 1874|      0|      }
 1875|      0|    } else {
 1876|      0|      if (yych <= 'Z') {
 1877|      0|        if (yych <= '>')
 1878|      0|          goto yy99;
 1879|      0|        if (yych <= '@')
 1880|      0|          goto yy94;
 1881|      0|        goto yy106;
 1882|      0|      } else {
 1883|      0|        if (yych <= '`')
 1884|      0|          goto yy94;
 1885|      0|        if (yych <= 'z')
 1886|      0|          goto yy106;
 1887|      0|        goto yy94;
 1888|      0|      }
 1889|      0|    }
 1890|      0|  yy105:
 1891|      0|    yych = *++p;
 1892|      0|    if (yych <= '9') {
 1893|      0|      if (yych == '-')
 1894|      0|        goto yy107;
 1895|      0|      if (yych <= '/')
 1896|      0|        goto yy94;
 1897|      0|      goto yy108;
 1898|      0|    } else {
 1899|      0|      if (yych <= 'Z') {
 1900|      0|        if (yych <= '@')
 1901|      0|          goto yy94;
 1902|      0|        goto yy108;
 1903|      0|      } else {
 1904|      0|        if (yych <= '`')
 1905|      0|          goto yy94;
 1906|      0|        if (yych <= 'z')
 1907|      0|          goto yy108;
 1908|      0|        goto yy94;
 1909|      0|      }
 1910|      0|    }
 1911|      0|  yy106:
 1912|      0|    yych = *++p;
 1913|      0|    if (yych <= '=') {
 1914|      0|      if (yych <= '.') {
 1915|      0|        if (yych <= ',')
 1916|      0|          goto yy94;
 1917|      0|        if (yych >= '.')
 1918|      0|          goto yy95;
 1919|      0|      } else {
 1920|      0|        if (yych <= '/')
 1921|      0|          goto yy94;
 1922|      0|        if (yych <= '9')
 1923|      0|          goto yy108;
 1924|      0|        goto yy94;
 1925|      0|      }
 1926|      0|    } else {
 1927|      0|      if (yych <= 'Z') {
 1928|      0|        if (yych <= '>')
 1929|      0|          goto yy99;
 1930|      0|        if (yych <= '@')
 1931|      0|          goto yy94;
 1932|      0|        goto yy108;
 1933|      0|      } else {
 1934|      0|        if (yych <= '`')
 1935|      0|          goto yy94;
 1936|      0|        if (yych <= 'z')
 1937|      0|          goto yy108;
 1938|      0|        goto yy94;
 1939|      0|      }
 1940|      0|    }
 1941|      0|  yy107:
 1942|      0|    yych = *++p;
 1943|      0|    if (yych <= '9') {
 1944|      0|      if (yych == '-')
 1945|      0|        goto yy109;
 1946|      0|      if (yych <= '/')
 1947|      0|        goto yy94;
 1948|      0|      goto yy110;
 1949|      0|    } else {
 1950|      0|      if (yych <= 'Z') {
 1951|      0|        if (yych <= '@')
 1952|      0|          goto yy94;
 1953|      0|        goto yy110;
 1954|      0|      } else {
 1955|      0|        if (yych <= '`')
 1956|      0|          goto yy94;
 1957|      0|        if (yych <= 'z')
 1958|      0|          goto yy110;
 1959|      0|        goto yy94;
 1960|      0|      }
 1961|      0|    }
 1962|      0|  yy108:
 1963|      0|    yych = *++p;
 1964|      0|    if (yych <= '=') {
 1965|      0|      if (yych <= '.') {
 1966|      0|        if (yych <= ',')
 1967|      0|          goto yy94;
 1968|      0|        if (yych >= '.')
 1969|      0|          goto yy95;
 1970|      0|      } else {
 1971|      0|        if (yych <= '/')
 1972|      0|          goto yy94;
 1973|      0|        if (yych <= '9')
 1974|      0|          goto yy110;
 1975|      0|        goto yy94;
 1976|      0|      }
 1977|      0|    } else {
 1978|      0|      if (yych <= 'Z') {
 1979|      0|        if (yych <= '>')
 1980|      0|          goto yy99;
 1981|      0|        if (yych <= '@')
 1982|      0|          goto yy94;
 1983|      0|        goto yy110;
 1984|      0|      } else {
 1985|      0|        if (yych <= '`')
 1986|      0|          goto yy94;
 1987|      0|        if (yych <= 'z')
 1988|      0|          goto yy110;
 1989|      0|        goto yy94;
 1990|      0|      }
 1991|      0|    }
 1992|      0|  yy109:
 1993|      0|    yych = *++p;
 1994|      0|    if (yych <= '9') {
 1995|      0|      if (yych == '-')
 1996|      0|        goto yy111;
 1997|      0|      if (yych <= '/')
 1998|      0|        goto yy94;
 1999|      0|      goto yy112;
 2000|      0|    } else {
 2001|      0|      if (yych <= 'Z') {
 2002|      0|        if (yych <= '@')
 2003|      0|          goto yy94;
 2004|      0|        goto yy112;
 2005|      0|      } else {
 2006|      0|        if (yych <= '`')
 2007|      0|          goto yy94;
 2008|      0|        if (yych <= 'z')
 2009|      0|          goto yy112;
 2010|      0|        goto yy94;
 2011|      0|      }
 2012|      0|    }
 2013|      0|  yy110:
 2014|      0|    yych = *++p;
 2015|      0|    if (yych <= '=') {
 2016|      0|      if (yych <= '.') {
 2017|      0|        if (yych <= ',')
 2018|      0|          goto yy94;
 2019|      0|        if (yych >= '.')
 2020|      0|          goto yy95;
 2021|      0|      } else {
 2022|      0|        if (yych <= '/')
 2023|      0|          goto yy94;
 2024|      0|        if (yych <= '9')
 2025|      0|          goto yy112;
 2026|      0|        goto yy94;
 2027|      0|      }
 2028|      0|    } else {
 2029|      0|      if (yych <= 'Z') {
 2030|      0|        if (yych <= '>')
 2031|      0|          goto yy99;
 2032|      0|        if (yych <= '@')
 2033|      0|          goto yy94;
 2034|      0|        goto yy112;
 2035|      0|      } else {
 2036|      0|        if (yych <= '`')
 2037|      0|          goto yy94;
 2038|      0|        if (yych <= 'z')
 2039|      0|          goto yy112;
 2040|      0|        goto yy94;
 2041|      0|      }
 2042|      0|    }
 2043|      0|  yy111:
 2044|      0|    yych = *++p;
 2045|      0|    if (yych <= '9') {
 2046|      0|      if (yych == '-')
 2047|      0|        goto yy113;
 2048|      0|      if (yych <= '/')
 2049|      0|        goto yy94;
 2050|      0|      goto yy114;
 2051|      0|    } else {
 2052|      0|      if (yych <= 'Z') {
 2053|      0|        if (yych <= '@')
 2054|      0|          goto yy94;
 2055|      0|        goto yy114;
 2056|      0|      } else {
 2057|      0|        if (yych <= '`')
 2058|      0|          goto yy94;
 2059|      0|        if (yych <= 'z')
 2060|      0|          goto yy114;
 2061|      0|        goto yy94;
 2062|      0|      }
 2063|      0|    }
 2064|      0|  yy112:
 2065|      0|    yych = *++p;
 2066|      0|    if (yych <= '=') {
 2067|      0|      if (yych <= '.') {
 2068|      0|        if (yych <= ',')
 2069|      0|          goto yy94;
 2070|      0|        if (yych >= '.')
 2071|      0|          goto yy95;
 2072|      0|      } else {
 2073|      0|        if (yych <= '/')
 2074|      0|          goto yy94;
 2075|      0|        if (yych <= '9')
 2076|      0|          goto yy114;
 2077|      0|        goto yy94;
 2078|      0|      }
 2079|      0|    } else {
 2080|      0|      if (yych <= 'Z') {
 2081|      0|        if (yych <= '>')
 2082|      0|          goto yy99;
 2083|      0|        if (yych <= '@')
 2084|      0|          goto yy94;
 2085|      0|        goto yy114;
 2086|      0|      } else {
 2087|      0|        if (yych <= '`')
 2088|      0|          goto yy94;
 2089|      0|        if (yych <= 'z')
 2090|      0|          goto yy114;
 2091|      0|        goto yy94;
 2092|      0|      }
 2093|      0|    }
 2094|      0|  yy113:
 2095|      0|    yych = *++p;
 2096|      0|    if (yych <= '9') {
 2097|      0|      if (yych == '-')
 2098|      0|        goto yy115;
 2099|      0|      if (yych <= '/')
 2100|      0|        goto yy94;
 2101|      0|      goto yy116;
 2102|      0|    } else {
 2103|      0|      if (yych <= 'Z') {
 2104|      0|        if (yych <= '@')
 2105|      0|          goto yy94;
 2106|      0|        goto yy116;
 2107|      0|      } else {
 2108|      0|        if (yych <= '`')
 2109|      0|          goto yy94;
 2110|      0|        if (yych <= 'z')
 2111|      0|          goto yy116;
 2112|      0|        goto yy94;
 2113|      0|      }
 2114|      0|    }
 2115|      0|  yy114:
 2116|      0|    yych = *++p;
 2117|      0|    if (yych <= '=') {
 2118|      0|      if (yych <= '.') {
 2119|      0|        if (yych <= ',')
 2120|      0|          goto yy94;
 2121|      0|        if (yych >= '.')
 2122|      0|          goto yy95;
 2123|      0|      } else {
 2124|      0|        if (yych <= '/')
 2125|      0|          goto yy94;
 2126|      0|        if (yych <= '9')
 2127|      0|          goto yy116;
 2128|      0|        goto yy94;
 2129|      0|      }
 2130|      0|    } else {
 2131|      0|      if (yych <= 'Z') {
 2132|      0|        if (yych <= '>')
 2133|      0|          goto yy99;
 2134|      0|        if (yych <= '@')
 2135|      0|          goto yy94;
 2136|      0|        goto yy116;
 2137|      0|      } else {
 2138|      0|        if (yych <= '`')
 2139|      0|          goto yy94;
 2140|      0|        if (yych <= 'z')
 2141|      0|          goto yy116;
 2142|      0|        goto yy94;
 2143|      0|      }
 2144|      0|    }
 2145|      0|  yy115:
 2146|      0|    yych = *++p;
 2147|      0|    if (yych <= '9') {
 2148|      0|      if (yych == '-')
 2149|      0|        goto yy117;
 2150|      0|      if (yych <= '/')
 2151|      0|        goto yy94;
 2152|      0|      goto yy118;
 2153|      0|    } else {
 2154|      0|      if (yych <= 'Z') {
 2155|      0|        if (yych <= '@')
 2156|      0|          goto yy94;
 2157|      0|        goto yy118;
 2158|      0|      } else {
 2159|      0|        if (yych <= '`')
 2160|      0|          goto yy94;
 2161|      0|        if (yych <= 'z')
 2162|      0|          goto yy118;
 2163|      0|        goto yy94;
 2164|      0|      }
 2165|      0|    }
 2166|      0|  yy116:
 2167|      0|    yych = *++p;
 2168|      0|    if (yych <= '=') {
 2169|      0|      if (yych <= '.') {
 2170|      0|        if (yych <= ',')
 2171|      0|          goto yy94;
 2172|      0|        if (yych >= '.')
 2173|      0|          goto yy95;
 2174|      0|      } else {
 2175|      0|        if (yych <= '/')
 2176|      0|          goto yy94;
 2177|      0|        if (yych <= '9')
 2178|      0|          goto yy118;
 2179|      0|        goto yy94;
 2180|      0|      }
 2181|      0|    } else {
 2182|      0|      if (yych <= 'Z') {
 2183|      0|        if (yych <= '>')
 2184|      0|          goto yy99;
 2185|      0|        if (yych <= '@')
 2186|      0|          goto yy94;
 2187|      0|        goto yy118;
 2188|      0|      } else {
 2189|      0|        if (yych <= '`')
 2190|      0|          goto yy94;
 2191|      0|        if (yych <= 'z')
 2192|      0|          goto yy118;
 2193|      0|        goto yy94;
 2194|      0|      }
 2195|      0|    }
 2196|      0|  yy117:
 2197|      0|    yych = *++p;
 2198|      0|    if (yych <= '9') {
 2199|      0|      if (yych == '-')
 2200|      0|        goto yy119;
 2201|      0|      if (yych <= '/')
 2202|      0|        goto yy94;
 2203|      0|      goto yy120;
 2204|      0|    } else {
 2205|      0|      if (yych <= 'Z') {
 2206|      0|        if (yych <= '@')
 2207|      0|          goto yy94;
 2208|      0|        goto yy120;
 2209|      0|      } else {
 2210|      0|        if (yych <= '`')
 2211|      0|          goto yy94;
 2212|      0|        if (yych <= 'z')
 2213|      0|          goto yy120;
 2214|      0|        goto yy94;
 2215|      0|      }
 2216|      0|    }
 2217|      0|  yy118:
 2218|      0|    yych = *++p;
 2219|      0|    if (yych <= '=') {
 2220|      0|      if (yych <= '.') {
 2221|      0|        if (yych <= ',')
 2222|      0|          goto yy94;
 2223|      0|        if (yych >= '.')
 2224|      0|          goto yy95;
 2225|      0|      } else {
 2226|      0|        if (yych <= '/')
 2227|      0|          goto yy94;
 2228|      0|        if (yych <= '9')
 2229|      0|          goto yy120;
 2230|      0|        goto yy94;
 2231|      0|      }
 2232|      0|    } else {
 2233|      0|      if (yych <= 'Z') {
 2234|      0|        if (yych <= '>')
 2235|      0|          goto yy99;
 2236|      0|        if (yych <= '@')
 2237|      0|          goto yy94;
 2238|      0|        goto yy120;
 2239|      0|      } else {
 2240|      0|        if (yych <= '`')
 2241|      0|          goto yy94;
 2242|      0|        if (yych <= 'z')
 2243|      0|          goto yy120;
 2244|      0|        goto yy94;
 2245|      0|      }
 2246|      0|    }
 2247|      0|  yy119:
 2248|      0|    yych = *++p;
 2249|      0|    if (yych <= '9') {
 2250|      0|      if (yych == '-')
 2251|      0|        goto yy121;
 2252|      0|      if (yych <= '/')
 2253|      0|        goto yy94;
 2254|      0|      goto yy122;
 2255|      0|    } else {
 2256|      0|      if (yych <= 'Z') {
 2257|      0|        if (yych <= '@')
 2258|      0|          goto yy94;
 2259|      0|        goto yy122;
 2260|      0|      } else {
 2261|      0|        if (yych <= '`')
 2262|      0|          goto yy94;
 2263|      0|        if (yych <= 'z')
 2264|      0|          goto yy122;
 2265|      0|        goto yy94;
 2266|      0|      }
 2267|      0|    }
 2268|      0|  yy120:
 2269|      0|    yych = *++p;
 2270|      0|    if (yych <= '=') {
 2271|      0|      if (yych <= '.') {
 2272|      0|        if (yych <= ',')
 2273|      0|          goto yy94;
 2274|      0|        if (yych >= '.')
 2275|      0|          goto yy95;
 2276|      0|      } else {
 2277|      0|        if (yych <= '/')
 2278|      0|          goto yy94;
 2279|      0|        if (yych <= '9')
 2280|      0|          goto yy122;
 2281|      0|        goto yy94;
 2282|      0|      }
 2283|      0|    } else {
 2284|      0|      if (yych <= 'Z') {
 2285|      0|        if (yych <= '>')
 2286|      0|          goto yy99;
 2287|      0|        if (yych <= '@')
 2288|      0|          goto yy94;
 2289|      0|        goto yy122;
 2290|      0|      } else {
 2291|      0|        if (yych <= '`')
 2292|      0|          goto yy94;
 2293|      0|        if (yych <= 'z')
 2294|      0|          goto yy122;
 2295|      0|        goto yy94;
 2296|      0|      }
 2297|      0|    }
 2298|      0|  yy121:
 2299|      0|    yych = *++p;
 2300|      0|    if (yych <= '9') {
 2301|      0|      if (yych == '-')
 2302|      0|        goto yy123;
 2303|      0|      if (yych <= '/')
 2304|      0|        goto yy94;
 2305|      0|      goto yy124;
 2306|      0|    } else {
 2307|      0|      if (yych <= 'Z') {
 2308|      0|        if (yych <= '@')
 2309|      0|          goto yy94;
 2310|      0|        goto yy124;
 2311|      0|      } else {
 2312|      0|        if (yych <= '`')
 2313|      0|          goto yy94;
 2314|      0|        if (yych <= 'z')
 2315|      0|          goto yy124;
 2316|      0|        goto yy94;
 2317|      0|      }
 2318|      0|    }
 2319|      0|  yy122:
 2320|      0|    yych = *++p;
 2321|      0|    if (yych <= '=') {
 2322|      0|      if (yych <= '.') {
 2323|      0|        if (yych <= ',')
 2324|      0|          goto yy94;
 2325|      0|        if (yych >= '.')
 2326|      0|          goto yy95;
 2327|      0|      } else {
 2328|      0|        if (yych <= '/')
 2329|      0|          goto yy94;
 2330|      0|        if (yych <= '9')
 2331|      0|          goto yy124;
 2332|      0|        goto yy94;
 2333|      0|      }
 2334|      0|    } else {
 2335|      0|      if (yych <= 'Z') {
 2336|      0|        if (yych <= '>')
 2337|      0|          goto yy99;
 2338|      0|        if (yych <= '@')
 2339|      0|          goto yy94;
 2340|      0|        goto yy124;
 2341|      0|      } else {
 2342|      0|        if (yych <= '`')
 2343|      0|          goto yy94;
 2344|      0|        if (yych <= 'z')
 2345|      0|          goto yy124;
 2346|      0|        goto yy94;
 2347|      0|      }
 2348|      0|    }
 2349|      0|  yy123:
 2350|      0|    yych = *++p;
 2351|      0|    if (yych <= '9') {
 2352|      0|      if (yych == '-')
 2353|      0|        goto yy125;
 2354|      0|      if (yych <= '/')
 2355|      0|        goto yy94;
 2356|      0|      goto yy126;
 2357|      0|    } else {
 2358|      0|      if (yych <= 'Z') {
 2359|      0|        if (yych <= '@')
 2360|      0|          goto yy94;
 2361|      0|        goto yy126;
 2362|      0|      } else {
 2363|      0|        if (yych <= '`')
 2364|      0|          goto yy94;
 2365|      0|        if (yych <= 'z')
 2366|      0|          goto yy126;
 2367|      0|        goto yy94;
 2368|      0|      }
 2369|      0|    }
 2370|      0|  yy124:
 2371|      0|    yych = *++p;
 2372|      0|    if (yych <= '=') {
 2373|      0|      if (yych <= '.') {
 2374|      0|        if (yych <= ',')
 2375|      0|          goto yy94;
 2376|      0|        if (yych >= '.')
 2377|      0|          goto yy95;
 2378|      0|      } else {
 2379|      0|        if (yych <= '/')
 2380|      0|          goto yy94;
 2381|      0|        if (yych <= '9')
 2382|      0|          goto yy126;
 2383|      0|        goto yy94;
 2384|      0|      }
 2385|      0|    } else {
 2386|      0|      if (yych <= 'Z') {
 2387|      0|        if (yych <= '>')
 2388|      0|          goto yy99;
 2389|      0|        if (yych <= '@')
 2390|      0|          goto yy94;
 2391|      0|        goto yy126;
 2392|      0|      } else {
 2393|      0|        if (yych <= '`')
 2394|      0|          goto yy94;
 2395|      0|        if (yych <= 'z')
 2396|      0|          goto yy126;
 2397|      0|        goto yy94;
 2398|      0|      }
 2399|      0|    }
 2400|      0|  yy125:
 2401|      0|    yych = *++p;
 2402|      0|    if (yych <= '9') {
 2403|      0|      if (yych == '-')
 2404|      0|        goto yy127;
 2405|      0|      if (yych <= '/')
 2406|      0|        goto yy94;
 2407|      0|      goto yy128;
 2408|      0|    } else {
 2409|      0|      if (yych <= 'Z') {
 2410|      0|        if (yych <= '@')
 2411|      0|          goto yy94;
 2412|      0|        goto yy128;
 2413|      0|      } else {
 2414|      0|        if (yych <= '`')
 2415|      0|          goto yy94;
 2416|      0|        if (yych <= 'z')
 2417|      0|          goto yy128;
 2418|      0|        goto yy94;
 2419|      0|      }
 2420|      0|    }
 2421|      0|  yy126:
 2422|      0|    yych = *++p;
 2423|      0|    if (yych <= '=') {
 2424|      0|      if (yych <= '.') {
 2425|      0|        if (yych <= ',')
 2426|      0|          goto yy94;
 2427|      0|        if (yych >= '.')
 2428|      0|          goto yy95;
 2429|      0|      } else {
 2430|      0|        if (yych <= '/')
 2431|      0|          goto yy94;
 2432|      0|        if (yych <= '9')
 2433|      0|          goto yy128;
 2434|      0|        goto yy94;
 2435|      0|      }
 2436|      0|    } else {
 2437|      0|      if (yych <= 'Z') {
 2438|      0|        if (yych <= '>')
 2439|      0|          goto yy99;
 2440|      0|        if (yych <= '@')
 2441|      0|          goto yy94;
 2442|      0|        goto yy128;
 2443|      0|      } else {
 2444|      0|        if (yych <= '`')
 2445|      0|          goto yy94;
 2446|      0|        if (yych <= 'z')
 2447|      0|          goto yy128;
 2448|      0|        goto yy94;
 2449|      0|      }
 2450|      0|    }
 2451|      0|  yy127:
 2452|      0|    yych = *++p;
 2453|      0|    if (yych <= '9') {
 2454|      0|      if (yych == '-')
 2455|      0|        goto yy129;
 2456|      0|      if (yych <= '/')
 2457|      0|        goto yy94;
 2458|      0|      goto yy130;
 2459|      0|    } else {
 2460|      0|      if (yych <= 'Z') {
 2461|      0|        if (yych <= '@')
 2462|      0|          goto yy94;
 2463|      0|        goto yy130;
 2464|      0|      } else {
 2465|      0|        if (yych <= '`')
 2466|      0|          goto yy94;
 2467|      0|        if (yych <= 'z')
 2468|      0|          goto yy130;
 2469|      0|        goto yy94;
 2470|      0|      }
 2471|      0|    }
 2472|      0|  yy128:
 2473|      0|    yych = *++p;
 2474|      0|    if (yych <= '=') {
 2475|      0|      if (yych <= '.') {
 2476|      0|        if (yych <= ',')
 2477|      0|          goto yy94;
 2478|      0|        if (yych >= '.')
 2479|      0|          goto yy95;
 2480|      0|      } else {
 2481|      0|        if (yych <= '/')
 2482|      0|          goto yy94;
 2483|      0|        if (yych <= '9')
 2484|      0|          goto yy130;
 2485|      0|        goto yy94;
 2486|      0|      }
 2487|      0|    } else {
 2488|      0|      if (yych <= 'Z') {
 2489|      0|        if (yych <= '>')
 2490|      0|          goto yy99;
 2491|      0|        if (yych <= '@')
 2492|      0|          goto yy94;
 2493|      0|        goto yy130;
 2494|      0|      } else {
 2495|      0|        if (yych <= '`')
 2496|      0|          goto yy94;
 2497|      0|        if (yych <= 'z')
 2498|      0|          goto yy130;
 2499|      0|        goto yy94;
 2500|      0|      }
 2501|      0|    }
 2502|      0|  yy129:
 2503|      0|    yych = *++p;
 2504|      0|    if (yych <= '9') {
 2505|      0|      if (yych == '-')
 2506|      0|        goto yy131;
 2507|      0|      if (yych <= '/')
 2508|      0|        goto yy94;
 2509|      0|      goto yy132;
 2510|      0|    } else {
 2511|      0|      if (yych <= 'Z') {
 2512|      0|        if (yych <= '@')
 2513|      0|          goto yy94;
 2514|      0|        goto yy132;
 2515|      0|      } else {
 2516|      0|        if (yych <= '`')
 2517|      0|          goto yy94;
 2518|      0|        if (yych <= 'z')
 2519|      0|          goto yy132;
 2520|      0|        goto yy94;
 2521|      0|      }
 2522|      0|    }
 2523|      0|  yy130:
 2524|      0|    yych = *++p;
 2525|      0|    if (yych <= '=') {
 2526|      0|      if (yych <= '.') {
 2527|      0|        if (yych <= ',')
 2528|      0|          goto yy94;
 2529|      0|        if (yych >= '.')
 2530|      0|          goto yy95;
 2531|      0|      } else {
 2532|      0|        if (yych <= '/')
 2533|      0|          goto yy94;
 2534|      0|        if (yych <= '9')
 2535|      0|          goto yy132;
 2536|      0|        goto yy94;
 2537|      0|      }
 2538|      0|    } else {
 2539|      0|      if (yych <= 'Z') {
 2540|      0|        if (yych <= '>')
 2541|      0|          goto yy99;
 2542|      0|        if (yych <= '@')
 2543|      0|          goto yy94;
 2544|      0|        goto yy132;
 2545|      0|      } else {
 2546|      0|        if (yych <= '`')
 2547|      0|          goto yy94;
 2548|      0|        if (yych <= 'z')
 2549|      0|          goto yy132;
 2550|      0|        goto yy94;
 2551|      0|      }
 2552|      0|    }
 2553|      0|  yy131:
 2554|      0|    yych = *++p;
 2555|      0|    if (yych <= '9') {
 2556|      0|      if (yych == '-')
 2557|      0|        goto yy133;
 2558|      0|      if (yych <= '/')
 2559|      0|        goto yy94;
 2560|      0|      goto yy134;
 2561|      0|    } else {
 2562|      0|      if (yych <= 'Z') {
 2563|      0|        if (yych <= '@')
 2564|      0|          goto yy94;
 2565|      0|        goto yy134;
 2566|      0|      } else {
 2567|      0|        if (yych <= '`')
 2568|      0|          goto yy94;
 2569|      0|        if (yych <= 'z')
 2570|      0|          goto yy134;
 2571|      0|        goto yy94;
 2572|      0|      }
 2573|      0|    }
 2574|      0|  yy132:
 2575|      0|    yych = *++p;
 2576|      0|    if (yych <= '=') {
 2577|      0|      if (yych <= '.') {
 2578|      0|        if (yych <= ',')
 2579|      0|          goto yy94;
 2580|      0|        if (yych >= '.')
 2581|      0|          goto yy95;
 2582|      0|      } else {
 2583|      0|        if (yych <= '/')
 2584|      0|          goto yy94;
 2585|      0|        if (yych <= '9')
 2586|      0|          goto yy134;
 2587|      0|        goto yy94;
 2588|      0|      }
 2589|      0|    } else {
 2590|      0|      if (yych <= 'Z') {
 2591|      0|        if (yych <= '>')
 2592|      0|          goto yy99;
 2593|      0|        if (yych <= '@')
 2594|      0|          goto yy94;
 2595|      0|        goto yy134;
 2596|      0|      } else {
 2597|      0|        if (yych <= '`')
 2598|      0|          goto yy94;
 2599|      0|        if (yych <= 'z')
 2600|      0|          goto yy134;
 2601|      0|        goto yy94;
 2602|      0|      }
 2603|      0|    }
 2604|      0|  yy133:
 2605|      0|    yych = *++p;
 2606|      0|    if (yych <= '9') {
 2607|      0|      if (yych == '-')
 2608|      0|        goto yy135;
 2609|      0|      if (yych <= '/')
 2610|      0|        goto yy94;
 2611|      0|      goto yy136;
 2612|      0|    } else {
 2613|      0|      if (yych <= 'Z') {
 2614|      0|        if (yych <= '@')
 2615|      0|          goto yy94;
 2616|      0|        goto yy136;
 2617|      0|      } else {
 2618|      0|        if (yych <= '`')
 2619|      0|          goto yy94;
 2620|      0|        if (yych <= 'z')
 2621|      0|          goto yy136;
 2622|      0|        goto yy94;
 2623|      0|      }
 2624|      0|    }
 2625|      0|  yy134:
 2626|      0|    yych = *++p;
 2627|      0|    if (yych <= '=') {
 2628|      0|      if (yych <= '.') {
 2629|      0|        if (yych <= ',')
 2630|      0|          goto yy94;
 2631|      0|        if (yych >= '.')
 2632|      0|          goto yy95;
 2633|      0|      } else {
 2634|      0|        if (yych <= '/')
 2635|      0|          goto yy94;
 2636|      0|        if (yych <= '9')
 2637|      0|          goto yy136;
 2638|      0|        goto yy94;
 2639|      0|      }
 2640|      0|    } else {
 2641|      0|      if (yych <= 'Z') {
 2642|      0|        if (yych <= '>')
 2643|      0|          goto yy99;
 2644|      0|        if (yych <= '@')
 2645|      0|          goto yy94;
 2646|      0|        goto yy136;
 2647|      0|      } else {
 2648|      0|        if (yych <= '`')
 2649|      0|          goto yy94;
 2650|      0|        if (yych <= 'z')
 2651|      0|          goto yy136;
 2652|      0|        goto yy94;
 2653|      0|      }
 2654|      0|    }
 2655|      0|  yy135:
 2656|      0|    yych = *++p;
 2657|      0|    if (yych <= '9') {
 2658|      0|      if (yych == '-')
 2659|      0|        goto yy137;
 2660|      0|      if (yych <= '/')
 2661|      0|        goto yy94;
 2662|      0|      goto yy138;
 2663|      0|    } else {
 2664|      0|      if (yych <= 'Z') {
 2665|      0|        if (yych <= '@')
 2666|      0|          goto yy94;
 2667|      0|        goto yy138;
 2668|      0|      } else {
 2669|      0|        if (yych <= '`')
 2670|      0|          goto yy94;
 2671|      0|        if (yych <= 'z')
 2672|      0|          goto yy138;
 2673|      0|        goto yy94;
 2674|      0|      }
 2675|      0|    }
 2676|      0|  yy136:
 2677|      0|    yych = *++p;
 2678|      0|    if (yych <= '=') {
 2679|      0|      if (yych <= '.') {
 2680|      0|        if (yych <= ',')
 2681|      0|          goto yy94;
 2682|      0|        if (yych >= '.')
 2683|      0|          goto yy95;
 2684|      0|      } else {
 2685|      0|        if (yych <= '/')
 2686|      0|          goto yy94;
 2687|      0|        if (yych <= '9')
 2688|      0|          goto yy138;
 2689|      0|        goto yy94;
 2690|      0|      }
 2691|      0|    } else {
 2692|      0|      if (yych <= 'Z') {
 2693|      0|        if (yych <= '>')
 2694|      0|          goto yy99;
 2695|      0|        if (yych <= '@')
 2696|      0|          goto yy94;
 2697|      0|        goto yy138;
 2698|      0|      } else {
 2699|      0|        if (yych <= '`')
 2700|      0|          goto yy94;
 2701|      0|        if (yych <= 'z')
 2702|      0|          goto yy138;
 2703|      0|        goto yy94;
 2704|      0|      }
 2705|      0|    }
 2706|      0|  yy137:
 2707|      0|    yych = *++p;
 2708|      0|    if (yych <= '9') {
 2709|      0|      if (yych == '-')
 2710|      0|        goto yy139;
 2711|      0|      if (yych <= '/')
 2712|      0|        goto yy94;
 2713|      0|      goto yy140;
 2714|      0|    } else {
 2715|      0|      if (yych <= 'Z') {
 2716|      0|        if (yych <= '@')
 2717|      0|          goto yy94;
 2718|      0|        goto yy140;
 2719|      0|      } else {
 2720|      0|        if (yych <= '`')
 2721|      0|          goto yy94;
 2722|      0|        if (yych <= 'z')
 2723|      0|          goto yy140;
 2724|      0|        goto yy94;
 2725|      0|      }
 2726|      0|    }
 2727|      0|  yy138:
 2728|      0|    yych = *++p;
 2729|      0|    if (yych <= '=') {
 2730|      0|      if (yych <= '.') {
 2731|      0|        if (yych <= ',')
 2732|      0|          goto yy94;
 2733|      0|        if (yych >= '.')
 2734|      0|          goto yy95;
 2735|      0|      } else {
 2736|      0|        if (yych <= '/')
 2737|      0|          goto yy94;
 2738|      0|        if (yych <= '9')
 2739|      0|          goto yy140;
 2740|      0|        goto yy94;
 2741|      0|      }
 2742|      0|    } else {
 2743|      0|      if (yych <= 'Z') {
 2744|      0|        if (yych <= '>')
 2745|      0|          goto yy99;
 2746|      0|        if (yych <= '@')
 2747|      0|          goto yy94;
 2748|      0|        goto yy140;
 2749|      0|      } else {
 2750|      0|        if (yych <= '`')
 2751|      0|          goto yy94;
 2752|      0|        if (yych <= 'z')
 2753|      0|          goto yy140;
 2754|      0|        goto yy94;
 2755|      0|      }
 2756|      0|    }
 2757|      0|  yy139:
 2758|      0|    yych = *++p;
 2759|      0|    if (yych <= '9') {
 2760|      0|      if (yych == '-')
 2761|      0|        goto yy141;
 2762|      0|      if (yych <= '/')
 2763|      0|        goto yy94;
 2764|      0|      goto yy142;
 2765|      0|    } else {
 2766|      0|      if (yych <= 'Z') {
 2767|      0|        if (yych <= '@')
 2768|      0|          goto yy94;
 2769|      0|        goto yy142;
 2770|      0|      } else {
 2771|      0|        if (yych <= '`')
 2772|      0|          goto yy94;
 2773|      0|        if (yych <= 'z')
 2774|      0|          goto yy142;
 2775|      0|        goto yy94;
 2776|      0|      }
 2777|      0|    }
 2778|      0|  yy140:
 2779|      0|    yych = *++p;
 2780|      0|    if (yych <= '=') {
 2781|      0|      if (yych <= '.') {
 2782|      0|        if (yych <= ',')
 2783|      0|          goto yy94;
 2784|      0|        if (yych >= '.')
 2785|      0|          goto yy95;
 2786|      0|      } else {
 2787|      0|        if (yych <= '/')
 2788|      0|          goto yy94;
 2789|      0|        if (yych <= '9')
 2790|      0|          goto yy142;
 2791|      0|        goto yy94;
 2792|      0|      }
 2793|      0|    } else {
 2794|      0|      if (yych <= 'Z') {
 2795|      0|        if (yych <= '>')
 2796|      0|          goto yy99;
 2797|      0|        if (yych <= '@')
 2798|      0|          goto yy94;
 2799|      0|        goto yy142;
 2800|      0|      } else {
 2801|      0|        if (yych <= '`')
 2802|      0|          goto yy94;
 2803|      0|        if (yych <= 'z')
 2804|      0|          goto yy142;
 2805|      0|        goto yy94;
 2806|      0|      }
 2807|      0|    }
 2808|      0|  yy141:
 2809|      0|    yych = *++p;
 2810|      0|    if (yych <= '9') {
 2811|      0|      if (yych == '-')
 2812|      0|        goto yy143;
 2813|      0|      if (yych <= '/')
 2814|      0|        goto yy94;
 2815|      0|      goto yy144;
 2816|      0|    } else {
 2817|      0|      if (yych <= 'Z') {
 2818|      0|        if (yych <= '@')
 2819|      0|          goto yy94;
 2820|      0|        goto yy144;
 2821|      0|      } else {
 2822|      0|        if (yych <= '`')
 2823|      0|          goto yy94;
 2824|      0|        if (yych <= 'z')
 2825|      0|          goto yy144;
 2826|      0|        goto yy94;
 2827|      0|      }
 2828|      0|    }
 2829|      0|  yy142:
 2830|      0|    yych = *++p;
 2831|      0|    if (yych <= '=') {
 2832|      0|      if (yych <= '.') {
 2833|      0|        if (yych <= ',')
 2834|      0|          goto yy94;
 2835|      0|        if (yych >= '.')
 2836|      0|          goto yy95;
 2837|      0|      } else {
 2838|      0|        if (yych <= '/')
 2839|      0|          goto yy94;
 2840|      0|        if (yych <= '9')
 2841|      0|          goto yy144;
 2842|      0|        goto yy94;
 2843|      0|      }
 2844|      0|    } else {
 2845|      0|      if (yych <= 'Z') {
 2846|      0|        if (yych <= '>')
 2847|      0|          goto yy99;
 2848|      0|        if (yych <= '@')
 2849|      0|          goto yy94;
 2850|      0|        goto yy144;
 2851|      0|      } else {
 2852|      0|        if (yych <= '`')
 2853|      0|          goto yy94;
 2854|      0|        if (yych <= 'z')
 2855|      0|          goto yy144;
 2856|      0|        goto yy94;
 2857|      0|      }
 2858|      0|    }
 2859|      0|  yy143:
 2860|      0|    yych = *++p;
 2861|      0|    if (yych <= '9') {
 2862|      0|      if (yych == '-')
 2863|      0|        goto yy145;
 2864|      0|      if (yych <= '/')
 2865|      0|        goto yy94;
 2866|      0|      goto yy146;
 2867|      0|    } else {
 2868|      0|      if (yych <= 'Z') {
 2869|      0|        if (yych <= '@')
 2870|      0|          goto yy94;
 2871|      0|        goto yy146;
 2872|      0|      } else {
 2873|      0|        if (yych <= '`')
 2874|      0|          goto yy94;
 2875|      0|        if (yych <= 'z')
 2876|      0|          goto yy146;
 2877|      0|        goto yy94;
 2878|      0|      }
 2879|      0|    }
 2880|      0|  yy144:
 2881|      0|    yych = *++p;
 2882|      0|    if (yych <= '=') {
 2883|      0|      if (yych <= '.') {
 2884|      0|        if (yych <= ',')
 2885|      0|          goto yy94;
 2886|      0|        if (yych >= '.')
 2887|      0|          goto yy95;
 2888|      0|      } else {
 2889|      0|        if (yych <= '/')
 2890|      0|          goto yy94;
 2891|      0|        if (yych <= '9')
 2892|      0|          goto yy146;
 2893|      0|        goto yy94;
 2894|      0|      }
 2895|      0|    } else {
 2896|      0|      if (yych <= 'Z') {
 2897|      0|        if (yych <= '>')
 2898|      0|          goto yy99;
 2899|      0|        if (yych <= '@')
 2900|      0|          goto yy94;
 2901|      0|        goto yy146;
 2902|      0|      } else {
 2903|      0|        if (yych <= '`')
 2904|      0|          goto yy94;
 2905|      0|        if (yych <= 'z')
 2906|      0|          goto yy146;
 2907|      0|        goto yy94;
 2908|      0|      }
 2909|      0|    }
 2910|      0|  yy145:
 2911|      0|    yych = *++p;
 2912|      0|    if (yych <= '9') {
 2913|      0|      if (yych == '-')
 2914|      0|        goto yy147;
 2915|      0|      if (yych <= '/')
 2916|      0|        goto yy94;
 2917|      0|      goto yy148;
 2918|      0|    } else {
 2919|      0|      if (yych <= 'Z') {
 2920|      0|        if (yych <= '@')
 2921|      0|          goto yy94;
 2922|      0|        goto yy148;
 2923|      0|      } else {
 2924|      0|        if (yych <= '`')
 2925|      0|          goto yy94;
 2926|      0|        if (yych <= 'z')
 2927|      0|          goto yy148;
 2928|      0|        goto yy94;
 2929|      0|      }
 2930|      0|    }
 2931|      0|  yy146:
 2932|      0|    yych = *++p;
 2933|      0|    if (yych <= '=') {
 2934|      0|      if (yych <= '.') {
 2935|      0|        if (yych <= ',')
 2936|      0|          goto yy94;
 2937|      0|        if (yych >= '.')
 2938|      0|          goto yy95;
 2939|      0|      } else {
 2940|      0|        if (yych <= '/')
 2941|      0|          goto yy94;
 2942|      0|        if (yych <= '9')
 2943|      0|          goto yy148;
 2944|      0|        goto yy94;
 2945|      0|      }
 2946|      0|    } else {
 2947|      0|      if (yych <= 'Z') {
 2948|      0|        if (yych <= '>')
 2949|      0|          goto yy99;
 2950|      0|        if (yych <= '@')
 2951|      0|          goto yy94;
 2952|      0|        goto yy148;
 2953|      0|      } else {
 2954|      0|        if (yych <= '`')
 2955|      0|          goto yy94;
 2956|      0|        if (yych <= 'z')
 2957|      0|          goto yy148;
 2958|      0|        goto yy94;
 2959|      0|      }
 2960|      0|    }
 2961|      0|  yy147:
 2962|      0|    yych = *++p;
 2963|      0|    if (yych <= '9') {
 2964|      0|      if (yych == '-')
 2965|      0|        goto yy149;
 2966|      0|      if (yych <= '/')
 2967|      0|        goto yy94;
 2968|      0|      goto yy150;
 2969|      0|    } else {
 2970|      0|      if (yych <= 'Z') {
 2971|      0|        if (yych <= '@')
 2972|      0|          goto yy94;
 2973|      0|        goto yy150;
 2974|      0|      } else {
 2975|      0|        if (yych <= '`')
 2976|      0|          goto yy94;
 2977|      0|        if (yych <= 'z')
 2978|      0|          goto yy150;
 2979|      0|        goto yy94;
 2980|      0|      }
 2981|      0|    }
 2982|      0|  yy148:
 2983|      0|    yych = *++p;
 2984|      0|    if (yych <= '=') {
 2985|      0|      if (yych <= '.') {
 2986|      0|        if (yych <= ',')
 2987|      0|          goto yy94;
 2988|      0|        if (yych >= '.')
 2989|      0|          goto yy95;
 2990|      0|      } else {
 2991|      0|        if (yych <= '/')
 2992|      0|          goto yy94;
 2993|      0|        if (yych <= '9')
 2994|      0|          goto yy150;
 2995|      0|        goto yy94;
 2996|      0|      }
 2997|      0|    } else {
 2998|      0|      if (yych <= 'Z') {
 2999|      0|        if (yych <= '>')
 3000|      0|          goto yy99;
 3001|      0|        if (yych <= '@')
 3002|      0|          goto yy94;
 3003|      0|        goto yy150;
 3004|      0|      } else {
 3005|      0|        if (yych <= '`')
 3006|      0|          goto yy94;
 3007|      0|        if (yych <= 'z')
 3008|      0|          goto yy150;
 3009|      0|        goto yy94;
 3010|      0|      }
 3011|      0|    }
 3012|      0|  yy149:
 3013|      0|    yych = *++p;
 3014|      0|    if (yych <= '9') {
 3015|      0|      if (yych == '-')
 3016|      0|        goto yy151;
 3017|      0|      if (yych <= '/')
 3018|      0|        goto yy94;
 3019|      0|      goto yy152;
 3020|      0|    } else {
 3021|      0|      if (yych <= 'Z') {
 3022|      0|        if (yych <= '@')
 3023|      0|          goto yy94;
 3024|      0|        goto yy152;
 3025|      0|      } else {
 3026|      0|        if (yych <= '`')
 3027|      0|          goto yy94;
 3028|      0|        if (yych <= 'z')
 3029|      0|          goto yy152;
 3030|      0|        goto yy94;
 3031|      0|      }
 3032|      0|    }
 3033|      0|  yy150:
 3034|      0|    yych = *++p;
 3035|      0|    if (yych <= '=') {
 3036|      0|      if (yych <= '.') {
 3037|      0|        if (yych <= ',')
 3038|      0|          goto yy94;
 3039|      0|        if (yych >= '.')
 3040|      0|          goto yy95;
 3041|      0|      } else {
 3042|      0|        if (yych <= '/')
 3043|      0|          goto yy94;
 3044|      0|        if (yych <= '9')
 3045|      0|          goto yy152;
 3046|      0|        goto yy94;
 3047|      0|      }
 3048|      0|    } else {
 3049|      0|      if (yych <= 'Z') {
 3050|      0|        if (yych <= '>')
 3051|      0|          goto yy99;
 3052|      0|        if (yych <= '@')
 3053|      0|          goto yy94;
 3054|      0|        goto yy152;
 3055|      0|      } else {
 3056|      0|        if (yych <= '`')
 3057|      0|          goto yy94;
 3058|      0|        if (yych <= 'z')
 3059|      0|          goto yy152;
 3060|      0|        goto yy94;
 3061|      0|      }
 3062|      0|    }
 3063|      0|  yy151:
 3064|      0|    yych = *++p;
 3065|      0|    if (yych <= '9') {
 3066|      0|      if (yych == '-')
 3067|      0|        goto yy153;
 3068|      0|      if (yych <= '/')
 3069|      0|        goto yy94;
 3070|      0|      goto yy154;
 3071|      0|    } else {
 3072|      0|      if (yych <= 'Z') {
 3073|      0|        if (yych <= '@')
 3074|      0|          goto yy94;
 3075|      0|        goto yy154;
 3076|      0|      } else {
 3077|      0|        if (yych <= '`')
 3078|      0|          goto yy94;
 3079|      0|        if (yych <= 'z')
 3080|      0|          goto yy154;
 3081|      0|        goto yy94;
 3082|      0|      }
 3083|      0|    }
 3084|      0|  yy152:
 3085|      0|    yych = *++p;
 3086|      0|    if (yych <= '=') {
 3087|      0|      if (yych <= '.') {
 3088|      0|        if (yych <= ',')
 3089|      0|          goto yy94;
 3090|      0|        if (yych >= '.')
 3091|      0|          goto yy95;
 3092|      0|      } else {
 3093|      0|        if (yych <= '/')
 3094|      0|          goto yy94;
 3095|      0|        if (yych <= '9')
 3096|      0|          goto yy154;
 3097|      0|        goto yy94;
 3098|      0|      }
 3099|      0|    } else {
 3100|      0|      if (yych <= 'Z') {
 3101|      0|        if (yych <= '>')
 3102|      0|          goto yy99;
 3103|      0|        if (yych <= '@')
 3104|      0|          goto yy94;
 3105|      0|        goto yy154;
 3106|      0|      } else {
 3107|      0|        if (yych <= '`')
 3108|      0|          goto yy94;
 3109|      0|        if (yych <= 'z')
 3110|      0|          goto yy154;
 3111|      0|        goto yy94;
 3112|      0|      }
 3113|      0|    }
 3114|      0|  yy153:
 3115|      0|    yych = *++p;
 3116|      0|    if (yych <= '9') {
 3117|      0|      if (yych == '-')
 3118|      0|        goto yy155;
 3119|      0|      if (yych <= '/')
 3120|      0|        goto yy94;
 3121|      0|      goto yy156;
 3122|      0|    } else {
 3123|      0|      if (yych <= 'Z') {
 3124|      0|        if (yych <= '@')
 3125|      0|          goto yy94;
 3126|      0|        goto yy156;
 3127|      0|      } else {
 3128|      0|        if (yych <= '`')
 3129|      0|          goto yy94;
 3130|      0|        if (yych <= 'z')
 3131|      0|          goto yy156;
 3132|      0|        goto yy94;
 3133|      0|      }
 3134|      0|    }
 3135|      0|  yy154:
 3136|      0|    yych = *++p;
 3137|      0|    if (yych <= '=') {
 3138|      0|      if (yych <= '.') {
 3139|      0|        if (yych <= ',')
 3140|      0|          goto yy94;
 3141|      0|        if (yych >= '.')
 3142|      0|          goto yy95;
 3143|      0|      } else {
 3144|      0|        if (yych <= '/')
 3145|      0|          goto yy94;
 3146|      0|        if (yych <= '9')
 3147|      0|          goto yy156;
 3148|      0|        goto yy94;
 3149|      0|      }
 3150|      0|    } else {
 3151|      0|      if (yych <= 'Z') {
 3152|      0|        if (yych <= '>')
 3153|      0|          goto yy99;
 3154|      0|        if (yych <= '@')
 3155|      0|          goto yy94;
 3156|      0|        goto yy156;
 3157|      0|      } else {
 3158|      0|        if (yych <= '`')
 3159|      0|          goto yy94;
 3160|      0|        if (yych <= 'z')
 3161|      0|          goto yy156;
 3162|      0|        goto yy94;
 3163|      0|      }
 3164|      0|    }
 3165|      0|  yy155:
 3166|      0|    yych = *++p;
 3167|      0|    if (yych <= '9') {
 3168|      0|      if (yych == '-')
 3169|      0|        goto yy157;
 3170|      0|      if (yych <= '/')
 3171|      0|        goto yy94;
 3172|      0|      goto yy158;
 3173|      0|    } else {
 3174|      0|      if (yych <= 'Z') {
 3175|      0|        if (yych <= '@')
 3176|      0|          goto yy94;
 3177|      0|        goto yy158;
 3178|      0|      } else {
 3179|      0|        if (yych <= '`')
 3180|      0|          goto yy94;
 3181|      0|        if (yych <= 'z')
 3182|      0|          goto yy158;
 3183|      0|        goto yy94;
 3184|      0|      }
 3185|      0|    }
 3186|      0|  yy156:
 3187|      0|    yych = *++p;
 3188|      0|    if (yych <= '=') {
 3189|      0|      if (yych <= '.') {
 3190|      0|        if (yych <= ',')
 3191|      0|          goto yy94;
 3192|      0|        if (yych >= '.')
 3193|      0|          goto yy95;
 3194|      0|      } else {
 3195|      0|        if (yych <= '/')
 3196|      0|          goto yy94;
 3197|      0|        if (yych <= '9')
 3198|      0|          goto yy158;
 3199|      0|        goto yy94;
 3200|      0|      }
 3201|      0|    } else {
 3202|      0|      if (yych <= 'Z') {
 3203|      0|        if (yych <= '>')
 3204|      0|          goto yy99;
 3205|      0|        if (yych <= '@')
 3206|      0|          goto yy94;
 3207|      0|        goto yy158;
 3208|      0|      } else {
 3209|      0|        if (yych <= '`')
 3210|      0|          goto yy94;
 3211|      0|        if (yych <= 'z')
 3212|      0|          goto yy158;
 3213|      0|        goto yy94;
 3214|      0|      }
 3215|      0|    }
 3216|      0|  yy157:
 3217|      0|    yych = *++p;
 3218|      0|    if (yych <= '9') {
 3219|      0|      if (yych == '-')
 3220|      0|        goto yy159;
 3221|      0|      if (yych <= '/')
 3222|      0|        goto yy94;
 3223|      0|      goto yy160;
 3224|      0|    } else {
 3225|      0|      if (yych <= 'Z') {
 3226|      0|        if (yych <= '@')
 3227|      0|          goto yy94;
 3228|      0|        goto yy160;
 3229|      0|      } else {
 3230|      0|        if (yych <= '`')
 3231|      0|          goto yy94;
 3232|      0|        if (yych <= 'z')
 3233|      0|          goto yy160;
 3234|      0|        goto yy94;
 3235|      0|      }
 3236|      0|    }
 3237|      0|  yy158:
 3238|      0|    yych = *++p;
 3239|      0|    if (yych <= '=') {
 3240|      0|      if (yych <= '.') {
 3241|      0|        if (yych <= ',')
 3242|      0|          goto yy94;
 3243|      0|        if (yych >= '.')
 3244|      0|          goto yy95;
 3245|      0|      } else {
 3246|      0|        if (yych <= '/')
 3247|      0|          goto yy94;
 3248|      0|        if (yych <= '9')
 3249|      0|          goto yy160;
 3250|      0|        goto yy94;
 3251|      0|      }
 3252|      0|    } else {
 3253|      0|      if (yych <= 'Z') {
 3254|      0|        if (yych <= '>')
 3255|      0|          goto yy99;
 3256|      0|        if (yych <= '@')
 3257|      0|          goto yy94;
 3258|      0|        goto yy160;
 3259|      0|      } else {
 3260|      0|        if (yych <= '`')
 3261|      0|          goto yy94;
 3262|      0|        if (yych <= 'z')
 3263|      0|          goto yy160;
 3264|      0|        goto yy94;
 3265|      0|      }
 3266|      0|    }
 3267|      0|  yy159:
 3268|      0|    yych = *++p;
 3269|      0|    if (yych <= '9') {
 3270|      0|      if (yych == '-')
 3271|      0|        goto yy161;
 3272|      0|      if (yych <= '/')
 3273|      0|        goto yy94;
 3274|      0|      goto yy162;
 3275|      0|    } else {
 3276|      0|      if (yych <= 'Z') {
 3277|      0|        if (yych <= '@')
 3278|      0|          goto yy94;
 3279|      0|        goto yy162;
 3280|      0|      } else {
 3281|      0|        if (yych <= '`')
 3282|      0|          goto yy94;
 3283|      0|        if (yych <= 'z')
 3284|      0|          goto yy162;
 3285|      0|        goto yy94;
 3286|      0|      }
 3287|      0|    }
 3288|      0|  yy160:
 3289|      0|    yych = *++p;
 3290|      0|    if (yych <= '=') {
 3291|      0|      if (yych <= '.') {
 3292|      0|        if (yych <= ',')
 3293|      0|          goto yy94;
 3294|      0|        if (yych >= '.')
 3295|      0|          goto yy95;
 3296|      0|      } else {
 3297|      0|        if (yych <= '/')
 3298|      0|          goto yy94;
 3299|      0|        if (yych <= '9')
 3300|      0|          goto yy162;
 3301|      0|        goto yy94;
 3302|      0|      }
 3303|      0|    } else {
 3304|      0|      if (yych <= 'Z') {
 3305|      0|        if (yych <= '>')
 3306|      0|          goto yy99;
 3307|      0|        if (yych <= '@')
 3308|      0|          goto yy94;
 3309|      0|        goto yy162;
 3310|      0|      } else {
 3311|      0|        if (yych <= '`')
 3312|      0|          goto yy94;
 3313|      0|        if (yych <= 'z')
 3314|      0|          goto yy162;
 3315|      0|        goto yy94;
 3316|      0|      }
 3317|      0|    }
 3318|      0|  yy161:
 3319|      0|    yych = *++p;
 3320|      0|    if (yych <= '9') {
 3321|      0|      if (yych == '-')
 3322|      0|        goto yy163;
 3323|      0|      if (yych <= '/')
 3324|      0|        goto yy94;
 3325|      0|      goto yy164;
 3326|      0|    } else {
 3327|      0|      if (yych <= 'Z') {
 3328|      0|        if (yych <= '@')
 3329|      0|          goto yy94;
 3330|      0|        goto yy164;
 3331|      0|      } else {
 3332|      0|        if (yych <= '`')
 3333|      0|          goto yy94;
 3334|      0|        if (yych <= 'z')
 3335|      0|          goto yy164;
 3336|      0|        goto yy94;
 3337|      0|      }
 3338|      0|    }
 3339|      0|  yy162:
 3340|      0|    yych = *++p;
 3341|      0|    if (yych <= '=') {
 3342|      0|      if (yych <= '.') {
 3343|      0|        if (yych <= ',')
 3344|      0|          goto yy94;
 3345|      0|        if (yych >= '.')
 3346|      0|          goto yy95;
 3347|      0|      } else {
 3348|      0|        if (yych <= '/')
 3349|      0|          goto yy94;
 3350|      0|        if (yych <= '9')
 3351|      0|          goto yy164;
 3352|      0|        goto yy94;
 3353|      0|      }
 3354|      0|    } else {
 3355|      0|      if (yych <= 'Z') {
 3356|      0|        if (yych <= '>')
 3357|      0|          goto yy99;
 3358|      0|        if (yych <= '@')
 3359|      0|          goto yy94;
 3360|      0|        goto yy164;
 3361|      0|      } else {
 3362|      0|        if (yych <= '`')
 3363|      0|          goto yy94;
 3364|      0|        if (yych <= 'z')
 3365|      0|          goto yy164;
 3366|      0|        goto yy94;
 3367|      0|      }
 3368|      0|    }
 3369|      0|  yy163:
 3370|      0|    yych = *++p;
 3371|      0|    if (yych <= '9') {
 3372|      0|      if (yych == '-')
 3373|      0|        goto yy165;
 3374|      0|      if (yych <= '/')
 3375|      0|        goto yy94;
 3376|      0|      goto yy166;
 3377|      0|    } else {
 3378|      0|      if (yych <= 'Z') {
 3379|      0|        if (yych <= '@')
 3380|      0|          goto yy94;
 3381|      0|        goto yy166;
 3382|      0|      } else {
 3383|      0|        if (yych <= '`')
 3384|      0|          goto yy94;
 3385|      0|        if (yych <= 'z')
 3386|      0|          goto yy166;
 3387|      0|        goto yy94;
 3388|      0|      }
 3389|      0|    }
 3390|      0|  yy164:
 3391|      0|    yych = *++p;
 3392|      0|    if (yych <= '=') {
 3393|      0|      if (yych <= '.') {
 3394|      0|        if (yych <= ',')
 3395|      0|          goto yy94;
 3396|      0|        if (yych >= '.')
 3397|      0|          goto yy95;
 3398|      0|      } else {
 3399|      0|        if (yych <= '/')
 3400|      0|          goto yy94;
 3401|      0|        if (yych <= '9')
 3402|      0|          goto yy166;
 3403|      0|        goto yy94;
 3404|      0|      }
 3405|      0|    } else {
 3406|      0|      if (yych <= 'Z') {
 3407|      0|        if (yych <= '>')
 3408|      0|          goto yy99;
 3409|      0|        if (yych <= '@')
 3410|      0|          goto yy94;
 3411|      0|        goto yy166;
 3412|      0|      } else {
 3413|      0|        if (yych <= '`')
 3414|      0|          goto yy94;
 3415|      0|        if (yych <= 'z')
 3416|      0|          goto yy166;
 3417|      0|        goto yy94;
 3418|      0|      }
 3419|      0|    }
 3420|      0|  yy165:
 3421|      0|    yych = *++p;
 3422|      0|    if (yych <= '9') {
 3423|      0|      if (yych == '-')
 3424|      0|        goto yy167;
 3425|      0|      if (yych <= '/')
 3426|      0|        goto yy94;
 3427|      0|      goto yy168;
 3428|      0|    } else {
 3429|      0|      if (yych <= 'Z') {
 3430|      0|        if (yych <= '@')
 3431|      0|          goto yy94;
 3432|      0|        goto yy168;
 3433|      0|      } else {
 3434|      0|        if (yych <= '`')
 3435|      0|          goto yy94;
 3436|      0|        if (yych <= 'z')
 3437|      0|          goto yy168;
 3438|      0|        goto yy94;
 3439|      0|      }
 3440|      0|    }
 3441|      0|  yy166:
 3442|      0|    yych = *++p;
 3443|      0|    if (yych <= '=') {
 3444|      0|      if (yych <= '.') {
 3445|      0|        if (yych <= ',')
 3446|      0|          goto yy94;
 3447|      0|        if (yych >= '.')
 3448|      0|          goto yy95;
 3449|      0|      } else {
 3450|      0|        if (yych <= '/')
 3451|      0|          goto yy94;
 3452|      0|        if (yych <= '9')
 3453|      0|          goto yy168;
 3454|      0|        goto yy94;
 3455|      0|      }
 3456|      0|    } else {
 3457|      0|      if (yych <= 'Z') {
 3458|      0|        if (yych <= '>')
 3459|      0|          goto yy99;
 3460|      0|        if (yych <= '@')
 3461|      0|          goto yy94;
 3462|      0|        goto yy168;
 3463|      0|      } else {
 3464|      0|        if (yych <= '`')
 3465|      0|          goto yy94;
 3466|      0|        if (yych <= 'z')
 3467|      0|          goto yy168;
 3468|      0|        goto yy94;
 3469|      0|      }
 3470|      0|    }
 3471|      0|  yy167:
 3472|      0|    yych = *++p;
 3473|      0|    if (yych <= '9') {
 3474|      0|      if (yych == '-')
 3475|      0|        goto yy169;
 3476|      0|      if (yych <= '/')
 3477|      0|        goto yy94;
 3478|      0|      goto yy170;
 3479|      0|    } else {
 3480|      0|      if (yych <= 'Z') {
 3481|      0|        if (yych <= '@')
 3482|      0|          goto yy94;
 3483|      0|        goto yy170;
 3484|      0|      } else {
 3485|      0|        if (yych <= '`')
 3486|      0|          goto yy94;
 3487|      0|        if (yych <= 'z')
 3488|      0|          goto yy170;
 3489|      0|        goto yy94;
 3490|      0|      }
 3491|      0|    }
 3492|      0|  yy168:
 3493|      0|    yych = *++p;
 3494|      0|    if (yych <= '=') {
 3495|      0|      if (yych <= '.') {
 3496|      0|        if (yych <= ',')
 3497|      0|          goto yy94;
 3498|      0|        if (yych >= '.')
 3499|      0|          goto yy95;
 3500|      0|      } else {
 3501|      0|        if (yych <= '/')
 3502|      0|          goto yy94;
 3503|      0|        if (yych <= '9')
 3504|      0|          goto yy170;
 3505|      0|        goto yy94;
 3506|      0|      }
 3507|      0|    } else {
 3508|      0|      if (yych <= 'Z') {
 3509|      0|        if (yych <= '>')
 3510|      0|          goto yy99;
 3511|      0|        if (yych <= '@')
 3512|      0|          goto yy94;
 3513|      0|        goto yy170;
 3514|      0|      } else {
 3515|      0|        if (yych <= '`')
 3516|      0|          goto yy94;
 3517|      0|        if (yych <= 'z')
 3518|      0|          goto yy170;
 3519|      0|        goto yy94;
 3520|      0|      }
 3521|      0|    }
 3522|      0|  yy169:
 3523|      0|    yych = *++p;
 3524|      0|    if (yych <= '9') {
 3525|      0|      if (yych == '-')
 3526|      0|        goto yy171;
 3527|      0|      if (yych <= '/')
 3528|      0|        goto yy94;
 3529|      0|      goto yy172;
 3530|      0|    } else {
 3531|      0|      if (yych <= 'Z') {
 3532|      0|        if (yych <= '@')
 3533|      0|          goto yy94;
 3534|      0|        goto yy172;
 3535|      0|      } else {
 3536|      0|        if (yych <= '`')
 3537|      0|          goto yy94;
 3538|      0|        if (yych <= 'z')
 3539|      0|          goto yy172;
 3540|      0|        goto yy94;
 3541|      0|      }
 3542|      0|    }
 3543|      0|  yy170:
 3544|      0|    yych = *++p;
 3545|      0|    if (yych <= '=') {
 3546|      0|      if (yych <= '.') {
 3547|      0|        if (yych <= ',')
 3548|      0|          goto yy94;
 3549|      0|        if (yych >= '.')
 3550|      0|          goto yy95;
 3551|      0|      } else {
 3552|      0|        if (yych <= '/')
 3553|      0|          goto yy94;
 3554|      0|        if (yych <= '9')
 3555|      0|          goto yy172;
 3556|      0|        goto yy94;
 3557|      0|      }
 3558|      0|    } else {
 3559|      0|      if (yych <= 'Z') {
 3560|      0|        if (yych <= '>')
 3561|      0|          goto yy99;
 3562|      0|        if (yych <= '@')
 3563|      0|          goto yy94;
 3564|      0|        goto yy172;
 3565|      0|      } else {
 3566|      0|        if (yych <= '`')
 3567|      0|          goto yy94;
 3568|      0|        if (yych <= 'z')
 3569|      0|          goto yy172;
 3570|      0|        goto yy94;
 3571|      0|      }
 3572|      0|    }
 3573|      0|  yy171:
 3574|      0|    yych = *++p;
 3575|      0|    if (yych <= '9') {
 3576|      0|      if (yych == '-')
 3577|      0|        goto yy173;
 3578|      0|      if (yych <= '/')
 3579|      0|        goto yy94;
 3580|      0|      goto yy174;
 3581|      0|    } else {
 3582|      0|      if (yych <= 'Z') {
 3583|      0|        if (yych <= '@')
 3584|      0|          goto yy94;
 3585|      0|        goto yy174;
 3586|      0|      } else {
 3587|      0|        if (yych <= '`')
 3588|      0|          goto yy94;
 3589|      0|        if (yych <= 'z')
 3590|      0|          goto yy174;
 3591|      0|        goto yy94;
 3592|      0|      }
 3593|      0|    }
 3594|      0|  yy172:
 3595|      0|    yych = *++p;
 3596|      0|    if (yych <= '=') {
 3597|      0|      if (yych <= '.') {
 3598|      0|        if (yych <= ',')
 3599|      0|          goto yy94;
 3600|      0|        if (yych >= '.')
 3601|      0|          goto yy95;
 3602|      0|      } else {
 3603|      0|        if (yych <= '/')
 3604|      0|          goto yy94;
 3605|      0|        if (yych <= '9')
 3606|      0|          goto yy174;
 3607|      0|        goto yy94;
 3608|      0|      }
 3609|      0|    } else {
 3610|      0|      if (yych <= 'Z') {
 3611|      0|        if (yych <= '>')
 3612|      0|          goto yy99;
 3613|      0|        if (yych <= '@')
 3614|      0|          goto yy94;
 3615|      0|        goto yy174;
 3616|      0|      } else {
 3617|      0|        if (yych <= '`')
 3618|      0|          goto yy94;
 3619|      0|        if (yych <= 'z')
 3620|      0|          goto yy174;
 3621|      0|        goto yy94;
 3622|      0|      }
 3623|      0|    }
 3624|      0|  yy173:
 3625|      0|    yych = *++p;
 3626|      0|    if (yych <= '9') {
 3627|      0|      if (yych == '-')
 3628|      0|        goto yy175;
 3629|      0|      if (yych <= '/')
 3630|      0|        goto yy94;
 3631|      0|      goto yy176;
 3632|      0|    } else {
 3633|      0|      if (yych <= 'Z') {
 3634|      0|        if (yych <= '@')
 3635|      0|          goto yy94;
 3636|      0|        goto yy176;
 3637|      0|      } else {
 3638|      0|        if (yych <= '`')
 3639|      0|          goto yy94;
 3640|      0|        if (yych <= 'z')
 3641|      0|          goto yy176;
 3642|      0|        goto yy94;
 3643|      0|      }
 3644|      0|    }
 3645|      0|  yy174:
 3646|      0|    yych = *++p;
 3647|      0|    if (yych <= '=') {
 3648|      0|      if (yych <= '.') {
 3649|      0|        if (yych <= ',')
 3650|      0|          goto yy94;
 3651|      0|        if (yych >= '.')
 3652|      0|          goto yy95;
 3653|      0|      } else {
 3654|      0|        if (yych <= '/')
 3655|      0|          goto yy94;
 3656|      0|        if (yych <= '9')
 3657|      0|          goto yy176;
 3658|      0|        goto yy94;
 3659|      0|      }
 3660|      0|    } else {
 3661|      0|      if (yych <= 'Z') {
 3662|      0|        if (yych <= '>')
 3663|      0|          goto yy99;
 3664|      0|        if (yych <= '@')
 3665|      0|          goto yy94;
 3666|      0|        goto yy176;
 3667|      0|      } else {
 3668|      0|        if (yych <= '`')
 3669|      0|          goto yy94;
 3670|      0|        if (yych <= 'z')
 3671|      0|          goto yy176;
 3672|      0|        goto yy94;
 3673|      0|      }
 3674|      0|    }
 3675|      0|  yy175:
 3676|      0|    yych = *++p;
 3677|      0|    if (yych <= '9') {
 3678|      0|      if (yych == '-')
 3679|      0|        goto yy177;
 3680|      0|      if (yych <= '/')
 3681|      0|        goto yy94;
 3682|      0|      goto yy178;
 3683|      0|    } else {
 3684|      0|      if (yych <= 'Z') {
 3685|      0|        if (yych <= '@')
 3686|      0|          goto yy94;
 3687|      0|        goto yy178;
 3688|      0|      } else {
 3689|      0|        if (yych <= '`')
 3690|      0|          goto yy94;
 3691|      0|        if (yych <= 'z')
 3692|      0|          goto yy178;
 3693|      0|        goto yy94;
 3694|      0|      }
 3695|      0|    }
 3696|      0|  yy176:
 3697|      0|    yych = *++p;
 3698|      0|    if (yych <= '=') {
 3699|      0|      if (yych <= '.') {
 3700|      0|        if (yych <= ',')
 3701|      0|          goto yy94;
 3702|      0|        if (yych >= '.')
 3703|      0|          goto yy95;
 3704|      0|      } else {
 3705|      0|        if (yych <= '/')
 3706|      0|          goto yy94;
 3707|      0|        if (yych <= '9')
 3708|      0|          goto yy178;
 3709|      0|        goto yy94;
 3710|      0|      }
 3711|      0|    } else {
 3712|      0|      if (yych <= 'Z') {
 3713|      0|        if (yych <= '>')
 3714|      0|          goto yy99;
 3715|      0|        if (yych <= '@')
 3716|      0|          goto yy94;
 3717|      0|        goto yy178;
 3718|      0|      } else {
 3719|      0|        if (yych <= '`')
 3720|      0|          goto yy94;
 3721|      0|        if (yych <= 'z')
 3722|      0|          goto yy178;
 3723|      0|        goto yy94;
 3724|      0|      }
 3725|      0|    }
 3726|      0|  yy177:
 3727|      0|    yych = *++p;
 3728|      0|    if (yych <= '9') {
 3729|      0|      if (yych == '-')
 3730|      0|        goto yy179;
 3731|      0|      if (yych <= '/')
 3732|      0|        goto yy94;
 3733|      0|      goto yy180;
 3734|      0|    } else {
 3735|      0|      if (yych <= 'Z') {
 3736|      0|        if (yych <= '@')
 3737|      0|          goto yy94;
 3738|      0|        goto yy180;
 3739|      0|      } else {
 3740|      0|        if (yych <= '`')
 3741|      0|          goto yy94;
 3742|      0|        if (yych <= 'z')
 3743|      0|          goto yy180;
 3744|      0|        goto yy94;
 3745|      0|      }
 3746|      0|    }
 3747|      0|  yy178:
 3748|      0|    yych = *++p;
 3749|      0|    if (yych <= '=') {
 3750|      0|      if (yych <= '.') {
 3751|      0|        if (yych <= ',')
 3752|      0|          goto yy94;
 3753|      0|        if (yych >= '.')
 3754|      0|          goto yy95;
 3755|      0|      } else {
 3756|      0|        if (yych <= '/')
 3757|      0|          goto yy94;
 3758|      0|        if (yych <= '9')
 3759|      0|          goto yy180;
 3760|      0|        goto yy94;
 3761|      0|      }
 3762|      0|    } else {
 3763|      0|      if (yych <= 'Z') {
 3764|      0|        if (yych <= '>')
 3765|      0|          goto yy99;
 3766|      0|        if (yych <= '@')
 3767|      0|          goto yy94;
 3768|      0|        goto yy180;
 3769|      0|      } else {
 3770|      0|        if (yych <= '`')
 3771|      0|          goto yy94;
 3772|      0|        if (yych <= 'z')
 3773|      0|          goto yy180;
 3774|      0|        goto yy94;
 3775|      0|      }
 3776|      0|    }
 3777|      0|  yy179:
 3778|      0|    yych = *++p;
 3779|      0|    if (yych <= '9') {
 3780|      0|      if (yych == '-')
 3781|      0|        goto yy181;
 3782|      0|      if (yych <= '/')
 3783|      0|        goto yy94;
 3784|      0|      goto yy182;
 3785|      0|    } else {
 3786|      0|      if (yych <= 'Z') {
 3787|      0|        if (yych <= '@')
 3788|      0|          goto yy94;
 3789|      0|        goto yy182;
 3790|      0|      } else {
 3791|      0|        if (yych <= '`')
 3792|      0|          goto yy94;
 3793|      0|        if (yych <= 'z')
 3794|      0|          goto yy182;
 3795|      0|        goto yy94;
 3796|      0|      }
 3797|      0|    }
 3798|      0|  yy180:
 3799|      0|    yych = *++p;
 3800|      0|    if (yych <= '=') {
 3801|      0|      if (yych <= '.') {
 3802|      0|        if (yych <= ',')
 3803|      0|          goto yy94;
 3804|      0|        if (yych >= '.')
 3805|      0|          goto yy95;
 3806|      0|      } else {
 3807|      0|        if (yych <= '/')
 3808|      0|          goto yy94;
 3809|      0|        if (yych <= '9')
 3810|      0|          goto yy182;
 3811|      0|        goto yy94;
 3812|      0|      }
 3813|      0|    } else {
 3814|      0|      if (yych <= 'Z') {
 3815|      0|        if (yych <= '>')
 3816|      0|          goto yy99;
 3817|      0|        if (yych <= '@')
 3818|      0|          goto yy94;
 3819|      0|        goto yy182;
 3820|      0|      } else {
 3821|      0|        if (yych <= '`')
 3822|      0|          goto yy94;
 3823|      0|        if (yych <= 'z')
 3824|      0|          goto yy182;
 3825|      0|        goto yy94;
 3826|      0|      }
 3827|      0|    }
 3828|      0|  yy181:
 3829|      0|    yych = *++p;
 3830|      0|    if (yych <= '9') {
 3831|      0|      if (yych == '-')
 3832|      0|        goto yy183;
 3833|      0|      if (yych <= '/')
 3834|      0|        goto yy94;
 3835|      0|      goto yy184;
 3836|      0|    } else {
 3837|      0|      if (yych <= 'Z') {
 3838|      0|        if (yych <= '@')
 3839|      0|          goto yy94;
 3840|      0|        goto yy184;
 3841|      0|      } else {
 3842|      0|        if (yych <= '`')
 3843|      0|          goto yy94;
 3844|      0|        if (yych <= 'z')
 3845|      0|          goto yy184;
 3846|      0|        goto yy94;
 3847|      0|      }
 3848|      0|    }
 3849|      0|  yy182:
 3850|      0|    yych = *++p;
 3851|      0|    if (yych <= '=') {
 3852|      0|      if (yych <= '.') {
 3853|      0|        if (yych <= ',')
 3854|      0|          goto yy94;
 3855|      0|        if (yych >= '.')
 3856|      0|          goto yy95;
 3857|      0|      } else {
 3858|      0|        if (yych <= '/')
 3859|      0|          goto yy94;
 3860|      0|        if (yych <= '9')
 3861|      0|          goto yy184;
 3862|      0|        goto yy94;
 3863|      0|      }
 3864|      0|    } else {
 3865|      0|      if (yych <= 'Z') {
 3866|      0|        if (yych <= '>')
 3867|      0|          goto yy99;
 3868|      0|        if (yych <= '@')
 3869|      0|          goto yy94;
 3870|      0|        goto yy184;
 3871|      0|      } else {
 3872|      0|        if (yych <= '`')
 3873|      0|          goto yy94;
 3874|      0|        if (yych <= 'z')
 3875|      0|          goto yy184;
 3876|      0|        goto yy94;
 3877|      0|      }
 3878|      0|    }
 3879|      0|  yy183:
 3880|      0|    yych = *++p;
 3881|      0|    if (yych <= '9') {
 3882|      0|      if (yych == '-')
 3883|      0|        goto yy185;
 3884|      0|      if (yych <= '/')
 3885|      0|        goto yy94;
 3886|      0|      goto yy186;
 3887|      0|    } else {
 3888|      0|      if (yych <= 'Z') {
 3889|      0|        if (yych <= '@')
 3890|      0|          goto yy94;
 3891|      0|        goto yy186;
 3892|      0|      } else {
 3893|      0|        if (yych <= '`')
 3894|      0|          goto yy94;
 3895|      0|        if (yych <= 'z')
 3896|      0|          goto yy186;
 3897|      0|        goto yy94;
 3898|      0|      }
 3899|      0|    }
 3900|      0|  yy184:
 3901|      0|    yych = *++p;
 3902|      0|    if (yych <= '=') {
 3903|      0|      if (yych <= '.') {
 3904|      0|        if (yych <= ',')
 3905|      0|          goto yy94;
 3906|      0|        if (yych >= '.')
 3907|      0|          goto yy95;
 3908|      0|      } else {
 3909|      0|        if (yych <= '/')
 3910|      0|          goto yy94;
 3911|      0|        if (yych <= '9')
 3912|      0|          goto yy186;
 3913|      0|        goto yy94;
 3914|      0|      }
 3915|      0|    } else {
 3916|      0|      if (yych <= 'Z') {
 3917|      0|        if (yych <= '>')
 3918|      0|          goto yy99;
 3919|      0|        if (yych <= '@')
 3920|      0|          goto yy94;
 3921|      0|        goto yy186;
 3922|      0|      } else {
 3923|      0|        if (yych <= '`')
 3924|      0|          goto yy94;
 3925|      0|        if (yych <= 'z')
 3926|      0|          goto yy186;
 3927|      0|        goto yy94;
 3928|      0|      }
 3929|      0|    }
 3930|      0|  yy185:
 3931|      0|    yych = *++p;
 3932|      0|    if (yych <= '9') {
 3933|      0|      if (yych == '-')
 3934|      0|        goto yy187;
 3935|      0|      if (yych <= '/')
 3936|      0|        goto yy94;
 3937|      0|      goto yy188;
 3938|      0|    } else {
 3939|      0|      if (yych <= 'Z') {
 3940|      0|        if (yych <= '@')
 3941|      0|          goto yy94;
 3942|      0|        goto yy188;
 3943|      0|      } else {
 3944|      0|        if (yych <= '`')
 3945|      0|          goto yy94;
 3946|      0|        if (yych <= 'z')
 3947|      0|          goto yy188;
 3948|      0|        goto yy94;
 3949|      0|      }
 3950|      0|    }
 3951|      0|  yy186:
 3952|      0|    yych = *++p;
 3953|      0|    if (yych <= '=') {
 3954|      0|      if (yych <= '.') {
 3955|      0|        if (yych <= ',')
 3956|      0|          goto yy94;
 3957|      0|        if (yych >= '.')
 3958|      0|          goto yy95;
 3959|      0|      } else {
 3960|      0|        if (yych <= '/')
 3961|      0|          goto yy94;
 3962|      0|        if (yych <= '9')
 3963|      0|          goto yy188;
 3964|      0|        goto yy94;
 3965|      0|      }
 3966|      0|    } else {
 3967|      0|      if (yych <= 'Z') {
 3968|      0|        if (yych <= '>')
 3969|      0|          goto yy99;
 3970|      0|        if (yych <= '@')
 3971|      0|          goto yy94;
 3972|      0|        goto yy188;
 3973|      0|      } else {
 3974|      0|        if (yych <= '`')
 3975|      0|          goto yy94;
 3976|      0|        if (yych <= 'z')
 3977|      0|          goto yy188;
 3978|      0|        goto yy94;
 3979|      0|      }
 3980|      0|    }
 3981|      0|  yy187:
 3982|      0|    yych = *++p;
 3983|      0|    if (yych <= '9') {
 3984|      0|      if (yych == '-')
 3985|      0|        goto yy189;
 3986|      0|      if (yych <= '/')
 3987|      0|        goto yy94;
 3988|      0|      goto yy190;
 3989|      0|    } else {
 3990|      0|      if (yych <= 'Z') {
 3991|      0|        if (yych <= '@')
 3992|      0|          goto yy94;
 3993|      0|        goto yy190;
 3994|      0|      } else {
 3995|      0|        if (yych <= '`')
 3996|      0|          goto yy94;
 3997|      0|        if (yych <= 'z')
 3998|      0|          goto yy190;
 3999|      0|        goto yy94;
 4000|      0|      }
 4001|      0|    }
 4002|      0|  yy188:
 4003|      0|    yych = *++p;
 4004|      0|    if (yych <= '=') {
 4005|      0|      if (yych <= '.') {
 4006|      0|        if (yych <= ',')
 4007|      0|          goto yy94;
 4008|      0|        if (yych >= '.')
 4009|      0|          goto yy95;
 4010|      0|      } else {
 4011|      0|        if (yych <= '/')
 4012|      0|          goto yy94;
 4013|      0|        if (yych <= '9')
 4014|      0|          goto yy190;
 4015|      0|        goto yy94;
 4016|      0|      }
 4017|      0|    } else {
 4018|      0|      if (yych <= 'Z') {
 4019|      0|        if (yych <= '>')
 4020|      0|          goto yy99;
 4021|      0|        if (yych <= '@')
 4022|      0|          goto yy94;
 4023|      0|        goto yy190;
 4024|      0|      } else {
 4025|      0|        if (yych <= '`')
 4026|      0|          goto yy94;
 4027|      0|        if (yych <= 'z')
 4028|      0|          goto yy190;
 4029|      0|        goto yy94;
 4030|      0|      }
 4031|      0|    }
 4032|      0|  yy189:
 4033|      0|    yych = *++p;
 4034|      0|    if (yych <= '9') {
 4035|      0|      if (yych == '-')
 4036|      0|        goto yy191;
 4037|      0|      if (yych <= '/')
 4038|      0|        goto yy94;
 4039|      0|      goto yy192;
 4040|      0|    } else {
 4041|      0|      if (yych <= 'Z') {
 4042|      0|        if (yych <= '@')
 4043|      0|          goto yy94;
 4044|      0|        goto yy192;
 4045|      0|      } else {
 4046|      0|        if (yych <= '`')
 4047|      0|          goto yy94;
 4048|      0|        if (yych <= 'z')
 4049|      0|          goto yy192;
 4050|      0|        goto yy94;
 4051|      0|      }
 4052|      0|    }
 4053|      0|  yy190:
 4054|      0|    yych = *++p;
 4055|      0|    if (yych <= '=') {
 4056|      0|      if (yych <= '.') {
 4057|      0|        if (yych <= ',')
 4058|      0|          goto yy94;
 4059|      0|        if (yych >= '.')
 4060|      0|          goto yy95;
 4061|      0|      } else {
 4062|      0|        if (yych <= '/')
 4063|      0|          goto yy94;
 4064|      0|        if (yych <= '9')
 4065|      0|          goto yy192;
 4066|      0|        goto yy94;
 4067|      0|      }
 4068|      0|    } else {
 4069|      0|      if (yych <= 'Z') {
 4070|      0|        if (yych <= '>')
 4071|      0|          goto yy99;
 4072|      0|        if (yych <= '@')
 4073|      0|          goto yy94;
 4074|      0|        goto yy192;
 4075|      0|      } else {
 4076|      0|        if (yych <= '`')
 4077|      0|          goto yy94;
 4078|      0|        if (yych <= 'z')
 4079|      0|          goto yy192;
 4080|      0|        goto yy94;
 4081|      0|      }
 4082|      0|    }
 4083|      0|  yy191:
 4084|      0|    yych = *++p;
 4085|      0|    if (yych <= '9') {
 4086|      0|      if (yych == '-')
 4087|      0|        goto yy193;
 4088|      0|      if (yych <= '/')
 4089|      0|        goto yy94;
 4090|      0|      goto yy194;
 4091|      0|    } else {
 4092|      0|      if (yych <= 'Z') {
 4093|      0|        if (yych <= '@')
 4094|      0|          goto yy94;
 4095|      0|        goto yy194;
 4096|      0|      } else {
 4097|      0|        if (yych <= '`')
 4098|      0|          goto yy94;
 4099|      0|        if (yych <= 'z')
 4100|      0|          goto yy194;
 4101|      0|        goto yy94;
 4102|      0|      }
 4103|      0|    }
 4104|      0|  yy192:
 4105|      0|    yych = *++p;
 4106|      0|    if (yych <= '=') {
 4107|      0|      if (yych <= '.') {
 4108|      0|        if (yych <= ',')
 4109|      0|          goto yy94;
 4110|      0|        if (yych >= '.')
 4111|      0|          goto yy95;
 4112|      0|      } else {
 4113|      0|        if (yych <= '/')
 4114|      0|          goto yy94;
 4115|      0|        if (yych <= '9')
 4116|      0|          goto yy194;
 4117|      0|        goto yy94;
 4118|      0|      }
 4119|      0|    } else {
 4120|      0|      if (yych <= 'Z') {
 4121|      0|        if (yych <= '>')
 4122|      0|          goto yy99;
 4123|      0|        if (yych <= '@')
 4124|      0|          goto yy94;
 4125|      0|        goto yy194;
 4126|      0|      } else {
 4127|      0|        if (yych <= '`')
 4128|      0|          goto yy94;
 4129|      0|        if (yych <= 'z')
 4130|      0|          goto yy194;
 4131|      0|        goto yy94;
 4132|      0|      }
 4133|      0|    }
 4134|      0|  yy193:
 4135|      0|    yych = *++p;
 4136|      0|    if (yych <= '9') {
 4137|      0|      if (yych == '-')
 4138|      0|        goto yy195;
 4139|      0|      if (yych <= '/')
 4140|      0|        goto yy94;
 4141|      0|      goto yy196;
 4142|      0|    } else {
 4143|      0|      if (yych <= 'Z') {
 4144|      0|        if (yych <= '@')
 4145|      0|          goto yy94;
 4146|      0|        goto yy196;
 4147|      0|      } else {
 4148|      0|        if (yych <= '`')
 4149|      0|          goto yy94;
 4150|      0|        if (yych <= 'z')
 4151|      0|          goto yy196;
 4152|      0|        goto yy94;
 4153|      0|      }
 4154|      0|    }
 4155|      0|  yy194:
 4156|      0|    yych = *++p;
 4157|      0|    if (yych <= '=') {
 4158|      0|      if (yych <= '.') {
 4159|      0|        if (yych <= ',')
 4160|      0|          goto yy94;
 4161|      0|        if (yych >= '.')
 4162|      0|          goto yy95;
 4163|      0|      } else {
 4164|      0|        if (yych <= '/')
 4165|      0|          goto yy94;
 4166|      0|        if (yych <= '9')
 4167|      0|          goto yy196;
 4168|      0|        goto yy94;
 4169|      0|      }
 4170|      0|    } else {
 4171|      0|      if (yych <= 'Z') {
 4172|      0|        if (yych <= '>')
 4173|      0|          goto yy99;
 4174|      0|        if (yych <= '@')
 4175|      0|          goto yy94;
 4176|      0|        goto yy196;
 4177|      0|      } else {
 4178|      0|        if (yych <= '`')
 4179|      0|          goto yy94;
 4180|      0|        if (yych <= 'z')
 4181|      0|          goto yy196;
 4182|      0|        goto yy94;
 4183|      0|      }
 4184|      0|    }
 4185|      0|  yy195:
 4186|      0|    yych = *++p;
 4187|      0|    if (yych <= '9') {
 4188|      0|      if (yych == '-')
 4189|      0|        goto yy197;
 4190|      0|      if (yych <= '/')
 4191|      0|        goto yy94;
 4192|      0|      goto yy198;
 4193|      0|    } else {
 4194|      0|      if (yych <= 'Z') {
 4195|      0|        if (yych <= '@')
 4196|      0|          goto yy94;
 4197|      0|        goto yy198;
 4198|      0|      } else {
 4199|      0|        if (yych <= '`')
 4200|      0|          goto yy94;
 4201|      0|        if (yych <= 'z')
 4202|      0|          goto yy198;
 4203|      0|        goto yy94;
 4204|      0|      }
 4205|      0|    }
 4206|      0|  yy196:
 4207|      0|    yych = *++p;
 4208|      0|    if (yych <= '=') {
 4209|      0|      if (yych <= '.') {
 4210|      0|        if (yych <= ',')
 4211|      0|          goto yy94;
 4212|      0|        if (yych >= '.')
 4213|      0|          goto yy95;
 4214|      0|      } else {
 4215|      0|        if (yych <= '/')
 4216|      0|          goto yy94;
 4217|      0|        if (yych <= '9')
 4218|      0|          goto yy198;
 4219|      0|        goto yy94;
 4220|      0|      }
 4221|      0|    } else {
 4222|      0|      if (yych <= 'Z') {
 4223|      0|        if (yych <= '>')
 4224|      0|          goto yy99;
 4225|      0|        if (yych <= '@')
 4226|      0|          goto yy94;
 4227|      0|        goto yy198;
 4228|      0|      } else {
 4229|      0|        if (yych <= '`')
 4230|      0|          goto yy94;
 4231|      0|        if (yych <= 'z')
 4232|      0|          goto yy198;
 4233|      0|        goto yy94;
 4234|      0|      }
 4235|      0|    }
 4236|      0|  yy197:
 4237|      0|    yych = *++p;
 4238|      0|    if (yych <= '9') {
 4239|      0|      if (yych == '-')
 4240|      0|        goto yy199;
 4241|      0|      if (yych <= '/')
 4242|      0|        goto yy94;
 4243|      0|      goto yy200;
 4244|      0|    } else {
 4245|      0|      if (yych <= 'Z') {
 4246|      0|        if (yych <= '@')
 4247|      0|          goto yy94;
 4248|      0|        goto yy200;
 4249|      0|      } else {
 4250|      0|        if (yych <= '`')
 4251|      0|          goto yy94;
 4252|      0|        if (yych <= 'z')
 4253|      0|          goto yy200;
 4254|      0|        goto yy94;
 4255|      0|      }
 4256|      0|    }
 4257|      0|  yy198:
 4258|      0|    yych = *++p;
 4259|      0|    if (yych <= '=') {
 4260|      0|      if (yych <= '.') {
 4261|      0|        if (yych <= ',')
 4262|      0|          goto yy94;
 4263|      0|        if (yych >= '.')
 4264|      0|          goto yy95;
 4265|      0|      } else {
 4266|      0|        if (yych <= '/')
 4267|      0|          goto yy94;
 4268|      0|        if (yych <= '9')
 4269|      0|          goto yy200;
 4270|      0|        goto yy94;
 4271|      0|      }
 4272|      0|    } else {
 4273|      0|      if (yych <= 'Z') {
 4274|      0|        if (yych <= '>')
 4275|      0|          goto yy99;
 4276|      0|        if (yych <= '@')
 4277|      0|          goto yy94;
 4278|      0|        goto yy200;
 4279|      0|      } else {
 4280|      0|        if (yych <= '`')
 4281|      0|          goto yy94;
 4282|      0|        if (yych <= 'z')
 4283|      0|          goto yy200;
 4284|      0|        goto yy94;
 4285|      0|      }
 4286|      0|    }
 4287|      0|  yy199:
 4288|      0|    yych = *++p;
 4289|      0|    if (yych <= '9') {
 4290|      0|      if (yych == '-')
 4291|      0|        goto yy201;
 4292|      0|      if (yych <= '/')
 4293|      0|        goto yy94;
 4294|      0|      goto yy202;
 4295|      0|    } else {
 4296|      0|      if (yych <= 'Z') {
 4297|      0|        if (yych <= '@')
 4298|      0|          goto yy94;
 4299|      0|        goto yy202;
 4300|      0|      } else {
 4301|      0|        if (yych <= '`')
 4302|      0|          goto yy94;
 4303|      0|        if (yych <= 'z')
 4304|      0|          goto yy202;
 4305|      0|        goto yy94;
 4306|      0|      }
 4307|      0|    }
 4308|      0|  yy200:
 4309|      0|    yych = *++p;
 4310|      0|    if (yych <= '=') {
 4311|      0|      if (yych <= '.') {
 4312|      0|        if (yych <= ',')
 4313|      0|          goto yy94;
 4314|      0|        if (yych >= '.')
 4315|      0|          goto yy95;
 4316|      0|      } else {
 4317|      0|        if (yych <= '/')
 4318|      0|          goto yy94;
 4319|      0|        if (yych <= '9')
 4320|      0|          goto yy202;
 4321|      0|        goto yy94;
 4322|      0|      }
 4323|      0|    } else {
 4324|      0|      if (yych <= 'Z') {
 4325|      0|        if (yych <= '>')
 4326|      0|          goto yy99;
 4327|      0|        if (yych <= '@')
 4328|      0|          goto yy94;
 4329|      0|        goto yy202;
 4330|      0|      } else {
 4331|      0|        if (yych <= '`')
 4332|      0|          goto yy94;
 4333|      0|        if (yych <= 'z')
 4334|      0|          goto yy202;
 4335|      0|        goto yy94;
 4336|      0|      }
 4337|      0|    }
 4338|      0|  yy201:
 4339|      0|    yych = *++p;
 4340|      0|    if (yych <= '9') {
 4341|      0|      if (yych == '-')
 4342|      0|        goto yy203;
 4343|      0|      if (yych <= '/')
 4344|      0|        goto yy94;
 4345|      0|      goto yy204;
 4346|      0|    } else {
 4347|      0|      if (yych <= 'Z') {
 4348|      0|        if (yych <= '@')
 4349|      0|          goto yy94;
 4350|      0|        goto yy204;
 4351|      0|      } else {
 4352|      0|        if (yych <= '`')
 4353|      0|          goto yy94;
 4354|      0|        if (yych <= 'z')
 4355|      0|          goto yy204;
 4356|      0|        goto yy94;
 4357|      0|      }
 4358|      0|    }
 4359|      0|  yy202:
 4360|      0|    yych = *++p;
 4361|      0|    if (yych <= '=') {
 4362|      0|      if (yych <= '.') {
 4363|      0|        if (yych <= ',')
 4364|      0|          goto yy94;
 4365|      0|        if (yych >= '.')
 4366|      0|          goto yy95;
 4367|      0|      } else {
 4368|      0|        if (yych <= '/')
 4369|      0|          goto yy94;
 4370|      0|        if (yych <= '9')
 4371|      0|          goto yy204;
 4372|      0|        goto yy94;
 4373|      0|      }
 4374|      0|    } else {
 4375|      0|      if (yych <= 'Z') {
 4376|      0|        if (yych <= '>')
 4377|      0|          goto yy99;
 4378|      0|        if (yych <= '@')
 4379|      0|          goto yy94;
 4380|      0|        goto yy204;
 4381|      0|      } else {
 4382|      0|        if (yych <= '`')
 4383|      0|          goto yy94;
 4384|      0|        if (yych <= 'z')
 4385|      0|          goto yy204;
 4386|      0|        goto yy94;
 4387|      0|      }
 4388|      0|    }
 4389|      0|  yy203:
 4390|      0|    yych = *++p;
 4391|      0|    if (yych <= '9') {
 4392|      0|      if (yych == '-')
 4393|      0|        goto yy205;
 4394|      0|      if (yych <= '/')
 4395|      0|        goto yy94;
 4396|      0|      goto yy206;
 4397|      0|    } else {
 4398|      0|      if (yych <= 'Z') {
 4399|      0|        if (yych <= '@')
 4400|      0|          goto yy94;
 4401|      0|        goto yy206;
 4402|      0|      } else {
 4403|      0|        if (yych <= '`')
 4404|      0|          goto yy94;
 4405|      0|        if (yych <= 'z')
 4406|      0|          goto yy206;
 4407|      0|        goto yy94;
 4408|      0|      }
 4409|      0|    }
 4410|      0|  yy204:
 4411|      0|    yych = *++p;
 4412|      0|    if (yych <= '=') {
 4413|      0|      if (yych <= '.') {
 4414|      0|        if (yych <= ',')
 4415|      0|          goto yy94;
 4416|      0|        if (yych >= '.')
 4417|      0|          goto yy95;
 4418|      0|      } else {
 4419|      0|        if (yych <= '/')
 4420|      0|          goto yy94;
 4421|      0|        if (yych <= '9')
 4422|      0|          goto yy206;
 4423|      0|        goto yy94;
 4424|      0|      }
 4425|      0|    } else {
 4426|      0|      if (yych <= 'Z') {
 4427|      0|        if (yych <= '>')
 4428|      0|          goto yy99;
 4429|      0|        if (yych <= '@')
 4430|      0|          goto yy94;
 4431|      0|        goto yy206;
 4432|      0|      } else {
 4433|      0|        if (yych <= '`')
 4434|      0|          goto yy94;
 4435|      0|        if (yych <= 'z')
 4436|      0|          goto yy206;
 4437|      0|        goto yy94;
 4438|      0|      }
 4439|      0|    }
 4440|      0|  yy205:
 4441|      0|    yych = *++p;
 4442|      0|    if (yych <= '9') {
 4443|      0|      if (yych == '-')
 4444|      0|        goto yy207;
 4445|      0|      if (yych <= '/')
 4446|      0|        goto yy94;
 4447|      0|      goto yy208;
 4448|      0|    } else {
 4449|      0|      if (yych <= 'Z') {
 4450|      0|        if (yych <= '@')
 4451|      0|          goto yy94;
 4452|      0|        goto yy208;
 4453|      0|      } else {
 4454|      0|        if (yych <= '`')
 4455|      0|          goto yy94;
 4456|      0|        if (yych <= 'z')
 4457|      0|          goto yy208;
 4458|      0|        goto yy94;
 4459|      0|      }
 4460|      0|    }
 4461|      0|  yy206:
 4462|      0|    yych = *++p;
 4463|      0|    if (yych <= '=') {
 4464|      0|      if (yych <= '.') {
 4465|      0|        if (yych <= ',')
 4466|      0|          goto yy94;
 4467|      0|        if (yych >= '.')
 4468|      0|          goto yy95;
 4469|      0|      } else {
 4470|      0|        if (yych <= '/')
 4471|      0|          goto yy94;
 4472|      0|        if (yych <= '9')
 4473|      0|          goto yy208;
 4474|      0|        goto yy94;
 4475|      0|      }
 4476|      0|    } else {
 4477|      0|      if (yych <= 'Z') {
 4478|      0|        if (yych <= '>')
 4479|      0|          goto yy99;
 4480|      0|        if (yych <= '@')
 4481|      0|          goto yy94;
 4482|      0|        goto yy208;
 4483|      0|      } else {
 4484|      0|        if (yych <= '`')
 4485|      0|          goto yy94;
 4486|      0|        if (yych <= 'z')
 4487|      0|          goto yy208;
 4488|      0|        goto yy94;
 4489|      0|      }
 4490|      0|    }
 4491|      0|  yy207:
 4492|      0|    yych = *++p;
 4493|      0|    if (yych <= '9') {
 4494|      0|      if (yych == '-')
 4495|      0|        goto yy209;
 4496|      0|      if (yych <= '/')
 4497|      0|        goto yy94;
 4498|      0|      goto yy210;
 4499|      0|    } else {
 4500|      0|      if (yych <= 'Z') {
 4501|      0|        if (yych <= '@')
 4502|      0|          goto yy94;
 4503|      0|        goto yy210;
 4504|      0|      } else {
 4505|      0|        if (yych <= '`')
 4506|      0|          goto yy94;
 4507|      0|        if (yych <= 'z')
 4508|      0|          goto yy210;
 4509|      0|        goto yy94;
 4510|      0|      }
 4511|      0|    }
 4512|      0|  yy208:
 4513|      0|    yych = *++p;
 4514|      0|    if (yych <= '=') {
 4515|      0|      if (yych <= '.') {
 4516|      0|        if (yych <= ',')
 4517|      0|          goto yy94;
 4518|      0|        if (yych >= '.')
 4519|      0|          goto yy95;
 4520|      0|      } else {
 4521|      0|        if (yych <= '/')
 4522|      0|          goto yy94;
 4523|      0|        if (yych <= '9')
 4524|      0|          goto yy210;
 4525|      0|        goto yy94;
 4526|      0|      }
 4527|      0|    } else {
 4528|      0|      if (yych <= 'Z') {
 4529|      0|        if (yych <= '>')
 4530|      0|          goto yy99;
 4531|      0|        if (yych <= '@')
 4532|      0|          goto yy94;
 4533|      0|        goto yy210;
 4534|      0|      } else {
 4535|      0|        if (yych <= '`')
 4536|      0|          goto yy94;
 4537|      0|        if (yych <= 'z')
 4538|      0|          goto yy210;
 4539|      0|        goto yy94;
 4540|      0|      }
 4541|      0|    }
 4542|      0|  yy209:
 4543|      0|    yych = *++p;
 4544|      0|    if (yych <= '9') {
 4545|      0|      if (yych == '-')
 4546|      0|        goto yy211;
 4547|      0|      if (yych <= '/')
 4548|      0|        goto yy94;
 4549|      0|      goto yy212;
 4550|      0|    } else {
 4551|      0|      if (yych <= 'Z') {
 4552|      0|        if (yych <= '@')
 4553|      0|          goto yy94;
 4554|      0|        goto yy212;
 4555|      0|      } else {
 4556|      0|        if (yych <= '`')
 4557|      0|          goto yy94;
 4558|      0|        if (yych <= 'z')
 4559|      0|          goto yy212;
 4560|      0|        goto yy94;
 4561|      0|      }
 4562|      0|    }
 4563|      0|  yy210:
 4564|      0|    yych = *++p;
 4565|      0|    if (yych <= '=') {
 4566|      0|      if (yych <= '.') {
 4567|      0|        if (yych <= ',')
 4568|      0|          goto yy94;
 4569|      0|        if (yych >= '.')
 4570|      0|          goto yy95;
 4571|      0|      } else {
 4572|      0|        if (yych <= '/')
 4573|      0|          goto yy94;
 4574|      0|        if (yych <= '9')
 4575|      0|          goto yy212;
 4576|      0|        goto yy94;
 4577|      0|      }
 4578|      0|    } else {
 4579|      0|      if (yych <= 'Z') {
 4580|      0|        if (yych <= '>')
 4581|      0|          goto yy99;
 4582|      0|        if (yych <= '@')
 4583|      0|          goto yy94;
 4584|      0|        goto yy212;
 4585|      0|      } else {
 4586|      0|        if (yych <= '`')
 4587|      0|          goto yy94;
 4588|      0|        if (yych <= 'z')
 4589|      0|          goto yy212;
 4590|      0|        goto yy94;
 4591|      0|      }
 4592|      0|    }
 4593|      0|  yy211:
 4594|      0|    yych = *++p;
 4595|      0|    if (yych <= '9') {
 4596|      0|      if (yych == '-')
 4597|      0|        goto yy213;
 4598|      0|      if (yych <= '/')
 4599|      0|        goto yy94;
 4600|      0|      goto yy214;
 4601|      0|    } else {
 4602|      0|      if (yych <= 'Z') {
 4603|      0|        if (yych <= '@')
 4604|      0|          goto yy94;
 4605|      0|        goto yy214;
 4606|      0|      } else {
 4607|      0|        if (yych <= '`')
 4608|      0|          goto yy94;
 4609|      0|        if (yych <= 'z')
 4610|      0|          goto yy214;
 4611|      0|        goto yy94;
 4612|      0|      }
 4613|      0|    }
 4614|      0|  yy212:
 4615|      0|    yych = *++p;
 4616|      0|    if (yych <= '=') {
 4617|      0|      if (yych <= '.') {
 4618|      0|        if (yych <= ',')
 4619|      0|          goto yy94;
 4620|      0|        if (yych >= '.')
 4621|      0|          goto yy95;
 4622|      0|      } else {
 4623|      0|        if (yych <= '/')
 4624|      0|          goto yy94;
 4625|      0|        if (yych <= '9')
 4626|      0|          goto yy214;
 4627|      0|        goto yy94;
 4628|      0|      }
 4629|      0|    } else {
 4630|      0|      if (yych <= 'Z') {
 4631|      0|        if (yych <= '>')
 4632|      0|          goto yy99;
 4633|      0|        if (yych <= '@')
 4634|      0|          goto yy94;
 4635|      0|        goto yy214;
 4636|      0|      } else {
 4637|      0|        if (yych <= '`')
 4638|      0|          goto yy94;
 4639|      0|        if (yych <= 'z')
 4640|      0|          goto yy214;
 4641|      0|        goto yy94;
 4642|      0|      }
 4643|      0|    }
 4644|      0|  yy213:
 4645|      0|    yych = *++p;
 4646|      0|    if (yych <= '9') {
 4647|      0|      if (yych == '-')
 4648|      0|        goto yy215;
 4649|      0|      if (yych <= '/')
 4650|      0|        goto yy94;
 4651|      0|      goto yy216;
 4652|      0|    } else {
 4653|      0|      if (yych <= 'Z') {
 4654|      0|        if (yych <= '@')
 4655|      0|          goto yy94;
 4656|      0|        goto yy216;
 4657|      0|      } else {
 4658|      0|        if (yych <= '`')
 4659|      0|          goto yy94;
 4660|      0|        if (yych <= 'z')
 4661|      0|          goto yy216;
 4662|      0|        goto yy94;
 4663|      0|      }
 4664|      0|    }
 4665|      0|  yy214:
 4666|      0|    yych = *++p;
 4667|      0|    if (yych <= '=') {
 4668|      0|      if (yych <= '.') {
 4669|      0|        if (yych <= ',')
 4670|      0|          goto yy94;
 4671|      0|        if (yych >= '.')
 4672|      0|          goto yy95;
 4673|      0|      } else {
 4674|      0|        if (yych <= '/')
 4675|      0|          goto yy94;
 4676|      0|        if (yych <= '9')
 4677|      0|          goto yy216;
 4678|      0|        goto yy94;
 4679|      0|      }
 4680|      0|    } else {
 4681|      0|      if (yych <= 'Z') {
 4682|      0|        if (yych <= '>')
 4683|      0|          goto yy99;
 4684|      0|        if (yych <= '@')
 4685|      0|          goto yy94;
 4686|      0|        goto yy216;
 4687|      0|      } else {
 4688|      0|        if (yych <= '`')
 4689|      0|          goto yy94;
 4690|      0|        if (yych <= 'z')
 4691|      0|          goto yy216;
 4692|      0|        goto yy94;
 4693|      0|      }
 4694|      0|    }
 4695|      0|  yy215:
 4696|      0|    yych = *++p;
 4697|      0|    if (yych <= '9') {
 4698|      0|      if (yych == '-')
 4699|      0|        goto yy217;
 4700|      0|      if (yych <= '/')
 4701|      0|        goto yy94;
 4702|      0|      goto yy218;
 4703|      0|    } else {
 4704|      0|      if (yych <= 'Z') {
 4705|      0|        if (yych <= '@')
 4706|      0|          goto yy94;
 4707|      0|        goto yy218;
 4708|      0|      } else {
 4709|      0|        if (yych <= '`')
 4710|      0|          goto yy94;
 4711|      0|        if (yych <= 'z')
 4712|      0|          goto yy218;
 4713|      0|        goto yy94;
 4714|      0|      }
 4715|      0|    }
 4716|      0|  yy216:
 4717|      0|    yych = *++p;
 4718|      0|    if (yych <= '=') {
 4719|      0|      if (yych <= '.') {
 4720|      0|        if (yych <= ',')
 4721|      0|          goto yy94;
 4722|      0|        if (yych >= '.')
 4723|      0|          goto yy95;
 4724|      0|      } else {
 4725|      0|        if (yych <= '/')
 4726|      0|          goto yy94;
 4727|      0|        if (yych <= '9')
 4728|      0|          goto yy218;
 4729|      0|        goto yy94;
 4730|      0|      }
 4731|      0|    } else {
 4732|      0|      if (yych <= 'Z') {
 4733|      0|        if (yych <= '>')
 4734|      0|          goto yy99;
 4735|      0|        if (yych <= '@')
 4736|      0|          goto yy94;
 4737|      0|        goto yy218;
 4738|      0|      } else {
 4739|      0|        if (yych <= '`')
 4740|      0|          goto yy94;
 4741|      0|        if (yych <= 'z')
 4742|      0|          goto yy218;
 4743|      0|        goto yy94;
 4744|      0|      }
 4745|      0|    }
 4746|      0|  yy217:
 4747|      0|    yych = *++p;
 4748|      0|    if (yych <= '9') {
 4749|      0|      if (yych == '-')
 4750|      0|        goto yy219;
 4751|      0|      if (yych <= '/')
 4752|      0|        goto yy94;
 4753|      0|      goto yy220;
 4754|      0|    } else {
 4755|      0|      if (yych <= 'Z') {
 4756|      0|        if (yych <= '@')
 4757|      0|          goto yy94;
 4758|      0|        goto yy220;
 4759|      0|      } else {
 4760|      0|        if (yych <= '`')
 4761|      0|          goto yy94;
 4762|      0|        if (yych <= 'z')
 4763|      0|          goto yy220;
 4764|      0|        goto yy94;
 4765|      0|      }
 4766|      0|    }
 4767|      0|  yy218:
 4768|      0|    yych = *++p;
 4769|      0|    if (yych <= '=') {
 4770|      0|      if (yych <= '.') {
 4771|      0|        if (yych <= ',')
 4772|      0|          goto yy94;
 4773|      0|        if (yych >= '.')
 4774|      0|          goto yy95;
 4775|      0|      } else {
 4776|      0|        if (yych <= '/')
 4777|      0|          goto yy94;
 4778|      0|        if (yych <= '9')
 4779|      0|          goto yy220;
 4780|      0|        goto yy94;
 4781|      0|      }
 4782|      0|    } else {
 4783|      0|      if (yych <= 'Z') {
 4784|      0|        if (yych <= '>')
 4785|      0|          goto yy99;
 4786|      0|        if (yych <= '@')
 4787|      0|          goto yy94;
 4788|      0|        goto yy220;
 4789|      0|      } else {
 4790|      0|        if (yych <= '`')
 4791|      0|          goto yy94;
 4792|      0|        if (yych <= 'z')
 4793|      0|          goto yy220;
 4794|      0|        goto yy94;
 4795|      0|      }
 4796|      0|    }
 4797|      0|  yy219:
 4798|      0|    yych = *++p;
 4799|      0|    if (yych <= '@') {
 4800|      0|      if (yych <= '/')
 4801|      0|        goto yy94;
 4802|      0|      if (yych <= '9')
 4803|      0|        goto yy221;
 4804|      0|      goto yy94;
 4805|      0|    } else {
 4806|      0|      if (yych <= 'Z')
 4807|      0|        goto yy221;
 4808|      0|      if (yych <= '`')
 4809|      0|        goto yy94;
 4810|      0|      if (yych <= 'z')
 4811|      0|        goto yy221;
 4812|      0|      goto yy94;
 4813|      0|    }
 4814|      0|  yy220:
 4815|      0|    yych = *++p;
 4816|      0|    if (yych <= '=') {
 4817|      0|      if (yych <= '.') {
 4818|      0|        if (yych <= '-')
 4819|      0|          goto yy94;
 4820|      0|        goto yy95;
 4821|      0|      } else {
 4822|      0|        if (yych <= '/')
 4823|      0|          goto yy94;
 4824|      0|        if (yych >= ':')
 4825|      0|          goto yy94;
 4826|      0|      }
 4827|      0|    } else {
 4828|      0|      if (yych <= 'Z') {
 4829|      0|        if (yych <= '>')
 4830|      0|          goto yy99;
 4831|      0|        if (yych <= '@')
 4832|      0|          goto yy94;
 4833|      0|      } else {
 4834|      0|        if (yych <= '`')
 4835|      0|          goto yy94;
 4836|      0|        if (yych >= '{')
 4837|      0|          goto yy94;
 4838|      0|      }
 4839|      0|    }
 4840|      0|  yy221:
 4841|      0|    yych = *++p;
 4842|      0|    if (yych == '.')
 4843|      0|      goto yy95;
 4844|      0|    if (yych == '>')
 4845|      0|      goto yy99;
 4846|      0|    goto yy94;
 4847|      0|  }
 4848|      0|}
 4849|       |
 4850|       |// Try to match an HTML tag after first <, returning num of chars matched.
 4851|      0|bufsize_t _scan_html_tag(const unsigned char *p) {
 4852|      0|  const unsigned char *marker = NULL;
 4853|      0|  const unsigned char *start = p;
 4854|       |
 4855|      0|  {
 4856|      0|    unsigned char yych;
 4857|      0|    static const unsigned char yybm[] = {
 4858|      0|        0,   224, 224, 224, 224, 224, 224, 224, 224, 200, 200, 200, 200, 200,
 4859|      0|        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
 4860|      0|        224, 224, 224, 224, 200, 224, 128, 224, 224, 224, 224, 64,  224, 224,
 4861|      0|        224, 224, 224, 244, 240, 224, 244, 244, 244, 244, 244, 244, 244, 244,
 4862|      0|        244, 244, 240, 224, 192, 192, 192, 224, 224, 244, 244, 244, 244, 244,
 4863|      0|        244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
 4864|      0|        244, 244, 244, 244, 244, 244, 244, 224, 224, 224, 224, 240, 192, 244,
 4865|      0|        244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
 4866|      0|        244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 224, 224, 224,
 4867|      0|        224, 224, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 4868|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 4869|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 4870|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 4871|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 4872|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 4873|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 4874|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 4875|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 4876|      0|        0,   0,   0,   0,
 4877|      0|    };
 4878|      0|    yych = *p;
 4879|      0|    if (yych <= '@') {
 4880|      0|      if (yych == '/')
 4881|      0|        goto yy226;
 4882|      0|    } else {
 4883|      0|      if (yych <= 'Z')
 4884|      0|        goto yy227;
 4885|      0|      if (yych <= '`')
 4886|      0|        goto yy224;
 4887|      0|      if (yych <= 'z')
 4888|      0|        goto yy227;
 4889|      0|    }
 4890|      0|  yy224:
 4891|      0|    ++p;
 4892|      0|  yy225 : { return 0; }
 4893|      0|  yy226:
 4894|      0|    yych = *(marker = ++p);
 4895|      0|    if (yych <= '@')
 4896|      0|      goto yy225;
 4897|      0|    if (yych <= 'Z')
 4898|      0|      goto yy228;
 4899|      0|    if (yych <= '`')
 4900|      0|      goto yy225;
 4901|      0|    if (yych <= 'z')
 4902|      0|      goto yy228;
 4903|      0|    goto yy225;
 4904|      0|  yy227:
 4905|      0|    yych = *(marker = ++p);
 4906|      0|    if (yych <= '.') {
 4907|      0|      if (yych <= 0x1F) {
 4908|      0|        if (yych <= 0x08)
 4909|      0|          goto yy225;
 4910|      0|        if (yych <= '\r')
 4911|      0|          goto yy234;
 4912|      0|        goto yy225;
 4913|      0|      } else {
 4914|      0|        if (yych <= ' ')
 4915|      0|          goto yy234;
 4916|      0|        if (yych == '-')
 4917|      0|          goto yy234;
 4918|      0|        goto yy225;
 4919|      0|      }
 4920|      0|    } else {
 4921|      0|      if (yych <= '@') {
 4922|      0|        if (yych <= '9')
 4923|      0|          goto yy234;
 4924|      0|        if (yych == '>')
 4925|      0|          goto yy234;
 4926|      0|        goto yy225;
 4927|      0|      } else {
 4928|      0|        if (yych <= 'Z')
 4929|      0|          goto yy234;
 4930|      0|        if (yych <= '`')
 4931|      0|          goto yy225;
 4932|      0|        if (yych <= 'z')
 4933|      0|          goto yy234;
 4934|      0|        goto yy225;
 4935|      0|      }
 4936|      0|    }
 4937|      0|  yy228:
 4938|      0|    yych = *++p;
 4939|      0|    if (yybm[0 + yych] & 4) {
 4940|      0|      goto yy228;
 4941|      0|    }
 4942|      0|    if (yych <= 0x1F) {
 4943|      0|      if (yych <= 0x08)
 4944|      0|        goto yy230;
 4945|      0|      if (yych <= '\r')
 4946|      0|        goto yy238;
 4947|      0|    } else {
 4948|      0|      if (yych <= ' ')
 4949|      0|        goto yy238;
 4950|      0|      if (yych == '>')
 4951|      0|        goto yy236;
 4952|      0|    }
 4953|      0|  yy230:
 4954|      0|    p = marker;
 4955|      0|    goto yy225;
 4956|      0|  yy231:
 4957|      0|    yych = *++p;
 4958|      0|    if (yybm[0 + yych] & 8) {
 4959|      0|      goto yy231;
 4960|      0|    }
 4961|      0|    if (yych <= '>') {
 4962|      0|      if (yych <= '9') {
 4963|      0|        if (yych == '/')
 4964|      0|          goto yy235;
 4965|      0|        goto yy230;
 4966|      0|      } else {
 4967|      0|        if (yych <= ':')
 4968|      0|          goto yy240;
 4969|      0|        if (yych <= '=')
 4970|      0|          goto yy230;
 4971|      0|        goto yy236;
 4972|      0|      }
 4973|      0|    } else {
 4974|      0|      if (yych <= '^') {
 4975|      0|        if (yych <= '@')
 4976|      0|          goto yy230;
 4977|      0|        if (yych <= 'Z')
 4978|      0|          goto yy240;
 4979|      0|        goto yy230;
 4980|      0|      } else {
 4981|      0|        if (yych == '`')
 4982|      0|          goto yy230;
 4983|      0|        if (yych <= 'z')
 4984|      0|          goto yy240;
 4985|      0|        goto yy230;
 4986|      0|      }
 4987|      0|    }
 4988|      0|  yy233:
 4989|      0|    yych = *++p;
 4990|      0|  yy234:
 4991|      0|    if (yybm[0 + yych] & 8) {
 4992|      0|      goto yy231;
 4993|      0|    }
 4994|      0|    if (yych <= '=') {
 4995|      0|      if (yych <= '.') {
 4996|      0|        if (yych == '-')
 4997|      0|          goto yy233;
 4998|      0|        goto yy230;
 4999|      0|      } else {
 5000|      0|        if (yych <= '/')
 5001|      0|          goto yy235;
 5002|      0|        if (yych <= '9')
 5003|      0|          goto yy233;
 5004|      0|        goto yy230;
 5005|      0|      }
 5006|      0|    } else {
 5007|      0|      if (yych <= 'Z') {
 5008|      0|        if (yych <= '>')
 5009|      0|          goto yy236;
 5010|      0|        if (yych <= '@')
 5011|      0|          goto yy230;
 5012|      0|        goto yy233;
 5013|      0|      } else {
 5014|      0|        if (yych <= '`')
 5015|      0|          goto yy230;
 5016|      0|        if (yych <= 'z')
 5017|      0|          goto yy233;
 5018|      0|        goto yy230;
 5019|      0|      }
 5020|      0|    }
 5021|      0|  yy235:
 5022|      0|    yych = *++p;
 5023|      0|    if (yych != '>')
 5024|      0|      goto yy230;
 5025|      0|  yy236:
 5026|      0|    ++p;
 5027|      0|    { return (bufsize_t)(p - start); }
 5028|      0|  yy238:
 5029|      0|    yych = *++p;
 5030|      0|    if (yych <= 0x1F) {
 5031|      0|      if (yych <= 0x08)
 5032|      0|        goto yy230;
 5033|      0|      if (yych <= '\r')
 5034|      0|        goto yy238;
 5035|      0|      goto yy230;
 5036|      0|    } else {
 5037|      0|      if (yych <= ' ')
 5038|      0|        goto yy238;
 5039|      0|      if (yych == '>')
 5040|      0|        goto yy236;
 5041|      0|      goto yy230;
 5042|      0|    }
 5043|      0|  yy240:
 5044|      0|    yych = *++p;
 5045|      0|    if (yybm[0 + yych] & 16) {
 5046|      0|      goto yy240;
 5047|      0|    }
 5048|      0|    if (yych <= ',') {
 5049|      0|      if (yych <= '\r') {
 5050|      0|        if (yych <= 0x08)
 5051|      0|          goto yy230;
 5052|      0|      } else {
 5053|      0|        if (yych != ' ')
 5054|      0|          goto yy230;
 5055|      0|      }
 5056|      0|    } else {
 5057|      0|      if (yych <= '<') {
 5058|      0|        if (yych <= '/')
 5059|      0|          goto yy235;
 5060|      0|        goto yy230;
 5061|      0|      } else {
 5062|      0|        if (yych <= '=')
 5063|      0|          goto yy244;
 5064|      0|        if (yych <= '>')
 5065|      0|          goto yy236;
 5066|      0|        goto yy230;
 5067|      0|      }
 5068|      0|    }
 5069|      0|  yy242:
 5070|      0|    yych = *++p;
 5071|      0|    if (yych <= '<') {
 5072|      0|      if (yych <= ' ') {
 5073|      0|        if (yych <= 0x08)
 5074|      0|          goto yy230;
 5075|      0|        if (yych <= '\r')
 5076|      0|          goto yy242;
 5077|      0|        if (yych <= 0x1F)
 5078|      0|          goto yy230;
 5079|      0|        goto yy242;
 5080|      0|      } else {
 5081|      0|        if (yych <= '/') {
 5082|      0|          if (yych <= '.')
 5083|      0|            goto yy230;
 5084|      0|          goto yy235;
 5085|      0|        } else {
 5086|      0|          if (yych == ':')
 5087|      0|            goto yy240;
 5088|      0|          goto yy230;
 5089|      0|        }
 5090|      0|      }
 5091|      0|    } else {
 5092|      0|      if (yych <= 'Z') {
 5093|      0|        if (yych <= '=')
 5094|      0|          goto yy244;
 5095|      0|        if (yych <= '>')
 5096|      0|          goto yy236;
 5097|      0|        if (yych <= '@')
 5098|      0|          goto yy230;
 5099|      0|        goto yy240;
 5100|      0|      } else {
 5101|      0|        if (yych <= '_') {
 5102|      0|          if (yych <= '^')
 5103|      0|            goto yy230;
 5104|      0|          goto yy240;
 5105|      0|        } else {
 5106|      0|          if (yych <= '`')
 5107|      0|            goto yy230;
 5108|      0|          if (yych <= 'z')
 5109|      0|            goto yy240;
 5110|      0|          goto yy230;
 5111|      0|        }
 5112|      0|      }
 5113|      0|    }
 5114|      0|  yy244:
 5115|      0|    yych = *++p;
 5116|      0|    if (yybm[0 + yych] & 32) {
 5117|      0|      goto yy246;
 5118|      0|    }
 5119|      0|    if (yych <= 0xE0) {
 5120|      0|      if (yych <= '"') {
 5121|      0|        if (yych <= 0x00)
 5122|      0|          goto yy230;
 5123|      0|        if (yych <= ' ')
 5124|      0|          goto yy244;
 5125|      0|        goto yy248;
 5126|      0|      } else {
 5127|      0|        if (yych <= '\'')
 5128|      0|          goto yy250;
 5129|      0|        if (yych <= 0xC1)
 5130|      0|          goto yy230;
 5131|      0|        if (yych <= 0xDF)
 5132|      0|          goto yy252;
 5133|      0|        goto yy253;
 5134|      0|      }
 5135|      0|    } else {
 5136|      0|      if (yych <= 0xEF) {
 5137|      0|        if (yych == 0xED)
 5138|      0|          goto yy255;
 5139|      0|        goto yy254;
 5140|      0|      } else {
 5141|      0|        if (yych <= 0xF0)
 5142|      0|          goto yy256;
 5143|      0|        if (yych <= 0xF3)
 5144|      0|          goto yy257;
 5145|      0|        if (yych <= 0xF4)
 5146|      0|          goto yy258;
 5147|      0|        goto yy230;
 5148|      0|      }
 5149|      0|    }
 5150|      0|  yy246:
 5151|      0|    yych = *++p;
 5152|      0|    if (yybm[0 + yych] & 32) {
 5153|      0|      goto yy246;
 5154|      0|    }
 5155|      0|    if (yych <= 0xE0) {
 5156|      0|      if (yych <= '=') {
 5157|      0|        if (yych <= 0x00)
 5158|      0|          goto yy230;
 5159|      0|        if (yych <= ' ')
 5160|      0|          goto yy231;
 5161|      0|        goto yy230;
 5162|      0|      } else {
 5163|      0|        if (yych <= '>')
 5164|      0|          goto yy236;
 5165|      0|        if (yych <= 0xC1)
 5166|      0|          goto yy230;
 5167|      0|        if (yych <= 0xDF)
 5168|      0|          goto yy252;
 5169|      0|        goto yy253;
 5170|      0|      }
 5171|      0|    } else {
 5172|      0|      if (yych <= 0xEF) {
 5173|      0|        if (yych == 0xED)
 5174|      0|          goto yy255;
 5175|      0|        goto yy254;
 5176|      0|      } else {
 5177|      0|        if (yych <= 0xF0)
 5178|      0|          goto yy256;
 5179|      0|        if (yych <= 0xF3)
 5180|      0|          goto yy257;
 5181|      0|        if (yych <= 0xF4)
 5182|      0|          goto yy258;
 5183|      0|        goto yy230;
 5184|      0|      }
 5185|      0|    }
 5186|      0|  yy248:
 5187|      0|    yych = *++p;
 5188|      0|    if (yybm[0 + yych] & 64) {
 5189|      0|      goto yy248;
 5190|      0|    }
 5191|      0|    if (yych <= 0xEC) {
 5192|      0|      if (yych <= 0xC1) {
 5193|      0|        if (yych <= 0x00)
 5194|      0|          goto yy230;
 5195|      0|        if (yych <= '"')
 5196|      0|          goto yy259;
 5197|      0|        goto yy230;
 5198|      0|      } else {
 5199|      0|        if (yych <= 0xDF)
 5200|      0|          goto yy260;
 5201|      0|        if (yych <= 0xE0)
 5202|      0|          goto yy261;
 5203|      0|        goto yy262;
 5204|      0|      }
 5205|      0|    } else {
 5206|      0|      if (yych <= 0xF0) {
 5207|      0|        if (yych <= 0xED)
 5208|      0|          goto yy263;
 5209|      0|        if (yych <= 0xEF)
 5210|      0|          goto yy262;
 5211|      0|        goto yy264;
 5212|      0|      } else {
 5213|      0|        if (yych <= 0xF3)
 5214|      0|          goto yy265;
 5215|      0|        if (yych <= 0xF4)
 5216|      0|          goto yy266;
 5217|      0|        goto yy230;
 5218|      0|      }
 5219|      0|    }
 5220|      0|  yy250:
 5221|      0|    yych = *++p;
 5222|      0|    if (yybm[0 + yych] & 128) {
 5223|      0|      goto yy250;
 5224|      0|    }
 5225|      0|    if (yych <= 0xEC) {
 5226|      0|      if (yych <= 0xC1) {
 5227|      0|        if (yych <= 0x00)
 5228|      0|          goto yy230;
 5229|      0|        if (yych <= '\'')
 5230|      0|          goto yy259;
 5231|      0|        goto yy230;
 5232|      0|      } else {
 5233|      0|        if (yych <= 0xDF)
 5234|      0|          goto yy267;
 5235|      0|        if (yych <= 0xE0)
 5236|      0|          goto yy268;
 5237|      0|        goto yy269;
 5238|      0|      }
 5239|      0|    } else {
 5240|      0|      if (yych <= 0xF0) {
 5241|      0|        if (yych <= 0xED)
 5242|      0|          goto yy270;
 5243|      0|        if (yych <= 0xEF)
 5244|      0|          goto yy269;
 5245|      0|        goto yy271;
 5246|      0|      } else {
 5247|      0|        if (yych <= 0xF3)
 5248|      0|          goto yy272;
 5249|      0|        if (yych <= 0xF4)
 5250|      0|          goto yy273;
 5251|      0|        goto yy230;
 5252|      0|      }
 5253|      0|    }
 5254|      0|  yy252:
 5255|      0|    yych = *++p;
 5256|      0|    if (yych <= 0x7F)
 5257|      0|      goto yy230;
 5258|      0|    if (yych <= 0xBF)
 5259|      0|      goto yy246;
 5260|      0|    goto yy230;
 5261|      0|  yy253:
 5262|      0|    yych = *++p;
 5263|      0|    if (yych <= 0x9F)
 5264|      0|      goto yy230;
 5265|      0|    if (yych <= 0xBF)
 5266|      0|      goto yy252;
 5267|      0|    goto yy230;
 5268|      0|  yy254:
 5269|      0|    yych = *++p;
 5270|      0|    if (yych <= 0x7F)
 5271|      0|      goto yy230;
 5272|      0|    if (yych <= 0xBF)
 5273|      0|      goto yy252;
 5274|      0|    goto yy230;
 5275|      0|  yy255:
 5276|      0|    yych = *++p;
 5277|      0|    if (yych <= 0x7F)
 5278|      0|      goto yy230;
 5279|      0|    if (yych <= 0x9F)
 5280|      0|      goto yy252;
 5281|      0|    goto yy230;
 5282|      0|  yy256:
 5283|      0|    yych = *++p;
 5284|      0|    if (yych <= 0x8F)
 5285|      0|      goto yy230;
 5286|      0|    if (yych <= 0xBF)
 5287|      0|      goto yy254;
 5288|      0|    goto yy230;
 5289|      0|  yy257:
 5290|      0|    yych = *++p;
 5291|      0|    if (yych <= 0x7F)
 5292|      0|      goto yy230;
 5293|      0|    if (yych <= 0xBF)
 5294|      0|      goto yy254;
 5295|      0|    goto yy230;
 5296|      0|  yy258:
 5297|      0|    yych = *++p;
 5298|      0|    if (yych <= 0x7F)
 5299|      0|      goto yy230;
 5300|      0|    if (yych <= 0x8F)
 5301|      0|      goto yy254;
 5302|      0|    goto yy230;
 5303|      0|  yy259:
 5304|      0|    yych = *++p;
 5305|      0|    if (yybm[0 + yych] & 8) {
 5306|      0|      goto yy231;
 5307|      0|    }
 5308|      0|    if (yych == '/')
 5309|      0|      goto yy235;
 5310|      0|    if (yych == '>')
 5311|      0|      goto yy236;
 5312|      0|    goto yy230;
 5313|      0|  yy260:
 5314|      0|    yych = *++p;
 5315|      0|    if (yych <= 0x7F)
 5316|      0|      goto yy230;
 5317|      0|    if (yych <= 0xBF)
 5318|      0|      goto yy248;
 5319|      0|    goto yy230;
 5320|      0|  yy261:
 5321|      0|    yych = *++p;
 5322|      0|    if (yych <= 0x9F)
 5323|      0|      goto yy230;
 5324|      0|    if (yych <= 0xBF)
 5325|      0|      goto yy260;
 5326|      0|    goto yy230;
 5327|      0|  yy262:
 5328|      0|    yych = *++p;
 5329|      0|    if (yych <= 0x7F)
 5330|      0|      goto yy230;
 5331|      0|    if (yych <= 0xBF)
 5332|      0|      goto yy260;
 5333|      0|    goto yy230;
 5334|      0|  yy263:
 5335|      0|    yych = *++p;
 5336|      0|    if (yych <= 0x7F)
 5337|      0|      goto yy230;
 5338|      0|    if (yych <= 0x9F)
 5339|      0|      goto yy260;
 5340|      0|    goto yy230;
 5341|      0|  yy264:
 5342|      0|    yych = *++p;
 5343|      0|    if (yych <= 0x8F)
 5344|      0|      goto yy230;
 5345|      0|    if (yych <= 0xBF)
 5346|      0|      goto yy262;
 5347|      0|    goto yy230;
 5348|      0|  yy265:
 5349|      0|    yych = *++p;
 5350|      0|    if (yych <= 0x7F)
 5351|      0|      goto yy230;
 5352|      0|    if (yych <= 0xBF)
 5353|      0|      goto yy262;
 5354|      0|    goto yy230;
 5355|      0|  yy266:
 5356|      0|    yych = *++p;
 5357|      0|    if (yych <= 0x7F)
 5358|      0|      goto yy230;
 5359|      0|    if (yych <= 0x8F)
 5360|      0|      goto yy262;
 5361|      0|    goto yy230;
 5362|      0|  yy267:
 5363|      0|    yych = *++p;
 5364|      0|    if (yych <= 0x7F)
 5365|      0|      goto yy230;
 5366|      0|    if (yych <= 0xBF)
 5367|      0|      goto yy250;
 5368|      0|    goto yy230;
 5369|      0|  yy268:
 5370|      0|    yych = *++p;
 5371|      0|    if (yych <= 0x9F)
 5372|      0|      goto yy230;
 5373|      0|    if (yych <= 0xBF)
 5374|      0|      goto yy267;
 5375|      0|    goto yy230;
 5376|      0|  yy269:
 5377|      0|    yych = *++p;
 5378|      0|    if (yych <= 0x7F)
 5379|      0|      goto yy230;
 5380|      0|    if (yych <= 0xBF)
 5381|      0|      goto yy267;
 5382|      0|    goto yy230;
 5383|      0|  yy270:
 5384|      0|    yych = *++p;
 5385|      0|    if (yych <= 0x7F)
 5386|      0|      goto yy230;
 5387|      0|    if (yych <= 0x9F)
 5388|      0|      goto yy267;
 5389|      0|    goto yy230;
 5390|      0|  yy271:
 5391|      0|    yych = *++p;
 5392|      0|    if (yych <= 0x8F)
 5393|      0|      goto yy230;
 5394|      0|    if (yych <= 0xBF)
 5395|      0|      goto yy269;
 5396|      0|    goto yy230;
 5397|      0|  yy272:
 5398|      0|    yych = *++p;
 5399|      0|    if (yych <= 0x7F)
 5400|      0|      goto yy230;
 5401|      0|    if (yych <= 0xBF)
 5402|      0|      goto yy269;
 5403|      0|    goto yy230;
 5404|      0|  yy273:
 5405|      0|    yych = *++p;
 5406|      0|    if (yych <= 0x7F)
 5407|      0|      goto yy230;
 5408|      0|    if (yych <= 0x8F)
 5409|      0|      goto yy269;
 5410|      0|    goto yy230;
 5411|      0|  }
 5412|      0|}
 5413|       |
 5414|      0|bufsize_t _scan_html_comment(const unsigned char *p) {
 5415|      0|  const unsigned char *marker = NULL;
 5416|      0|  const unsigned char *start = p;
 5417|       |
 5418|      0|  {
 5419|      0|    unsigned char yych;
 5420|      0|    static const unsigned char yybm[] = {
 5421|      0|        0,   128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5422|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5423|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5424|      0|        128, 128, 128, 0,   128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5425|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5426|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5427|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5428|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5429|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5430|      0|        128, 128, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5431|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5432|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5433|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5434|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5435|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5436|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5437|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5438|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5439|      0|        0,   0,   0,   0,
 5440|      0|    };
 5441|      0|    yych = *p;
 5442|      0|    if (yych == '-')
 5443|      0|      goto yy278;
 5444|      0|    ++p;
 5445|      0|  yy277 : { return 0; }
 5446|      0|  yy278:
 5447|      0|    yych = *(marker = ++p);
 5448|      0|    if (yych <= '=') {
 5449|      0|      if (yych <= 0x00)
 5450|      0|        goto yy277;
 5451|      0|      if (yych == '-')
 5452|      0|        goto yy282;
 5453|      0|      goto yy280;
 5454|      0|    } else {
 5455|      0|      if (yych <= 0x7F) {
 5456|      0|        if (yych <= '>')
 5457|      0|          goto yy277;
 5458|      0|        goto yy280;
 5459|      0|      } else {
 5460|      0|        if (yych <= 0xC1)
 5461|      0|          goto yy277;
 5462|      0|        if (yych <= 0xF4)
 5463|      0|          goto yy280;
 5464|      0|        goto yy277;
 5465|      0|      }
 5466|      0|    }
 5467|      0|  yy279:
 5468|      0|    yych = *++p;
 5469|      0|  yy280:
 5470|      0|    if (yybm[0 + yych] & 128) {
 5471|      0|      goto yy279;
 5472|      0|    }
 5473|      0|    if (yych <= 0xEC) {
 5474|      0|      if (yych <= 0xC1) {
 5475|      0|        if (yych <= 0x00)
 5476|      0|          goto yy281;
 5477|      0|        if (yych <= '-')
 5478|      0|          goto yy290;
 5479|      0|      } else {
 5480|      0|        if (yych <= 0xDF)
 5481|      0|          goto yy283;
 5482|      0|        if (yych <= 0xE0)
 5483|      0|          goto yy284;
 5484|      0|        goto yy285;
 5485|      0|      }
 5486|      0|    } else {
 5487|      0|      if (yych <= 0xF0) {
 5488|      0|        if (yych <= 0xED)
 5489|      0|          goto yy286;
 5490|      0|        if (yych <= 0xEF)
 5491|      0|          goto yy285;
 5492|      0|        goto yy287;
 5493|      0|      } else {
 5494|      0|        if (yych <= 0xF3)
 5495|      0|          goto yy288;
 5496|      0|        if (yych <= 0xF4)
 5497|      0|          goto yy289;
 5498|      0|      }
 5499|      0|    }
 5500|      0|  yy281:
 5501|      0|    p = marker;
 5502|      0|    goto yy277;
 5503|      0|  yy282:
 5504|      0|    yych = *++p;
 5505|      0|    if (yych == '-')
 5506|      0|      goto yy291;
 5507|      0|    if (yych == '>')
 5508|      0|      goto yy281;
 5509|      0|    goto yy280;
 5510|      0|  yy283:
 5511|      0|    yych = *++p;
 5512|      0|    if (yych <= 0x7F)
 5513|      0|      goto yy281;
 5514|      0|    if (yych <= 0xBF)
 5515|      0|      goto yy279;
 5516|      0|    goto yy281;
 5517|      0|  yy284:
 5518|      0|    yych = *++p;
 5519|      0|    if (yych <= 0x9F)
 5520|      0|      goto yy281;
 5521|      0|    if (yych <= 0xBF)
 5522|      0|      goto yy283;
 5523|      0|    goto yy281;
 5524|      0|  yy285:
 5525|      0|    yych = *++p;
 5526|      0|    if (yych <= 0x7F)
 5527|      0|      goto yy281;
 5528|      0|    if (yych <= 0xBF)
 5529|      0|      goto yy283;
 5530|      0|    goto yy281;
 5531|      0|  yy286:
 5532|      0|    yych = *++p;
 5533|      0|    if (yych <= 0x7F)
 5534|      0|      goto yy281;
 5535|      0|    if (yych <= 0x9F)
 5536|      0|      goto yy283;
 5537|      0|    goto yy281;
 5538|      0|  yy287:
 5539|      0|    yych = *++p;
 5540|      0|    if (yych <= 0x8F)
 5541|      0|      goto yy281;
 5542|      0|    if (yych <= 0xBF)
 5543|      0|      goto yy285;
 5544|      0|    goto yy281;
 5545|      0|  yy288:
 5546|      0|    yych = *++p;
 5547|      0|    if (yych <= 0x7F)
 5548|      0|      goto yy281;
 5549|      0|    if (yych <= 0xBF)
 5550|      0|      goto yy285;
 5551|      0|    goto yy281;
 5552|      0|  yy289:
 5553|      0|    yych = *++p;
 5554|      0|    if (yych <= 0x7F)
 5555|      0|      goto yy281;
 5556|      0|    if (yych <= 0x8F)
 5557|      0|      goto yy285;
 5558|      0|    goto yy281;
 5559|      0|  yy290:
 5560|      0|    yych = *++p;
 5561|      0|    if (yybm[0 + yych] & 128) {
 5562|      0|      goto yy279;
 5563|      0|    }
 5564|      0|    if (yych <= 0xEC) {
 5565|      0|      if (yych <= 0xC1) {
 5566|      0|        if (yych <= 0x00)
 5567|      0|          goto yy281;
 5568|      0|        if (yych >= '.')
 5569|      0|          goto yy281;
 5570|      0|      } else {
 5571|      0|        if (yych <= 0xDF)
 5572|      0|          goto yy283;
 5573|      0|        if (yych <= 0xE0)
 5574|      0|          goto yy284;
 5575|      0|        goto yy285;
 5576|      0|      }
 5577|      0|    } else {
 5578|      0|      if (yych <= 0xF0) {
 5579|      0|        if (yych <= 0xED)
 5580|      0|          goto yy286;
 5581|      0|        if (yych <= 0xEF)
 5582|      0|          goto yy285;
 5583|      0|        goto yy287;
 5584|      0|      } else {
 5585|      0|        if (yych <= 0xF3)
 5586|      0|          goto yy288;
 5587|      0|        if (yych <= 0xF4)
 5588|      0|          goto yy289;
 5589|      0|        goto yy281;
 5590|      0|      }
 5591|      0|    }
 5592|      0|  yy291:
 5593|      0|    yych = *++p;
 5594|      0|    if (yych != '>')
 5595|      0|      goto yy281;
 5596|      0|    ++p;
 5597|      0|    { return (bufsize_t)(p - start); }
 5598|      0|  }
 5599|      0|}
 5600|       |
 5601|      0|bufsize_t _scan_html_pi(const unsigned char *p) {
 5602|      0|  const unsigned char *marker = NULL;
 5603|      0|  const unsigned char *start = p;
 5604|       |
 5605|      0|  {
 5606|      0|    unsigned char yych;
 5607|      0|    unsigned int yyaccept = 0;
 5608|      0|    static const unsigned char yybm[] = {
 5609|      0|        0,   128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5610|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5611|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5612|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5613|      0|        128, 128, 128, 128, 128, 128, 128, 0,   128, 128, 128, 128, 128, 128,
 5614|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5615|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5616|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5617|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 5618|      0|        128, 128, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5619|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5620|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5621|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5622|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5623|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5624|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5625|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5626|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5627|      0|        0,   0,   0,   0,
 5628|      0|    };
 5629|      0|    yych = *p;
 5630|      0|    if (yybm[0 + yych] & 128) {
 5631|      0|      goto yy298;
 5632|      0|    }
 5633|      0|    if (yych <= 0xEC) {
 5634|      0|      if (yych <= 0xC1) {
 5635|      0|        if (yych <= 0x00)
 5636|      0|          goto yy296;
 5637|      0|        if (yych <= '?')
 5638|      0|          goto yy301;
 5639|      0|      } else {
 5640|      0|        if (yych <= 0xDF)
 5641|      0|          goto yy302;
 5642|      0|        if (yych <= 0xE0)
 5643|      0|          goto yy303;
 5644|      0|        goto yy304;
 5645|      0|      }
 5646|      0|    } else {
 5647|      0|      if (yych <= 0xF0) {
 5648|      0|        if (yych <= 0xED)
 5649|      0|          goto yy305;
 5650|      0|        if (yych <= 0xEF)
 5651|      0|          goto yy304;
 5652|      0|        goto yy306;
 5653|      0|      } else {
 5654|      0|        if (yych <= 0xF3)
 5655|      0|          goto yy307;
 5656|      0|        if (yych <= 0xF4)
 5657|      0|          goto yy308;
 5658|      0|      }
 5659|      0|    }
 5660|      0|  yy296:
 5661|      0|    ++p;
 5662|      0|  yy297 : { return 0; }
 5663|      0|  yy298:
 5664|      0|    yyaccept = 0;
 5665|      0|    yych = *(marker = ++p);
 5666|      0|  yy299:
 5667|      0|    if (yybm[0 + yych] & 128) {
 5668|      0|      goto yy298;
 5669|      0|    }
 5670|      0|    if (yych <= 0xEC) {
 5671|      0|      if (yych <= 0xC1) {
 5672|      0|        if (yych <= 0x00)
 5673|      0|          goto yy300;
 5674|      0|        if (yych <= '?')
 5675|      0|          goto yy309;
 5676|      0|      } else {
 5677|      0|        if (yych <= 0xDF)
 5678|      0|          goto yy311;
 5679|      0|        if (yych <= 0xE0)
 5680|      0|          goto yy312;
 5681|      0|        goto yy313;
 5682|      0|      }
 5683|      0|    } else {
 5684|      0|      if (yych <= 0xF0) {
 5685|      0|        if (yych <= 0xED)
 5686|      0|          goto yy314;
 5687|      0|        if (yych <= 0xEF)
 5688|      0|          goto yy313;
 5689|      0|        goto yy315;
 5690|      0|      } else {
 5691|      0|        if (yych <= 0xF3)
 5692|      0|          goto yy316;
 5693|      0|        if (yych <= 0xF4)
 5694|      0|          goto yy317;
 5695|      0|      }
 5696|      0|    }
 5697|      0|  yy300 : { return (bufsize_t)(p - start); }
 5698|      0|  yy301:
 5699|      0|    yyaccept = 1;
 5700|      0|    yych = *(marker = ++p);
 5701|      0|    if (yych <= '?') {
 5702|      0|      if (yych <= 0x00)
 5703|      0|        goto yy297;
 5704|      0|      if (yych <= '=')
 5705|      0|        goto yy299;
 5706|      0|      if (yych <= '>')
 5707|      0|        goto yy297;
 5708|      0|      goto yy298;
 5709|      0|    } else {
 5710|      0|      if (yych <= 0x7F)
 5711|      0|        goto yy299;
 5712|      0|      if (yych <= 0xC1)
 5713|      0|        goto yy297;
 5714|      0|      if (yych <= 0xF4)
 5715|      0|        goto yy299;
 5716|      0|      goto yy297;
 5717|      0|    }
 5718|      0|  yy302:
 5719|      0|    yych = *++p;
 5720|      0|    if (yych <= 0x7F)
 5721|      0|      goto yy297;
 5722|      0|    if (yych <= 0xBF)
 5723|      0|      goto yy298;
 5724|      0|    goto yy297;
 5725|      0|  yy303:
 5726|      0|    yyaccept = 1;
 5727|      0|    yych = *(marker = ++p);
 5728|      0|    if (yych <= 0x9F)
 5729|      0|      goto yy297;
 5730|      0|    if (yych <= 0xBF)
 5731|      0|      goto yy311;
 5732|      0|    goto yy297;
 5733|      0|  yy304:
 5734|      0|    yyaccept = 1;
 5735|      0|    yych = *(marker = ++p);
 5736|      0|    if (yych <= 0x7F)
 5737|      0|      goto yy297;
 5738|      0|    if (yych <= 0xBF)
 5739|      0|      goto yy311;
 5740|      0|    goto yy297;
 5741|      0|  yy305:
 5742|      0|    yyaccept = 1;
 5743|      0|    yych = *(marker = ++p);
 5744|      0|    if (yych <= 0x7F)
 5745|      0|      goto yy297;
 5746|      0|    if (yych <= 0x9F)
 5747|      0|      goto yy311;
 5748|      0|    goto yy297;
 5749|      0|  yy306:
 5750|      0|    yyaccept = 1;
 5751|      0|    yych = *(marker = ++p);
 5752|      0|    if (yych <= 0x8F)
 5753|      0|      goto yy297;
 5754|      0|    if (yych <= 0xBF)
 5755|      0|      goto yy313;
 5756|      0|    goto yy297;
 5757|      0|  yy307:
 5758|      0|    yyaccept = 1;
 5759|      0|    yych = *(marker = ++p);
 5760|      0|    if (yych <= 0x7F)
 5761|      0|      goto yy297;
 5762|      0|    if (yych <= 0xBF)
 5763|      0|      goto yy313;
 5764|      0|    goto yy297;
 5765|      0|  yy308:
 5766|      0|    yyaccept = 1;
 5767|      0|    yych = *(marker = ++p);
 5768|      0|    if (yych <= 0x7F)
 5769|      0|      goto yy297;
 5770|      0|    if (yych <= 0x8F)
 5771|      0|      goto yy313;
 5772|      0|    goto yy297;
 5773|      0|  yy309:
 5774|      0|    yych = *++p;
 5775|      0|    if (yych <= 0xE0) {
 5776|      0|      if (yych <= '>') {
 5777|      0|        if (yych <= 0x00)
 5778|      0|          goto yy310;
 5779|      0|        if (yych <= '=')
 5780|      0|          goto yy298;
 5781|      0|      } else {
 5782|      0|        if (yych <= 0x7F)
 5783|      0|          goto yy298;
 5784|      0|        if (yych <= 0xC1)
 5785|      0|          goto yy310;
 5786|      0|        if (yych <= 0xDF)
 5787|      0|          goto yy311;
 5788|      0|        goto yy312;
 5789|      0|      }
 5790|      0|    } else {
 5791|      0|      if (yych <= 0xEF) {
 5792|      0|        if (yych == 0xED)
 5793|      0|          goto yy314;
 5794|      0|        goto yy313;
 5795|      0|      } else {
 5796|      0|        if (yych <= 0xF0)
 5797|      0|          goto yy315;
 5798|      0|        if (yych <= 0xF3)
 5799|      0|          goto yy316;
 5800|      0|        if (yych <= 0xF4)
 5801|      0|          goto yy317;
 5802|      0|      }
 5803|      0|    }
 5804|      0|  yy310:
 5805|      0|    p = marker;
 5806|      0|    if (yyaccept == 0) {
 5807|      0|      goto yy300;
 5808|      0|    } else {
 5809|      0|      goto yy297;
 5810|      0|    }
 5811|      0|  yy311:
 5812|      0|    yych = *++p;
 5813|      0|    if (yych <= 0x7F)
 5814|      0|      goto yy310;
 5815|      0|    if (yych <= 0xBF)
 5816|      0|      goto yy298;
 5817|      0|    goto yy310;
 5818|      0|  yy312:
 5819|      0|    yych = *++p;
 5820|      0|    if (yych <= 0x9F)
 5821|      0|      goto yy310;
 5822|      0|    if (yych <= 0xBF)
 5823|      0|      goto yy311;
 5824|      0|    goto yy310;
 5825|      0|  yy313:
 5826|      0|    yych = *++p;
 5827|      0|    if (yych <= 0x7F)
 5828|      0|      goto yy310;
 5829|      0|    if (yych <= 0xBF)
 5830|      0|      goto yy311;
 5831|      0|    goto yy310;
 5832|      0|  yy314:
 5833|      0|    yych = *++p;
 5834|      0|    if (yych <= 0x7F)
 5835|      0|      goto yy310;
 5836|      0|    if (yych <= 0x9F)
 5837|      0|      goto yy311;
 5838|      0|    goto yy310;
 5839|      0|  yy315:
 5840|      0|    yych = *++p;
 5841|      0|    if (yych <= 0x8F)
 5842|      0|      goto yy310;
 5843|      0|    if (yych <= 0xBF)
 5844|      0|      goto yy313;
 5845|      0|    goto yy310;
 5846|      0|  yy316:
 5847|      0|    yych = *++p;
 5848|      0|    if (yych <= 0x7F)
 5849|      0|      goto yy310;
 5850|      0|    if (yych <= 0xBF)
 5851|      0|      goto yy313;
 5852|      0|    goto yy310;
 5853|      0|  yy317:
 5854|      0|    yych = *++p;
 5855|      0|    if (yych <= 0x7F)
 5856|      0|      goto yy310;
 5857|      0|    if (yych <= 0x8F)
 5858|      0|      goto yy313;
 5859|      0|    goto yy310;
 5860|      0|  }
 5861|      0|}
 5862|       |
 5863|      0|bufsize_t _scan_html_declaration(const unsigned char *p) {
 5864|      0|  const unsigned char *marker = NULL;
 5865|      0|  const unsigned char *start = p;
 5866|       |
 5867|      0|  {
 5868|      0|    unsigned char yych;
 5869|      0|    unsigned int yyaccept = 0;
 5870|      0|    static const unsigned char yybm[] = {
 5871|      0|        0,   64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,
 5872|      0|        64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,
 5873|      0|        64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,
 5874|      0|        64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,
 5875|      0|        64,  64,  64,  64,  64,  64,  0,   64,  64,  192, 192, 192, 192, 192,
 5876|      0|        192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
 5877|      0|        192, 192, 192, 192, 192, 192, 192, 64,  64,  64,  64,  64,  64,  64,
 5878|      0|        64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,
 5879|      0|        64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,  64,
 5880|      0|        64,  64,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5881|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5882|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5883|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5884|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5885|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5886|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5887|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5888|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 5889|      0|        0,   0,   0,   0,
 5890|      0|    };
 5891|      0|    yych = *p;
 5892|      0|    if (yych <= '@')
 5893|      0|      goto yy320;
 5894|      0|    if (yych <= 'Z')
 5895|      0|      goto yy322;
 5896|      0|  yy320:
 5897|      0|    ++p;
 5898|      0|  yy321 : { return 0; }
 5899|      0|  yy322:
 5900|      0|    yyaccept = 0;
 5901|      0|    yych = *(marker = ++p);
 5902|      0|    if (yybm[0 + yych] & 128) {
 5903|      0|      goto yy326;
 5904|      0|    }
 5905|      0|    if (yych <= 0x08)
 5906|      0|      goto yy321;
 5907|      0|    if (yych <= '\r')
 5908|      0|      goto yy323;
 5909|      0|    if (yych != ' ')
 5910|      0|      goto yy321;
 5911|      0|  yy323:
 5912|      0|    yyaccept = 1;
 5913|      0|    yych = *(marker = ++p);
 5914|      0|    if (yybm[0 + yych] & 64) {
 5915|      0|      goto yy323;
 5916|      0|    }
 5917|      0|    if (yych <= 0xED) {
 5918|      0|      if (yych <= 0xDF) {
 5919|      0|        if (yych >= 0xC2)
 5920|      0|          goto yy329;
 5921|      0|      } else {
 5922|      0|        if (yych <= 0xE0)
 5923|      0|          goto yy330;
 5924|      0|        if (yych <= 0xEC)
 5925|      0|          goto yy331;
 5926|      0|        goto yy332;
 5927|      0|      }
 5928|      0|    } else {
 5929|      0|      if (yych <= 0xF0) {
 5930|      0|        if (yych <= 0xEF)
 5931|      0|          goto yy331;
 5932|      0|        goto yy333;
 5933|      0|      } else {
 5934|      0|        if (yych <= 0xF3)
 5935|      0|          goto yy334;
 5936|      0|        if (yych <= 0xF4)
 5937|      0|          goto yy335;
 5938|      0|      }
 5939|      0|    }
 5940|      0|  yy325 : { return (bufsize_t)(p - start); }
 5941|      0|  yy326:
 5942|      0|    yych = *++p;
 5943|      0|    if (yybm[0 + yych] & 128) {
 5944|      0|      goto yy326;
 5945|      0|    }
 5946|      0|    if (yych <= 0x08)
 5947|      0|      goto yy328;
 5948|      0|    if (yych <= '\r')
 5949|      0|      goto yy323;
 5950|      0|    if (yych == ' ')
 5951|      0|      goto yy323;
 5952|      0|  yy328:
 5953|      0|    p = marker;
 5954|      0|    if (yyaccept == 0) {
 5955|      0|      goto yy321;
 5956|      0|    } else {
 5957|      0|      goto yy325;
 5958|      0|    }
 5959|      0|  yy329:
 5960|      0|    yych = *++p;
 5961|      0|    if (yych <= 0x7F)
 5962|      0|      goto yy328;
 5963|      0|    if (yych <= 0xBF)
 5964|      0|      goto yy323;
 5965|      0|    goto yy328;
 5966|      0|  yy330:
 5967|      0|    yych = *++p;
 5968|      0|    if (yych <= 0x9F)
 5969|      0|      goto yy328;
 5970|      0|    if (yych <= 0xBF)
 5971|      0|      goto yy329;
 5972|      0|    goto yy328;
 5973|      0|  yy331:
 5974|      0|    yych = *++p;
 5975|      0|    if (yych <= 0x7F)
 5976|      0|      goto yy328;
 5977|      0|    if (yych <= 0xBF)
 5978|      0|      goto yy329;
 5979|      0|    goto yy328;
 5980|      0|  yy332:
 5981|      0|    yych = *++p;
 5982|      0|    if (yych <= 0x7F)
 5983|      0|      goto yy328;
 5984|      0|    if (yych <= 0x9F)
 5985|      0|      goto yy329;
 5986|      0|    goto yy328;
 5987|      0|  yy333:
 5988|      0|    yych = *++p;
 5989|      0|    if (yych <= 0x8F)
 5990|      0|      goto yy328;
 5991|      0|    if (yych <= 0xBF)
 5992|      0|      goto yy331;
 5993|      0|    goto yy328;
 5994|      0|  yy334:
 5995|      0|    yych = *++p;
 5996|      0|    if (yych <= 0x7F)
 5997|      0|      goto yy328;
 5998|      0|    if (yych <= 0xBF)
 5999|      0|      goto yy331;
 6000|      0|    goto yy328;
 6001|      0|  yy335:
 6002|      0|    yych = *++p;
 6003|      0|    if (yych <= 0x7F)
 6004|      0|      goto yy328;
 6005|      0|    if (yych <= 0x8F)
 6006|      0|      goto yy331;
 6007|      0|    goto yy328;
 6008|      0|  }
 6009|      0|}
 6010|       |
 6011|      0|bufsize_t _scan_html_cdata(const unsigned char *p) {
 6012|      0|  const unsigned char *marker = NULL;
 6013|      0|  const unsigned char *start = p;
 6014|       |
 6015|      0|  {
 6016|      0|    unsigned char yych;
 6017|      0|    unsigned int yyaccept = 0;
 6018|      0|    static const unsigned char yybm[] = {
 6019|      0|        0,   128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 6020|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 6021|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 6022|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 6023|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 6024|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 6025|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 0,   128, 128, 128, 128,
 6026|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 6027|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
 6028|      0|        128, 128, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 6029|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 6030|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 6031|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 6032|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 6033|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 6034|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 6035|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 6036|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 6037|      0|        0,   0,   0,   0,
 6038|      0|    };
 6039|      0|    yych = *p;
 6040|      0|    if (yych == 'C')
 6041|      0|      goto yy340;
 6042|      0|    if (yych == 'c')
 6043|      0|      goto yy340;
 6044|      0|    ++p;
 6045|      0|  yy339 : { return 0; }
 6046|      0|  yy340:
 6047|      0|    yyaccept = 0;
 6048|      0|    yych = *(marker = ++p);
 6049|      0|    if (yych == 'D')
 6050|      0|      goto yy341;
 6051|      0|    if (yych != 'd')
 6052|      0|      goto yy339;
 6053|      0|  yy341:
 6054|      0|    yych = *++p;
 6055|      0|    if (yych == 'A')
 6056|      0|      goto yy343;
 6057|      0|    if (yych == 'a')
 6058|      0|      goto yy343;
 6059|      0|  yy342:
 6060|      0|    p = marker;
 6061|      0|    if (yyaccept == 0) {
 6062|      0|      goto yy339;
 6063|      0|    } else {
 6064|      0|      goto yy348;
 6065|      0|    }
 6066|      0|  yy343:
 6067|      0|    yych = *++p;
 6068|      0|    if (yych == 'T')
 6069|      0|      goto yy344;
 6070|      0|    if (yych != 't')
 6071|      0|      goto yy342;
 6072|      0|  yy344:
 6073|      0|    yych = *++p;
 6074|      0|    if (yych == 'A')
 6075|      0|      goto yy345;
 6076|      0|    if (yych != 'a')
 6077|      0|      goto yy342;
 6078|      0|  yy345:
 6079|      0|    yych = *++p;
 6080|      0|    if (yych != '[')
 6081|      0|      goto yy342;
 6082|      0|  yy346:
 6083|      0|    yyaccept = 1;
 6084|      0|    yych = *(marker = ++p);
 6085|      0|    if (yybm[0 + yych] & 128) {
 6086|      0|      goto yy346;
 6087|      0|    }
 6088|      0|    if (yych <= 0xEC) {
 6089|      0|      if (yych <= 0xC1) {
 6090|      0|        if (yych <= 0x00)
 6091|      0|          goto yy348;
 6092|      0|        if (yych <= ']')
 6093|      0|          goto yy349;
 6094|      0|      } else {
 6095|      0|        if (yych <= 0xDF)
 6096|      0|          goto yy350;
 6097|      0|        if (yych <= 0xE0)
 6098|      0|          goto yy351;
 6099|      0|        goto yy352;
 6100|      0|      }
 6101|      0|    } else {
 6102|      0|      if (yych <= 0xF0) {
 6103|      0|        if (yych <= 0xED)
 6104|      0|          goto yy353;
 6105|      0|        if (yych <= 0xEF)
 6106|      0|          goto yy352;
 6107|      0|        goto yy354;
 6108|      0|      } else {
 6109|      0|        if (yych <= 0xF3)
 6110|      0|          goto yy355;
 6111|      0|        if (yych <= 0xF4)
 6112|      0|          goto yy356;
 6113|      0|      }
 6114|      0|    }
 6115|      0|  yy348 : { return (bufsize_t)(p - start); }
 6116|      0|  yy349:
 6117|      0|    yych = *++p;
 6118|      0|    if (yybm[0 + yych] & 128) {
 6119|      0|      goto yy346;
 6120|      0|    }
 6121|      0|    if (yych <= 0xEC) {
 6122|      0|      if (yych <= 0xC1) {
 6123|      0|        if (yych <= 0x00)
 6124|      0|          goto yy342;
 6125|      0|        if (yych <= ']')
 6126|      0|          goto yy357;
 6127|      0|        goto yy342;
 6128|      0|      } else {
 6129|      0|        if (yych <= 0xDF)
 6130|      0|          goto yy350;
 6131|      0|        if (yych <= 0xE0)
 6132|      0|          goto yy351;
 6133|      0|        goto yy352;
 6134|      0|      }
 6135|      0|    } else {
 6136|      0|      if (yych <= 0xF0) {
 6137|      0|        if (yych <= 0xED)
 6138|      0|          goto yy353;
 6139|      0|        if (yych <= 0xEF)
 6140|      0|          goto yy352;
 6141|      0|        goto yy354;
 6142|      0|      } else {
 6143|      0|        if (yych <= 0xF3)
 6144|      0|          goto yy355;
 6145|      0|        if (yych <= 0xF4)
 6146|      0|          goto yy356;
 6147|      0|        goto yy342;
 6148|      0|      }
 6149|      0|    }
 6150|      0|  yy350:
 6151|      0|    yych = *++p;
 6152|      0|    if (yych <= 0x7F)
 6153|      0|      goto yy342;
 6154|      0|    if (yych <= 0xBF)
 6155|      0|      goto yy346;
 6156|      0|    goto yy342;
 6157|      0|  yy351:
 6158|      0|    yych = *++p;
 6159|      0|    if (yych <= 0x9F)
 6160|      0|      goto yy342;
 6161|      0|    if (yych <= 0xBF)
 6162|      0|      goto yy350;
 6163|      0|    goto yy342;
 6164|      0|  yy352:
 6165|      0|    yych = *++p;
 6166|      0|    if (yych <= 0x7F)
 6167|      0|      goto yy342;
 6168|      0|    if (yych <= 0xBF)
 6169|      0|      goto yy350;
 6170|      0|    goto yy342;
 6171|      0|  yy353:
 6172|      0|    yych = *++p;
 6173|      0|    if (yych <= 0x7F)
 6174|      0|      goto yy342;
 6175|      0|    if (yych <= 0x9F)
 6176|      0|      goto yy350;
 6177|      0|    goto yy342;
 6178|      0|  yy354:
 6179|      0|    yych = *++p;
 6180|      0|    if (yych <= 0x8F)
 6181|      0|      goto yy342;
 6182|      0|    if (yych <= 0xBF)
 6183|      0|      goto yy352;
 6184|      0|    goto yy342;
 6185|      0|  yy355:
 6186|      0|    yych = *++p;
 6187|      0|    if (yych <= 0x7F)
 6188|      0|      goto yy342;
 6189|      0|    if (yych <= 0xBF)
 6190|      0|      goto yy352;
 6191|      0|    goto yy342;
 6192|      0|  yy356:
 6193|      0|    yych = *++p;
 6194|      0|    if (yych <= 0x7F)
 6195|      0|      goto yy342;
 6196|      0|    if (yych <= 0x8F)
 6197|      0|      goto yy352;
 6198|      0|    goto yy342;
 6199|      0|  yy357:
 6200|      0|    yych = *++p;
 6201|      0|    if (yych <= 0xE0) {
 6202|      0|      if (yych <= '>') {
 6203|      0|        if (yych <= 0x00)
 6204|      0|          goto yy342;
 6205|      0|        if (yych <= '=')
 6206|      0|          goto yy346;
 6207|      0|        goto yy342;
 6208|      0|      } else {
 6209|      0|        if (yych <= 0x7F)
 6210|      0|          goto yy346;
 6211|      0|        if (yych <= 0xC1)
 6212|      0|          goto yy342;
 6213|      0|        if (yych <= 0xDF)
 6214|      0|          goto yy350;
 6215|      0|        goto yy351;
 6216|      0|      }
 6217|      0|    } else {
 6218|      0|      if (yych <= 0xEF) {
 6219|      0|        if (yych == 0xED)
 6220|      0|          goto yy353;
 6221|      0|        goto yy352;
 6222|      0|      } else {
 6223|      0|        if (yych <= 0xF0)
 6224|      0|          goto yy354;
 6225|      0|        if (yych <= 0xF3)
 6226|      0|          goto yy355;
 6227|      0|        if (yych <= 0xF4)
 6228|      0|          goto yy356;
 6229|      0|        goto yy342;
 6230|      0|      }
 6231|      0|    }
 6232|      0|  }
 6233|      0|}
 6234|       |
 6235|       |// Try to match an HTML block tag start line, returning
 6236|       |// an integer code for the type of block (1-6, matching the spec).
 6237|       |// #7 is handled by a separate function, below.
 6238|     78|bufsize_t _scan_html_block_start(const unsigned char *p) {
 6239|     78|  const unsigned char *marker = NULL;
 6240|       |
 6241|     78|  {
 6242|     78|    unsigned char yych;
 6243|     78|    yych = *p;
 6244|     78|    if (yych == '<')
 6245|      0|      goto yy362;
 6246|     78|    ++p;
 6247|     78|  yy361 : { return 0; }
 6248|      0|  yy362:
 6249|      0|    yych = *(marker = ++p);
 6250|      0|    switch (yych) {
 6251|      0|    case '!':
 6252|      0|      goto yy363;
 6253|      0|    case '/':
 6254|      0|      goto yy365;
 6255|      0|    case '?':
 6256|      0|      goto yy366;
 6257|      0|    case 'A':
 6258|      0|    case 'a':
 6259|      0|      goto yy368;
 6260|      0|    case 'B':
 6261|      0|    case 'b':
 6262|      0|      goto yy369;
 6263|      0|    case 'C':
 6264|      0|    case 'c':
 6265|      0|      goto yy370;
 6266|      0|    case 'D':
 6267|      0|    case 'd':
 6268|      0|      goto yy371;
 6269|      0|    case 'F':
 6270|      0|    case 'f':
 6271|      0|      goto yy372;
 6272|      0|    case 'H':
 6273|      0|    case 'h':
 6274|      0|      goto yy373;
 6275|      0|    case 'I':
 6276|      0|    case 'i':
 6277|      0|      goto yy374;
 6278|      0|    case 'L':
 6279|      0|    case 'l':
 6280|      0|      goto yy375;
 6281|      0|    case 'M':
 6282|      0|    case 'm':
 6283|      0|      goto yy376;
 6284|      0|    case 'N':
 6285|      0|    case 'n':
 6286|      0|      goto yy377;
 6287|      0|    case 'O':
 6288|      0|    case 'o':
 6289|      0|      goto yy378;
 6290|      0|    case 'P':
 6291|      0|    case 'p':
 6292|      0|      goto yy379;
 6293|      0|    case 'S':
 6294|      0|    case 's':
 6295|      0|      goto yy380;
 6296|      0|    case 'T':
 6297|      0|    case 't':
 6298|      0|      goto yy381;
 6299|      0|    case 'U':
 6300|      0|    case 'u':
 6301|      0|      goto yy382;
 6302|      0|    default:
 6303|      0|      goto yy361;
 6304|      0|    }
 6305|      0|  yy363:
 6306|      0|    yych = *++p;
 6307|      0|    if (yych <= '@') {
 6308|      0|      if (yych == '-')
 6309|      0|        goto yy383;
 6310|      0|    } else {
 6311|      0|      if (yych <= 'Z')
 6312|      0|        goto yy384;
 6313|      0|      if (yych <= '[')
 6314|      0|        goto yy386;
 6315|      0|    }
 6316|      0|  yy364:
 6317|      0|    p = marker;
 6318|      0|    goto yy361;
 6319|      0|  yy365:
 6320|      0|    yych = *++p;
 6321|      0|    switch (yych) {
 6322|      0|    case 'A':
 6323|      0|    case 'a':
 6324|      0|      goto yy368;
 6325|      0|    case 'B':
 6326|      0|    case 'b':
 6327|      0|      goto yy369;
 6328|      0|    case 'C':
 6329|      0|    case 'c':
 6330|      0|      goto yy370;
 6331|      0|    case 'D':
 6332|      0|    case 'd':
 6333|      0|      goto yy371;
 6334|      0|    case 'F':
 6335|      0|    case 'f':
 6336|      0|      goto yy372;
 6337|      0|    case 'H':
 6338|      0|    case 'h':
 6339|      0|      goto yy373;
 6340|      0|    case 'I':
 6341|      0|    case 'i':
 6342|      0|      goto yy374;
 6343|      0|    case 'L':
 6344|      0|    case 'l':
 6345|      0|      goto yy375;
 6346|      0|    case 'M':
 6347|      0|    case 'm':
 6348|      0|      goto yy376;
 6349|      0|    case 'N':
 6350|      0|    case 'n':
 6351|      0|      goto yy377;
 6352|      0|    case 'O':
 6353|      0|    case 'o':
 6354|      0|      goto yy378;
 6355|      0|    case 'P':
 6356|      0|    case 'p':
 6357|      0|      goto yy387;
 6358|      0|    case 'S':
 6359|      0|    case 's':
 6360|      0|      goto yy388;
 6361|      0|    case 'T':
 6362|      0|    case 't':
 6363|      0|      goto yy389;
 6364|      0|    case 'U':
 6365|      0|    case 'u':
 6366|      0|      goto yy382;
 6367|      0|    default:
 6368|      0|      goto yy364;
 6369|      0|    }
 6370|      0|  yy366:
 6371|      0|    ++p;
 6372|      0|    { return 3; }
 6373|      0|  yy368:
 6374|      0|    yych = *++p;
 6375|      0|    if (yych <= 'S') {
 6376|      0|      if (yych <= 'D') {
 6377|      0|        if (yych <= 'C')
 6378|      0|          goto yy364;
 6379|      0|        goto yy390;
 6380|      0|      } else {
 6381|      0|        if (yych <= 'Q')
 6382|      0|          goto yy364;
 6383|      0|        if (yych <= 'R')
 6384|      0|          goto yy391;
 6385|      0|        goto yy392;
 6386|      0|      }
 6387|      0|    } else {
 6388|      0|      if (yych <= 'q') {
 6389|      0|        if (yych == 'd')
 6390|      0|          goto yy390;
 6391|      0|        goto yy364;
 6392|      0|      } else {
 6393|      0|        if (yych <= 'r')
 6394|      0|          goto yy391;
 6395|      0|        if (yych <= 's')
 6396|      0|          goto yy392;
 6397|      0|        goto yy364;
 6398|      0|      }
 6399|      0|    }
 6400|      0|  yy369:
 6401|      0|    yych = *++p;
 6402|      0|    if (yych <= 'O') {
 6403|      0|      if (yych <= 'K') {
 6404|      0|        if (yych == 'A')
 6405|      0|          goto yy393;
 6406|      0|        goto yy364;
 6407|      0|      } else {
 6408|      0|        if (yych <= 'L')
 6409|      0|          goto yy394;
 6410|      0|        if (yych <= 'N')
 6411|      0|          goto yy364;
 6412|      0|        goto yy395;
 6413|      0|      }
 6414|      0|    } else {
 6415|      0|      if (yych <= 'k') {
 6416|      0|        if (yych == 'a')
 6417|      0|          goto yy393;
 6418|      0|        goto yy364;
 6419|      0|      } else {
 6420|      0|        if (yych <= 'l')
 6421|      0|          goto yy394;
 6422|      0|        if (yych == 'o')
 6423|      0|          goto yy395;
 6424|      0|        goto yy364;
 6425|      0|      }
 6426|      0|    }
 6427|      0|  yy370:
 6428|      0|    yych = *++p;
 6429|      0|    if (yych <= 'O') {
 6430|      0|      if (yych <= 'D') {
 6431|      0|        if (yych == 'A')
 6432|      0|          goto yy396;
 6433|      0|        goto yy364;
 6434|      0|      } else {
 6435|      0|        if (yych <= 'E')
 6436|      0|          goto yy397;
 6437|      0|        if (yych <= 'N')
 6438|      0|          goto yy364;
 6439|      0|        goto yy398;
 6440|      0|      }
 6441|      0|    } else {
 6442|      0|      if (yych <= 'd') {
 6443|      0|        if (yych == 'a')
 6444|      0|          goto yy396;
 6445|      0|        goto yy364;
 6446|      0|      } else {
 6447|      0|        if (yych <= 'e')
 6448|      0|          goto yy397;
 6449|      0|        if (yych == 'o')
 6450|      0|          goto yy398;
 6451|      0|        goto yy364;
 6452|      0|      }
 6453|      0|    }
 6454|      0|  yy371:
 6455|      0|    yych = *++p;
 6456|      0|    switch (yych) {
 6457|      0|    case 'D':
 6458|      0|    case 'L':
 6459|      0|    case 'T':
 6460|      0|    case 'd':
 6461|      0|    case 'l':
 6462|      0|    case 't':
 6463|      0|      goto yy399;
 6464|      0|    case 'E':
 6465|      0|    case 'e':
 6466|      0|      goto yy400;
 6467|      0|    case 'I':
 6468|      0|    case 'i':
 6469|      0|      goto yy401;
 6470|      0|    default:
 6471|      0|      goto yy364;
 6472|      0|    }
 6473|      0|  yy372:
 6474|      0|    yych = *++p;
 6475|      0|    if (yych <= 'R') {
 6476|      0|      if (yych <= 'N') {
 6477|      0|        if (yych == 'I')
 6478|      0|          goto yy402;
 6479|      0|        goto yy364;
 6480|      0|      } else {
 6481|      0|        if (yych <= 'O')
 6482|      0|          goto yy403;
 6483|      0|        if (yych <= 'Q')
 6484|      0|          goto yy364;
 6485|      0|        goto yy404;
 6486|      0|      }
 6487|      0|    } else {
 6488|      0|      if (yych <= 'n') {
 6489|      0|        if (yych == 'i')
 6490|      0|          goto yy402;
 6491|      0|        goto yy364;
 6492|      0|      } else {
 6493|      0|        if (yych <= 'o')
 6494|      0|          goto yy403;
 6495|      0|        if (yych == 'r')
 6496|      0|          goto yy404;
 6497|      0|        goto yy364;
 6498|      0|      }
 6499|      0|    }
 6500|      0|  yy373:
 6501|      0|    yych = *++p;
 6502|      0|    if (yych <= 'S') {
 6503|      0|      if (yych <= 'D') {
 6504|      0|        if (yych <= '0')
 6505|      0|          goto yy364;
 6506|      0|        if (yych <= '6')
 6507|      0|          goto yy399;
 6508|      0|        goto yy364;
 6509|      0|      } else {
 6510|      0|        if (yych <= 'E')
 6511|      0|          goto yy405;
 6512|      0|        if (yych == 'R')
 6513|      0|          goto yy399;
 6514|      0|        goto yy364;
 6515|      0|      }
 6516|      0|    } else {
 6517|      0|      if (yych <= 'q') {
 6518|      0|        if (yych <= 'T')
 6519|      0|          goto yy406;
 6520|      0|        if (yych == 'e')
 6521|      0|          goto yy405;
 6522|      0|        goto yy364;
 6523|      0|      } else {
 6524|      0|        if (yych <= 'r')
 6525|      0|          goto yy399;
 6526|      0|        if (yych == 't')
 6527|      0|          goto yy406;
 6528|      0|        goto yy364;
 6529|      0|      }
 6530|      0|    }
 6531|      0|  yy374:
 6532|      0|    yych = *++p;
 6533|      0|    if (yych == 'F')
 6534|      0|      goto yy407;
 6535|      0|    if (yych == 'f')
 6536|      0|      goto yy407;
 6537|      0|    goto yy364;
 6538|      0|  yy375:
 6539|      0|    yych = *++p;
 6540|      0|    if (yych <= 'I') {
 6541|      0|      if (yych == 'E')
 6542|      0|        goto yy408;
 6543|      0|      if (yych <= 'H')
 6544|      0|        goto yy364;
 6545|      0|      goto yy409;
 6546|      0|    } else {
 6547|      0|      if (yych <= 'e') {
 6548|      0|        if (yych <= 'd')
 6549|      0|          goto yy364;
 6550|      0|        goto yy408;
 6551|      0|      } else {
 6552|      0|        if (yych == 'i')
 6553|      0|          goto yy409;
 6554|      0|        goto yy364;
 6555|      0|      }
 6556|      0|    }
 6557|      0|  yy376:
 6558|      0|    yych = *++p;
 6559|      0|    if (yych <= 'E') {
 6560|      0|      if (yych == 'A')
 6561|      0|        goto yy410;
 6562|      0|      if (yych <= 'D')
 6563|      0|        goto yy364;
 6564|      0|      goto yy411;
 6565|      0|    } else {
 6566|      0|      if (yych <= 'a') {
 6567|      0|        if (yych <= '`')
 6568|      0|          goto yy364;
 6569|      0|        goto yy410;
 6570|      0|      } else {
 6571|      0|        if (yych == 'e')
 6572|      0|          goto yy411;
 6573|      0|        goto yy364;
 6574|      0|      }
 6575|      0|    }
 6576|      0|  yy377:
 6577|      0|    yych = *++p;
 6578|      0|    if (yych <= 'O') {
 6579|      0|      if (yych == 'A')
 6580|      0|        goto yy412;
 6581|      0|      if (yych <= 'N')
 6582|      0|        goto yy364;
 6583|      0|      goto yy413;
 6584|      0|    } else {
 6585|      0|      if (yych <= 'a') {
 6586|      0|        if (yych <= '`')
 6587|      0|          goto yy364;
 6588|      0|        goto yy412;
 6589|      0|      } else {
 6590|      0|        if (yych == 'o')
 6591|      0|          goto yy413;
 6592|      0|        goto yy364;
 6593|      0|      }
 6594|      0|    }
 6595|      0|  yy378:
 6596|      0|    yych = *++p;
 6597|      0|    if (yych <= 'P') {
 6598|      0|      if (yych == 'L')
 6599|      0|        goto yy399;
 6600|      0|      if (yych <= 'O')
 6601|      0|        goto yy364;
 6602|      0|      goto yy414;
 6603|      0|    } else {
 6604|      0|      if (yych <= 'l') {
 6605|      0|        if (yych <= 'k')
 6606|      0|          goto yy364;
 6607|      0|        goto yy399;
 6608|      0|      } else {
 6609|      0|        if (yych == 'p')
 6610|      0|          goto yy414;
 6611|      0|        goto yy364;
 6612|      0|      }
 6613|      0|    }
 6614|      0|  yy379:
 6615|      0|    yych = *++p;
 6616|      0|    if (yych <= '>') {
 6617|      0|      if (yych <= ' ') {
 6618|      0|        if (yych <= 0x08)
 6619|      0|          goto yy364;
 6620|      0|        if (yych <= '\r')
 6621|      0|          goto yy415;
 6622|      0|        if (yych <= 0x1F)
 6623|      0|          goto yy364;
 6624|      0|        goto yy415;
 6625|      0|      } else {
 6626|      0|        if (yych == '/')
 6627|      0|          goto yy417;
 6628|      0|        if (yych <= '=')
 6629|      0|          goto yy364;
 6630|      0|        goto yy415;
 6631|      0|      }
 6632|      0|    } else {
 6633|      0|      if (yych <= 'R') {
 6634|      0|        if (yych == 'A')
 6635|      0|          goto yy418;
 6636|      0|        if (yych <= 'Q')
 6637|      0|          goto yy364;
 6638|      0|        goto yy419;
 6639|      0|      } else {
 6640|      0|        if (yych <= 'a') {
 6641|      0|          if (yych <= '`')
 6642|      0|            goto yy364;
 6643|      0|          goto yy418;
 6644|      0|        } else {
 6645|      0|          if (yych == 'r')
 6646|      0|            goto yy419;
 6647|      0|          goto yy364;
 6648|      0|        }
 6649|      0|      }
 6650|      0|    }
 6651|      0|  yy380:
 6652|      0|    yych = *++p;
 6653|      0|    switch (yych) {
 6654|      0|    case 'C':
 6655|      0|    case 'c':
 6656|      0|      goto yy420;
 6657|      0|    case 'E':
 6658|      0|    case 'e':
 6659|      0|      goto yy421;
 6660|      0|    case 'O':
 6661|      0|    case 'o':
 6662|      0|      goto yy422;
 6663|      0|    case 'T':
 6664|      0|    case 't':
 6665|      0|      goto yy423;
 6666|      0|    case 'U':
 6667|      0|    case 'u':
 6668|      0|      goto yy424;
 6669|      0|    default:
 6670|      0|      goto yy364;
 6671|      0|    }
 6672|      0|  yy381:
 6673|      0|    yych = *++p;
 6674|      0|    switch (yych) {
 6675|      0|    case 'A':
 6676|      0|    case 'a':
 6677|      0|      goto yy425;
 6678|      0|    case 'B':
 6679|      0|    case 'b':
 6680|      0|      goto yy426;
 6681|      0|    case 'D':
 6682|      0|    case 'd':
 6683|      0|      goto yy399;
 6684|      0|    case 'E':
 6685|      0|    case 'e':
 6686|      0|      goto yy427;
 6687|      0|    case 'F':
 6688|      0|    case 'f':
 6689|      0|      goto yy428;
 6690|      0|    case 'H':
 6691|      0|    case 'h':
 6692|      0|      goto yy429;
 6693|      0|    case 'I':
 6694|      0|    case 'i':
 6695|      0|      goto yy430;
 6696|      0|    case 'R':
 6697|      0|    case 'r':
 6698|      0|      goto yy431;
 6699|      0|    default:
 6700|      0|      goto yy364;
 6701|      0|    }
 6702|      0|  yy382:
 6703|      0|    yych = *++p;
 6704|      0|    if (yych == 'L')
 6705|      0|      goto yy399;
 6706|      0|    if (yych == 'l')
 6707|      0|      goto yy399;
 6708|      0|    goto yy364;
 6709|      0|  yy383:
 6710|      0|    yych = *++p;
 6711|      0|    if (yych == '-')
 6712|      0|      goto yy432;
 6713|      0|    goto yy364;
 6714|      0|  yy384:
 6715|      0|    ++p;
 6716|      0|    { return 4; }
 6717|      0|  yy386:
 6718|      0|    yych = *++p;
 6719|      0|    if (yych == 'C')
 6720|      0|      goto yy434;
 6721|      0|    if (yych == 'c')
 6722|      0|      goto yy434;
 6723|      0|    goto yy364;
 6724|      0|  yy387:
 6725|      0|    yych = *++p;
 6726|      0|    if (yych <= '/') {
 6727|      0|      if (yych <= 0x1F) {
 6728|      0|        if (yych <= 0x08)
 6729|      0|          goto yy364;
 6730|      0|        if (yych <= '\r')
 6731|      0|          goto yy415;
 6732|      0|        goto yy364;
 6733|      0|      } else {
 6734|      0|        if (yych <= ' ')
 6735|      0|          goto yy415;
 6736|      0|        if (yych <= '.')
 6737|      0|          goto yy364;
 6738|      0|        goto yy417;
 6739|      0|      }
 6740|      0|    } else {
 6741|      0|      if (yych <= '@') {
 6742|      0|        if (yych == '>')
 6743|      0|          goto yy415;
 6744|      0|        goto yy364;
 6745|      0|      } else {
 6746|      0|        if (yych <= 'A')
 6747|      0|          goto yy418;
 6748|      0|        if (yych == 'a')
 6749|      0|          goto yy418;
 6750|      0|        goto yy364;
 6751|      0|      }
 6752|      0|    }
 6753|      0|  yy388:
 6754|      0|    yych = *++p;
 6755|      0|    if (yych <= 'U') {
 6756|      0|      if (yych <= 'N') {
 6757|      0|        if (yych == 'E')
 6758|      0|          goto yy421;
 6759|      0|        goto yy364;
 6760|      0|      } else {
 6761|      0|        if (yych <= 'O')
 6762|      0|          goto yy422;
 6763|      0|        if (yych <= 'T')
 6764|      0|          goto yy364;
 6765|      0|        goto yy424;
 6766|      0|      }
 6767|      0|    } else {
 6768|      0|      if (yych <= 'n') {
 6769|      0|        if (yych == 'e')
 6770|      0|          goto yy421;
 6771|      0|        goto yy364;
 6772|      0|      } else {
 6773|      0|        if (yych <= 'o')
 6774|      0|          goto yy422;
 6775|      0|        if (yych == 'u')
 6776|      0|          goto yy424;
 6777|      0|        goto yy364;
 6778|      0|      }
 6779|      0|    }
 6780|      0|  yy389:
 6781|      0|    yych = *++p;
 6782|      0|    switch (yych) {
 6783|      0|    case 'A':
 6784|      0|    case 'a':
 6785|      0|      goto yy425;
 6786|      0|    case 'B':
 6787|      0|    case 'b':
 6788|      0|      goto yy426;
 6789|      0|    case 'D':
 6790|      0|    case 'd':
 6791|      0|      goto yy399;
 6792|      0|    case 'F':
 6793|      0|    case 'f':
 6794|      0|      goto yy428;
 6795|      0|    case 'H':
 6796|      0|    case 'h':
 6797|      0|      goto yy429;
 6798|      0|    case 'I':
 6799|      0|    case 'i':
 6800|      0|      goto yy430;
 6801|      0|    case 'R':
 6802|      0|    case 'r':
 6803|      0|      goto yy431;
 6804|      0|    default:
 6805|      0|      goto yy364;
 6806|      0|    }
 6807|      0|  yy390:
 6808|      0|    yych = *++p;
 6809|      0|    if (yych == 'D')
 6810|      0|      goto yy435;
 6811|      0|    if (yych == 'd')
 6812|      0|      goto yy435;
 6813|      0|    goto yy364;
 6814|      0|  yy391:
 6815|      0|    yych = *++p;
 6816|      0|    if (yych == 'T')
 6817|      0|      goto yy436;
 6818|      0|    if (yych == 't')
 6819|      0|      goto yy436;
 6820|      0|    goto yy364;
 6821|      0|  yy392:
 6822|      0|    yych = *++p;
 6823|      0|    if (yych == 'I')
 6824|      0|      goto yy437;
 6825|      0|    if (yych == 'i')
 6826|      0|      goto yy437;
 6827|      0|    goto yy364;
 6828|      0|  yy393:
 6829|      0|    yych = *++p;
 6830|      0|    if (yych == 'S')
 6831|      0|      goto yy438;
 6832|      0|    if (yych == 's')
 6833|      0|      goto yy438;
 6834|      0|    goto yy364;
 6835|      0|  yy394:
 6836|      0|    yych = *++p;
 6837|      0|    if (yych == 'O')
 6838|      0|      goto yy439;
 6839|      0|    if (yych == 'o')
 6840|      0|      goto yy439;
 6841|      0|    goto yy364;
 6842|      0|  yy395:
 6843|      0|    yych = *++p;
 6844|      0|    if (yych == 'D')
 6845|      0|      goto yy440;
 6846|      0|    if (yych == 'd')
 6847|      0|      goto yy440;
 6848|      0|    goto yy364;
 6849|      0|  yy396:
 6850|      0|    yych = *++p;
 6851|      0|    if (yych == 'P')
 6852|      0|      goto yy441;
 6853|      0|    if (yych == 'p')
 6854|      0|      goto yy441;
 6855|      0|    goto yy364;
 6856|      0|  yy397:
 6857|      0|    yych = *++p;
 6858|      0|    if (yych == 'N')
 6859|      0|      goto yy442;
 6860|      0|    if (yych == 'n')
 6861|      0|      goto yy442;
 6862|      0|    goto yy364;
 6863|      0|  yy398:
 6864|      0|    yych = *++p;
 6865|      0|    if (yych == 'L')
 6866|      0|      goto yy443;
 6867|      0|    if (yych == 'l')
 6868|      0|      goto yy443;
 6869|      0|    goto yy364;
 6870|      0|  yy399:
 6871|      0|    yych = *++p;
 6872|      0|    if (yych <= ' ') {
 6873|      0|      if (yych <= 0x08)
 6874|      0|        goto yy364;
 6875|      0|      if (yych <= '\r')
 6876|      0|        goto yy415;
 6877|      0|      if (yych <= 0x1F)
 6878|      0|        goto yy364;
 6879|      0|      goto yy415;
 6880|      0|    } else {
 6881|      0|      if (yych <= '/') {
 6882|      0|        if (yych <= '.')
 6883|      0|          goto yy364;
 6884|      0|        goto yy417;
 6885|      0|      } else {
 6886|      0|        if (yych == '>')
 6887|      0|          goto yy415;
 6888|      0|        goto yy364;
 6889|      0|      }
 6890|      0|    }
 6891|      0|  yy400:
 6892|      0|    yych = *++p;
 6893|      0|    if (yych == 'T')
 6894|      0|      goto yy444;
 6895|      0|    if (yych == 't')
 6896|      0|      goto yy444;
 6897|      0|    goto yy364;
 6898|      0|  yy401:
 6899|      0|    yych = *++p;
 6900|      0|    if (yych <= 'V') {
 6901|      0|      if (yych <= 'Q') {
 6902|      0|        if (yych == 'A')
 6903|      0|          goto yy445;
 6904|      0|        goto yy364;
 6905|      0|      } else {
 6906|      0|        if (yych <= 'R')
 6907|      0|          goto yy399;
 6908|      0|        if (yych <= 'U')
 6909|      0|          goto yy364;
 6910|      0|        goto yy399;
 6911|      0|      }
 6912|      0|    } else {
 6913|      0|      if (yych <= 'q') {
 6914|      0|        if (yych == 'a')
 6915|      0|          goto yy445;
 6916|      0|        goto yy364;
 6917|      0|      } else {
 6918|      0|        if (yych <= 'r')
 6919|      0|          goto yy399;
 6920|      0|        if (yych == 'v')
 6921|      0|          goto yy399;
 6922|      0|        goto yy364;
 6923|      0|      }
 6924|      0|    }
 6925|      0|  yy402:
 6926|      0|    yych = *++p;
 6927|      0|    if (yych <= 'G') {
 6928|      0|      if (yych == 'E')
 6929|      0|        goto yy446;
 6930|      0|      if (yych <= 'F')
 6931|      0|        goto yy364;
 6932|      0|      goto yy447;
 6933|      0|    } else {
 6934|      0|      if (yych <= 'e') {
 6935|      0|        if (yych <= 'd')
 6936|      0|          goto yy364;
 6937|      0|        goto yy446;
 6938|      0|      } else {
 6939|      0|        if (yych == 'g')
 6940|      0|          goto yy447;
 6941|      0|        goto yy364;
 6942|      0|      }
 6943|      0|    }
 6944|      0|  yy403:
 6945|      0|    yych = *++p;
 6946|      0|    if (yych <= 'R') {
 6947|      0|      if (yych == 'O')
 6948|      0|        goto yy442;
 6949|      0|      if (yych <= 'Q')
 6950|      0|        goto yy364;
 6951|      0|      goto yy448;
 6952|      0|    } else {
 6953|      0|      if (yych <= 'o') {
 6954|      0|        if (yych <= 'n')
 6955|      0|          goto yy364;
 6956|      0|        goto yy442;
 6957|      0|      } else {
 6958|      0|        if (yych == 'r')
 6959|      0|          goto yy448;
 6960|      0|        goto yy364;
 6961|      0|      }
 6962|      0|    }
 6963|      0|  yy404:
 6964|      0|    yych = *++p;
 6965|      0|    if (yych == 'A')
 6966|      0|      goto yy449;
 6967|      0|    if (yych == 'a')
 6968|      0|      goto yy449;
 6969|      0|    goto yy364;
 6970|      0|  yy405:
 6971|      0|    yych = *++p;
 6972|      0|    if (yych == 'A')
 6973|      0|      goto yy450;
 6974|      0|    if (yych == 'a')
 6975|      0|      goto yy450;
 6976|      0|    goto yy364;
 6977|      0|  yy406:
 6978|      0|    yych = *++p;
 6979|      0|    if (yych == 'M')
 6980|      0|      goto yy382;
 6981|      0|    if (yych == 'm')
 6982|      0|      goto yy382;
 6983|      0|    goto yy364;
 6984|      0|  yy407:
 6985|      0|    yych = *++p;
 6986|      0|    if (yych == 'R')
 6987|      0|      goto yy451;
 6988|      0|    if (yych == 'r')
 6989|      0|      goto yy451;
 6990|      0|    goto yy364;
 6991|      0|  yy408:
 6992|      0|    yych = *++p;
 6993|      0|    if (yych == 'G')
 6994|      0|      goto yy452;
 6995|      0|    if (yych == 'g')
 6996|      0|      goto yy452;
 6997|      0|    goto yy364;
 6998|      0|  yy409:
 6999|      0|    yych = *++p;
 7000|      0|    if (yych <= '/') {
 7001|      0|      if (yych <= 0x1F) {
 7002|      0|        if (yych <= 0x08)
 7003|      0|          goto yy364;
 7004|      0|        if (yych <= '\r')
 7005|      0|          goto yy415;
 7006|      0|        goto yy364;
 7007|      0|      } else {
 7008|      0|        if (yych <= ' ')
 7009|      0|          goto yy415;
 7010|      0|        if (yych <= '.')
 7011|      0|          goto yy364;
 7012|      0|        goto yy417;
 7013|      0|      }
 7014|      0|    } else {
 7015|      0|      if (yych <= 'M') {
 7016|      0|        if (yych == '>')
 7017|      0|          goto yy415;
 7018|      0|        goto yy364;
 7019|      0|      } else {
 7020|      0|        if (yych <= 'N')
 7021|      0|          goto yy453;
 7022|      0|        if (yych == 'n')
 7023|      0|          goto yy453;
 7024|      0|        goto yy364;
 7025|      0|      }
 7026|      0|    }
 7027|      0|  yy410:
 7028|      0|    yych = *++p;
 7029|      0|    if (yych == 'I')
 7030|      0|      goto yy454;
 7031|      0|    if (yych == 'i')
 7032|      0|      goto yy454;
 7033|      0|    goto yy364;
 7034|      0|  yy411:
 7035|      0|    yych = *++p;
 7036|      0|    if (yych == 'N')
 7037|      0|      goto yy455;
 7038|      0|    if (yych == 'n')
 7039|      0|      goto yy455;
 7040|      0|    goto yy364;
 7041|      0|  yy412:
 7042|      0|    yych = *++p;
 7043|      0|    if (yych == 'V')
 7044|      0|      goto yy399;
 7045|      0|    if (yych == 'v')
 7046|      0|      goto yy399;
 7047|      0|    goto yy364;
 7048|      0|  yy413:
 7049|      0|    yych = *++p;
 7050|      0|    if (yych == 'F')
 7051|      0|      goto yy456;
 7052|      0|    if (yych == 'f')
 7053|      0|      goto yy456;
 7054|      0|    goto yy364;
 7055|      0|  yy414:
 7056|      0|    yych = *++p;
 7057|      0|    if (yych == 'T')
 7058|      0|      goto yy457;
 7059|      0|    if (yych == 't')
 7060|      0|      goto yy457;
 7061|      0|    goto yy364;
 7062|      0|  yy415:
 7063|      0|    ++p;
 7064|      0|    { return 6; }
 7065|      0|  yy417:
 7066|      0|    yych = *++p;
 7067|      0|    if (yych == '>')
 7068|      0|      goto yy415;
 7069|      0|    goto yy364;
 7070|      0|  yy418:
 7071|      0|    yych = *++p;
 7072|      0|    if (yych == 'R')
 7073|      0|      goto yy458;
 7074|      0|    if (yych == 'r')
 7075|      0|      goto yy458;
 7076|      0|    goto yy364;
 7077|      0|  yy419:
 7078|      0|    yych = *++p;
 7079|      0|    if (yych == 'E')
 7080|      0|      goto yy459;
 7081|      0|    if (yych == 'e')
 7082|      0|      goto yy459;
 7083|      0|    goto yy364;
 7084|      0|  yy420:
 7085|      0|    yych = *++p;
 7086|      0|    if (yych == 'R')
 7087|      0|      goto yy460;
 7088|      0|    if (yych == 'r')
 7089|      0|      goto yy460;
 7090|      0|    goto yy364;
 7091|      0|  yy421:
 7092|      0|    yych = *++p;
 7093|      0|    if (yych == 'C')
 7094|      0|      goto yy441;
 7095|      0|    if (yych == 'c')
 7096|      0|      goto yy441;
 7097|      0|    goto yy364;
 7098|      0|  yy422:
 7099|      0|    yych = *++p;
 7100|      0|    if (yych == 'U')
 7101|      0|      goto yy461;
 7102|      0|    if (yych == 'u')
 7103|      0|      goto yy461;
 7104|      0|    goto yy364;
 7105|      0|  yy423:
 7106|      0|    yych = *++p;
 7107|      0|    if (yych == 'Y')
 7108|      0|      goto yy462;
 7109|      0|    if (yych == 'y')
 7110|      0|      goto yy462;
 7111|      0|    goto yy364;
 7112|      0|  yy424:
 7113|      0|    yych = *++p;
 7114|      0|    if (yych == 'M')
 7115|      0|      goto yy463;
 7116|      0|    if (yych == 'm')
 7117|      0|      goto yy463;
 7118|      0|    goto yy364;
 7119|      0|  yy425:
 7120|      0|    yych = *++p;
 7121|      0|    if (yych == 'B')
 7122|      0|      goto yy464;
 7123|      0|    if (yych == 'b')
 7124|      0|      goto yy464;
 7125|      0|    goto yy364;
 7126|      0|  yy426:
 7127|      0|    yych = *++p;
 7128|      0|    if (yych == 'O')
 7129|      0|      goto yy395;
 7130|      0|    if (yych == 'o')
 7131|      0|      goto yy395;
 7132|      0|    goto yy364;
 7133|      0|  yy427:
 7134|      0|    yych = *++p;
 7135|      0|    if (yych == 'X')
 7136|      0|      goto yy465;
 7137|      0|    if (yych == 'x')
 7138|      0|      goto yy465;
 7139|      0|    goto yy364;
 7140|      0|  yy428:
 7141|      0|    yych = *++p;
 7142|      0|    if (yych == 'O')
 7143|      0|      goto yy466;
 7144|      0|    if (yych == 'o')
 7145|      0|      goto yy466;
 7146|      0|    goto yy364;
 7147|      0|  yy429:
 7148|      0|    yych = *++p;
 7149|      0|    if (yych <= '/') {
 7150|      0|      if (yych <= 0x1F) {
 7151|      0|        if (yych <= 0x08)
 7152|      0|          goto yy364;
 7153|      0|        if (yych <= '\r')
 7154|      0|          goto yy415;
 7155|      0|        goto yy364;
 7156|      0|      } else {
 7157|      0|        if (yych <= ' ')
 7158|      0|          goto yy415;
 7159|      0|        if (yych <= '.')
 7160|      0|          goto yy364;
 7161|      0|        goto yy417;
 7162|      0|      }
 7163|      0|    } else {
 7164|      0|      if (yych <= 'D') {
 7165|      0|        if (yych == '>')
 7166|      0|          goto yy415;
 7167|      0|        goto yy364;
 7168|      0|      } else {
 7169|      0|        if (yych <= 'E')
 7170|      0|          goto yy467;
 7171|      0|        if (yych == 'e')
 7172|      0|          goto yy467;
 7173|      0|        goto yy364;
 7174|      0|      }
 7175|      0|    }
 7176|      0|  yy430:
 7177|      0|    yych = *++p;
 7178|      0|    if (yych == 'T')
 7179|      0|      goto yy464;
 7180|      0|    if (yych == 't')
 7181|      0|      goto yy464;
 7182|      0|    goto yy364;
 7183|      0|  yy431:
 7184|      0|    yych = *++p;
 7185|      0|    if (yych <= '/') {
 7186|      0|      if (yych <= 0x1F) {
 7187|      0|        if (yych <= 0x08)
 7188|      0|          goto yy364;
 7189|      0|        if (yych <= '\r')
 7190|      0|          goto yy415;
 7191|      0|        goto yy364;
 7192|      0|      } else {
 7193|      0|        if (yych <= ' ')
 7194|      0|          goto yy415;
 7195|      0|        if (yych <= '.')
 7196|      0|          goto yy364;
 7197|      0|        goto yy417;
 7198|      0|      }
 7199|      0|    } else {
 7200|      0|      if (yych <= '@') {
 7201|      0|        if (yych == '>')
 7202|      0|          goto yy415;
 7203|      0|        goto yy364;
 7204|      0|      } else {
 7205|      0|        if (yych <= 'A')
 7206|      0|          goto yy468;
 7207|      0|        if (yych == 'a')
 7208|      0|          goto yy468;
 7209|      0|        goto yy364;
 7210|      0|      }
 7211|      0|    }
 7212|      0|  yy432:
 7213|      0|    ++p;
 7214|      0|    { return 2; }
 7215|      0|  yy434:
 7216|      0|    yych = *++p;
 7217|      0|    if (yych == 'D')
 7218|      0|      goto yy469;
 7219|      0|    if (yych == 'd')
 7220|      0|      goto yy469;
 7221|      0|    goto yy364;
 7222|      0|  yy435:
 7223|      0|    yych = *++p;
 7224|      0|    if (yych == 'R')
 7225|      0|      goto yy470;
 7226|      0|    if (yych == 'r')
 7227|      0|      goto yy470;
 7228|      0|    goto yy364;
 7229|      0|  yy436:
 7230|      0|    yych = *++p;
 7231|      0|    if (yych == 'I')
 7232|      0|      goto yy471;
 7233|      0|    if (yych == 'i')
 7234|      0|      goto yy471;
 7235|      0|    goto yy364;
 7236|      0|  yy437:
 7237|      0|    yych = *++p;
 7238|      0|    if (yych == 'D')
 7239|      0|      goto yy472;
 7240|      0|    if (yych == 'd')
 7241|      0|      goto yy472;
 7242|      0|    goto yy364;
 7243|      0|  yy438:
 7244|      0|    yych = *++p;
 7245|      0|    if (yych == 'E')
 7246|      0|      goto yy473;
 7247|      0|    if (yych == 'e')
 7248|      0|      goto yy473;
 7249|      0|    goto yy364;
 7250|      0|  yy439:
 7251|      0|    yych = *++p;
 7252|      0|    if (yych == 'C')
 7253|      0|      goto yy474;
 7254|      0|    if (yych == 'c')
 7255|      0|      goto yy474;
 7256|      0|    goto yy364;
 7257|      0|  yy440:
 7258|      0|    yych = *++p;
 7259|      0|    if (yych == 'Y')
 7260|      0|      goto yy399;
 7261|      0|    if (yych == 'y')
 7262|      0|      goto yy399;
 7263|      0|    goto yy364;
 7264|      0|  yy441:
 7265|      0|    yych = *++p;
 7266|      0|    if (yych == 'T')
 7267|      0|      goto yy475;
 7268|      0|    if (yych == 't')
 7269|      0|      goto yy475;
 7270|      0|    goto yy364;
 7271|      0|  yy442:
 7272|      0|    yych = *++p;
 7273|      0|    if (yych == 'T')
 7274|      0|      goto yy476;
 7275|      0|    if (yych == 't')
 7276|      0|      goto yy476;
 7277|      0|    goto yy364;
 7278|      0|  yy443:
 7279|      0|    yych = *++p;
 7280|      0|    if (yych <= '/') {
 7281|      0|      if (yych <= 0x1F) {
 7282|      0|        if (yych <= 0x08)
 7283|      0|          goto yy364;
 7284|      0|        if (yych <= '\r')
 7285|      0|          goto yy415;
 7286|      0|        goto yy364;
 7287|      0|      } else {
 7288|      0|        if (yych <= ' ')
 7289|      0|          goto yy415;
 7290|      0|        if (yych <= '.')
 7291|      0|          goto yy364;
 7292|      0|        goto yy417;
 7293|      0|      }
 7294|      0|    } else {
 7295|      0|      if (yych <= 'F') {
 7296|      0|        if (yych == '>')
 7297|      0|          goto yy415;
 7298|      0|        goto yy364;
 7299|      0|      } else {
 7300|      0|        if (yych <= 'G')
 7301|      0|          goto yy477;
 7302|      0|        if (yych == 'g')
 7303|      0|          goto yy477;
 7304|      0|        goto yy364;
 7305|      0|      }
 7306|      0|    }
 7307|      0|  yy444:
 7308|      0|    yych = *++p;
 7309|      0|    if (yych == 'A')
 7310|      0|      goto yy478;
 7311|      0|    if (yych == 'a')
 7312|      0|      goto yy478;
 7313|      0|    goto yy364;
 7314|      0|  yy445:
 7315|      0|    yych = *++p;
 7316|      0|    if (yych == 'L')
 7317|      0|      goto yy479;
 7318|      0|    if (yych == 'l')
 7319|      0|      goto yy479;
 7320|      0|    goto yy364;
 7321|      0|  yy446:
 7322|      0|    yych = *++p;
 7323|      0|    if (yych == 'L')
 7324|      0|      goto yy480;
 7325|      0|    if (yych == 'l')
 7326|      0|      goto yy480;
 7327|      0|    goto yy364;
 7328|      0|  yy447:
 7329|      0|    yych = *++p;
 7330|      0|    if (yych <= 'U') {
 7331|      0|      if (yych == 'C')
 7332|      0|        goto yy481;
 7333|      0|      if (yych <= 'T')
 7334|      0|        goto yy364;
 7335|      0|      goto yy482;
 7336|      0|    } else {
 7337|      0|      if (yych <= 'c') {
 7338|      0|        if (yych <= 'b')
 7339|      0|          goto yy364;
 7340|      0|        goto yy481;
 7341|      0|      } else {
 7342|      0|        if (yych == 'u')
 7343|      0|          goto yy482;
 7344|      0|        goto yy364;
 7345|      0|      }
 7346|      0|    }
 7347|      0|  yy448:
 7348|      0|    yych = *++p;
 7349|      0|    if (yych == 'M')
 7350|      0|      goto yy399;
 7351|      0|    if (yych == 'm')
 7352|      0|      goto yy399;
 7353|      0|    goto yy364;
 7354|      0|  yy449:
 7355|      0|    yych = *++p;
 7356|      0|    if (yych == 'M')
 7357|      0|      goto yy483;
 7358|      0|    if (yych == 'm')
 7359|      0|      goto yy483;
 7360|      0|    goto yy364;
 7361|      0|  yy450:
 7362|      0|    yych = *++p;
 7363|      0|    if (yych == 'D')
 7364|      0|      goto yy484;
 7365|      0|    if (yych == 'd')
 7366|      0|      goto yy484;
 7367|      0|    goto yy364;
 7368|      0|  yy451:
 7369|      0|    yych = *++p;
 7370|      0|    if (yych == 'A')
 7371|      0|      goto yy485;
 7372|      0|    if (yych == 'a')
 7373|      0|      goto yy485;
 7374|      0|    goto yy364;
 7375|      0|  yy452:
 7376|      0|    yych = *++p;
 7377|      0|    if (yych == 'E')
 7378|      0|      goto yy486;
 7379|      0|    if (yych == 'e')
 7380|      0|      goto yy486;
 7381|      0|    goto yy364;
 7382|      0|  yy453:
 7383|      0|    yych = *++p;
 7384|      0|    if (yych == 'K')
 7385|      0|      goto yy399;
 7386|      0|    if (yych == 'k')
 7387|      0|      goto yy399;
 7388|      0|    goto yy364;
 7389|      0|  yy454:
 7390|      0|    yych = *++p;
 7391|      0|    if (yych == 'N')
 7392|      0|      goto yy399;
 7393|      0|    if (yych == 'n')
 7394|      0|      goto yy399;
 7395|      0|    goto yy364;
 7396|      0|  yy455:
 7397|      0|    yych = *++p;
 7398|      0|    if (yych == 'U')
 7399|      0|      goto yy487;
 7400|      0|    if (yych == 'u')
 7401|      0|      goto yy487;
 7402|      0|    goto yy364;
 7403|      0|  yy456:
 7404|      0|    yych = *++p;
 7405|      0|    if (yych == 'R')
 7406|      0|      goto yy488;
 7407|      0|    if (yych == 'r')
 7408|      0|      goto yy488;
 7409|      0|    goto yy364;
 7410|      0|  yy457:
 7411|      0|    yych = *++p;
 7412|      0|    if (yych <= 'I') {
 7413|      0|      if (yych == 'G')
 7414|      0|        goto yy477;
 7415|      0|      if (yych <= 'H')
 7416|      0|        goto yy364;
 7417|      0|      goto yy489;
 7418|      0|    } else {
 7419|      0|      if (yych <= 'g') {
 7420|      0|        if (yych <= 'f')
 7421|      0|          goto yy364;
 7422|      0|        goto yy477;
 7423|      0|      } else {
 7424|      0|        if (yych == 'i')
 7425|      0|          goto yy489;
 7426|      0|        goto yy364;
 7427|      0|      }
 7428|      0|    }
 7429|      0|  yy458:
 7430|      0|    yych = *++p;
 7431|      0|    if (yych == 'A')
 7432|      0|      goto yy448;
 7433|      0|    if (yych == 'a')
 7434|      0|      goto yy448;
 7435|      0|    goto yy364;
 7436|      0|  yy459:
 7437|      0|    yych = *++p;
 7438|      0|    if (yych <= 0x1F) {
 7439|      0|      if (yych <= 0x08)
 7440|      0|        goto yy364;
 7441|      0|      if (yych <= '\r')
 7442|      0|        goto yy490;
 7443|      0|      goto yy364;
 7444|      0|    } else {
 7445|      0|      if (yych <= ' ')
 7446|      0|        goto yy490;
 7447|      0|      if (yych == '>')
 7448|      0|        goto yy490;
 7449|      0|      goto yy364;
 7450|      0|    }
 7451|      0|  yy460:
 7452|      0|    yych = *++p;
 7453|      0|    if (yych == 'I')
 7454|      0|      goto yy492;
 7455|      0|    if (yych == 'i')
 7456|      0|      goto yy492;
 7457|      0|    goto yy364;
 7458|      0|  yy461:
 7459|      0|    yych = *++p;
 7460|      0|    if (yych == 'R')
 7461|      0|      goto yy493;
 7462|      0|    if (yych == 'r')
 7463|      0|      goto yy493;
 7464|      0|    goto yy364;
 7465|      0|  yy462:
 7466|      0|    yych = *++p;
 7467|      0|    if (yych == 'L')
 7468|      0|      goto yy419;
 7469|      0|    if (yych == 'l')
 7470|      0|      goto yy419;
 7471|      0|    goto yy364;
 7472|      0|  yy463:
 7473|      0|    yych = *++p;
 7474|      0|    if (yych == 'M')
 7475|      0|      goto yy494;
 7476|      0|    if (yych == 'm')
 7477|      0|      goto yy494;
 7478|      0|    goto yy364;
 7479|      0|  yy464:
 7480|      0|    yych = *++p;
 7481|      0|    if (yych == 'L')
 7482|      0|      goto yy472;
 7483|      0|    if (yych == 'l')
 7484|      0|      goto yy472;
 7485|      0|    goto yy364;
 7486|      0|  yy465:
 7487|      0|    yych = *++p;
 7488|      0|    if (yych == 'T')
 7489|      0|      goto yy495;
 7490|      0|    if (yych == 't')
 7491|      0|      goto yy495;
 7492|      0|    goto yy364;
 7493|      0|  yy466:
 7494|      0|    yych = *++p;
 7495|      0|    if (yych == 'O')
 7496|      0|      goto yy496;
 7497|      0|    if (yych == 'o')
 7498|      0|      goto yy496;
 7499|      0|    goto yy364;
 7500|      0|  yy467:
 7501|      0|    yych = *++p;
 7502|      0|    if (yych == 'A')
 7503|      0|      goto yy497;
 7504|      0|    if (yych == 'a')
 7505|      0|      goto yy497;
 7506|      0|    goto yy364;
 7507|      0|  yy468:
 7508|      0|    yych = *++p;
 7509|      0|    if (yych == 'C')
 7510|      0|      goto yy453;
 7511|      0|    if (yych == 'c')
 7512|      0|      goto yy453;
 7513|      0|    goto yy364;
 7514|      0|  yy469:
 7515|      0|    yych = *++p;
 7516|      0|    if (yych == 'A')
 7517|      0|      goto yy498;
 7518|      0|    if (yych == 'a')
 7519|      0|      goto yy498;
 7520|      0|    goto yy364;
 7521|      0|  yy470:
 7522|      0|    yych = *++p;
 7523|      0|    if (yych == 'E')
 7524|      0|      goto yy499;
 7525|      0|    if (yych == 'e')
 7526|      0|      goto yy499;
 7527|      0|    goto yy364;
 7528|      0|  yy471:
 7529|      0|    yych = *++p;
 7530|      0|    if (yych == 'C')
 7531|      0|      goto yy464;
 7532|      0|    if (yych == 'c')
 7533|      0|      goto yy464;
 7534|      0|    goto yy364;
 7535|      0|  yy472:
 7536|      0|    yych = *++p;
 7537|      0|    if (yych == 'E')
 7538|      0|      goto yy399;
 7539|      0|    if (yych == 'e')
 7540|      0|      goto yy399;
 7541|      0|    goto yy364;
 7542|      0|  yy473:
 7543|      0|    yych = *++p;
 7544|      0|    if (yych <= '/') {
 7545|      0|      if (yych <= 0x1F) {
 7546|      0|        if (yych <= 0x08)
 7547|      0|          goto yy364;
 7548|      0|        if (yych <= '\r')
 7549|      0|          goto yy415;
 7550|      0|        goto yy364;
 7551|      0|      } else {
 7552|      0|        if (yych <= ' ')
 7553|      0|          goto yy415;
 7554|      0|        if (yych <= '.')
 7555|      0|          goto yy364;
 7556|      0|        goto yy417;
 7557|      0|      }
 7558|      0|    } else {
 7559|      0|      if (yych <= 'E') {
 7560|      0|        if (yych == '>')
 7561|      0|          goto yy415;
 7562|      0|        goto yy364;
 7563|      0|      } else {
 7564|      0|        if (yych <= 'F')
 7565|      0|          goto yy500;
 7566|      0|        if (yych == 'f')
 7567|      0|          goto yy500;
 7568|      0|        goto yy364;
 7569|      0|      }
 7570|      0|    }
 7571|      0|  yy474:
 7572|      0|    yych = *++p;
 7573|      0|    if (yych == 'K')
 7574|      0|      goto yy501;
 7575|      0|    if (yych == 'k')
 7576|      0|      goto yy501;
 7577|      0|    goto yy364;
 7578|      0|  yy475:
 7579|      0|    yych = *++p;
 7580|      0|    if (yych == 'I')
 7581|      0|      goto yy489;
 7582|      0|    if (yych == 'i')
 7583|      0|      goto yy489;
 7584|      0|    goto yy364;
 7585|      0|  yy476:
 7586|      0|    yych = *++p;
 7587|      0|    if (yych == 'E')
 7588|      0|      goto yy502;
 7589|      0|    if (yych == 'e')
 7590|      0|      goto yy502;
 7591|      0|    goto yy364;
 7592|      0|  yy477:
 7593|      0|    yych = *++p;
 7594|      0|    if (yych == 'R')
 7595|      0|      goto yy503;
 7596|      0|    if (yych == 'r')
 7597|      0|      goto yy503;
 7598|      0|    goto yy364;
 7599|      0|  yy478:
 7600|      0|    yych = *++p;
 7601|      0|    if (yych == 'I')
 7602|      0|      goto yy504;
 7603|      0|    if (yych == 'i')
 7604|      0|      goto yy504;
 7605|      0|    goto yy364;
 7606|      0|  yy479:
 7607|      0|    yych = *++p;
 7608|      0|    if (yych == 'O')
 7609|      0|      goto yy505;
 7610|      0|    if (yych == 'o')
 7611|      0|      goto yy505;
 7612|      0|    goto yy364;
 7613|      0|  yy480:
 7614|      0|    yych = *++p;
 7615|      0|    if (yych == 'D')
 7616|      0|      goto yy506;
 7617|      0|    if (yych == 'd')
 7618|      0|      goto yy506;
 7619|      0|    goto yy364;
 7620|      0|  yy481:
 7621|      0|    yych = *++p;
 7622|      0|    if (yych == 'A')
 7623|      0|      goto yy396;
 7624|      0|    if (yych == 'a')
 7625|      0|      goto yy396;
 7626|      0|    goto yy364;
 7627|      0|  yy482:
 7628|      0|    yych = *++p;
 7629|      0|    if (yych == 'R')
 7630|      0|      goto yy472;
 7631|      0|    if (yych == 'r')
 7632|      0|      goto yy472;
 7633|      0|    goto yy364;
 7634|      0|  yy483:
 7635|      0|    yych = *++p;
 7636|      0|    if (yych == 'E')
 7637|      0|      goto yy507;
 7638|      0|    if (yych == 'e')
 7639|      0|      goto yy507;
 7640|      0|    goto yy364;
 7641|      0|  yy484:
 7642|      0|    yych = *++p;
 7643|      0|    if (yych <= '/') {
 7644|      0|      if (yych <= 0x1F) {
 7645|      0|        if (yych <= 0x08)
 7646|      0|          goto yy364;
 7647|      0|        if (yych <= '\r')
 7648|      0|          goto yy415;
 7649|      0|        goto yy364;
 7650|      0|      } else {
 7651|      0|        if (yych <= ' ')
 7652|      0|          goto yy415;
 7653|      0|        if (yych <= '.')
 7654|      0|          goto yy364;
 7655|      0|        goto yy417;
 7656|      0|      }
 7657|      0|    } else {
 7658|      0|      if (yych <= 'D') {
 7659|      0|        if (yych == '>')
 7660|      0|          goto yy415;
 7661|      0|        goto yy364;
 7662|      0|      } else {
 7663|      0|        if (yych <= 'E')
 7664|      0|          goto yy502;
 7665|      0|        if (yych == 'e')
 7666|      0|          goto yy502;
 7667|      0|        goto yy364;
 7668|      0|      }
 7669|      0|    }
 7670|      0|  yy485:
 7671|      0|    yych = *++p;
 7672|      0|    if (yych == 'M')
 7673|      0|      goto yy472;
 7674|      0|    if (yych == 'm')
 7675|      0|      goto yy472;
 7676|      0|    goto yy364;
 7677|      0|  yy486:
 7678|      0|    yych = *++p;
 7679|      0|    if (yych == 'N')
 7680|      0|      goto yy497;
 7681|      0|    if (yych == 'n')
 7682|      0|      goto yy497;
 7683|      0|    goto yy364;
 7684|      0|  yy487:
 7685|      0|    yych = *++p;
 7686|      0|    if (yych <= '/') {
 7687|      0|      if (yych <= 0x1F) {
 7688|      0|        if (yych <= 0x08)
 7689|      0|          goto yy364;
 7690|      0|        if (yych <= '\r')
 7691|      0|          goto yy415;
 7692|      0|        goto yy364;
 7693|      0|      } else {
 7694|      0|        if (yych <= ' ')
 7695|      0|          goto yy415;
 7696|      0|        if (yych <= '.')
 7697|      0|          goto yy364;
 7698|      0|        goto yy417;
 7699|      0|      }
 7700|      0|    } else {
 7701|      0|      if (yych <= 'H') {
 7702|      0|        if (yych == '>')
 7703|      0|          goto yy415;
 7704|      0|        goto yy364;
 7705|      0|      } else {
 7706|      0|        if (yych <= 'I')
 7707|      0|          goto yy508;
 7708|      0|        if (yych == 'i')
 7709|      0|          goto yy508;
 7710|      0|        goto yy364;
 7711|      0|      }
 7712|      0|    }
 7713|      0|  yy488:
 7714|      0|    yych = *++p;
 7715|      0|    if (yych == 'A')
 7716|      0|      goto yy509;
 7717|      0|    if (yych == 'a')
 7718|      0|      goto yy509;
 7719|      0|    goto yy364;
 7720|      0|  yy489:
 7721|      0|    yych = *++p;
 7722|      0|    if (yych == 'O')
 7723|      0|      goto yy454;
 7724|      0|    if (yych == 'o')
 7725|      0|      goto yy454;
 7726|      0|    goto yy364;
 7727|      0|  yy490:
 7728|      0|    ++p;
 7729|      0|    { return 1; }
 7730|      0|  yy492:
 7731|      0|    yych = *++p;
 7732|      0|    if (yych == 'P')
 7733|      0|      goto yy510;
 7734|      0|    if (yych == 'p')
 7735|      0|      goto yy510;
 7736|      0|    goto yy364;
 7737|      0|  yy493:
 7738|      0|    yych = *++p;
 7739|      0|    if (yych == 'C')
 7740|      0|      goto yy472;
 7741|      0|    if (yych == 'c')
 7742|      0|      goto yy472;
 7743|      0|    goto yy364;
 7744|      0|  yy494:
 7745|      0|    yych = *++p;
 7746|      0|    if (yych == 'A')
 7747|      0|      goto yy511;
 7748|      0|    if (yych == 'a')
 7749|      0|      goto yy511;
 7750|      0|    goto yy364;
 7751|      0|  yy495:
 7752|      0|    yych = *++p;
 7753|      0|    if (yych == 'A')
 7754|      0|      goto yy512;
 7755|      0|    if (yych == 'a')
 7756|      0|      goto yy512;
 7757|      0|    goto yy364;
 7758|      0|  yy496:
 7759|      0|    yych = *++p;
 7760|      0|    if (yych == 'T')
 7761|      0|      goto yy399;
 7762|      0|    if (yych == 't')
 7763|      0|      goto yy399;
 7764|      0|    goto yy364;
 7765|      0|  yy497:
 7766|      0|    yych = *++p;
 7767|      0|    if (yych == 'D')
 7768|      0|      goto yy399;
 7769|      0|    if (yych == 'd')
 7770|      0|      goto yy399;
 7771|      0|    goto yy364;
 7772|      0|  yy498:
 7773|      0|    yych = *++p;
 7774|      0|    if (yych == 'T')
 7775|      0|      goto yy513;
 7776|      0|    if (yych == 't')
 7777|      0|      goto yy513;
 7778|      0|    goto yy364;
 7779|      0|  yy499:
 7780|      0|    yych = *++p;
 7781|      0|    if (yych == 'S')
 7782|      0|      goto yy514;
 7783|      0|    if (yych == 's')
 7784|      0|      goto yy514;
 7785|      0|    goto yy364;
 7786|      0|  yy500:
 7787|      0|    yych = *++p;
 7788|      0|    if (yych == 'O')
 7789|      0|      goto yy515;
 7790|      0|    if (yych == 'o')
 7791|      0|      goto yy515;
 7792|      0|    goto yy364;
 7793|      0|  yy501:
 7794|      0|    yych = *++p;
 7795|      0|    if (yych == 'Q')
 7796|      0|      goto yy516;
 7797|      0|    if (yych == 'q')
 7798|      0|      goto yy516;
 7799|      0|    goto yy364;
 7800|      0|  yy502:
 7801|      0|    yych = *++p;
 7802|      0|    if (yych == 'R')
 7803|      0|      goto yy399;
 7804|      0|    if (yych == 'r')
 7805|      0|      goto yy399;
 7806|      0|    goto yy364;
 7807|      0|  yy503:
 7808|      0|    yych = *++p;
 7809|      0|    if (yych == 'O')
 7810|      0|      goto yy517;
 7811|      0|    if (yych == 'o')
 7812|      0|      goto yy517;
 7813|      0|    goto yy364;
 7814|      0|  yy504:
 7815|      0|    yych = *++p;
 7816|      0|    if (yych == 'L')
 7817|      0|      goto yy514;
 7818|      0|    if (yych == 'l')
 7819|      0|      goto yy514;
 7820|      0|    goto yy364;
 7821|      0|  yy505:
 7822|      0|    yych = *++p;
 7823|      0|    if (yych == 'G')
 7824|      0|      goto yy399;
 7825|      0|    if (yych == 'g')
 7826|      0|      goto yy399;
 7827|      0|    goto yy364;
 7828|      0|  yy506:
 7829|      0|    yych = *++p;
 7830|      0|    if (yych == 'S')
 7831|      0|      goto yy518;
 7832|      0|    if (yych == 's')
 7833|      0|      goto yy518;
 7834|      0|    goto yy364;
 7835|      0|  yy507:
 7836|      0|    yych = *++p;
 7837|      0|    if (yych <= '/') {
 7838|      0|      if (yych <= 0x1F) {
 7839|      0|        if (yych <= 0x08)
 7840|      0|          goto yy364;
 7841|      0|        if (yych <= '\r')
 7842|      0|          goto yy415;
 7843|      0|        goto yy364;
 7844|      0|      } else {
 7845|      0|        if (yych <= ' ')
 7846|      0|          goto yy415;
 7847|      0|        if (yych <= '.')
 7848|      0|          goto yy364;
 7849|      0|        goto yy417;
 7850|      0|      }
 7851|      0|    } else {
 7852|      0|      if (yych <= 'R') {
 7853|      0|        if (yych == '>')
 7854|      0|          goto yy415;
 7855|      0|        goto yy364;
 7856|      0|      } else {
 7857|      0|        if (yych <= 'S')
 7858|      0|          goto yy518;
 7859|      0|        if (yych == 's')
 7860|      0|          goto yy518;
 7861|      0|        goto yy364;
 7862|      0|      }
 7863|      0|    }
 7864|      0|  yy508:
 7865|      0|    yych = *++p;
 7866|      0|    if (yych == 'T')
 7867|      0|      goto yy519;
 7868|      0|    if (yych == 't')
 7869|      0|      goto yy519;
 7870|      0|    goto yy364;
 7871|      0|  yy509:
 7872|      0|    yych = *++p;
 7873|      0|    if (yych == 'M')
 7874|      0|      goto yy520;
 7875|      0|    if (yych == 'm')
 7876|      0|      goto yy520;
 7877|      0|    goto yy364;
 7878|      0|  yy510:
 7879|      0|    yych = *++p;
 7880|      0|    if (yych == 'T')
 7881|      0|      goto yy459;
 7882|      0|    if (yych == 't')
 7883|      0|      goto yy459;
 7884|      0|    goto yy364;
 7885|      0|  yy511:
 7886|      0|    yych = *++p;
 7887|      0|    if (yych == 'R')
 7888|      0|      goto yy440;
 7889|      0|    if (yych == 'r')
 7890|      0|      goto yy440;
 7891|      0|    goto yy364;
 7892|      0|  yy512:
 7893|      0|    yych = *++p;
 7894|      0|    if (yych == 'R')
 7895|      0|      goto yy521;
 7896|      0|    if (yych == 'r')
 7897|      0|      goto yy521;
 7898|      0|    goto yy364;
 7899|      0|  yy513:
 7900|      0|    yych = *++p;
 7901|      0|    if (yych == 'A')
 7902|      0|      goto yy522;
 7903|      0|    if (yych == 'a')
 7904|      0|      goto yy522;
 7905|      0|    goto yy364;
 7906|      0|  yy514:
 7907|      0|    yych = *++p;
 7908|      0|    if (yych == 'S')
 7909|      0|      goto yy399;
 7910|      0|    if (yych == 's')
 7911|      0|      goto yy399;
 7912|      0|    goto yy364;
 7913|      0|  yy515:
 7914|      0|    yych = *++p;
 7915|      0|    if (yych == 'N')
 7916|      0|      goto yy496;
 7917|      0|    if (yych == 'n')
 7918|      0|      goto yy496;
 7919|      0|    goto yy364;
 7920|      0|  yy516:
 7921|      0|    yych = *++p;
 7922|      0|    if (yych == 'U')
 7923|      0|      goto yy523;
 7924|      0|    if (yych == 'u')
 7925|      0|      goto yy523;
 7926|      0|    goto yy364;
 7927|      0|  yy517:
 7928|      0|    yych = *++p;
 7929|      0|    if (yych == 'U')
 7930|      0|      goto yy524;
 7931|      0|    if (yych == 'u')
 7932|      0|      goto yy524;
 7933|      0|    goto yy364;
 7934|      0|  yy518:
 7935|      0|    yych = *++p;
 7936|      0|    if (yych == 'E')
 7937|      0|      goto yy496;
 7938|      0|    if (yych == 'e')
 7939|      0|      goto yy496;
 7940|      0|    goto yy364;
 7941|      0|  yy519:
 7942|      0|    yych = *++p;
 7943|      0|    if (yych == 'E')
 7944|      0|      goto yy448;
 7945|      0|    if (yych == 'e')
 7946|      0|      goto yy448;
 7947|      0|    goto yy364;
 7948|      0|  yy520:
 7949|      0|    yych = *++p;
 7950|      0|    if (yych == 'E')
 7951|      0|      goto yy514;
 7952|      0|    if (yych == 'e')
 7953|      0|      goto yy514;
 7954|      0|    goto yy364;
 7955|      0|  yy521:
 7956|      0|    yych = *++p;
 7957|      0|    if (yych == 'E')
 7958|      0|      goto yy525;
 7959|      0|    if (yych == 'e')
 7960|      0|      goto yy525;
 7961|      0|    goto yy364;
 7962|      0|  yy522:
 7963|      0|    yych = *++p;
 7964|      0|    if (yych == '[')
 7965|      0|      goto yy526;
 7966|      0|    goto yy364;
 7967|      0|  yy523:
 7968|      0|    yych = *++p;
 7969|      0|    if (yych == 'O')
 7970|      0|      goto yy528;
 7971|      0|    if (yych == 'o')
 7972|      0|      goto yy528;
 7973|      0|    goto yy364;
 7974|      0|  yy524:
 7975|      0|    yych = *++p;
 7976|      0|    if (yych == 'P')
 7977|      0|      goto yy399;
 7978|      0|    if (yych == 'p')
 7979|      0|      goto yy399;
 7980|      0|    goto yy364;
 7981|      0|  yy525:
 7982|      0|    yych = *++p;
 7983|      0|    if (yych == 'A')
 7984|      0|      goto yy459;
 7985|      0|    if (yych == 'a')
 7986|      0|      goto yy459;
 7987|      0|    goto yy364;
 7988|      0|  yy526:
 7989|      0|    ++p;
 7990|      0|    { return 5; }
 7991|      0|  yy528:
 7992|      0|    yych = *++p;
 7993|      0|    if (yych == 'T')
 7994|      0|      goto yy472;
 7995|      0|    if (yych == 't')
 7996|      0|      goto yy472;
 7997|      0|    goto yy364;
 7998|      0|  }
 7999|      0|}
 8000|       |
 8001|       |// Try to match an HTML block tag start line of type 7, returning
 8002|       |// 7 if successful, 0 if not.
 8003|     48|bufsize_t _scan_html_block_start_7(const unsigned char *p) {
 8004|     48|  const unsigned char *marker = NULL;
 8005|       |
 8006|     48|  {
 8007|     48|    unsigned char yych;
 8008|     48|    unsigned int yyaccept = 0;
 8009|     48|    static const unsigned char yybm[] = {
 8010|     48|        0,   224, 224, 224, 224, 224, 224, 224, 224, 198, 210, 194, 198, 194,
 8011|     48|        224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
 8012|     48|        224, 224, 224, 224, 198, 224, 128, 224, 224, 224, 224, 64,  224, 224,
 8013|     48|        224, 224, 224, 233, 232, 224, 233, 233, 233, 233, 233, 233, 233, 233,
 8014|     48|        233, 233, 232, 224, 192, 192, 192, 224, 224, 233, 233, 233, 233, 233,
 8015|     48|        233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
 8016|     48|        233, 233, 233, 233, 233, 233, 233, 224, 224, 224, 224, 232, 192, 233,
 8017|     48|        233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
 8018|     48|        233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 224, 224, 224,
 8019|     48|        224, 224, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 8020|     48|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 8021|     48|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 8022|     48|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 8023|     48|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 8024|     48|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 8025|     48|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 8026|     48|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 8027|     48|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 8028|     48|        0,   0,   0,   0,
 8029|     48|    };
 8030|     48|    yych = *p;
 8031|     48|    if (yych == '<')
 8032|      0|      goto yy533;
 8033|     48|    ++p;
 8034|     48|  yy532 : { return 0; }
 8035|      0|  yy533:
 8036|      0|    yyaccept = 0;
 8037|      0|    yych = *(marker = ++p);
 8038|      0|    if (yych <= '@') {
 8039|      0|      if (yych != '/')
 8040|      0|        goto yy532;
 8041|      0|    } else {
 8042|      0|      if (yych <= 'Z')
 8043|      0|        goto yy536;
 8044|      0|      if (yych <= '`')
 8045|      0|        goto yy532;
 8046|      0|      if (yych <= 'z')
 8047|      0|        goto yy536;
 8048|      0|      goto yy532;
 8049|      0|    }
 8050|      0|    yych = *++p;
 8051|      0|    if (yych <= '@')
 8052|      0|      goto yy535;
 8053|      0|    if (yych <= 'Z')
 8054|      0|      goto yy538;
 8055|      0|    if (yych <= '`')
 8056|      0|      goto yy535;
 8057|      0|    if (yych <= 'z')
 8058|      0|      goto yy538;
 8059|      0|  yy535:
 8060|      0|    p = marker;
 8061|      0|    if (yyaccept == 0) {
 8062|      0|      goto yy532;
 8063|      0|    } else {
 8064|      0|      goto yy551;
 8065|      0|    }
 8066|      0|  yy536:
 8067|      0|    yych = *++p;
 8068|      0|    if (yybm[0 + yych] & 2) {
 8069|      0|      goto yy540;
 8070|      0|    }
 8071|      0|    if (yych <= '=') {
 8072|      0|      if (yych <= '.') {
 8073|      0|        if (yych == '-')
 8074|      0|          goto yy536;
 8075|      0|        goto yy535;
 8076|      0|      } else {
 8077|      0|        if (yych <= '/')
 8078|      0|          goto yy542;
 8079|      0|        if (yych <= '9')
 8080|      0|          goto yy536;
 8081|      0|        goto yy535;
 8082|      0|      }
 8083|      0|    } else {
 8084|      0|      if (yych <= 'Z') {
 8085|      0|        if (yych <= '>')
 8086|      0|          goto yy543;
 8087|      0|        if (yych <= '@')
 8088|      0|          goto yy535;
 8089|      0|        goto yy536;
 8090|      0|      } else {
 8091|      0|        if (yych <= '`')
 8092|      0|          goto yy535;
 8093|      0|        if (yych <= 'z')
 8094|      0|          goto yy536;
 8095|      0|        goto yy535;
 8096|      0|      }
 8097|      0|    }
 8098|      0|  yy538:
 8099|      0|    yych = *++p;
 8100|      0|    if (yych <= '/') {
 8101|      0|      if (yych <= 0x1F) {
 8102|      0|        if (yych <= 0x08)
 8103|      0|          goto yy535;
 8104|      0|        if (yych <= '\r')
 8105|      0|          goto yy545;
 8106|      0|        goto yy535;
 8107|      0|      } else {
 8108|      0|        if (yych <= ' ')
 8109|      0|          goto yy545;
 8110|      0|        if (yych == '-')
 8111|      0|          goto yy538;
 8112|      0|        goto yy535;
 8113|      0|      }
 8114|      0|    } else {
 8115|      0|      if (yych <= '@') {
 8116|      0|        if (yych <= '9')
 8117|      0|          goto yy538;
 8118|      0|        if (yych == '>')
 8119|      0|          goto yy543;
 8120|      0|        goto yy535;
 8121|      0|      } else {
 8122|      0|        if (yych <= 'Z')
 8123|      0|          goto yy538;
 8124|      0|        if (yych <= '`')
 8125|      0|          goto yy535;
 8126|      0|        if (yych <= 'z')
 8127|      0|          goto yy538;
 8128|      0|        goto yy535;
 8129|      0|      }
 8130|      0|    }
 8131|      0|  yy540:
 8132|      0|    yych = *++p;
 8133|      0|    if (yybm[0 + yych] & 2) {
 8134|      0|      goto yy540;
 8135|      0|    }
 8136|      0|    if (yych <= '>') {
 8137|      0|      if (yych <= '9') {
 8138|      0|        if (yych != '/')
 8139|      0|          goto yy535;
 8140|      0|      } else {
 8141|      0|        if (yych <= ':')
 8142|      0|          goto yy547;
 8143|      0|        if (yych <= '=')
 8144|      0|          goto yy535;
 8145|      0|        goto yy543;
 8146|      0|      }
 8147|      0|    } else {
 8148|      0|      if (yych <= '^') {
 8149|      0|        if (yych <= '@')
 8150|      0|          goto yy535;
 8151|      0|        if (yych <= 'Z')
 8152|      0|          goto yy547;
 8153|      0|        goto yy535;
 8154|      0|      } else {
 8155|      0|        if (yych == '`')
 8156|      0|          goto yy535;
 8157|      0|        if (yych <= 'z')
 8158|      0|          goto yy547;
 8159|      0|        goto yy535;
 8160|      0|      }
 8161|      0|    }
 8162|      0|  yy542:
 8163|      0|    yych = *++p;
 8164|      0|    if (yych != '>')
 8165|      0|      goto yy535;
 8166|      0|  yy543:
 8167|      0|    yych = *++p;
 8168|      0|    if (yybm[0 + yych] & 4) {
 8169|      0|      goto yy543;
 8170|      0|    }
 8171|      0|    if (yych <= 0x08)
 8172|      0|      goto yy535;
 8173|      0|    if (yych <= '\n')
 8174|      0|      goto yy549;
 8175|      0|    if (yych <= '\v')
 8176|      0|      goto yy535;
 8177|      0|    if (yych <= '\r')
 8178|      0|      goto yy552;
 8179|      0|    goto yy535;
 8180|      0|  yy545:
 8181|      0|    yych = *++p;
 8182|      0|    if (yych <= 0x1F) {
 8183|      0|      if (yych <= 0x08)
 8184|      0|        goto yy535;
 8185|      0|      if (yych <= '\r')
 8186|      0|        goto yy545;
 8187|      0|      goto yy535;
 8188|      0|    } else {
 8189|      0|      if (yych <= ' ')
 8190|      0|        goto yy545;
 8191|      0|      if (yych == '>')
 8192|      0|        goto yy543;
 8193|      0|      goto yy535;
 8194|      0|    }
 8195|      0|  yy547:
 8196|      0|    yych = *++p;
 8197|      0|    if (yybm[0 + yych] & 8) {
 8198|      0|      goto yy547;
 8199|      0|    }
 8200|      0|    if (yych <= ',') {
 8201|      0|      if (yych <= '\r') {
 8202|      0|        if (yych <= 0x08)
 8203|      0|          goto yy535;
 8204|      0|        goto yy553;
 8205|      0|      } else {
 8206|      0|        if (yych == ' ')
 8207|      0|          goto yy553;
 8208|      0|        goto yy535;
 8209|      0|      }
 8210|      0|    } else {
 8211|      0|      if (yych <= '<') {
 8212|      0|        if (yych <= '/')
 8213|      0|          goto yy542;
 8214|      0|        goto yy535;
 8215|      0|      } else {
 8216|      0|        if (yych <= '=')
 8217|      0|          goto yy555;
 8218|      0|        if (yych <= '>')
 8219|      0|          goto yy543;
 8220|      0|        goto yy535;
 8221|      0|      }
 8222|      0|    }
 8223|      0|  yy549:
 8224|      0|    yyaccept = 1;
 8225|      0|    yych = *(marker = ++p);
 8226|      0|    if (yybm[0 + yych] & 4) {
 8227|      0|      goto yy543;
 8228|      0|    }
 8229|      0|    if (yych <= 0x08)
 8230|      0|      goto yy551;
 8231|      0|    if (yych <= '\n')
 8232|      0|      goto yy549;
 8233|      0|    if (yych <= '\v')
 8234|      0|      goto yy551;
 8235|      0|    if (yych <= '\r')
 8236|      0|      goto yy552;
 8237|      0|  yy551 : { return 7; }
 8238|      0|  yy552:
 8239|      0|    ++p;
 8240|      0|    goto yy551;
 8241|      0|  yy553:
 8242|      0|    yych = *++p;
 8243|      0|    if (yych <= '<') {
 8244|      0|      if (yych <= ' ') {
 8245|      0|        if (yych <= 0x08)
 8246|      0|          goto yy535;
 8247|      0|        if (yych <= '\r')
 8248|      0|          goto yy553;
 8249|      0|        if (yych <= 0x1F)
 8250|      0|          goto yy535;
 8251|      0|        goto yy553;
 8252|      0|      } else {
 8253|      0|        if (yych <= '/') {
 8254|      0|          if (yych <= '.')
 8255|      0|            goto yy535;
 8256|      0|          goto yy542;
 8257|      0|        } else {
 8258|      0|          if (yych == ':')
 8259|      0|            goto yy547;
 8260|      0|          goto yy535;
 8261|      0|        }
 8262|      0|      }
 8263|      0|    } else {
 8264|      0|      if (yych <= 'Z') {
 8265|      0|        if (yych <= '=')
 8266|      0|          goto yy555;
 8267|      0|        if (yych <= '>')
 8268|      0|          goto yy543;
 8269|      0|        if (yych <= '@')
 8270|      0|          goto yy535;
 8271|      0|        goto yy547;
 8272|      0|      } else {
 8273|      0|        if (yych <= '_') {
 8274|      0|          if (yych <= '^')
 8275|      0|            goto yy535;
 8276|      0|          goto yy547;
 8277|      0|        } else {
 8278|      0|          if (yych <= '`')
 8279|      0|            goto yy535;
 8280|      0|          if (yych <= 'z')
 8281|      0|            goto yy547;
 8282|      0|          goto yy535;
 8283|      0|        }
 8284|      0|      }
 8285|      0|    }
 8286|      0|  yy555:
 8287|      0|    yych = *++p;
 8288|      0|    if (yybm[0 + yych] & 32) {
 8289|      0|      goto yy557;
 8290|      0|    }
 8291|      0|    if (yych <= 0xE0) {
 8292|      0|      if (yych <= '"') {
 8293|      0|        if (yych <= 0x00)
 8294|      0|          goto yy535;
 8295|      0|        if (yych <= ' ')
 8296|      0|          goto yy555;
 8297|      0|        goto yy559;
 8298|      0|      } else {
 8299|      0|        if (yych <= '\'')
 8300|      0|          goto yy561;
 8301|      0|        if (yych <= 0xC1)
 8302|      0|          goto yy535;
 8303|      0|        if (yych <= 0xDF)
 8304|      0|          goto yy563;
 8305|      0|        goto yy564;
 8306|      0|      }
 8307|      0|    } else {
 8308|      0|      if (yych <= 0xEF) {
 8309|      0|        if (yych == 0xED)
 8310|      0|          goto yy566;
 8311|      0|        goto yy565;
 8312|      0|      } else {
 8313|      0|        if (yych <= 0xF0)
 8314|      0|          goto yy567;
 8315|      0|        if (yych <= 0xF3)
 8316|      0|          goto yy568;
 8317|      0|        if (yych <= 0xF4)
 8318|      0|          goto yy569;
 8319|      0|        goto yy535;
 8320|      0|      }
 8321|      0|    }
 8322|      0|  yy557:
 8323|      0|    yych = *++p;
 8324|      0|    if (yybm[0 + yych] & 32) {
 8325|      0|      goto yy557;
 8326|      0|    }
 8327|      0|    if (yych <= 0xE0) {
 8328|      0|      if (yych <= '=') {
 8329|      0|        if (yych <= 0x00)
 8330|      0|          goto yy535;
 8331|      0|        if (yych <= ' ')
 8332|      0|          goto yy540;
 8333|      0|        goto yy535;
 8334|      0|      } else {
 8335|      0|        if (yych <= '>')
 8336|      0|          goto yy543;
 8337|      0|        if (yych <= 0xC1)
 8338|      0|          goto yy535;
 8339|      0|        if (yych <= 0xDF)
 8340|      0|          goto yy563;
 8341|      0|        goto yy564;
 8342|      0|      }
 8343|      0|    } else {
 8344|      0|      if (yych <= 0xEF) {
 8345|      0|        if (yych == 0xED)
 8346|      0|          goto yy566;
 8347|      0|        goto yy565;
 8348|      0|      } else {
 8349|      0|        if (yych <= 0xF0)
 8350|      0|          goto yy567;
 8351|      0|        if (yych <= 0xF3)
 8352|      0|          goto yy568;
 8353|      0|        if (yych <= 0xF4)
 8354|      0|          goto yy569;
 8355|      0|        goto yy535;
 8356|      0|      }
 8357|      0|    }
 8358|      0|  yy559:
 8359|      0|    yych = *++p;
 8360|      0|    if (yybm[0 + yych] & 64) {
 8361|      0|      goto yy559;
 8362|      0|    }
 8363|      0|    if (yych <= 0xEC) {
 8364|      0|      if (yych <= 0xC1) {
 8365|      0|        if (yych <= 0x00)
 8366|      0|          goto yy535;
 8367|      0|        if (yych <= '"')
 8368|      0|          goto yy570;
 8369|      0|        goto yy535;
 8370|      0|      } else {
 8371|      0|        if (yych <= 0xDF)
 8372|      0|          goto yy571;
 8373|      0|        if (yych <= 0xE0)
 8374|      0|          goto yy572;
 8375|      0|        goto yy573;
 8376|      0|      }
 8377|      0|    } else {
 8378|      0|      if (yych <= 0xF0) {
 8379|      0|        if (yych <= 0xED)
 8380|      0|          goto yy574;
 8381|      0|        if (yych <= 0xEF)
 8382|      0|          goto yy573;
 8383|      0|        goto yy575;
 8384|      0|      } else {
 8385|      0|        if (yych <= 0xF3)
 8386|      0|          goto yy576;
 8387|      0|        if (yych <= 0xF4)
 8388|      0|          goto yy577;
 8389|      0|        goto yy535;
 8390|      0|      }
 8391|      0|    }
 8392|      0|  yy561:
 8393|      0|    yych = *++p;
 8394|      0|    if (yybm[0 + yych] & 128) {
 8395|      0|      goto yy561;
 8396|      0|    }
 8397|      0|    if (yych <= 0xEC) {
 8398|      0|      if (yych <= 0xC1) {
 8399|      0|        if (yych <= 0x00)
 8400|      0|          goto yy535;
 8401|      0|        if (yych <= '\'')
 8402|      0|          goto yy570;
 8403|      0|        goto yy535;
 8404|      0|      } else {
 8405|      0|        if (yych <= 0xDF)
 8406|      0|          goto yy578;
 8407|      0|        if (yych <= 0xE0)
 8408|      0|          goto yy579;
 8409|      0|        goto yy580;
 8410|      0|      }
 8411|      0|    } else {
 8412|      0|      if (yych <= 0xF0) {
 8413|      0|        if (yych <= 0xED)
 8414|      0|          goto yy581;
 8415|      0|        if (yych <= 0xEF)
 8416|      0|          goto yy580;
 8417|      0|        goto yy582;
 8418|      0|      } else {
 8419|      0|        if (yych <= 0xF3)
 8420|      0|          goto yy583;
 8421|      0|        if (yych <= 0xF4)
 8422|      0|          goto yy584;
 8423|      0|        goto yy535;
 8424|      0|      }
 8425|      0|    }
 8426|      0|  yy563:
 8427|      0|    yych = *++p;
 8428|      0|    if (yych <= 0x7F)
 8429|      0|      goto yy535;
 8430|      0|    if (yych <= 0xBF)
 8431|      0|      goto yy557;
 8432|      0|    goto yy535;
 8433|      0|  yy564:
 8434|      0|    yych = *++p;
 8435|      0|    if (yych <= 0x9F)
 8436|      0|      goto yy535;
 8437|      0|    if (yych <= 0xBF)
 8438|      0|      goto yy563;
 8439|      0|    goto yy535;
 8440|      0|  yy565:
 8441|      0|    yych = *++p;
 8442|      0|    if (yych <= 0x7F)
 8443|      0|      goto yy535;
 8444|      0|    if (yych <= 0xBF)
 8445|      0|      goto yy563;
 8446|      0|    goto yy535;
 8447|      0|  yy566:
 8448|      0|    yych = *++p;
 8449|      0|    if (yych <= 0x7F)
 8450|      0|      goto yy535;
 8451|      0|    if (yych <= 0x9F)
 8452|      0|      goto yy563;
 8453|      0|    goto yy535;
 8454|      0|  yy567:
 8455|      0|    yych = *++p;
 8456|      0|    if (yych <= 0x8F)
 8457|      0|      goto yy535;
 8458|      0|    if (yych <= 0xBF)
 8459|      0|      goto yy565;
 8460|      0|    goto yy535;
 8461|      0|  yy568:
 8462|      0|    yych = *++p;
 8463|      0|    if (yych <= 0x7F)
 8464|      0|      goto yy535;
 8465|      0|    if (yych <= 0xBF)
 8466|      0|      goto yy565;
 8467|      0|    goto yy535;
 8468|      0|  yy569:
 8469|      0|    yych = *++p;
 8470|      0|    if (yych <= 0x7F)
 8471|      0|      goto yy535;
 8472|      0|    if (yych <= 0x8F)
 8473|      0|      goto yy565;
 8474|      0|    goto yy535;
 8475|      0|  yy570:
 8476|      0|    yych = *++p;
 8477|      0|    if (yybm[0 + yych] & 2) {
 8478|      0|      goto yy540;
 8479|      0|    }
 8480|      0|    if (yych == '/')
 8481|      0|      goto yy542;
 8482|      0|    if (yych == '>')
 8483|      0|      goto yy543;
 8484|      0|    goto yy535;
 8485|      0|  yy571:
 8486|      0|    yych = *++p;
 8487|      0|    if (yych <= 0x7F)
 8488|      0|      goto yy535;
 8489|      0|    if (yych <= 0xBF)
 8490|      0|      goto yy559;
 8491|      0|    goto yy535;
 8492|      0|  yy572:
 8493|      0|    yych = *++p;
 8494|      0|    if (yych <= 0x9F)
 8495|      0|      goto yy535;
 8496|      0|    if (yych <= 0xBF)
 8497|      0|      goto yy571;
 8498|      0|    goto yy535;
 8499|      0|  yy573:
 8500|      0|    yych = *++p;
 8501|      0|    if (yych <= 0x7F)
 8502|      0|      goto yy535;
 8503|      0|    if (yych <= 0xBF)
 8504|      0|      goto yy571;
 8505|      0|    goto yy535;
 8506|      0|  yy574:
 8507|      0|    yych = *++p;
 8508|      0|    if (yych <= 0x7F)
 8509|      0|      goto yy535;
 8510|      0|    if (yych <= 0x9F)
 8511|      0|      goto yy571;
 8512|      0|    goto yy535;
 8513|      0|  yy575:
 8514|      0|    yych = *++p;
 8515|      0|    if (yych <= 0x8F)
 8516|      0|      goto yy535;
 8517|      0|    if (yych <= 0xBF)
 8518|      0|      goto yy573;
 8519|      0|    goto yy535;
 8520|      0|  yy576:
 8521|      0|    yych = *++p;
 8522|      0|    if (yych <= 0x7F)
 8523|      0|      goto yy535;
 8524|      0|    if (yych <= 0xBF)
 8525|      0|      goto yy573;
 8526|      0|    goto yy535;
 8527|      0|  yy577:
 8528|      0|    yych = *++p;
 8529|      0|    if (yych <= 0x7F)
 8530|      0|      goto yy535;
 8531|      0|    if (yych <= 0x8F)
 8532|      0|      goto yy573;
 8533|      0|    goto yy535;
 8534|      0|  yy578:
 8535|      0|    yych = *++p;
 8536|      0|    if (yych <= 0x7F)
 8537|      0|      goto yy535;
 8538|      0|    if (yych <= 0xBF)
 8539|      0|      goto yy561;
 8540|      0|    goto yy535;
 8541|      0|  yy579:
 8542|      0|    yych = *++p;
 8543|      0|    if (yych <= 0x9F)
 8544|      0|      goto yy535;
 8545|      0|    if (yych <= 0xBF)
 8546|      0|      goto yy578;
 8547|      0|    goto yy535;
 8548|      0|  yy580:
 8549|      0|    yych = *++p;
 8550|      0|    if (yych <= 0x7F)
 8551|      0|      goto yy535;
 8552|      0|    if (yych <= 0xBF)
 8553|      0|      goto yy578;
 8554|      0|    goto yy535;
 8555|      0|  yy581:
 8556|      0|    yych = *++p;
 8557|      0|    if (yych <= 0x7F)
 8558|      0|      goto yy535;
 8559|      0|    if (yych <= 0x9F)
 8560|      0|      goto yy578;
 8561|      0|    goto yy535;
 8562|      0|  yy582:
 8563|      0|    yych = *++p;
 8564|      0|    if (yych <= 0x8F)
 8565|      0|      goto yy535;
 8566|      0|    if (yych <= 0xBF)
 8567|      0|      goto yy580;
 8568|      0|    goto yy535;
 8569|      0|  yy583:
 8570|      0|    yych = *++p;
 8571|      0|    if (yych <= 0x7F)
 8572|      0|      goto yy535;
 8573|      0|    if (yych <= 0xBF)
 8574|      0|      goto yy580;
 8575|      0|    goto yy535;
 8576|      0|  yy584:
 8577|      0|    yych = *++p;
 8578|      0|    if (yych <= 0x7F)
 8579|      0|      goto yy535;
 8580|      0|    if (yych <= 0x8F)
 8581|      0|      goto yy580;
 8582|      0|    goto yy535;
 8583|      0|  }
 8584|      0|}
 8585|       |
 8586|       |// Try to match an HTML block end line of type 1
 8587|      0|bufsize_t _scan_html_block_end_1(const unsigned char *p) {
 8588|      0|  const unsigned char *marker = NULL;
 8589|      0|  const unsigned char *start = p;
 8590|       |
 8591|      0|  {
 8592|      0|    unsigned char yych;
 8593|      0|    unsigned int yyaccept = 0;
 8594|      0|    static const unsigned char yybm[] = {
 8595|      0|        0,  64, 64, 64, 64, 64, 64,  64, 64, 64, 0,  64, 64, 64, 64, 64, 64, 64,
 8596|      0|        64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
 8597|      0|        64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
 8598|      0|        64, 64, 64, 64, 64, 64, 128, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
 8599|      0|        64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
 8600|      0|        64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
 8601|      0|        64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
 8602|      0|        64, 64, 0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 8603|      0|        0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 8604|      0|        0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 8605|      0|        0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 8606|      0|        0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 8607|      0|        0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 8608|      0|        0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 8609|      0|        0,  0,  0,  0,
 8610|      0|    };
 8611|      0|    yych = *p;
 8612|      0|    if (yych <= 0xDF) {
 8613|      0|      if (yych <= ';') {
 8614|      0|        if (yych <= 0x00)
 8615|      0|          goto yy587;
 8616|      0|        if (yych != '\n')
 8617|      0|          goto yy589;
 8618|      0|      } else {
 8619|      0|        if (yych <= '<')
 8620|      0|          goto yy590;
 8621|      0|        if (yych <= 0x7F)
 8622|      0|          goto yy589;
 8623|      0|        if (yych >= 0xC2)
 8624|      0|          goto yy591;
 8625|      0|      }
 8626|      0|    } else {
 8627|      0|      if (yych <= 0xEF) {
 8628|      0|        if (yych <= 0xE0)
 8629|      0|          goto yy592;
 8630|      0|        if (yych == 0xED)
 8631|      0|          goto yy594;
 8632|      0|        goto yy593;
 8633|      0|      } else {
 8634|      0|        if (yych <= 0xF0)
 8635|      0|          goto yy595;
 8636|      0|        if (yych <= 0xF3)
 8637|      0|          goto yy596;
 8638|      0|        if (yych <= 0xF4)
 8639|      0|          goto yy597;
 8640|      0|      }
 8641|      0|    }
 8642|      0|  yy587:
 8643|      0|    ++p;
 8644|      0|  yy588 : { return 0; }
 8645|      0|  yy589:
 8646|      0|    yyaccept = 0;
 8647|      0|    yych = *(marker = ++p);
 8648|      0|    if (yych <= '\n') {
 8649|      0|      if (yych <= 0x00)
 8650|      0|        goto yy588;
 8651|      0|      if (yych <= '\t')
 8652|      0|        goto yy599;
 8653|      0|      goto yy588;
 8654|      0|    } else {
 8655|      0|      if (yych <= 0x7F)
 8656|      0|        goto yy599;
 8657|      0|      if (yych <= 0xC1)
 8658|      0|        goto yy588;
 8659|      0|      if (yych <= 0xF4)
 8660|      0|        goto yy599;
 8661|      0|      goto yy588;
 8662|      0|    }
 8663|      0|  yy590:
 8664|      0|    yyaccept = 0;
 8665|      0|    yych = *(marker = ++p);
 8666|      0|    if (yych <= '.') {
 8667|      0|      if (yych <= 0x00)
 8668|      0|        goto yy588;
 8669|      0|      if (yych == '\n')
 8670|      0|        goto yy588;
 8671|      0|      goto yy599;
 8672|      0|    } else {
 8673|      0|      if (yych <= 0x7F) {
 8674|      0|        if (yych <= '/')
 8675|      0|          goto yy610;
 8676|      0|        goto yy599;
 8677|      0|      } else {
 8678|      0|        if (yych <= 0xC1)
 8679|      0|          goto yy588;
 8680|      0|        if (yych <= 0xF4)
 8681|      0|          goto yy599;
 8682|      0|        goto yy588;
 8683|      0|      }
 8684|      0|    }
 8685|      0|  yy591:
 8686|      0|    yyaccept = 0;
 8687|      0|    yych = *(marker = ++p);
 8688|      0|    if (yych <= 0x7F)
 8689|      0|      goto yy588;
 8690|      0|    if (yych <= 0xBF)
 8691|      0|      goto yy598;
 8692|      0|    goto yy588;
 8693|      0|  yy592:
 8694|      0|    yyaccept = 0;
 8695|      0|    yych = *(marker = ++p);
 8696|      0|    if (yych <= 0x9F)
 8697|      0|      goto yy588;
 8698|      0|    if (yych <= 0xBF)
 8699|      0|      goto yy603;
 8700|      0|    goto yy588;
 8701|      0|  yy593:
 8702|      0|    yyaccept = 0;
 8703|      0|    yych = *(marker = ++p);
 8704|      0|    if (yych <= 0x7F)
 8705|      0|      goto yy588;
 8706|      0|    if (yych <= 0xBF)
 8707|      0|      goto yy603;
 8708|      0|    goto yy588;
 8709|      0|  yy594:
 8710|      0|    yyaccept = 0;
 8711|      0|    yych = *(marker = ++p);
 8712|      0|    if (yych <= 0x7F)
 8713|      0|      goto yy588;
 8714|      0|    if (yych <= 0x9F)
 8715|      0|      goto yy603;
 8716|      0|    goto yy588;
 8717|      0|  yy595:
 8718|      0|    yyaccept = 0;
 8719|      0|    yych = *(marker = ++p);
 8720|      0|    if (yych <= 0x8F)
 8721|      0|      goto yy588;
 8722|      0|    if (yych <= 0xBF)
 8723|      0|      goto yy605;
 8724|      0|    goto yy588;
 8725|      0|  yy596:
 8726|      0|    yyaccept = 0;
 8727|      0|    yych = *(marker = ++p);
 8728|      0|    if (yych <= 0x7F)
 8729|      0|      goto yy588;
 8730|      0|    if (yych <= 0xBF)
 8731|      0|      goto yy605;
 8732|      0|    goto yy588;
 8733|      0|  yy597:
 8734|      0|    yyaccept = 0;
 8735|      0|    yych = *(marker = ++p);
 8736|      0|    if (yych <= 0x7F)
 8737|      0|      goto yy588;
 8738|      0|    if (yych <= 0x8F)
 8739|      0|      goto yy605;
 8740|      0|    goto yy588;
 8741|      0|  yy598:
 8742|      0|    yych = *++p;
 8743|      0|  yy599:
 8744|      0|    if (yybm[0 + yych] & 64) {
 8745|      0|      goto yy598;
 8746|      0|    }
 8747|      0|    if (yych <= 0xEC) {
 8748|      0|      if (yych <= 0xC1) {
 8749|      0|        if (yych <= '\n')
 8750|      0|          goto yy600;
 8751|      0|        if (yych <= '<')
 8752|      0|          goto yy601;
 8753|      0|      } else {
 8754|      0|        if (yych <= 0xDF)
 8755|      0|          goto yy603;
 8756|      0|        if (yych <= 0xE0)
 8757|      0|          goto yy604;
 8758|      0|        goto yy605;
 8759|      0|      }
 8760|      0|    } else {
 8761|      0|      if (yych <= 0xF0) {
 8762|      0|        if (yych <= 0xED)
 8763|      0|          goto yy606;
 8764|      0|        if (yych <= 0xEF)
 8765|      0|          goto yy605;
 8766|      0|        goto yy607;
 8767|      0|      } else {
 8768|      0|        if (yych <= 0xF3)
 8769|      0|          goto yy608;
 8770|      0|        if (yych <= 0xF4)
 8771|      0|          goto yy609;
 8772|      0|      }
 8773|      0|    }
 8774|      0|  yy600:
 8775|      0|    p = marker;
 8776|      0|    if (yyaccept == 0) {
 8777|      0|      goto yy588;
 8778|      0|    } else {
 8779|      0|      goto yy623;
 8780|      0|    }
 8781|      0|  yy601:
 8782|      0|    yych = *++p;
 8783|      0|    if (yybm[0 + yych] & 128) {
 8784|      0|      goto yy601;
 8785|      0|    }
 8786|      0|    if (yych <= 0xDF) {
 8787|      0|      if (yych <= '.') {
 8788|      0|        if (yych <= 0x00)
 8789|      0|          goto yy600;
 8790|      0|        if (yych == '\n')
 8791|      0|          goto yy600;
 8792|      0|        goto yy598;
 8793|      0|      } else {
 8794|      0|        if (yych <= '/')
 8795|      0|          goto yy610;
 8796|      0|        if (yych <= 0x7F)
 8797|      0|          goto yy598;
 8798|      0|        if (yych <= 0xC1)
 8799|      0|          goto yy600;
 8800|      0|      }
 8801|      0|    } else {
 8802|      0|      if (yych <= 0xEF) {
 8803|      0|        if (yych <= 0xE0)
 8804|      0|          goto yy604;
 8805|      0|        if (yych == 0xED)
 8806|      0|          goto yy606;
 8807|      0|        goto yy605;
 8808|      0|      } else {
 8809|      0|        if (yych <= 0xF0)
 8810|      0|          goto yy607;
 8811|      0|        if (yych <= 0xF3)
 8812|      0|          goto yy608;
 8813|      0|        if (yych <= 0xF4)
 8814|      0|          goto yy609;
 8815|      0|        goto yy600;
 8816|      0|      }
 8817|      0|    }
 8818|      0|  yy603:
 8819|      0|    yych = *++p;
 8820|      0|    if (yych <= 0x7F)
 8821|      0|      goto yy600;
 8822|      0|    if (yych <= 0xBF)
 8823|      0|      goto yy598;
 8824|      0|    goto yy600;
 8825|      0|  yy604:
 8826|      0|    yych = *++p;
 8827|      0|    if (yych <= 0x9F)
 8828|      0|      goto yy600;
 8829|      0|    if (yych <= 0xBF)
 8830|      0|      goto yy603;
 8831|      0|    goto yy600;
 8832|      0|  yy605:
 8833|      0|    yych = *++p;
 8834|      0|    if (yych <= 0x7F)
 8835|      0|      goto yy600;
 8836|      0|    if (yych <= 0xBF)
 8837|      0|      goto yy603;
 8838|      0|    goto yy600;
 8839|      0|  yy606:
 8840|      0|    yych = *++p;
 8841|      0|    if (yych <= 0x7F)
 8842|      0|      goto yy600;
 8843|      0|    if (yych <= 0x9F)
 8844|      0|      goto yy603;
 8845|      0|    goto yy600;
 8846|      0|  yy607:
 8847|      0|    yych = *++p;
 8848|      0|    if (yych <= 0x8F)
 8849|      0|      goto yy600;
 8850|      0|    if (yych <= 0xBF)
 8851|      0|      goto yy605;
 8852|      0|    goto yy600;
 8853|      0|  yy608:
 8854|      0|    yych = *++p;
 8855|      0|    if (yych <= 0x7F)
 8856|      0|      goto yy600;
 8857|      0|    if (yych <= 0xBF)
 8858|      0|      goto yy605;
 8859|      0|    goto yy600;
 8860|      0|  yy609:
 8861|      0|    yych = *++p;
 8862|      0|    if (yych <= 0x7F)
 8863|      0|      goto yy600;
 8864|      0|    if (yych <= 0x8F)
 8865|      0|      goto yy605;
 8866|      0|    goto yy600;
 8867|      0|  yy610:
 8868|      0|    yych = *++p;
 8869|      0|    if (yybm[0 + yych] & 128) {
 8870|      0|      goto yy601;
 8871|      0|    }
 8872|      0|    if (yych <= 's') {
 8873|      0|      if (yych <= 'R') {
 8874|      0|        if (yych <= '\n') {
 8875|      0|          if (yych <= 0x00)
 8876|      0|            goto yy600;
 8877|      0|          if (yych <= '\t')
 8878|      0|            goto yy598;
 8879|      0|          goto yy600;
 8880|      0|        } else {
 8881|      0|          if (yych != 'P')
 8882|      0|            goto yy598;
 8883|      0|        }
 8884|      0|      } else {
 8885|      0|        if (yych <= 'o') {
 8886|      0|          if (yych <= 'S')
 8887|      0|            goto yy612;
 8888|      0|          if (yych <= 'T')
 8889|      0|            goto yy613;
 8890|      0|          goto yy598;
 8891|      0|        } else {
 8892|      0|          if (yych <= 'p')
 8893|      0|            goto yy611;
 8894|      0|          if (yych <= 'r')
 8895|      0|            goto yy598;
 8896|      0|          goto yy612;
 8897|      0|        }
 8898|      0|      }
 8899|      0|    } else {
 8900|      0|      if (yych <= 0xEC) {
 8901|      0|        if (yych <= 0xC1) {
 8902|      0|          if (yych <= 't')
 8903|      0|            goto yy613;
 8904|      0|          if (yych <= 0x7F)
 8905|      0|            goto yy598;
 8906|      0|          goto yy600;
 8907|      0|        } else {
 8908|      0|          if (yych <= 0xDF)
 8909|      0|            goto yy603;
 8910|      0|          if (yych <= 0xE0)
 8911|      0|            goto yy604;
 8912|      0|          goto yy605;
 8913|      0|        }
 8914|      0|      } else {
 8915|      0|        if (yych <= 0xF0) {
 8916|      0|          if (yych <= 0xED)
 8917|      0|            goto yy606;
 8918|      0|          if (yych <= 0xEF)
 8919|      0|            goto yy605;
 8920|      0|          goto yy607;
 8921|      0|        } else {
 8922|      0|          if (yych <= 0xF3)
 8923|      0|            goto yy608;
 8924|      0|          if (yych <= 0xF4)
 8925|      0|            goto yy609;
 8926|      0|          goto yy600;
 8927|      0|        }
 8928|      0|      }
 8929|      0|    }
 8930|      0|  yy611:
 8931|      0|    yych = *++p;
 8932|      0|    if (yybm[0 + yych] & 128) {
 8933|      0|      goto yy601;
 8934|      0|    }
 8935|      0|    if (yych <= 0xC1) {
 8936|      0|      if (yych <= 'Q') {
 8937|      0|        if (yych <= 0x00)
 8938|      0|          goto yy600;
 8939|      0|        if (yych == '\n')
 8940|      0|          goto yy600;
 8941|      0|        goto yy598;
 8942|      0|      } else {
 8943|      0|        if (yych <= 'q') {
 8944|      0|          if (yych <= 'R')
 8945|      0|            goto yy614;
 8946|      0|          goto yy598;
 8947|      0|        } else {
 8948|      0|          if (yych <= 'r')
 8949|      0|            goto yy614;
 8950|      0|          if (yych <= 0x7F)
 8951|      0|            goto yy598;
 8952|      0|          goto yy600;
 8953|      0|        }
 8954|      0|      }
 8955|      0|    } else {
 8956|      0|      if (yych <= 0xED) {
 8957|      0|        if (yych <= 0xDF)
 8958|      0|          goto yy603;
 8959|      0|        if (yych <= 0xE0)
 8960|      0|          goto yy604;
 8961|      0|        if (yych <= 0xEC)
 8962|      0|          goto yy605;
 8963|      0|        goto yy606;
 8964|      0|      } else {
 8965|      0|        if (yych <= 0xF0) {
 8966|      0|          if (yych <= 0xEF)
 8967|      0|            goto yy605;
 8968|      0|          goto yy607;
 8969|      0|        } else {
 8970|      0|          if (yych <= 0xF3)
 8971|      0|            goto yy608;
 8972|      0|          if (yych <= 0xF4)
 8973|      0|            goto yy609;
 8974|      0|          goto yy600;
 8975|      0|        }
 8976|      0|      }
 8977|      0|    }
 8978|      0|  yy612:
 8979|      0|    yych = *++p;
 8980|      0|    if (yybm[0 + yych] & 128) {
 8981|      0|      goto yy601;
 8982|      0|    }
 8983|      0|    if (yych <= 't') {
 8984|      0|      if (yych <= 'C') {
 8985|      0|        if (yych <= '\t') {
 8986|      0|          if (yych <= 0x00)
 8987|      0|            goto yy600;
 8988|      0|          goto yy598;
 8989|      0|        } else {
 8990|      0|          if (yych <= '\n')
 8991|      0|            goto yy600;
 8992|      0|          if (yych <= 'B')
 8993|      0|            goto yy598;
 8994|      0|          goto yy615;
 8995|      0|        }
 8996|      0|      } else {
 8997|      0|        if (yych <= 'b') {
 8998|      0|          if (yych == 'T')
 8999|      0|            goto yy616;
 9000|      0|          goto yy598;
 9001|      0|        } else {
 9002|      0|          if (yych <= 'c')
 9003|      0|            goto yy615;
 9004|      0|          if (yych <= 's')
 9005|      0|            goto yy598;
 9006|      0|          goto yy616;
 9007|      0|        }
 9008|      0|      }
 9009|      0|    } else {
 9010|      0|      if (yych <= 0xEC) {
 9011|      0|        if (yych <= 0xC1) {
 9012|      0|          if (yych <= 0x7F)
 9013|      0|            goto yy598;
 9014|      0|          goto yy600;
 9015|      0|        } else {
 9016|      0|          if (yych <= 0xDF)
 9017|      0|            goto yy603;
 9018|      0|          if (yych <= 0xE0)
 9019|      0|            goto yy604;
 9020|      0|          goto yy605;
 9021|      0|        }
 9022|      0|      } else {
 9023|      0|        if (yych <= 0xF0) {
 9024|      0|          if (yych <= 0xED)
 9025|      0|            goto yy606;
 9026|      0|          if (yych <= 0xEF)
 9027|      0|            goto yy605;
 9028|      0|          goto yy607;
 9029|      0|        } else {
 9030|      0|          if (yych <= 0xF3)
 9031|      0|            goto yy608;
 9032|      0|          if (yych <= 0xF4)
 9033|      0|            goto yy609;
 9034|      0|          goto yy600;
 9035|      0|        }
 9036|      0|      }
 9037|      0|    }
 9038|      0|  yy613:
 9039|      0|    yych = *++p;
 9040|      0|    if (yybm[0 + yych] & 128) {
 9041|      0|      goto yy601;
 9042|      0|    }
 9043|      0|    if (yych <= 0xC1) {
 9044|      0|      if (yych <= 'D') {
 9045|      0|        if (yych <= 0x00)
 9046|      0|          goto yy600;
 9047|      0|        if (yych == '\n')
 9048|      0|          goto yy600;
 9049|      0|        goto yy598;
 9050|      0|      } else {
 9051|      0|        if (yych <= 'd') {
 9052|      0|          if (yych <= 'E')
 9053|      0|            goto yy617;
 9054|      0|          goto yy598;
 9055|      0|        } else {
 9056|      0|          if (yych <= 'e')
 9057|      0|            goto yy617;
 9058|      0|          if (yych <= 0x7F)
 9059|      0|            goto yy598;
 9060|      0|          goto yy600;
 9061|      0|        }
 9062|      0|      }
 9063|      0|    } else {
 9064|      0|      if (yych <= 0xED) {
 9065|      0|        if (yych <= 0xDF)
 9066|      0|          goto yy603;
 9067|      0|        if (yych <= 0xE0)
 9068|      0|          goto yy604;
 9069|      0|        if (yych <= 0xEC)
 9070|      0|          goto yy605;
 9071|      0|        goto yy606;
 9072|      0|      } else {
 9073|      0|        if (yych <= 0xF0) {
 9074|      0|          if (yych <= 0xEF)
 9075|      0|            goto yy605;
 9076|      0|          goto yy607;
 9077|      0|        } else {
 9078|      0|          if (yych <= 0xF3)
 9079|      0|            goto yy608;
 9080|      0|          if (yych <= 0xF4)
 9081|      0|            goto yy609;
 9082|      0|          goto yy600;
 9083|      0|        }
 9084|      0|      }
 9085|      0|    }
 9086|      0|  yy614:
 9087|      0|    yych = *++p;
 9088|      0|    if (yybm[0 + yych] & 128) {
 9089|      0|      goto yy601;
 9090|      0|    }
 9091|      0|    if (yych <= 0xC1) {
 9092|      0|      if (yych <= 'D') {
 9093|      0|        if (yych <= 0x00)
 9094|      0|          goto yy600;
 9095|      0|        if (yych == '\n')
 9096|      0|          goto yy600;
 9097|      0|        goto yy598;
 9098|      0|      } else {
 9099|      0|        if (yych <= 'd') {
 9100|      0|          if (yych <= 'E')
 9101|      0|            goto yy618;
 9102|      0|          goto yy598;
 9103|      0|        } else {
 9104|      0|          if (yych <= 'e')
 9105|      0|            goto yy618;
 9106|      0|          if (yych <= 0x7F)
 9107|      0|            goto yy598;
 9108|      0|          goto yy600;
 9109|      0|        }
 9110|      0|      }
 9111|      0|    } else {
 9112|      0|      if (yych <= 0xED) {
 9113|      0|        if (yych <= 0xDF)
 9114|      0|          goto yy603;
 9115|      0|        if (yych <= 0xE0)
 9116|      0|          goto yy604;
 9117|      0|        if (yych <= 0xEC)
 9118|      0|          goto yy605;
 9119|      0|        goto yy606;
 9120|      0|      } else {
 9121|      0|        if (yych <= 0xF0) {
 9122|      0|          if (yych <= 0xEF)
 9123|      0|            goto yy605;
 9124|      0|          goto yy607;
 9125|      0|        } else {
 9126|      0|          if (yych <= 0xF3)
 9127|      0|            goto yy608;
 9128|      0|          if (yych <= 0xF4)
 9129|      0|            goto yy609;
 9130|      0|          goto yy600;
 9131|      0|        }
 9132|      0|      }
 9133|      0|    }
 9134|      0|  yy615:
 9135|      0|    yych = *++p;
 9136|      0|    if (yybm[0 + yych] & 128) {
 9137|      0|      goto yy601;
 9138|      0|    }
 9139|      0|    if (yych <= 0xC1) {
 9140|      0|      if (yych <= 'Q') {
 9141|      0|        if (yych <= 0x00)
 9142|      0|          goto yy600;
 9143|      0|        if (yych == '\n')
 9144|      0|          goto yy600;
 9145|      0|        goto yy598;
 9146|      0|      } else {
 9147|      0|        if (yych <= 'q') {
 9148|      0|          if (yych <= 'R')
 9149|      0|            goto yy619;
 9150|      0|          goto yy598;
 9151|      0|        } else {
 9152|      0|          if (yych <= 'r')
 9153|      0|            goto yy619;
 9154|      0|          if (yych <= 0x7F)
 9155|      0|            goto yy598;
 9156|      0|          goto yy600;
 9157|      0|        }
 9158|      0|      }
 9159|      0|    } else {
 9160|      0|      if (yych <= 0xED) {
 9161|      0|        if (yych <= 0xDF)
 9162|      0|          goto yy603;
 9163|      0|        if (yych <= 0xE0)
 9164|      0|          goto yy604;
 9165|      0|        if (yych <= 0xEC)
 9166|      0|          goto yy605;
 9167|      0|        goto yy606;
 9168|      0|      } else {
 9169|      0|        if (yych <= 0xF0) {
 9170|      0|          if (yych <= 0xEF)
 9171|      0|            goto yy605;
 9172|      0|          goto yy607;
 9173|      0|        } else {
 9174|      0|          if (yych <= 0xF3)
 9175|      0|            goto yy608;
 9176|      0|          if (yych <= 0xF4)
 9177|      0|            goto yy609;
 9178|      0|          goto yy600;
 9179|      0|        }
 9180|      0|      }
 9181|      0|    }
 9182|      0|  yy616:
 9183|      0|    yych = *++p;
 9184|      0|    if (yybm[0 + yych] & 128) {
 9185|      0|      goto yy601;
 9186|      0|    }
 9187|      0|    if (yych <= 0xC1) {
 9188|      0|      if (yych <= 'X') {
 9189|      0|        if (yych <= 0x00)
 9190|      0|          goto yy600;
 9191|      0|        if (yych == '\n')
 9192|      0|          goto yy600;
 9193|      0|        goto yy598;
 9194|      0|      } else {
 9195|      0|        if (yych <= 'x') {
 9196|      0|          if (yych <= 'Y')
 9197|      0|            goto yy620;
 9198|      0|          goto yy598;
 9199|      0|        } else {
 9200|      0|          if (yych <= 'y')
 9201|      0|            goto yy620;
 9202|      0|          if (yych <= 0x7F)
 9203|      0|            goto yy598;
 9204|      0|          goto yy600;
 9205|      0|        }
 9206|      0|      }
 9207|      0|    } else {
 9208|      0|      if (yych <= 0xED) {
 9209|      0|        if (yych <= 0xDF)
 9210|      0|          goto yy603;
 9211|      0|        if (yych <= 0xE0)
 9212|      0|          goto yy604;
 9213|      0|        if (yych <= 0xEC)
 9214|      0|          goto yy605;
 9215|      0|        goto yy606;
 9216|      0|      } else {
 9217|      0|        if (yych <= 0xF0) {
 9218|      0|          if (yych <= 0xEF)
 9219|      0|            goto yy605;
 9220|      0|          goto yy607;
 9221|      0|        } else {
 9222|      0|          if (yych <= 0xF3)
 9223|      0|            goto yy608;
 9224|      0|          if (yych <= 0xF4)
 9225|      0|            goto yy609;
 9226|      0|          goto yy600;
 9227|      0|        }
 9228|      0|      }
 9229|      0|    }
 9230|      0|  yy617:
 9231|      0|    yych = *++p;
 9232|      0|    if (yybm[0 + yych] & 128) {
 9233|      0|      goto yy601;
 9234|      0|    }
 9235|      0|    if (yych <= 0xC1) {
 9236|      0|      if (yych <= 'W') {
 9237|      0|        if (yych <= 0x00)
 9238|      0|          goto yy600;
 9239|      0|        if (yych == '\n')
 9240|      0|          goto yy600;
 9241|      0|        goto yy598;
 9242|      0|      } else {
 9243|      0|        if (yych <= 'w') {
 9244|      0|          if (yych <= 'X')
 9245|      0|            goto yy621;
 9246|      0|          goto yy598;
 9247|      0|        } else {
 9248|      0|          if (yych <= 'x')
 9249|      0|            goto yy621;
 9250|      0|          if (yych <= 0x7F)
 9251|      0|            goto yy598;
 9252|      0|          goto yy600;
 9253|      0|        }
 9254|      0|      }
 9255|      0|    } else {
 9256|      0|      if (yych <= 0xED) {
 9257|      0|        if (yych <= 0xDF)
 9258|      0|          goto yy603;
 9259|      0|        if (yych <= 0xE0)
 9260|      0|          goto yy604;
 9261|      0|        if (yych <= 0xEC)
 9262|      0|          goto yy605;
 9263|      0|        goto yy606;
 9264|      0|      } else {
 9265|      0|        if (yych <= 0xF0) {
 9266|      0|          if (yych <= 0xEF)
 9267|      0|            goto yy605;
 9268|      0|          goto yy607;
 9269|      0|        } else {
 9270|      0|          if (yych <= 0xF3)
 9271|      0|            goto yy608;
 9272|      0|          if (yych <= 0xF4)
 9273|      0|            goto yy609;
 9274|      0|          goto yy600;
 9275|      0|        }
 9276|      0|      }
 9277|      0|    }
 9278|      0|  yy618:
 9279|      0|    yych = *++p;
 9280|      0|    if (yybm[0 + yych] & 128) {
 9281|      0|      goto yy601;
 9282|      0|    }
 9283|      0|    if (yych <= 0xDF) {
 9284|      0|      if (yych <= '=') {
 9285|      0|        if (yych <= 0x00)
 9286|      0|          goto yy600;
 9287|      0|        if (yych == '\n')
 9288|      0|          goto yy600;
 9289|      0|        goto yy598;
 9290|      0|      } else {
 9291|      0|        if (yych <= '>')
 9292|      0|          goto yy622;
 9293|      0|        if (yych <= 0x7F)
 9294|      0|          goto yy598;
 9295|      0|        if (yych <= 0xC1)
 9296|      0|          goto yy600;
 9297|      0|        goto yy603;
 9298|      0|      }
 9299|      0|    } else {
 9300|      0|      if (yych <= 0xEF) {
 9301|      0|        if (yych <= 0xE0)
 9302|      0|          goto yy604;
 9303|      0|        if (yych == 0xED)
 9304|      0|          goto yy606;
 9305|      0|        goto yy605;
 9306|      0|      } else {
 9307|      0|        if (yych <= 0xF0)
 9308|      0|          goto yy607;
 9309|      0|        if (yych <= 0xF3)
 9310|      0|          goto yy608;
 9311|      0|        if (yych <= 0xF4)
 9312|      0|          goto yy609;
 9313|      0|        goto yy600;
 9314|      0|      }
 9315|      0|    }
 9316|      0|  yy619:
 9317|      0|    yych = *++p;
 9318|      0|    if (yybm[0 + yych] & 128) {
 9319|      0|      goto yy601;
 9320|      0|    }
 9321|      0|    if (yych <= 0xC1) {
 9322|      0|      if (yych <= 'H') {
 9323|      0|        if (yych <= 0x00)
 9324|      0|          goto yy600;
 9325|      0|        if (yych == '\n')
 9326|      0|          goto yy600;
 9327|      0|        goto yy598;
 9328|      0|      } else {
 9329|      0|        if (yych <= 'h') {
 9330|      0|          if (yych <= 'I')
 9331|      0|            goto yy624;
 9332|      0|          goto yy598;
 9333|      0|        } else {
 9334|      0|          if (yych <= 'i')
 9335|      0|            goto yy624;
 9336|      0|          if (yych <= 0x7F)
 9337|      0|            goto yy598;
 9338|      0|          goto yy600;
 9339|      0|        }
 9340|      0|      }
 9341|      0|    } else {
 9342|      0|      if (yych <= 0xED) {
 9343|      0|        if (yych <= 0xDF)
 9344|      0|          goto yy603;
 9345|      0|        if (yych <= 0xE0)
 9346|      0|          goto yy604;
 9347|      0|        if (yych <= 0xEC)
 9348|      0|          goto yy605;
 9349|      0|        goto yy606;
 9350|      0|      } else {
 9351|      0|        if (yych <= 0xF0) {
 9352|      0|          if (yych <= 0xEF)
 9353|      0|            goto yy605;
 9354|      0|          goto yy607;
 9355|      0|        } else {
 9356|      0|          if (yych <= 0xF3)
 9357|      0|            goto yy608;
 9358|      0|          if (yych <= 0xF4)
 9359|      0|            goto yy609;
 9360|      0|          goto yy600;
 9361|      0|        }
 9362|      0|      }
 9363|      0|    }
 9364|      0|  yy620:
 9365|      0|    yych = *++p;
 9366|      0|    if (yybm[0 + yych] & 128) {
 9367|      0|      goto yy601;
 9368|      0|    }
 9369|      0|    if (yych <= 0xC1) {
 9370|      0|      if (yych <= 'K') {
 9371|      0|        if (yych <= 0x00)
 9372|      0|          goto yy600;
 9373|      0|        if (yych == '\n')
 9374|      0|          goto yy600;
 9375|      0|        goto yy598;
 9376|      0|      } else {
 9377|      0|        if (yych <= 'k') {
 9378|      0|          if (yych <= 'L')
 9379|      0|            goto yy614;
 9380|      0|          goto yy598;
 9381|      0|        } else {
 9382|      0|          if (yych <= 'l')
 9383|      0|            goto yy614;
 9384|      0|          if (yych <= 0x7F)
 9385|      0|            goto yy598;
 9386|      0|          goto yy600;
 9387|      0|        }
 9388|      0|      }
 9389|      0|    } else {
 9390|      0|      if (yych <= 0xED) {
 9391|      0|        if (yych <= 0xDF)
 9392|      0|          goto yy603;
 9393|      0|        if (yych <= 0xE0)
 9394|      0|          goto yy604;
 9395|      0|        if (yych <= 0xEC)
 9396|      0|          goto yy605;
 9397|      0|        goto yy606;
 9398|      0|      } else {
 9399|      0|        if (yych <= 0xF0) {
 9400|      0|          if (yych <= 0xEF)
 9401|      0|            goto yy605;
 9402|      0|          goto yy607;
 9403|      0|        } else {
 9404|      0|          if (yych <= 0xF3)
 9405|      0|            goto yy608;
 9406|      0|          if (yych <= 0xF4)
 9407|      0|            goto yy609;
 9408|      0|          goto yy600;
 9409|      0|        }
 9410|      0|      }
 9411|      0|    }
 9412|      0|  yy621:
 9413|      0|    yych = *++p;
 9414|      0|    if (yybm[0 + yych] & 128) {
 9415|      0|      goto yy601;
 9416|      0|    }
 9417|      0|    if (yych <= 0xC1) {
 9418|      0|      if (yych <= 'S') {
 9419|      0|        if (yych <= 0x00)
 9420|      0|          goto yy600;
 9421|      0|        if (yych == '\n')
 9422|      0|          goto yy600;
 9423|      0|        goto yy598;
 9424|      0|      } else {
 9425|      0|        if (yych <= 's') {
 9426|      0|          if (yych <= 'T')
 9427|      0|            goto yy625;
 9428|      0|          goto yy598;
 9429|      0|        } else {
 9430|      0|          if (yych <= 't')
 9431|      0|            goto yy625;
 9432|      0|          if (yych <= 0x7F)
 9433|      0|            goto yy598;
 9434|      0|          goto yy600;
 9435|      0|        }
 9436|      0|      }
 9437|      0|    } else {
 9438|      0|      if (yych <= 0xED) {
 9439|      0|        if (yych <= 0xDF)
 9440|      0|          goto yy603;
 9441|      0|        if (yych <= 0xE0)
 9442|      0|          goto yy604;
 9443|      0|        if (yych <= 0xEC)
 9444|      0|          goto yy605;
 9445|      0|        goto yy606;
 9446|      0|      } else {
 9447|      0|        if (yych <= 0xF0) {
 9448|      0|          if (yych <= 0xEF)
 9449|      0|            goto yy605;
 9450|      0|          goto yy607;
 9451|      0|        } else {
 9452|      0|          if (yych <= 0xF3)
 9453|      0|            goto yy608;
 9454|      0|          if (yych <= 0xF4)
 9455|      0|            goto yy609;
 9456|      0|          goto yy600;
 9457|      0|        }
 9458|      0|      }
 9459|      0|    }
 9460|      0|  yy622:
 9461|      0|    yyaccept = 1;
 9462|      0|    yych = *(marker = ++p);
 9463|      0|    if (yybm[0 + yych] & 64) {
 9464|      0|      goto yy598;
 9465|      0|    }
 9466|      0|    if (yych <= 0xEC) {
 9467|      0|      if (yych <= 0xC1) {
 9468|      0|        if (yych <= '\n')
 9469|      0|          goto yy623;
 9470|      0|        if (yych <= '<')
 9471|      0|          goto yy601;
 9472|      0|      } else {
 9473|      0|        if (yych <= 0xDF)
 9474|      0|          goto yy603;
 9475|      0|        if (yych <= 0xE0)
 9476|      0|          goto yy604;
 9477|      0|        goto yy605;
 9478|      0|      }
 9479|      0|    } else {
 9480|      0|      if (yych <= 0xF0) {
 9481|      0|        if (yych <= 0xED)
 9482|      0|          goto yy606;
 9483|      0|        if (yych <= 0xEF)
 9484|      0|          goto yy605;
 9485|      0|        goto yy607;
 9486|      0|      } else {
 9487|      0|        if (yych <= 0xF3)
 9488|      0|          goto yy608;
 9489|      0|        if (yych <= 0xF4)
 9490|      0|          goto yy609;
 9491|      0|      }
 9492|      0|    }
 9493|      0|  yy623 : { return (bufsize_t)(p - start); }
 9494|      0|  yy624:
 9495|      0|    yych = *++p;
 9496|      0|    if (yybm[0 + yych] & 128) {
 9497|      0|      goto yy601;
 9498|      0|    }
 9499|      0|    if (yych <= 0xC1) {
 9500|      0|      if (yych <= 'O') {
 9501|      0|        if (yych <= 0x00)
 9502|      0|          goto yy600;
 9503|      0|        if (yych == '\n')
 9504|      0|          goto yy600;
 9505|      0|        goto yy598;
 9506|      0|      } else {
 9507|      0|        if (yych <= 'o') {
 9508|      0|          if (yych <= 'P')
 9509|      0|            goto yy626;
 9510|      0|          goto yy598;
 9511|      0|        } else {
 9512|      0|          if (yych <= 'p')
 9513|      0|            goto yy626;
 9514|      0|          if (yych <= 0x7F)
 9515|      0|            goto yy598;
 9516|      0|          goto yy600;
 9517|      0|        }
 9518|      0|      }
 9519|      0|    } else {
 9520|      0|      if (yych <= 0xED) {
 9521|      0|        if (yych <= 0xDF)
 9522|      0|          goto yy603;
 9523|      0|        if (yych <= 0xE0)
 9524|      0|          goto yy604;
 9525|      0|        if (yych <= 0xEC)
 9526|      0|          goto yy605;
 9527|      0|        goto yy606;
 9528|      0|      } else {
 9529|      0|        if (yych <= 0xF0) {
 9530|      0|          if (yych <= 0xEF)
 9531|      0|            goto yy605;
 9532|      0|          goto yy607;
 9533|      0|        } else {
 9534|      0|          if (yych <= 0xF3)
 9535|      0|            goto yy608;
 9536|      0|          if (yych <= 0xF4)
 9537|      0|            goto yy609;
 9538|      0|          goto yy600;
 9539|      0|        }
 9540|      0|      }
 9541|      0|    }
 9542|      0|  yy625:
 9543|      0|    yych = *++p;
 9544|      0|    if (yybm[0 + yych] & 128) {
 9545|      0|      goto yy601;
 9546|      0|    }
 9547|      0|    if (yych <= 0xC1) {
 9548|      0|      if (yych <= '@') {
 9549|      0|        if (yych <= 0x00)
 9550|      0|          goto yy600;
 9551|      0|        if (yych == '\n')
 9552|      0|          goto yy600;
 9553|      0|        goto yy598;
 9554|      0|      } else {
 9555|      0|        if (yych <= '`') {
 9556|      0|          if (yych <= 'A')
 9557|      0|            goto yy627;
 9558|      0|          goto yy598;
 9559|      0|        } else {
 9560|      0|          if (yych <= 'a')
 9561|      0|            goto yy627;
 9562|      0|          if (yych <= 0x7F)
 9563|      0|            goto yy598;
 9564|      0|          goto yy600;
 9565|      0|        }
 9566|      0|      }
 9567|      0|    } else {
 9568|      0|      if (yych <= 0xED) {
 9569|      0|        if (yych <= 0xDF)
 9570|      0|          goto yy603;
 9571|      0|        if (yych <= 0xE0)
 9572|      0|          goto yy604;
 9573|      0|        if (yych <= 0xEC)
 9574|      0|          goto yy605;
 9575|      0|        goto yy606;
 9576|      0|      } else {
 9577|      0|        if (yych <= 0xF0) {
 9578|      0|          if (yych <= 0xEF)
 9579|      0|            goto yy605;
 9580|      0|          goto yy607;
 9581|      0|        } else {
 9582|      0|          if (yych <= 0xF3)
 9583|      0|            goto yy608;
 9584|      0|          if (yych <= 0xF4)
 9585|      0|            goto yy609;
 9586|      0|          goto yy600;
 9587|      0|        }
 9588|      0|      }
 9589|      0|    }
 9590|      0|  yy626:
 9591|      0|    yych = *++p;
 9592|      0|    if (yybm[0 + yych] & 128) {
 9593|      0|      goto yy601;
 9594|      0|    }
 9595|      0|    if (yych <= 0xC1) {
 9596|      0|      if (yych <= 'S') {
 9597|      0|        if (yych <= 0x00)
 9598|      0|          goto yy600;
 9599|      0|        if (yych == '\n')
 9600|      0|          goto yy600;
 9601|      0|        goto yy598;
 9602|      0|      } else {
 9603|      0|        if (yych <= 's') {
 9604|      0|          if (yych <= 'T')
 9605|      0|            goto yy618;
 9606|      0|          goto yy598;
 9607|      0|        } else {
 9608|      0|          if (yych <= 't')
 9609|      0|            goto yy618;
 9610|      0|          if (yych <= 0x7F)
 9611|      0|            goto yy598;
 9612|      0|          goto yy600;
 9613|      0|        }
 9614|      0|      }
 9615|      0|    } else {
 9616|      0|      if (yych <= 0xED) {
 9617|      0|        if (yych <= 0xDF)
 9618|      0|          goto yy603;
 9619|      0|        if (yych <= 0xE0)
 9620|      0|          goto yy604;
 9621|      0|        if (yych <= 0xEC)
 9622|      0|          goto yy605;
 9623|      0|        goto yy606;
 9624|      0|      } else {
 9625|      0|        if (yych <= 0xF0) {
 9626|      0|          if (yych <= 0xEF)
 9627|      0|            goto yy605;
 9628|      0|          goto yy607;
 9629|      0|        } else {
 9630|      0|          if (yych <= 0xF3)
 9631|      0|            goto yy608;
 9632|      0|          if (yych <= 0xF4)
 9633|      0|            goto yy609;
 9634|      0|          goto yy600;
 9635|      0|        }
 9636|      0|      }
 9637|      0|    }
 9638|      0|  yy627:
 9639|      0|    yych = *++p;
 9640|      0|    if (yybm[0 + yych] & 128) {
 9641|      0|      goto yy601;
 9642|      0|    }
 9643|      0|    if (yych <= 0xC1) {
 9644|      0|      if (yych <= 'Q') {
 9645|      0|        if (yych <= 0x00)
 9646|      0|          goto yy600;
 9647|      0|        if (yych == '\n')
 9648|      0|          goto yy600;
 9649|      0|        goto yy598;
 9650|      0|      } else {
 9651|      0|        if (yych <= 'q') {
 9652|      0|          if (yych >= 'S')
 9653|      0|            goto yy598;
 9654|      0|        } else {
 9655|      0|          if (yych <= 'r')
 9656|      0|            goto yy628;
 9657|      0|          if (yych <= 0x7F)
 9658|      0|            goto yy598;
 9659|      0|          goto yy600;
 9660|      0|        }
 9661|      0|      }
 9662|      0|    } else {
 9663|      0|      if (yych <= 0xED) {
 9664|      0|        if (yych <= 0xDF)
 9665|      0|          goto yy603;
 9666|      0|        if (yych <= 0xE0)
 9667|      0|          goto yy604;
 9668|      0|        if (yych <= 0xEC)
 9669|      0|          goto yy605;
 9670|      0|        goto yy606;
 9671|      0|      } else {
 9672|      0|        if (yych <= 0xF0) {
 9673|      0|          if (yych <= 0xEF)
 9674|      0|            goto yy605;
 9675|      0|          goto yy607;
 9676|      0|        } else {
 9677|      0|          if (yych <= 0xF3)
 9678|      0|            goto yy608;
 9679|      0|          if (yych <= 0xF4)
 9680|      0|            goto yy609;
 9681|      0|          goto yy600;
 9682|      0|        }
 9683|      0|      }
 9684|      0|    }
 9685|      0|  yy628:
 9686|      0|    yych = *++p;
 9687|      0|    if (yybm[0 + yych] & 128) {
 9688|      0|      goto yy601;
 9689|      0|    }
 9690|      0|    if (yych <= 0xC1) {
 9691|      0|      if (yych <= 'D') {
 9692|      0|        if (yych <= 0x00)
 9693|      0|          goto yy600;
 9694|      0|        if (yych == '\n')
 9695|      0|          goto yy600;
 9696|      0|        goto yy598;
 9697|      0|      } else {
 9698|      0|        if (yych <= 'd') {
 9699|      0|          if (yych >= 'F')
 9700|      0|            goto yy598;
 9701|      0|        } else {
 9702|      0|          if (yych <= 'e')
 9703|      0|            goto yy629;
 9704|      0|          if (yych <= 0x7F)
 9705|      0|            goto yy598;
 9706|      0|          goto yy600;
 9707|      0|        }
 9708|      0|      }
 9709|      0|    } else {
 9710|      0|      if (yych <= 0xED) {
 9711|      0|        if (yych <= 0xDF)
 9712|      0|          goto yy603;
 9713|      0|        if (yych <= 0xE0)
 9714|      0|          goto yy604;
 9715|      0|        if (yych <= 0xEC)
 9716|      0|          goto yy605;
 9717|      0|        goto yy606;
 9718|      0|      } else {
 9719|      0|        if (yych <= 0xF0) {
 9720|      0|          if (yych <= 0xEF)
 9721|      0|            goto yy605;
 9722|      0|          goto yy607;
 9723|      0|        } else {
 9724|      0|          if (yych <= 0xF3)
 9725|      0|            goto yy608;
 9726|      0|          if (yych <= 0xF4)
 9727|      0|            goto yy609;
 9728|      0|          goto yy600;
 9729|      0|        }
 9730|      0|      }
 9731|      0|    }
 9732|      0|  yy629:
 9733|      0|    yych = *++p;
 9734|      0|    if (yybm[0 + yych] & 128) {
 9735|      0|      goto yy601;
 9736|      0|    }
 9737|      0|    if (yych <= 0xC1) {
 9738|      0|      if (yych <= '@') {
 9739|      0|        if (yych <= 0x00)
 9740|      0|          goto yy600;
 9741|      0|        if (yych == '\n')
 9742|      0|          goto yy600;
 9743|      0|        goto yy598;
 9744|      0|      } else {
 9745|      0|        if (yych <= '`') {
 9746|      0|          if (yych <= 'A')
 9747|      0|            goto yy618;
 9748|      0|          goto yy598;
 9749|      0|        } else {
 9750|      0|          if (yych <= 'a')
 9751|      0|            goto yy618;
 9752|      0|          if (yych <= 0x7F)
 9753|      0|            goto yy598;
 9754|      0|          goto yy600;
 9755|      0|        }
 9756|      0|      }
 9757|      0|    } else {
 9758|      0|      if (yych <= 0xED) {
 9759|      0|        if (yych <= 0xDF)
 9760|      0|          goto yy603;
 9761|      0|        if (yych <= 0xE0)
 9762|      0|          goto yy604;
 9763|      0|        if (yych <= 0xEC)
 9764|      0|          goto yy605;
 9765|      0|        goto yy606;
 9766|      0|      } else {
 9767|      0|        if (yych <= 0xF0) {
 9768|      0|          if (yych <= 0xEF)
 9769|      0|            goto yy605;
 9770|      0|          goto yy607;
 9771|      0|        } else {
 9772|      0|          if (yych <= 0xF3)
 9773|      0|            goto yy608;
 9774|      0|          if (yych <= 0xF4)
 9775|      0|            goto yy609;
 9776|      0|          goto yy600;
 9777|      0|        }
 9778|      0|      }
 9779|      0|    }
 9780|      0|  }
 9781|      0|}
 9782|       |
 9783|       |// Try to match an HTML block end line of type 2
 9784|      0|bufsize_t _scan_html_block_end_2(const unsigned char *p) {
 9785|      0|  const unsigned char *marker = NULL;
 9786|      0|  const unsigned char *start = p;
 9787|       |
 9788|      0|  {
 9789|      0|    unsigned char yych;
 9790|      0|    unsigned int yyaccept = 0;
 9791|      0|    static const unsigned char yybm[] = {
 9792|      0|        0,  64, 64, 64, 64, 64, 64, 64, 64, 64,  0,  64, 64, 64, 64, 64, 64, 64,
 9793|      0|        64, 64, 64, 64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64,
 9794|      0|        64, 64, 64, 64, 64, 64, 64, 64, 64, 128, 64, 64, 64, 64, 64, 64, 64, 64,
 9795|      0|        64, 64, 64, 64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64,
 9796|      0|        64, 64, 64, 64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64,
 9797|      0|        64, 64, 64, 64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64,
 9798|      0|        64, 64, 64, 64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64,
 9799|      0|        64, 64, 0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
 9800|      0|        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
 9801|      0|        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
 9802|      0|        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
 9803|      0|        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
 9804|      0|        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
 9805|      0|        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
 9806|      0|        0,  0,  0,  0,
 9807|      0|    };
 9808|      0|    yych = *p;
 9809|      0|    if (yych <= 0xDF) {
 9810|      0|      if (yych <= ',') {
 9811|      0|        if (yych <= 0x00)
 9812|      0|          goto yy632;
 9813|      0|        if (yych != '\n')
 9814|      0|          goto yy634;
 9815|      0|      } else {
 9816|      0|        if (yych <= '-')
 9817|      0|          goto yy635;
 9818|      0|        if (yych <= 0x7F)
 9819|      0|          goto yy634;
 9820|      0|        if (yych >= 0xC2)
 9821|      0|          goto yy636;
 9822|      0|      }
 9823|      0|    } else {
 9824|      0|      if (yych <= 0xEF) {
 9825|      0|        if (yych <= 0xE0)
 9826|      0|          goto yy637;
 9827|      0|        if (yych == 0xED)
 9828|      0|          goto yy639;
 9829|      0|        goto yy638;
 9830|      0|      } else {
 9831|      0|        if (yych <= 0xF0)
 9832|      0|          goto yy640;
 9833|      0|        if (yych <= 0xF3)
 9834|      0|          goto yy641;
 9835|      0|        if (yych <= 0xF4)
 9836|      0|          goto yy642;
 9837|      0|      }
 9838|      0|    }
 9839|      0|  yy632:
 9840|      0|    ++p;
 9841|      0|  yy633 : { return 0; }
 9842|      0|  yy634:
 9843|      0|    yyaccept = 0;
 9844|      0|    yych = *(marker = ++p);
 9845|      0|    if (yych <= '\n') {
 9846|      0|      if (yych <= 0x00)
 9847|      0|        goto yy633;
 9848|      0|      if (yych <= '\t')
 9849|      0|        goto yy644;
 9850|      0|      goto yy633;
 9851|      0|    } else {
 9852|      0|      if (yych <= 0x7F)
 9853|      0|        goto yy644;
 9854|      0|      if (yych <= 0xC1)
 9855|      0|        goto yy633;
 9856|      0|      if (yych <= 0xF4)
 9857|      0|        goto yy644;
 9858|      0|      goto yy633;
 9859|      0|    }
 9860|      0|  yy635:
 9861|      0|    yyaccept = 0;
 9862|      0|    yych = *(marker = ++p);
 9863|      0|    if (yybm[0 + yych] & 128) {
 9864|      0|      goto yy654;
 9865|      0|    }
 9866|      0|    if (yych <= '\n') {
 9867|      0|      if (yych <= 0x00)
 9868|      0|        goto yy633;
 9869|      0|      if (yych <= '\t')
 9870|      0|        goto yy644;
 9871|      0|      goto yy633;
 9872|      0|    } else {
 9873|      0|      if (yych <= 0x7F)
 9874|      0|        goto yy644;
 9875|      0|      if (yych <= 0xC1)
 9876|      0|        goto yy633;
 9877|      0|      if (yych <= 0xF4)
 9878|      0|        goto yy644;
 9879|      0|      goto yy633;
 9880|      0|    }
 9881|      0|  yy636:
 9882|      0|    yyaccept = 0;
 9883|      0|    yych = *(marker = ++p);
 9884|      0|    if (yych <= 0x7F)
 9885|      0|      goto yy633;
 9886|      0|    if (yych <= 0xBF)
 9887|      0|      goto yy643;
 9888|      0|    goto yy633;
 9889|      0|  yy637:
 9890|      0|    yyaccept = 0;
 9891|      0|    yych = *(marker = ++p);
 9892|      0|    if (yych <= 0x9F)
 9893|      0|      goto yy633;
 9894|      0|    if (yych <= 0xBF)
 9895|      0|      goto yy647;
 9896|      0|    goto yy633;
 9897|      0|  yy638:
 9898|      0|    yyaccept = 0;
 9899|      0|    yych = *(marker = ++p);
 9900|      0|    if (yych <= 0x7F)
 9901|      0|      goto yy633;
 9902|      0|    if (yych <= 0xBF)
 9903|      0|      goto yy647;
 9904|      0|    goto yy633;
 9905|      0|  yy639:
 9906|      0|    yyaccept = 0;
 9907|      0|    yych = *(marker = ++p);
 9908|      0|    if (yych <= 0x7F)
 9909|      0|      goto yy633;
 9910|      0|    if (yych <= 0x9F)
 9911|      0|      goto yy647;
 9912|      0|    goto yy633;
 9913|      0|  yy640:
 9914|      0|    yyaccept = 0;
 9915|      0|    yych = *(marker = ++p);
 9916|      0|    if (yych <= 0x8F)
 9917|      0|      goto yy633;
 9918|      0|    if (yych <= 0xBF)
 9919|      0|      goto yy649;
 9920|      0|    goto yy633;
 9921|      0|  yy641:
 9922|      0|    yyaccept = 0;
 9923|      0|    yych = *(marker = ++p);
 9924|      0|    if (yych <= 0x7F)
 9925|      0|      goto yy633;
 9926|      0|    if (yych <= 0xBF)
 9927|      0|      goto yy649;
 9928|      0|    goto yy633;
 9929|      0|  yy642:
 9930|      0|    yyaccept = 0;
 9931|      0|    yych = *(marker = ++p);
 9932|      0|    if (yych <= 0x7F)
 9933|      0|      goto yy633;
 9934|      0|    if (yych <= 0x8F)
 9935|      0|      goto yy649;
 9936|      0|    goto yy633;
 9937|      0|  yy643:
 9938|      0|    yych = *++p;
 9939|      0|  yy644:
 9940|      0|    if (yybm[0 + yych] & 64) {
 9941|      0|      goto yy643;
 9942|      0|    }
 9943|      0|    if (yych <= 0xEC) {
 9944|      0|      if (yych <= 0xC1) {
 9945|      0|        if (yych <= '\n')
 9946|      0|          goto yy645;
 9947|      0|        if (yych <= '-')
 9948|      0|          goto yy646;
 9949|      0|      } else {
 9950|      0|        if (yych <= 0xDF)
 9951|      0|          goto yy647;
 9952|      0|        if (yych <= 0xE0)
 9953|      0|          goto yy648;
 9954|      0|        goto yy649;
 9955|      0|      }
 9956|      0|    } else {
 9957|      0|      if (yych <= 0xF0) {
 9958|      0|        if (yych <= 0xED)
 9959|      0|          goto yy650;
 9960|      0|        if (yych <= 0xEF)
 9961|      0|          goto yy649;
 9962|      0|        goto yy651;
 9963|      0|      } else {
 9964|      0|        if (yych <= 0xF3)
 9965|      0|          goto yy652;
 9966|      0|        if (yych <= 0xF4)
 9967|      0|          goto yy653;
 9968|      0|      }
 9969|      0|    }
 9970|      0|  yy645:
 9971|      0|    p = marker;
 9972|      0|    if (yyaccept == 0) {
 9973|      0|      goto yy633;
 9974|      0|    } else {
 9975|      0|      goto yy657;
 9976|      0|    }
 9977|      0|  yy646:
 9978|      0|    yych = *++p;
 9979|      0|    if (yybm[0 + yych] & 64) {
 9980|      0|      goto yy643;
 9981|      0|    }
 9982|      0|    if (yych <= 0xEC) {
 9983|      0|      if (yych <= 0xC1) {
 9984|      0|        if (yych <= '\n')
 9985|      0|          goto yy645;
 9986|      0|        if (yych <= '-')
 9987|      0|          goto yy654;
 9988|      0|        goto yy645;
 9989|      0|      } else {
 9990|      0|        if (yych <= 0xDF)
 9991|      0|          goto yy647;
 9992|      0|        if (yych <= 0xE0)
 9993|      0|          goto yy648;
 9994|      0|        goto yy649;
 9995|      0|      }
 9996|      0|    } else {
 9997|      0|      if (yych <= 0xF0) {
 9998|      0|        if (yych <= 0xED)
 9999|      0|          goto yy650;
10000|      0|        if (yych <= 0xEF)
10001|      0|          goto yy649;
10002|      0|        goto yy651;
10003|      0|      } else {
10004|      0|        if (yych <= 0xF3)
10005|      0|          goto yy652;
10006|      0|        if (yych <= 0xF4)
10007|      0|          goto yy653;
10008|      0|        goto yy645;
10009|      0|      }
10010|      0|    }
10011|      0|  yy647:
10012|      0|    yych = *++p;
10013|      0|    if (yych <= 0x7F)
10014|      0|      goto yy645;
10015|      0|    if (yych <= 0xBF)
10016|      0|      goto yy643;
10017|      0|    goto yy645;
10018|      0|  yy648:
10019|      0|    yych = *++p;
10020|      0|    if (yych <= 0x9F)
10021|      0|      goto yy645;
10022|      0|    if (yych <= 0xBF)
10023|      0|      goto yy647;
10024|      0|    goto yy645;
10025|      0|  yy649:
10026|      0|    yych = *++p;
10027|      0|    if (yych <= 0x7F)
10028|      0|      goto yy645;
10029|      0|    if (yych <= 0xBF)
10030|      0|      goto yy647;
10031|      0|    goto yy645;
10032|      0|  yy650:
10033|      0|    yych = *++p;
10034|      0|    if (yych <= 0x7F)
10035|      0|      goto yy645;
10036|      0|    if (yych <= 0x9F)
10037|      0|      goto yy647;
10038|      0|    goto yy645;
10039|      0|  yy651:
10040|      0|    yych = *++p;
10041|      0|    if (yych <= 0x8F)
10042|      0|      goto yy645;
10043|      0|    if (yych <= 0xBF)
10044|      0|      goto yy649;
10045|      0|    goto yy645;
10046|      0|  yy652:
10047|      0|    yych = *++p;
10048|      0|    if (yych <= 0x7F)
10049|      0|      goto yy645;
10050|      0|    if (yych <= 0xBF)
10051|      0|      goto yy649;
10052|      0|    goto yy645;
10053|      0|  yy653:
10054|      0|    yych = *++p;
10055|      0|    if (yych <= 0x7F)
10056|      0|      goto yy645;
10057|      0|    if (yych <= 0x8F)
10058|      0|      goto yy649;
10059|      0|    goto yy645;
10060|      0|  yy654:
10061|      0|    yych = *++p;
10062|      0|    if (yybm[0 + yych] & 128) {
10063|      0|      goto yy654;
10064|      0|    }
10065|      0|    if (yych <= 0xDF) {
10066|      0|      if (yych <= '=') {
10067|      0|        if (yych <= 0x00)
10068|      0|          goto yy645;
10069|      0|        if (yych == '\n')
10070|      0|          goto yy645;
10071|      0|        goto yy643;
10072|      0|      } else {
10073|      0|        if (yych <= '>')
10074|      0|          goto yy656;
10075|      0|        if (yych <= 0x7F)
10076|      0|          goto yy643;
10077|      0|        if (yych <= 0xC1)
10078|      0|          goto yy645;
10079|      0|        goto yy647;
10080|      0|      }
10081|      0|    } else {
10082|      0|      if (yych <= 0xEF) {
10083|      0|        if (yych <= 0xE0)
10084|      0|          goto yy648;
10085|      0|        if (yych == 0xED)
10086|      0|          goto yy650;
10087|      0|        goto yy649;
10088|      0|      } else {
10089|      0|        if (yych <= 0xF0)
10090|      0|          goto yy651;
10091|      0|        if (yych <= 0xF3)
10092|      0|          goto yy652;
10093|      0|        if (yych <= 0xF4)
10094|      0|          goto yy653;
10095|      0|        goto yy645;
10096|      0|      }
10097|      0|    }
10098|      0|  yy656:
10099|      0|    yyaccept = 1;
10100|      0|    yych = *(marker = ++p);
10101|      0|    if (yybm[0 + yych] & 64) {
10102|      0|      goto yy643;
10103|      0|    }
10104|      0|    if (yych <= 0xEC) {
10105|      0|      if (yych <= 0xC1) {
10106|      0|        if (yych <= '\n')
10107|      0|          goto yy657;
10108|      0|        if (yych <= '-')
10109|      0|          goto yy646;
10110|      0|      } else {
10111|      0|        if (yych <= 0xDF)
10112|      0|          goto yy647;
10113|      0|        if (yych <= 0xE0)
10114|      0|          goto yy648;
10115|      0|        goto yy649;
10116|      0|      }
10117|      0|    } else {
10118|      0|      if (yych <= 0xF0) {
10119|      0|        if (yych <= 0xED)
10120|      0|          goto yy650;
10121|      0|        if (yych <= 0xEF)
10122|      0|          goto yy649;
10123|      0|        goto yy651;
10124|      0|      } else {
10125|      0|        if (yych <= 0xF3)
10126|      0|          goto yy652;
10127|      0|        if (yych <= 0xF4)
10128|      0|          goto yy653;
10129|      0|      }
10130|      0|    }
10131|      0|  yy657 : { return (bufsize_t)(p - start); }
10132|      0|  }
10133|      0|}
10134|       |
10135|       |// Try to match an HTML block end line of type 3
10136|      0|bufsize_t _scan_html_block_end_3(const unsigned char *p) {
10137|      0|  const unsigned char *marker = NULL;
10138|      0|  const unsigned char *start = p;
10139|       |
10140|      0|  {
10141|      0|    unsigned char yych;
10142|      0|    unsigned int yyaccept = 0;
10143|      0|    static const unsigned char yybm[] = {
10144|      0|        0,  64, 64, 64, 64, 64, 64, 64, 64, 64,  0,  64, 64, 64, 64, 64, 64, 64,
10145|      0|        64, 64, 64, 64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64,
10146|      0|        64, 64, 64, 64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64,
10147|      0|        64, 64, 64, 64, 64, 64, 64, 64, 64, 128, 64, 64, 64, 64, 64, 64, 64, 64,
10148|      0|        64, 64, 64, 64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64,
10149|      0|        64, 64, 64, 64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64,
10150|      0|        64, 64, 64, 64, 64, 64, 64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64,
10151|      0|        64, 64, 0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
10152|      0|        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
10153|      0|        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
10154|      0|        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
10155|      0|        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
10156|      0|        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
10157|      0|        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
10158|      0|        0,  0,  0,  0,
10159|      0|    };
10160|      0|    yych = *p;
10161|      0|    if (yych <= 0xDF) {
10162|      0|      if (yych <= '>') {
10163|      0|        if (yych <= 0x00)
10164|      0|          goto yy660;
10165|      0|        if (yych != '\n')
10166|      0|          goto yy662;
10167|      0|      } else {
10168|      0|        if (yych <= '?')
10169|      0|          goto yy663;
10170|      0|        if (yych <= 0x7F)
10171|      0|          goto yy662;
10172|      0|        if (yych >= 0xC2)
10173|      0|          goto yy664;
10174|      0|      }
10175|      0|    } else {
10176|      0|      if (yych <= 0xEF) {
10177|      0|        if (yych <= 0xE0)
10178|      0|          goto yy665;
10179|      0|        if (yych == 0xED)
10180|      0|          goto yy667;
10181|      0|        goto yy666;
10182|      0|      } else {
10183|      0|        if (yych <= 0xF0)
10184|      0|          goto yy668;
10185|      0|        if (yych <= 0xF3)
10186|      0|          goto yy669;
10187|      0|        if (yych <= 0xF4)
10188|      0|          goto yy670;
10189|      0|      }
10190|      0|    }
10191|      0|  yy660:
10192|      0|    ++p;
10193|      0|  yy661 : { return 0; }
10194|      0|  yy662:
10195|      0|    yyaccept = 0;
10196|      0|    yych = *(marker = ++p);
10197|      0|    if (yych <= '\n') {
10198|      0|      if (yych <= 0x00)
10199|      0|        goto yy661;
10200|      0|      if (yych <= '\t')
10201|      0|        goto yy672;
10202|      0|      goto yy661;
10203|      0|    } else {
10204|      0|      if (yych <= 0x7F)
10205|      0|        goto yy672;
10206|      0|      if (yych <= 0xC1)
10207|      0|        goto yy661;
10208|      0|      if (yych <= 0xF4)
10209|      0|        goto yy672;
10210|      0|      goto yy661;
10211|      0|    }
10212|      0|  yy663:
10213|      0|    yyaccept = 0;
10214|      0|    yych = *(marker = ++p);
10215|      0|    if (yych <= '=') {
10216|      0|      if (yych <= 0x00)
10217|      0|        goto yy661;
10218|      0|      if (yych == '\n')
10219|      0|        goto yy661;
10220|      0|      goto yy672;
10221|      0|    } else {
10222|      0|      if (yych <= 0x7F) {
10223|      0|        if (yych <= '>')
10224|      0|          goto yy683;
10225|      0|        goto yy672;
10226|      0|      } else {
10227|      0|        if (yych <= 0xC1)
10228|      0|          goto yy661;
10229|      0|        if (yych <= 0xF4)
10230|      0|          goto yy672;
10231|      0|        goto yy661;
10232|      0|      }
10233|      0|    }
10234|      0|  yy664:
10235|      0|    yyaccept = 0;
10236|      0|    yych = *(marker = ++p);
10237|      0|    if (yych <= 0x7F)
10238|      0|      goto yy661;
10239|      0|    if (yych <= 0xBF)
10240|      0|      goto yy671;
10241|      0|    goto yy661;
10242|      0|  yy665:
10243|      0|    yyaccept = 0;
10244|      0|    yych = *(marker = ++p);
10245|      0|    if (yych <= 0x9F)
10246|      0|      goto yy661;
10247|      0|    if (yych <= 0xBF)
10248|      0|      goto yy676;
10249|      0|    goto yy661;
10250|      0|  yy666:
10251|      0|    yyaccept = 0;
10252|      0|    yych = *(marker = ++p);
10253|      0|    if (yych <= 0x7F)
10254|      0|      goto yy661;
10255|      0|    if (yych <= 0xBF)
10256|      0|      goto yy676;
10257|      0|    goto yy661;
10258|      0|  yy667:
10259|      0|    yyaccept = 0;
10260|      0|    yych = *(marker = ++p);
10261|      0|    if (yych <= 0x7F)
10262|      0|      goto yy661;
10263|      0|    if (yych <= 0x9F)
10264|      0|      goto yy676;
10265|      0|    goto yy661;
10266|      0|  yy668:
10267|      0|    yyaccept = 0;
10268|      0|    yych = *(marker = ++p);
10269|      0|    if (yych <= 0x8F)
10270|      0|      goto yy661;
10271|      0|    if (yych <= 0xBF)
10272|      0|      goto yy678;
10273|      0|    goto yy661;
10274|      0|  yy669:
10275|      0|    yyaccept = 0;
10276|      0|    yych = *(marker = ++p);
10277|      0|    if (yych <= 0x7F)
10278|      0|      goto yy661;
10279|      0|    if (yych <= 0xBF)
10280|      0|      goto yy678;
10281|      0|    goto yy661;
10282|      0|  yy670:
10283|      0|    yyaccept = 0;
10284|      0|    yych = *(marker = ++p);
10285|      0|    if (yych <= 0x7F)
10286|      0|      goto yy661;
10287|      0|    if (yych <= 0x8F)
10288|      0|      goto yy678;
10289|      0|    goto yy661;
10290|      0|  yy671:
10291|      0|    yych = *++p;
10292|      0|  yy672:
10293|      0|    if (yybm[0 + yych] & 64) {
10294|      0|      goto yy671;
10295|      0|    }
10296|      0|    if (yych <= 0xEC) {
10297|      0|      if (yych <= 0xC1) {
10298|      0|        if (yych <= '\n')
10299|      0|          goto yy673;
10300|      0|        if (yych <= '?')
10301|      0|          goto yy674;
10302|      0|      } else {
10303|      0|        if (yych <= 0xDF)
10304|      0|          goto yy676;
10305|      0|        if (yych <= 0xE0)
10306|      0|          goto yy677;
10307|      0|        goto yy678;
10308|      0|      }
10309|      0|    } else {
10310|      0|      if (yych <= 0xF0) {
10311|      0|        if (yych <= 0xED)
10312|      0|          goto yy679;
10313|      0|        if (yych <= 0xEF)
10314|      0|          goto yy678;
10315|      0|        goto yy680;
10316|      0|      } else {
10317|      0|        if (yych <= 0xF3)
10318|      0|          goto yy681;
10319|      0|        if (yych <= 0xF4)
10320|      0|          goto yy682;
10321|      0|      }
10322|      0|    }
10323|      0|  yy673:
10324|      0|    p = marker;
10325|      0|    if (yyaccept == 0) {
10326|      0|      goto yy661;
10327|      0|    } else {
10328|      0|      goto yy684;
10329|      0|    }
10330|      0|  yy674:
10331|      0|    yych = *++p;
10332|      0|    if (yybm[0 + yych] & 128) {
10333|      0|      goto yy674;
10334|      0|    }
10335|      0|    if (yych <= 0xDF) {
10336|      0|      if (yych <= '=') {
10337|      0|        if (yych <= 0x00)
10338|      0|          goto yy673;
10339|      0|        if (yych == '\n')
10340|      0|          goto yy673;
10341|      0|        goto yy671;
10342|      0|      } else {
10343|      0|        if (yych <= '>')
10344|      0|          goto yy683;
10345|      0|        if (yych <= 0x7F)
10346|      0|          goto yy671;
10347|      0|        if (yych <= 0xC1)
10348|      0|          goto yy673;
10349|      0|      }
10350|      0|    } else {
10351|      0|      if (yych <= 0xEF) {
10352|      0|        if (yych <= 0xE0)
10353|      0|          goto yy677;
10354|      0|        if (yych == 0xED)
10355|      0|          goto yy679;
10356|      0|        goto yy678;
10357|      0|      } else {
10358|      0|        if (yych <= 0xF0)
10359|      0|          goto yy680;
10360|      0|        if (yych <= 0xF3)
10361|      0|          goto yy681;
10362|      0|        if (yych <= 0xF4)
10363|      0|          goto yy682;
10364|      0|        goto yy673;
10365|      0|      }
10366|      0|    }
10367|      0|  yy676:
10368|      0|    yych = *++p;
10369|      0|    if (yych <= 0x7F)
10370|      0|      goto yy673;
10371|      0|    if (yych <= 0xBF)
10372|      0|      goto yy671;
10373|      0|    goto yy673;
10374|      0|  yy677:
10375|      0|    yych = *++p;
10376|      0|    if (yych <= 0x9F)
10377|      0|      goto yy673;
10378|      0|    if (yych <= 0xBF)
10379|      0|      goto yy676;
10380|      0|    goto yy673;
10381|      0|  yy678:
10382|      0|    yych = *++p;
10383|      0|    if (yych <= 0x7F)
10384|      0|      goto yy673;
10385|      0|    if (yych <= 0xBF)
10386|      0|      goto yy676;
10387|      0|    goto yy673;
10388|      0|  yy679:
10389|      0|    yych = *++p;
10390|      0|    if (yych <= 0x7F)
10391|      0|      goto yy673;
10392|      0|    if (yych <= 0x9F)
10393|      0|      goto yy676;
10394|      0|    goto yy673;
10395|      0|  yy680:
10396|      0|    yych = *++p;
10397|      0|    if (yych <= 0x8F)
10398|      0|      goto yy673;
10399|      0|    if (yych <= 0xBF)
10400|      0|      goto yy678;
10401|      0|    goto yy673;
10402|      0|  yy681:
10403|      0|    yych = *++p;
10404|      0|    if (yych <= 0x7F)
10405|      0|      goto yy673;
10406|      0|    if (yych <= 0xBF)
10407|      0|      goto yy678;
10408|      0|    goto yy673;
10409|      0|  yy682:
10410|      0|    yych = *++p;
10411|      0|    if (yych <= 0x7F)
10412|      0|      goto yy673;
10413|      0|    if (yych <= 0x8F)
10414|      0|      goto yy678;
10415|      0|    goto yy673;
10416|      0|  yy683:
10417|      0|    yyaccept = 1;
10418|      0|    yych = *(marker = ++p);
10419|      0|    if (yybm[0 + yych] & 64) {
10420|      0|      goto yy671;
10421|      0|    }
10422|      0|    if (yych <= 0xEC) {
10423|      0|      if (yych <= 0xC1) {
10424|      0|        if (yych <= '\n')
10425|      0|          goto yy684;
10426|      0|        if (yych <= '?')
10427|      0|          goto yy674;
10428|      0|      } else {
10429|      0|        if (yych <= 0xDF)
10430|      0|          goto yy676;
10431|      0|        if (yych <= 0xE0)
10432|      0|          goto yy677;
10433|      0|        goto yy678;
10434|      0|      }
10435|      0|    } else {
10436|      0|      if (yych <= 0xF0) {
10437|      0|        if (yych <= 0xED)
10438|      0|          goto yy679;
10439|      0|        if (yych <= 0xEF)
10440|      0|          goto yy678;
10441|      0|        goto yy680;
10442|      0|      } else {
10443|      0|        if (yych <= 0xF3)
10444|      0|          goto yy681;
10445|      0|        if (yych <= 0xF4)
10446|      0|          goto yy682;
10447|      0|      }
10448|      0|    }
10449|      0|  yy684 : { return (bufsize_t)(p - start); }
10450|      0|  }
10451|      0|}
10452|       |
10453|       |// Try to match an HTML block end line of type 4
10454|      0|bufsize_t _scan_html_block_end_4(const unsigned char *p) {
10455|      0|  const unsigned char *marker = NULL;
10456|      0|  const unsigned char *start = p;
10457|       |
10458|      0|  {
10459|      0|    unsigned char yych;
10460|      0|    unsigned int yyaccept = 0;
10461|      0|    static const unsigned char yybm[] = {
10462|      0|        0,   128, 128, 128, 128, 128, 128, 128, 128, 128, 0,   128, 128, 128,
10463|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
10464|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
10465|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
10466|      0|        128, 128, 128, 128, 128, 128, 64,  128, 128, 128, 128, 128, 128, 128,
10467|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
10468|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
10469|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
10470|      0|        128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
10471|      0|        128, 128, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
10472|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
10473|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
10474|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
10475|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
10476|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
10477|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
10478|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
10479|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
10480|      0|        0,   0,   0,   0,
10481|      0|    };
10482|      0|    yych = *p;
10483|      0|    if (yybm[0 + yych] & 64) {
10484|      0|      goto yy690;
10485|      0|    }
10486|      0|    if (yych <= 0xE0) {
10487|      0|      if (yych <= '\n') {
10488|      0|        if (yych <= 0x00)
10489|      0|          goto yy687;
10490|      0|        if (yych <= '\t')
10491|      0|          goto yy689;
10492|      0|      } else {
10493|      0|        if (yych <= 0x7F)
10494|      0|          goto yy689;
10495|      0|        if (yych <= 0xC1)
10496|      0|          goto yy687;
10497|      0|        if (yych <= 0xDF)
10498|      0|          goto yy693;
10499|      0|        goto yy694;
10500|      0|      }
10501|      0|    } else {
10502|      0|      if (yych <= 0xEF) {
10503|      0|        if (yych == 0xED)
10504|      0|          goto yy696;
10505|      0|        goto yy695;
10506|      0|      } else {
10507|      0|        if (yych <= 0xF0)
10508|      0|          goto yy697;
10509|      0|        if (yych <= 0xF3)
10510|      0|          goto yy698;
10511|      0|        if (yych <= 0xF4)
10512|      0|          goto yy699;
10513|      0|      }
10514|      0|    }
10515|      0|  yy687:
10516|      0|    ++p;
10517|      0|  yy688 : { return 0; }
10518|      0|  yy689:
10519|      0|    yyaccept = 0;
10520|      0|    yych = *(marker = ++p);
10521|      0|    if (yych <= '\n') {
10522|      0|      if (yych <= 0x00)
10523|      0|        goto yy688;
10524|      0|      if (yych <= '\t')
10525|      0|        goto yy701;
10526|      0|      goto yy688;
10527|      0|    } else {
10528|      0|      if (yych <= 0x7F)
10529|      0|        goto yy701;
10530|      0|      if (yych <= 0xC1)
10531|      0|        goto yy688;
10532|      0|      if (yych <= 0xF4)
10533|      0|        goto yy701;
10534|      0|      goto yy688;
10535|      0|    }
10536|      0|  yy690:
10537|      0|    yyaccept = 1;
10538|      0|    yych = *(marker = ++p);
10539|      0|    if (yybm[0 + yych] & 128) {
10540|      0|      goto yy700;
10541|      0|    }
10542|      0|    if (yych <= 0xEC) {
10543|      0|      if (yych <= 0xC1) {
10544|      0|        if (yych <= '\n')
10545|      0|          goto yy692;
10546|      0|        if (yych <= '>')
10547|      0|          goto yy690;
10548|      0|      } else {
10549|      0|        if (yych <= 0xDF)
10550|      0|          goto yy703;
10551|      0|        if (yych <= 0xE0)
10552|      0|          goto yy704;
10553|      0|        goto yy705;
10554|      0|      }
10555|      0|    } else {
10556|      0|      if (yych <= 0xF0) {
10557|      0|        if (yych <= 0xED)
10558|      0|          goto yy706;
10559|      0|        if (yych <= 0xEF)
10560|      0|          goto yy705;
10561|      0|        goto yy707;
10562|      0|      } else {
10563|      0|        if (yych <= 0xF3)
10564|      0|          goto yy708;
10565|      0|        if (yych <= 0xF4)
10566|      0|          goto yy709;
10567|      0|      }
10568|      0|    }
10569|      0|  yy692 : { return (bufsize_t)(p - start); }
10570|      0|  yy693:
10571|      0|    yyaccept = 0;
10572|      0|    yych = *(marker = ++p);
10573|      0|    if (yych <= 0x7F)
10574|      0|      goto yy688;
10575|      0|    if (yych <= 0xBF)
10576|      0|      goto yy700;
10577|      0|    goto yy688;
10578|      0|  yy694:
10579|      0|    yyaccept = 0;
10580|      0|    yych = *(marker = ++p);
10581|      0|    if (yych <= 0x9F)
10582|      0|      goto yy688;
10583|      0|    if (yych <= 0xBF)
10584|      0|      goto yy703;
10585|      0|    goto yy688;
10586|      0|  yy695:
10587|      0|    yyaccept = 0;
10588|      0|    yych = *(marker = ++p);
10589|      0|    if (yych <= 0x7F)
10590|      0|      goto yy688;
10591|      0|    if (yych <= 0xBF)
10592|      0|      goto yy703;
10593|      0|    goto yy688;
10594|      0|  yy696:
10595|      0|    yyaccept = 0;
10596|      0|    yych = *(marker = ++p);
10597|      0|    if (yych <= 0x7F)
10598|      0|      goto yy688;
10599|      0|    if (yych <= 0x9F)
10600|      0|      goto yy703;
10601|      0|    goto yy688;
10602|      0|  yy697:
10603|      0|    yyaccept = 0;
10604|      0|    yych = *(marker = ++p);
10605|      0|    if (yych <= 0x8F)
10606|      0|      goto yy688;
10607|      0|    if (yych <= 0xBF)
10608|      0|      goto yy705;
10609|      0|    goto yy688;
10610|      0|  yy698:
10611|      0|    yyaccept = 0;
10612|      0|    yych = *(marker = ++p);
10613|      0|    if (yych <= 0x7F)
10614|      0|      goto yy688;
10615|      0|    if (yych <= 0xBF)
10616|      0|      goto yy705;
10617|      0|    goto yy688;
10618|      0|  yy699:
10619|      0|    yyaccept = 0;
10620|      0|    yych = *(marker = ++p);
10621|      0|    if (yych <= 0x7F)
10622|      0|      goto yy688;
10623|      0|    if (yych <= 0x8F)
10624|      0|      goto yy705;
10625|      0|    goto yy688;
10626|      0|  yy700:
10627|      0|    yych = *++p;
10628|      0|  yy701:
10629|      0|    if (yybm[0 + yych] & 128) {
10630|      0|      goto yy700;
10631|      0|    }
10632|      0|    if (yych <= 0xEC) {
10633|      0|      if (yych <= 0xC1) {
10634|      0|        if (yych <= '\n')
10635|      0|          goto yy702;
10636|      0|        if (yych <= '>')
10637|      0|          goto yy690;
10638|      0|      } else {
10639|      0|        if (yych <= 0xDF)
10640|      0|          goto yy703;
10641|      0|        if (yych <= 0xE0)
10642|      0|          goto yy704;
10643|      0|        goto yy705;
10644|      0|      }
10645|      0|    } else {
10646|      0|      if (yych <= 0xF0) {
10647|      0|        if (yych <= 0xED)
10648|      0|          goto yy706;
10649|      0|        if (yych <= 0xEF)
10650|      0|          goto yy705;
10651|      0|        goto yy707;
10652|      0|      } else {
10653|      0|        if (yych <= 0xF3)
10654|      0|          goto yy708;
10655|      0|        if (yych <= 0xF4)
10656|      0|          goto yy709;
10657|      0|      }
10658|      0|    }
10659|      0|  yy702:
10660|      0|    p = marker;
10661|      0|    if (yyaccept == 0) {
10662|      0|      goto yy688;
10663|      0|    } else {
10664|      0|      goto yy692;
10665|      0|    }
10666|      0|  yy703:
10667|      0|    yych = *++p;
10668|      0|    if (yych <= 0x7F)
10669|      0|      goto yy702;
10670|      0|    if (yych <= 0xBF)
10671|      0|      goto yy700;
10672|      0|    goto yy702;
10673|      0|  yy704:
10674|      0|    yych = *++p;
10675|      0|    if (yych <= 0x9F)
10676|      0|      goto yy702;
10677|      0|    if (yych <= 0xBF)
10678|      0|      goto yy703;
10679|      0|    goto yy702;
10680|      0|  yy705:
10681|      0|    yych = *++p;
10682|      0|    if (yych <= 0x7F)
10683|      0|      goto yy702;
10684|      0|    if (yych <= 0xBF)
10685|      0|      goto yy703;
10686|      0|    goto yy702;
10687|      0|  yy706:
10688|      0|    yych = *++p;
10689|      0|    if (yych <= 0x7F)
10690|      0|      goto yy702;
10691|      0|    if (yych <= 0x9F)
10692|      0|      goto yy703;
10693|      0|    goto yy702;
10694|      0|  yy707:
10695|      0|    yych = *++p;
10696|      0|    if (yych <= 0x8F)
10697|      0|      goto yy702;
10698|      0|    if (yych <= 0xBF)
10699|      0|      goto yy705;
10700|      0|    goto yy702;
10701|      0|  yy708:
10702|      0|    yych = *++p;
10703|      0|    if (yych <= 0x7F)
10704|      0|      goto yy702;
10705|      0|    if (yych <= 0xBF)
10706|      0|      goto yy705;
10707|      0|    goto yy702;
10708|      0|  yy709:
10709|      0|    yych = *++p;
10710|      0|    if (yych <= 0x7F)
10711|      0|      goto yy702;
10712|      0|    if (yych <= 0x8F)
10713|      0|      goto yy705;
10714|      0|    goto yy702;
10715|      0|  }
10716|      0|}
10717|       |
10718|       |// Try to match an HTML block end line of type 5
10719|      0|bufsize_t _scan_html_block_end_5(const unsigned char *p) {
10720|      0|  const unsigned char *marker = NULL;
10721|      0|  const unsigned char *start = p;
10722|       |
10723|      0|  {
10724|      0|    unsigned char yych;
10725|      0|    unsigned int yyaccept = 0;
10726|      0|    static const unsigned char yybm[] = {
10727|      0|        0,  64, 64, 64,  64, 64, 64, 64, 64, 64, 0,  64, 64, 64, 64, 64, 64, 64,
10728|      0|        64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
10729|      0|        64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
10730|      0|        64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
10731|      0|        64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
10732|      0|        64, 64, 64, 128, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
10733|      0|        64, 64, 64, 64,  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
10734|      0|        64, 64, 0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
10735|      0|        0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
10736|      0|        0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
10737|      0|        0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
10738|      0|        0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
10739|      0|        0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
10740|      0|        0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
10741|      0|        0,  0,  0,  0,
10742|      0|    };
10743|      0|    yych = *p;
10744|      0|    if (yych <= 0xDF) {
10745|      0|      if (yych <= '\\') {
10746|      0|        if (yych <= 0x00)
10747|      0|          goto yy712;
10748|      0|        if (yych != '\n')
10749|      0|          goto yy714;
10750|      0|      } else {
10751|      0|        if (yych <= ']')
10752|      0|          goto yy715;
10753|      0|        if (yych <= 0x7F)
10754|      0|          goto yy714;
10755|      0|        if (yych >= 0xC2)
10756|      0|          goto yy716;
10757|      0|      }
10758|      0|    } else {
10759|      0|      if (yych <= 0xEF) {
10760|      0|        if (yych <= 0xE0)
10761|      0|          goto yy717;
10762|      0|        if (yych == 0xED)
10763|      0|          goto yy719;
10764|      0|        goto yy718;
10765|      0|      } else {
10766|      0|        if (yych <= 0xF0)
10767|      0|          goto yy720;
10768|      0|        if (yych <= 0xF3)
10769|      0|          goto yy721;
10770|      0|        if (yych <= 0xF4)
10771|      0|          goto yy722;
10772|      0|      }
10773|      0|    }
10774|      0|  yy712:
10775|      0|    ++p;
10776|      0|  yy713 : { return 0; }
10777|      0|  yy714:
10778|      0|    yyaccept = 0;
10779|      0|    yych = *(marker = ++p);
10780|      0|    if (yych <= '\n') {
10781|      0|      if (yych <= 0x00)
10782|      0|        goto yy713;
10783|      0|      if (yych <= '\t')
10784|      0|        goto yy724;
10785|      0|      goto yy713;
10786|      0|    } else {
10787|      0|      if (yych <= 0x7F)
10788|      0|        goto yy724;
10789|      0|      if (yych <= 0xC1)
10790|      0|        goto yy713;
10791|      0|      if (yych <= 0xF4)
10792|      0|        goto yy724;
10793|      0|      goto yy713;
10794|      0|    }
10795|      0|  yy715:
10796|      0|    yyaccept = 0;
10797|      0|    yych = *(marker = ++p);
10798|      0|    if (yybm[0 + yych] & 128) {
10799|      0|      goto yy734;
10800|      0|    }
10801|      0|    if (yych <= '\n') {
10802|      0|      if (yych <= 0x00)
10803|      0|        goto yy713;
10804|      0|      if (yych <= '\t')
10805|      0|        goto yy724;
10806|      0|      goto yy713;
10807|      0|    } else {
10808|      0|      if (yych <= 0x7F)
10809|      0|        goto yy724;
10810|      0|      if (yych <= 0xC1)
10811|      0|        goto yy713;
10812|      0|      if (yych <= 0xF4)
10813|      0|        goto yy724;
10814|      0|      goto yy713;
10815|      0|    }
10816|      0|  yy716:
10817|      0|    yyaccept = 0;
10818|      0|    yych = *(marker = ++p);
10819|      0|    if (yych <= 0x7F)
10820|      0|      goto yy713;
10821|      0|    if (yych <= 0xBF)
10822|      0|      goto yy723;
10823|      0|    goto yy713;
10824|      0|  yy717:
10825|      0|    yyaccept = 0;
10826|      0|    yych = *(marker = ++p);
10827|      0|    if (yych <= 0x9F)
10828|      0|      goto yy713;
10829|      0|    if (yych <= 0xBF)
10830|      0|      goto yy727;
10831|      0|    goto yy713;
10832|      0|  yy718:
10833|      0|    yyaccept = 0;
10834|      0|    yych = *(marker = ++p);
10835|      0|    if (yych <= 0x7F)
10836|      0|      goto yy713;
10837|      0|    if (yych <= 0xBF)
10838|      0|      goto yy727;
10839|      0|    goto yy713;
10840|      0|  yy719:
10841|      0|    yyaccept = 0;
10842|      0|    yych = *(marker = ++p);
10843|      0|    if (yych <= 0x7F)
10844|      0|      goto yy713;
10845|      0|    if (yych <= 0x9F)
10846|      0|      goto yy727;
10847|      0|    goto yy713;
10848|      0|  yy720:
10849|      0|    yyaccept = 0;
10850|      0|    yych = *(marker = ++p);
10851|      0|    if (yych <= 0x8F)
10852|      0|      goto yy713;
10853|      0|    if (yych <= 0xBF)
10854|      0|      goto yy729;
10855|      0|    goto yy713;
10856|      0|  yy721:
10857|      0|    yyaccept = 0;
10858|      0|    yych = *(marker = ++p);
10859|      0|    if (yych <= 0x7F)
10860|      0|      goto yy713;
10861|      0|    if (yych <= 0xBF)
10862|      0|      goto yy729;
10863|      0|    goto yy713;
10864|      0|  yy722:
10865|      0|    yyaccept = 0;
10866|      0|    yych = *(marker = ++p);
10867|      0|    if (yych <= 0x7F)
10868|      0|      goto yy713;
10869|      0|    if (yych <= 0x8F)
10870|      0|      goto yy729;
10871|      0|    goto yy713;
10872|      0|  yy723:
10873|      0|    yych = *++p;
10874|      0|  yy724:
10875|      0|    if (yybm[0 + yych] & 64) {
10876|      0|      goto yy723;
10877|      0|    }
10878|      0|    if (yych <= 0xEC) {
10879|      0|      if (yych <= 0xC1) {
10880|      0|        if (yych <= '\n')
10881|      0|          goto yy725;
10882|      0|        if (yych <= ']')
10883|      0|          goto yy726;
10884|      0|      } else {
10885|      0|        if (yych <= 0xDF)
10886|      0|          goto yy727;
10887|      0|        if (yych <= 0xE0)
10888|      0|          goto yy728;
10889|      0|        goto yy729;
10890|      0|      }
10891|      0|    } else {
10892|      0|      if (yych <= 0xF0) {
10893|      0|        if (yych <= 0xED)
10894|      0|          goto yy730;
10895|      0|        if (yych <= 0xEF)
10896|      0|          goto yy729;
10897|      0|        goto yy731;
10898|      0|      } else {
10899|      0|        if (yych <= 0xF3)
10900|      0|          goto yy732;
10901|      0|        if (yych <= 0xF4)
10902|      0|          goto yy733;
10903|      0|      }
10904|      0|    }
10905|      0|  yy725:
10906|      0|    p = marker;
10907|      0|    if (yyaccept == 0) {
10908|      0|      goto yy713;
10909|      0|    } else {
10910|      0|      goto yy737;
10911|      0|    }
10912|      0|  yy726:
10913|      0|    yych = *++p;
10914|      0|    if (yybm[0 + yych] & 64) {
10915|      0|      goto yy723;
10916|      0|    }
10917|      0|    if (yych <= 0xEC) {
10918|      0|      if (yych <= 0xC1) {
10919|      0|        if (yych <= '\n')
10920|      0|          goto yy725;
10921|      0|        if (yych <= ']')
10922|      0|          goto yy734;
10923|      0|        goto yy725;
10924|      0|      } else {
10925|      0|        if (yych <= 0xDF)
10926|      0|          goto yy727;
10927|      0|        if (yych <= 0xE0)
10928|      0|          goto yy728;
10929|      0|        goto yy729;
10930|      0|      }
10931|      0|    } else {
10932|      0|      if (yych <= 0xF0) {
10933|      0|        if (yych <= 0xED)
10934|      0|          goto yy730;
10935|      0|        if (yych <= 0xEF)
10936|      0|          goto yy729;
10937|      0|        goto yy731;
10938|      0|      } else {
10939|      0|        if (yych <= 0xF3)
10940|      0|          goto yy732;
10941|      0|        if (yych <= 0xF4)
10942|      0|          goto yy733;
10943|      0|        goto yy725;
10944|      0|      }
10945|      0|    }
10946|      0|  yy727:
10947|      0|    yych = *++p;
10948|      0|    if (yych <= 0x7F)
10949|      0|      goto yy725;
10950|      0|    if (yych <= 0xBF)
10951|      0|      goto yy723;
10952|      0|    goto yy725;
10953|      0|  yy728:
10954|      0|    yych = *++p;
10955|      0|    if (yych <= 0x9F)
10956|      0|      goto yy725;
10957|      0|    if (yych <= 0xBF)
10958|      0|      goto yy727;
10959|      0|    goto yy725;
10960|      0|  yy729:
10961|      0|    yych = *++p;
10962|      0|    if (yych <= 0x7F)
10963|      0|      goto yy725;
10964|      0|    if (yych <= 0xBF)
10965|      0|      goto yy727;
10966|      0|    goto yy725;
10967|      0|  yy730:
10968|      0|    yych = *++p;
10969|      0|    if (yych <= 0x7F)
10970|      0|      goto yy725;
10971|      0|    if (yych <= 0x9F)
10972|      0|      goto yy727;
10973|      0|    goto yy725;
10974|      0|  yy731:
10975|      0|    yych = *++p;
10976|      0|    if (yych <= 0x8F)
10977|      0|      goto yy725;
10978|      0|    if (yych <= 0xBF)
10979|      0|      goto yy729;
10980|      0|    goto yy725;
10981|      0|  yy732:
10982|      0|    yych = *++p;
10983|      0|    if (yych <= 0x7F)
10984|      0|      goto yy725;
10985|      0|    if (yych <= 0xBF)
10986|      0|      goto yy729;
10987|      0|    goto yy725;
10988|      0|  yy733:
10989|      0|    yych = *++p;
10990|      0|    if (yych <= 0x7F)
10991|      0|      goto yy725;
10992|      0|    if (yych <= 0x8F)
10993|      0|      goto yy729;
10994|      0|    goto yy725;
10995|      0|  yy734:
10996|      0|    yych = *++p;
10997|      0|    if (yybm[0 + yych] & 128) {
10998|      0|      goto yy734;
10999|      0|    }
11000|      0|    if (yych <= 0xDF) {
11001|      0|      if (yych <= '=') {
11002|      0|        if (yych <= 0x00)
11003|      0|          goto yy725;
11004|      0|        if (yych == '\n')
11005|      0|          goto yy725;
11006|      0|        goto yy723;
11007|      0|      } else {
11008|      0|        if (yych <= '>')
11009|      0|          goto yy736;
11010|      0|        if (yych <= 0x7F)
11011|      0|          goto yy723;
11012|      0|        if (yych <= 0xC1)
11013|      0|          goto yy725;
11014|      0|        goto yy727;
11015|      0|      }
11016|      0|    } else {
11017|      0|      if (yych <= 0xEF) {
11018|      0|        if (yych <= 0xE0)
11019|      0|          goto yy728;
11020|      0|        if (yych == 0xED)
11021|      0|          goto yy730;
11022|      0|        goto yy729;
11023|      0|      } else {
11024|      0|        if (yych <= 0xF0)
11025|      0|          goto yy731;
11026|      0|        if (yych <= 0xF3)
11027|      0|          goto yy732;
11028|      0|        if (yych <= 0xF4)
11029|      0|          goto yy733;
11030|      0|        goto yy725;
11031|      0|      }
11032|      0|    }
11033|      0|  yy736:
11034|      0|    yyaccept = 1;
11035|      0|    yych = *(marker = ++p);
11036|      0|    if (yybm[0 + yych] & 64) {
11037|      0|      goto yy723;
11038|      0|    }
11039|      0|    if (yych <= 0xEC) {
11040|      0|      if (yych <= 0xC1) {
11041|      0|        if (yych <= '\n')
11042|      0|          goto yy737;
11043|      0|        if (yych <= ']')
11044|      0|          goto yy726;
11045|      0|      } else {
11046|      0|        if (yych <= 0xDF)
11047|      0|          goto yy727;
11048|      0|        if (yych <= 0xE0)
11049|      0|          goto yy728;
11050|      0|        goto yy729;
11051|      0|      }
11052|      0|    } else {
11053|      0|      if (yych <= 0xF0) {
11054|      0|        if (yych <= 0xED)
11055|      0|          goto yy730;
11056|      0|        if (yych <= 0xEF)
11057|      0|          goto yy729;
11058|      0|        goto yy731;
11059|      0|      } else {
11060|      0|        if (yych <= 0xF3)
11061|      0|          goto yy732;
11062|      0|        if (yych <= 0xF4)
11063|      0|          goto yy733;
11064|      0|      }
11065|      0|    }
11066|      0|  yy737 : { return (bufsize_t)(p - start); }
11067|      0|  }
11068|      0|}
11069|       |
11070|       |// Try to match a link title (in single quotes, in double quotes, or
11071|       |// in parentheses), returning number of chars matched.  Allow one
11072|       |// level of internal nesting (quotes within quotes).
11073|      0|bufsize_t _scan_link_title(const unsigned char *p) {
11074|      0|  const unsigned char *marker = NULL;
11075|      0|  const unsigned char *start = p;
11076|       |
11077|      0|  {
11078|      0|    unsigned char yych;
11079|      0|    unsigned int yyaccept = 0;
11080|      0|    static const unsigned char yybm[] = {
11081|      0|        0,   208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
11082|      0|        208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
11083|      0|        208, 208, 208, 208, 208, 208, 192, 208, 208, 208, 208, 144, 80,  80,
11084|      0|        208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
11085|      0|        208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
11086|      0|        208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
11087|      0|        208, 208, 208, 208, 208, 208, 208, 208, 32,  208, 208, 208, 208, 208,
11088|      0|        208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
11089|      0|        208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
11090|      0|        208, 208, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11091|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11092|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11093|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11094|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11095|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11096|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11097|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11098|      0|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11099|      0|        0,   0,   0,   0,
11100|      0|    };
11101|      0|    yych = *p;
11102|      0|    if (yych <= '&') {
11103|      0|      if (yych == '"')
11104|      0|        goto yy742;
11105|      0|    } else {
11106|      0|      if (yych <= '\'')
11107|      0|        goto yy743;
11108|      0|      if (yych <= '(')
11109|      0|        goto yy744;
11110|      0|    }
11111|      0|    ++p;
11112|      0|  yy741 : { return 0; }
11113|      0|  yy742:
11114|      0|    yyaccept = 0;
11115|      0|    yych = *(marker = ++p);
11116|      0|    if (yych <= 0x00)
11117|      0|      goto yy741;
11118|      0|    if (yych <= 0x7F)
11119|      0|      goto yy746;
11120|      0|    if (yych <= 0xC1)
11121|      0|      goto yy741;
11122|      0|    if (yych <= 0xF4)
11123|      0|      goto yy746;
11124|      0|    goto yy741;
11125|      0|  yy743:
11126|      0|    yyaccept = 0;
11127|      0|    yych = *(marker = ++p);
11128|      0|    if (yych <= 0x00)
11129|      0|      goto yy741;
11130|      0|    if (yych <= 0x7F)
11131|      0|      goto yy760;
11132|      0|    if (yych <= 0xC1)
11133|      0|      goto yy741;
11134|      0|    if (yych <= 0xF4)
11135|      0|      goto yy760;
11136|      0|    goto yy741;
11137|      0|  yy744:
11138|      0|    yyaccept = 0;
11139|      0|    yych = *(marker = ++p);
11140|      0|    if (yych <= '(') {
11141|      0|      if (yych <= 0x00)
11142|      0|        goto yy741;
11143|      0|      if (yych <= '\'')
11144|      0|        goto yy773;
11145|      0|      goto yy741;
11146|      0|    } else {
11147|      0|      if (yych <= 0x7F)
11148|      0|        goto yy773;
11149|      0|      if (yych <= 0xC1)
11150|      0|        goto yy741;
11151|      0|      if (yych <= 0xF4)
11152|      0|        goto yy773;
11153|      0|      goto yy741;
11154|      0|    }
11155|      0|  yy745:
11156|      0|    yych = *++p;
11157|      0|  yy746:
11158|      0|    if (yybm[0 + yych] & 16) {
11159|      0|      goto yy745;
11160|      0|    }
11161|      0|    if (yych <= 0xE0) {
11162|      0|      if (yych <= '\\') {
11163|      0|        if (yych <= 0x00)
11164|      0|          goto yy747;
11165|      0|        if (yych <= '"')
11166|      0|          goto yy748;
11167|      0|        goto yy750;
11168|      0|      } else {
11169|      0|        if (yych <= 0xC1)
11170|      0|          goto yy747;
11171|      0|        if (yych <= 0xDF)
11172|      0|          goto yy752;
11173|      0|        goto yy753;
11174|      0|      }
11175|      0|    } else {
11176|      0|      if (yych <= 0xEF) {
11177|      0|        if (yych == 0xED)
11178|      0|          goto yy755;
11179|      0|        goto yy754;
11180|      0|      } else {
11181|      0|        if (yych <= 0xF0)
11182|      0|          goto yy756;
11183|      0|        if (yych <= 0xF3)
11184|      0|          goto yy757;
11185|      0|        if (yych <= 0xF4)
11186|      0|          goto yy758;
11187|      0|      }
11188|      0|    }
11189|      0|  yy747:
11190|      0|    p = marker;
11191|      0|    if (yyaccept <= 1) {
11192|      0|      if (yyaccept == 0) {
11193|      0|        goto yy741;
11194|      0|      } else {
11195|      0|        goto yy749;
11196|      0|      }
11197|      0|    } else {
11198|      0|      if (yyaccept == 2) {
11199|      0|        goto yy762;
11200|      0|      } else {
11201|      0|        goto yy775;
11202|      0|      }
11203|      0|    }
11204|      0|  yy748:
11205|      0|    ++p;
11206|      0|  yy749 : { return (bufsize_t)(p - start); }
11207|      0|  yy750:
11208|      0|    yych = *++p;
11209|      0|    if (yybm[0 + yych] & 16) {
11210|      0|      goto yy745;
11211|      0|    }
11212|      0|    if (yych <= 0xE0) {
11213|      0|      if (yych <= '\\') {
11214|      0|        if (yych <= 0x00)
11215|      0|          goto yy747;
11216|      0|        if (yych <= '"')
11217|      0|          goto yy785;
11218|      0|        goto yy750;
11219|      0|      } else {
11220|      0|        if (yych <= 0xC1)
11221|      0|          goto yy747;
11222|      0|        if (yych >= 0xE0)
11223|      0|          goto yy753;
11224|      0|      }
11225|      0|    } else {
11226|      0|      if (yych <= 0xEF) {
11227|      0|        if (yych == 0xED)
11228|      0|          goto yy755;
11229|      0|        goto yy754;
11230|      0|      } else {
11231|      0|        if (yych <= 0xF0)
11232|      0|          goto yy756;
11233|      0|        if (yych <= 0xF3)
11234|      0|          goto yy757;
11235|      0|        if (yych <= 0xF4)
11236|      0|          goto yy758;
11237|      0|        goto yy747;
11238|      0|      }
11239|      0|    }
11240|      0|  yy752:
11241|      0|    yych = *++p;
11242|      0|    if (yych <= 0x7F)
11243|      0|      goto yy747;
11244|      0|    if (yych <= 0xBF)
11245|      0|      goto yy745;
11246|      0|    goto yy747;
11247|      0|  yy753:
11248|      0|    yych = *++p;
11249|      0|    if (yych <= 0x9F)
11250|      0|      goto yy747;
11251|      0|    if (yych <= 0xBF)
11252|      0|      goto yy752;
11253|      0|    goto yy747;
11254|      0|  yy754:
11255|      0|    yych = *++p;
11256|      0|    if (yych <= 0x7F)
11257|      0|      goto yy747;
11258|      0|    if (yych <= 0xBF)
11259|      0|      goto yy752;
11260|      0|    goto yy747;
11261|      0|  yy755:
11262|      0|    yych = *++p;
11263|      0|    if (yych <= 0x7F)
11264|      0|      goto yy747;
11265|      0|    if (yych <= 0x9F)
11266|      0|      goto yy752;
11267|      0|    goto yy747;
11268|      0|  yy756:
11269|      0|    yych = *++p;
11270|      0|    if (yych <= 0x8F)
11271|      0|      goto yy747;
11272|      0|    if (yych <= 0xBF)
11273|      0|      goto yy754;
11274|      0|    goto yy747;
11275|      0|  yy757:
11276|      0|    yych = *++p;
11277|      0|    if (yych <= 0x7F)
11278|      0|      goto yy747;
11279|      0|    if (yych <= 0xBF)
11280|      0|      goto yy754;
11281|      0|    goto yy747;
11282|      0|  yy758:
11283|      0|    yych = *++p;
11284|      0|    if (yych <= 0x7F)
11285|      0|      goto yy747;
11286|      0|    if (yych <= 0x8F)
11287|      0|      goto yy754;
11288|      0|    goto yy747;
11289|      0|  yy759:
11290|      0|    yych = *++p;
11291|      0|  yy760:
11292|      0|    if (yybm[0 + yych] & 64) {
11293|      0|      goto yy759;
11294|      0|    }
11295|      0|    if (yych <= 0xE0) {
11296|      0|      if (yych <= '\\') {
11297|      0|        if (yych <= 0x00)
11298|      0|          goto yy747;
11299|      0|        if (yych >= '(')
11300|      0|          goto yy763;
11301|      0|      } else {
11302|      0|        if (yych <= 0xC1)
11303|      0|          goto yy747;
11304|      0|        if (yych <= 0xDF)
11305|      0|          goto yy765;
11306|      0|        goto yy766;
11307|      0|      }
11308|      0|    } else {
11309|      0|      if (yych <= 0xEF) {
11310|      0|        if (yych == 0xED)
11311|      0|          goto yy768;
11312|      0|        goto yy767;
11313|      0|      } else {
11314|      0|        if (yych <= 0xF0)
11315|      0|          goto yy769;
11316|      0|        if (yych <= 0xF3)
11317|      0|          goto yy770;
11318|      0|        if (yych <= 0xF4)
11319|      0|          goto yy771;
11320|      0|        goto yy747;
11321|      0|      }
11322|      0|    }
11323|      0|  yy761:
11324|      0|    ++p;
11325|      0|  yy762 : { return (bufsize_t)(p - start); }
11326|      0|  yy763:
11327|      0|    yych = *++p;
11328|      0|    if (yybm[0 + yych] & 64) {
11329|      0|      goto yy759;
11330|      0|    }
11331|      0|    if (yych <= 0xE0) {
11332|      0|      if (yych <= '\\') {
11333|      0|        if (yych <= 0x00)
11334|      0|          goto yy747;
11335|      0|        if (yych <= '\'')
11336|      0|          goto yy786;
11337|      0|        goto yy763;
11338|      0|      } else {
11339|      0|        if (yych <= 0xC1)
11340|      0|          goto yy747;
11341|      0|        if (yych >= 0xE0)
11342|      0|          goto yy766;
11343|      0|      }
11344|      0|    } else {
11345|      0|      if (yych <= 0xEF) {
11346|      0|        if (yych == 0xED)
11347|      0|          goto yy768;
11348|      0|        goto yy767;
11349|      0|      } else {
11350|      0|        if (yych <= 0xF0)
11351|      0|          goto yy769;
11352|      0|        if (yych <= 0xF3)
11353|      0|          goto yy770;
11354|      0|        if (yych <= 0xF4)
11355|      0|          goto yy771;
11356|      0|        goto yy747;
11357|      0|      }
11358|      0|    }
11359|      0|  yy765:
11360|      0|    yych = *++p;
11361|      0|    if (yych <= 0x7F)
11362|      0|      goto yy747;
11363|      0|    if (yych <= 0xBF)
11364|      0|      goto yy759;
11365|      0|    goto yy747;
11366|      0|  yy766:
11367|      0|    yych = *++p;
11368|      0|    if (yych <= 0x9F)
11369|      0|      goto yy747;
11370|      0|    if (yych <= 0xBF)
11371|      0|      goto yy765;
11372|      0|    goto yy747;
11373|      0|  yy767:
11374|      0|    yych = *++p;
11375|      0|    if (yych <= 0x7F)
11376|      0|      goto yy747;
11377|      0|    if (yych <= 0xBF)
11378|      0|      goto yy765;
11379|      0|    goto yy747;
11380|      0|  yy768:
11381|      0|    yych = *++p;
11382|      0|    if (yych <= 0x7F)
11383|      0|      goto yy747;
11384|      0|    if (yych <= 0x9F)
11385|      0|      goto yy765;
11386|      0|    goto yy747;
11387|      0|  yy769:
11388|      0|    yych = *++p;
11389|      0|    if (yych <= 0x8F)
11390|      0|      goto yy747;
11391|      0|    if (yych <= 0xBF)
11392|      0|      goto yy767;
11393|      0|    goto yy747;
11394|      0|  yy770:
11395|      0|    yych = *++p;
11396|      0|    if (yych <= 0x7F)
11397|      0|      goto yy747;
11398|      0|    if (yych <= 0xBF)
11399|      0|      goto yy767;
11400|      0|    goto yy747;
11401|      0|  yy771:
11402|      0|    yych = *++p;
11403|      0|    if (yych <= 0x7F)
11404|      0|      goto yy747;
11405|      0|    if (yych <= 0x8F)
11406|      0|      goto yy767;
11407|      0|    goto yy747;
11408|      0|  yy772:
11409|      0|    yych = *++p;
11410|      0|  yy773:
11411|      0|    if (yybm[0 + yych] & 128) {
11412|      0|      goto yy772;
11413|      0|    }
11414|      0|    if (yych <= 0xE0) {
11415|      0|      if (yych <= '\\') {
11416|      0|        if (yych <= '(')
11417|      0|          goto yy747;
11418|      0|        if (yych >= '*')
11419|      0|          goto yy776;
11420|      0|      } else {
11421|      0|        if (yych <= 0xC1)
11422|      0|          goto yy747;
11423|      0|        if (yych <= 0xDF)
11424|      0|          goto yy778;
11425|      0|        goto yy779;
11426|      0|      }
11427|      0|    } else {
11428|      0|      if (yych <= 0xEF) {
11429|      0|        if (yych == 0xED)
11430|      0|          goto yy781;
11431|      0|        goto yy780;
11432|      0|      } else {
11433|      0|        if (yych <= 0xF0)
11434|      0|          goto yy782;
11435|      0|        if (yych <= 0xF3)
11436|      0|          goto yy783;
11437|      0|        if (yych <= 0xF4)
11438|      0|          goto yy784;
11439|      0|        goto yy747;
11440|      0|      }
11441|      0|    }
11442|      0|  yy774:
11443|      0|    ++p;
11444|      0|  yy775 : { return (bufsize_t)(p - start); }
11445|      0|  yy776:
11446|      0|    yych = *++p;
11447|      0|    if (yych <= 0xDF) {
11448|      0|      if (yych <= '[') {
11449|      0|        if (yych <= 0x00)
11450|      0|          goto yy747;
11451|      0|        if (yych == ')')
11452|      0|          goto yy787;
11453|      0|        goto yy772;
11454|      0|      } else {
11455|      0|        if (yych <= '\\')
11456|      0|          goto yy776;
11457|      0|        if (yych <= 0x7F)
11458|      0|          goto yy772;
11459|      0|        if (yych <= 0xC1)
11460|      0|          goto yy747;
11461|      0|      }
11462|      0|    } else {
11463|      0|      if (yych <= 0xEF) {
11464|      0|        if (yych <= 0xE0)
11465|      0|          goto yy779;
11466|      0|        if (yych == 0xED)
11467|      0|          goto yy781;
11468|      0|        goto yy780;
11469|      0|      } else {
11470|      0|        if (yych <= 0xF0)
11471|      0|          goto yy782;
11472|      0|        if (yych <= 0xF3)
11473|      0|          goto yy783;
11474|      0|        if (yych <= 0xF4)
11475|      0|          goto yy784;
11476|      0|        goto yy747;
11477|      0|      }
11478|      0|    }
11479|      0|  yy778:
11480|      0|    yych = *++p;
11481|      0|    if (yych <= 0x7F)
11482|      0|      goto yy747;
11483|      0|    if (yych <= 0xBF)
11484|      0|      goto yy772;
11485|      0|    goto yy747;
11486|      0|  yy779:
11487|      0|    yych = *++p;
11488|      0|    if (yych <= 0x9F)
11489|      0|      goto yy747;
11490|      0|    if (yych <= 0xBF)
11491|      0|      goto yy778;
11492|      0|    goto yy747;
11493|      0|  yy780:
11494|      0|    yych = *++p;
11495|      0|    if (yych <= 0x7F)
11496|      0|      goto yy747;
11497|      0|    if (yych <= 0xBF)
11498|      0|      goto yy778;
11499|      0|    goto yy747;
11500|      0|  yy781:
11501|      0|    yych = *++p;
11502|      0|    if (yych <= 0x7F)
11503|      0|      goto yy747;
11504|      0|    if (yych <= 0x9F)
11505|      0|      goto yy778;
11506|      0|    goto yy747;
11507|      0|  yy782:
11508|      0|    yych = *++p;
11509|      0|    if (yych <= 0x8F)
11510|      0|      goto yy747;
11511|      0|    if (yych <= 0xBF)
11512|      0|      goto yy780;
11513|      0|    goto yy747;
11514|      0|  yy783:
11515|      0|    yych = *++p;
11516|      0|    if (yych <= 0x7F)
11517|      0|      goto yy747;
11518|      0|    if (yych <= 0xBF)
11519|      0|      goto yy780;
11520|      0|    goto yy747;
11521|      0|  yy784:
11522|      0|    yych = *++p;
11523|      0|    if (yych <= 0x7F)
11524|      0|      goto yy747;
11525|      0|    if (yych <= 0x8F)
11526|      0|      goto yy780;
11527|      0|    goto yy747;
11528|      0|  yy785:
11529|      0|    yyaccept = 1;
11530|      0|    yych = *(marker = ++p);
11531|      0|    if (yybm[0 + yych] & 16) {
11532|      0|      goto yy745;
11533|      0|    }
11534|      0|    if (yych <= 0xE0) {
11535|      0|      if (yych <= '\\') {
11536|      0|        if (yych <= 0x00)
11537|      0|          goto yy749;
11538|      0|        if (yych <= '"')
11539|      0|          goto yy748;
11540|      0|        goto yy750;
11541|      0|      } else {
11542|      0|        if (yych <= 0xC1)
11543|      0|          goto yy749;
11544|      0|        if (yych <= 0xDF)
11545|      0|          goto yy752;
11546|      0|        goto yy753;
11547|      0|      }
11548|      0|    } else {
11549|      0|      if (yych <= 0xEF) {
11550|      0|        if (yych == 0xED)
11551|      0|          goto yy755;
11552|      0|        goto yy754;
11553|      0|      } else {
11554|      0|        if (yych <= 0xF0)
11555|      0|          goto yy756;
11556|      0|        if (yych <= 0xF3)
11557|      0|          goto yy757;
11558|      0|        if (yych <= 0xF4)
11559|      0|          goto yy758;
11560|      0|        goto yy749;
11561|      0|      }
11562|      0|    }
11563|      0|  yy786:
11564|      0|    yyaccept = 2;
11565|      0|    yych = *(marker = ++p);
11566|      0|    if (yybm[0 + yych] & 64) {
11567|      0|      goto yy759;
11568|      0|    }
11569|      0|    if (yych <= 0xE0) {
11570|      0|      if (yych <= '\\') {
11571|      0|        if (yych <= 0x00)
11572|      0|          goto yy762;
11573|      0|        if (yych <= '\'')
11574|      0|          goto yy761;
11575|      0|        goto yy763;
11576|      0|      } else {
11577|      0|        if (yych <= 0xC1)
11578|      0|          goto yy762;
11579|      0|        if (yych <= 0xDF)
11580|      0|          goto yy765;
11581|      0|        goto yy766;
11582|      0|      }
11583|      0|    } else {
11584|      0|      if (yych <= 0xEF) {
11585|      0|        if (yych == 0xED)
11586|      0|          goto yy768;
11587|      0|        goto yy767;
11588|      0|      } else {
11589|      0|        if (yych <= 0xF0)
11590|      0|          goto yy769;
11591|      0|        if (yych <= 0xF3)
11592|      0|          goto yy770;
11593|      0|        if (yych <= 0xF4)
11594|      0|          goto yy771;
11595|      0|        goto yy762;
11596|      0|      }
11597|      0|    }
11598|      0|  yy787:
11599|      0|    yyaccept = 3;
11600|      0|    yych = *(marker = ++p);
11601|      0|    if (yybm[0 + yych] & 128) {
11602|      0|      goto yy772;
11603|      0|    }
11604|      0|    if (yych <= 0xE0) {
11605|      0|      if (yych <= '\\') {
11606|      0|        if (yych <= '(')
11607|      0|          goto yy775;
11608|      0|        if (yych <= ')')
11609|      0|          goto yy774;
11610|      0|        goto yy776;
11611|      0|      } else {
11612|      0|        if (yych <= 0xC1)
11613|      0|          goto yy775;
11614|      0|        if (yych <= 0xDF)
11615|      0|          goto yy778;
11616|      0|        goto yy779;
11617|      0|      }
11618|      0|    } else {
11619|      0|      if (yych <= 0xEF) {
11620|      0|        if (yych == 0xED)
11621|      0|          goto yy781;
11622|      0|        goto yy780;
11623|      0|      } else {
11624|      0|        if (yych <= 0xF0)
11625|      0|          goto yy782;
11626|      0|        if (yych <= 0xF3)
11627|      0|          goto yy783;
11628|      0|        if (yych <= 0xF4)
11629|      0|          goto yy784;
11630|      0|        goto yy775;
11631|      0|      }
11632|      0|    }
11633|      0|  }
11634|      0|}
11635|       |
11636|       |// Match space characters, including newlines.
11637|     48|bufsize_t _scan_spacechars(const unsigned char *p) {
11638|     48|  const unsigned char *start = p;
11639|       |
11640|     48|  {
11641|     48|    unsigned char yych;
11642|     48|    static const unsigned char yybm[] = {
11643|     48|        0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0,
11644|     48|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0,   128, 0,   0, 0, 0, 0, 0, 0,
11645|     48|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0,   0,   0,   0, 0, 0, 0, 0, 0,
11646|     48|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0,   0,   0,   0, 0, 0, 0, 0, 0,
11647|     48|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0,   0,   0,   0, 0, 0, 0, 0, 0,
11648|     48|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0,   0,   0,   0, 0, 0, 0, 0, 0,
11649|     48|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0,   0,   0,   0, 0, 0, 0, 0, 0,
11650|     48|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0,   0,   0,   0, 0, 0, 0, 0, 0,
11651|     48|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0,   0,   0,   0, 0, 0, 0, 0, 0,
11652|     48|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0,   0,   0,   0, 0, 0, 0, 0, 0,
11653|     48|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0,   0,   0,   0, 0, 0, 0, 0, 0,
11654|     48|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0,   0,   0,   0, 0, 0, 0, 0, 0,
11655|     48|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0,   0,   0,   0, 0,
11656|     48|    };
11657|     48|    yych = *p;
11658|     48|    if (yybm[0 + yych] & 128) {
11659|      0|      goto yy792;
11660|      0|    }
11661|     48|    ++p;
11662|     48|    { return 0; }
11663|      0|  yy792:
11664|      0|    yych = *++p;
11665|      0|    if (yybm[0 + yych] & 128) {
11666|      0|      goto yy792;
11667|      0|    }
11668|      0|    { return (bufsize_t)(p - start); }
11669|      0|  }
11670|      0|}
11671|       |
11672|       |// Match ATX heading start.
11673|     86|bufsize_t _scan_atx_heading_start(const unsigned char *p) {
11674|     86|  const unsigned char *marker = NULL;
11675|     86|  const unsigned char *start = p;
11676|       |
11677|     86|  {
11678|     86|    unsigned char yych;
11679|     86|    static const unsigned char yybm[] = {
11680|     86|        0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11681|     86|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11682|     86|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11683|     86|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11684|     86|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11685|     86|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11686|     86|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11687|     86|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11688|     86|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11689|     86|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11690|     86|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11691|     86|        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0,
11692|     86|    };
11693|     86|    yych = *p;
11694|     86|    if (yych == '#')
11695|      8|      goto yy799;
11696|     78|    ++p;
11697|     78|  yy798 : { return 0; }
11698|      8|  yy799:
11699|      8|    yych = *(marker = ++p);
11700|      8|    if (yybm[0 + yych] & 128) {
11701|      0|      goto yy800;
11702|      0|    }
11703|      8|    if (yych <= '\f') {
11704|      0|      if (yych <= 0x08)
11705|      0|        goto yy798;
11706|      0|      if (yych <= '\n')
11707|      0|        goto yy803;
11708|      0|      goto yy798;
11709|      8|    } else {
11710|      8|      if (yych <= '\r')
11711|      0|        goto yy803;
11712|      8|      if (yych == '#')
11713|      8|        goto yy804;
11714|      0|      goto yy798;
11715|      8|    }
11716|      8|  yy800:
11717|      8|    yych = *++p;
11718|      8|    if (yybm[0 + yych] & 128) {
11719|      0|      goto yy800;
11720|      0|    }
11721|      8|  yy802 : { return (bufsize_t)(p - start); }
11722|      0|  yy803:
11723|      0|    ++p;
11724|      0|    goto yy802;
11725|      8|  yy804:
11726|      8|    yych = *++p;
11727|      8|    if (yybm[0 + yych] & 128) {
11728|      8|      goto yy800;
11729|      8|    }
11730|      0|    if (yych <= '\f') {
11731|      0|      if (yych <= 0x08)
11732|      0|        goto yy805;
11733|      0|      if (yych <= '\n')
11734|      0|        goto yy803;
11735|      0|    } else {
11736|      0|      if (yych <= '\r')
11737|      0|        goto yy803;
11738|      0|      if (yych == '#')
11739|      0|        goto yy806;
11740|      0|    }
11741|      0|  yy805:
11742|      0|    p = marker;
11743|      0|    goto yy798;
11744|      0|  yy806:
11745|      0|    yych = *++p;
11746|      0|    if (yybm[0 + yych] & 128) {
11747|      0|      goto yy800;
11748|      0|    }
11749|      0|    if (yych <= '\f') {
11750|      0|      if (yych <= 0x08)
11751|      0|        goto yy805;
11752|      0|      if (yych <= '\n')
11753|      0|        goto yy803;
11754|      0|      goto yy805;
11755|      0|    } else {
11756|      0|      if (yych <= '\r')
11757|      0|        goto yy803;
11758|      0|      if (yych != '#')
11759|      0|        goto yy805;
11760|      0|    }
11761|      0|    yych = *++p;
11762|      0|    if (yybm[0 + yych] & 128) {
11763|      0|      goto yy800;
11764|      0|    }
11765|      0|    if (yych <= '\f') {
11766|      0|      if (yych <= 0x08)
11767|      0|        goto yy805;
11768|      0|      if (yych <= '\n')
11769|      0|        goto yy803;
11770|      0|      goto yy805;
11771|      0|    } else {
11772|      0|      if (yych <= '\r')
11773|      0|        goto yy803;
11774|      0|      if (yych != '#')
11775|      0|        goto yy805;
11776|      0|    }
11777|      0|    yych = *++p;
11778|      0|    if (yybm[0 + yych] & 128) {
11779|      0|      goto yy800;
11780|      0|    }
11781|      0|    if (yych <= '\f') {
11782|      0|      if (yych <= 0x08)
11783|      0|        goto yy805;
11784|      0|      if (yych <= '\n')
11785|      0|        goto yy803;
11786|      0|      goto yy805;
11787|      0|    } else {
11788|      0|      if (yych <= '\r')
11789|      0|        goto yy803;
11790|      0|      if (yych != '#')
11791|      0|        goto yy805;
11792|      0|    }
11793|      0|    yych = *++p;
11794|      0|    if (yybm[0 + yych] & 128) {
11795|      0|      goto yy800;
11796|      0|    }
11797|      0|    if (yych <= 0x08)
11798|      0|      goto yy805;
11799|      0|    if (yych <= '\n')
11800|      0|      goto yy803;
11801|      0|    if (yych == '\r')
11802|      0|      goto yy803;
11803|      0|    goto yy805;
11804|      0|  }
11805|      0|}
11806|       |
11807|       |// Match setext heading line.  Return 1 for level-1 heading,
11808|       |// 2 for level-2, 0 for no match.
11809|      0|bufsize_t _scan_setext_heading_line(const unsigned char *p) {
11810|      0|  const unsigned char *marker = NULL;
11811|       |
11812|      0|  {
11813|      0|    unsigned char yych;
11814|      0|    static const unsigned char yybm[] = {
11815|      0|        0, 0,  0, 0, 0, 0, 0, 0, 0, 32, 0,  0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0,
11816|      0|        0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  32, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0,
11817|      0|        0, 64, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
11818|      0|        0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0,
11819|      0|        0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0,
11820|      0|        0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0,
11821|      0|        0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0,
11822|      0|        0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0,
11823|      0|        0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0,
11824|      0|        0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0,
11825|      0|        0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0,
11826|      0|        0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,
11827|      0|    };
11828|      0|    yych = *p;
11829|      0|    if (yych == '-')
11830|      0|      goto yy814;
11831|      0|    if (yych == '=')
11832|      0|      goto yy815;
11833|      0|    ++p;
11834|      0|  yy813 : { return 0; }
11835|      0|  yy814:
11836|      0|    yych = *(marker = ++p);
11837|      0|    if (yybm[0 + yych] & 64) {
11838|      0|      goto yy821;
11839|      0|    }
11840|      0|    if (yych <= '\f') {
11841|      0|      if (yych <= 0x08)
11842|      0|        goto yy813;
11843|      0|      if (yych <= '\n')
11844|      0|        goto yy817;
11845|      0|      goto yy813;
11846|      0|    } else {
11847|      0|      if (yych <= '\r')
11848|      0|        goto yy817;
11849|      0|      if (yych == ' ')
11850|      0|        goto yy817;
11851|      0|      goto yy813;
11852|      0|    }
11853|      0|  yy815:
11854|      0|    yych = *(marker = ++p);
11855|      0|    if (yybm[0 + yych] & 128) {
11856|      0|      goto yy827;
11857|      0|    }
11858|      0|    if (yych <= '\f') {
11859|      0|      if (yych <= 0x08)
11860|      0|        goto yy813;
11861|      0|      if (yych <= '\n')
11862|      0|        goto yy824;
11863|      0|      goto yy813;
11864|      0|    } else {
11865|      0|      if (yych <= '\r')
11866|      0|        goto yy824;
11867|      0|      if (yych == ' ')
11868|      0|        goto yy824;
11869|      0|      goto yy813;
11870|      0|    }
11871|      0|  yy816:
11872|      0|    yych = *++p;
11873|      0|  yy817:
11874|      0|    if (yybm[0 + yych] & 32) {
11875|      0|      goto yy816;
11876|      0|    }
11877|      0|    if (yych <= 0x08)
11878|      0|      goto yy818;
11879|      0|    if (yych <= '\n')
11880|      0|      goto yy819;
11881|      0|    if (yych == '\r')
11882|      0|      goto yy819;
11883|      0|  yy818:
11884|      0|    p = marker;
11885|      0|    goto yy813;
11886|      0|  yy819:
11887|      0|    ++p;
11888|      0|    { return 2; }
11889|      0|  yy821:
11890|      0|    yych = *++p;
11891|      0|    if (yybm[0 + yych] & 32) {
11892|      0|      goto yy816;
11893|      0|    }
11894|      0|    if (yych <= '\f') {
11895|      0|      if (yych <= 0x08)
11896|      0|        goto yy818;
11897|      0|      if (yych <= '\n')
11898|      0|        goto yy819;
11899|      0|      goto yy818;
11900|      0|    } else {
11901|      0|      if (yych <= '\r')
11902|      0|        goto yy819;
11903|      0|      if (yych == '-')
11904|      0|        goto yy821;
11905|      0|      goto yy818;
11906|      0|    }
11907|      0|  yy823:
11908|      0|    yych = *++p;
11909|      0|  yy824:
11910|      0|    if (yych <= '\f') {
11911|      0|      if (yych <= 0x08)
11912|      0|        goto yy818;
11913|      0|      if (yych <= '\t')
11914|      0|        goto yy823;
11915|      0|      if (yych >= '\v')
11916|      0|        goto yy818;
11917|      0|    } else {
11918|      0|      if (yych <= '\r')
11919|      0|        goto yy825;
11920|      0|      if (yych == ' ')
11921|      0|        goto yy823;
11922|      0|      goto yy818;
11923|      0|    }
11924|      0|  yy825:
11925|      0|    ++p;
11926|      0|    { return 1; }
11927|      0|  yy827:
11928|      0|    yych = *++p;
11929|      0|    if (yybm[0 + yych] & 128) {
11930|      0|      goto yy827;
11931|      0|    }
11932|      0|    if (yych <= '\f') {
11933|      0|      if (yych <= 0x08)
11934|      0|        goto yy818;
11935|      0|      if (yych <= '\t')
11936|      0|        goto yy823;
11937|      0|      if (yych <= '\n')
11938|      0|        goto yy825;
11939|      0|      goto yy818;
11940|      0|    } else {
11941|      0|      if (yych <= '\r')
11942|      0|        goto yy825;
11943|      0|      if (yych == ' ')
11944|      0|        goto yy823;
11945|      0|      goto yy818;
11946|      0|    }
11947|      0|  }
11948|      0|}
11949|       |
11950|       |// Scan an opening code fence.
11951|     78|bufsize_t _scan_open_code_fence(const unsigned char *p) {
11952|     78|  const unsigned char *marker = NULL;
11953|     78|  const unsigned char *start = p;
11954|       |
11955|     78|  {
11956|     78|    unsigned char yych;
11957|     78|    static const unsigned char yybm[] = {
11958|     78|        0,   192, 192, 192, 192, 192, 192, 192, 192, 192, 0,   192, 192, 0,
11959|     78|        192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
11960|     78|        192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
11961|     78|        192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
11962|     78|        192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
11963|     78|        192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
11964|     78|        192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 144, 192,
11965|     78|        192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
11966|     78|        192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
11967|     78|        224, 192, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11968|     78|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11969|     78|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11970|     78|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11971|     78|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11972|     78|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11973|     78|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11974|     78|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11975|     78|        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
11976|     78|        0,   0,   0,   0,
11977|     78|    };
11978|     78|    yych = *p;
11979|     78|    if (yych == '`')
11980|      0|      goto yy833;
11981|     78|    if (yych == '~')
11982|      0|      goto yy834;
11983|     78|    ++p;
11984|     78|  yy832 : { return 0; }
11985|      0|  yy833:
11986|      0|    yych = *(marker = ++p);
11987|      0|    if (yych == '`')
11988|      0|      goto yy835;
11989|      0|    goto yy832;
11990|      0|  yy834:
11991|      0|    yych = *(marker = ++p);
11992|      0|    if (yych == '~')
11993|      0|      goto yy837;
11994|      0|    goto yy832;
11995|      0|  yy835:
11996|      0|    yych = *++p;
11997|      0|    if (yybm[0 + yych] & 16) {
11998|      0|      goto yy838;
11999|      0|    }
12000|      0|  yy836:
12001|      0|    p = marker;
12002|      0|    goto yy832;
12003|      0|  yy837:
12004|      0|    yych = *++p;
12005|      0|    if (yybm[0 + yych] & 32) {
12006|      0|      goto yy840;
12007|      0|    }
12008|      0|    goto yy836;
12009|      0|  yy838:
12010|      0|    yych = *++p;
12011|      0|    if (yybm[0 + yych] & 16) {
12012|      0|      goto yy838;
12013|      0|    }
12014|      0|    if (yych <= 0xDF) {
12015|      0|      if (yych <= '\f') {
12016|      0|        if (yych <= 0x00)
12017|      0|          goto yy836;
12018|      0|        if (yych == '\n') {
12019|      0|          marker = p;
12020|      0|          goto yy844;
12021|      0|        }
12022|      0|        marker = p;
12023|      0|        goto yy842;
12024|      0|      } else {
12025|      0|        if (yych <= '\r') {
12026|      0|          marker = p;
12027|      0|          goto yy844;
12028|      0|        }
12029|      0|        if (yych <= 0x7F) {
12030|      0|          marker = p;
12031|      0|          goto yy842;
12032|      0|        }
12033|      0|        if (yych <= 0xC1)
12034|      0|          goto yy836;
12035|      0|        marker = p;
12036|      0|        goto yy846;
12037|      0|      }
12038|      0|    } else {
12039|      0|      if (yych <= 0xEF) {
12040|      0|        if (yych <= 0xE0) {
12041|      0|          marker = p;
12042|      0|          goto yy847;
12043|      0|        }
12044|      0|        if (yych == 0xED) {
12045|      0|          marker = p;
12046|      0|          goto yy849;
12047|      0|        }
12048|      0|        marker = p;
12049|      0|        goto yy848;
12050|      0|      } else {
12051|      0|        if (yych <= 0xF0) {
12052|      0|          marker = p;
12053|      0|          goto yy850;
12054|      0|        }
12055|      0|        if (yych <= 0xF3) {
12056|      0|          marker = p;
12057|      0|          goto yy851;
12058|      0|        }
12059|      0|        if (yych <= 0xF4) {
12060|      0|          marker = p;
12061|      0|          goto yy852;
12062|      0|        }
12063|      0|        goto yy836;
12064|      0|      }
12065|      0|    }
12066|      0|  yy840:
12067|      0|    yych = *++p;
12068|      0|    if (yybm[0 + yych] & 32) {
12069|      0|      goto yy840;
12070|      0|    }
12071|      0|    if (yych <= 0xDF) {
12072|      0|      if (yych <= '\f') {
12073|      0|        if (yych <= 0x00)
12074|      0|          goto yy836;
12075|      0|        if (yych == '\n') {
12076|      0|          marker = p;
12077|      0|          goto yy855;
12078|      0|        }
12079|      0|        marker = p;
12080|      0|        goto yy853;
12081|      0|      } else {
12082|      0|        if (yych <= '\r') {
12083|      0|          marker = p;
12084|      0|          goto yy855;
12085|      0|        }
12086|      0|        if (yych <= 0x7F) {
12087|      0|          marker = p;
12088|      0|          goto yy853;
12089|      0|        }
12090|      0|        if (yych <= 0xC1)
12091|      0|          goto yy836;
12092|      0|        marker = p;
12093|      0|        goto yy857;
12094|      0|      }
12095|      0|    } else {
12096|      0|      if (yych <= 0xEF) {
12097|      0|        if (yych <= 0xE0) {
12098|      0|          marker = p;
12099|      0|          goto yy858;
12100|      0|        }
12101|      0|        if (yych == 0xED) {
12102|      0|          marker = p;
12103|      0|          goto yy860;
12104|      0|        }
12105|      0|        marker = p;
12106|      0|        goto yy859;
12107|      0|      } else {
12108|      0|        if (yych <= 0xF0) {
12109|      0|          marker = p;
12110|      0|          goto yy861;
12111|      0|        }
12112|      0|        if (yych <= 0xF3) {
12113|      0|          marker = p;
12114|      0|          goto yy862;
12115|      0|        }
12116|      0|        if (yych <= 0xF4) {
12117|      0|          marker = p;
12118|      0|          goto yy863;
12119|      0|        }
12120|      0|        goto yy836;
12121|      0|      }
12122|      0|    }
12123|      0|  yy842:
12124|      0|    yych = *++p;
12125|      0|    if (yybm[0 + yych] & 64) {
12126|      0|      goto yy842;
12127|      0|    }
12128|      0|    if (yych <= 0xEC) {
12129|      0|      if (yych <= 0xC1) {
12130|      0|        if (yych <= 0x00)
12131|      0|          goto yy836;
12132|      0|        if (yych >= 0x0E)
12133|      0|          goto yy836;
12134|      0|      } else {
12135|      0|        if (yych <= 0xDF)
12136|      0|          goto yy846;
12137|      0|        if (yych <= 0xE0)
12138|      0|          goto yy847;
12139|      0|        goto yy848;
12140|      0|      }
12141|      0|    } else {
12142|      0|      if (yych <= 0xF0) {
12143|      0|        if (yych <= 0xED)
12144|      0|          goto yy849;
12145|      0|        if (yych <= 0xEF)
12146|      0|          goto yy848;
12147|      0|        goto yy850;
12148|      0|      } else {
12149|      0|        if (yych <= 0xF3)
12150|      0|          goto yy851;
12151|      0|        if (yych <= 0xF4)
12152|      0|          goto yy852;
12153|      0|        goto yy836;
12154|      0|      }
12155|      0|    }
12156|      0|  yy844:
12157|      0|    ++p;
12158|      0|    p = marker;
12159|      0|    { return (bufsize_t)(p - start); }
12160|      0|  yy846:
12161|      0|    yych = *++p;
12162|      0|    if (yych <= 0x7F)
12163|      0|      goto yy836;
12164|      0|    if (yych <= 0xBF)
12165|      0|      goto yy842;
12166|      0|    goto yy836;
12167|      0|  yy847:
12168|      0|    yych = *++p;
12169|      0|    if (yych <= 0x9F)
12170|      0|      goto yy836;
12171|      0|    if (yych <= 0xBF)
12172|      0|      goto yy846;
12173|      0|    goto yy836;
12174|      0|  yy848:
12175|      0|    yych = *++p;
12176|      0|    if (yych <= 0x7F)
12177|      0|      goto yy836;
12178|      0|    if (yych <= 0xBF)
12179|      0|      goto yy846;
12180|      0|    goto yy836;
12181|      0|  yy849:
12182|      0|    yych = *++p;
12183|      0|    if (yych <= 0x7F)
12184|      0|      goto yy836;
12185|      0|    if (yych <= 0x9F)
12186|      0|      goto yy846;
12187|      0|    goto yy836;
12188|      0|  yy850:
12189|      0|    yych = *++p;
12190|      0|    if (yych <= 0x8F)
12191|      0|      goto yy836;
12192|      0|    if (yych <= 0xBF)
12193|      0|      goto yy848;
12194|      0|    goto yy836;
12195|      0|  yy851:
12196|      0|    yych = *++p;
12197|      0|    if (yych <= 0x7F)
12198|      0|      goto yy836;
12199|      0|    if (yych <= 0xBF)
12200|      0|      goto yy848;
12201|      0|    goto yy836;
12202|      0|  yy852:
12203|      0|    yych = *++p;
12204|      0|    if (yych <= 0x7F)
12205|      0|      goto yy836;
12206|      0|    if (yych <= 0x8F)
12207|      0|      goto yy848;
12208|      0|    goto yy836;
12209|      0|  yy853:
12210|      0|    yych = *++p;
12211|      0|    if (yybm[0 + yych] & 128) {
12212|      0|      goto yy853;
12213|      0|    }
12214|      0|    if (yych <= 0xEC) {
12215|      0|      if (yych <= 0xC1) {
12216|      0|        if (yych <= 0x00)
12217|      0|          goto yy836;
12218|      0|        if (yych >= 0x0E)
12219|      0|          goto yy836;
12220|      0|      } else {
12221|      0|        if (yych <= 0xDF)
12222|      0|          goto yy857;
12223|      0|        if (yych <= 0xE0)
12224|      0|          goto yy858;
12225|      0|        goto yy859;
12226|      0|      }
12227|      0|    } else {
12228|      0|      if (yych <= 0xF0) {
12229|      0|        if (yych <= 0xED)
12230|      0|          goto yy860;
12231|      0|        if (yych <= 0xEF)
12232|      0|          goto yy859;
12233|      0|        goto yy861;
12234|      0|      } else {
12235|      0|        if (yych <= 0xF3)
12236|      0|          goto yy862;
12237|      0|        if (yych <= 0xF4)
12238|      0|          goto yy863;
12239|      0|        goto yy836;
12240|      0|      }
12241|      0|    }
12242|      0|  yy855:
12243|      0|    ++p;
12244|      0|    p = marker;
12245|      0|    { return (bufsize_t)(p - start); }
12246|      0|  yy857:
12247|      0|    yych = *++p;
12248|      0|    if (yych <= 0x7F)
12249|      0|      goto yy836;
12250|      0|    if (yych <= 0xBF)
12251|      0|      goto yy853;
12252|      0|    goto yy836;
12253|      0|  yy858:
12254|      0|    yych = *++p;
12255|      0|    if (yych <= 0x9F)
12256|      0|      goto yy836;
12257|      0|    if (yych <= 0xBF)
12258|      0|      goto yy857;
12259|      0|    goto yy836;
12260|      0|  yy859:
12261|      0|    yych = *++p;
12262|      0|    if (yych <= 0x7F)
12263|      0|      goto yy836;
12264|      0|    if (yych <= 0xBF)
12265|      0|      goto yy857;
12266|      0|    goto yy836;
12267|      0|  yy860:
12268|      0|    yych = *++p;
12269|      0|    if (yych <= 0x7F)
12270|      0|      goto yy836;
12271|      0|    if (yych <= 0x9F)
12272|      0|      goto yy857;
12273|      0|    goto yy836;
12274|      0|  yy861:
12275|      0|    yych = *++p;
12276|      0|    if (yych <= 0x8F)
12277|      0|      goto yy836;
12278|      0|    if (yych <= 0xBF)
12279|      0|      goto yy859;
12280|      0|    goto yy836;
12281|      0|  yy862:
12282|      0|    yych = *++p;
12283|      0|    if (yych <= 0x7F)
12284|      0|      goto yy836;
12285|      0|    if (yych <= 0xBF)
12286|      0|      goto yy859;
12287|      0|    goto yy836;
12288|      0|  yy863:
12289|      0|    yych = *++p;
12290|      0|    if (yych <= 0x7F)
12291|      0|      goto yy836;
12292|      0|    if (yych <= 0x8F)
12293|      0|      goto yy859;
12294|      0|    goto yy836;
12295|      0|  }
12296|      0|}
12297|       |
12298|       |// Scan a closing code fence with length at least len.
12299|      0|bufsize_t _scan_close_code_fence(const unsigned char *p) {
12300|      0|  const unsigned char *marker = NULL;
12301|      0|  const unsigned char *start = p;
12302|       |
12303|      0|  {
12304|      0|    unsigned char yych;
12305|      0|    static const unsigned char yybm[] = {
12306|      0|        0, 0, 0, 0, 0, 0, 0, 0, 0,  128, 0,   0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0,
12307|      0|        0, 0, 0, 0, 0, 0, 0, 0, 0,  0,   128, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0,
12308|      0|        0, 0, 0, 0, 0, 0, 0, 0, 0,  0,   0,   0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0,
12309|      0|        0, 0, 0, 0, 0, 0, 0, 0, 0,  0,   0,   0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0,
12310|      0|        0, 0, 0, 0, 0, 0, 0, 0, 32, 0,   0,   0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0,
12311|      0|        0, 0, 0, 0, 0, 0, 0, 0, 0,  0,   0,   0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
12312|      0|        0, 0, 0, 0, 0, 0, 0, 0, 0,  0,   0,   0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0,
12313|      0|        0, 0, 0, 0, 0, 0, 0, 0, 0,  0,   0,   0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0,
12314|      0|        0, 0, 0, 0, 0, 0, 0, 0, 0,  0,   0,   0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0,
12315|      0|        0, 0, 0, 0, 0, 0, 0, 0, 0,  0,   0,   0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0,
12316|      0|        0, 0, 0, 0, 0, 0, 0, 0, 0,  0,   0,   0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0,
12317|      0|        0, 0, 0, 0, 0, 0, 0, 0, 0,  0,   0,   0, 0, 0,
12318|      0|    };
12319|      0|    yych = *p;
12320|      0|    if (yych == '`')
12321|      0|      goto yy868;
12322|      0|    if (yych == '~')
12323|      0|      goto yy869;
12324|      0|    ++p;
12325|      0|  yy867 : { return 0; }
12326|      0|  yy868:
12327|      0|    yych = *(marker = ++p);
12328|      0|    if (yych == '`')
12329|      0|      goto yy870;
12330|      0|    goto yy867;
12331|      0|  yy869:
12332|      0|    yych = *(marker = ++p);
12333|      0|    if (yych == '~')
12334|      0|      goto yy872;
12335|      0|    goto yy867;
12336|      0|  yy870:
12337|      0|    yych = *++p;
12338|      0|    if (yybm[0 + yych] & 32) {
12339|      0|      goto yy873;
12340|      0|    }
12341|      0|  yy871:
12342|      0|    p = marker;
12343|      0|    goto yy867;
12344|      0|  yy872:
12345|      0|    yych = *++p;
12346|      0|    if (yybm[0 + yych] & 64) {
12347|      0|      goto yy875;
12348|      0|    }
12349|      0|    goto yy871;
12350|      0|  yy873:
12351|      0|    yych = *++p;
12352|      0|    if (yybm[0 + yych] & 32) {
12353|      0|      goto yy873;
12354|      0|    }
12355|      0|    if (yych <= '\f') {
12356|      0|      if (yych <= 0x08)
12357|      0|        goto yy871;
12358|      0|      if (yych <= '\t') {
12359|      0|        marker = p;
12360|      0|        goto yy877;
12361|      0|      }
12362|      0|      if (yych <= '\n') {
12363|      0|        marker = p;
12364|      0|        goto yy879;
12365|      0|      }
12366|      0|      goto yy871;
12367|      0|    } else {
12368|      0|      if (yych <= '\r') {
12369|      0|        marker = p;
12370|      0|        goto yy879;
12371|      0|      }
12372|      0|      if (yych == ' ') {
12373|      0|        marker = p;
12374|      0|        goto yy877;
12375|      0|      }
12376|      0|      goto yy871;
12377|      0|    }
12378|      0|  yy875:
12379|      0|    yych = *++p;
12380|      0|    if (yybm[0 + yych] & 64) {
12381|      0|      goto yy875;
12382|      0|    }
12383|      0|    if (yych <= '\f') {
12384|      0|      if (yych <= 0x08)
12385|      0|        goto yy871;
12386|      0|      if (yych <= '\t') {
12387|      0|        marker = p;
12388|      0|        goto yy881;
12389|      0|      }
12390|      0|      if (yych <= '\n') {
12391|      0|        marker = p;
12392|      0|        goto yy883;
12393|      0|      }
12394|      0|      goto yy871;
12395|      0|    } else {
12396|      0|      if (yych <= '\r') {
12397|      0|        marker = p;
12398|      0|        goto yy883;
12399|      0|      }
12400|      0|      if (yych == ' ') {
12401|      0|        marker = p;
12402|      0|        goto yy881;
12403|      0|      }
12404|      0|      goto yy871;
12405|      0|    }
12406|      0|  yy877:
12407|      0|    yych = *++p;
12408|      0|    if (yybm[0 + yych] & 128) {
12409|      0|      goto yy877;
12410|      0|    }
12411|      0|    if (yych <= 0x08)
12412|      0|      goto yy871;
12413|      0|    if (yych <= '\n')
12414|      0|      goto yy879;
12415|      0|    if (yych != '\r')
12416|      0|      goto yy871;
12417|      0|  yy879:
12418|      0|    ++p;
12419|      0|    p = marker;
12420|      0|    { return (bufsize_t)(p - start); }
12421|      0|  yy881:
12422|      0|    yych = *++p;
12423|      0|    if (yych <= '\f') {
12424|      0|      if (yych <= 0x08)
12425|      0|        goto yy871;
12426|      0|      if (yych <= '\t')
12427|      0|        goto yy881;
12428|      0|      if (yych >= '\v')
12429|      0|        goto yy871;
12430|      0|    } else {
12431|      0|      if (yych <= '\r')
12432|      0|        goto yy883;
12433|      0|      if (yych == ' ')
12434|      0|        goto yy881;
12435|      0|      goto yy871;
12436|      0|    }
12437|      0|  yy883:
12438|      0|    ++p;
12439|      0|    p = marker;
12440|      0|    { return (bufsize_t)(p - start); }
12441|      0|  }
12442|      0|}
12443|       |
12444|       |// Scans an entity.
12445|       |// Returns number of chars matched.
12446|      0|bufsize_t _scan_entity(const unsigned char *p) {
12447|      0|  const unsigned char *marker = NULL;
12448|      0|  const unsigned char *start = p;
12449|       |
12450|      0|  {
12451|      0|    unsigned char yych;
12452|      0|    yych = *p;
12453|      0|    if (yych == '&')
12454|      0|      goto yy889;
12455|      0|    ++p;
12456|      0|  yy888 : { return 0; }
12457|      0|  yy889:
12458|      0|    yych = *(marker = ++p);
12459|      0|    if (yych <= '@') {
12460|      0|      if (yych != '#')
12461|      0|        goto yy888;
12462|      0|    } else {
12463|      0|      if (yych <= 'Z')
12464|      0|        goto yy892;
12465|      0|      if (yych <= '`')
12466|      0|        goto yy888;
12467|      0|      if (yych <= 'z')
12468|      0|        goto yy892;
12469|      0|      goto yy888;
12470|      0|    }
12471|      0|    yych = *++p;
12472|      0|    if (yych <= 'W') {
12473|      0|      if (yych <= '/')
12474|      0|        goto yy891;
12475|      0|      if (yych <= '9')
12476|      0|        goto yy893;
12477|      0|    } else {
12478|      0|      if (yych <= 'X')
12479|      0|        goto yy894;
12480|      0|      if (yych == 'x')
12481|      0|        goto yy894;
12482|      0|    }
12483|      0|  yy891:
12484|      0|    p = marker;
12485|      0|    goto yy888;
12486|      0|  yy892:
12487|      0|    yych = *++p;
12488|      0|    if (yych <= '@') {
12489|      0|      if (yych <= '/')
12490|      0|        goto yy891;
12491|      0|      if (yych <= '9')
12492|      0|        goto yy895;
12493|      0|      goto yy891;
12494|      0|    } else {
12495|      0|      if (yych <= 'Z')
12496|      0|        goto yy895;
12497|      0|      if (yych <= '`')
12498|      0|        goto yy891;
12499|      0|      if (yych <= 'z')
12500|      0|        goto yy895;
12501|      0|      goto yy891;
12502|      0|    }
12503|      0|  yy893:
12504|      0|    yych = *++p;
12505|      0|    if (yych <= '/')
12506|      0|      goto yy891;
12507|      0|    if (yych <= '9')
12508|      0|      goto yy896;
12509|      0|    if (yych == ';')
12510|      0|      goto yy897;
12511|      0|    goto yy891;
12512|      0|  yy894:
12513|      0|    yych = *++p;
12514|      0|    if (yych <= '@') {
12515|      0|      if (yych <= '/')
12516|      0|        goto yy891;
12517|      0|      if (yych <= '9')
12518|      0|        goto yy899;
12519|      0|      goto yy891;
12520|      0|    } else {
12521|      0|      if (yych <= 'F')
12522|      0|        goto yy899;
12523|      0|      if (yych <= '`')
12524|      0|        goto yy891;
12525|      0|      if (yych <= 'f')
12526|      0|        goto yy899;
12527|      0|      goto yy891;
12528|      0|    }
12529|      0|  yy895:
12530|      0|    yych = *++p;
12531|      0|    if (yych <= ';') {
12532|      0|      if (yych <= '/')
12533|      0|        goto yy891;
12534|      0|      if (yych <= '9')
12535|      0|        goto yy900;
12536|      0|      if (yych <= ':')
12537|      0|        goto yy891;
12538|      0|      goto yy897;
12539|      0|    } else {
12540|      0|      if (yych <= 'Z') {
12541|      0|        if (yych <= '@')
12542|      0|          goto yy891;
12543|      0|        goto yy900;
12544|      0|      } else {
12545|      0|        if (yych <= '`')
12546|      0|          goto yy891;
12547|      0|        if (yych <= 'z')
12548|      0|          goto yy900;
12549|      0|        goto yy891;
12550|      0|      }
12551|      0|    }
12552|      0|  yy896:
12553|      0|    yych = *++p;
12554|      0|    if (yych <= '/')
12555|      0|      goto yy891;
12556|      0|    if (yych <= '9')
12557|      0|      goto yy901;
12558|      0|    if (yych != ';')
12559|      0|      goto yy891;
12560|      0|  yy897:
12561|      0|    ++p;
12562|      0|    { return (bufsize_t)(p - start); }
12563|      0|  yy899:
12564|      0|    yych = *++p;
12565|      0|    if (yych <= ';') {
12566|      0|      if (yych <= '/')
12567|      0|        goto yy891;
12568|      0|      if (yych <= '9')
12569|      0|        goto yy902;
12570|      0|      if (yych <= ':')
12571|      0|        goto yy891;
12572|      0|      goto yy897;
12573|      0|    } else {
12574|      0|      if (yych <= 'F') {
12575|      0|        if (yych <= '@')
12576|      0|          goto yy891;
12577|      0|        goto yy902;
12578|      0|      } else {
12579|      0|        if (yych <= '`')
12580|      0|          goto yy891;
12581|      0|        if (yych <= 'f')
12582|      0|          goto yy902;
12583|      0|        goto yy891;
12584|      0|      }
12585|      0|    }
12586|      0|  yy900:
12587|      0|    yych = *++p;
12588|      0|    if (yych <= ';') {
12589|      0|      if (yych <= '/')
12590|      0|        goto yy891;
12591|      0|      if (yych <= '9')
12592|      0|        goto yy903;
12593|      0|      if (yych <= ':')
12594|      0|        goto yy891;
12595|      0|      goto yy897;
12596|      0|    } else {
12597|      0|      if (yych <= 'Z') {
12598|      0|        if (yych <= '@')
12599|      0|          goto yy891;
12600|      0|        goto yy903;
12601|      0|      } else {
12602|      0|        if (yych <= '`')
12603|      0|          goto yy891;
12604|      0|        if (yych <= 'z')
12605|      0|          goto yy903;
12606|      0|        goto yy891;
12607|      0|      }
12608|      0|    }
12609|      0|  yy901:
12610|      0|    yych = *++p;
12611|      0|    if (yych <= '/')
12612|      0|      goto yy891;
12613|      0|    if (yych <= '9')
12614|      0|      goto yy904;
12615|      0|    if (yych == ';')
12616|      0|      goto yy897;
12617|      0|    goto yy891;
12618|      0|  yy902:
12619|      0|    yych = *++p;
12620|      0|    if (yych <= ';') {
12621|      0|      if (yych <= '/')
12622|      0|        goto yy891;
12623|      0|      if (yych <= '9')
12624|      0|        goto yy905;
12625|      0|      if (yych <= ':')
12626|      0|        goto yy891;
12627|      0|      goto yy897;
12628|      0|    } else {
12629|      0|      if (yych <= 'F') {
12630|      0|        if (yych <= '@')
12631|      0|          goto yy891;
12632|      0|        goto yy905;
12633|      0|      } else {
12634|      0|        if (yych <= '`')
12635|      0|          goto yy891;
12636|      0|        if (yych <= 'f')
12637|      0|          goto yy905;
12638|      0|        goto yy891;
12639|      0|      }
12640|      0|    }
12641|      0|  yy903:
12642|      0|    yych = *++p;
12643|      0|    if (yych <= ';') {
12644|      0|      if (yych <= '/')
12645|      0|        goto yy891;
12646|      0|      if (yych <= '9')
12647|      0|        goto yy906;
12648|      0|      if (yych <= ':')
12649|      0|        goto yy891;
12650|      0|      goto yy897;
12651|      0|    } else {
12652|      0|      if (yych <= 'Z') {
12653|      0|        if (yych <= '@')
12654|      0|          goto yy891;
12655|      0|        goto yy906;
12656|      0|      } else {
12657|      0|        if (yych <= '`')
12658|      0|          goto yy891;
12659|      0|        if (yych <= 'z')
12660|      0|          goto yy906;
12661|      0|        goto yy891;
12662|      0|      }
12663|      0|    }
12664|      0|  yy904:
12665|      0|    yych = *++p;
12666|      0|    if (yych <= '/')
12667|      0|      goto yy891;
12668|      0|    if (yych <= '9')
12669|      0|      goto yy907;
12670|      0|    if (yych == ';')
12671|      0|      goto yy897;
12672|      0|    goto yy891;
12673|      0|  yy905:
12674|      0|    yych = *++p;
12675|      0|    if (yych <= ';') {
12676|      0|      if (yych <= '/')
12677|      0|        goto yy891;
12678|      0|      if (yych <= '9')
12679|      0|        goto yy908;
12680|      0|      if (yych <= ':')
12681|      0|        goto yy891;
12682|      0|      goto yy897;
12683|      0|    } else {
12684|      0|      if (yych <= 'F') {
12685|      0|        if (yych <= '@')
12686|      0|          goto yy891;
12687|      0|        goto yy908;
12688|      0|      } else {
12689|      0|        if (yych <= '`')
12690|      0|          goto yy891;
12691|      0|        if (yych <= 'f')
12692|      0|          goto yy908;
12693|      0|        goto yy891;
12694|      0|      }
12695|      0|    }
12696|      0|  yy906:
12697|      0|    yych = *++p;
12698|      0|    if (yych <= ';') {
12699|      0|      if (yych <= '/')
12700|      0|        goto yy891;
12701|      0|      if (yych <= '9')
12702|      0|        goto yy909;
12703|      0|      if (yych <= ':')
12704|      0|        goto yy891;
12705|      0|      goto yy897;
12706|      0|    } else {
12707|      0|      if (yych <= 'Z') {
12708|      0|        if (yych <= '@')
12709|      0|          goto yy891;
12710|      0|        goto yy909;
12711|      0|      } else {
12712|      0|        if (yych <= '`')
12713|      0|          goto yy891;
12714|      0|        if (yych <= 'z')
12715|      0|          goto yy909;
12716|      0|        goto yy891;
12717|      0|      }
12718|      0|    }
12719|      0|  yy907:
12720|      0|    yych = *++p;
12721|      0|    if (yych <= '/')
12722|      0|      goto yy891;
12723|      0|    if (yych <= '9')
12724|      0|      goto yy910;
12725|      0|    if (yych == ';')
12726|      0|      goto yy897;
12727|      0|    goto yy891;
12728|      0|  yy908:
12729|      0|    yych = *++p;
12730|      0|    if (yych <= ';') {
12731|      0|      if (yych <= '/')
12732|      0|        goto yy891;
12733|      0|      if (yych <= '9')
12734|      0|        goto yy911;
12735|      0|      if (yych <= ':')
12736|      0|        goto yy891;
12737|      0|      goto yy897;
12738|      0|    } else {
12739|      0|      if (yych <= 'F') {
12740|      0|        if (yych <= '@')
12741|      0|          goto yy891;
12742|      0|        goto yy911;
12743|      0|      } else {
12744|      0|        if (yych <= '`')
12745|      0|          goto yy891;
12746|      0|        if (yych <= 'f')
12747|      0|          goto yy911;
12748|      0|        goto yy891;
12749|      0|      }
12750|      0|    }
12751|      0|  yy909:
12752|      0|    yych = *++p;
12753|      0|    if (yych <= ';') {
12754|      0|      if (yych <= '/')
12755|      0|        goto yy891;
12756|      0|      if (yych <= '9')
12757|      0|        goto yy912;
12758|      0|      if (yych <= ':')
12759|      0|        goto yy891;
12760|      0|      goto yy897;
12761|      0|    } else {
12762|      0|      if (yych <= 'Z') {
12763|      0|        if (yych <= '@')
12764|      0|          goto yy891;
12765|      0|        goto yy912;
12766|      0|      } else {
12767|      0|        if (yych <= '`')
12768|      0|          goto yy891;
12769|      0|        if (yych <= 'z')
12770|      0|          goto yy912;
12771|      0|        goto yy891;
12772|      0|      }
12773|      0|    }
12774|      0|  yy910:
12775|      0|    yych = *++p;
12776|      0|    if (yych <= '/')
12777|      0|      goto yy891;
12778|      0|    if (yych <= '9')
12779|      0|      goto yy913;
12780|      0|    if (yych == ';')
12781|      0|      goto yy897;
12782|      0|    goto yy891;
12783|      0|  yy911:
12784|      0|    yych = *++p;
12785|      0|    if (yych <= ';') {
12786|      0|      if (yych <= '/')
12787|      0|        goto yy891;
12788|      0|      if (yych <= '9')
12789|      0|        goto yy913;
12790|      0|      if (yych <= ':')
12791|      0|        goto yy891;
12792|      0|      goto yy897;
12793|      0|    } else {
12794|      0|      if (yych <= 'F') {
12795|      0|        if (yych <= '@')
12796|      0|          goto yy891;
12797|      0|        goto yy913;
12798|      0|      } else {
12799|      0|        if (yych <= '`')
12800|      0|          goto yy891;
12801|      0|        if (yych <= 'f')
12802|      0|          goto yy913;
12803|      0|        goto yy891;
12804|      0|      }
12805|      0|    }
12806|      0|  yy912:
12807|      0|    yych = *++p;
12808|      0|    if (yych <= ';') {
12809|      0|      if (yych <= '/')
12810|      0|        goto yy891;
12811|      0|      if (yych <= '9')
12812|      0|        goto yy914;
12813|      0|      if (yych <= ':')
12814|      0|        goto yy891;
12815|      0|      goto yy897;
12816|      0|    } else {
12817|      0|      if (yych <= 'Z') {
12818|      0|        if (yych <= '@')
12819|      0|          goto yy891;
12820|      0|        goto yy914;
12821|      0|      } else {
12822|      0|        if (yych <= '`')
12823|      0|          goto yy891;
12824|      0|        if (yych <= 'z')
12825|      0|          goto yy914;
12826|      0|        goto yy891;
12827|      0|      }
12828|      0|    }
12829|      0|  yy913:
12830|      0|    yych = *++p;
12831|      0|    if (yych == ';')
12832|      0|      goto yy897;
12833|      0|    goto yy891;
12834|      0|  yy914:
12835|      0|    yych = *++p;
12836|      0|    if (yych <= ';') {
12837|      0|      if (yych <= '/')
12838|      0|        goto yy891;
12839|      0|      if (yych <= '9')
12840|      0|        goto yy915;
12841|      0|      if (yych <= ':')
12842|      0|        goto yy891;
12843|      0|      goto yy897;
12844|      0|    } else {
12845|      0|      if (yych <= 'Z') {
12846|      0|        if (yych <= '@')
12847|      0|          goto yy891;
12848|      0|      } else {
12849|      0|        if (yych <= '`')
12850|      0|          goto yy891;
12851|      0|        if (yych >= '{')
12852|      0|          goto yy891;
12853|      0|      }
12854|      0|    }
12855|      0|  yy915:
12856|      0|    yych = *++p;
12857|      0|    if (yych <= ';') {
12858|      0|      if (yych <= '/')
12859|      0|        goto yy891;
12860|      0|      if (yych <= '9')
12861|      0|        goto yy916;
12862|      0|      if (yych <= ':')
12863|      0|        goto yy891;
12864|      0|      goto yy897;
12865|      0|    } else {
12866|      0|      if (yych <= 'Z') {
12867|      0|        if (yych <= '@')
12868|      0|          goto yy891;
12869|      0|      } else {
12870|      0|        if (yych <= '`')
12871|      0|          goto yy891;
12872|      0|        if (yych >= '{')
12873|      0|          goto yy891;
12874|      0|      }
12875|      0|    }
12876|      0|  yy916:
12877|      0|    yych = *++p;
12878|      0|    if (yych <= ';') {
12879|      0|      if (yych <= '/')
12880|      0|        goto yy891;
12881|      0|      if (yych <= '9')
12882|      0|        goto yy917;
12883|      0|      if (yych <= ':')
12884|      0|        goto yy891;
12885|      0|      goto yy897;
12886|      0|    } else {
12887|      0|      if (yych <= 'Z') {
12888|      0|        if (yych <= '@')
12889|      0|          goto yy891;
12890|      0|      } else {
12891|      0|        if (yych <= '`')
12892|      0|          goto yy891;
12893|      0|        if (yych >= '{')
12894|      0|          goto yy891;
12895|      0|      }
12896|      0|    }
12897|      0|  yy917:
12898|      0|    yych = *++p;
12899|      0|    if (yych <= ';') {
12900|      0|      if (yych <= '/')
12901|      0|        goto yy891;
12902|      0|      if (yych <= '9')
12903|      0|        goto yy918;
12904|      0|      if (yych <= ':')
12905|      0|        goto yy891;
12906|      0|      goto yy897;
12907|      0|    } else {
12908|      0|      if (yych <= 'Z') {
12909|      0|        if (yych <= '@')
12910|      0|          goto yy891;
12911|      0|      } else {
12912|      0|        if (yych <= '`')
12913|      0|          goto yy891;
12914|      0|        if (yych >= '{')
12915|      0|          goto yy891;
12916|      0|      }
12917|      0|    }
12918|      0|  yy918:
12919|      0|    yych = *++p;
12920|      0|    if (yych <= ';') {
12921|      0|      if (yych <= '/')
12922|      0|        goto yy891;
12923|      0|      if (yych <= '9')
12924|      0|        goto yy919;
12925|      0|      if (yych <= ':')
12926|      0|        goto yy891;
12927|      0|      goto yy897;
12928|      0|    } else {
12929|      0|      if (yych <= 'Z') {
12930|      0|        if (yych <= '@')
12931|      0|          goto yy891;
12932|      0|      } else {
12933|      0|        if (yych <= '`')
12934|      0|          goto yy891;
12935|      0|        if (yych >= '{')
12936|      0|          goto yy891;
12937|      0|      }
12938|      0|    }
12939|      0|  yy919:
12940|      0|    yych = *++p;
12941|      0|    if (yych <= ';') {
12942|      0|      if (yych <= '/')
12943|      0|        goto yy891;
12944|      0|      if (yych <= '9')
12945|      0|        goto yy920;
12946|      0|      if (yych <= ':')
12947|      0|        goto yy891;
12948|      0|      goto yy897;
12949|      0|    } else {
12950|      0|      if (yych <= 'Z') {
12951|      0|        if (yych <= '@')
12952|      0|          goto yy891;
12953|      0|      } else {
12954|      0|        if (yych <= '`')
12955|      0|          goto yy891;
12956|      0|        if (yych >= '{')
12957|      0|          goto yy891;
12958|      0|      }
12959|      0|    }
12960|      0|  yy920:
12961|      0|    yych = *++p;
12962|      0|    if (yych <= ';') {
12963|      0|      if (yych <= '/')
12964|      0|        goto yy891;
12965|      0|      if (yych <= '9')
12966|      0|        goto yy921;
12967|      0|      if (yych <= ':')
12968|      0|        goto yy891;
12969|      0|      goto yy897;
12970|      0|    } else {
12971|      0|      if (yych <= 'Z') {
12972|      0|        if (yych <= '@')
12973|      0|          goto yy891;
12974|      0|      } else {
12975|      0|        if (yych <= '`')
12976|      0|          goto yy891;
12977|      0|        if (yych >= '{')
12978|      0|          goto yy891;
12979|      0|      }
12980|      0|    }
12981|      0|  yy921:
12982|      0|    yych = *++p;
12983|      0|    if (yych <= ';') {
12984|      0|      if (yych <= '/')
12985|      0|        goto yy891;
12986|      0|      if (yych <= '9')
12987|      0|        goto yy922;
12988|      0|      if (yych <= ':')
12989|      0|        goto yy891;
12990|      0|      goto yy897;
12991|      0|    } else {
12992|      0|      if (yych <= 'Z') {
12993|      0|        if (yych <= '@')
12994|      0|          goto yy891;
12995|      0|      } else {
12996|      0|        if (yych <= '`')
12997|      0|          goto yy891;
12998|      0|        if (yych >= '{')
12999|      0|          goto yy891;
13000|      0|      }
13001|      0|    }
13002|      0|  yy922:
13003|      0|    yych = *++p;
13004|      0|    if (yych <= ';') {
13005|      0|      if (yych <= '/')
13006|      0|        goto yy891;
13007|      0|      if (yych <= '9')
13008|      0|        goto yy923;
13009|      0|      if (yych <= ':')
13010|      0|        goto yy891;
13011|      0|      goto yy897;
13012|      0|    } else {
13013|      0|      if (yych <= 'Z') {
13014|      0|        if (yych <= '@')
13015|      0|          goto yy891;
13016|      0|      } else {
13017|      0|        if (yych <= '`')
13018|      0|          goto yy891;
13019|      0|        if (yych >= '{')
13020|      0|          goto yy891;
13021|      0|      }
13022|      0|    }
13023|      0|  yy923:
13024|      0|    yych = *++p;
13025|      0|    if (yych <= ';') {
13026|      0|      if (yych <= '/')
13027|      0|        goto yy891;
13028|      0|      if (yych <= '9')
13029|      0|        goto yy924;
13030|      0|      if (yych <= ':')
13031|      0|        goto yy891;
13032|      0|      goto yy897;
13033|      0|    } else {
13034|      0|      if (yych <= 'Z') {
13035|      0|        if (yych <= '@')
13036|      0|          goto yy891;
13037|      0|      } else {
13038|      0|        if (yych <= '`')
13039|      0|          goto yy891;
13040|      0|        if (yych >= '{')
13041|      0|          goto yy891;
13042|      0|      }
13043|      0|    }
13044|      0|  yy924:
13045|      0|    yych = *++p;
13046|      0|    if (yych <= ';') {
13047|      0|      if (yych <= '/')
13048|      0|        goto yy891;
13049|      0|      if (yych <= '9')
13050|      0|        goto yy925;
13051|      0|      if (yych <= ':')
13052|      0|        goto yy891;
13053|      0|      goto yy897;
13054|      0|    } else {
13055|      0|      if (yych <= 'Z') {
13056|      0|        if (yych <= '@')
13057|      0|          goto yy891;
13058|      0|      } else {
13059|      0|        if (yych <= '`')
13060|      0|          goto yy891;
13061|      0|        if (yych >= '{')
13062|      0|          goto yy891;
13063|      0|      }
13064|      0|    }
13065|      0|  yy925:
13066|      0|    yych = *++p;
13067|      0|    if (yych <= ';') {
13068|      0|      if (yych <= '/')
13069|      0|        goto yy891;
13070|      0|      if (yych <= '9')
13071|      0|        goto yy926;
13072|      0|      if (yych <= ':')
13073|      0|        goto yy891;
13074|      0|      goto yy897;
13075|      0|    } else {
13076|      0|      if (yych <= 'Z') {
13077|      0|        if (yych <= '@')
13078|      0|          goto yy891;
13079|      0|      } else {
13080|      0|        if (yych <= '`')
13081|      0|          goto yy891;
13082|      0|        if (yych >= '{')
13083|      0|          goto yy891;
13084|      0|      }
13085|      0|    }
13086|      0|  yy926:
13087|      0|    yych = *++p;
13088|      0|    if (yych <= ';') {
13089|      0|      if (yych <= '/')
13090|      0|        goto yy891;
13091|      0|      if (yych <= '9')
13092|      0|        goto yy927;
13093|      0|      if (yych <= ':')
13094|      0|        goto yy891;
13095|      0|      goto yy897;
13096|      0|    } else {
13097|      0|      if (yych <= 'Z') {
13098|      0|        if (yych <= '@')
13099|      0|          goto yy891;
13100|      0|      } else {
13101|      0|        if (yych <= '`')
13102|      0|          goto yy891;
13103|      0|        if (yych >= '{')
13104|      0|          goto yy891;
13105|      0|      }
13106|      0|    }
13107|      0|  yy927:
13108|      0|    yych = *++p;
13109|      0|    if (yych <= ';') {
13110|      0|      if (yych <= '/')
13111|      0|        goto yy891;
13112|      0|      if (yych <= '9')
13113|      0|        goto yy928;
13114|      0|      if (yych <= ':')
13115|      0|        goto yy891;
13116|      0|      goto yy897;
13117|      0|    } else {
13118|      0|      if (yych <= 'Z') {
13119|      0|        if (yych <= '@')
13120|      0|          goto yy891;
13121|      0|      } else {
13122|      0|        if (yych <= '`')
13123|      0|          goto yy891;
13124|      0|        if (yych >= '{')
13125|      0|          goto yy891;
13126|      0|      }
13127|      0|    }
13128|      0|  yy928:
13129|      0|    yych = *++p;
13130|      0|    if (yych <= ';') {
13131|      0|      if (yych <= '/')
13132|      0|        goto yy891;
13133|      0|      if (yych <= '9')
13134|      0|        goto yy929;
13135|      0|      if (yych <= ':')
13136|      0|        goto yy891;
13137|      0|      goto yy897;
13138|      0|    } else {
13139|      0|      if (yych <= 'Z') {
13140|      0|        if (yych <= '@')
13141|      0|          goto yy891;
13142|      0|      } else {
13143|      0|        if (yych <= '`')
13144|      0|          goto yy891;
13145|      0|        if (yych >= '{')
13146|      0|          goto yy891;
13147|      0|      }
13148|      0|    }
13149|      0|  yy929:
13150|      0|    yych = *++p;
13151|      0|    if (yych <= ';') {
13152|      0|      if (yych <= '/')
13153|      0|        goto yy891;
13154|      0|      if (yych <= '9')
13155|      0|        goto yy930;
13156|      0|      if (yych <= ':')
13157|      0|        goto yy891;
13158|      0|      goto yy897;
13159|      0|    } else {
13160|      0|      if (yych <= 'Z') {
13161|      0|        if (yych <= '@')
13162|      0|          goto yy891;
13163|      0|      } else {
13164|      0|        if (yych <= '`')
13165|      0|          goto yy891;
13166|      0|        if (yych >= '{')
13167|      0|          goto yy891;
13168|      0|      }
13169|      0|    }
13170|      0|  yy930:
13171|      0|    yych = *++p;
13172|      0|    if (yych <= ';') {
13173|      0|      if (yych <= '/')
13174|      0|        goto yy891;
13175|      0|      if (yych <= '9')
13176|      0|        goto yy931;
13177|      0|      if (yych <= ':')
13178|      0|        goto yy891;
13179|      0|      goto yy897;
13180|      0|    } else {
13181|      0|      if (yych <= 'Z') {
13182|      0|        if (yych <= '@')
13183|      0|          goto yy891;
13184|      0|      } else {
13185|      0|        if (yych <= '`')
13186|      0|          goto yy891;
13187|      0|        if (yych >= '{')
13188|      0|          goto yy891;
13189|      0|      }
13190|      0|    }
13191|      0|  yy931:
13192|      0|    yych = *++p;
13193|      0|    if (yych <= ';') {
13194|      0|      if (yych <= '/')
13195|      0|        goto yy891;
13196|      0|      if (yych <= '9')
13197|      0|        goto yy932;
13198|      0|      if (yych <= ':')
13199|      0|        goto yy891;
13200|      0|      goto yy897;
13201|      0|    } else {
13202|      0|      if (yych <= 'Z') {
13203|      0|        if (yych <= '@')
13204|      0|          goto yy891;
13205|      0|      } else {
13206|      0|        if (yych <= '`')
13207|      0|          goto yy891;
13208|      0|        if (yych >= '{')
13209|      0|          goto yy891;
13210|      0|      }
13211|      0|    }
13212|      0|  yy932:
13213|      0|    yych = *++p;
13214|      0|    if (yych <= ';') {
13215|      0|      if (yych <= '/')
13216|      0|        goto yy891;
13217|      0|      if (yych <= '9')
13218|      0|        goto yy933;
13219|      0|      if (yych <= ':')
13220|      0|        goto yy891;
13221|      0|      goto yy897;
13222|      0|    } else {
13223|      0|      if (yych <= 'Z') {
13224|      0|        if (yych <= '@')
13225|      0|          goto yy891;
13226|      0|      } else {
13227|      0|        if (yych <= '`')
13228|      0|          goto yy891;
13229|      0|        if (yych >= '{')
13230|      0|          goto yy891;
13231|      0|      }
13232|      0|    }
13233|      0|  yy933:
13234|      0|    yych = *++p;
13235|      0|    if (yych <= ';') {
13236|      0|      if (yych <= '/')
13237|      0|        goto yy891;
13238|      0|      if (yych <= '9')
13239|      0|        goto yy934;
13240|      0|      if (yych <= ':')
13241|      0|        goto yy891;
13242|      0|      goto yy897;
13243|      0|    } else {
13244|      0|      if (yych <= 'Z') {
13245|      0|        if (yych <= '@')
13246|      0|          goto yy891;
13247|      0|      } else {
13248|      0|        if (yych <= '`')
13249|      0|          goto yy891;
13250|      0|        if (yych >= '{')
13251|      0|          goto yy891;
13252|      0|      }
13253|      0|    }
13254|      0|  yy934:
13255|      0|    yych = *++p;
13256|      0|    if (yych <= ';') {
13257|      0|      if (yych <= '/')
13258|      0|        goto yy891;
13259|      0|      if (yych <= '9')
13260|      0|        goto yy935;
13261|      0|      if (yych <= ':')
13262|      0|        goto yy891;
13263|      0|      goto yy897;
13264|      0|    } else {
13265|      0|      if (yych <= 'Z') {
13266|      0|        if (yych <= '@')
13267|      0|          goto yy891;
13268|      0|      } else {
13269|      0|        if (yych <= '`')
13270|      0|          goto yy891;
13271|      0|        if (yych >= '{')
13272|      0|          goto yy891;
13273|      0|      }
13274|      0|    }
13275|      0|  yy935:
13276|      0|    yych = *++p;
13277|      0|    if (yych <= ';') {
13278|      0|      if (yych <= '/')
13279|      0|        goto yy891;
13280|      0|      if (yych <= '9')
13281|      0|        goto yy936;
13282|      0|      if (yych <= ':')
13283|      0|        goto yy891;
13284|      0|      goto yy897;
13285|      0|    } else {
13286|      0|      if (yych <= 'Z') {
13287|      0|        if (yych <= '@')
13288|      0|          goto yy891;
13289|      0|      } else {
13290|      0|        if (yych <= '`')
13291|      0|          goto yy891;
13292|      0|        if (yych >= '{')
13293|      0|          goto yy891;
13294|      0|      }
13295|      0|    }
13296|      0|  yy936:
13297|      0|    yych = *++p;
13298|      0|    if (yych <= ';') {
13299|      0|      if (yych <= '/')
13300|      0|        goto yy891;
13301|      0|      if (yych <= '9')
13302|      0|        goto yy937;
13303|      0|      if (yych <= ':')
13304|      0|        goto yy891;
13305|      0|      goto yy897;
13306|      0|    } else {
13307|      0|      if (yych <= 'Z') {
13308|      0|        if (yych <= '@')
13309|      0|          goto yy891;
13310|      0|      } else {
13311|      0|        if (yych <= '`')
13312|      0|          goto yy891;
13313|      0|        if (yych >= '{')
13314|      0|          goto yy891;
13315|      0|      }
13316|      0|    }
13317|      0|  yy937:
13318|      0|    yych = *++p;
13319|      0|    if (yych <= ';') {
13320|      0|      if (yych <= '/')
13321|      0|        goto yy891;
13322|      0|      if (yych <= '9')
13323|      0|        goto yy913;
13324|      0|      if (yych <= ':')
13325|      0|        goto yy891;
13326|      0|      goto yy897;
13327|      0|    } else {
13328|      0|      if (yych <= 'Z') {
13329|      0|        if (yych <= '@')
13330|      0|          goto yy891;
13331|      0|        goto yy913;
13332|      0|      } else {
13333|      0|        if (yych <= '`')
13334|      0|          goto yy891;
13335|      0|        if (yych <= 'z')
13336|      0|          goto yy913;
13337|      0|        goto yy891;
13338|      0|      }
13339|      0|    }
13340|      0|  }
13341|      0|}
13342|       |
13343|       |// Returns positive value if a URL begins in a way that is potentially
13344|       |// dangerous, with javascript:, vbscript:, file:, or data:, otherwise 0.
13345|      0|bufsize_t _scan_dangerous_url(const unsigned char *p) {
13346|      0|  const unsigned char *marker = NULL;
13347|      0|  const unsigned char *start = p;
13348|       |
13349|      0|  {
13350|      0|    unsigned char yych;
13351|      0|    unsigned int yyaccept = 0;
13352|      0|    yych = *p;
13353|      0|    if (yych <= 'V') {
13354|      0|      if (yych <= 'F') {
13355|      0|        if (yych == 'D')
13356|      0|          goto yy942;
13357|      0|        if (yych >= 'F')
13358|      0|          goto yy943;
13359|      0|      } else {
13360|      0|        if (yych == 'J')
13361|      0|          goto yy944;
13362|      0|        if (yych >= 'V')
13363|      0|          goto yy945;
13364|      0|      }
13365|      0|    } else {
13366|      0|      if (yych <= 'f') {
13367|      0|        if (yych == 'd')
13368|      0|          goto yy942;
13369|      0|        if (yych >= 'f')
13370|      0|          goto yy943;
13371|      0|      } else {
13372|      0|        if (yych <= 'j') {
13373|      0|          if (yych >= 'j')
13374|      0|            goto yy944;
13375|      0|        } else {
13376|      0|          if (yych == 'v')
13377|      0|            goto yy945;
13378|      0|        }
13379|      0|      }
13380|      0|    }
13381|      0|    ++p;
13382|      0|  yy941 : { return 0; }
13383|      0|  yy942:
13384|      0|    yyaccept = 0;
13385|      0|    yych = *(marker = ++p);
13386|      0|    if (yych == 'A')
13387|      0|      goto yy946;
13388|      0|    if (yych == 'a')
13389|      0|      goto yy946;
13390|      0|    goto yy941;
13391|      0|  yy943:
13392|      0|    yyaccept = 0;
13393|      0|    yych = *(marker = ++p);
13394|      0|    if (yych == 'I')
13395|      0|      goto yy948;
13396|      0|    if (yych == 'i')
13397|      0|      goto yy948;
13398|      0|    goto yy941;
13399|      0|  yy944:
13400|      0|    yyaccept = 0;
13401|      0|    yych = *(marker = ++p);
13402|      0|    if (yych == 'A')
13403|      0|      goto yy949;
13404|      0|    if (yych == 'a')
13405|      0|      goto yy949;
13406|      0|    goto yy941;
13407|      0|  yy945:
13408|      0|    yyaccept = 0;
13409|      0|    yych = *(marker = ++p);
13410|      0|    if (yych == 'B')
13411|      0|      goto yy950;
13412|      0|    if (yych == 'b')
13413|      0|      goto yy950;
13414|      0|    goto yy941;
13415|      0|  yy946:
13416|      0|    yych = *++p;
13417|      0|    if (yych == 'T')
13418|      0|      goto yy951;
13419|      0|    if (yych == 't')
13420|      0|      goto yy951;
13421|      0|  yy947:
13422|      0|    p = marker;
13423|      0|    if (yyaccept == 0) {
13424|      0|      goto yy941;
13425|      0|    } else {
13426|      0|      goto yy959;
13427|      0|    }
13428|      0|  yy948:
13429|      0|    yych = *++p;
13430|      0|    if (yych == 'L')
13431|      0|      goto yy952;
13432|      0|    if (yych == 'l')
13433|      0|      goto yy952;
13434|      0|    goto yy947;
13435|      0|  yy949:
13436|      0|    yych = *++p;
13437|      0|    if (yych == 'V')
13438|      0|      goto yy953;
13439|      0|    if (yych == 'v')
13440|      0|      goto yy953;
13441|      0|    goto yy947;
13442|      0|  yy950:
13443|      0|    yych = *++p;
13444|      0|    if (yych == 'S')
13445|      0|      goto yy954;
13446|      0|    if (yych == 's')
13447|      0|      goto yy954;
13448|      0|    goto yy947;
13449|      0|  yy951:
13450|      0|    yych = *++p;
13451|      0|    if (yych == 'A')
13452|      0|      goto yy955;
13453|      0|    if (yych == 'a')
13454|      0|      goto yy955;
13455|      0|    goto yy947;
13456|      0|  yy952:
13457|      0|    yych = *++p;
13458|      0|    if (yych == 'E')
13459|      0|      goto yy956;
13460|      0|    if (yych == 'e')
13461|      0|      goto yy956;
13462|      0|    goto yy947;
13463|      0|  yy953:
13464|      0|    yych = *++p;
13465|      0|    if (yych == 'A')
13466|      0|      goto yy950;
13467|      0|    if (yych == 'a')
13468|      0|      goto yy950;
13469|      0|    goto yy947;
13470|      0|  yy954:
13471|      0|    yych = *++p;
13472|      0|    if (yych == 'C')
13473|      0|      goto yy957;
13474|      0|    if (yych == 'c')
13475|      0|      goto yy957;
13476|      0|    goto yy947;
13477|      0|  yy955:
13478|      0|    yych = *++p;
13479|      0|    if (yych == ':')
13480|      0|      goto yy958;
13481|      0|    goto yy947;
13482|      0|  yy956:
13483|      0|    yych = *++p;
13484|      0|    if (yych == ':')
13485|      0|      goto yy960;
13486|      0|    goto yy947;
13487|      0|  yy957:
13488|      0|    yych = *++p;
13489|      0|    if (yych == 'R')
13490|      0|      goto yy961;
13491|      0|    if (yych == 'r')
13492|      0|      goto yy961;
13493|      0|    goto yy947;
13494|      0|  yy958:
13495|      0|    yyaccept = 1;
13496|      0|    yych = *(marker = ++p);
13497|      0|    if (yych == 'I')
13498|      0|      goto yy962;
13499|      0|    if (yych == 'i')
13500|      0|      goto yy962;
13501|      0|  yy959 : { return (bufsize_t)(p - start); }
13502|      0|  yy960:
13503|      0|    ++p;
13504|      0|    goto yy959;
13505|      0|  yy961:
13506|      0|    yych = *++p;
13507|      0|    if (yych == 'I')
13508|      0|      goto yy963;
13509|      0|    if (yych == 'i')
13510|      0|      goto yy963;
13511|      0|    goto yy947;
13512|      0|  yy962:
13513|      0|    yych = *++p;
13514|      0|    if (yych == 'M')
13515|      0|      goto yy964;
13516|      0|    if (yych == 'm')
13517|      0|      goto yy964;
13518|      0|    goto yy947;
13519|      0|  yy963:
13520|      0|    yych = *++p;
13521|      0|    if (yych == 'P')
13522|      0|      goto yy965;
13523|      0|    if (yych == 'p')
13524|      0|      goto yy965;
13525|      0|    goto yy947;
13526|      0|  yy964:
13527|      0|    yych = *++p;
13528|      0|    if (yych == 'A')
13529|      0|      goto yy966;
13530|      0|    if (yych == 'a')
13531|      0|      goto yy966;
13532|      0|    goto yy947;
13533|      0|  yy965:
13534|      0|    yych = *++p;
13535|      0|    if (yych == 'T')
13536|      0|      goto yy956;
13537|      0|    if (yych == 't')
13538|      0|      goto yy956;
13539|      0|    goto yy947;
13540|      0|  yy966:
13541|      0|    yych = *++p;
13542|      0|    if (yych == 'G')
13543|      0|      goto yy967;
13544|      0|    if (yych != 'g')
13545|      0|      goto yy947;
13546|      0|  yy967:
13547|      0|    yych = *++p;
13548|      0|    if (yych == 'E')
13549|      0|      goto yy968;
13550|      0|    if (yych != 'e')
13551|      0|      goto yy947;
13552|      0|  yy968:
13553|      0|    yych = *++p;
13554|      0|    if (yych != '/')
13555|      0|      goto yy947;
13556|      0|    yych = *++p;
13557|      0|    if (yych <= 'W') {
13558|      0|      if (yych <= 'J') {
13559|      0|        if (yych == 'G')
13560|      0|          goto yy970;
13561|      0|        if (yych <= 'I')
13562|      0|          goto yy947;
13563|      0|        goto yy971;
13564|      0|      } else {
13565|      0|        if (yych == 'P')
13566|      0|          goto yy972;
13567|      0|        if (yych <= 'V')
13568|      0|          goto yy947;
13569|      0|        goto yy973;
13570|      0|      }
13571|      0|    } else {
13572|      0|      if (yych <= 'j') {
13573|      0|        if (yych == 'g')
13574|      0|          goto yy970;
13575|      0|        if (yych <= 'i')
13576|      0|          goto yy947;
13577|      0|        goto yy971;
13578|      0|      } else {
13579|      0|        if (yych <= 'p') {
13580|      0|          if (yych <= 'o')
13581|      0|            goto yy947;
13582|      0|          goto yy972;
13583|      0|        } else {
13584|      0|          if (yych == 'w')
13585|      0|            goto yy973;
13586|      0|          goto yy947;
13587|      0|        }
13588|      0|      }
13589|      0|    }
13590|      0|  yy970:
13591|      0|    yych = *++p;
13592|      0|    if (yych == 'I')
13593|      0|      goto yy974;
13594|      0|    if (yych == 'i')
13595|      0|      goto yy974;
13596|      0|    goto yy947;
13597|      0|  yy971:
13598|      0|    yych = *++p;
13599|      0|    if (yych == 'P')
13600|      0|      goto yy975;
13601|      0|    if (yych == 'p')
13602|      0|      goto yy975;
13603|      0|    goto yy947;
13604|      0|  yy972:
13605|      0|    yych = *++p;
13606|      0|    if (yych == 'N')
13607|      0|      goto yy976;
13608|      0|    if (yych == 'n')
13609|      0|      goto yy976;
13610|      0|    goto yy947;
13611|      0|  yy973:
13612|      0|    yych = *++p;
13613|      0|    if (yych == 'E')
13614|      0|      goto yy977;
13615|      0|    if (yych == 'e')
13616|      0|      goto yy977;
13617|      0|    goto yy947;
13618|      0|  yy974:
13619|      0|    yych = *++p;
13620|      0|    if (yych == 'F')
13621|      0|      goto yy978;
13622|      0|    if (yych == 'f')
13623|      0|      goto yy978;
13624|      0|    goto yy947;
13625|      0|  yy975:
13626|      0|    yych = *++p;
13627|      0|    if (yych == 'E')
13628|      0|      goto yy976;
13629|      0|    if (yych != 'e')
13630|      0|      goto yy947;
13631|      0|  yy976:
13632|      0|    yych = *++p;
13633|      0|    if (yych == 'G')
13634|      0|      goto yy978;
13635|      0|    if (yych == 'g')
13636|      0|      goto yy978;
13637|      0|    goto yy947;
13638|      0|  yy977:
13639|      0|    yych = *++p;
13640|      0|    if (yych == 'B')
13641|      0|      goto yy980;
13642|      0|    if (yych == 'b')
13643|      0|      goto yy980;
13644|      0|    goto yy947;
13645|      0|  yy978:
13646|      0|    ++p;
13647|      0|    { return 0; }
13648|      0|  yy980:
13649|      0|    yych = *++p;
13650|      0|    if (yych == 'P')
13651|      0|      goto yy978;
13652|      0|    if (yych == 'p')
13653|      0|      goto yy978;
13654|      0|    goto yy947;
13655|      0|  }
13656|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/scanners.h:
    1|       |#include "cmark.h"
    2|       |#include "chunk.h"
    3|       |
    4|       |#ifdef __cplusplus
    5|       |extern "C" {
    6|       |#endif
    7|       |
    8|       |bufsize_t _scan_at(bufsize_t (*scanner)(const unsigned char *), cmark_chunk *c,
    9|       |                   bufsize_t offset);
   10|       |bufsize_t _scan_scheme(const unsigned char *p);
   11|       |bufsize_t _scan_autolink_uri(const unsigned char *p);
   12|       |bufsize_t _scan_autolink_email(const unsigned char *p);
   13|       |bufsize_t _scan_html_tag(const unsigned char *p);
   14|       |bufsize_t _scan_html_comment(const unsigned char *p);
   15|       |bufsize_t _scan_html_pi(const unsigned char *p);
   16|       |bufsize_t _scan_html_declaration(const unsigned char *p);
   17|       |bufsize_t _scan_html_cdata(const unsigned char *p);
   18|       |bufsize_t _scan_html_block_start(const unsigned char *p);
   19|       |bufsize_t _scan_html_block_start_7(const unsigned char *p);
   20|       |bufsize_t _scan_html_block_end_1(const unsigned char *p);
   21|       |bufsize_t _scan_html_block_end_2(const unsigned char *p);
   22|       |bufsize_t _scan_html_block_end_3(const unsigned char *p);
   23|       |bufsize_t _scan_html_block_end_4(const unsigned char *p);
   24|       |bufsize_t _scan_html_block_end_5(const unsigned char *p);
   25|       |bufsize_t _scan_link_title(const unsigned char *p);
   26|       |bufsize_t _scan_spacechars(const unsigned char *p);
   27|       |bufsize_t _scan_atx_heading_start(const unsigned char *p);
   28|       |bufsize_t _scan_setext_heading_line(const unsigned char *p);
   29|       |bufsize_t _scan_open_code_fence(const unsigned char *p);
   30|       |bufsize_t _scan_close_code_fence(const unsigned char *p);
   31|       |bufsize_t _scan_entity(const unsigned char *p);
   32|       |bufsize_t _scan_dangerous_url(const unsigned char *p);
   33|       |
   34|      0|#define scan_scheme(c, n) _scan_at(&_scan_scheme, c, n)
   35|      0|#define scan_autolink_uri(c, n) _scan_at(&_scan_autolink_uri, c, n)
   36|      0|#define scan_autolink_email(c, n) _scan_at(&_scan_autolink_email, c, n)
   37|      0|#define scan_html_tag(c, n) _scan_at(&_scan_html_tag, c, n)
   38|      0|#define scan_html_comment(c, n) _scan_at(&_scan_html_comment, c, n)
   39|      0|#define scan_html_pi(c, n) _scan_at(&_scan_html_pi, c, n)
   40|      0|#define scan_html_declaration(c, n) _scan_at(&_scan_html_declaration, c, n)
   41|      0|#define scan_html_cdata(c, n) _scan_at(&_scan_html_cdata, c, n)
   42|     78|#define scan_html_block_start(c, n) _scan_at(&_scan_html_block_start, c, n)
   43|     48|#define scan_html_block_start_7(c, n) _scan_at(&_scan_html_block_start_7, c, n)
   44|      0|#define scan_html_block_end_1(c, n) _scan_at(&_scan_html_block_end_1, c, n)
   45|      0|#define scan_html_block_end_2(c, n) _scan_at(&_scan_html_block_end_2, c, n)
   46|      0|#define scan_html_block_end_3(c, n) _scan_at(&_scan_html_block_end_3, c, n)
   47|      0|#define scan_html_block_end_4(c, n) _scan_at(&_scan_html_block_end_4, c, n)
   48|      0|#define scan_html_block_end_5(c, n) _scan_at(&_scan_html_block_end_5, c, n)
   49|     16|#define scan_link_title(c, n) _scan_at(&_scan_link_title, c, n)
   50|     48|#define scan_spacechars(c, n) _scan_at(&_scan_spacechars, c, n)
   51|     86|#define scan_atx_heading_start(c, n) _scan_at(&_scan_atx_heading_start, c, n)
   52|       |#define scan_setext_heading_line(c, n)                                         \
   53|      0|  _scan_at(&_scan_setext_heading_line, c, n)
   54|     78|#define scan_open_code_fence(c, n) _scan_at(&_scan_open_code_fence, c, n)
   55|      0|#define scan_close_code_fence(c, n) _scan_at(&_scan_close_code_fence, c, n)
   56|       |#define scan_entity(c, n) _scan_at(&_scan_entity, c, n)
   57|       |#define scan_dangerous_url(c, n) _scan_at(&_scan_dangerous_url, c, n)
   58|       |
   59|       |#ifdef __cplusplus
   60|       |}
   61|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/utf8.c:
    1|       |#include <stdlib.h>
    2|       |#include <stdint.h>
    3|       |#include <assert.h>
    4|       |
    5|       |#include "cmark_ctype.h"
    6|       |#include "utf8.h"
    7|       |
    8|       |static const int8_t utf8proc_utf8class[256] = {
    9|       |    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   10|       |    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   11|       |    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   12|       |    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   13|       |    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   14|       |    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   15|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   16|       |    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   17|       |    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
   18|       |    2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
   19|       |    4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0};
   20|       |
   21|      0|static void encode_unknown(cmark_strbuf *buf) {
   22|      0|  static const uint8_t repl[] = {239, 191, 189};
   23|      0|  cmark_strbuf_put(buf, repl, 3);
   24|      0|}
   25|       |
   26|      0|static int utf8proc_charlen(const uint8_t *str, bufsize_t str_len) {
   27|      0|  int length, i;
   28|       |
   29|      0|  if (!str_len)
   30|      0|    return 0;
   31|       |
   32|      0|  length = utf8proc_utf8class[str[0]];
   33|       |
   34|      0|  if (!length)
   35|      0|    return -1;
   36|       |
   37|      0|  if (str_len >= 0 && (bufsize_t)length > str_len)
   38|      0|    return -str_len;
   39|       |
   40|      0|  for (i = 1; i < length; i++) {
   41|      0|    if ((str[i] & 0xC0) != 0x80)
   42|      0|      return -i;
   43|      0|  }
   44|       |
   45|      0|  return length;
   46|      0|}
   47|       |
   48|       |// Validate a single UTF-8 character according to RFC 3629.
   49|      0|static int utf8proc_valid(const uint8_t *str, bufsize_t str_len) {
   50|      0|  int length = utf8proc_utf8class[str[0]];
   51|       |
   52|      0|  if (!length)
   53|      0|    return -1;
   54|       |
   55|      0|  if ((bufsize_t)length > str_len)
   56|      0|    return -str_len;
   57|       |
   58|      0|  switch (length) {
   59|      0|  case 2:
   60|      0|    if ((str[1] & 0xC0) != 0x80)
   61|      0|      return -1;
   62|      0|    if (str[0] < 0xC2) {
   63|       |      // Overlong
   64|      0|      return -length;
   65|      0|    }
   66|      0|    break;
   67|       |
   68|      0|  case 3:
   69|      0|    if ((str[1] & 0xC0) != 0x80)
   70|      0|      return -1;
   71|      0|    if ((str[2] & 0xC0) != 0x80)
   72|      0|      return -2;
   73|      0|    if (str[0] == 0xE0) {
   74|      0|      if (str[1] < 0xA0) {
   75|       |        // Overlong
   76|      0|        return -length;
   77|      0|      }
   78|      0|    } else if (str[0] == 0xED) {
   79|      0|      if (str[1] >= 0xA0) {
   80|       |        // Surrogate
   81|      0|        return -length;
   82|      0|      }
   83|      0|    }
   84|      0|    break;
   85|       |
   86|      0|  case 4:
   87|      0|    if ((str[1] & 0xC0) != 0x80)
   88|      0|      return -1;
   89|      0|    if ((str[2] & 0xC0) != 0x80)
   90|      0|      return -2;
   91|      0|    if ((str[3] & 0xC0) != 0x80)
   92|      0|      return -3;
   93|      0|    if (str[0] == 0xF0) {
   94|      0|      if (str[1] < 0x90) {
   95|       |        // Overlong
   96|      0|        return -length;
   97|      0|      }
   98|      0|    } else if (str[0] >= 0xF4) {
   99|      0|      if (str[0] > 0xF4 || str[1] >= 0x90) {
  100|       |        // Above 0x10FFFF
  101|      0|        return -length;
  102|      0|      }
  103|      0|    }
  104|      0|    break;
  105|      0|  }
  106|       |
  107|      0|  return length;
  108|      0|}
  109|       |
  110|       |void cmark_utf8proc_check(cmark_strbuf *ob, const uint8_t *line,
  111|      0|                          bufsize_t size) {
  112|      0|  bufsize_t i = 0;
  113|       |
  114|      0|  while (i < size) {
  115|      0|    bufsize_t org = i;
  116|      0|    int charlen = 0;
  117|       |
  118|      0|    while (i < size) {
  119|      0|      if (line[i] < 0x80 && line[i] != 0) {
  120|      0|        i++;
  121|      0|      } else if (line[i] >= 0x80) {
  122|      0|        charlen = utf8proc_valid(line + i, size - i);
  123|      0|        if (charlen < 0) {
  124|      0|          charlen = -charlen;
  125|      0|          break;
  126|      0|        }
  127|      0|        i += charlen;
  128|      0|      } else if (line[i] == 0) {
  129|       |        // ASCII NUL is technically valid but rejected
  130|       |        // for security reasons.
  131|      0|        charlen = 1;
  132|      0|        break;
  133|      0|      }
  134|      0|    }
  135|       |
  136|      0|    if (i > org) {
  137|      0|      cmark_strbuf_put(ob, line + org, i - org);
  138|      0|    }
  139|       |
  140|      0|    if (i >= size) {
  141|      0|      break;
  142|      0|    } else {
  143|       |      // Invalid UTF-8
  144|      0|      encode_unknown(ob);
  145|      0|      i += charlen;
  146|      0|    }
  147|      0|  }
  148|      0|}
  149|       |
  150|       |int cmark_utf8proc_iterate(const uint8_t *str, bufsize_t str_len,
  151|      0|                           int32_t *dst) {
  152|      0|  int length;
  153|      0|  int32_t uc = -1;
  154|       |
  155|      0|  *dst = -1;
  156|      0|  length = utf8proc_charlen(str, str_len);
  157|      0|  if (length < 0)
  158|      0|    return -1;
  159|       |
  160|      0|  switch (length) {
  161|      0|  case 1:
  162|      0|    uc = str[0];
  163|      0|    break;
  164|      0|  case 2:
  165|      0|    uc = ((str[0] & 0x1F) << 6) + (str[1] & 0x3F);
  166|      0|    if (uc < 0x80)
  167|      0|      uc = -1;
  168|      0|    break;
  169|      0|  case 3:
  170|      0|    uc = ((str[0] & 0x0F) << 12) + ((str[1] & 0x3F) << 6) + (str[2] & 0x3F);
  171|      0|    if (uc < 0x800 || (uc >= 0xD800 && uc < 0xE000))
  172|      0|      uc = -1;
  173|      0|    break;
  174|      0|  case 4:
  175|      0|    uc = ((str[0] & 0x07) << 18) + ((str[1] & 0x3F) << 12) +
  176|      0|         ((str[2] & 0x3F) << 6) + (str[3] & 0x3F);
  177|      0|    if (uc < 0x10000 || uc >= 0x110000)
  178|      0|      uc = -1;
  179|      0|    break;
  180|      0|  }
  181|       |
  182|      0|  if (uc < 0)
  183|      0|    return -1;
  184|       |
  185|      0|  *dst = uc;
  186|      0|  return length;
  187|      0|}
  188|       |
  189|      0|void cmark_utf8proc_encode_char(int32_t uc, cmark_strbuf *buf) {
  190|      0|  uint8_t dst[4];
  191|      0|  bufsize_t len = 0;
  192|       |
  193|      0|  assert(uc >= 0);
  194|       |
  195|      0|  if (uc < 0x80) {
  196|      0|    dst[0] = (uint8_t)(uc);
  197|      0|    len = 1;
  198|      0|  } else if (uc < 0x800) {
  199|      0|    dst[0] = (uint8_t)(0xC0 + (uc >> 6));
  200|      0|    dst[1] = 0x80 + (uc & 0x3F);
  201|      0|    len = 2;
  202|      0|  } else if (uc == 0xFFFF) {
  203|      0|    dst[0] = 0xFF;
  204|      0|    len = 1;
  205|      0|  } else if (uc == 0xFFFE) {
  206|      0|    dst[0] = 0xFE;
  207|      0|    len = 1;
  208|      0|  } else if (uc < 0x10000) {
  209|      0|    dst[0] = (uint8_t)(0xE0 + (uc >> 12));
  210|      0|    dst[1] = 0x80 + ((uc >> 6) & 0x3F);
  211|      0|    dst[2] = 0x80 + (uc & 0x3F);
  212|      0|    len = 3;
  213|      0|  } else if (uc < 0x110000) {
  214|      0|    dst[0] = (uint8_t)(0xF0 + (uc >> 18));
  215|      0|    dst[1] = 0x80 + ((uc >> 12) & 0x3F);
  216|      0|    dst[2] = 0x80 + ((uc >> 6) & 0x3F);
  217|      0|    dst[3] = 0x80 + (uc & 0x3F);
  218|      0|    len = 4;
  219|      0|  } else {
  220|      0|    encode_unknown(buf);
  221|      0|    return;
  222|      0|  }
  223|       |
  224|      0|  cmark_strbuf_put(buf, dst, len);
  225|      0|}
  226|       |
  227|       |void cmark_utf8proc_case_fold(cmark_strbuf *dest, const uint8_t *str,
  228|      0|                              bufsize_t len) {
  229|      0|  int32_t c;
  230|       |
  231|      0|#define bufpush(x) cmark_utf8proc_encode_char(x, dest)
  232|       |
  233|      0|  while (len > 0) {
  234|      0|    bufsize_t char_len = cmark_utf8proc_iterate(str, len, &c);
  235|       |
  236|      0|    if (char_len >= 0) {
  237|      0|#include "case_fold_switch.inc"
  238|      0|    } else {
  239|      0|      encode_unknown(dest);
  240|      0|      char_len = -char_len;
  241|      0|    }
  242|       |
  243|      0|    str += char_len;
  244|      0|    len -= char_len;
  245|      0|  }
  246|      0|}
  247|       |
  248|       |// matches anything in the Zs class, plus LF, CR, TAB, FF.
  249|      0|int cmark_utf8proc_is_space(int32_t uc) {
  250|      0|  return (uc == 9 || uc == 10 || uc == 12 || uc == 13 || uc == 32 ||
  251|      0|          uc == 160 || uc == 5760 || (uc >= 8192 && uc <= 8202) || uc == 8239 ||
  252|      0|          uc == 8287 || uc == 12288);
  253|      0|}
  254|       |
  255|       |// matches anything in the P[cdefios] classes.
  256|      0|int cmark_utf8proc_is_punctuation(int32_t uc) {
  257|      0|  return (
  258|      0|      (uc < 128 && cmark_ispunct((char)uc)) || uc == 161 || uc == 167 ||
  259|      0|      uc == 171 || uc == 182 || uc == 183 || uc == 187 || uc == 191 ||
  260|      0|      uc == 894 || uc == 903 || (uc >= 1370 && uc <= 1375) || uc == 1417 ||
  261|      0|      uc == 1418 || uc == 1470 || uc == 1472 || uc == 1475 || uc == 1478 ||
  262|      0|      uc == 1523 || uc == 1524 || uc == 1545 || uc == 1546 || uc == 1548 ||
  263|      0|      uc == 1549 || uc == 1563 || uc == 1566 || uc == 1567 ||
  264|      0|      (uc >= 1642 && uc <= 1645) || uc == 1748 || (uc >= 1792 && uc <= 1805) ||
  265|      0|      (uc >= 2039 && uc <= 2041) || (uc >= 2096 && uc <= 2110) || uc == 2142 ||
  266|      0|      uc == 2404 || uc == 2405 || uc == 2416 || uc == 2800 || uc == 3572 ||
  267|      0|      uc == 3663 || uc == 3674 || uc == 3675 || (uc >= 3844 && uc <= 3858) ||
  268|      0|      uc == 3860 || (uc >= 3898 && uc <= 3901) || uc == 3973 ||
  269|      0|      (uc >= 4048 && uc <= 4052) || uc == 4057 || uc == 4058 ||
  270|      0|      (uc >= 4170 && uc <= 4175) || uc == 4347 || (uc >= 4960 && uc <= 4968) ||
  271|      0|      uc == 5120 || uc == 5741 || uc == 5742 || uc == 5787 || uc == 5788 ||
  272|      0|      (uc >= 5867 && uc <= 5869) || uc == 5941 || uc == 5942 ||
  273|      0|      (uc >= 6100 && uc <= 6102) || (uc >= 6104 && uc <= 6106) ||
  274|      0|      (uc >= 6144 && uc <= 6154) || uc == 6468 || uc == 6469 || uc == 6686 ||
  275|      0|      uc == 6687 || (uc >= 6816 && uc <= 6822) || (uc >= 6824 && uc <= 6829) ||
  276|      0|      (uc >= 7002 && uc <= 7008) || (uc >= 7164 && uc <= 7167) ||
  277|      0|      (uc >= 7227 && uc <= 7231) || uc == 7294 || uc == 7295 ||
  278|      0|      (uc >= 7360 && uc <= 7367) || uc == 7379 || (uc >= 8208 && uc <= 8231) ||
  279|      0|      (uc >= 8240 && uc <= 8259) || (uc >= 8261 && uc <= 8273) ||
  280|      0|      (uc >= 8275 && uc <= 8286) || uc == 8317 || uc == 8318 || uc == 8333 ||
  281|      0|      uc == 8334 || (uc >= 8968 && uc <= 8971) || uc == 9001 || uc == 9002 ||
  282|      0|      (uc >= 10088 && uc <= 10101) || uc == 10181 || uc == 10182 ||
  283|      0|      (uc >= 10214 && uc <= 10223) || (uc >= 10627 && uc <= 10648) ||
  284|      0|      (uc >= 10712 && uc <= 10715) || uc == 10748 || uc == 10749 ||
  285|      0|      (uc >= 11513 && uc <= 11516) || uc == 11518 || uc == 11519 ||
  286|      0|      uc == 11632 || (uc >= 11776 && uc <= 11822) ||
  287|      0|      (uc >= 11824 && uc <= 11842) || (uc >= 12289 && uc <= 12291) ||
  288|      0|      (uc >= 12296 && uc <= 12305) || (uc >= 12308 && uc <= 12319) ||
  289|      0|      uc == 12336 || uc == 12349 || uc == 12448 || uc == 12539 || uc == 42238 ||
  290|      0|      uc == 42239 || (uc >= 42509 && uc <= 42511) || uc == 42611 ||
  291|      0|      uc == 42622 || (uc >= 42738 && uc <= 42743) ||
  292|      0|      (uc >= 43124 && uc <= 43127) || uc == 43214 || uc == 43215 ||
  293|      0|      (uc >= 43256 && uc <= 43258) || uc == 43310 || uc == 43311 ||
  294|      0|      uc == 43359 || (uc >= 43457 && uc <= 43469) || uc == 43486 ||
  295|      0|      uc == 43487 || (uc >= 43612 && uc <= 43615) || uc == 43742 ||
  296|      0|      uc == 43743 || uc == 43760 || uc == 43761 || uc == 44011 || uc == 64830 ||
  297|      0|      uc == 64831 || (uc >= 65040 && uc <= 65049) ||
  298|      0|      (uc >= 65072 && uc <= 65106) || (uc >= 65108 && uc <= 65121) ||
  299|      0|      uc == 65123 || uc == 65128 || uc == 65130 || uc == 65131 ||
  300|      0|      (uc >= 65281 && uc <= 65283) || (uc >= 65285 && uc <= 65290) ||
  301|      0|      (uc >= 65292 && uc <= 65295) || uc == 65306 || uc == 65307 ||
  302|      0|      uc == 65311 || uc == 65312 || (uc >= 65339 && uc <= 65341) ||
  303|      0|      uc == 65343 || uc == 65371 || uc == 65373 ||
  304|      0|      (uc >= 65375 && uc <= 65381) || (uc >= 65792 && uc <= 65794) ||
  305|      0|      uc == 66463 || uc == 66512 || uc == 66927 || uc == 67671 || uc == 67871 ||
  306|      0|      uc == 67903 || (uc >= 68176 && uc <= 68184) || uc == 68223 ||
  307|      0|      (uc >= 68336 && uc <= 68342) || (uc >= 68409 && uc <= 68415) ||
  308|      0|      (uc >= 68505 && uc <= 68508) || (uc >= 69703 && uc <= 69709) ||
  309|      0|      uc == 69819 || uc == 69820 || (uc >= 69822 && uc <= 69825) ||
  310|      0|      (uc >= 69952 && uc <= 69955) || uc == 70004 || uc == 70005 ||
  311|      0|      (uc >= 70085 && uc <= 70088) || uc == 70093 ||
  312|      0|      (uc >= 70200 && uc <= 70205) || uc == 70854 ||
  313|      0|      (uc >= 71105 && uc <= 71113) || (uc >= 71233 && uc <= 71235) ||
  314|      0|      (uc >= 74864 && uc <= 74868) || uc == 92782 || uc == 92783 ||
  315|      0|      uc == 92917 || (uc >= 92983 && uc <= 92987) || uc == 92996 ||
  316|      0|      uc == 113823);
  317|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftCommonMark/Sources/cmark/xml.c:
    1|       |#include <stdlib.h>
    2|       |#include <stdio.h>
    3|       |#include <string.h>
    4|       |#include <assert.h>
    5|       |
    6|       |#include "config.h"
    7|       |#include "cmark.h"
    8|       |#include "node.h"
    9|       |#include "buffer.h"
   10|       |
   11|       |#define BUFFER_SIZE 100
   12|      0|#define MAX_INDENT 40
   13|       |
   14|       |// Functions to convert cmark_nodes to XML strings.
   15|       |
   16|       |// C0 control characters, U+FFFE and U+FFF aren't allowed in XML.
   17|       |static const char XML_ESCAPE_TABLE[256] = {
   18|       |    /* 0x00 */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1,
   19|       |    /* 0x10 */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   20|       |    /* 0x20 */ 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   21|       |    /* 0x30 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0,
   22|       |    /* 0x40 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   23|       |    /* 0x50 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   24|       |    /* 0x60 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   25|       |    /* 0x70 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   26|       |    /* 0x80 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   27|       |    /* 0x90 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   28|       |    /* 0xA0 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   29|       |    /* 0xB0 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9,
   30|       |    /* 0xC0 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   31|       |    /* 0xD0 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   32|       |    /* 0xE0 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   33|       |    /* 0xF0 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   34|       |};
   35|       |
   36|       |// U+FFFD Replacement Character encoded in UTF-8
   37|       |#define UTF8_REPL "\xEF\xBF\xBD"
   38|       |
   39|       |static const char *XML_ESCAPES[] = {
   40|       |  "", UTF8_REPL, "&quot;", "&amp;", "&lt;", "&gt;"
   41|       |};
   42|       |
   43|       |static void escape_xml(cmark_strbuf *ob, const unsigned char *src,
   44|      0|                       bufsize_t size) {
   45|      0|  bufsize_t i = 0, org, esc = 0;
   46|       |
   47|      0|  while (i < size) {
   48|      0|    org = i;
   49|      0|    while (i < size && (esc = XML_ESCAPE_TABLE[src[i]]) == 0)
   50|      0|      i++;
   51|       |
   52|      0|    if (i > org)
   53|      0|      cmark_strbuf_put(ob, src + org, i - org);
   54|       |
   55|      0|    if (i >= size)
   56|      0|      break;
   57|       |
   58|      0|    if (esc == 9) {
   59|       |      // To replace U+FFFE and U+FFFF with U+FFFD, only the last byte has to
   60|       |      // be changed.
   61|       |      // We know that src[i] is 0xBE or 0xBF.
   62|      0|      if (i >= 2 && src[i-2] == 0xEF && src[i-1] == 0xBF) {
   63|      0|        cmark_strbuf_putc(ob, 0xBD);
   64|      0|      } else {
   65|      0|        cmark_strbuf_putc(ob, src[i]);
   66|      0|      }
   67|      0|    } else {
   68|      0|      cmark_strbuf_puts(ob, XML_ESCAPES[esc]);
   69|      0|    }
   70|       |
   71|      0|    i++;
   72|      0|  }
   73|      0|}
   74|       |
   75|      0|static void escape_xml_str(cmark_strbuf *dest, const unsigned char *source) {
   76|      0|  if (source)
   77|      0|    escape_xml(dest, source, strlen((char *)source));
   78|      0|}
   79|       |
   80|       |struct render_state {
   81|       |  cmark_strbuf *xml;
   82|       |  int indent;
   83|       |};
   84|       |
   85|      0|static CMARK_INLINE void indent(struct render_state *state) {
   86|      0|  int i;
   87|      0|  for (i = 0; i < state->indent && i < MAX_INDENT; i++) {
   88|      0|    cmark_strbuf_putc(state->xml, ' ');
   89|      0|  }
   90|      0|}
   91|       |
   92|       |static int S_render_node(cmark_node *node, cmark_event_type ev_type,
   93|      0|                         struct render_state *state, int options) {
   94|      0|  cmark_strbuf *xml = state->xml;
   95|      0|  bool literal = false;
   96|      0|  cmark_delim_type delim;
   97|      0|  bool entering = (ev_type == CMARK_EVENT_ENTER);
   98|      0|  char buffer[BUFFER_SIZE];
   99|       |
  100|      0|  if (entering) {
  101|      0|    indent(state);
  102|      0|    cmark_strbuf_putc(xml, '<');
  103|      0|    cmark_strbuf_puts(xml, cmark_node_get_type_string(node));
  104|       |
  105|      0|    if (options & CMARK_OPT_SOURCEPOS && node->start_line != 0) {
  106|      0|      snprintf(buffer, BUFFER_SIZE, " sourcepos=\"%d:%d-%d:%d\"",
  107|      0|               node->start_line, node->start_column, node->end_line,
  108|      0|               node->end_column);
  109|      0|      cmark_strbuf_puts(xml, buffer);
  110|      0|    }
  111|       |
  112|      0|    literal = false;
  113|       |
  114|      0|    switch (node->type) {
  115|      0|    case CMARK_NODE_DOCUMENT:
  116|      0|      cmark_strbuf_puts(xml, " xmlns=\"http://commonmark.org/xml/1.0\"");
  117|      0|      break;
  118|      0|    case CMARK_NODE_TEXT:
  119|      0|    case CMARK_NODE_CODE:
  120|      0|    case CMARK_NODE_HTML_BLOCK:
  121|      0|    case CMARK_NODE_HTML_INLINE:
  122|      0|      cmark_strbuf_puts(xml, " xml:space=\"preserve\">");
  123|      0|      escape_xml(xml, node->data, node->len);
  124|      0|      cmark_strbuf_puts(xml, "</");
  125|      0|      cmark_strbuf_puts(xml, cmark_node_get_type_string(node));
  126|      0|      literal = true;
  127|      0|      break;
  128|      0|    case CMARK_NODE_LIST:
  129|      0|      switch (cmark_node_get_list_type(node)) {
  130|      0|      case CMARK_ORDERED_LIST:
  131|      0|        cmark_strbuf_puts(xml, " type=\"ordered\"");
  132|      0|        snprintf(buffer, BUFFER_SIZE, " start=\"%d\"",
  133|      0|                 cmark_node_get_list_start(node));
  134|      0|        cmark_strbuf_puts(xml, buffer);
  135|      0|        delim = cmark_node_get_list_delim(node);
  136|      0|        if (delim == CMARK_PAREN_DELIM) {
  137|      0|          cmark_strbuf_puts(xml, " delim=\"paren\"");
  138|      0|        } else if (delim == CMARK_PERIOD_DELIM) {
  139|      0|          cmark_strbuf_puts(xml, " delim=\"period\"");
  140|      0|        }
  141|      0|        break;
  142|      0|      case CMARK_BULLET_LIST:
  143|      0|        cmark_strbuf_puts(xml, " type=\"bullet\"");
  144|      0|        break;
  145|      0|      default:
  146|      0|        break;
  147|      0|      }
  148|      0|      snprintf(buffer, BUFFER_SIZE, " tight=\"%s\"",
  149|      0|               (cmark_node_get_list_tight(node) ? "true" : "false"));
  150|      0|      cmark_strbuf_puts(xml, buffer);
  151|      0|      break;
  152|      0|    case CMARK_NODE_HEADING:
  153|      0|      snprintf(buffer, BUFFER_SIZE, " level=\"%d\"", node->as.heading.level);
  154|      0|      cmark_strbuf_puts(xml, buffer);
  155|      0|      break;
  156|      0|    case CMARK_NODE_CODE_BLOCK:
  157|      0|      if (node->as.code.info) {
  158|      0|        cmark_strbuf_puts(xml, " info=\"");
  159|      0|        escape_xml_str(xml, node->as.code.info);
  160|      0|        cmark_strbuf_putc(xml, '"');
  161|      0|      }
  162|      0|      cmark_strbuf_puts(xml, " xml:space=\"preserve\">");
  163|      0|      escape_xml(xml, node->data, node->len);
  164|      0|      cmark_strbuf_puts(xml, "</");
  165|      0|      cmark_strbuf_puts(xml, cmark_node_get_type_string(node));
  166|      0|      literal = true;
  167|      0|      break;
  168|      0|    case CMARK_NODE_CUSTOM_BLOCK:
  169|      0|    case CMARK_NODE_CUSTOM_INLINE:
  170|      0|      cmark_strbuf_puts(xml, " on_enter=\"");
  171|      0|      escape_xml_str(xml, node->as.custom.on_enter);
  172|      0|      cmark_strbuf_putc(xml, '"');
  173|      0|      cmark_strbuf_puts(xml, " on_exit=\"");
  174|      0|      escape_xml_str(xml, node->as.custom.on_exit);
  175|      0|      cmark_strbuf_putc(xml, '"');
  176|      0|      break;
  177|      0|    case CMARK_NODE_LINK:
  178|      0|    case CMARK_NODE_IMAGE:
  179|      0|      cmark_strbuf_puts(xml, " destination=\"");
  180|      0|      escape_xml_str(xml, node->as.link.url);
  181|      0|      cmark_strbuf_putc(xml, '"');
  182|      0|      if (node->as.link.title) {
  183|      0|        cmark_strbuf_puts(xml, " title=\"");
  184|      0|        escape_xml_str(xml, node->as.link.title);
  185|      0|        cmark_strbuf_putc(xml, '"');
  186|      0|      }
  187|      0|      break;
  188|      0|    default:
  189|      0|      break;
  190|      0|    }
  191|      0|    if (node->first_child) {
  192|      0|      state->indent += 2;
  193|      0|    } else if (!literal) {
  194|      0|      cmark_strbuf_puts(xml, " /");
  195|      0|    }
  196|      0|    cmark_strbuf_puts(xml, ">\n");
  197|       |
  198|      0|  } else if (node->first_child) {
  199|      0|    state->indent -= 2;
  200|      0|    indent(state);
  201|      0|    cmark_strbuf_puts(xml, "</");
  202|      0|    cmark_strbuf_puts(xml, cmark_node_get_type_string(node));
  203|      0|    cmark_strbuf_puts(xml, ">\n");
  204|      0|  }
  205|       |
  206|      0|  return 1;
  207|      0|}
  208|       |
  209|      0|char *cmark_render_xml(cmark_node *root, int options) {
  210|      0|  char *result;
  211|      0|  cmark_strbuf xml = CMARK_BUF_INIT(root->mem);
  212|      0|  cmark_event_type ev_type;
  213|      0|  cmark_node *cur;
  214|      0|  struct render_state state = {&xml, 0};
  215|       |
  216|      0|  cmark_iter *iter = cmark_iter_new(root);
  217|       |
  218|      0|  cmark_strbuf_puts(state.xml, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
  219|      0|  cmark_strbuf_puts(state.xml,
  220|      0|                    "<!DOCTYPE document SYSTEM \"CommonMark.dtd\">\n");
  221|      0|  while ((ev_type = cmark_iter_next(iter)) != CMARK_EVENT_DONE) {
  222|      0|    cur = cmark_iter_get_node(iter);
  223|      0|    S_render_node(cur, ev_type, &state, options);
  224|      0|  }
  225|      0|  result = (char *)cmark_strbuf_detach(&xml);
  226|       |
  227|      0|  cmark_iter_free(iter);
  228|      0|  return result;
  229|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Date/Date+Compare.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public extension Date {
   16|       |
   17|       |	// MARK: - Comparing Close
   18|       |
   19|       |	/// Decides whether a Date is "close by" another one passed in parameter,
   20|       |	/// where "Being close" is measured using a precision argument
   21|       |	/// which is initialized a 300 seconds, or 5 minutes.
   22|       |	///
   23|       |	/// - Parameters:
   24|       |	///   - refDate: reference date compare against to.
   25|       |	///   - precision: The precision of the comparison (default is 5 minutes, or 300 seconds).
   26|       |	/// - Returns: A boolean; true if close by, false otherwise.
   27|      0|	func compareCloseTo(_ refDate: Date, precision: TimeInterval = 300) -> Bool {
   28|      0|		return (abs(timeIntervalSince(refDate)) < precision)
   29|      0|	}
   30|       |
   31|       |	// MARK: - Extendend Compare
   32|       |
   33|       |	/// Compare the date with the rule specified in the `compareType` parameter.
   34|       |	///
   35|       |	/// - Parameter compareType: comparison type.
   36|       |	/// - Returns: `true` if comparison succeded, `false` otherwise
   37|      0|	func compare(_ compareType: DateComparisonType) -> Bool {
   38|      0|		return inDefaultRegion().compare(compareType)
   39|      0|	}
   40|       |
   41|       |	/// Returns a ComparisonResult value that indicates the ordering of two given dates based on
   42|       |	/// their components down to a given unit granularity.
   43|       |	///
   44|       |	/// - parameter date:        date to compare.
   45|       |	/// - parameter granularity: The smallest unit that must, along with all larger units be less for the given dates
   46|       |	/// - returns: `ComparisonResult`
   47|      0|	func compare(toDate refDate: Date, granularity: Calendar.Component) -> ComparisonResult {
   48|      0|		return inDefaultRegion().compare(toDate: refDate.inDefaultRegion(), granularity: granularity)
   49|      0|	}
   50|       |
   51|       |	/// Compares whether the receiver is before/before equal `date` based on their components down to a given unit granularity.
   52|       |	///
   53|       |	/// - Parameters:
   54|       |	///   - refDate: reference date
   55|       |	///   - orEqual: `true` to also check for equality
   56|       |	///   - granularity: smallest unit that must, along with all larger units, be less for the given dates
   57|       |	/// - Returns: Boolean
   58|      0|	func isBeforeDate(_ refDate: Date, orEqual: Bool = false, granularity: Calendar.Component) -> Bool {
   59|      0|		return inDefaultRegion().isBeforeDate(refDate.inDefaultRegion(), orEqual: orEqual, granularity: granularity)
   60|      0|	}
   61|       |
   62|       |	/// Compares whether the receiver is after `date` based on their components down to a given unit granularity.
   63|       |	///
   64|       |	/// - Parameters:
   65|       |	///   - refDate: reference date
   66|       |	///   - orEqual: `true` to also check for equality
   67|       |	///   - granularity: Smallest unit that must, along with all larger units, be greater for the given dates.
   68|       |	/// - Returns: Boolean
   69|      0|	func isAfterDate(_ refDate: Date, orEqual: Bool = false, granularity: Calendar.Component) -> Bool {
   70|      0|		return inDefaultRegion().isAfterDate(refDate.inDefaultRegion(), orEqual: orEqual, granularity: granularity)
   71|      0|	}
   72|       |
   73|       |	/// Returns a value between 0.0 and 1.0 or nil, that is the position of current date between 2 other dates.
   74|       |	///
   75|       |	/// - Parameters:
   76|       |	///   - startDate: range upper bound date
   77|       |	///   - endDate: range lower bound date
   78|       |	/// - Returns: `nil` if current date is not between `startDate` and `endDate`. Otherwise returns position between `startDate` and `endDate`.
   79|      0|	func positionInRange(date startDate: Date, and endDate: Date) -> Double? {
   80|      0|		return inDefaultRegion().positionInRange(date: startDate.inDefaultRegion(), and: endDate.inDefaultRegion())
   81|      0|	}
   82|       |
   83|       |	/// Return true if receiver date is contained in the range specified by two dates.
   84|       |	///
   85|       |	/// - Parameters:
   86|       |	///   - startDate: range upper bound date
   87|       |	///   - endDate: range lower bound date
   88|       |	///   - orEqual: `true` to also check for equality on date and date2
   89|       |	///   - granularity: smallest unit that must, along with all larger units, be greater for the given dates.
   90|       |	/// - Returns: Boolean
   91|      0|	func isInRange(date startDate: Date, and endDate: Date, orEqual: Bool = false, granularity: Calendar.Component = .nanosecond) -> Bool {
   92|      0|        return inDefaultRegion().isInRange(date: startDate.inDefaultRegion(), and: endDate.inDefaultRegion(), orEqual: orEqual, granularity: granularity)
   93|      0|	}
   94|       |
   95|       |	/// Compares equality of two given dates based on their components down to a given unit
   96|       |	/// granularity.
   97|       |	///
   98|       |	/// - parameter date:        date to compare
   99|       |	/// - parameter granularity: The smallest unit that must, along with all larger units, be equal for the given
  100|       |	///         dates to be considered the same.
  101|       |	///
  102|       |	/// - returns: `true` if the dates are the same down to the given granularity, otherwise `false`
  103|      0|	func isInside(date: Date, granularity: Calendar.Component) -> Bool {
  104|      0|		return (compare(toDate: date, granularity: granularity) == .orderedSame)
  105|      0|	}
  106|       |
  107|       |	// MARK: - Date Earlier/Later
  108|       |
  109|       |	/// Return the earlier of two dates, between self and a given date.
  110|       |	///
  111|       |	/// - Parameter date: The date to compare to self
  112|       |	/// - Returns: The date that is earlier
  113|      0|	func earlierDate(_ date: Date) -> Date {
  114|      0|		return timeIntervalSince(date) <= 0 ? self : date
  115|      0|	}
  116|       |
  117|       |	/// Return the later of two dates, between self and a given date.
  118|       |	///
  119|       |	/// - Parameter date: The date to compare to self
  120|       |	/// - Returns: The date that is later
  121|      0|	func laterDate(_ date: Date) -> Date {
  122|      0|		return timeIntervalSince(date) >= 0 ? self : date
  123|      0|	}
  124|       |
  125|       |}
  126|       |
  127|       |extension Date {
  128|       |
  129|       |    /// Returns the difference in the calendar component given (like day, month or year)
  130|       |    /// with respect to the other date as a positive integer
  131|      0|    public func difference(in component: Calendar.Component, from other: Date) -> Int? {
  132|      0|        let (max, min) = orderDate(with: other)
  133|      0|        let result = calendar.dateComponents([component], from: min, to: max)
  134|      0|        return getValue(of: component, from: result)
  135|      0|    }
  136|       |
  137|       |    /// Returns the differences in the calendar components given (like day, month and year)
  138|       |    /// with respect to the other date as dictionary with the calendar component as the key
  139|       |    /// and the diffrence as a positive integer as the value
  140|      0|    public func differences(in components: Set<Calendar.Component>, from other: Date) -> [Calendar.Component: Int] {
  141|      0|        let (max, min) = orderDate(with: other)
  142|      0|        let differenceInDates = calendar.dateComponents(components, from: min, to: max)
  143|      0|        var result = [Calendar.Component: Int]()
  144|      0|        for component in components {
  145|      0|            if let value = getValue(of: component, from: differenceInDates) {
  146|      0|                result[component] = value
  147|      0|            }
  148|      0|        }
  149|      0|        return result
  150|      0|    }
  151|       |
  152|      0|    private func getValue(of component: Calendar.Component, from dateComponents: DateComponents) -> Int? {
  153|      0|        switch component {
  154|      0|        case .era:
  155|      0|            return dateComponents.era
  156|      0|        case .year:
  157|      0|            return dateComponents.year
  158|      0|        case .month:
  159|      0|            return dateComponents.month
  160|      0|        case .day:
  161|      0|            return dateComponents.day
  162|      0|        case .hour:
  163|      0|            return dateComponents.hour
  164|      0|        case .minute:
  165|      0|            return dateComponents.minute
  166|      0|        case .second:
  167|      0|            return dateComponents.second
  168|      0|        case .weekday:
  169|      0|            return dateComponents.weekday
  170|      0|        case .weekdayOrdinal:
  171|      0|            return dateComponents.weekdayOrdinal
  172|      0|        case .quarter:
  173|      0|            return dateComponents.quarter
  174|      0|        case .weekOfMonth:
  175|      0|            return dateComponents.weekOfMonth
  176|      0|        case .weekOfYear:
  177|      0|            return dateComponents.weekOfYear
  178|      0|        case .yearForWeekOfYear:
  179|      0|            return dateComponents.yearForWeekOfYear
  180|      0|        case .nanosecond:
  181|      0|            return dateComponents.nanosecond
  182|      0|        case .calendar, .timeZone:
  183|      0|            return nil
  184|      0|        @unknown default:
  185|      0|            assert(false, "unknown date component")
  186|      0|        }
  187|      0|        return nil
  188|      0|    }
  189|       |
  190|      0|    private func orderDate(with other: Date) -> (Date, Date) {
  191|      0|        let first = self.timeIntervalSince1970
  192|      0|        let second = other.timeIntervalSince1970
  193|      0|
  194|      0|        if first >= second {
  195|      0|            return (self, other)
  196|      0|        }
  197|      0|
  198|      0|        return (other, self)
  199|      0|    }
  200|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Date/Date+Components.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public extension Date {
   16|       |
   17|       |	/// Indicates whether the month is a leap month.
   18|      0|	var isLeapMonth: Bool {
   19|      0|		return inDefaultRegion().isLeapMonth
   20|      0|	}
   21|       |
   22|       |	/// Indicates whether the year is a leap year.
   23|      0|	var isLeapYear: Bool {
   24|      0|		return inDefaultRegion().isLeapYear
   25|      0|	}
   26|       |
   27|       |	/// Julian day is the continuous count of days since the beginning of
   28|       |	/// the Julian Period used primarily by astronomers.
   29|      0|	var julianDay: Double {
   30|      0|		return inDefaultRegion().julianDay
   31|      0|	}
   32|       |
   33|       |	/// The Modified Julian Date (MJD) was introduced by the Smithsonian Astrophysical Observatory
   34|       |	/// in 1957 to record the orbit of Sputnik via an IBM 704 (36-bit machine)
   35|       |	/// and using only 18 bits until August 7, 2576.
   36|      0|	var modifiedJulianDay: Double {
   37|      0|		return inDefaultRegion().modifiedJulianDay
   38|      0|	}
   39|       |
   40|       |	/// Return elapsed time expressed in given components since the current receiver and a reference date.
   41|       |	///
   42|       |	/// - Parameters:
   43|       |	///   - refDate: reference date (`nil` to use current date in the same region of the receiver)
   44|       |	///   - component: time unit to extract.
   45|       |	/// - Returns: value
   46|      0|	func getInterval(toDate: Date?, component: Calendar.Component) -> Int64 {
   47|      0|		return inDefaultRegion().getInterval(toDate: toDate?.inDefaultRegion(), component: component)
   48|      0|	}
   49|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Date/Date+Create.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public extension Date {
   16|       |
   17|       |	/// Return the oldest date in given list.
   18|       |	///
   19|       |	/// - Parameter list: list of dates
   20|       |	/// - Returns: a tuple with the index of the oldest date and its instance.
   21|      0|	static func oldestIn(list: [Date]) -> Date? {
   22|      0|		guard list.count > 0 else { return nil }
   23|      0|		guard list.count > 1 else { return list.first! }
   24|      0|		return list.min(by: {
   25|      0|			return $0 < $1
   26|      0|		})
   27|      0|	}
   28|       |
   29|       |	/// Return the newest date in given list.
   30|       |	///
   31|       |	/// - Parameter list: list of dates
   32|       |	/// - Returns: a tuple with the index of the oldest date and its instance.
   33|      0|	static func newestIn(list: [Date]) -> Date? {
   34|      0|		guard list.count > 0 else { return nil }
   35|      0|		guard list.count > 1 else { return list.first! }
   36|      0|		return list.max(by: {
   37|      0|			return $0 < $1
   38|      0|		})
   39|      0|	}
   40|       |
   41|       |	/// Enumerate dates between two intervals by adding specified time components defined by a function and return an array of dates.
   42|       |	/// `startDate` interval will be the first item of the resulting array.
   43|       |	/// The last item of the array is evaluated automatically and maybe not equal to `endDate`.
   44|       |	///
   45|       |	/// - Parameters:
   46|       |	///   - start: starting date
   47|       |	///   - endDate: ending date
   48|       |	///   - increment: increment function. It get the last generated date and require a valida `DateComponents` instance which define the increment
   49|       |	/// - Returns: array of dates
   50|      0|	static func enumerateDates(from startDate: Date, to endDate: Date, increment: ((Date) -> (DateComponents))) -> [Date] {
   51|      0|		var dates: [Date] = []
   52|      0|		var currentDate = startDate
   53|      0|
   54|      0|		while currentDate <= endDate {
   55|      0|			dates.append(currentDate)
   56|      0|			currentDate = (currentDate + increment(currentDate))
   57|      0|		}
   58|      0|		return dates
   59|      0|	}
   60|       |
   61|       |	/// Enumerate dates between two intervals by adding specified time components and return an array of dates.
   62|       |	/// `startDate` interval will be the first item of the resulting array.
   63|       |	/// The last item of the array is evaluated automatically and maybe not equal to `endDate`.
   64|       |	///
   65|       |	/// - Parameters:
   66|       |	///   - start: starting date
   67|       |	///   - endDate: ending date
   68|       |	///   - increment: components to add
   69|       |	/// - Returns: array of dates
   70|      0|	static func enumerateDates(from startDate: Date, to endDate: Date, increment: DateComponents) -> [Date] {
   71|      0|		return Date.enumerateDates(from: startDate, to: endDate, increment: { _ in
   72|      0|			return increment
   73|      0|		})
   74|      0|	}
   75|       |
   76|       |	/// Round a given date time to the passed style (off|up|down).
   77|       |	///
   78|       |	/// - Parameter style: rounding mode.
   79|       |	/// - Returns: rounded date
   80|      0|	func dateRoundedAt(at style: RoundDateMode) -> Date {
   81|      0|		return inDefaultRegion().dateRoundedAt(style).date
   82|      0|	}
   83|       |
   84|       |	/// Returns a new DateInRegion that is initialized at the start of a specified unit of time.
   85|       |	///
   86|       |	/// - Parameter unit: time unit value.
   87|       |	/// - Returns: instance at the beginning of the time unit; `self` if fails.
   88|      0|	func dateAtStartOf(_ unit: Calendar.Component) -> Date {
   89|      0|		return inDefaultRegion().dateAtStartOf(unit).date
   90|      0|	}
   91|       |
   92|       |	/// Return a new DateInRegion that is initialized at the start of the specified components
   93|       |	/// executed in order.
   94|       |	///
   95|       |	/// - Parameter units: sequence of transformations as time unit components
   96|       |	/// - Returns: new date at the beginning of the passed components, intermediate results if fails.
   97|      0|	func dateAtStartOf(_ units: [Calendar.Component]) -> Date {
   98|      0|		return units.reduce(self) { (currentDate, currentUnit) -> Date in
   99|      0|			return currentDate.dateAtStartOf(currentUnit)
  100|      0|		}
  101|      0|	}
  102|       |
  103|       |	/// Returns a new Moment that is initialized at the end of a specified unit of time.
  104|       |	///
  105|       |	/// - parameter unit: A TimeUnit value.
  106|       |	///
  107|       |	/// - returns: A new Moment instance.
  108|      0|	func dateAtEndOf(_ unit: Calendar.Component) -> Date {
  109|      0|		return inDefaultRegion().dateAtEndOf(unit).date
  110|      0|	}
  111|       |
  112|       |	/// Return a new DateInRegion that is initialized at the end of the specified components
  113|       |	/// executed in order.
  114|       |	///
  115|       |	/// - Parameter units: sequence of transformations as time unit components
  116|       |	/// - Returns: new date at the end of the passed components, intermediate results if fails.
  117|      0|	func dateAtEndOf(_ units: [Calendar.Component]) -> Date {
  118|      0|		return units.reduce(self) { (currentDate, currentUnit) -> Date in
  119|      0|			return currentDate.dateAtEndOf(currentUnit)
  120|      0|		}
  121|      0|	}
  122|       |
  123|       |	/// Create a new date by altering specified components of the receiver.
  124|       |	///
  125|       |	/// - Parameter components: components to alter with their new values.
  126|       |	/// - Returns: new altered `DateInRegion` instance
  127|      0|	func dateBySet(_ components: [Calendar.Component: Int]) -> Date? {
  128|      0|		return DateInRegion(self, region: SwiftDate.defaultRegion).dateBySet(components)?.date
  129|      0|	}
  130|       |
  131|       |	/// Create a new date by altering specified time components.
  132|       |	///
  133|       |	/// - Parameters:
  134|       |	///   - hour: hour to set (`nil` to leave it unaltered)
  135|       |	///   - min: min to set (`nil` to leave it unaltered)
  136|       |	///   - secs: sec to set (`nil` to leave it unaltered)
  137|       |	///   - ms: milliseconds to set (`nil` to leave it unaltered)
  138|       |	///   - options: options for calculation
  139|       |	/// - Returns: new altered `DateInRegion` instance
  140|      0|	func dateBySet(hour: Int?, min: Int?, secs: Int?, ms: Int? = nil, options: TimeCalculationOptions = TimeCalculationOptions()) -> Date? {
  141|      0|		let srcDate = DateInRegion(self, region: SwiftDate.defaultRegion)
  142|      0|		return srcDate.dateBySet(hour: hour, min: min, secs: secs, ms: ms, options: options)?.date
  143|      0|	}
  144|       |
  145|       |	/// Creates a new instance by truncating the components
  146|       |	///
  147|       |	/// - Parameter components: components to truncate.
  148|       |	/// - Returns: new date with truncated components.
  149|      0|	func dateTruncated(_ components: [Calendar.Component]) -> Date? {
  150|      0|		return DateInRegion(self, region: SwiftDate.defaultRegion).dateTruncated(at: components)?.date
  151|      0|	}
  152|       |
  153|       |	/// Creates a new instance by truncating the components starting from given components down the granurality.
  154|       |	///
  155|       |	/// - Parameter component: The component to be truncated from.
  156|       |	/// - Returns: new date with truncated components.
  157|      0|	func dateTruncated(from component: Calendar.Component) -> Date? {
  158|      0|		return DateInRegion(self, region: SwiftDate.defaultRegion).dateTruncated(from: component)?.date
  159|      0|	}
  160|       |
  161|       |	/// Offset a date by n calendar components.
  162|       |	/// Note: This operation can be functionally chained.
  163|       |	///
  164|       |	/// - Parameters:
  165|       |	///   - count: value of the offset.
  166|       |	///   - component: component to offset.
  167|       |	/// - Returns: new altered date.
  168|      0|	func dateByAdding(_ count: Int, _ component: Calendar.Component) -> DateInRegion {
  169|      0|		return DateInRegion(self, region: SwiftDate.defaultRegion).dateByAdding(count, component)
  170|      0|	}
  171|       |
  172|       |	/// Return related date starting from the receiver attributes.
  173|       |	///
  174|       |	/// - Parameter type: related date to obtain.
  175|       |	/// - Returns: instance of the related date.
  176|      0|	func dateAt(_ type: DateRelatedType) -> Date {
  177|      0|		return inDefaultRegion().dateAt(type).date
  178|      0|	}
  179|       |
  180|       |	/// Create a new date at now and extract the related date using passed rule type.
  181|       |	///
  182|       |	/// - Parameter type: related date to obtain.
  183|       |	/// - Returns: instance of the related date.
  184|      0|	static func nowAt(_ type: DateRelatedType) -> Date {
  185|      0|		return Date().dateAt(type)
  186|      0|	}
  187|       |
  188|       |	/// Return the dates for a specific weekday inside given month of specified year.
  189|       |	/// Ie. get me all the saturdays of Feb 2018.
  190|       |	/// NOTE: Values are returned in order.
  191|       |	///
  192|       |	/// - Parameters:
  193|       |	///   - weekday: weekday target.
  194|       |	///   - month: month target.
  195|       |	///   - year: year target.
  196|       |	///   - region: region target, omit to use `SwiftDate.defaultRegion`
  197|       |	/// - Returns: Ordered list of the dates for given weekday into given month.
  198|       |	static func datesForWeekday(_ weekday: WeekDay, inMonth month: Int, ofYear year: Int,
  199|      0|									   region: Region = SwiftDate.defaultRegion) -> [Date] {
  200|      0|		let fromDate = DateInRegion(Date(year: year, month: month, day: 1, hour: 0, minute: 0), region: region)
  201|      0|		let toDate = fromDate.dateAt(.endOfMonth)
  202|      0|		return DateInRegion.datesForWeekday(weekday, from: fromDate, to: toDate, region: region).map { $0.date }
  203|      0|	}
  204|       |
  205|       |	/// Return the dates for a specific weekday inside a specified date range.
  206|       |	/// NOTE: Values are returned in order.
  207|       |	///
  208|       |	/// - Parameters:
  209|       |	///   - weekday: weekday target.
  210|       |	///   - startDate: from date of the range.
  211|       |	///   - endDate: to date of the range.
  212|       |	///   - region: region target, omit to use `SwiftDate.defaultRegion`
  213|       |	/// - Returns: Ordered list of the dates for given weekday in passed range.
  214|       |	static func datesForWeekday(_ weekday: WeekDay, from startDate: Date, to endDate: Date,
  215|      0|									   region: Region = SwiftDate.defaultRegion) -> [Date] {
  216|      0|		let fromDate = DateInRegion(startDate, region: region)
  217|      0|		let toDate = DateInRegion(endDate, region: region)
  218|      0|		return DateInRegion.datesForWeekday(weekday, from: fromDate, to: toDate, region: region).map { $0.date }
  219|      0|	}
  220|       |
  221|       |    /// Returns the date at the given week number and week day preserving smaller components (hour, minute, seconds)
  222|       |    ///
  223|       |    /// For example: to get the third friday of next month
  224|       |    ///         let today = DateInRegion()
  225|       |    ///         let result = today.dateAt(weekdayOrdinal: 3, weekday: .friday, monthNumber: today.month + 1)
  226|       |    ///
  227|       |    /// - Parameters:
  228|       |    ///     - weekdayOrdinal: the week number (by set position in a recurrence rule)
  229|       |    ///     - weekday: WeekDay
  230|       |    ///     - monthNumber: a number from 1 to 12 representing the month, optional parameter
  231|       |    ///     - yearNumber: a number representing the year, optional parameter
  232|       |    /// - Returns: new date created with the given parameters
  233|       |    func dateAt(weekdayOrdinal: Int, weekday: WeekDay, monthNumber: Int? = nil,
  234|      0|                yearNumber: Int? = nil) -> Date {
  235|      0|        let date = DateInRegion(self, region: region)
  236|      0|        return date.dateAt(weekdayOrdinal: weekdayOrdinal, weekday: weekday, monthNumber: monthNumber, yearNumber: yearNumber).date
  237|      0|    }
  238|       |
  239|       |    /// Returns the next weekday preserving smaller components (hour, minute, seconds)
  240|       |    ///
  241|       |    /// - Parameters:
  242|       |    ///   - weekday: weekday to get.
  243|       |    ///   - region: region target, omit to use `SwiftDate.defaultRegion`
  244|       |    /// - Returns: `Date`
  245|      0|    func nextWeekday(_ weekday: WeekDay, region: Region = SwiftDate.defaultRegion) -> Date {
  246|      0|        let date = DateInRegion(self, region: region)
  247|      0|        return date.nextWeekday(weekday).date
  248|      0|    }
  249|       |
  250|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Date/Date+Math.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |/// Subtracts two dates and returns the relative components from `lhs` to `rhs`.
   16|       |/// Follows this mathematical pattern:
   17|       |///     let difference = lhs - rhs
   18|       |///     rhs + difference = lhs
   19|      0|public func - (lhs: Date, rhs: Date) -> DateComponents {
   20|      0|	return SwiftDate.defaultRegion.calendar.dateComponents(DateComponents.allComponentsSet, from: rhs, to: lhs)
   21|      0|}
   22|       |
   23|       |/// Adds date components to a date and returns a new date.
   24|      0|public func + (lhs: Date, rhs: DateComponents) -> Date {
   25|      0|	return rhs.from(lhs)!
   26|      0|}
   27|       |
   28|       |/// Adds date components to a date and returns a new date.
   29|      0|public func + (lhs: DateComponents, rhs: Date) -> Date {
   30|      0|	return (rhs + lhs)
   31|      0|}
   32|       |
   33|       |/// Subtracts date components from a date and returns a new date.
   34|      0|public func - (lhs: Date, rhs: DateComponents) -> Date {
   35|      0|	return (lhs + (-rhs))
   36|      0|}
   37|       |
   38|      0|public func + (lhs: Date, rhs: TimeInterval) -> Date {
   39|      0|	return lhs.addingTimeInterval(rhs)
   40|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Date/Date.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |#if os(Linux)
   16|       |
   17|       |#else
   18|       |internal enum AssociatedKeys: String {
   19|       |	case customDateFormatter = "SwiftDate.CustomDateFormatter"
   20|       |}
   21|       |#endif
   22|       |
   23|       |extension Date: DateRepresentable {
   24|       |
   25|       |	/// Just return itself to be compliant with `DateRepresentable` protocol.
   26|      0|	public var date: Date { return self }
   27|       |
   28|       |	/// For absolute Date object the default region is obtained from the global `defaultRegion` variable.
   29|      0|	public var region: Region {
   30|      0|		return SwiftDate.defaultRegion
   31|      0|	}
   32|       |
   33|       |	#if os(Linux)
   34|       |	public var customFormatter: DateFormatter? {
   35|       |		get {
   36|       |			debugPrint("Not supported on Linux")
   37|       |			return nil
   38|       |		}
   39|       |		set { debugPrint("Not supported on Linux") }
   40|       |	}
   41|       |	#else
   42|       |	/// Assign a custom formatter if you need a special behaviour during formatting of the object.
   43|       |	/// Usually you will not need to do it, SwiftDate uses the local thread date formatter in order to
   44|       |	/// optimize the formatting process. By default is `nil`.
   45|       |	public var customFormatter: DateFormatter? {
   46|      0|		get {
   47|      0|			let formatter: DateFormatter? = getAssociatedValue(key: AssociatedKeys.customDateFormatter.rawValue, object: self as AnyObject)
   48|      0|			return formatter
   49|      0|		}
   50|      0|		set {
   51|      0|			set(associatedValue: newValue, key: AssociatedKeys.customDateFormatter.rawValue, object: self as AnyObject)
   52|      0|		}
   53|       |	}
   54|       |	#endif
   55|       |
   56|       |	/// Extract the date components.
   57|      0|	public var dateComponents: DateComponents {
   58|      0|		return region.calendar.dateComponents(DateComponents.allComponentsSet, from: self)
   59|      0|	}
   60|       |
   61|       |	/// Initialize a new date object from string expressed in given region.
   62|       |	///
   63|       |	/// - Parameters:
   64|       |	///   - string: date expressed as string.
   65|       |	///   - format: format of the date (`nil` uses provided list of auto formats patterns.
   66|       |	///				Pass it if you can in order to optimize the parse task).
   67|       |	///   - region: region in which the date is expressed. `nil` uses the `SwiftDate.defaultRegion`.
   68|      0|	public init?(_ string: String, format: String? = nil, region: Region = SwiftDate.defaultRegion) {
   69|      0|		guard let dateInRegion = DateInRegion(string, format: format, region: region) else { return nil }
   70|      0|		self = dateInRegion.date
   71|      0|	}
   72|       |
   73|       |	/// Initialize a new date from the number of seconds passed since Unix Epoch.
   74|       |	///
   75|       |	/// - Parameter interval: seconds
   76|       |
   77|       |	/// Initialize a new date from the number of seconds passed since Unix Epoch.
   78|       |	///
   79|       |	/// - Parameters:
   80|       |	///   - interval: seconds from Unix epoch time.
   81|       |	///   - region: region in which the date, `nil` uses the default region at UTC timezone
   82|      0|	public init(seconds interval: TimeInterval, region: Region = Region.UTC) {
   83|      0|		self = DateInRegion(seconds: interval, region: region).date
   84|      0|	}
   85|       |
   86|       |	/// Initialize a new date corresponding to the number of milliseconds since the Unix Epoch.
   87|       |	///
   88|       |	/// - Parameters:
   89|       |	///   - interval: seconds since the Unix Epoch timestamp.
   90|       |	///   - region: region in which the date must be expressed, `nil` uses the default region at UTC timezone
   91|      0|	public init(milliseconds interval: Int, region: Region = Region.UTC) {
   92|      0|		self = DateInRegion(milliseconds: interval, region: region).date
   93|      0|	}
   94|       |
   95|       |	/// Initialize a new date with the opportunity to configure single date components via builder pattern.
   96|       |	/// Date is therfore expressed in passed region (`DateComponents`'s `timezone`,`calendar` and `locale` are ignored
   97|       |	/// and overwritten by the region if not `nil`).
   98|       |	///
   99|       |	/// - Parameters:
  100|       |	///   - configuration: configuration callback
  101|       |	///   - region: region in which the date is expressed. Ignore to use `SwiftDate.defaultRegion`, `nil` to use `DateComponents` data.
  102|      0|	public init?(components configuration: ((inout DateComponents) -> Void), region: Region? = SwiftDate.defaultRegion) {
  103|      0|		guard let date = DateInRegion(components: configuration, region: region)?.date else { return nil }
  104|      0|		self = date
  105|      0|	}
  106|       |
  107|       |	/// Initialize a new date with given components.
  108|       |	///
  109|       |	/// - Parameters:
  110|       |	///   - components: components of the date.
  111|       |	///   - region: region in which the date is expressed.
  112|       |	///				Ignore to use `SwiftDate.defaultRegion`, `nil` to use `DateComponents` data.
  113|      0|	public init?(components: DateComponents, region: Region?) {
  114|      0|		guard let date = DateInRegion(components: components, region: region)?.date else { return nil }
  115|      0|		self = date
  116|      0|	}
  117|       |
  118|       |	/// Initialize a new date with given components.
  119|      0|	public init(year: Int, month: Int, day: Int, hour: Int, minute: Int, second: Int = 0, nanosecond: Int = 0, region: Region = SwiftDate.defaultRegion) {
  120|      0|		var components = DateComponents()
  121|      0|		components.year = year
  122|      0|		components.month = month
  123|      0|		components.day = day
  124|      0|		components.hour = hour
  125|      0|		components.minute = minute
  126|      0|		components.second = second
  127|      0|		components.nanosecond = nanosecond
  128|      0|		components.timeZone = region.timeZone
  129|      0|		components.calendar = region.calendar
  130|      0|		self = region.calendar.date(from: components)!
  131|      0|	}
  132|       |
  133|       |	/// Express given absolute date in the context of the default region.
  134|       |	///
  135|       |	/// - Returns: `DateInRegion`
  136|      0|	public func inDefaultRegion() -> DateInRegion {
  137|      0|		return DateInRegion(self, region: SwiftDate.defaultRegion)
  138|      0|	}
  139|       |
  140|       |	/// Express given absolute date in the context of passed region.
  141|       |	///
  142|       |	/// - Parameter region: destination region.
  143|       |	/// - Returns: `DateInRegion`
  144|      0|	public func `in`(region: Region) -> DateInRegion {
  145|      0|		return DateInRegion(self, region: region)
  146|      0|	}
  147|       |
  148|       |	/// Return a date in the distant past.
  149|       |	///
  150|       |	/// - Returns: Date instance.
  151|      0|	public static func past() -> Date {
  152|      0|		return Date.distantPast
  153|      0|	}
  154|       |
  155|       |	/// Return a date in the distant future.
  156|       |	///
  157|       |	/// - Returns: Date instance.
  158|      0|	public static func future() -> Date {
  159|      0|		return Date.distantFuture
  160|      0|	}
  161|       |
  162|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/DateInRegion/DateInRegion+Compare.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |// MARK: - Comparing DateInRegion
   16|       |
   17|      0|public func == (lhs: DateInRegion, rhs: DateInRegion) -> Bool {
   18|      0|	return (lhs.date.timeIntervalSince1970 == rhs.date.timeIntervalSince1970)
   19|      0|}
   20|       |
   21|      0|public func <= (lhs: DateInRegion, rhs: DateInRegion) -> Bool {
   22|      0|	let result = lhs.date.compare(rhs.date)
   23|      0|	return (result == .orderedAscending || result == .orderedSame)
   24|      0|}
   25|       |
   26|      0|public func >= (lhs: DateInRegion, rhs: DateInRegion) -> Bool {
   27|      0|	let result = lhs.date.compare(rhs.date)
   28|      0|	return (result == .orderedDescending || result == .orderedSame)
   29|      0|}
   30|       |
   31|      0|public func < (lhs: DateInRegion, rhs: DateInRegion) -> Bool {
   32|      0|	return lhs.date.compare(rhs.date) == .orderedAscending
   33|      0|}
   34|       |
   35|      0|public func > (lhs: DateInRegion, rhs: DateInRegion) -> Bool {
   36|      0|	return lhs.date.compare(rhs.date) == .orderedDescending
   37|      0|}
   38|       |
   39|       |// The type of comparison to do against today's date or with the suplied date.
   40|       |///
   41|       |/// - isToday: hecks if date today.
   42|       |/// - isTomorrow: Checks if date is tomorrow.
   43|       |/// - isYesterday: Checks if date is yesterday.
   44|       |/// - isSameDay: Compares date days
   45|       |/// - isThisWeek: Checks if date is in this week.
   46|       |/// - isNextWeek: Checks if date is in next week.
   47|       |/// - isLastWeek: Checks if date is in last week.
   48|       |/// - isSameWeek: Compares date weeks
   49|       |/// - isThisMonth: Checks if date is in this month.
   50|       |/// - isNextMonth: Checks if date is in next month.
   51|       |/// - isLastMonth: Checks if date is in last month.
   52|       |/// - isSameMonth: Compares date months
   53|       |/// - isThisYear: Checks if date is in this year.
   54|       |/// - isNextYear: Checks if date is in next year.
   55|       |/// - isLastYear: Checks if date is in last year.
   56|       |/// - isSameYear: Compare date years
   57|       |/// - isInTheFuture: Checks if it's a future date
   58|       |/// - isInThePast: Checks if the date has passed
   59|       |/// - isEarlier: Checks if earlier than date
   60|       |/// - isLater: Checks if later than date
   61|       |/// - isWeekday: Checks if it's a weekday
   62|       |/// - isWeekend: Checks if it's a weekend
   63|       |/// - isInDST: Indicates whether the represented date uses daylight saving time.
   64|       |/// - isMorning: Return true if date is in the morning (>=5 - <12)
   65|       |/// - isAfternoon: Return true if date is in the afternoon (>=12 - <17)
   66|       |/// - isEvening: Return true if date is in the morning (>=17 - <21)
   67|       |/// - isNight: Return true if date is in the morning (>=21 - <5)
   68|       |public enum DateComparisonType {
   69|       |
   70|       |	// Days
   71|       |	case isToday
   72|       |	case isTomorrow
   73|       |	case isYesterday
   74|       |	case isSameDay(_ : DateRepresentable)
   75|       |
   76|       |	// Weeks
   77|       |	case isThisWeek
   78|       |	case isNextWeek
   79|       |	case isLastWeek
   80|       |	case isSameWeek(_: DateRepresentable)
   81|       |
   82|       |	// Months
   83|       |	case isThisMonth
   84|       |	case isNextMonth
   85|       |	case isLastMonth
   86|       |	case isSameMonth(_: DateRepresentable)
   87|       |
   88|       |	// Years
   89|       |	case isThisYear
   90|       |	case isNextYear
   91|       |	case isLastYear
   92|       |	case isSameYear(_: DateRepresentable)
   93|       |
   94|       |	// Relative Time
   95|       |	case isInTheFuture
   96|       |	case isInThePast
   97|       |	case isEarlier(than: DateRepresentable)
   98|       |	case isLater(than: DateRepresentable)
   99|       |	case isWeekday
  100|       |	case isWeekend
  101|       |
  102|       |	// Day time
  103|       |	case isMorning
  104|       |	case isAfternoon
  105|       |	case isEvening
  106|       |	case isNight
  107|       |
  108|       |	// TZ
  109|       |	case isInDST
  110|       |}
  111|       |
  112|       |public extension DateInRegion {
  113|       |
  114|       |	/// Decides whether a DATE is "close by" another one passed in parameter,
  115|       |	/// where "Being close" is measured using a precision argument
  116|       |	/// which is initialized a 300 seconds, or 5 minutes.
  117|       |	///
  118|       |	/// - Parameters:
  119|       |	///   - refDate: reference date compare against to.
  120|       |	///   - precision: The precision of the comparison (default is 5 minutes, or 300 seconds).
  121|       |	/// - Returns: A boolean; true if close by, false otherwise.
  122|      0|	func compareCloseTo(_ refDate: DateInRegion, precision: TimeInterval = 300) -> Bool {
  123|      0|		return (abs(date.timeIntervalSince(refDate.date)) <= precision)
  124|      0|	}
  125|       |
  126|       |	/// Compare the date with the rule specified in the `compareType` parameter.
  127|       |	///
  128|       |	/// - Parameter compareType: comparison type.
  129|       |	/// - Returns: `true` if comparison succeded, `false` otherwise
  130|      0|	func compare(_ compareType: DateComparisonType) -> Bool {
  131|      0|		switch compareType {
  132|      0|		case .isToday:
  133|      0|			return compare(.isSameDay(region.nowInThisRegion()))
  134|      0|
  135|      0|		case .isTomorrow:
  136|      0|			let tomorrow = DateInRegion(region: region).dateByAdding(1, .day)
  137|      0|			return compare(.isSameDay(tomorrow))
  138|      0|
  139|      0|		case .isYesterday:
  140|      0|			let yesterday = DateInRegion(region: region).dateByAdding(-1, .day)
  141|      0|			return compare(.isSameDay(yesterday))
  142|      0|
  143|      0|		case .isSameDay(let refDate):
  144|      0|			return calendar.isDate(date, inSameDayAs: refDate.date)
  145|      0|
  146|      0|		case .isThisWeek:
  147|      0|			return compare(.isSameWeek(region.nowInThisRegion()))
  148|      0|
  149|      0|		case .isNextWeek:
  150|      0|			let nextWeek = region.nowInThisRegion().dateByAdding(1, .weekOfYear)
  151|      0|			return compare(.isSameWeek(nextWeek))
  152|      0|
  153|      0|		case .isLastWeek:
  154|      0|			let lastWeek = region.nowInThisRegion().dateByAdding(-1, .weekOfYear)
  155|      0|			return compare(.isSameWeek(lastWeek))
  156|      0|
  157|      0|		case .isSameWeek(let refDate):
  158|      0|			guard weekOfYear == refDate.weekOfYear else {
  159|      0|				return false
  160|      0|			}
  161|      0|			// Ensure time interval is under 1 week
  162|      0|			return (abs(date.timeIntervalSince(refDate.date)) < 1.weeks.timeInterval)
  163|      0|
  164|      0|		case .isThisMonth:
  165|      0|			return compare(.isSameMonth(region.nowInThisRegion()))
  166|      0|
  167|      0|		case .isNextMonth:
  168|      0|			let nextMonth = region.nowInThisRegion().dateByAdding(1, .month)
  169|      0|			return compare(.isSameMonth(nextMonth))
  170|      0|
  171|      0|		case .isLastMonth:
  172|      0|			let lastMonth = region.nowInThisRegion().dateByAdding(-1, .month)
  173|      0|			return compare(.isSameMonth(lastMonth))
  174|      0|
  175|      0|		case .isSameMonth(let refDate):
  176|      0|			return (year == refDate.year) && (month == refDate.month)
  177|      0|
  178|      0|		case .isThisYear:
  179|      0|			return compare(.isSameYear(region.nowInThisRegion()))
  180|      0|
  181|      0|		case .isNextYear:
  182|      0|			let nextYear = region.nowInThisRegion().dateByAdding(1, .year)
  183|      0|			return compare(.isSameYear(nextYear))
  184|      0|
  185|      0|		case .isLastYear:
  186|      0|			let lastYear = region.nowInThisRegion().dateByAdding(-1, .year)
  187|      0|			return compare(.isSameYear(lastYear))
  188|      0|
  189|      0|		case .isSameYear(let refDate):
  190|      0|			return (year == refDate.year)
  191|      0|
  192|      0|		case .isInTheFuture:
  193|      0|			return compare(.isLater(than: region.nowInThisRegion()))
  194|      0|
  195|      0|		case .isInThePast:
  196|      0|			return compare(.isEarlier(than: region.nowInThisRegion()))
  197|      0|
  198|      0|		case .isEarlier(let refDate):
  199|      0|			return ((date as NSDate).earlierDate(refDate.date) == date)
  200|      0|
  201|      0|		case .isLater(let refDate):
  202|      0|			return ((date as NSDate).laterDate(refDate.date) == date)
  203|      0|
  204|      0|		case .isWeekday:
  205|      0|			return !compare(.isWeekend)
  206|      0|
  207|      0|		case .isWeekend:
  208|      0|			let range = calendar.maximumRange(of: Calendar.Component.weekday)!
  209|      0|			return (weekday == range.lowerBound || weekday == range.upperBound - range.lowerBound)
  210|      0|
  211|      0|		case .isInDST:
  212|      0|			return region.timeZone.isDaylightSavingTime(for: date)
  213|      0|
  214|      0|		case .isMorning:
  215|      0|			return (hour >= 5 && hour < 12)
  216|      0|
  217|      0|		case .isAfternoon:
  218|      0|			return (hour >= 12 && hour < 17)
  219|      0|
  220|      0|		case .isEvening:
  221|      0|			return (hour >= 17 && hour < 21)
  222|      0|
  223|      0|		case .isNight:
  224|      0|			return (hour >= 21 || hour < 5)
  225|      0|
  226|      0|		}
  227|      0|	}
  228|       |
  229|       |	/// Returns a ComparisonResult value that indicates the ordering of two given dates based on
  230|       |	/// their components down to a given unit granularity.
  231|       |	///
  232|       |	/// - parameter date:        date to compare.
  233|       |	/// - parameter granularity: The smallest unit that must, along with all larger units
  234|       |	/// - returns: `ComparisonResult`
  235|      0|	func compare(toDate refDate: DateInRegion, granularity: Calendar.Component) -> ComparisonResult {
  236|      0|		switch granularity {
  237|      0|		case .nanosecond:
  238|      0|			// There is a possible rounding error using Calendar to compare two dates below the minute granularity
  239|      0|			// So we've added this trick and use standard Date compare which return correct results in this case
  240|      0|			// https://github.com/malcommac/SwiftDate/issues/346
  241|      0|			return date.compare(refDate.date)
  242|      0|		default:
  243|      0|			return region.calendar.compare(date, to: refDate.date, toGranularity: granularity)
  244|      0|		}
  245|      0|	}
  246|       |
  247|       |	/// Compares whether the receiver is before/before equal `date` based on their components down to a given unit granularity.
  248|       |	///
  249|       |	/// - Parameters:
  250|       |	///   - refDate: reference date
  251|       |	///   - orEqual: `true` to also check for equality
  252|       |	///   - granularity: smallest unit that must, along with all larger units, be less for the given dates
  253|       |	/// - Returns: Boolean
  254|      0|	func isBeforeDate(_ date: DateInRegion, orEqual: Bool = false, granularity: Calendar.Component) -> Bool {
  255|      0|		let result = compare(toDate: date, granularity: granularity)
  256|      0|		return (orEqual ? (result == .orderedSame || result == .orderedAscending) : result == .orderedAscending)
  257|      0|	}
  258|       |
  259|       |	/// Compares whether the receiver is after `date` based on their components down to a given unit granularity.
  260|       |	///
  261|       |	/// - Parameters:
  262|       |	///   - refDate: reference date
  263|       |	///   - orEqual: `true` to also check for equality
  264|       |	///   - granularity: Smallest unit that must, along with all larger units, be greater for the given dates.
  265|       |	/// - Returns: Boolean
  266|      0|	func isAfterDate(_ refDate: DateInRegion, orEqual: Bool = false, granularity: Calendar.Component) -> Bool {
  267|      0|		let result = compare(toDate: refDate, granularity: granularity)
  268|      0|		return (orEqual ? (result == .orderedSame || result == .orderedDescending) : result == .orderedDescending)
  269|      0|	}
  270|       |
  271|       |	/// Compares equality of two given dates based on their components down to a given unit
  272|       |	/// granularity.
  273|       |	///
  274|       |	/// - parameter date:        date to compare
  275|       |	/// - parameter granularity: The smallest unit that must, along with all larger units, be equal for the given
  276|       |	///         dates to be considered the same.
  277|       |	///
  278|       |	/// - returns: `true` if the dates are the same down to the given granularity, otherwise `false`
  279|      0|	func isInside(date: DateInRegion, granularity: Calendar.Component) -> Bool {
  280|      0|		return (compare(toDate: date, granularity: granularity) == .orderedSame)
  281|      0|	}
  282|       |
  283|       |	/// Returns a value between 0.0 and 1.0 or nil, that is the position of current date between 2 other dates.
  284|       |	///
  285|       |	/// - Parameters:
  286|       |	///   - startDate: range upper bound date
  287|       |	///   - endDate: range lower bound date
  288|       |	/// - Returns: `nil` if current date is not between `startDate` and `endDate`. Otherwise returns position between `startDate` and `endDate`.
  289|      0|	func positionInRange(date startDate: DateInRegion, and endDate: DateInRegion) -> Double? {
  290|      0|		let diffCurrentDateAndStartDate = self - startDate
  291|      0|		guard diffCurrentDateAndStartDate >= 0 else {
  292|      0|			return nil
  293|      0|		}
  294|      0|		let diffEndDateAndStartDate = endDate - startDate
  295|      0|		guard diffEndDateAndStartDate > 0, diffCurrentDateAndStartDate <= diffEndDateAndStartDate else {
  296|      0|			return nil
  297|      0|		}
  298|      0|		return diffCurrentDateAndStartDate / diffEndDateAndStartDate
  299|      0|	}
  300|       |
  301|       |	/// Return `true` if receiver data is contained in the range specified by two dates.
  302|       |	///
  303|       |	/// - Parameters:
  304|       |	///   - startDate: range upper bound date
  305|       |	///   - endDate: range lower bound date
  306|       |	///   - orEqual: `true` to also check for equality on date and date2, default is `true`
  307|       |	///   - granularity: smallest unit that must, along with all larger units, be greater
  308|       |	/// - Returns: Boolean
  309|      0|	func isInRange(date startDate: DateInRegion, and endDate: DateInRegion, orEqual: Bool = true, granularity: Calendar.Component = .nanosecond) -> Bool {
  310|      0|		return isAfterDate(startDate, orEqual: orEqual, granularity: granularity) && isBeforeDate(endDate, orEqual: orEqual, granularity: granularity)
  311|      0|	}
  312|       |
  313|       |	// MARK: - Date Earlier/Later
  314|       |
  315|       |	/// Return the earlier of two dates, between self and a given date.
  316|       |	///
  317|       |	/// - Parameter date: The date to compare to self
  318|       |	/// - Returns: The date that is earlier
  319|      0|	func earlierDate(_ date: DateInRegion) -> DateInRegion {
  320|      0|		return self.date.timeIntervalSince(date.date) <= 0 ? self : date
  321|      0|	}
  322|       |
  323|       |	/// Return the later of two dates, between self and a given date.
  324|       |	///
  325|       |	/// - Parameter date: The date to compare to self
  326|       |	/// - Returns: The date that is later
  327|      0|	func laterDate(_ date: DateInRegion) -> DateInRegion {
  328|      0|		return self.date.timeIntervalSince(date.date) >= 0 ? self : date
  329|      0|	}
  330|       |
  331|       |    /// Returns the difference in the calendar component given (like day, month or year)
  332|       |    /// with respect to the other date as a positive integer
  333|      0|    func difference(in component: Calendar.Component, from other: DateInRegion) -> Int? {
  334|      0|        return self.date.difference(in: component, from: other.date)
  335|      0|    }
  336|       |
  337|       |    /// Returns the differences in the calendar components given (like day, month and year)
  338|       |    /// with respect to the other date as dictionary with the calendar component as the key
  339|       |    /// and the diffrence as a positive integer as the value
  340|      0|    func differences(in components: Set<Calendar.Component>, from other: DateInRegion) -> [Calendar.Component: Int] {
  341|      0|        return self.date.differences(in: components, from: other.date)
  342|      0|    }
  343|       |
  344|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/DateInRegion/DateInRegion+Components.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public extension DateInRegion {
   16|       |
   17|       |	/// Indicates whether the month is a leap month.
   18|      0|	var isLeapMonth: Bool {
   19|      0|		let calendar = region.calendar
   20|      0|		// Library function for leap contains a bug for Gregorian calendars, implemented workaround
   21|      0|		if calendar.identifier == Calendar.Identifier.gregorian && year > 1582 {
   22|      0|			guard let range: Range<Int> = calendar.range(of: .day, in: .month, for: date) else {
   23|      0|				return false
   24|      0|			}
   25|      0|			return ((range.upperBound - range.lowerBound) == 29)
   26|      0|		}
   27|      0|		// For other calendars:
   28|      0|		return calendar.dateComponents([.day, .month, .year], from: date).isLeapMonth!
   29|      0|	}
   30|       |
   31|       |	/// Indicates whether the year is a leap year.
   32|      0|	var isLeapYear: Bool {
   33|      0|		let calendar = region.calendar
   34|      0|		// Library function for leap contains a bug for Gregorian calendars, implemented workaround
   35|      0|		if calendar.identifier == Calendar.Identifier.gregorian {
   36|      0|			var newComponents = dateComponents
   37|      0|			newComponents.month = 2
   38|      0|			newComponents.day = 10
   39|      0|			let testDate = DateInRegion(components: newComponents, region: region)
   40|      0|			return testDate!.isLeapMonth
   41|      0|		} else if calendar.identifier == Calendar.Identifier.chinese {
   42|      0|			/// There are 12 or 13 months in each year and 29 or 30 days in each month.
   43|      0|			/// A 13-month year is a leap year, which meaning more than 376 days is a leap year.
   44|      0|			return ( dateAtStartOf(.year).toUnit(.day, to: dateAtEndOf(.year)) > 375 )
   45|      0|		}
   46|      0|		// For other calendars:
   47|      0|		return calendar.dateComponents([.day, .month, .year], from: date).isLeapMonth!
   48|      0|	}
   49|       |
   50|       |	/// Julian day is the continuous count of days since the beginning of
   51|       |	/// the Julian Period used primarily by astronomers.
   52|      0|	var julianDay: Double {
   53|      0|		let destRegion = Region(calendar: Calendars.gregorian, zone: Zones.gmt, locale: Locales.english)
   54|      0|		let utc = convertTo(region: destRegion)
   55|      0|
   56|      0|		let year = Double(utc.year)
   57|      0|		let month = Double(utc.month)
   58|      0|		let day = Double(utc.day)
   59|      0|		let hour = Double(utc.hour) + Double(utc.minute) / 60.0 + (Double(utc.second) + Double(utc.nanosecond) / 1e9) / 3600.0
   60|      0|
   61|      0|		var jd = 367.0 * year - floor( 7.0 * ( year + floor((month + 9.0) / 12.0)) / 4.0 )
   62|      0|		jd -= floor( 3.0 * (floor( (year + (month - 9.0) / 7.0) / 100.0 ) + 1.0) / 4.0 )
   63|      0|		jd += floor(275.0 * month / 9.0) + day + 1_721_028.5 + hour / 24.0
   64|      0|
   65|      0|		return jd
   66|      0|	}
   67|       |
   68|       |	/// The Modified Julian Date (MJD) was introduced by the Smithsonian Astrophysical Observatory
   69|       |	/// in 1957 to record the orbit of Sputnik via an IBM 704 (36-bit machine)
   70|       |	/// and using only 18 bits until August 7, 2576.
   71|      0|	var modifiedJulianDay: Double {
   72|      0|		return julianDay - 2_400_000.5
   73|      0|	}
   74|       |
   75|       |	/// Return elapsed time expressed in given components since the current receiver and a reference date.
   76|       |	/// Time is evaluated with the fixed measumerent of each unity.
   77|       |	///
   78|       |	/// - Parameters:
   79|       |	///   - refDate: reference date (`nil` to use current date in the same region of the receiver)
   80|       |	///   - component: time unit to extract.
   81|       |	/// - Returns: value
   82|      0|	func getInterval(toDate: DateInRegion?, component: Calendar.Component) -> Int64 {
   83|      0|		let refDate = (toDate ?? region.nowInThisRegion())
   84|      0|		switch component {
   85|      0|		case .year:
   86|      0|			let end = calendar.ordinality(of: .year, in: .era, for: refDate.date)
   87|      0|			let start = calendar.ordinality(of: .year, in: .era, for: date)
   88|      0|			return Int64(end! - start!)
   89|      0|
   90|      0|		case .month:
   91|      0|			let end = calendar.ordinality(of: .month, in: .era, for: refDate.date)
   92|      0|			let start = calendar.ordinality(of: .month, in: .era, for: date)
   93|      0|			return Int64(end! - start!)
   94|      0|
   95|      0|		case .day:
   96|      0|			let end = calendar.ordinality(of: .day, in: .era, for: refDate.date)
   97|      0|			let start = calendar.ordinality(of: .day, in: .era, for: date)
   98|      0|			return Int64(end! - start!)
   99|      0|
  100|      0|		case .hour:
  101|      0|			let interval = refDate.date.timeIntervalSince(date)
  102|      0|			return Int64(interval / 1.hours.timeInterval)
  103|      0|
  104|      0|		case .minute:
  105|      0|			let interval = refDate.date.timeIntervalSince(date)
  106|      0|			return Int64(interval / 1.minutes.timeInterval)
  107|      0|
  108|      0|		case .second:
  109|      0|			return Int64(refDate.date.timeIntervalSince(date))
  110|      0|
  111|      0|		case .weekday:
  112|      0|			let end = calendar.ordinality(of: .weekday, in: .era, for: refDate.date)
  113|      0|			let start = calendar.ordinality(of: .weekday, in: .era, for: date)
  114|      0|			return Int64(end! - start!)
  115|      0|
  116|      0|		case .weekdayOrdinal:
  117|      0|			let end = calendar.ordinality(of: .weekdayOrdinal, in: .era, for: refDate.date)
  118|      0|			let start = calendar.ordinality(of: .weekdayOrdinal, in: .era, for: date)
  119|      0|			return Int64(end! - start!)
  120|      0|
  121|      0|		case .weekOfYear:
  122|      0|			let end = calendar.ordinality(of: .weekOfYear, in: .era, for: refDate.date)
  123|      0|			let start = calendar.ordinality(of: .weekOfYear, in: .era, for: date)
  124|      0|			return Int64(end! - start!)
  125|      0|
  126|      0|		default:
  127|      0|			debugPrint("Passed component cannot be used to extract values using interval() function between two dates. Returning 0.")
  128|      0|			return 0
  129|      0|		}
  130|      0|	}
  131|       |
  132|       |	/// The interval between the receiver and the another parameter.
  133|       |	/// If the receiver is earlier than anotherDate, the return value is negative.
  134|       |	/// If anotherDate is nil, the results are undefined.
  135|       |	///
  136|       |	/// - Parameter date: The date with which to compare the receiver.
  137|       |	/// - Returns: time interval between two dates
  138|      0|	func timeIntervalSince(_ date: DateInRegion) -> TimeInterval {
  139|      0|		return self.date.timeIntervalSince(date.date)
  140|      0|	}
  141|       |
  142|       |	/// Extract DateComponents from the difference between two dates.
  143|       |	///
  144|       |	/// - Parameter rhs: date to compare
  145|       |	/// - Returns: components
  146|      0|	func componentsTo(_ rhs: DateInRegion) -> DateComponents {
  147|      0|		return calendar.dateComponents(DateComponents.allComponentsSet, from: rhs.date, to: date)
  148|      0|	}
  149|       |
  150|       |	/// Returns the difference between two dates (`date - self`) expressed as date components.
  151|       |	///
  152|       |	/// - Parameters:
  153|       |	///   - date: reference date as initial date (left operand)
  154|       |	///   - components: components to extract, `nil` to use default `DateComponents.allComponentsSet`
  155|       |	/// - Returns: extracted date components
  156|      0|	func componentsSince(_ date: DateInRegion, components: [Calendar.Component]? = nil) -> DateComponents {
  157|      0|		if date.calendar != calendar {
  158|      0|			debugPrint("Date has different calendar, results maybe wrong")
  159|      0|		}
  160|      0|		let cmps = (components != nil ? Calendar.Component.toSet(components!) : DateComponents.allComponentsSet)
  161|      0|		return date.calendar.dateComponents(cmps, from: date.date, to: self.date)
  162|      0|	}
  163|       |
  164|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/DateInRegion/DateInRegion+Create.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public extension DateInRegion {
   16|       |
   17|       |	// MARK: - Random Date Generator
   18|       |
   19|       |	/// Generate a sequence of dates between a range.
   20|       |	///
   21|       |	/// - Parameters:
   22|       |	///   - count: number of dates to generate.
   23|       |	///   - initial: lower date bound.
   24|       |	///   - final: upper date bound.
   25|       |	///   - region: region of the dates.
   26|       |	/// - Returns: array of dates
   27|       |	static func randomDates(count: Int, between initial: DateInRegion, and final: DateInRegion,
   28|      0|								   region: Region = SwiftDate.defaultRegion) -> [DateInRegion] {
   29|      0|		var list: [DateInRegion] = []
   30|      0|		for _ in 0..<count {
   31|      0|			list.append(DateInRegion.randomDate(between: initial, and: final, region: region))
   32|      0|		}
   33|      0|		return list
   34|      0|	}
   35|       |
   36|       |	/// Return a date between now and a specified amount days ealier.
   37|       |	///
   38|       |	/// - Parameters:
   39|       |	///   - days: days range
   40|       |	///   - region: destination region, `nil` to use the default region
   41|       |	/// - Returns: random date
   42|       |	static func randomDate(withinDaysBeforeToday days: Int,
   43|      0|								  region: Region = SwiftDate.defaultRegion) -> DateInRegion {
   44|      0|		let today = DateInRegion(region: region)
   45|      0|		let earliest = DateInRegion(today.date.addingTimeInterval(TimeInterval(-days * 24 * 60 * 60)), region: region)
   46|      0|		return DateInRegion.randomDate(between: earliest, and: today)
   47|      0|	}
   48|       |
   49|       |	/// Generate a random date in given region.
   50|       |	///
   51|       |	/// - Parameter region: destination region, `nil` to use the default region
   52|       |	/// - Returns: random date
   53|      0|	static func randomDate(region: Region = SwiftDate.defaultRegion) -> DateInRegion {
   54|      0|		let randomTime = TimeInterval(UInt32.random(in: UInt32.min..<UInt32.max))
   55|      0|		let absoluteDate = Date(timeIntervalSince1970: randomTime)
   56|      0|		return DateInRegion(absoluteDate, region: region)
   57|      0|	}
   58|       |
   59|       |	/// Generate a random date between two intervals.
   60|       |	///
   61|       |	/// - Parameters:
   62|       |	///   - initial: lower bound date
   63|       |	///   - final: upper bound date
   64|       |	///   - region: destination region, `nil` to use the default region
   65|       |	/// - Returns: random Date
   66|       |	static func randomDate(between initial: DateInRegion, and final: DateInRegion,
   67|      0|								  region: Region = SwiftDate.defaultRegion) -> DateInRegion {
   68|      0|		let interval = final.timeIntervalSince(initial)
   69|      0|		let randomInterval = TimeInterval(UInt32.random(in: UInt32.min..<UInt32(interval)))
   70|      0|		return initial.addingTimeInterval(randomInterval)
   71|      0|	}
   72|       |
   73|       |	/// Return the oldest date in given list (timezone is ignored, comparison uses absolute date).
   74|       |	///
   75|       |	/// - Parameter list: list of dates
   76|       |	/// - Returns: a tuple with the index of the oldest date and its instance.
   77|      0|	static func oldestIn(list: [DateInRegion]) -> DateInRegion? {
   78|      0|		guard list.count > 0 else { return nil }
   79|      0|		guard list.count > 1 else { return list.first! }
   80|      0|		return list.min(by: {
   81|      0|			return $0 < $1
   82|      0|		})
   83|      0|	}
   84|       |
   85|       |	/// Sort date by oldest, with the oldest date on top.
   86|       |	///
   87|       |	/// - Parameter list: list to sort
   88|       |	/// - Returns: sorted array
   89|      0|	static func sortedByOldest(list: [DateInRegion]) -> [DateInRegion] {
   90|      0|		return list.sorted(by: { $0.date.compare($1.date) == .orderedAscending })
   91|      0|	}
   92|       |
   93|       |	/// Sort date by newest, with the newest date on top.
   94|       |	///
   95|       |	/// - Parameter list: list to sort
   96|       |	/// - Returns: sorted array
   97|      0|	static func sortedByNewest(list: [DateInRegion]) -> [DateInRegion] {
   98|      0|		return list.sorted(by: { $0.date.compare($1.date) == .orderedDescending })
   99|      0|	}
  100|       |
  101|       |	/// Return the newest date in given list (timezone is ignored, comparison uses absolute date).
  102|       |	///
  103|       |	/// - Parameter list: list of dates
  104|       |	/// - Returns: a tuple with the index of the newest date and its instance.
  105|      0|	static func newestIn(list: [DateInRegion]) -> DateInRegion? {
  106|      0|		guard list.count > 0 else { return nil }
  107|      0|		guard list.count > 1 else { return list.first! }
  108|      0|		return list.max(by: {
  109|      0|			return $0 < $1
  110|      0|		})
  111|      0|	}
  112|       |
  113|       |	/// Enumerate dates between two intervals by adding specified time components and return an array of dates.
  114|       |	/// `startDate` interval will be the first item of the resulting array.
  115|       |	/// The last item of the array is evaluated automatically and maybe not equal to `endDate`.
  116|       |	///
  117|       |	/// - Parameters:
  118|       |	///   - start: starting date
  119|       |	///   - endDate: ending date
  120|       |	///   - increment: components to add
  121|       |	/// - Returns: array of dates
  122|      0|	static func enumerateDates(from startDate: DateInRegion, to endDate: DateInRegion, increment: DateComponents) -> [DateInRegion] {
  123|      0|		return DateInRegion.enumerateDates(from: startDate, to: endDate, increment: { _ in
  124|      0|			return increment
  125|      0|		})
  126|      0|	}
  127|       |
  128|       |	/// Enumerate dates between two intervals by adding specified time components defined in a closure and return an array of dates.
  129|       |	/// `startDate` interval will be the first item of the resulting array.
  130|       |	/// The last item of the array is evaluated automatically and maybe not equal to `endDate`.
  131|       |	///
  132|       |	/// - Parameters:
  133|       |	///   - start: starting date
  134|       |	///   - endDate: ending date
  135|       |	///   - increment: increment function. It get the last generated date and require a valida `DateComponents` instance which define the increment
  136|       |	/// - Returns: array of dates
  137|      0|	static func enumerateDates(from startDate: DateInRegion, to endDate: DateInRegion, increment: ((DateInRegion) -> (DateComponents))) -> [DateInRegion] {
  138|      0|		guard startDate.calendar == endDate.calendar else {
  139|      0|			debugPrint("Cannot enumerate dates between two different region's calendars. Return empty array.")
  140|      0|			return []
  141|      0|		}
  142|      0|
  143|      0|		var dates: [DateInRegion] = []
  144|      0|		var currentDate = startDate
  145|      0|		while currentDate <= endDate {
  146|      0|			dates.append(currentDate)
  147|      0|			currentDate = (currentDate + increment(currentDate))
  148|      0|		}
  149|      0|		return dates
  150|      0|	}
  151|       |
  152|       |	/// Returns a new DateInRegion that is initialized at the start of a specified unit of time.
  153|       |	///
  154|       |	/// - Parameter unit: time unit value.
  155|       |	/// - Returns: instance at the beginning of the time unit; `self` if fails.
  156|      0|	func dateAtStartOf(_ unit: Calendar.Component) -> DateInRegion {
  157|      0|		#if os(Linux)
  158|      0|		guard let result = (region.calendar as NSCalendar).range(of: unit.nsCalendarUnit, for: date) else {
  159|      0|			return self
  160|      0|		}
  161|      0|		return DateInRegion(result.start, region: region)
  162|      0|		#else
  163|      0|		var start: NSDate?
  164|      0|		var interval: TimeInterval = 0
  165|      0|		guard (region.calendar as NSCalendar).range(of: unit.nsCalendarUnit, start: &start, interval: &interval, for: date),
  166|      0|			let startDate = start else {
  167|      0|				return self
  168|      0|		}
  169|      0|		return DateInRegion(startDate as Date, region: region)
  170|      0|		#endif
  171|      0|	}
  172|       |
  173|       |	/// Return a new DateInRegion that is initialized at the start of the specified components
  174|       |	/// executed in order.
  175|       |	///
  176|       |	/// - Parameter units: sequence of transformations as time unit components
  177|       |	/// - Returns: new date at the beginning of the passed components, intermediate results if fails.
  178|      0|	func dateAtStartOf(_ units: [Calendar.Component]) -> DateInRegion {
  179|      0|		return units.reduce(self) { (currentDate, currentUnit) -> DateInRegion in
  180|      0|			return currentDate.dateAtStartOf(currentUnit)
  181|      0|		}
  182|      0|	}
  183|       |
  184|       |	/// Returns a new Moment that is initialized at the end of a specified unit of time.
  185|       |	///
  186|       |	/// - parameter unit: time unit value.
  187|       |	///
  188|       |	/// - returns: A new Moment instance.
  189|      0|	func dateAtEndOf(_ unit: Calendar.Component) -> DateInRegion {
  190|      0|		// RangeOfUnit returns the start of the next unit; we will subtract one thousandth of a second
  191|      0|		#if os(Linux)
  192|      0|		guard let result = (region.calendar as NSCalendar).range(of: unit.nsCalendarUnit, for: date) else {
  193|      0|			return self
  194|      0|		}
  195|      0|		let startOfNextUnit = result.start.addingTimeInterval(result.duration)
  196|      0|		let endOfThisUnit = Date(timeInterval: -0.001, since: startOfNextUnit)
  197|      0|		return DateInRegion(endOfThisUnit, region: region)
  198|      0|		#else
  199|      0|		var start: NSDate?
  200|      0|		var interval: TimeInterval = 0
  201|      0|		guard (self.region.calendar as NSCalendar).range(of: unit.nsCalendarUnit, start: &start, interval: &interval, for: date),
  202|      0|		let startDate = start else {
  203|      0|			return self
  204|      0|		}
  205|      0|		let startOfNextUnit = startDate.addingTimeInterval(interval)
  206|      0|		let endOfThisUnit = Date(timeInterval: -0.001, since: startOfNextUnit as Date)
  207|      0|		return DateInRegion(endOfThisUnit, region: region)
  208|      0|		#endif
  209|      0|	}
  210|       |
  211|       |	/// Return a new DateInRegion that is initialized at the end of the specified components
  212|       |	/// executed in order.
  213|       |	///
  214|       |	/// - Parameter units: sequence of transformations as time unit components
  215|       |	/// - Returns: new date at the end of the passed components, intermediate results if fails.
  216|      0|	func dateAtEndOf(_ units: [Calendar.Component]) -> DateInRegion {
  217|      0|		return units.reduce(self) { (currentDate, currentUnit) -> DateInRegion in
  218|      0|			return currentDate.dateAtEndOf(currentUnit)
  219|      0|		}
  220|      0|	}
  221|       |
  222|       |	/// Create a new date by altering specified components of the receiver.
  223|       |	/// Note: `calendar` and `timezone` are ignored.
  224|       |	/// Note: some components may alter the date cyclically (like setting both `.year` and `.yearForWeekOfYear`) and
  225|       |	/// may results in a wrong evaluated date.
  226|       |	///
  227|       |	/// - Parameter components: components to alter with their new values.
  228|       |	/// - Returns: new altered `DateInRegion` instance
  229|      0|	func dateBySet(_ components: [Calendar.Component: Int?]) -> DateInRegion? {
  230|      0|		var dateComponents = DateComponents()
  231|      0|		dateComponents.year = (components[.year] ?? year)
  232|      0|		dateComponents.month = (components[.month] ?? month)
  233|      0|		dateComponents.day = (components[.day] ?? day)
  234|      0|		dateComponents.hour = (components[.hour] ?? hour)
  235|      0|		dateComponents.minute = (components[.minute] ?? minute)
  236|      0|		dateComponents.second = (components[.second] ?? second)
  237|      0|		dateComponents.nanosecond = (components[.nanosecond] ?? nanosecond)
  238|      0|
  239|      0|		// Some components may interfer with others, so we'll set it them only if explicitly set.
  240|      0|		if let weekday = components[.weekday] {
  241|      0|			dateComponents.weekday = weekday
  242|      0|		}
  243|      0|		if let weekOfYear = components[.weekOfYear] {
  244|      0|			dateComponents.weekOfYear = weekOfYear
  245|      0|		}
  246|      0|		if let weekdayOrdinal = components[.weekdayOrdinal] {
  247|      0|			dateComponents.weekdayOrdinal = weekdayOrdinal
  248|      0|		}
  249|      0|		if let yearForWeekOfYear = components[.yearForWeekOfYear] {
  250|      0|			dateComponents.yearForWeekOfYear = yearForWeekOfYear
  251|      0|		}
  252|      0|
  253|      0|		guard let newDate = calendar.date(from: dateComponents) else { return nil }
  254|      0|		return DateInRegion(newDate, region: region)
  255|      0|	}
  256|       |
  257|       |	/// Create a new date by altering specified time components.
  258|       |	///
  259|       |	/// - Parameters:
  260|       |	///   - hour: hour to set (`nil` to leave it unaltered)
  261|       |	///   - min: min to set (`nil` to leave it unaltered)
  262|       |	///   - secs: sec to set (`nil` to leave it unaltered)
  263|       |	///   - ms: milliseconds to set (`nil` to leave it unaltered)
  264|       |	///   - options: options for calculation
  265|       |	/// - Returns: new altered `DateInRegion` instance
  266|      0|	func dateBySet(hour: Int?, min: Int?, secs: Int?, ms: Int? = nil, options: TimeCalculationOptions = TimeCalculationOptions()) -> DateInRegion? {
  267|      0|		guard let date = calendar.date(bySettingHour: (hour ?? self.hour),
  268|      0|											minute: (min ?? self.minute),
  269|      0|											second: (secs ?? self.second),
  270|      0|											of: self.date,
  271|      0|											matchingPolicy: options.matchingPolicy,
  272|      0|											repeatedTimePolicy: options.repeatedTimePolicy,
  273|      0|											direction: options.direction) else { return nil }
  274|      0|		guard let ms = ms else {
  275|      0|			return DateInRegion(date, region: region)
  276|      0|		}
  277|      0|		var timestamp = date.timeIntervalSince1970.rounded(.down)
  278|      0|		timestamp += Double(ms) / 1000.0
  279|      0|		return DateInRegion(Date(timeIntervalSince1970: timestamp), region: region)
  280|      0|	}
  281|       |
  282|       |	/// Creates a new instance by truncating the components
  283|       |	///
  284|       |	/// - Parameter components: components to truncate.
  285|       |	/// - Returns: new date with truncated components.
  286|      0|	func dateTruncated(at components: [Calendar.Component]) -> DateInRegion? {
  287|      0|		var dateComponents = self.dateComponents
  288|      0|
  289|      0|		for component in components {
  290|      0|			switch component {
  291|      0|			case .month:		dateComponents.month = 1
  292|      0|			case .day:			dateComponents.day = 1
  293|      0|			case .hour:			dateComponents.hour = 0
  294|      0|			case .minute:		dateComponents.minute = 0
  295|      0|			case .second:		dateComponents.second = 0
  296|      0|			case .nanosecond:	dateComponents.nanosecond = 0
  297|      0|			default:			continue
  298|      0|			}
  299|      0|		}
  300|      0|
  301|      0|		guard let newDate = calendar.date(from: dateComponents) else { return nil }
  302|      0|		return DateInRegion(newDate, region: region)
  303|      0|	}
  304|       |
  305|       |	/// Creates a new instance by truncating the components starting from given components down the granurality.
  306|       |	///
  307|       |	/// - Parameter component: The component to be truncated from.
  308|       |	/// - Returns: new date with truncated components.
  309|      0|	func dateTruncated(from component: Calendar.Component) -> DateInRegion? {
  310|      0|		switch component {
  311|      0|		case .month:		return dateTruncated(at: [.month, .day, .hour, .minute, .second, .nanosecond])
  312|      0|		case .day:			return dateTruncated(at: [.day, .hour, .minute, .second, .nanosecond])
  313|      0|		case .hour:			return dateTruncated(at: [.hour, .minute, .second, .nanosecond])
  314|      0|		case .minute:		return dateTruncated(at: [.minute, .second, .nanosecond])
  315|      0|		case .second:		return dateTruncated(at: [.second, .nanosecond])
  316|      0|		case .nanosecond:	return dateTruncated(at: [.nanosecond])
  317|      0|		default:			return self
  318|      0|		}
  319|      0|	}
  320|       |
  321|       |	/// Round a given date time to the passed style (off|up|down).
  322|       |	///
  323|       |	/// - Parameter style: rounding mode.
  324|       |	/// - Returns: rounded date
  325|      0|	func dateRoundedAt(_ style: RoundDateMode) -> DateInRegion {
  326|      0|		switch style {
  327|      0|		case .to5Mins:			return dateRoundedAt(.toMins(5))
  328|      0|		case .to10Mins:			return dateRoundedAt(.toMins(10))
  329|      0|		case .to30Mins:			return dateRoundedAt(.toMins(30))
  330|      0|		case .toCeil5Mins:		return dateRoundedAt(.toCeilMins(5))
  331|      0|		case .toCeil10Mins:		return dateRoundedAt(.toCeilMins(10))
  332|      0|		case .toCeil30Mins:		return dateRoundedAt(.toCeilMins(30))
  333|      0|		case .toFloor5Mins:		return dateRoundedAt(.toFloorMins(5))
  334|      0|		case .toFloor10Mins:	return dateRoundedAt(.toFloorMins(10))
  335|      0|		case .toFloor30Mins:	return dateRoundedAt(.toFloorMins(30))
  336|      0|
  337|      0|		case .toMins(let minuteInterval):
  338|      0|			let onesDigit: Int = (minute % 10)
  339|      0|			if onesDigit < 5 {
  340|      0|				return dateRoundedAt(.toFloorMins(minuteInterval))
  341|      0|			} else {
  342|      0|				return dateRoundedAt(.toCeilMins(minuteInterval))
  343|      0|			}
  344|      0|
  345|      0|		case .toCeilMins(let minuteInterval):
  346|      0|			let remain: Int = (minute % minuteInterval)
  347|      0|			let value = (( Int(1.minutes.timeInterval) * (minuteInterval - remain)) - second)
  348|      0|			return dateByAdding(value, .second)
  349|      0|
  350|      0|		case .toFloorMins(let minuteInterval):
  351|      0|			let remain: Int = (minute % minuteInterval)
  352|      0|			let value = -((Int(1.minutes.timeInterval) * remain) + second)
  353|      0|			return dateByAdding(value, .second)
  354|      0|
  355|      0|		}
  356|      0|	}
  357|       |
  358|       |	/// Offset a date by n calendar components.
  359|       |	/// Note: This operation can be functionally chained.
  360|       |	///
  361|       |	/// - Parameters:
  362|       |	///   - count: value of the offset (maybe negative).
  363|       |	///   - component: component to offset.
  364|       |	/// - Returns: new altered date.
  365|      0|	func dateByAdding(_ count: Int, _ component: Calendar.Component) -> DateInRegion {
  366|      0|		var newComponent = DateComponents(second: 0)
  367|      0|		switch component {
  368|      0|		case .era: 					newComponent = DateComponents(era: count)
  369|      0|		case .year: 				newComponent = DateComponents(year: count)
  370|      0|		case .month: 				newComponent = DateComponents(month: count)
  371|      0|		case .day: 					newComponent = DateComponents(day: count)
  372|      0|		case .hour: 				newComponent = DateComponents(hour: count)
  373|      0|		case .minute: 				newComponent = DateComponents(minute: count)
  374|      0|		case .second:				newComponent = DateComponents(second: count)
  375|      0|		case .weekday:				newComponent = DateComponents(weekday: count)
  376|      0|		case .weekdayOrdinal: 		newComponent = DateComponents(weekdayOrdinal: count)
  377|      0|		case .quarter: 				newComponent = DateComponents(quarter: count)
  378|      0|		case .weekOfMonth: 			newComponent = DateComponents(weekOfMonth: count)
  379|      0|		case .weekOfYear: 			newComponent = DateComponents(weekOfYear: count)
  380|      0|		case .yearForWeekOfYear: 	newComponent = DateComponents(yearForWeekOfYear: count)
  381|      0|		case .nanosecond: 			newComponent = DateComponents(nanosecond: count)
  382|      0|		default: break // .calendar and .timezone does nothing in this context
  383|      0|		}
  384|      0|
  385|      0|		guard let newDate = region.calendar.date(byAdding: newComponent, to: date) else {
  386|      0|			return self // failed to add component, return unmodified date
  387|      0|		}
  388|      0|		return DateInRegion(newDate, region: region)
  389|      0|	}
  390|       |
  391|       |	/// Return related date starting from the receiver attributes.
  392|       |	///
  393|       |	/// - Parameter type: related date to obtain.
  394|       |	/// - Returns: instance of the related date; if fails the same unmodified date is returned
  395|      0|	func dateAt(_ type: DateRelatedType) -> DateInRegion {
  396|      0|		switch type {
  397|      0|		case .startOfDay:
  398|      0|			return calendar.startOfDay(for: date).in(region: region)
  399|      0|		case .endOfDay:
  400|      0|			return dateByAdding(1, .day).dateAt(.startOfDay).dateByAdding(-1, .second)
  401|      0|		case .startOfWeek:
  402|      0|			let components = calendar.dateComponents([.yearForWeekOfYear, .weekOfYear], from: date)
  403|      0|			return calendar.date(from: components)!.in(region: region)
  404|      0|		case .endOfWeek:
  405|      0|			return dateAt(.startOfWeek).dateByAdding(7, .day).dateByAdding(-1, .second)
  406|      0|		case .startOfMonth:
  407|      0|			return dateBySet([.day: 1, .hour: 0, .minute: 0, .second: 0, .nanosecond: 0])!
  408|      0|		case .endOfMonth:
  409|      0|			return dateByAdding((monthDays - day), .day).dateAtEndOf(.day)
  410|      0|		case .tomorrow:
  411|      0|			return dateByAdding(1, .day)
  412|      0|		case .tomorrowAtStart:
  413|      0|			return dateByAdding(1, .day).dateAtStartOf(.day)
  414|      0|		case .yesterday:
  415|      0|			return dateByAdding(-1, .day)
  416|      0|		case .yesterdayAtStart:
  417|      0|			return dateByAdding(-1, .day).dateAtStartOf(.day)
  418|      0|		case .nearestMinute(let nearest):
  419|      0|			let minutes = (minute + nearest / 2) / nearest * nearest
  420|      0|			return dateBySet([.minute: minutes])!
  421|      0|		case .nearestHour(let nearest):
  422|      0|			let hours = (hour + nearest / 2) / nearest * nearest
  423|      0|			return dateBySet([.hour: hours, .minute: 0])!
  424|      0|		case .nextWeekday(let weekday):
  425|      0|			var cal = Calendar(identifier: calendar.identifier)
  426|      0|			cal.firstWeekday = 2 // Sunday = 1, Saturday = 7
  427|      0|			var components = DateComponents()
  428|      0|			components.weekday = weekday.rawValue
  429|      0|			guard let next = cal.nextDate(after: date, matching: components, matchingPolicy: .nextTimePreservingSmallerComponents) else {
  430|      0|				return self
  431|      0|			}
  432|      0|			return DateInRegion(next, region: region)
  433|      0|		case .nextDSTDate:
  434|      0|			guard let nextDate = region.timeZone.nextDaylightSavingTimeTransition(after: date) else {
  435|      0|				return self
  436|      0|			}
  437|      0|			return DateInRegion(nextDate, region: region)
  438|      0|		case .prevMonth:
  439|      0|			return dateByAdding(-1, .month).dateAtStartOf(.month).dateAtStartOf(.day)
  440|      0|		case .nextMonth:
  441|      0|			return dateByAdding(1, .month).dateAtStartOf(.month).dateAtStartOf(.day)
  442|      0|		case .prevWeek:
  443|      0|			return dateByAdding(-1, .weekOfYear).dateAtStartOf(.weekOfYear).dateAtStartOf(.day)
  444|      0|		case .nextWeek:
  445|      0|			return dateByAdding(1, .weekOfYear).dateAtStartOf(.weekOfYear).dateAtStartOf(.day)
  446|      0|		case .nextYear:
  447|      0|			return dateByAdding(1, .year).dateAtStartOf(.year)
  448|      0|		case .prevYear:
  449|      0|			return dateByAdding(-1, .year).dateAtStartOf(.year)
  450|      0|		case .nextDSTTransition:
  451|      0|			guard let transitionDate = region.timeZone.nextDaylightSavingTimeTransition(after: date) else {
  452|      0|				return self
  453|      0|			}
  454|      0|			return DateInRegion(transitionDate, region: region)
  455|      0|		}
  456|      0|	}
  457|       |
  458|       |	/// Create a new instance of the date in the same region with time shifted by given time interval.
  459|       |	///
  460|       |	/// - Parameter interval: time interval to shift; maybe negative.
  461|       |	/// - Returns: new instance of the `DateInRegion`
  462|      0|	func addingTimeInterval(_ interval: TimeInterval) -> DateInRegion {
  463|      0|		return DateInRegion(date.addingTimeInterval(interval), region: region)
  464|      0|	}
  465|       |
  466|       |	// MARK: - Conversion
  467|       |
  468|       |	/// Convert a date to a new calendar/timezone/locale.
  469|       |	/// Only non `nil` values are used, other values are inherithed by the receiver's region.
  470|       |	///
  471|       |	/// - Parameters:
  472|       |	///   - calendar: non `nil` value to change the calendar
  473|       |	///   - timezone: non `nil` value to change the timezone
  474|       |	///   - locale: non `nil` value to change the locale
  475|       |	/// - Returns: converted date
  476|      0|	func convertTo(calendar: CalendarConvertible? = nil, timezone: ZoneConvertible? = nil, locale: LocaleConvertible? = nil) -> DateInRegion {
  477|      0|		let newRegion = Region(calendar: (calendar ?? region.calendar),
  478|      0|							   zone: (timezone ?? region.timeZone),
  479|      0|							   locale: (locale ?? region.locale))
  480|      0|		return convertTo(region: newRegion)
  481|      0|	}
  482|       |
  483|       |	/// Return the dates for a specific weekday inside given month of specified year.
  484|       |	/// Ie. get me all the saturdays of Feb 2018.
  485|       |	/// NOTE: Values are returned in order.
  486|       |	///
  487|       |	/// - Parameters:
  488|       |	///   - weekday: weekday target.
  489|       |	///   - month: month target.
  490|       |	///   - year: year target.
  491|       |	///   - region: region target, omit to use `SwiftDate.defaultRegion`
  492|       |	/// - Returns: Ordered list of the dates for given weekday into given month.
  493|       |	static func datesForWeekday(_ weekday: WeekDay, inMonth month: Int, ofYear year: Int,
  494|      0|									   region: Region = SwiftDate.defaultRegion) -> [DateInRegion] {
  495|      0|		let fromDate = DateInRegion(year: year, month: month, day: 1, hour: 0, minute: 0, second: 0, nanosecond: 0, region: region)
  496|      0|		let toDate = fromDate.dateAt(.endOfMonth)
  497|      0|		return DateInRegion.datesForWeekday(weekday, from: fromDate, to: toDate, region: region)
  498|      0|	}
  499|       |
  500|       |	/// Return the dates for a specific weekday inside a specified date range.
  501|       |	/// NOTE: Values are returned in order.
  502|       |	///
  503|       |	/// - Parameters:
  504|       |	///   - weekday: weekday target.
  505|       |	///   - startDate: from date of the range.
  506|       |	///   - endDate: to date of the range.
  507|       |	///   - region: region target, omit to use `SwiftDate.defaultRegion`
  508|       |	/// - Returns: Ordered list of the dates for given weekday in passed range.
  509|       |	static func datesForWeekday(_ weekday: WeekDay, from startDate: DateInRegion, to endDate: DateInRegion,
  510|      0|									   region: Region = SwiftDate.defaultRegion) -> [DateInRegion] {
  511|      0|
  512|      0|		let calendarObj = region.calendar
  513|      0|		let startDateWeekDay = Int(calendarObj.component(.weekday, from: startDate.date))
  514|      0|		let desiredDay = weekday.rawValue
  515|      0|
  516|      0|		let offset = (desiredDay - startDateWeekDay + 7) % 7
  517|      0|		let firstOccurrence = calendarObj.startOfDay(for: calendarObj.date(byAdding: DateComponents(day: offset), to: startDate.date)!)
  518|      0|		guard firstOccurrence.timeIntervalSince1970 < endDate.timeIntervalSince1970 else {
  519|      0|			return []
  520|      0|		}
  521|      0|		var dateOccurrences = [DateInRegion(firstOccurrence, region: region)]
  522|      0|		while true {
  523|      0|			let nextDate = DateInRegion(calendarObj.date(byAdding: DateComponents(day: 7), to: dateOccurrences.last!.date)!,
  524|      0|										region: region)
  525|      0|			guard nextDate < endDate else {
  526|      0|				break
  527|      0|			}
  528|      0|			dateOccurrences.append(nextDate)
  529|      0|		}
  530|      0|		return dateOccurrences
  531|      0|	}
  532|       |
  533|       |}
  534|       |
  535|       |public extension DateInRegion {
  536|       |
  537|       |    /// Returns the date at the given week number and week day preserving smaller components (hour, minute, seconds)
  538|       |    ///
  539|       |    /// For example: to get the third friday of next month
  540|       |    ///         let today = DateInRegion()
  541|       |    ///         let result = today.dateAt(weekdayOrdinal: 3, weekday: .friday, monthNumber: today.month + 1)
  542|       |    ///
  543|       |    /// - Parameters:
  544|       |    ///     - weekdayOrdinal: the week number (by set position in a recurrence rule)
  545|       |    ///     - weekday: WeekDay
  546|       |    ///     - monthNumber: a number from 1 to 12 representing the month, optional parameter
  547|       |    ///     - yearNumber: a number representing the year, optional parameter
  548|       |    /// - Returns: new date created with the given parameters
  549|       |    func dateAt(weekdayOrdinal: Int, weekday: WeekDay, monthNumber: Int? = nil,
  550|      0|                yearNumber: Int? = nil) -> DateInRegion {
  551|      0|        let monthNum = monthNumber ?? month
  552|      0|        let yearNum = yearNumber ?? year
  553|      0|
  554|      0|        var requiredWeekNum = weekdayOrdinal
  555|      0|        var result = DateInRegion(year: yearNum, month: monthNum, day: 1, hour: hour,
  556|      0|                                  minute: minute, second: second, nanosecond: nanosecond, region: region)
  557|      0|
  558|      0|        if result.weekday == weekday.rawValue {
  559|      0|            requiredWeekNum -= 1
  560|      0|        }
  561|      0|
  562|      0|        while requiredWeekNum > 0 {
  563|      0|            result = result.nextWeekday(weekday)
  564|      0|            requiredWeekNum -= 1
  565|      0|        }
  566|      0|
  567|      0|        return result
  568|      0|    }
  569|       |
  570|       |    /// Returns the date on the given day of month preserving smaller components
  571|       |    func dateAt(dayOfMonth: Int, monthNumber: Int? = nil,
  572|      0|                yearNumber: Int? = nil) -> DateInRegion {
  573|      0|        let monthNum = monthNumber ?? month
  574|      0|        let yearNum = yearNumber ?? year
  575|      0|
  576|      0|        let result = DateInRegion(year: yearNum, month: monthNum, day: dayOfMonth,
  577|      0|                                  hour: hour, minute: minute, second: second,
  578|      0|                                  nanosecond: nanosecond, region: region)
  579|      0|
  580|      0|        return result
  581|      0|    }
  582|       |
  583|       |    /// Returns the date after given number of weeks on the given day of week
  584|      0|    func dateAfter(weeks count: Int, on weekday: WeekDay) -> DateInRegion {
  585|      0|        var result = self.dateByAdding(count, .weekOfMonth)
  586|      0|        if result.weekday == weekday.rawValue {
  587|      0|            return result
  588|      0|        } else if result.weekday > weekday.rawValue {
  589|      0|            result = result.dateByAdding(-1, .weekOfMonth)
  590|      0|        }
  591|      0|        return result.nextWeekday(weekday)
  592|      0|    }
  593|       |
  594|       |    /// Returns the next weekday preserving smaller components
  595|       |    ///
  596|       |    /// - Parameters:
  597|       |    ///   - weekday: weekday to get.
  598|       |    ///   - region: region target, omit to use `SwiftDate.defaultRegion`
  599|       |    /// - Returns: `DateInRegion`
  600|      0|    func nextWeekday(_ weekday: WeekDay) -> DateInRegion {
  601|      0|        var components = DateComponents()
  602|      0|        components.weekday = weekday.rawValue
  603|      0|        components.hour = hour
  604|      0|        components.second = second
  605|      0|        components.minute = minute
  606|      0|
  607|      0|        guard let next = region.calendar.nextDate(after: date, matching: components,
  608|      0|                                                  matchingPolicy: .nextTimePreservingSmallerComponents) else {
  609|      0|                                                    return self
  610|      0|        }
  611|      0|
  612|      0|        return DateInRegion(next, region: region)
  613|      0|    }
  614|       |
  615|       |    /// Returns next date with the given weekday and the given week number
  616|       |    func next(_ weekday: WeekDay, withWeekOfMonth weekNumber: Int,
  617|      0|              andMonthNumber monthNumber: Int? = nil) -> DateInRegion {
  618|      0|        var result = self.dateAt(weekdayOrdinal: weekNumber, weekday: weekday, monthNumber: monthNumber)
  619|      0|
  620|      0|        if result <= self {
  621|      0|
  622|      0|            if let monthNum = monthNumber {
  623|      0|                result = self.dateAt(weekdayOrdinal: weekNumber, weekday: weekday,
  624|      0|                                     monthNumber: monthNum, yearNumber: self.year + 1)
  625|      0|            } else {
  626|      0|                result = self.dateAt(weekdayOrdinal: weekNumber, weekday: weekday, monthNumber: self.month + 1)
  627|      0|            }
  628|      0|
  629|      0|        }
  630|      0|
  631|      0|        return result
  632|      0|    }
  633|       |
  634|       |    /// Returns the next day of month preserving smaller components (hour, minute, seconds)
  635|      0|    func next(dayOfMonth: Int, monthOfYear: Int? = nil) -> DateInRegion {
  636|      0|        var components = DateComponents()
  637|      0|        components.day = dayOfMonth
  638|      0|        components.month = monthOfYear
  639|      0|        components.hour = hour
  640|      0|        components.second = second
  641|      0|        components.minute = minute
  642|      0|
  643|      0|        guard let next = region.calendar.nextDate(after: date, matching: components,
  644|      0|                                                  matchingPolicy: .nextTimePreservingSmallerComponents) else {
  645|      0|                                                    return self
  646|      0|        }
  647|      0|
  648|      0|        return DateInRegion(next, region: region)
  649|      0|    }
  650|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/DateInRegion/DateInRegion+Math.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |// MARK: - Math Operation DateInRegion - DateInRegion
   16|       |
   17|      0|public func - (lhs: DateInRegion, rhs: DateInRegion) -> TimeInterval {
   18|      0|	return lhs.timeIntervalSince(rhs)
   19|      0|}
   20|       |
   21|       |// MARK: - Math Operation DateInRegion - Date Components
   22|       |
   23|      0|public func + (lhs: DateInRegion, rhs: DateComponents) -> DateInRegion {
   24|      0|	let nextDate = lhs.calendar.date(byAdding: rhs, to: lhs.date)
   25|      0|	return DateInRegion(nextDate!, region: lhs.region)
   26|      0|}
   27|       |
   28|      0|public func - (lhs: DateInRegion, rhs: DateComponents) -> DateInRegion {
   29|      0|	return lhs + (-rhs)
   30|      0|}
   31|       |
   32|       |// MARK: - Math Operation DateInRegion - Calendar.Component
   33|       |
   34|      0|public func + (lhs: DateInRegion, rhs: [Calendar.Component: Int]) -> DateInRegion {
   35|      0|	let cmps = DateInRegion.componentsFrom(values: rhs)
   36|      0|	return lhs + cmps
   37|      0|}
   38|       |
   39|      0|public func - (lhs: DateInRegion, rhs: [Calendar.Component: Int]) -> DateInRegion {
   40|      0|	var invertedCmps: [Calendar.Component: Int] = [:]
   41|      0|	rhs.forEach { invertedCmps[$0.key] = -$0.value }
   42|      0|	return lhs + invertedCmps
   43|      0|}
   44|       |
   45|       |// MARK: - Internal DateInRegion Extension
   46|       |
   47|       |extension DateInRegion {
   48|       |
   49|       |	/// Return a `DateComponent` object from a given set of `Calendar.Component` object with associated values and a specific region
   50|       |	///
   51|       |	/// - parameter values:    calendar components to set (with their values)
   52|       |	/// - parameter multipler: optional multipler (by default is nil; to make an inverse component value it should be multipled by -1)
   53|       |	/// - parameter region:    optional region to set
   54|       |	///
   55|       |	/// - returns: a `DateComponents` object
   56|      0|	internal static func componentsFrom(values: [Calendar.Component: Int], multipler: Int? = nil, setRegion region: Region? = nil) -> DateComponents {
   57|      0|		var cmps = DateComponents()
   58|      0|		if region != nil {
   59|      0|			cmps.calendar = region!.calendar
   60|      0|			cmps.calendar!.locale = region!.locale
   61|      0|			cmps.timeZone = region!.timeZone
   62|      0|		}
   63|      0|		values.forEach { pair in
   64|      0|			if pair.key != .timeZone && pair.key != .calendar {
   65|      0|				cmps.setValue( (multipler == nil ? pair.value : pair.value * multipler!), for: pair.key)
   66|      0|			}
   67|      0|		}
   68|      0|		return cmps
   69|      0|	}
   70|       |
   71|       |	/// Adds a time interval to this date.
   72|       |	/// WARNING:
   73|       |	/// This only adjusts an absolute value. If you wish to add calendrical concepts like hours,
   74|       |	/// days, months then you must use a Calendar.
   75|       |	/// That will take into account complexities like daylight saving time,
   76|       |	/// months with different numbers of days, and more.
   77|       |	///
   78|       |	/// - Parameter timeInterval: The value to add, in seconds.
   79|      0|	public mutating func addTimeInterval(_ timeInterval: TimeInterval) {
   80|      0|		date.addTimeInterval(timeInterval)
   81|      0|	}
   82|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/DateInRegion/DateInRegion.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public struct DateInRegion: DateRepresentable, Decodable, Encodable, CustomStringConvertible, Comparable, Hashable {
   16|       |
   17|       |	/// Absolute date represented. This date is not associated with any timezone or calendar
   18|       |	/// but represent the absolute number of seconds since Jan 1, 2001 at 00:00:00 UTC.
   19|       |	public internal(set) var date: Date
   20|       |
   21|       |	/// Associated region which define where the date is represented into the world.
   22|       |	public let region: Region
   23|       |
   24|       |	/// Formatter used to transform this object in a string. By default is `nil` because SwiftDate
   25|       |	/// uses the thread shared formatter in order to avoid expensive init of the `DateFormatter` object.
   26|       |	/// However, if you need of a custom behaviour you can set a valid value.
   27|       |	public var customFormatter: DateFormatter?
   28|       |
   29|       |	/// Extract date components by taking care of the region in which the date is expressed.
   30|      0|	public var dateComponents: DateComponents {
   31|      0|		return region.calendar.dateComponents(DateComponents.allComponentsSet, from: date)
   32|      0|	}
   33|       |
   34|       |	/// Description of the date
   35|      0|	public var description: String {
   36|      0|		let absISODate = DateFormatter.sharedFormatter(forRegion: Region.UTC).string(from: date)
   37|      0|		let representedDate = formatter(format: DateFormats.iso8601).string(from: date)
   38|      0|		return "{abs_date='\(absISODate)', rep_date='\(representedDate)', region=\(region.description)"
   39|      0|	}
   40|       |
   41|       |	/// The interval between the date value and 00:00:00 UTC on 1 January 1970.
   42|      0|	public var timeIntervalSince1970: TimeInterval {
   43|      0|		return date.timeIntervalSince1970
   44|      0|	}
   45|       |
   46|       |	/// Initialize with an absolute date and represent it into given geographic region.
   47|       |	///
   48|       |	/// - Parameters:
   49|       |	///   - date: absolute date to represent.
   50|       |	///   - region: region in which the date is represented. If ignored `defaultRegion` is used instead.
   51|      0|	public init(_ date: Date = Date(), region: Region = SwiftDate.defaultRegion) {
   52|      0|		self.date = date
   53|      0|		self.region = region
   54|      0|	}
   55|       |
   56|       |	/// Initialize a new `DateInRegion` by parsing given string.
   57|       |	/// If you know the format of the string you should pass it in order to speed up the parsing process.
   58|       |	/// If you don't know the format leave it `nil` and parse is done between all formats in `DateFormats.builtInAutoFormats`
   59|       |	/// and the ordered list you can provide in `SwiftDate.autoParseFormats` (with attempt priority set on your list).
   60|       |	///
   61|       |	/// - Parameters:
   62|       |	///   - string: string with the date.
   63|       |	///   - format: format of the date.
   64|       |	///   - region: region in which the date is expressed.
   65|      0|	public init?(_ string: String, format: String? = nil, region: Region = SwiftDate.defaultRegion) {
   66|      0|		guard let date = DateFormats.parse(string: string,
   67|      0|										   format: format,
   68|      0|										   region: region) else {
   69|      0|			return nil // failed to parse date
   70|      0|		}
   71|      0|		self.date = date
   72|      0|		self.region = region
   73|      0|	}
   74|       |
   75|       |	/// Initialize a new `DateInRegion` by parsing given string with the ordered list of passed formats.
   76|       |	/// If you know the format of the string you should pass it in order to speed up the parsing process.
   77|       |	/// If you don't know the format leave it `nil` and parse is done between all formats in `DateFormats.builtInAutoFormats`
   78|       |	/// and the ordered list you can provide in `SwiftDate.autoParseFormats` (with attempt priority set on your list).
   79|       |	///
   80|       |	/// - Parameters:
   81|       |	///   - string: string with the date.
   82|       |	///   - formats: ordered list of formats to use.
   83|       |	///   - region: region in which the date is expressed.
   84|      0|	public init?(_ string: String, formats: [String]?, region: Region = SwiftDate.defaultRegion) {
   85|      0|		guard let date = DateFormats.parse(string: string,
   86|      0|										   formats: (formats ?? SwiftDate.autoFormats),
   87|      0|										   region: region) else {
   88|      0|			return nil // failed to parse date
   89|      0|		}
   90|      0|		self.date = date
   91|      0|		self.region = region
   92|      0|	}
   93|       |
   94|       |	/// Initialize a new date from the number of seconds passed since Unix Epoch.
   95|       |	///
   96|       |	/// - Parameters:
   97|       |	///   - interval: seconds since Unix Epoch.
   98|       |	///   - region: the region in which the date must be expressed, `nil` uses the default region at UTC timezone
   99|      0|	public init(seconds interval: TimeInterval, region: Region = Region.UTC) {
  100|      0|		self.date = Date(timeIntervalSince1970: interval)
  101|      0|		self.region = region
  102|      0|	}
  103|       |
  104|       |	/// Initialize a new date corresponding to the number of milliseconds since the Unix Epoch.
  105|       |	///
  106|       |	/// - Parameters:
  107|       |	///   - interval: seconds since the Unix Epoch timestamp.
  108|       |	///   - region: region in which the date must be expressed, `nil` uses the default region at UTC timezone
  109|      0|	public init(milliseconds interval: Int, region: Region = Region.UTC) {
  110|      0|		self.date = Date(timeIntervalSince1970: TimeInterval(interval) / 1000)
  111|      0|		self.region = region
  112|      0|	}
  113|       |
  114|       |	/// Initialize a new date with the opportunity to configure single date components via builder pattern.
  115|       |	/// Date is therfore expressed in passed region (`DateComponents`'s `timezone`,`calendar` and `locale` are ignored
  116|       |	/// and overwritten by the region if not `nil`).
  117|       |	///
  118|       |	/// - Parameters:
  119|       |	///   - configuration: configuration callback
  120|       |	///   - region: region in which the date is expressed.
  121|       |	///				Ignore to use `SwiftDate.defaultRegion`, `nil` to use `DateComponents` data.
  122|      0|	public init?(components configuration: ((inout DateComponents) -> Void), region: Region? = SwiftDate.defaultRegion) {
  123|      0|		var components = DateComponents()
  124|      0|		configuration(&components)
  125|      0|		let r = (region ?? Region(fromDateComponents: components))
  126|      0|		guard let date = r.calendar.date(from: components) else {
  127|      0|			return nil
  128|      0|		}
  129|      0|		self.date = date
  130|      0|		self.region = r
  131|      0|	}
  132|       |
  133|       |	/// Initialize a new date with given components.
  134|       |	///
  135|       |	/// - Parameters:
  136|       |	///   - components: components of the date.
  137|       |	///   - region: region in which the date is expressed.
  138|       |	///				Ignore to use `SwiftDate.defaultRegion`, `nil` to use `DateComponents` data.
  139|      0|	public init?(components: DateComponents, region: Region?) {
  140|      0|		let r = (region ?? Region(fromDateComponents: components))
  141|      0|		guard let date = r.calendar.date(from: components) else {
  142|      0|			return nil
  143|      0|		}
  144|      0|		self.date = date
  145|      0|		self.region = r
  146|      0|	}
  147|       |
  148|       |	/// Initialize a new date with given components.
  149|      0|	public init(year: Int, month: Int, day: Int, hour: Int = 0, minute: Int = 0, second: Int = 0, nanosecond: Int = 0, region: Region = SwiftDate.defaultRegion) {
  150|      0|		var components = DateComponents()
  151|      0|		components.year = year
  152|      0|		components.month = month
  153|      0|		components.day = day
  154|      0|		components.hour = hour
  155|      0|		components.minute = minute
  156|      0|		components.second = second
  157|      0|		components.nanosecond = nanosecond
  158|      0|		components.timeZone = region.timeZone
  159|      0|		components.calendar = region.calendar
  160|      0|		self.date = region.calendar.date(from: components)!
  161|      0|		self.region = region
  162|      0|	}
  163|       |
  164|       |	/// Return a date in the distant past.
  165|       |	///
  166|       |	/// - Returns: Date instance.
  167|      0|	public static func past() -> DateInRegion {
  168|      0|		return DateInRegion(Date.distantPast, region: SwiftDate.defaultRegion)
  169|      0|	}
  170|       |
  171|       |	/// Return a date in the distant future.
  172|       |	///
  173|       |	/// - Returns: Date instance.
  174|      0|	public static func future() -> DateInRegion {
  175|      0|		return DateInRegion(Date.distantFuture, region: SwiftDate.defaultRegion)
  176|      0|	}
  177|       |
  178|       |	// MARK: - Codable Support
  179|       |
  180|       |	enum CodingKeys: String, CodingKey {
  181|       |		case date
  182|       |		case region
  183|       |	}
  184|       |
  185|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/DateInRegion/Region.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |/// Region define a context both for `Date` and `DateInRegion`.
   16|       |/// Each `Date` is assigned to the currently set `SwiftDate.default
   17|       |public struct Region: Decodable, Encodable, Equatable, Hashable, CustomStringConvertible {
   18|       |
   19|       |	// MARK: - Properties
   20|       |
   21|       |	/// Calendar associated with region
   22|       |	public let calendar: Calendar
   23|       |
   24|       |	/// Locale associated with region
   25|      0|	public var locale: Locale { return calendar.locale! }
   26|       |
   27|       |	/// Timezone associated with region
   28|      0|	public var timeZone: TimeZone { return calendar.timeZone }
   29|       |
   30|       |	/// Description of the object
   31|      0|	public var description: String {
   32|      0|		return "{calendar='\(calendar.identifier)', timezone='\(timeZone.identifier)', locale='\(locale.identifier)'}"
   33|      0|	}
   34|       |
   35|      0|	public func hash(into hasher: inout Hasher) {
   36|      0|		hasher.combine(calendar)
   37|      0|	}
   38|       |
   39|       |	// MARK: Initialization
   40|       |
   41|       |	/// Initialize a new region with given parameters.
   42|       |	///
   43|       |	/// - Parameters:
   44|       |	///   - calendar: calendar for region, if not specified `defaultRegions`'s calendar is used instead.
   45|       |	///   - timezone: timezone for region, if not specified `defaultRegions`'s timezone is used instead.
   46|       |	///   - locale: locale for region, if not specified `defaultRegions`'s locale is used instead.
   47|       |	public init(calendar: CalendarConvertible = SwiftDate.defaultRegion.calendar,
   48|       |				zone: ZoneConvertible = SwiftDate.defaultRegion.timeZone,
   49|      0|				locale: LocaleConvertible = SwiftDate.defaultRegion.locale) {
   50|      0|		self.calendar = Calendar.newCalendar(calendar, configure: {
   51|      0|			$0.timeZone = zone.toTimezone()
   52|      0|			$0.locale = locale.toLocale()
   53|      0|		})
   54|      0|	}
   55|       |
   56|       |	/// Initialize a new Region by reading the `timeZone`,`calendar` and `locale`
   57|       |	/// parameters from the passed `DateComponents` instance.
   58|       |	/// For any `nil` parameter the correspondent `SwiftDate.defaultRegion` is used instead.
   59|       |	///
   60|       |	/// - Parameter fromDateComponents: date components
   61|      0|	public init(fromDateComponents components: DateComponents) {
   62|      0|		let tz = (components.timeZone ?? Zones.current.toTimezone())
   63|      0|		let cal = (components.calendar ?? Calendars.gregorian.toCalendar())
   64|      0|		let loc = (cal.locale ?? Locales.current.toLocale())
   65|      0|        self.init(calendar: cal, zone: tz, locale: loc)
   66|      0|	}
   67|       |
   68|      0|	public static var UTC: Region {
   69|      0|		return Region(calendar: Calendar.autoupdatingCurrent,
   70|      0|					  zone: Zones.gmt.toTimezone(),
   71|      0|					  locale: Locale.autoupdatingCurrent)
   72|      0|	}
   73|       |
   74|       |	/// Return the current local device's region where all attributes are set to the device's values.
   75|       |	///
   76|       |	/// - Returns: Region
   77|      0|	public static var local: Region {
   78|      0|		return Region(calendar: Calendar.autoupdatingCurrent,
   79|      0|					  zone: TimeZone.autoupdatingCurrent,
   80|      0|					  locale: Locale.autoupdatingCurrent)
   81|      0|	}
   82|       |
   83|       |	/// ISO Region is defined by the gregorian calendar, gmt timezone and english posix locale
   84|      0|	public static var ISO: Region {
   85|      0|		return Region(calendar: Calendars.gregorian.toCalendar(),
   86|      0|					  zone: Zones.gmt.toTimezone(),
   87|      0|					  locale: Locales.englishUnitedStatesComputer)
   88|      0|	}
   89|       |
   90|       |	/// Return an auto updating region where all settings are obtained from the current's device settings.
   91|       |	///
   92|       |	/// - Returns: Region
   93|      0|	public static var current: Region {
   94|      0|		return Region(calendar: Calendar.autoupdatingCurrent,
   95|      0|					  zone: TimeZone.autoupdatingCurrent,
   96|      0|					  locale: Locale.autoupdatingCurrent)
   97|      0|	}
   98|       |
   99|       |	/// Return a new region in current's device timezone with optional adjust of the calendar and locale.
  100|       |	///
  101|       |	/// - Parameters:
  102|       |	///   - locale: locale to set
  103|       |	///   - calendar: calendar to set
  104|       |	/// - Returns: region
  105|      0|	public static func currentIn(locale: LocaleConvertible? = nil, calendar: CalendarConvertible? = nil) -> Region {
  106|      0|		return Region(calendar: (calendar ?? SwiftDate.defaultRegion.calendar),
  107|      0|					  zone: SwiftDate.defaultRegion.timeZone,
  108|      0|					  locale: (locale ?? SwiftDate.defaultRegion.locale))
  109|      0|	}
  110|       |
  111|       |	/// Return the current date expressed into the receiver region.
  112|       |	///
  113|       |	/// - Returns: `DateInRegion` instance
  114|      0|	public func nowInThisRegion() -> DateInRegion {
  115|      0|		return DateInRegion(Date(), region: self)
  116|      0|	}
  117|       |
  118|       |	// MARK: - Codable Support
  119|       |
  120|       |	enum CodingKeys: String, CodingKey {
  121|       |		case calendar
  122|       |		case locale
  123|       |		case timezone
  124|       |	}
  125|       |
  126|      0|	public func encode(to encoder: Encoder) throws {
  127|      0|		var container = encoder.container(keyedBy: CodingKeys.self)
  128|      0|		try container.encode(calendar.timeZone.identifier, forKey: .timezone)
  129|      0|		try container.encode(calendar.locale!.identifier, forKey: .locale)
  130|      0|		try container.encode(calendar.identifier.description, forKey: .calendar)
  131|      0|	}
  132|       |
  133|      0|	public init(from decoder: Decoder) throws {
  134|      0|		let values = try decoder.container(keyedBy: CodingKeys.self)
  135|      0|		let calId = Calendar.Identifier( try values.decode(String.self, forKey: .calendar))
  136|      0|		let tz = (TimeZone(identifier: try values.decode(String.self, forKey: .timezone)) ?? SwiftDate.defaultRegion.timeZone)
  137|      0|		let lc = Locale(identifier: try values.decode(String.self, forKey: .locale))
  138|      0|		calendar = Calendar.newCalendar(calId, configure: {
  139|      0|			$0.timeZone = tz
  140|      0|			$0.locale = lc
  141|      0|		})
  142|      0|	}
  143|       |
  144|       |	// MARK: - Comparable
  145|       |
  146|      0|	public static func == (lhs: Region, rhs: Region) -> Bool {
  147|      0|		// Note: equality does not consider other parameters than the identifier of the major
  148|      0|		// attributes (calendar, timezone and locale). Deeper comparisor must be made directly
  149|      0|		// between Calendar (it may fail when you encode/decode autoUpdating calendars).
  150|      0|		return
  151|      0|			(lhs.calendar.identifier == rhs.calendar.identifier) &&
  152|      0|			(lhs.timeZone.identifier == rhs.timeZone.identifier) &&
  153|      0|			(lhs.locale.identifier == rhs.locale.identifier)
  154|      0|	}
  155|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/DateRepresentable.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public protocol DateRepresentable {
   16|       |
   17|       |	// MARK: - Date Components
   18|       |	var year: Int { get }
   19|       |
   20|       |	/// Represented month
   21|       |	var month: Int { get }
   22|       |
   23|       |	/// Represented month name with given style.
   24|       |	///
   25|       |	/// - Parameter style: style in which the name must be formatted.
   26|       |	/// - Returns: name of the month
   27|       |	func monthName(_ style: SymbolFormatStyle) -> String
   28|       |
   29|       |	/// Number of the days in the receiver.
   30|       |	var monthDays: Int { get }
   31|       |
   32|       |	/// Day unit of the receiver.
   33|       |	var day: Int { get }
   34|       |
   35|       |	/// Day of year unit of the receiver
   36|       |	var dayOfYear: Int { get }
   37|       |
   38|       |	/// The number of day in ordinal style format for the receiver in current locale.
   39|       |	/// For example, in the en_US locale, the number 3 is represented as 3rd;
   40|       |	/// in the fr_FR locale, the number 3 is represented as 3e.
   41|       |	@available(iOS 9.0, macOS 10.11, *)
   42|       |	var ordinalDay: String { get }
   43|       |
   44|       |	/// Hour unit of the receiver.
   45|       |	var hour: Int { get }
   46|       |
   47|       |	/// Nearest rounded hour from the date
   48|       |	var nearestHour: Int { get }
   49|       |
   50|       |	/// Minute unit of the receiver.
   51|       |	var minute: Int { get }
   52|       |
   53|       |	/// Second unit of the receiver.
   54|       |	var second: Int { get }
   55|       |
   56|       |	/// Nanosecond unit of the receiver.
   57|       |	var nanosecond: Int { get }
   58|       |
   59|       |	/// Milliseconds in day of the receiver
   60|       |	/// This field behaves exactly like a composite of all time-related fields, not including the zone fields.
   61|       |	/// As such, it also reflects discontinuities of those fields on DST transition days.
   62|       |	/// On a day of DST onset, it will jump forward. On a day of DST cessation, it will jump backward.
   63|       |	/// This reflects the fact that is must be combined with the offset field to obtain a unique local time value.
   64|       |	var msInDay: Int { get }
   65|       |
   66|       |	/// Weekday unit of the receiver.
   67|       |	/// The weekday units are the numbers 1-N (where for the Gregorian calendar N=7 and 1 is Sunday).
   68|       |	var weekday: Int { get }
   69|       |
   70|       |	/// Name of the weekday expressed in given format style.
   71|       |	///
   72|       |	/// - Parameter style: style to express the value.
   73|       |	/// - Parameter locale: locale to use; ignore it to use default's region locale.
   74|       |	/// - Returns: weekday name
   75|       |	func weekdayName(_ style: SymbolFormatStyle, locale: LocaleConvertible?) -> String
   76|       |
   77|       |	/// Week of a year of the receiver.
   78|       |	var weekOfYear: Int { get }
   79|       |
   80|       |	/// Week of a month of the receiver.
   81|       |	var weekOfMonth: Int { get }
   82|       |
   83|       |	/// Ordinal position within the month unit of the corresponding weekday unit.
   84|       |	/// For example, in the Gregorian calendar a weekday ordinal unit of 2 for a
   85|       |	/// weekday unit 3 indicates "the second Tuesday in the month".
   86|       |	var weekdayOrdinal: Int { get }
   87|       |
   88|       |	/// Return the first day number of the week where the receiver date is located.
   89|       |	var firstDayOfWeek: Int { get }
   90|       |
   91|       |	/// Return the last day number of the week where the receiver date is located.
   92|       |	var lastDayOfWeek: Int { get }
   93|       |
   94|       |	/// Relative year for a week within a year calendar unit.
   95|       |	var yearForWeekOfYear: Int { get }
   96|       |
   97|       |	/// Quarter value of the receiver.
   98|       |	var quarter: Int { get }
   99|       |
  100|       |	/// Quarter name expressed in given format style.
  101|       |	///
  102|       |	/// - Parameter style: style to express the value.
  103|       |	/// - Parameter locale: locale to use; ignore it to use default's region locale.
  104|       |	/// - Returns: quarter name
  105|       |	func quarterName(_ style: SymbolFormatStyle, locale: LocaleConvertible?) -> String
  106|       |
  107|       |	/// Era value of the receiver.
  108|       |	var era: Int { get }
  109|       |
  110|       |	/// Name of the era expressed in given format style.
  111|       |	///
  112|       |	/// - Parameter style: style to express the value.
  113|       |	/// - Parameter locale: locale to use; ignore it to use default's region locale.
  114|       |	/// - Returns: era
  115|       |	func eraName(_ style: SymbolFormatStyle, locale: LocaleConvertible?) -> String
  116|       |
  117|       |	/// The current daylight saving time offset of the represented date.
  118|       |	var DSTOffset: TimeInterval { get }
  119|       |
  120|       |	// MARK: - Common Properties
  121|       |
  122|       |	/// Absolute representation of the date
  123|       |	var date: Date { get }
  124|       |
  125|       |	/// Associated region
  126|       |	var region: Region { get }
  127|       |
  128|       |	/// Associated calendar
  129|       |	var calendar: Calendar { get }
  130|       |
  131|       |	/// Extract the date components from the date
  132|       |	var dateComponents: DateComponents { get }
  133|       |
  134|       |	/// Returns whether the given date is in today as boolean.
  135|       |	var isToday: Bool { get }
  136|       |
  137|       |	/// Returns whether the given date is in yesterday.
  138|       |	var isYesterday: Bool { get }
  139|       |
  140|       |	/// Returns whether the given date is in tomorrow.
  141|       |	var isTomorrow: Bool { get }
  142|       |
  143|       |	/// Returns whether the given date is in the weekend.
  144|       |	var isInWeekend: Bool { get }
  145|       |
  146|       |	/// Return true if given date represent a passed date
  147|       |	var isInPast: Bool { get }
  148|       |
  149|       |	/// Return true if given date represent a future date
  150|       |	var isInFuture: Bool { get }
  151|       |
  152|       |	/// Use this object to format the date object.
  153|       |	/// By default this object return the `customFormatter` instance (if set) or the
  154|       |	/// local thread shared formatter (via `sharedFormatter()` func; this is the most typical scenario).
  155|       |	///
  156|       |	/// - Parameters:
  157|       |	///   - format: format string to set.
  158|       |	///   - configuration: optional callback used to configure the object inline.
  159|       |	/// - Returns: formatter instance
  160|       |	func formatter(format: String?, configuration: ((DateFormatter) -> Void)?) -> DateFormatter
  161|       |
  162|       |	/// User this object to get an DateFormatter already configured to format the data object with the associated region.
  163|       |	/// By default this object return the `customFormatter` instance (if set) configured for region or the
  164|       |	/// local thread shared formatter even configured for region (via `sharedFormatter()` func; this is the most typical scenario).
  165|       |	///
  166|       |	///   - format: format string to set.
  167|       |	///   - configuration: optional callback used to configure the object inline.
  168|       |	/// - Returns: formatter instance
  169|       |	func formatterForRegion(format: String?, configuration: ((inout DateFormatter) -> Void)?) -> DateFormatter
  170|       |
  171|       |	/// Set a custom formatter for this object.
  172|       |	/// Typically you should not need to set a value for this property.
  173|       |	/// With a `nil` value SwiftDate will uses the threa shared formatter returned by `sharedFormatter()` function.
  174|       |	/// In case you need to a custom formatter instance you can override the default behaviour by setting a value here.
  175|       |	var customFormatter: DateFormatter? { get set }
  176|       |
  177|       |	/// Return a formatter instance created as singleton into the current caller's thread.
  178|       |	/// This object is used for formatting when no `dateFormatter` is set for the object
  179|       |	/// (this is the common scenario where you want to avoid multiple formatter instances to
  180|       |	/// parse dates; instances of DateFormatter are very expensive to create and you should
  181|       |	/// use a single instance in each thread to perform this kind of tasks).
  182|       |	///
  183|       |	/// - Returns: formatter instance
  184|       |	var sharedFormatter: DateFormatter { get }
  185|       |
  186|       |	// MARK: - Init
  187|       |
  188|       |	/// Initialize a new date by parsing a string.
  189|       |	///
  190|       |	/// - Parameters:
  191|       |	///   - string: string with the date.
  192|       |	///   - format: format used to parse date. Pass `nil` to use built-in formats
  193|       |	///				(if you know you should pass it to optimize the parsing process)
  194|       |	///   - region: region in which the date in `string` is expressed.
  195|       |	init?(_ string: String, format: String?, region: Region)
  196|       |
  197|       |	/// Initialize a new date from a number of seconds since the Unix Epoch.
  198|       |	///
  199|       |	/// - Parameters:
  200|       |	///   - interval: seconds since the Unix Epoch timestamp.
  201|       |	///   - region: region in which the date must be expressed.
  202|       |	init(seconds interval: TimeInterval, region: Region)
  203|       |
  204|       |	/// Initialize a new date corresponding to the number of milliseconds since the Unix Epoch.
  205|       |	///
  206|       |	/// - Parameters:
  207|       |	///   - interval: seconds since the Unix Epoch timestamp.
  208|       |	///   - region: region in which the date must be expressed.
  209|       |	init(milliseconds interval: Int, region: Region)
  210|       |
  211|       |	/// Initialize a new date with the opportunity to configure single date components via builder pattern.
  212|       |	/// Date is therfore expressed in passed region (`DateComponents`'s `timezone`,`calendar` and `locale` are ignored
  213|       |	/// and overwritten by the region if not `nil`).
  214|       |	///
  215|       |	/// - Parameters:
  216|       |	///   - configuration: configuration callback
  217|       |	///   - region: region in which the date is expressed. Ignore to use `SwiftDate.defaultRegion`,
  218|       |	///				`nil` to use `DateComponents` data.
  219|       |	init?(components configuration: ((inout DateComponents) -> Void), region: Region?)
  220|       |
  221|       |	/// Initialize a new date with time components passed.
  222|       |	///
  223|       |	/// - Parameters:
  224|       |	///   - components: date components
  225|       |	///   - region: region in which the date is expressed. Ignore to use `SwiftDate.defaultRegion`,
  226|       |	///				`nil` to use `DateComponents` data.
  227|       |	init?(components: DateComponents, region: Region?)
  228|       |
  229|       |	/// Initialize a new date with given components.
  230|       |	init(year: Int, month: Int, day: Int, hour: Int, minute: Int, second: Int, nanosecond: Int, region: Region)
  231|       |
  232|       |	// MARK: - Conversion
  233|       |
  234|       |	/// Convert a date to another region.
  235|       |	///
  236|       |	/// - Parameter region: destination region in which the date must be represented.
  237|       |	/// - Returns: converted date
  238|       |	func convertTo(region: Region) -> DateInRegion
  239|       |
  240|       |	// MARK: - To String Formatting
  241|       |
  242|       |	/// Convert date to a string using passed pre-defined style.
  243|       |	///
  244|       |	/// - Parameter style: formatter style, `nil` to use `standard` style
  245|       |	/// - Returns: string representation of the date
  246|       |	func toString(_ style: DateToStringStyles?) -> String
  247|       |
  248|       |	/// Convert date to a string using custom date format.
  249|       |	///
  250|       |	/// - Parameters:
  251|       |	/// 	- format: format of the string representation
  252|       |	///		- locale: locale to fix a custom locale, `nil` to use associated region's locale
  253|       |	/// - Returns: string representation of the date
  254|       |	func toFormat(_ format: String, locale: LocaleConvertible?) -> String
  255|       |
  256|       |	/// Convert a date to a string representation relative to another reference date (or current
  257|       |	/// if not passed).
  258|       |	///
  259|       |	/// - Parameters:
  260|       |	///   - since: reference date, if `nil` current is used.
  261|       |	///   - style: style to use to format relative date.
  262|       |	///	  - locale: force locale print, `nil` to use the date own region's locale
  263|       |	/// - Returns: string representation of the date.
  264|       |	func toRelative(since: DateInRegion?, style: RelativeFormatter.Style?, locale: LocaleConvertible?) -> String
  265|       |
  266|       |	/// Return ISO8601 representation of the date
  267|       |	///
  268|       |	/// - Parameter options: optional options, if nil extended iso format is used
  269|       |	func toISO(_ options: ISOFormatter.Options?) -> String
  270|       |
  271|       |	/// Return DOTNET compatible representation of the date.
  272|       |	///
  273|       |	/// - Returns: string representation of the date
  274|       |	func toDotNET() -> String
  275|       |
  276|       |	/// Return SQL compatible representation of the date.
  277|       |	///
  278|       |	/// - Returns: string represenation of the date
  279|       |	func toSQL() -> String
  280|       |
  281|       |	/// Return RSS compatible representation of the date
  282|       |	///
  283|       |	/// - Parameter alt: `true` to return altRSS version, `false` to return the standard RSS representation
  284|       |	/// - Returns: string representation of the date
  285|       |	func toRSS(alt: Bool) -> String
  286|       |
  287|       |	// MARK: - Extract Components
  288|       |
  289|       |	/// Extract time components for elapsed interval between the receiver date
  290|       |	/// and a reference date.
  291|       |	///
  292|       |	/// - Parameters:
  293|       |	///   - units: units to extract.
  294|       |	///   - refDate: reference date
  295|       |	/// - Returns: extracted time units
  296|       |	func toUnits(_ units: Set<Calendar.Component>, to refDate: DateRepresentable) -> [Calendar.Component: Int]
  297|       |
  298|       |	/// Extract time unit component from given date.
  299|       |	///
  300|       |	/// - Parameters:
  301|       |	///   - unit: time component to extract
  302|       |	///   - refDate: reference date
  303|       |	/// - Returns: extracted time unit value
  304|       |	func toUnit(_ unit: Calendar.Component, to refDate: DateRepresentable) -> Int
  305|       |
  306|       |}
  307|       |
  308|       |public extension DateRepresentable {
  309|       |
  310|       |	// MARK: - Common Properties
  311|       |
  312|      0|	var calendar: Calendar {
  313|      0|		return region.calendar
  314|      0|	}
  315|       |
  316|       |	// MARK: - Date Components Properties
  317|       |
  318|      0|	var year: Int {
  319|      0|		return dateComponents.year!
  320|      0|	}
  321|       |
  322|      0|	var month: Int {
  323|      0|		return dateComponents.month!
  324|      0|	}
  325|       |
  326|      0|	var monthDays: Int {
  327|      0|		return calendar.range(of: .day, in: .month, for: date)!.count
  328|      0|	}
  329|       |
  330|      0|	func monthName(_ style: SymbolFormatStyle) -> String {
  331|      0|		let formatter = self.formatter(format: nil)
  332|      0|		let idx = (month - 1)
  333|      0|		switch style {
  334|      0|		case .default:				return formatter.monthSymbols[idx]
  335|      0|		case .defaultStandalone:	return formatter.standaloneMonthSymbols[idx]
  336|      0|		case .short:				return formatter.shortMonthSymbols[idx]
  337|      0|		case .standaloneShort:		return formatter.shortStandaloneMonthSymbols[idx]
  338|      0|		case .veryShort:			return formatter.veryShortMonthSymbols[idx]
  339|      0|		case .standaloneVeryShort:	return formatter.veryShortStandaloneMonthSymbols[idx]
  340|      0|		}
  341|      0|	}
  342|       |
  343|      0|	var day: Int {
  344|      0|		return dateComponents.day!
  345|      0|	}
  346|       |
  347|      0|	var dayOfYear: Int {
  348|      0|		return calendar.ordinality(of: .day, in: .year, for: date)!
  349|      0|	}
  350|       |
  351|       |	@available(iOS 9.0, macOS 10.11, *)
  352|      0|	var ordinalDay: String {
  353|      0|		let day = self.day
  354|      0|		return DateFormatter.sharedOrdinalNumberFormatter(locale: region.locale).string(from: day as NSNumber) ?? "\(day)"
  355|      0|	}
  356|       |
  357|      0|	var hour: Int {
  358|      0|		return dateComponents.hour!
  359|      0|	}
  360|       |
  361|      0|	var nearestHour: Int {
  362|      0|		let newDate = (date + (date.minute >= 30 ? 60 - date.minute : -date.minute).minutes)
  363|      0|		return newDate.in(region: region).hour
  364|      0|	}
  365|       |
  366|      0|	var minute: Int {
  367|      0|		return dateComponents.minute!
  368|      0|	}
  369|       |
  370|      0|	var second: Int {
  371|      0|		return dateComponents.second!
  372|      0|	}
  373|       |
  374|      0|	var nanosecond: Int {
  375|      0|		return dateComponents.nanosecond!
  376|      0|	}
  377|       |
  378|      0|	var msInDay: Int {
  379|      0|		return (calendar.ordinality(of: .second, in: .day, for: date)! * 1000)
  380|      0|	}
  381|       |
  382|      0|	var weekday: Int {
  383|      0|		return dateComponents.weekday!
  384|      0|	}
  385|       |
  386|      0|	func weekdayName(_ style: SymbolFormatStyle, locale: LocaleConvertible? = nil) -> String {
  387|      0|		let formatter = self.formatter(format: nil) {
  388|      0|			$0.locale = (locale ?? self.region.locale).toLocale()
  389|      0|		}
  390|      0|		let idx = (weekday - 1)
  391|      0|		switch style {
  392|      0|		case .default:				return formatter.weekdaySymbols[idx]
  393|      0|		case .defaultStandalone:	return formatter.standaloneWeekdaySymbols[idx]
  394|      0|		case .short:				return formatter.shortWeekdaySymbols[idx]
  395|      0|		case .standaloneShort:		return formatter.shortStandaloneWeekdaySymbols[idx]
  396|      0|		case .veryShort:			return formatter.veryShortWeekdaySymbols[idx]
  397|      0|		case .standaloneVeryShort:	return formatter.veryShortStandaloneWeekdaySymbols[idx]
  398|      0|		}
  399|      0|	}
  400|       |
  401|      0|	var weekOfYear: Int {
  402|      0|		return dateComponents.weekOfYear!
  403|      0|	}
  404|       |
  405|      0|	var weekOfMonth: Int {
  406|      0|		return dateComponents.weekOfMonth!
  407|      0|	}
  408|       |
  409|      0|	var weekdayOrdinal: Int {
  410|      0|		return dateComponents.weekdayOrdinal!
  411|      0|	}
  412|       |
  413|      0|	var yearForWeekOfYear: Int {
  414|      0|		return dateComponents.yearForWeekOfYear!
  415|      0|	}
  416|       |
  417|      0|	var firstDayOfWeek: Int {
  418|      0|		return date.dateAt(.startOfWeek).day
  419|      0|	}
  420|       |
  421|      0|	var lastDayOfWeek: Int {
  422|      0|		return date.dateAt(.endOfWeek).day
  423|      0|	}
  424|       |
  425|      0|	var quarter: Int {
  426|      0|		let monthsInQuarter = Double(Calendar.current.monthSymbols.count) / 4.0
  427|      0|		return Int(ceil( Double(month) / monthsInQuarter))
  428|      0|	}
  429|       |
  430|      0|	var isToday: Bool {
  431|      0|		return calendar.isDateInToday(date)
  432|      0|	}
  433|       |
  434|      0|	var isYesterday: Bool {
  435|      0|		return calendar.isDateInYesterday(date)
  436|      0|	}
  437|       |
  438|      0|	var isTomorrow: Bool {
  439|      0|		return calendar.isDateInTomorrow(date)
  440|      0|	}
  441|       |
  442|      0|	var isInWeekend: Bool {
  443|      0|		return calendar.isDateInWeekend(date)
  444|      0|	}
  445|       |
  446|      0|	var isInPast: Bool {
  447|      0|		return date < Date()
  448|      0|	}
  449|       |
  450|      0|	var isInFuture: Bool {
  451|      0|		return date > Date()
  452|      0|	}
  453|       |
  454|      0|	func quarterName(_ style: SymbolFormatStyle, locale: LocaleConvertible? = nil) -> String {
  455|      0|		let formatter = self.formatter(format: nil) {
  456|      0|			$0.locale = (locale ?? self.region.locale).toLocale()
  457|      0|		}
  458|      0|		let idx = (quarter - 1)
  459|      0|		switch style {
  460|      0|		case .default:									return formatter.quarterSymbols[idx]
  461|      0|		case .defaultStandalone:						return formatter.standaloneQuarterSymbols[idx]
  462|      0|		case .short, .veryShort:						return formatter.shortQuarterSymbols[idx]
  463|      0|		case .standaloneShort, .standaloneVeryShort:	return formatter.shortStandaloneQuarterSymbols[idx]
  464|      0|		}
  465|      0|	}
  466|       |
  467|      0|	var era: Int {
  468|      0|		return dateComponents.era!
  469|      0|	}
  470|       |
  471|      0|	func eraName(_ style: SymbolFormatStyle, locale: LocaleConvertible? = nil) -> String {
  472|      0|		let formatter = self.formatter(format: nil) {
  473|      0|			$0.locale = (locale ?? self.region.locale).toLocale()
  474|      0|		}
  475|      0|		let idx = (era - 1)
  476|      0|		switch style {
  477|      0|		case .default, .defaultStandalone:								return formatter.longEraSymbols[idx]
  478|      0|		case .short, .standaloneShort, .veryShort, .standaloneVeryShort:	return formatter.eraSymbols[idx]
  479|      0|		}
  480|      0|	}
  481|       |
  482|      0|	var DSTOffset: TimeInterval {
  483|      0|		return region.timeZone.daylightSavingTimeOffset(for: date)
  484|      0|	}
  485|       |
  486|       |	// MARK: - Date Formatters
  487|       |
  488|      0|	func formatter(format: String? = nil, configuration: ((DateFormatter) -> Void)? = nil) -> DateFormatter {
  489|      0|		let formatter = (customFormatter ?? sharedFormatter)
  490|      0|		if let dFormat = format {
  491|      0|			formatter.dateFormat = dFormat
  492|      0|		}
  493|      0|		configuration?(formatter)
  494|      0|		return formatter
  495|      0|	}
  496|       |
  497|      0|	func formatterForRegion(format: String? = nil, configuration: ((inout DateFormatter) -> Void)? = nil) -> DateFormatter {
  498|      0|		var formatter = self.formatter(format: format, configuration: {
  499|      0|            $0.timeZone = self.region.timeZone
  500|      0|			$0.calendar = self.calendar
  501|      0|			$0.locale = self.region.locale
  502|      0|		})
  503|      0|		configuration?(&formatter)
  504|      0|		return formatter
  505|      0|	}
  506|       |
  507|      0|	var sharedFormatter: DateFormatter {
  508|      0|		return DateFormatter.sharedFormatter(forRegion: region)
  509|      0|	}
  510|       |
  511|      0|	func toString(_ style: DateToStringStyles? = nil) -> String {
  512|      0|		guard let style = style else {
  513|      0|			return DateToStringStyles.standard.toString(self)
  514|      0|		}
  515|      0|		return style.toString(self)
  516|      0|	}
  517|       |
  518|      0|	func toFormat(_ format: String, locale: LocaleConvertible? = nil) -> String {
  519|      0|		guard let fixedLocale = locale else {
  520|      0|			return DateToStringStyles.custom(format).toString(self)
  521|      0|		}
  522|      0|		let fixedRegion = Region(calendar: region.calendar, zone: region.timeZone, locale: fixedLocale)
  523|      0|		let fixedDate = DateInRegion(date.date, region: fixedRegion)
  524|      0|		return DateToStringStyles.custom(format).toString(fixedDate)
  525|      0|	}
  526|       |
  527|      0|	func toRelative(since: DateInRegion? = nil, style: RelativeFormatter.Style? = nil, locale: LocaleConvertible? = nil) -> String {
  528|      0|		return RelativeFormatter.format(date: self, to: since, style: style, locale: locale?.toLocale())
  529|      0|	}
  530|       |
  531|      0|	func toISO(_ options: ISOFormatter.Options? = nil) -> String {
  532|      0|		return DateToStringStyles.iso( (options ?? ISOFormatter.Options([.withInternetDateTime])) ).toString(self)
  533|      0|	}
  534|       |
  535|      0|	func toDotNET() -> String {
  536|      0|		return DOTNETFormatter.format(self, options: nil)
  537|      0|	}
  538|       |
  539|      0|	func toRSS(alt: Bool) -> String {
  540|      0|		switch alt {
  541|      0|		case true: 		return DateToStringStyles.altRSS.toString(self)
  542|      0|		case false: 	return DateToStringStyles.rss.toString(self)
  543|      0|		}
  544|      0|	}
  545|       |
  546|      0|	func toSQL() -> String {
  547|      0|		return DateToStringStyles.sql.toString(self)
  548|      0|	}
  549|       |
  550|       |	// MARK: - Conversion
  551|       |
  552|      0|	func convertTo(region: Region) -> DateInRegion {
  553|      0|		return DateInRegion(date, region: region)
  554|      0|	}
  555|       |
  556|       |	// MARK: - Extract Time Components
  557|       |
  558|      0|	func toUnits(_ units: Set<Calendar.Component>, to refDate: DateRepresentable) -> [Calendar.Component: Int] {
  559|      0|		let cal = region.calendar
  560|      0|		let components = cal.dateComponents(units, from: date, to: refDate.date)
  561|      0|		return components.toDict()
  562|      0|	}
  563|       |
  564|      0|	func toUnit(_ unit: Calendar.Component, to refDate: DateRepresentable) -> Int {
  565|      0|		let cal = region.calendar
  566|      0|		let components = cal.dateComponents([unit], from: date, to: refDate.date)
  567|      0|		return components.value(for: unit)!
  568|      0|	}
  569|       |
  570|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Formatters/DotNetParserFormatter.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public class DOTNETParser: StringToDateTransformable {
   16|       |
   17|       |	internal static let pattern = "\\/Date\\((-?\\d+)((?:[\\+\\-]\\d+)?)\\)\\/"
   18|       |
   19|      0|	public static func parse(_ string: String) -> (seconds: TimeInterval, tz: TimeZone)? {
   20|      0|		do {
   21|      0|			let parser = try NSRegularExpression(pattern: DOTNETParser.pattern, options: .caseInsensitive)
   22|      0|			guard let match = parser.firstMatch(in: string, options: .reportCompletion, range: NSRange(location: 0, length: string.count)) else {
   23|      0|				return nil
   24|      0|			}
   25|      0|
   26|      0|			guard let milliseconds = TimeInterval((string as NSString).substring(with: match.range(at: 1))) else { return nil }
   27|      0|
   28|      0|			// Parse timezone
   29|      0|			let raw_tz = ((string as NSString).substring(with: match.range(at: 2)) as NSString)
   30|      0|			guard raw_tz.length > 1 else {
   31|      0|				return nil
   32|      0|			}
   33|      0|			let tz_sign: String = raw_tz.substring(to: 1)
   34|      0|			if tz_sign != "+" && tz_sign != "-" {
   35|      0|				return nil
   36|      0|			}
   37|      0|
   38|      0|			let tz_hours: String = raw_tz.substring(with: NSRange(location: 1, length: 2))
   39|      0|			let tz_minutes: String = raw_tz.substring(with: NSRange(location: 3, length: 2))
   40|      0|
   41|      0|			let tz_offset = (Int(tz_hours)! * 60 * 60) + ( Int(tz_minutes)! * 60 )
   42|      0|			guard let tz_obj = TimeZone(secondsFromGMT: tz_offset) else {
   43|      0|				return nil
   44|      0|			}
   45|      0|			return ( (milliseconds / 1000), tz_obj )
   46|      0|		} catch {
   47|      0|			return nil
   48|      0|		}
   49|      0|	}
   50|       |
   51|      0|	public static func parse(_ string: String, region: Region?, options: Any?) -> DateInRegion? {
   52|      0|		guard let result = DOTNETParser.parse(string) else { return nil }
   53|      0|        let regionSet = region ?? Region.ISO
   54|      0|		let adaptedRegion = Region(calendar: regionSet.calendar, zone: regionSet.timeZone, locale: regionSet.locale)
   55|      0|		return DateInRegion(seconds: result.seconds, region: adaptedRegion)
   56|      0|	}
   57|       |
   58|       |}
   59|       |
   60|       |public class DOTNETFormatter: DateToStringTrasformable {
   61|       |
   62|      0|	public static func format(_ date: DateRepresentable, options: Any?) -> String {
   63|      0|		let milliseconds = (date.date.timeIntervalSince1970 * 1000.0)
   64|      0|		let tzOffsets = (date.region.timeZone.secondsFromGMT(for: date.date) / 3600)
   65|      0|		let formattedStr = String(format: "/Date(%.0f%+03d00)/", milliseconds, tzOffsets)
   66|      0|		return formattedStr
   67|      0|	}
   68|       |
   69|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Formatters/Formatter+Protocols.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public protocol DateToStringTrasformable {
   16|       |	static func format(_ date: DateRepresentable, options: Any?) -> String
   17|       |}
   18|       |
   19|       |public protocol StringToDateTransformable {
   20|       |	static func parse(_ string: String, region: Region?, options: Any?) -> DateInRegion?
   21|       |}
   22|       |
   23|       |// MARK: - Formatters
   24|       |
   25|       |/// Format to represent a date to string
   26|       |///
   27|       |/// - iso: standard iso format. The ISO8601 formatted date, time and millisec "yyyy-MM-dd'T'HH:mm:ssZZZZZ"
   28|       |/// - extended: Extended format. "eee dd-MMM-yyyy GG HH:mm:ss.SSS zzz"
   29|       |/// - rss: The RSS formatted date "EEE, d MMM yyyy HH:mm:ss ZZZ" i.e. "Fri, 09 Sep 2011 15:26:08 +0200"
   30|       |/// - altRSS: The Alternative RSS formatted date "d MMM yyyy HH:mm:ss ZZZ" i.e. "09 Sep 2011 15:26:08 +0200"
   31|       |/// - dotNet: The dotNet formatted date "/Date(%d%d)/" i.e. "/Date(1268123281843)/"
   32|       |/// - httpHeader: The http header formatted date "EEE, dd MMM yyyy HH:mm:ss zzz" i.e. "Tue, 15 Nov 1994 12:45:26 GMT"
   33|       |/// - custom: custom string format
   34|       |/// - standard: A generic standard format date i.e. "EEE MMM dd HH:mm:ss Z yyyy"
   35|       |/// - date: Date only format (short = "2/27/17", medium = "Feb 27, 2017", long = "February 27, 2017", full = "Monday, February 27, 2017"
   36|       |/// - time: Time only format (short = "2:22 PM", medium = "2:22:06 PM", long = "2:22:06 PM EST", full = "2:22:06 PM Eastern Standard Time"
   37|       |/// - dateTime: Date/Time format (short = "2/27/17, 2:22 PM", medium = "Feb 27, 2017, 2:22:06 PM", long = "February 27, 2017 at 2:22:06 PM EST", full = "Monday, February 27, 2017 at 2:22:06 PM Eastern Standard Time"
   38|       |public enum DateToStringStyles {
   39|       |	case iso(_: ISOFormatter.Options)
   40|       |	case extended
   41|       |	case rss
   42|       |	case altRSS
   43|       |	case dotNet
   44|       |	case httpHeader
   45|       |	case sql
   46|       |	case date(_: DateFormatter.Style)
   47|       |	case time(_: DateFormatter.Style)
   48|       |	case dateTime(_: DateFormatter.Style)
   49|       |    case dateTimeMixed(dateStyle: DateFormatter.Style, timeStyle: DateFormatter.Style)
   50|       |	case custom(_: String)
   51|       |	case standard
   52|       |	case relative(style: RelativeFormatter.Style?)
   53|       |
   54|      0|	public func toString(_ date: DateRepresentable) -> String {
   55|      0|		switch self {
   56|      0|		case .iso(let opts):			return ISOFormatter.format(date, options: opts)
   57|      0|		case .extended:					return date.formatterForRegion(format: DateFormats.extended).string(from: date.date)
   58|      0|		case .rss:						return date.formatterForRegion(format: DateFormats.rss).string(from: date.date)
   59|      0|		case .altRSS:					return date.formatterForRegion(format: DateFormats.altRSS).string(from: date.date)
   60|      0|		case .sql:						return date.formatterForRegion(format: DateFormats.sql).string(from: date.date)
   61|      0|		case .dotNet:					return DOTNETFormatter.format(date, options: nil)
   62|      0|		case .httpHeader:				return date.formatterForRegion(format: DateFormats.httpHeader).string(from: date.date)
   63|      0|		case .custom(let format):		return date.formatterForRegion(format: format).string(from: date.date)
   64|      0|		case .standard:					return date.formatterForRegion(format: DateFormats.standard).string(from: date.date)
   65|      0|		case .date(let style):
   66|      0|			return date.formatterForRegion(format: nil, configuration: {
   67|      0|				$0.dateStyle = style
   68|      0|				$0.timeStyle = .none
   69|      0|			}).string(from: date.date)
   70|      0|		case .time(let style):
   71|      0|			return date.formatterForRegion(format: nil, configuration: {
   72|      0|				$0.dateStyle = .none
   73|      0|				$0.timeStyle = style
   74|      0|			}).string(from: date.date)
   75|      0|		case .dateTime(let style):
   76|      0|			return date.formatterForRegion(format: nil, configuration: {
   77|      0|				$0.dateStyle = style
   78|      0|				$0.timeStyle = style
   79|      0|			}).string(from: date.date)
   80|      0|        case .dateTimeMixed(let dateStyle, let timeStyle):
   81|      0|            return date.formatterForRegion(format: nil, configuration: {
   82|      0|                $0.dateStyle = dateStyle
   83|      0|                $0.timeStyle = timeStyle
   84|      0|            }).string(from: date.date)
   85|      0|		case .relative(let style):
   86|      0|			return RelativeFormatter.format(date, options: style)
   87|      0|		}
   88|      0|	}
   89|       |
   90|       |}
   91|       |
   92|       |// MARK: - Parsers
   93|       |
   94|       |/// String to date transform
   95|       |///
   96|       |/// - iso: standard automatic iso parser (evaluate the date components automatically)
   97|       |/// - extended: Extended format. "eee dd-MMM-yyyy GG HH:mm:ss.SSS zzz"
   98|       |/// - rss: The RSS formatted date "EEE, d MMM yyyy HH:mm:ss ZZZ" i.e. "Fri, 09 Sep 2011 15:26:08 +0200"
   99|       |/// - altRSS: The Alternative RSS formatted date "d MMM yyyy HH:mm:ss ZZZ" i.e. "09 Sep 2011 15:26:08 +0200"
  100|       |/// - dotNet: The dotNet formatted date "/Date(%d%d)/" i.e. "/Date(1268123281843)/"
  101|       |/// - httpHeader: The http header formatted date "EEE, dd MMM yyyy HH:mm:ss zzz" i.e. "Tue, 15 Nov 1994 12:45:26 GMT"
  102|       |/// - strict: custom string format with lenient options active
  103|       |/// - custom: custom string format
  104|       |/// - standard: A generic standard format date i.e. "EEE MMM dd HH:mm:ss Z yyyy"
  105|       |public enum StringToDateStyles {
  106|       |	case iso(_: ISOParser.Options)
  107|       |	case extended
  108|       |	case rss
  109|       |	case altRSS
  110|       |	case dotNet
  111|       |	case sql
  112|       |	case httpHeader
  113|       |	case strict(_: String)
  114|       |	case custom(_: String)
  115|       |	case standard
  116|       |
  117|      0|	public func toDate(_ string: String, region: Region) -> DateInRegion? {
  118|      0|		switch self {
  119|      0|		case .iso(let options):				return ISOParser.parse(string, region: region, options: options)
  120|      0|		case .custom(let format):			return DateInRegion(string, format: format, region: region)
  121|      0|		case .extended:						return DateInRegion(string, format: DateFormats.extended, region: region)
  122|      0|		case .sql:							return DateInRegion(string, format: DateFormats.sql, region: region)
  123|      0|		case .rss:							return DateInRegion(string, format: DateFormats.rss, region: Region.ISO)?.convertTo(locale: region.locale)
  124|      0|		case .altRSS:						return DateInRegion(string, format: DateFormats.altRSS, region: Region.ISO)?.convertTo(locale: region.locale)
  125|      0|		case .dotNet:						return DOTNETParser.parse(string, region: region, options: nil)
  126|      0|		case .httpHeader:					return DateInRegion(string, format: DateFormats.httpHeader, region: region)
  127|      0|		case .standard:						return DateInRegion(string, format: DateFormats.standard, region: region)
  128|      0|		case .strict(let format):
  129|      0|			let formatter = DateFormatter.sharedFormatter(forRegion: region, format: format)
  130|      0|			formatter.isLenient = false
  131|      0|			guard let absDate = formatter.date(from: string) else { return nil }
  132|      0|			return DateInRegion(absDate, region: region)
  133|      0|		}
  134|      0|	}
  135|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Formatters/ISOFormatter.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public class ISOFormatter: DateToStringTrasformable {
   16|       |
   17|       |	public struct Options: OptionSet {
   18|       |		public let rawValue: Int
   19|       |
   20|      0|		public init(rawValue: Int) {
   21|      0|			self.rawValue = rawValue
   22|      0|		}
   23|       |
   24|       |		/// The date representation includes the year. The format for year is inferred based on the other specified options.
   25|       |		/// - If withWeekOfYear is specified, YYYY is used.
   26|       |		/// - Otherwise, yyyy is used.
   27|       |		public static let withYear = ISOFormatter.Options(rawValue: 1 << 0)
   28|       |
   29|       |		/// The date representation includes the month. The format for month is MM.
   30|       |		public static let withMonth = ISOFormatter.Options(rawValue: 1 << 1)
   31|       |
   32|       |		/// The date representation includes the week of the year.
   33|       |		/// The format for week of year is ww, including the W prefix.
   34|       |		public static let withWeekOfYear = ISOFormatter.Options(rawValue: 1 << 2)
   35|       |
   36|       |		/// The date representation includes the day. The format for day is inferred based on provided options:
   37|       |		/// - If withMonth is specified, dd is used.
   38|       |		/// - If withWeekOfYear is specified, ee is used.
   39|       |		/// - Otherwise, DDD is used.
   40|       |		public static let withDay = ISOFormatter.Options(rawValue: 1 << 3)
   41|       |
   42|       |		/// The date representation includes the time. The format for time is HH:mm:ss.
   43|       |		public static let withTime = ISOFormatter.Options(rawValue: 1 << 4)
   44|       |
   45|       |		/// The date representation includes the timezone. The format for timezone is ZZZZZ.
   46|       |		public static let withTimeZone = ISOFormatter.Options(rawValue: 1 << 5)
   47|       |
   48|       |		/// The date representation uses a space ( ) instead of T between the date and time.
   49|       |		public static let withSpaceBetweenDateAndTime = ISOFormatter.Options(rawValue: 1 << 6)
   50|       |
   51|       |		/// The date representation uses the dash separator (-) in the date.
   52|       |		public static let withDashSeparatorInDate = ISOFormatter.Options(rawValue: 1 << 7)
   53|       |
   54|       |		/// The date representation uses the colon separator (:) in the time.
   55|       |		public static let withFullDate = ISOFormatter.Options(rawValue: 1 << 8)
   56|       |
   57|       |		/// The date representation includes the hour, minute, and second.
   58|       |		public static let withFullTime = ISOFormatter.Options(rawValue: 1 << 9)
   59|       |
   60|       |		/// The format used for internet date times, according to the RFC 3339 standard.
   61|       |		/// Equivalent to specifying withFullDate, withFullTime, withDashSeparatorInDate,
   62|       |		/// withColonSeparatorInTime, and withColonSeparatorInTimeZone.
   63|       |		public static let withInternetDateTime = ISOFormatter.Options(rawValue: 1 << 10)
   64|       |
   65|       |		// The format used for internet date times; it's similar to .withInternetDateTime
   66|       |		// but include milliseconds ('yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ').
   67|       |		public static let withInternetDateTimeExtended = ISOFormatter.Options(rawValue: 1 << 11)
   68|       |
   69|       |		/// Print the timezone in format `ZZZ` instead of `ZZZZZ`
   70|       |		/// An example outout maybe be `+0200` instead of `+02:00`.
   71|       |		public static let withoutTZSeparators = ISOFormatter.Options(rawValue: 1 << 12)
   72|       |
   73|       |		/// Evaluate formatting string
   74|      0|		public var dateFormat: String {
   75|      0|			if contains(.withInternetDateTimeExtended) || contains(.withoutTZSeparators) {
   76|      0|				if contains(.withoutTZSeparators) {
   77|      0|					return "yyyy-MM-dd'T'HH:mm:ss.SSSZZZ"
   78|      0|				}
   79|      0|				return "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ"
   80|      0|			}
   81|      0|
   82|      0|			if contains(.withInternetDateTime) {
   83|      0|				if contains(.withoutTZSeparators) {
   84|      0|					return "yyyy-MM-dd'T'HH:mm:ss.SSSZZZ"
   85|      0|				}
   86|      0|				return "yyyy-MM-dd'T'HH:mm:ssZZZZZ"
   87|      0|			}
   88|      0|
   89|      0|			var format: String = ""
   90|      0|			if contains(.withFullDate) {
   91|      0|				format += "yyyy-MM-dd"
   92|      0|			} else {
   93|      0|				if contains(.withYear) {
   94|      0|					if contains(.withWeekOfYear) {
   95|      0|						format += "YYYY"
   96|      0|					} else if contains(.withMonth) || contains(.withDay) {
   97|      0|						format += "yyyy"
   98|      0|					} else {
   99|      0|						// not valid
  100|      0|					}
  101|      0|				}
  102|      0|				if contains(.withMonth) {
  103|      0|					if contains(.withYear) || contains(.withDay) || contains(.withWeekOfYear) {
  104|      0|						format += "MM"
  105|      0|					} else {
  106|      0|						// not valid
  107|      0|					}
  108|      0|				}
  109|      0|				if contains(.withWeekOfYear) {
  110|      0|					if contains(.withDay) {
  111|      0|						format += "'W'ww"
  112|      0|					} else {
  113|      0|						if contains(.withYear) || contains(.withMonth) {
  114|      0|							if contains(.withDashSeparatorInDate) {
  115|      0|								format += "-'W'ww"
  116|      0|							} else {
  117|      0|								format += "'W'ww"
  118|      0|							}
  119|      0|						} else {
  120|      0|							// not valid
  121|      0|						}
  122|      0|					}
  123|      0|				}
  124|      0|
  125|      0|				if contains(.withDay) {
  126|      0|					if contains(.withWeekOfYear) {
  127|      0|						format += "FF"
  128|      0|					} else if contains(.withMonth) {
  129|      0|						format += "dd"
  130|      0|					} else if contains(.withYear) {
  131|      0|						if contains(.withDashSeparatorInDate) {
  132|      0|							format += "-DDD"
  133|      0|						} else {
  134|      0|							format += "DDD"
  135|      0|						}
  136|      0|					} else {
  137|      0|						// not valid
  138|      0|					}
  139|      0|				}
  140|      0|			}
  141|      0|
  142|      0|			let hasDate = (contains(.withFullDate) || contains(.withMonth) || contains(.withDay) || contains(.withWeekOfYear) || contains(.withYear))
  143|      0|			if hasDate && (contains(.withFullTime) || contains(.withTimeZone) || contains(.withTime)) {
  144|      0|				if contains(.withSpaceBetweenDateAndTime) {
  145|      0|					format += " "
  146|      0|				} else {
  147|      0|					format += "'T'"
  148|      0|				}
  149|      0|			}
  150|      0|
  151|      0|			if contains(.withFullTime) {
  152|      0|				format += "HH:mm:ssZZZZZ"
  153|      0|			} else {
  154|      0|				if contains(.withTime) {
  155|      0|					format += "HH:mm:ss"
  156|      0|				}
  157|      0|				if contains(.withTimeZone) {
  158|      0|					if contains(.withoutTZSeparators) {
  159|      0|						return "yyyy-MM-dd'T'HH:mm:ss.SSSZZZ"
  160|      0|					}
  161|      0|					format += "ZZZZZ"
  162|      0|				}
  163|      0|			}
  164|      0|
  165|      0|			return format
  166|      0|		}
  167|       |	}
  168|       |
  169|      0|	public static func format(_ date: DateRepresentable, options: Any?) -> String {
  170|      0|		let formatOptions = ((options as? ISOFormatter.Options) ?? ISOFormatter.Options([.withInternetDateTime]))
  171|      0|		let formatter = date.formatter(format: formatOptions.dateFormat) {
  172|      0|			$0.locale = Locales.englishUnitedStatesComputer.toLocale() // fix for 12/24h
  173|      0|			$0.timeZone = date.region.timeZone
  174|      0|			$0.calendar = Calendars.gregorian.toCalendar()
  175|      0|		}
  176|      0|		return formatter.string(from: date.date)
  177|      0|	}
  178|       |
  179|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Formatters/ISOParser.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |// swiftlint:disable file_length
   14|       |
   15|       |import Foundation
   16|       |
   17|       |/// This defines all possible errors you can encounter parsing ISO8601 string
   18|       |///
   19|       |/// - eof: end of file
   20|       |/// - notDigit: expected digit, value cannot be parsed as int
   21|       |/// - notDouble: expected double digit, value cannot be parsed as double
   22|       |/// - invalid: invalid state reached. Something in the format is not correct
   23|       |public enum ISO8601ParserError: Error {
   24|       |	case eof
   25|       |	case notDigit
   26|       |	case notDouble
   27|       |	case invalid
   28|       |}
   29|       |
   30|       |fileprivate extension Int {
   31|       |
   32|       |	/// Return `true` if current year is a leap year, `false` otherwise
   33|      0|	var isLeapYear: Bool {
   34|      0|		return ((self % 4) == 0) && (((self % 100) != 0) || ((self % 400) == 0))
   35|      0|	}
   36|       |
   37|       |}
   38|       |
   39|       |// MARK: - Internal Extension for UnicodeScalar type
   40|       |
   41|       |internal extension UnicodeScalar {
   42|       |
   43|       |	/// return `true` if current character is a digit (arabic), `false` otherwise
   44|      0|	var isDigit: Bool {
   45|      0|		return "0"..."9" ~= self
   46|      0|	}
   47|       |
   48|       |	/// return `true` if current character is a space
   49|      0|	var isSpace: Bool {
   50|      0|		return CharacterSet.whitespaces.contains(self)
   51|      0|	}
   52|       |
   53|       |}
   54|       |
   55|       |/// This is the ISO8601 Parser class: it evaluates automatically the format of the ISO8601 date
   56|       |/// and attempt to parse it in a valid `Date` object.
   57|       |/// Resulting date also includes Time Zone settings and a property which allows you to inspect
   58|       |/// single date components.
   59|       |///
   60|       |/// This work is inspired to the original ISO8601DateFormatter class written in ObjC by
   61|       |/// Peter Hosey (available here https://bitbucket.org/boredzo/iso-8601-parser-unparser).
   62|       |/// I've made a Swift porting and fixed some issues when parsing several ISO8601 date variants.
   63|       |
   64|       |// swiftlint:disable type_body_length
   65|       |public class ISOParser: StringToDateTransformable {
   66|       |
   67|       |	/// Internal structure
   68|       |	internal enum Weekday: Int {
   69|       |		case monday = 0
   70|       |		case tuesday = 1
   71|       |		case wednesday = 2
   72|       |		case thursday = 3
   73|       |	}
   74|       |
   75|       |	public struct Options {
   76|       |
   77|       |		/// Time separator character. By default is `:`.
   78|       |		var time_separator: ISOParser.ISOChar = ":"
   79|       |
   80|       |		/// Strict parsing. By default is `false`.
   81|       |		var strict: Bool = false
   82|       |
   83|      0|		public init(strict: Bool = false) {
   84|      0|			self.strict = strict
   85|      0|		}
   86|       |	}
   87|       |
   88|       |	/// Some typealias to make the code cleaner
   89|       |	public typealias ISOString = String.UnicodeScalarView
   90|       |	public typealias ISOIndex = String.UnicodeScalarView.Index
   91|       |	public typealias ISOChar = UnicodeScalar
   92|       |	public typealias ISOParsedDate	= (date: Date?, timezone: TimeZone?)
   93|       |
   94|       |	/// This represent the internal parser status representation
   95|       |	public struct ParsedDate {
   96|       |
   97|       |		/// Type of date parsed
   98|       |		///
   99|       |		/// - monthAndDate: month and date style
  100|       |		/// - week: date with week number
  101|       |		/// - dateOnly: date only
  102|       |		// swiftlint:disable nesting
  103|       |		public enum DateStyle {
  104|       |			case monthAndDate
  105|       |			case week
  106|       |			case dateOnly
  107|       |		}
  108|       |
  109|       |		/// Parsed year value
  110|       |		var year: Int = 0
  111|       |
  112|       |		/// Parsed month or week number
  113|       |		var month_or_week:	Int = 0
  114|       |
  115|       |		/// Parsed day value
  116|       |		var day: Int = 0
  117|       |
  118|       |		/// Parsed hour value
  119|       |		var hour: Int = 0
  120|       |
  121|       |		/// Parsed minutes value
  122|       |		var minute: TimeInterval = 0.0
  123|       |
  124|       |		/// Parsed seconds value
  125|       |		var seconds: TimeInterval = 0.0
  126|       |
  127|       |		/// Parsed nanoseconds value
  128|       |		var nanoseconds:	TimeInterval = 0.0
  129|       |
  130|       |		/// Parsed weekday number (1=monday, 7=sunday)
  131|       |		/// If `nil` source string has not specs about weekday.
  132|       |		var weekday: Int?
  133|       |
  134|       |		/// Timezone parsed hour value
  135|       |		var tz_hour: Int = 0
  136|       |
  137|       |		/// Timezone parsed minute value
  138|       |		var tz_minute: Int = 0
  139|       |
  140|       |		/// Type of parsed date
  141|      0|		var type: DateStyle = .monthAndDate
  142|       |
  143|       |		/// Parsed timezone object
  144|       |		var timezone: TimeZone?
  145|       |	}
  146|       |
  147|       |	/// Source generation calendar.
  148|      0|	private var srcCalendar = Calendars.gregorian.toCalendar()
  149|       |
  150|       |	/// Source raw parsed values
  151|      0|	private var date = ParsedDate()
  152|       |
  153|       |	/// Source string represented as unicode scalars
  154|       |	private var string: ISOString
  155|       |
  156|       |	/// Current position of the parser in source string.
  157|       |	/// Initially is equal to `string.startIndex`
  158|       |	private var cIdx: ISOIndex
  159|       |
  160|       |	/// Just a shortcut to the last index in source string
  161|       |	private var eIdx: ISOIndex
  162|       |
  163|       |	/// Lenght of the string
  164|       |	private var length: Int
  165|       |
  166|       |	/// Number of hyphens characters found before any value
  167|       |	/// Consequential "-" are used to define implicit values in dates.
  168|       |	private var hyphens:	Int = 0
  169|       |
  170|       |	/// Private date components used for default values
  171|       |	private var now_cmps:	DateComponents
  172|       |
  173|       |	/// Configuration used for parser
  174|       |	private var options: ISOParser.Options
  175|       |
  176|       |	/// Date components parsed
  177|       |	private(set) var date_components: DateComponents?
  178|       |
  179|       |	/// Parsed date
  180|       |	private(set) var parsedDate: Date?
  181|       |
  182|       |	/// Parsed timezone
  183|       |	private(set) var parsedTimeZone: TimeZone?
  184|       |
  185|       |	/// Date adjusted at parsed timezone
  186|       |	private var dateInTimezone: Date? {
  187|      0|		get {
  188|      0|			srcCalendar.timeZone = date.timezone ?? TimeZone(identifier: "UTC")!
  189|      0|			return srcCalendar.date(from: date_components!)
  190|      0|		}
  191|       |	}
  192|       |
  193|       |	/// Initialize a new parser with a source ISO8601 string to parse
  194|       |	/// Parsing is done during initialization; any exception is reported
  195|       |	/// before allocating.
  196|       |	///
  197|       |	/// - Parameters:
  198|       |	///   - src: source ISO8601 string
  199|       |	///   - config: configuration used for parsing
  200|       |	/// - Throws: throw an `ISO8601Error` if parsing operation fails
  201|       |
  202|      0|	public init?(_ src: String, options: ISOParser.Options? = nil) {
  203|      0|		let src_trimmed = src.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)
  204|      0|		guard src_trimmed.count > 0 else {
  205|      0|			return nil
  206|      0|		}
  207|      0|		string = src_trimmed.unicodeScalars
  208|      0|		length = src_trimmed.count
  209|      0|		cIdx = string.startIndex
  210|      0|		eIdx = string.endIndex
  211|      0|		self.options = (options ?? ISOParser.Options())
  212|      0|		self.now_cmps = srcCalendar.dateComponents([.year, .month, .day], from: Date())
  213|      0|
  214|      0|		var idx = cIdx
  215|      0|		while idx < eIdx {
  216|      0|			if string[idx] == "-" { hyphens += 1 } else { break }
  217|      0|			idx = string.index(after: idx)
  218|      0|		}
  219|      0|
  220|      0|		do {
  221|      0|			try parse()
  222|      0|		} catch {
  223|      0|			return nil
  224|      0|		}
  225|      0|	}
  226|       |
  227|       |	// MARK: - Internal Parser
  228|       |
  229|       |	/// Private parsing function
  230|       |	///
  231|       |	/// - Throws: throw an `ISO8601Error` if parsing operation fails
  232|       |	@discardableResult
  233|      0|	private func parse() throws -> ISOParsedDate {
  234|      0|
  235|      0|		// PARSE DATE
  236|      0|
  237|      0|		if current() == "T" {
  238|      0|			// There is no date here, only a time.
  239|      0|			// Set the date to now; then we'll parse the time.
  240|      0|			next()
  241|      0|			guard current()?.isDigit ?? false else {
  242|      0|				throw ISO8601ParserError.invalid
  243|      0|			}
  244|      0|
  245|      0|			date.year = now_cmps.year!
  246|      0|			date.month_or_week = now_cmps.month!
  247|      0|			date.day = now_cmps.day!
  248|      0|		} else {
  249|      0|			moveUntil(is: "-")
  250|      0|			let is_time_only = (string.contains("T") == false && string.contains(":") && !string.contains("-"))
  251|      0|
  252|      0|			if is_time_only == false {
  253|      0|				var (num_digits, segment) = try read_int()
  254|      0|				switch num_digits {
  255|      0|				case 0:		try parse_digits_0(num_digits, &segment)
  256|      0|				case 8:		try parse_digits_8(num_digits, &segment)
  257|      0|				case 6:		try parse_digits_6(num_digits, &segment)
  258|      0|				case 4:		try parse_digits_4(num_digits, &segment)
  259|      0|				case 5:		try parse_digits_5(num_digits, &segment)
  260|      0|				case 1:		try parse_digits_1(num_digits, &segment)
  261|      0|				case 2:		try parse_digits_2(num_digits, &segment)
  262|      0|				case 7:		try parse_digits_7(num_digits, &segment) //YYYY DDD (ordinal date)
  263|      0|				case 3:		try parse_digits_3(num_digits, &segment) //--DDD (ordinal date, implicit year)
  264|      0|				default:	throw ISO8601ParserError.invalid
  265|      0|				}
  266|      0|			} else {
  267|      0|				date.year = now_cmps.year!
  268|      0|				date.month_or_week = now_cmps.month!
  269|      0|				date.day = now_cmps.day!
  270|      0|			}
  271|      0|		}
  272|      0|
  273|      0|		var hasTime = false
  274|      0|		if current()?.isSpace ?? false || current() == "T" {
  275|      0|			hasTime = true
  276|      0|			next()
  277|      0|		}
  278|      0|
  279|      0|		// PARSE TIME
  280|      0|
  281|      0|		if current()?.isDigit ?? false == true {
  282|      0|			let time_sep = options.time_separator
  283|      0|			let hasTimeSeparator = string.contains(time_sep)
  284|      0|
  285|      0|			date.hour = try read_int(2).value
  286|      0|
  287|      0|			if hasTimeSeparator == false && hasTime {
  288|      0|				date.minute = TimeInterval(try read_int(2).value)
  289|      0|			} else if current() == time_sep {
  290|      0|				next()
  291|      0|
  292|      0|				if time_sep == "," || time_sep == "." {
  293|      0|					//We can't do fractional minutes when '.' is the segment separator.
  294|      0|					//Only allow whole minutes and whole seconds.
  295|      0|					date.minute = TimeInterval(try read_int(2).value)
  296|      0|					if current() == time_sep {
  297|      0|						next()
  298|      0|						date.seconds = TimeInterval(try read_int(2).value)
  299|      0|					}
  300|      0|				} else {
  301|      0|					//Allow a fractional minute.
  302|      0|					//If we don't get a fraction, look for a seconds segment.
  303|      0|					//Otherwise, the fraction of a minute is the seconds.
  304|      0|					date.minute = try read_double().value
  305|      0|
  306|      0|					if current() != ":" {
  307|      0|						var int_part: Double = 0.0
  308|      0|						var frac_part: Double = 0.0
  309|      0|						frac_part = modf(date.minute, &int_part)
  310|      0|						date.minute = int_part
  311|      0|						date.seconds = frac_part
  312|      0|						if date.seconds > Double.ulpOfOne {
  313|      0|							// Convert fraction (e.g. .5) into seconds (e.g. 30).
  314|      0|							date.seconds *= 60
  315|      0|						} else if current() == time_sep {
  316|      0|							next()
  317|      0|							//	date.seconds = try read_double().value
  318|      0|							let value = try modf(read_double().value)
  319|      0|							date.nanoseconds = TimeInterval(round(value.1 * 1000) * 1_000_000)
  320|      0|							date.seconds = TimeInterval(value.0)
  321|      0|						}
  322|      0|					} else {
  323|      0|						// fractional minutes
  324|      0|						next()
  325|      0|						let value = try modf(read_double().value)
  326|      0|						date.nanoseconds = TimeInterval(round(value.1 * 1000) * 1_000_000)
  327|      0|						date.seconds = TimeInterval(value.0)
  328|      0|					}
  329|      0|				}
  330|      0|			}
  331|      0|
  332|      0|			if options.strict == false {
  333|      0|				if cIdx != eIdx && current()?.isSpace ?? false == true {
  334|      0|					next()
  335|      0|				}
  336|      0|			}
  337|      0|
  338|      0|			if cIdx != eIdx {
  339|      0|				switch current() {
  340|      0|				case "Z":
  341|      0|					date.timezone = TimeZone(abbreviation: "UTC")
  342|      0|
  343|      0|				case "+", "-":
  344|      0|					let is_negative = current() == "-"
  345|      0|					next()
  346|      0|					if current()?.isDigit ?? false == true {
  347|      0|						//Read hour offset.
  348|      0|						date.tz_hour = try read_int(2).value
  349|      0|						if is_negative == true { date.tz_hour = -date.tz_hour }
  350|      0|
  351|      0|						// Optional separator
  352|      0|						if current() == time_sep {
  353|      0|							next()
  354|      0|						}
  355|      0|
  356|      0|						if current()?.isDigit ?? false {
  357|      0|							// Read minute offset
  358|      0|							date.tz_minute = try read_int(2).value
  359|      0|							if is_negative == true { date.tz_minute = -date.tz_minute }
  360|      0|						}
  361|      0|
  362|      0|						let timezone_offset = (date.tz_hour * 3600) + (date.tz_minute * 60)
  363|      0|						date.timezone = TimeZone(secondsFromGMT: timezone_offset)
  364|      0|					}
  365|      0|				default:
  366|      0|					break
  367|      0|				}
  368|      0|			}
  369|      0|		}
  370|      0|
  371|      0|		date_components = DateComponents()
  372|      0|		date_components!.year = date.year
  373|      0|		date_components!.day = date.day
  374|      0|		date_components!.hour = date.hour
  375|      0|		date_components!.minute = Int(date.minute)
  376|      0|		date_components!.second = Int(date.seconds)
  377|      0|		date_components!.nanosecond = Int(date.nanoseconds)
  378|      0|
  379|      0|		switch date.type {
  380|      0|		case .monthAndDate:
  381|      0|			date_components!.month = date.month_or_week
  382|      0|		case .week:
  383|      0|			//Adapted from <http://personal.ecu.edu/mccartyr/ISOwdALG.txt>.
  384|      0|			//This works by converting the week date into an ordinal date, then letting the next case handle it.
  385|      0|			let prevYear = date.year - 1
  386|      0|			let YY = prevYear % 100
  387|      0|			let prevC = prevYear - YY
  388|      0|			let prevG = YY + YY / 4
  389|      0|			let isLeapYear = (((prevC / 100) % 4) * 5)
  390|      0|			let jan1Weekday = ((isLeapYear + prevG) % 7)
  391|      0|
  392|      0|			var day = ((8 - jan1Weekday) + (7 * (jan1Weekday > Weekday.thursday.rawValue ? 1 : 0)))
  393|      0|			day += (date.day - 1) + (7 * (date.month_or_week - 2))
  394|      0|
  395|      0|			if let weekday = date.weekday {
  396|      0|				//date_components!.weekday = weekday
  397|      0|				date_components!.day = day + weekday
  398|      0|			} else {
  399|      0|				date_components!.day = day
  400|      0|			}
  401|      0|		case .dateOnly: //An "ordinal date".
  402|      0|			break
  403|      0|
  404|      0|		}
  405|      0|
  406|      0|		//cfg.calendar.timeZone = date.timezone ?? TimeZone(identifier: "UTC")!
  407|      0|		//parsedDate = cfg.calendar.date(from: date_components!)
  408|      0|
  409|      0|		let tz = date.timezone ?? TimeZone(identifier: "UTC")!
  410|      0|		parsedTimeZone = tz
  411|      0|		srcCalendar.timeZone = tz
  412|      0|		parsedDate = srcCalendar.date(from: date_components!)
  413|      0|
  414|      0|		return (parsedDate, parsedTimeZone)
  415|      0|	}
  416|       |
  417|      0|	private func parse_digits_3(_ num_digits: Int, _ segment: inout Int) throws {
  418|      0|		//Technically, the standard only allows one hyphen. But it says that two hyphens is the logical implementation, and one was dropped for brevity. So I have chosen to allow the missing hyphen.
  419|      0|		if hyphens < 1 || (hyphens > 2 && options.strict == false) {
  420|      0|			throw ISO8601ParserError.invalid
  421|      0|		}
  422|      0|
  423|      0|		date.day = segment
  424|      0|		date.year = now_cmps.year!
  425|      0|		date.type = .dateOnly
  426|      0|		if options.strict == true && (date.day > (365 + (date.year.isLeapYear ? 1 : 0))) {
  427|      0|			throw ISO8601ParserError.invalid
  428|      0|		}
  429|      0|	}
  430|       |
  431|      0|	private func parse_digits_7(_ num_digits: Int, _ segment: inout Int) throws {
  432|      0|		guard hyphens == 0 else { throw ISO8601ParserError.invalid }
  433|      0|
  434|      0|		date.day = segment % 1000
  435|      0|		date.year = segment / 1000
  436|      0|		date.type = .dateOnly
  437|      0|		if options.strict == true && (date.day > (365 + (date.year.isLeapYear ? 1 : 0))) {
  438|      0|			throw ISO8601ParserError.invalid
  439|      0|		}
  440|      0|	}
  441|       |
  442|      0|	private func parse_digits_2(_ num_digits: Int, _ segment: inout Int) throws {
  443|      0|
  444|      0|		func parse_hyphens_3(_ num_digits: Int, _ segment: inout Int) throws {
  445|      0|			date.year = now_cmps.year!
  446|      0|			date.month_or_week = now_cmps.month!
  447|      0|			date.day = segment
  448|      0|		}
  449|      0|
  450|      0|		func parse_hyphens_2(_ num_digits: Int, _ segment: inout Int) throws {
  451|      0|			date.year = now_cmps.year!
  452|      0|			date.month_or_week = segment
  453|      0|			if current() == "-" {
  454|      0|				next()
  455|      0|				date.day = try read_int(2).value
  456|      0|			} else {
  457|      0|				date.day = 1
  458|      0|			}
  459|      0|		}
  460|      0|
  461|      0|		func parse_hyphens_1(_ num_digits: Int, _ segment: inout Int) throws {
  462|      0|			let current_year = now_cmps.year!
  463|      0|			let current_century = (current_year % 100)
  464|      0|			date.year = segment + (current_year - current_century)
  465|      0|			if num_digits == 1 { // implied decade
  466|      0|				date.year += current_century - (current_year % 10)
  467|      0|			}
  468|      0|
  469|      0|			if current() == "-" {
  470|      0|				next()
  471|      0|				if current() == "W" {
  472|      0|					next()
  473|      0|					date.type = .week
  474|      0|				}
  475|      0|				date.month_or_week = try read_int(2).value
  476|      0|
  477|      0|				if current() == "-" {
  478|      0|					next()
  479|      0|					if date.type == .week {
  480|      0|						// weekday number
  481|      0|						let weekday = try read_int().value
  482|      0|						if weekday > 7 {
  483|      0|							throw ISO8601ParserError.invalid
  484|      0|						}
  485|      0|						date.weekday = weekday
  486|      0|					} else {
  487|      0|						date.day = try read_int().value
  488|      0|						if date.day == 0 {
  489|      0|							date.day = 1
  490|      0|						}
  491|      0|						if date.month_or_week == 0 {
  492|      0|							date.month_or_week = 1
  493|      0|						}
  494|      0|					}
  495|      0|				} else {
  496|      0|					date.day = 1
  497|      0|				}
  498|      0|			} else {
  499|      0|				date.month_or_week = 1
  500|      0|				date.day = 1
  501|      0|			}
  502|      0|		}
  503|      0|
  504|      0|		func parse_hyphens_0(_ num_digits: Int, _ segment: inout Int) throws {
  505|      0|			if current() == "-" {
  506|      0|				// Implicit century
  507|      0|				date.year = now_cmps.year!
  508|      0|				date.year -= (date.year % 100)
  509|      0|				date.year += segment
  510|      0|
  511|      0|				next()
  512|      0|				if current() == "W" {
  513|      0|					try parseWeekAndDay()
  514|      0|				} else if current()?.isDigit ?? false == false {
  515|      0|					try centuryOnly(&segment)
  516|      0|				} else {
  517|      0|					// Get month and/or date.
  518|      0|					let (v_count, v_seg) = try read_int()
  519|      0|					switch v_count {
  520|      0|					case 4: // YY-MMDD
  521|      0|						date.day = v_seg % 100
  522|      0|						date.month_or_week = v_seg / 100
  523|      0|					case 1: // YY-M; YY-M-DD (extension)
  524|      0|						if options.strict == true {
  525|      0|							throw ISO8601ParserError.invalid
  526|      0|						}
  527|      0|					case 2: // YY-MM; YY-MM-DD
  528|      0|						date.month_or_week = v_seg
  529|      0|						if current() == "-" {
  530|      0|							next()
  531|      0|							if current()?.isDigit ?? false == true {
  532|      0|								date.day = try read_int(2).value
  533|      0|							} else {
  534|      0|								date.day = 1
  535|      0|							}
  536|      0|						} else {
  537|      0|							date.day = 1
  538|      0|						}
  539|      0|					case 3: // Ordinal date
  540|      0|						date.day = v_seg
  541|      0|						date.type = .dateOnly
  542|      0|					default:
  543|      0|						break
  544|      0|					}
  545|      0|				}
  546|      0|			} else if current() == "W" {
  547|      0|				date.year = now_cmps.year!
  548|      0|				date.year -= (date.year % 100)
  549|      0|				date.year += segment
  550|      0|
  551|      0|				try parseWeekAndDay()
  552|      0|			} else {
  553|      0|				try centuryOnly(&segment)
  554|      0|			}
  555|      0|		}
  556|      0|
  557|      0|		switch hyphens {
  558|      0|		case 0:		try parse_hyphens_0(num_digits, &segment)
  559|      0|		case 1:		try parse_hyphens_1(num_digits, &segment) //-YY; -YY-MM (implicit century)
  560|      0|		case 2:		try parse_hyphens_2(num_digits, &segment) //--MM; --MM-DD
  561|      0|		case 3:		try parse_hyphens_3(num_digits, &segment) //---DD
  562|      0|		default:	throw ISO8601ParserError.invalid
  563|      0|		}
  564|      0|	}
  565|       |
  566|      0|	private func parse_digits_1(_ num_digits: Int, _ segment: inout Int) throws {
  567|      0|		if options.strict == true {
  568|      0|			// Two digits only - never just one.
  569|      0|			guard hyphens == 1 else { throw ISO8601ParserError.invalid }
  570|      0|			if current() == "-" {
  571|      0|				next()
  572|      0|			}
  573|      0|			next()
  574|      0|			guard current() == "W" else { throw ISO8601ParserError.invalid }
  575|      0|
  576|      0|			date.year = now_cmps.year!
  577|      0|			date.year -= (date.year % 10)
  578|      0|			date.year += segment
  579|      0|		} else {
  580|      0|			try parse_digits_2(num_digits, &segment)
  581|      0|		}
  582|      0|	}
  583|       |
  584|      0|	private func parse_digits_5(_ num_digits: Int, _ segment: inout Int) throws {
  585|      0|		guard hyphens == 0 else { throw ISO8601ParserError.invalid }
  586|      0|		// YYDDD
  587|      0|		date.year = now_cmps.year!
  588|      0|		date.year -= (date.year % 100)
  589|      0|		date.year += segment / 1000
  590|      0|
  591|      0|		date.day = segment % 1000
  592|      0|		date.type = .dateOnly
  593|      0|	}
  594|       |
  595|      0|	private func parse_digits_4(_ num_digits: Int, _ segment: inout Int) throws {
  596|      0|
  597|      0|		func parse_hyphens_0(_ num_digits: Int, _ segment: inout Int) throws {
  598|      0|			date.year = segment
  599|      0|			if current() == "-" {
  600|      0|				next()
  601|      0|			}
  602|      0|
  603|      0|			if current()?.isDigit ?? false == false {
  604|      0|				if current() == "W" {
  605|      0|					try parseWeekAndDay()
  606|      0|				} else {
  607|      0|					date.month_or_week = 1
  608|      0|					date.day = 1
  609|      0|				}
  610|      0|			} else {
  611|      0|				let (v_num, v_seg) = try read_int()
  612|      0|				switch v_num {
  613|      0|				case 4: // MMDD
  614|      0|					date.day = v_seg % 100
  615|      0|					date.month_or_week = v_seg / 100
  616|      0|				case 2: // MM
  617|      0|					date.month_or_week = v_seg
  618|      0|
  619|      0|					if current() == "-" {
  620|      0|						next()
  621|      0|					}
  622|      0|					if current()?.isDigit ?? false == false {
  623|      0|						date.day = 1
  624|      0|					} else {
  625|      0|						date.day = try read_int().value
  626|      0|					}
  627|      0|				case 3: // DDD
  628|      0|					date.day = v_seg % 1000
  629|      0|					date.type = .dateOnly
  630|      0|					if options.strict == true && (date.day > 365 + (date.year.isLeapYear ? 1 : 0)) {
  631|      0|						throw ISO8601ParserError.invalid
  632|      0|					}
  633|      0|				default:
  634|      0|					throw ISO8601ParserError.invalid
  635|      0|				}
  636|      0|			}
  637|      0|		}
  638|      0|
  639|      0|		func parse_hyphens_1(_ num_digits: Int, _ segment: inout Int) throws {
  640|      0|			date.month_or_week = segment % 100
  641|      0|			date.year = segment / 100
  642|      0|
  643|      0|			if current() == "-" {
  644|      0|				next()
  645|      0|			}
  646|      0|			if current()?.isDigit ?? false == false {
  647|      0|				date.day = 1
  648|      0|			} else {
  649|      0|				date.day = try read_int().value
  650|      0|			}
  651|      0|		}
  652|      0|
  653|      0|		func parse_hyphens_2(_ num_digits: Int, _ segment: inout Int) throws {
  654|      0|			date.day = segment % 100
  655|      0|			date.month_or_week = segment / 100
  656|      0|			date.year = now_cmps.year!
  657|      0|		}
  658|      0|
  659|      0|		switch hyphens {
  660|      0|		case 0:		try parse_hyphens_0(num_digits, &segment) // YYYY
  661|      0|		case 1:		try parse_hyphens_1(num_digits, &segment) // YYMM
  662|      0|		case 2:		try parse_hyphens_2(num_digits, &segment) // MMDD
  663|      0|		default:	throw ISO8601ParserError.invalid
  664|      0|		}
  665|      0|
  666|      0|	}
  667|       |
  668|      0|	private func parse_digits_6(_ num_digits: Int, _ segment: inout Int) throws {
  669|      0|		// YYMMDD (implicit century)
  670|      0|		guard hyphens == 0 else {
  671|      0|			throw ISO8601ParserError.invalid
  672|      0|		}
  673|      0|
  674|      0|		date.day = segment % 100
  675|      0|		segment /= 100
  676|      0|		date.month_or_week = segment % 100
  677|      0|		date.year = now_cmps.year!
  678|      0|		date.year -= (date.year % 100)
  679|      0|		date.year += (segment / 100)
  680|      0|	}
  681|       |
  682|      0|	private func parse_digits_8(_ num_digits: Int, _ segment: inout Int) throws {
  683|      0|		// YYYY MM DD
  684|      0|		guard hyphens == 0 else {
  685|      0|			throw ISO8601ParserError.invalid
  686|      0|		}
  687|      0|
  688|      0|		date.day = segment % 100
  689|      0|		segment /= 100
  690|      0|		date.month_or_week = segment % 100
  691|      0|		date.year = segment / 100
  692|      0|	}
  693|       |
  694|      0|	private func parse_digits_0(_ num_digits: Int, _ segment: inout Int) throws {
  695|      0|		guard current() == "W" else {
  696|      0|			throw ISO8601ParserError.invalid
  697|      0|		}
  698|      0|
  699|      0|		if seek(1) == "-" && isDigit(seek(2)) &&
  700|      0|			((hyphens == 1 || hyphens == 2) && options.strict == false) {
  701|      0|
  702|      0|			date.year = now_cmps.year!
  703|      0|			date.month_or_week = 1
  704|      0|			next(2)
  705|      0|			try parseDayAfterWeek()
  706|      0|		} else if hyphens == 1 {
  707|      0|			date.year = now_cmps.year!
  708|      0|			if current() == "W" {
  709|      0|				next()
  710|      0|				date.month_or_week = try read_int(2).value
  711|      0|				date.type = .week
  712|      0|				try parseWeekday()
  713|      0|			} else {
  714|      0|				try parseDayAfterWeek()
  715|      0|			}
  716|      0|		} else {
  717|      0|			throw ISO8601ParserError.invalid
  718|      0|		}
  719|      0|	}
  720|       |
  721|      0|	private func parseWeekday() throws {
  722|      0|		if current() == "-" {
  723|      0|			next()
  724|      0|		}
  725|      0|		let weekday = try read_int().value
  726|      0|		if weekday > 7 {
  727|      0|			throw ISO8601ParserError.invalid
  728|      0|		}
  729|      0|		date.type = .week
  730|      0|		date.weekday = weekday
  731|      0|	}
  732|       |
  733|      0|	private func parseWeekAndDay() throws {
  734|      0|		next()
  735|      0|		if current()?.isDigit ?? false == false {
  736|      0|			//Not really a week-based date; just a year followed by '-W'.
  737|      0|			guard options.strict == false else {
  738|      0|				throw ISO8601ParserError.invalid
  739|      0|			}
  740|      0|			date.month_or_week = 1
  741|      0|			date.day = 1
  742|      0|		} else {
  743|      0|			date.month_or_week = try read_int(2).value
  744|      0|			try parseWeekday()
  745|      0|		}
  746|      0|	}
  747|       |
  748|      0|	private func parseDayAfterWeek() throws {
  749|      0|		date.day = current()?.isDigit ?? false == true ? try read_int(2).value : 1
  750|      0|		date.type = .week
  751|      0|	}
  752|       |
  753|      0|	private func centuryOnly(_ segment: inout Int) throws {
  754|      0|		date.year = segment * 100 + now_cmps.year! % 100
  755|      0|		date.month_or_week = 1
  756|      0|		date.day = 1
  757|      0|	}
  758|       |
  759|       |	/// Return `true` if given character is a char
  760|       |	///
  761|       |	/// - Parameter char: char to evaluate
  762|       |	/// - Returns: `true` if char is a digit, `false` otherwise
  763|      0|	private func isDigit(_ char: UnicodeScalar?) -> Bool {
  764|      0|		guard let char = char else { return false }
  765|      0|		return char.isDigit
  766|      0|	}
  767|       |
  768|       |	// MARK: - Scanner internal functions
  769|       |
  770|       |	/// Get the value at specified offset from current scanner position without
  771|       |	/// moving the current scanner's index.
  772|       |	///
  773|       |	/// - Parameter offset: offset to move
  774|       |	/// - Returns: char at given position, `nil` if not found
  775|       |	@discardableResult
  776|      0|	public func seek(_ offset: Int = 1) -> ISOChar? {
  777|      0|		let move_idx = string.index(cIdx, offsetBy: offset)
  778|      0|		guard move_idx < eIdx else {
  779|      0|			return nil
  780|      0|		}
  781|      0|		return string[move_idx]
  782|      0|	}
  783|       |
  784|       |	/// Return the char at the current position of the scanner
  785|       |	///
  786|       |	/// - Parameter next: if `true` return the current char and move to the next position
  787|       |	/// - Returns: the char sat the current position of the scanner
  788|       |	@discardableResult
  789|      0|	public func current(_ next: Bool = false) -> ISOChar? {
  790|      0|		guard cIdx != eIdx else { return nil }
  791|      0|		let current = string[cIdx]
  792|      0|		if next == true { cIdx = string.index(after: cIdx) }
  793|      0|		return current
  794|      0|	}
  795|       |
  796|       |	/// Move by `offset` characters the index of the scanner and return the char at the current
  797|       |	/// position. If EOF is reached `nil` is returned.
  798|       |	///
  799|       |	/// - Parameter offset: offset value (use negative number to move backwards)
  800|       |	/// - Returns: character at the current position.
  801|       |	@discardableResult
  802|      0|	private func next(_ offset: Int = 1) -> ISOChar? {
  803|      0|		let next = string.index(cIdx, offsetBy: offset)
  804|      0|		guard next < eIdx else {
  805|      0|			return nil
  806|      0|		}
  807|      0|		cIdx = next
  808|      0|		return string[cIdx]
  809|      0|	}
  810|       |
  811|       |	/// Read from the current scanner index and parse the value as Int.
  812|       |	///
  813|       |	/// - Parameter max_count: number of characters to move. If nil scanners continues until a non
  814|       |	///   digit value is encountered.
  815|       |	/// - Returns: parsed value
  816|       |	/// - Throws: throw an exception if parser fails
  817|       |	@discardableResult
  818|      0|	private func read_int(_ max_count: Int? = nil) throws -> (count: Int, value: Int) {
  819|      0|		var move_idx = cIdx
  820|      0|		var count = 0
  821|      0|		while move_idx < eIdx {
  822|      0|			if let max = max_count, count >= max { break }
  823|      0|			if string[move_idx].isDigit == false { break }
  824|      0|			count += 1
  825|      0|			move_idx = string.index(after: move_idx)
  826|      0|		}
  827|      0|
  828|      0|		let raw_value = String(string[cIdx..<move_idx])
  829|      0|		if raw_value == "" {
  830|      0|			return (count, 0)
  831|      0|		}
  832|      0|		guard let value = Int(raw_value) else {
  833|      0|			throw ISO8601ParserError.notDigit
  834|      0|		}
  835|      0|
  836|      0|		cIdx = move_idx
  837|      0|		return (count, value)
  838|      0|	}
  839|       |
  840|       |	/// Read from the current scanner index and parse the value as Double.
  841|       |	/// If parser fails an exception is throw.
  842|       |	/// Unit separator can be `-` or `,`.
  843|       |	///
  844|       |	/// - Returns: double value
  845|       |	/// - Throws: throw an exception if parser fails
  846|       |	@discardableResult
  847|      0|	private func read_double() throws -> (count: Int, value: Double) {
  848|      0|		var move_idx = cIdx
  849|      0|		var count = 0
  850|      0|		var fractional_start = false
  851|      0|		while move_idx < eIdx {
  852|      0|			let char = string[move_idx]
  853|      0|			if char == "." || char == "," {
  854|      0|				if fractional_start == true { throw ISO8601ParserError.notDouble } else { fractional_start = true }
  855|      0|			} else {
  856|      0|				if char.isDigit == false { break }
  857|      0|			}
  858|      0|			count += 1
  859|      0|			move_idx = string.index(after: move_idx)
  860|      0|		}
  861|      0|
  862|      0|		let raw_value = String(string[cIdx..<move_idx]).replacingOccurrences(of: ",", with: ".")
  863|      0|		if raw_value == "" {
  864|      0|			return (count, 0.0)
  865|      0|		}
  866|      0|		guard let value = Double(raw_value) else {
  867|      0|			throw ISO8601ParserError.notDouble
  868|      0|		}
  869|      0|		cIdx = move_idx
  870|      0|		return (count, value)
  871|      0|	}
  872|       |
  873|       |	/// Move the current scanner index to the next position until the current char of the scanner
  874|       |	/// is the given `char` value.
  875|       |	///
  876|       |	/// - Parameter char: char
  877|       |	/// - Returns: the number of characters passed
  878|       |	@discardableResult
  879|      0|	private func moveUntil(is char: UnicodeScalar) -> Int {
  880|      0|		var move_idx = cIdx
  881|      0|		var count = 0
  882|      0|		while move_idx < eIdx {
  883|      0|			guard string[move_idx] == char else { break }
  884|      0|			move_idx = string.index(after: move_idx)
  885|      0|			count += 1
  886|      0|		}
  887|      0|		cIdx = move_idx
  888|      0|		return count
  889|      0|	}
  890|       |
  891|       |	/// Move the current scanner index to the next position until passed `char` value is
  892|       |	/// encountered or `eof` is reached.
  893|       |	///
  894|       |	/// - Parameter char: char
  895|       |	/// - Returns: the number of characters passed
  896|       |	@discardableResult
  897|      0|	private func moveUntil(isNot char: UnicodeScalar) -> Int {
  898|      0|		var move_idx = cIdx
  899|      0|		var count = 0
  900|      0|		while move_idx < eIdx {
  901|      0|			guard string[move_idx] != char else { break }
  902|      0|			move_idx = string.index(after: move_idx)
  903|      0|			count += 1
  904|      0|		}
  905|      0|		cIdx = move_idx
  906|      0|		return count
  907|      0|	}
  908|       |
  909|       |	/// Return a date parsed from a valid ISO8601 string
  910|       |	///
  911|       |	/// - Parameter string: source string
  912|       |	/// - Returns: a valid `Date` object or `nil` if date cannot be parsed
  913|      0|	public static func date(from string: String) -> ISOParsedDate? {
  914|      0|		guard let parser = ISOParser(string) else {
  915|      0|			return nil
  916|      0|		}
  917|      0|		return (parser.parsedDate, parser.parsedTimeZone)
  918|      0|	}
  919|       |
  920|      0|	public static func parse(_ string: String, region: Region?, options: Any?) -> DateInRegion? {
  921|      0|		let formatOptions = options as? ISOParser.Options
  922|      0|		guard let parser = ISOParser(string, options: formatOptions),
  923|      0|			let date = parser.parsedDate else {
  924|      0|			return nil
  925|      0|		}
  926|      0|		let parsedRegion = Region(calendar: region?.calendar ?? Region.ISO.calendar,
  927|      0|								  zone: (region?.timeZone ?? parser.parsedTimeZone ?? Region.ISO.timeZone),
  928|      0|								  locale: region?.locale ?? Region.ISO.locale)
  929|      0|		return DateInRegion(date, region: parsedRegion)
  930|      0|	}
  931|       |
  932|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Formatters/RelativeFormatter/RelativeFormatter+Style.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |#if os(Linux)
   16|       |import Glibc
   17|       |#else
   18|       |import Darwin
   19|       |#endif
   20|       |
   21|       |// MARK: - Style
   22|       |
   23|       |public extension RelativeFormatter {
   24|       |
   25|       |	enum PluralForm: String {
   26|       |		case zero, one, two, few, many, other
   27|       |	}
   28|       |
   29|       |	/// Style for formatter
   30|       |	struct Style {
   31|       |
   32|       |		/// Flavours supported by the style, specified in order.
   33|       |		/// The first available flavour for specified locale is used.
   34|       |		/// If no flavour is available `.long` is used instead (this flavour
   35|       |		/// MUST be part of every lang structure).
   36|       |		public var flavours: [Flavour]
   37|       |
   38|       |		/// Gradation specify how the unit are evaluated in order to get the
   39|       |		/// best one to represent a given amount of time interval.
   40|       |		/// By default `convenient()` is used.
   41|      0|		public var gradation: Gradation = .convenient()
   42|       |
   43|       |		/// Allowed time units the style can use. Some styles may not include
   44|       |		/// some time units (ie. `.quarter`) because they are not useful for
   45|       |		/// a given representation.
   46|       |		/// If not specified all the following units are set:
   47|       |		/// `.now, .minute, .hour, .day, .week, .month, .year`
   48|       |		public var allowedUnits: [Unit]?
   49|       |
   50|       |		/// Create a new style.
   51|       |		///
   52|       |		/// - Parameters:
   53|       |		///   - flavours: flavours of the style.
   54|       |		///   - gradation: gradation rules.
   55|       |		///   - units: allowed units.
   56|      0|		public init(flavours: [Flavour], gradation: Gradation, allowedUnits units: [Unit]? = nil) {
   57|      0|            self.flavours = flavours
   58|      0|			self.gradation = gradation
   59|      0|			allowedUnits = (units ?? [.now, .minute, .hour, .day, .week, .month, .year])
   60|      0|		}
   61|       |	}
   62|       |
   63|       |	/// Return the default style for relative formatter.
   64|       |	///
   65|       |	/// - Returns: style instance.
   66|      0|	static func defaultStyle() -> Style {
   67|      0|		return Style(flavours: [.longConvenient, .long], gradation: .convenient())
   68|      0|	}
   69|       |
   70|       |	/// Return the time-only style for relative formatter.
   71|       |	///
   72|       |	/// - Returns: style instance.
   73|      0|	static func timeStyle() -> Style {
   74|      0|		return Style(flavours: [.longTime], gradation: .convenient())
   75|      0|	}
   76|       |	/// Return the twitter style for relative formatter.
   77|       |	///
   78|       |	/// - Returns: style instance.
   79|      0|	static func twitterStyle() -> Style {
   80|      0|		return Style(flavours: [.tiny, .shortTime, .narrow, .shortTime], gradation: .twitter())
   81|      0|	}
   82|       |
   83|       |}
   84|       |
   85|       |// MARK: - Flavour
   86|       |
   87|       |public extension RelativeFormatter {
   88|       |
   89|       |	/// Supported flavours
   90|       |	enum Flavour: String {
   91|       |		case long 				= "long"
   92|       |		case longTime 			= "long_time"
   93|       |		case longConvenient	 	= "long_convenient"
   94|       |		case short 				= "short"
   95|       |		case shortTime 			= "short_time"
   96|       |		case shortConvenient 	= "short_convenient"
   97|       |		case narrow 			= "narrow"
   98|       |		case tiny 				= "tiny"
   99|       |		case quantify 			= "quantify"
  100|       |	}
  101|       |
  102|       |}
  103|       |
  104|       |// MARK: - Gradation
  105|       |
  106|       |public extension RelativeFormatter {
  107|       |
  108|       |	/// Gradation is used to define a set of rules used to get the best
  109|       |	/// representation of a given elapsed time interval (ie. the best
  110|       |	/// representation for 300 seconds is in minutes, 5 minutes specifically).
  111|       |	/// Rules are executed in order by the parser and the best one (< elapsed interval)
  112|       |	/// is returned to be used by the formatter.
  113|       |	struct Gradation {
  114|       |
  115|       |		/// A single Gradation rule specification
  116|       |		// swiftlint:disable nesting
  117|       |		public struct Rule {
  118|       |
  119|       |			public enum ThresholdType {
  120|       |				case value(_: Double?)
  121|       |				case function(_: ((TimeInterval) -> (Double?)))
  122|       |
  123|      0|				func evaluateForTimeInterval(_ elapsed: TimeInterval) -> Double? {
  124|      0|					switch self {
  125|      0|					case .value(let value): 		return value
  126|      0|					case .function(let function): 	return function(elapsed)
  127|      0|					}
  128|      0|				}
  129|       |
  130|       |            }
  131|       |
  132|       |            public enum RoundingStrategy {
  133|       |
  134|       |                case regularRound
  135|       |                case ceiling
  136|       |                case flooring
  137|       |                case custom((Double) -> Double)
  138|       |
  139|      0|                func roundValue(_ value: Double) -> Double {
  140|      0|
  141|      0|                    switch self {
  142|      0|                    case .regularRound:                 return round(value)
  143|      0|                    case .ceiling:                      return ceil(value)
  144|      0|                    case .flooring:                     return floor(value)
  145|      0|                    case .custom(let roundingFunction): return roundingFunction(value)
  146|      0|                    }
  147|      0|                }
  148|       |            }
  149|       |
  150|       |			/// The time unit to which the rule refers.
  151|       |			/// It's used to evaluate the factor.
  152|       |			public var unit: Unit
  153|       |
  154|       |			/// Threhsold value of the unit. When a difference between two dates
  155|       |			/// is less than the threshold the unit before this is the best
  156|       |			/// candidate to represent the time interval.
  157|       |			public var threshold: ThresholdType?
  158|       |
  159|       |			/// Granuality threshold of the unit
  160|       |			public var granularity: Double?
  161|       |
  162|       |            /// The rounding strategy that should be used prior to generating the relative time
  163|       |            public var roundingStrategy: RoundingStrategy
  164|       |
  165|       |			/// Relation with a previous threshold
  166|       |			public var thresholdPrevious: [Unit: Double]?
  167|       |
  168|       |			/// You can specify a custom formatter for a rule which return the
  169|       |			/// string representation of a data with your own pattern.
  170|       |			// swiftlint:disable nesting
  171|       |			public typealias CustomFormatter = ((DateRepresentable) -> (String))
  172|       |			public var customFormatter: CustomFormatter?
  173|       |
  174|       |			/// Create a new rule.
  175|       |			///
  176|       |			/// - Parameters:
  177|       |			///   - unit: target time unit.
  178|       |			///   - threshold: threshold value.
  179|       |			///   - granularity: granularity value.
  180|       |			///   - prev: relation with a previous rule in gradation lsit.
  181|       |			///   - formatter: custom formatter.
  182|       |			public init(_ unit: Unit,
  183|       |                        threshold: ThresholdType?,
  184|       |						granularity: Double? = nil,
  185|       |                        roundingStrategy: RoundingStrategy = .regularRound,
  186|       |                        prev: [Unit: Double]? = nil,
  187|      0|                        formatter: CustomFormatter? = nil ) {
  188|      0|				self.unit = unit
  189|      0|				self.threshold = threshold
  190|      0|				self.granularity = granularity
  191|      0|                self.roundingStrategy = roundingStrategy
  192|      0|				self.thresholdPrevious = prev
  193|      0|				self.customFormatter = formatter
  194|      0|			}
  195|       |
  196|       |		}
  197|       |
  198|       |		/// Gradation rules
  199|       |		var rules: [Rule]
  200|       |
  201|       |		/// Number of gradation rules
  202|      0|		var count: Int { return rules.count }
  203|       |
  204|       |		/// Subscript by unit.
  205|       |		/// Return the first rule for given unit.
  206|       |		///
  207|       |		/// - Parameter unit: unit to get.
  208|      0|		public subscript(_ unit: Unit) -> Rule? {
  209|      0|			return rules.first(where: { $0.unit == unit })
  210|      0|		}
  211|       |
  212|       |		/// Subscript by index.
  213|       |		/// Return the rule at given index, `nil` if index is invalid.
  214|       |		///
  215|       |		/// - Parameter index: index
  216|      0|		public subscript(_ index: Int) -> Rule? {
  217|      0|			guard index < rules.count, index >= 0 else { return nil }
  218|      0|			return rules[index]
  219|      0|		}
  220|       |
  221|       |		/// Create a new gradition with a given set of ordered rules.
  222|       |		///
  223|       |		/// - Parameter rules: ordered rules.
  224|      0|		public init(_ rules: [Rule]) {
  225|      0|			self.rules = rules
  226|      0|		}
  227|       |
  228|       |		/// Create a new gradation by removing the units from receiver which are not part of the given array.
  229|       |		///
  230|       |		/// - Parameter units: units to keep.
  231|       |		/// - Returns: a new filtered `Gradation` instance.
  232|      0|		public func filtered(byUnits units: [Unit]) -> Gradation {
  233|      0|			return Gradation(rules.filter { units.contains($0.unit) })
  234|      0|		}
  235|       |
  236|       |		/// Canonical gradation rules
  237|      0|		public static func canonical() -> Gradation {
  238|      0|			return Gradation([
  239|      0|				Rule(.now, threshold: .value(0)),
  240|      0|				Rule(.second, threshold: .value(0.5)),
  241|      0|				Rule(.minute, threshold: .value(59.5)),
  242|      0|				Rule(.hour, threshold: .value(59.5 * 60.0)),
  243|      0|				Rule(.day, threshold: .value(23.5 * 60 * 60)),
  244|      0|				Rule(.week, threshold: .value(6.5 * Unit.day.factor)),
  245|      0|				Rule(.month, threshold: .value(3.5 * 7 * Unit.day.factor)),
  246|      0|				Rule(.year, threshold: .value(1.5 * Unit.month.factor))
  247|      0|				])
  248|      0|		}
  249|       |
  250|       |		/// Convenient gradation rules
  251|      0|		public static func convenient() -> Gradation {
  252|      0|			let list = Gradation([
  253|      0|				Rule(.now, threshold: .value(0)),
  254|      0|				Rule(.second, threshold: .value(1), prev: [.now: 1]),
  255|      0|				Rule(.minute, threshold: .value(45)),
  256|      0|				Rule(.minute, threshold: .value(2.5 * 60), granularity: 5),
  257|      0|				Rule(.halfHour, threshold: .value(22.5 * 60), granularity: 5),
  258|      0|				Rule(.hour, threshold: .value(42.5 * 60), prev: [.minute: 52.5 * 60]),
  259|      0|				Rule(.day, threshold: .value((20.5 / 24) * Unit.day.factor)),
  260|      0|				Rule(.week, threshold: .value(5.5 * Unit.day.factor)),
  261|      0|				Rule(.month, threshold: .value(3.5 * 7 * Unit.day.factor)),
  262|      0|				Rule(.year, threshold: .value(10.5 * Unit.month.factor))
  263|      0|				])
  264|      0|			return list
  265|      0|		}
  266|       |
  267|       |		/// Twitter gradation rules
  268|      0|		public static func twitter() -> Gradation {
  269|      0|			return Gradation([
  270|      0|				Rule(.now, threshold: .value(0)),
  271|      0|				Rule(.second, threshold: .value(1), prev: [.now: 1]),
  272|      0|				Rule(.minute, threshold: .value(45)),
  273|      0|				Rule(.hour, threshold: .value(59.5 * 60.0)),
  274|      0|				Rule(.hour, threshold: .value((1.days.timeInterval - 0.5 * 1.hours.timeInterval))),
  275|      0|				Rule(.day, threshold: .value((20.5 / 24) * Unit.day.factor)),
  276|      0|				Rule(.other, threshold: .function({ now in
  277|      0|					// Jan 1st of the next year.
  278|      0|					let nextYear = (Date(timeIntervalSince1970: now) + 1.years).dateAtStartOf(.year)
  279|      0|					return (nextYear.timeIntervalSince1970 - now)
  280|      0|				}), formatter: { date in // "Apr 11, 2017"
  281|      0|					return date.toFormat("MMM dd, yyyy")
  282|      0|				})
  283|      0|			])
  284|      0|		}
  285|       |
  286|       |	}
  287|       |
  288|       |}
  289|       |
  290|       |// MARK: - Unit
  291|       |
  292|       |public extension RelativeFormatter {
  293|       |
  294|       |	/// Units for relative formatter
  295|       |	enum Unit: String {
  296|       |		case now 		= "now"
  297|       |		case second 	= "second"
  298|       |		case minute 	= "minute"
  299|       |		case hour 		= "hour"
  300|       |		case halfHour 	= "half_hour"
  301|       |		case day 		= "day"
  302|       |		case week 		= "week"
  303|       |		case month 		= "month"
  304|       |		case year 		= "year"
  305|       |		case quarter 	= "quarter"
  306|       |		case other 		= ""
  307|       |
  308|       |		/// Factor of conversion of the unit to seconds
  309|      0|		public var factor: Double {
  310|      0|			switch self {
  311|      0|			case .now, .second: return 1
  312|      0|			case .minute: 		return 1.minutes.timeInterval
  313|      0|			case .hour: 		return 1.hours.timeInterval
  314|      0|			case .halfHour: 	return (1.hours.timeInterval * 0.5)
  315|      0|			case .day: 			return 1.days.timeInterval
  316|      0|			case .week: 		return 1.weeks.timeInterval
  317|      0|			case .month: 		return 1.months.timeInterval
  318|      0|			case .year: 		return 1.years.timeInterval
  319|      0|			case .quarter: 		return (91.days.timeInterval + 6.hours.timeInterval)
  320|      0|			case .other:		return 0
  321|      0|			}
  322|      0|		}
  323|       |
  324|       |	}
  325|       |
  326|       |}
  327|       |
  328|       |internal extension Double {
  329|       |
  330|       |	/// Return -1 if number is negative, 1 if positive
  331|      0|	var sign: Int {
  332|      0|		return (self < 0 ? -1 : 1)
  333|      0|	}
  334|       |
  335|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Formatters/RelativeFormatter/RelativeFormatter.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public class RelativeFormatter: DateToStringTrasformable {
   16|       |
   17|       |	/// Private singleton for relative formatter
   18|       |	private static let shared = RelativeFormatter()
   19|       |
   20|       |	/// Return all languages supported by the library for relative date formatting
   21|      0|	public static var allLanguages: [RelativeFormatterLanguage] {
   22|      0|        return RelativeFormatterLanguage.allCases
   23|      0|	}
   24|       |
   25|      0|	private init() {}
   26|       |
   27|       |	/// Return the language table for a specified locale.
   28|       |	/// If not loaded yet a new instance of the table is loaded and cached.
   29|       |	///
   30|       |	/// - Parameter locale: locale to load
   31|       |	/// - Returns: language table
   32|      0|    private func tableForLocale(_ locale: Locale) -> RelativeFormatterLanguage {
   33|      0|        let localeId = (locale.collatorIdentifier ?? Locales.english.toLocale().collatorIdentifier!)
   34|      0|
   35|      0|        if let lang = RelativeFormatterLanguage(rawValue: localeId) {
   36|      0|            return lang
   37|      0|        }
   38|      0|
   39|      0|        guard let fallbackFlavours = RelativeFormatterLanguage(rawValue: localeId.components(separatedBy: "_").first!) ??
   40|      0|            RelativeFormatterLanguage(rawValue: localeId.components(separatedBy: "-").first!) else {
   41|      0|                return tableForLocale(Locales.english.toLocale()) // fallback not found, return english
   42|      0|        }
   43|      0|        return fallbackFlavours // return fallback
   44|      0|    }
   45|       |
   46|       |	/// Implementation of the protocol for DateToStringTransformable.
   47|      0|	public static func format(_ date: DateRepresentable, options: Any?) -> String {
   48|      0|		let dateToFormat = (date as? DateInRegion ?? DateInRegion(date.date, region: SwiftDate.defaultRegion))
   49|      0|		return RelativeFormatter.format(date: dateToFormat, style: (options as? Style), locale: date.region.locale)
   50|      0|	}
   51|       |
   52|       |	/// Return relative formatted string result of comparison of two passed dates.
   53|       |	///
   54|       |	/// - Parameters:
   55|       |	///   - date: date to compare
   56|       |	///   - toDate: date to compare against for (if `nil` current date in the same region of `date` is used)
   57|       |	///   - style: style of the relative formatter.
   58|       |	///   - locale: locale to use; if not passed the `date`'s region locale is used.
   59|       |	/// - Returns: formatted string, empty string if formatting fails
   60|       |	public static func format(date: DateRepresentable, to toDate: DateRepresentable? = nil,
   61|      0|							  style: Style?, locale fixedLocale: Locale? = nil) -> String {
   62|      0|
   63|      0|		let refDate = (toDate ?? date.region.nowInThisRegion()) // a now() date is created if no reference is passed
   64|      0|		let options = (style ?? RelativeFormatter.defaultStyle()) // default style if not used
   65|      0|		let locale = (fixedLocale ?? date.region.locale) // date's locale is used if no value is forced
   66|      0|
   67|      0|		// how much time elapsed (in seconds)
   68|      0|		let elapsed = (refDate.date.timeIntervalSince1970 - date.date.timeIntervalSince1970)
   69|      0|
   70|      0|		// get first suitable flavour for a given locale
   71|      0|		let (flavour, localeData) = suitableFlavour(inList: options.flavours, forLocale: locale)
   72|      0|		// get all units which can be represented by the locale data for required style
   73|      0|		let allUnits = suitableUnits(inLocaleData: localeData, requiredUnits: options.allowedUnits)
   74|      0|		guard allUnits.count > 0 else {
   75|      0|			debugPrint("Required units in style were not found in locale spec. Returning empty string")
   76|      0|			return ""
   77|      0|		}
   78|      0|
   79|      0|		guard let suitableRule = ruleToRepresent(timeInterval: abs(elapsed),
   80|      0|											   referenceInterval: refDate.date.timeIntervalSince1970,
   81|      0|											   units: allUnits,
   82|      0|											   gradation: options.gradation) else {
   83|      0|			// If no time unit is suitable, just output an empty string.
   84|      0|			// E.g. when "now" unit is not available
   85|      0|			// and "second" has a threshold of `0.5`
   86|      0|			// (e.g. the "canonical" grading scale).
   87|      0|			return ""
   88|      0|		}
   89|      0|
   90|      0|		if let customFormat = suitableRule.customFormatter {
   91|      0|			return customFormat(date)
   92|      0|		}
   93|      0|
   94|      0|		var amount = (abs(elapsed) / suitableRule.unit.factor)
   95|      0|
   96|      0|		// Apply granularity to the time amount
   97|      0|		// (and fallback to the previous step
   98|      0|		//  if the first level of granularity
   99|      0|		//  isn't met by this amount)
  100|      0|		if let granularity = suitableRule.granularity {
  101|      0|			// Recalculate the elapsed time amount based on granularity
  102|      0|			amount = round(amount / granularity) * granularity
  103|      0|		}
  104|      0|
  105|      0|		let value: Double = -1.0 * Double(elapsed.sign) * suitableRule.roundingStrategy.roundValue(amount)
  106|      0|		let formatString = relativeFormat(locale: locale, flavour: flavour, value: value, unit: suitableRule.unit)
  107|      0|		return formatString.replacingOccurrences(of: "{0}", with: String(Int(abs(value))))
  108|      0|	}
  109|       |
  110|      0|	private static func relativeFormat(locale: Locale, flavour: Flavour, value: Double, unit: Unit) -> String {
  111|      0|        let table = RelativeFormatter.shared.tableForLocale(locale)
  112|      0|		guard let styleTable = table.flavours[flavour.rawValue] as? [String: Any] else {
  113|      0|			return ""
  114|      0|		}
  115|      0|
  116|      0|		if let fixedValue = styleTable[unit.rawValue] as? String {
  117|      0|			return fixedValue
  118|      0|		}
  119|      0|
  120|      0|		guard let unitRules = styleTable[unit.rawValue] as? [String: Any] else {
  121|      0|			return ""
  122|      0|		}
  123|      0|
  124|      0|    // Choose either "previous", "past", "current", "next" or "future" based on time `value` sign.
  125|      0|    // If "next" is not present, we fallback on "future"
  126|      0|    // If "previous" is not present, we fallback on "past"
  127|      0|    // If "current" is not present, we fallback on "past"
  128|      0|    // If "past" is same as "future" then they're stored as "other".
  129|      0|    // If there's only "other" then it's being collapsed.
  130|      0|    let quantifierKey: String
  131|      0|
  132|      0|    switch value {
  133|      0|    case -1 where unitRules["previous"] != nil: // If it is previous value -1, and previous unitRule exist
  134|      0|      quantifierKey = "previous"
  135|      0|    case 0 where unitRules["current"] != nil: // If it is current value 0, and current unitRule exist
  136|      0|      quantifierKey = "current"
  137|      0|    case ...0: // If value is up to 0 included, also fallback when current or previous isn't found
  138|      0|      quantifierKey = "past"
  139|      0|    case 1 where unitRules["next"] != nil: // If it is next value 1, and next unitRule exist
  140|      0|      quantifierKey = "next"
  141|      0|    case 1...: // If it is future value >0, and fallback if next isn't found
  142|      0|      quantifierKey = "future"
  143|      0|    default: // Should never happen
  144|      0|      fatalError()
  145|      0|    }
  146|      0|
  147|      0|		if let fixedValue = unitRules[quantifierKey] as? String {
  148|      0|			return fixedValue
  149|      0|		} else if let quantifierRules = unitRules[quantifierKey] as? [String: Any] {
  150|      0|			// plurar/translations forms
  151|      0|			// "other" rule is supposed to always be present.
  152|      0|			// If only "other" rule is present then "rules" is not an object and is a string.
  153|      0|			let quantifier = (table.quantifyKey(forValue: abs(value)) ?? .other).rawValue
  154|      0|			if let relativeFormat = quantifierRules[quantifier] as? String {
  155|      0|				return relativeFormat
  156|      0|			} else {
  157|      0|				return quantifierRules[RelativeFormatter.PluralForm.other.rawValue] as? String ?? ""
  158|      0|			}
  159|      0|		} else {
  160|      0|			return ""
  161|      0|		}
  162|      0|	}
  163|       |
  164|       |	/// Return the first suitable flavour into the list which is available for a given locale.
  165|       |	///
  166|       |	/// - Parameters:
  167|       |	///   - flavours: ordered flavours.
  168|       |	///   - locale: locale to use.
  169|       |	/// - Returns: a pair of found flavor and locale table
  170|      0|	private static func suitableFlavour(inList flavours: [Flavour], forLocale locale: Locale) -> (flavour: Flavour, locale: [String: Any]) {
  171|      0|        let localeData = RelativeFormatter.shared.tableForLocale(locale) // get the locale table
  172|      0|		for flavour in flavours {
  173|      0|			if let flavourData = localeData.flavours[flavour.rawValue] as? [String: Any] {
  174|      0|				return (flavour, flavourData) // found our required flavor in passed locale
  175|      0|			}
  176|      0|		}
  177|      0|		// long must be always present
  178|      0|		// swiftlint:disable force_cast
  179|      0|		return (.long, localeData.flavours[Flavour.long.rawValue] as! [String: Any])
  180|      0|	}
  181|       |
  182|       |	/// Return a list of available time units in locale filtered by required units of style.
  183|       |	/// If resulting array if empty there is not any time unit which can be rapresented with given locale
  184|       |	/// so formatting fails.
  185|       |	///
  186|       |	/// - Parameters:
  187|       |	///   - localeData: local table.
  188|       |	///   - styleUnits: required time units.
  189|       |	/// - Returns: available units.
  190|      0|	private static func suitableUnits(inLocaleData localeData: [String: Any], requiredUnits styleUnits: [Unit]?) -> [Unit] {
  191|      0|		let localeUnits: [Unit] = localeData.keys.compactMap { Unit(rawValue: $0) }
  192|      0|		guard let restrictedStyleUnits = styleUnits else { return localeUnits } // no restrictions
  193|      0|		return localeUnits.filter({ restrictedStyleUnits.contains($0) })
  194|      0|	}
  195|       |
  196|       |	/// Return the best rule in gradation to represent given time interval.
  197|       |	///
  198|       |	/// - Parameters:
  199|       |	///   - elapsed: elapsed interval to represent
  200|       |	///   - referenceInterval: reference interval
  201|       |	///   - units: units
  202|       |	///   - gradation: gradation
  203|       |	/// - Returns: best rule to represent
  204|      0|	private static func ruleToRepresent(timeInterval elapsed: TimeInterval, referenceInterval: TimeInterval, units: [Unit], gradation: Gradation) -> Gradation.Rule? {
  205|      0|		// Leave only allowed time measurement units.
  206|      0|		// E.g. omit "quarter" unit.
  207|      0|		let filteredGradation = gradation.filtered(byUnits: units)
  208|      0|		// If no steps of gradation fit the conditions
  209|      0|		// then return nothing.
  210|      0|		guard gradation.count > 0 else {
  211|      0|			return nil
  212|      0|		}
  213|      0|
  214|      0|		// Find the most appropriate gradation step
  215|      0|		let i = findGradationStep(elapsed: elapsed, now: referenceInterval, gradation: filteredGradation)
  216|      0|		guard i >= 0 else {
  217|      0|			return nil
  218|      0|		}
  219|      0|		let step = filteredGradation[i]!
  220|      0|
  221|      0|		// Apply granularity to the time amount
  222|      0|		// (and fall back to the previous step
  223|      0|		//  if the first level of granularity
  224|      0|		//  isn't met by this amount)
  225|      0|		if let granurality = step.granularity {
  226|      0|			// Recalculate the elapsed time amount based on granularity
  227|      0|			let amount = round( (elapsed / step.unit.factor) / granurality) * granurality
  228|      0|
  229|      0|			// If the granularity for this step
  230|      0|			// is too high, then fallback
  231|      0|			// to the previous step of gradation.
  232|      0|			// (if there is any previous step of gradation)
  233|      0|			if amount == 0 && i > 0 {
  234|      0|				return filteredGradation[i - 1]
  235|      0|			}
  236|      0|		}
  237|      0|		return step
  238|      0|	}
  239|       |
  240|      0|	private static func findGradationStep(elapsed: TimeInterval, now: TimeInterval, gradation: Gradation, step: Int = 0) -> Int {
  241|      0|		// If the threshold for moving from previous step
  242|      0|		// to this step is too high then return the previous step.
  243|      0|		let fromGradation = gradation[step - 1]
  244|      0|		let currentGradation = gradation[step]!
  245|      0|		let thresholdValue = threshold(from: fromGradation, to: currentGradation, now: now)
  246|      0|
  247|      0|		if let t = thresholdValue, elapsed < t {
  248|      0|			return step - 1
  249|      0|		}
  250|      0|
  251|      0|		// If it's the last step of gradation then return it.
  252|      0|		if step == (gradation.count - 1) {
  253|      0|			return step
  254|      0|		}
  255|      0|		// Move to the next step.
  256|      0|		return findGradationStep(elapsed: elapsed, now: now, gradation: gradation, step: step + 1)
  257|      0|	}
  258|       |
  259|       |	/// Evaluate threshold.
  260|      0|	private static func threshold(from fromRule: Gradation.Rule?, to toRule: Gradation.Rule, now: TimeInterval) -> Double? {
  261|      0|		var threshold: Double?
  262|      0|
  263|      0|		// Allows custom thresholds when moving
  264|      0|		// from a specific step to a specific step.
  265|      0|		if let fromStepUnit = fromRule?.unit {
  266|      0|			threshold = toRule.thresholdPrevious?[fromStepUnit]
  267|      0|		}
  268|      0|
  269|      0|		// If no custom threshold is set for this transition
  270|      0|		// then use the usual threshold for the next step.
  271|      0|		if threshold == nil {
  272|      0|			threshold = toRule.threshold?.evaluateForTimeInterval(now)
  273|      0|		}
  274|      0|
  275|      0|		return threshold
  276|      0|	}
  277|       |
  278|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Formatters/RelativeFormatter/RelativeFormatterLanguage.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |internal class RelativeFormatterLanguagesCache {
   16|       |
   17|       |    static let shared = RelativeFormatterLanguagesCache()
   18|       |
   19|       |    @Atomic
   20|      0|    private(set) var cachedValues = [String: [String: Any]]()
   21|       |    
   22|      0|    func flavoursForLocaleID(_ langID: String) -> [String: Any]? {
   23|      0|        do {
   24|      0|            
   25|      0|            guard let cachedValue = cachedValues[langID] else {
   26|      0|                var fileURL = Bundle.appModule?.url(forResource: langID, withExtension: "json", subdirectory: "langs")
   27|      0|                if fileURL == nil {
   28|      0|                    fileURL = Bundle(for: RelativeFormatter.self).resourceURL?.appendingPathComponent("langs/\(langID).json")
   29|      0|                }
   30|      0|                
   31|      0|                guard let fullURL = fileURL else {
   32|      0|                    return nil
   33|      0|                }
   34|      0|                let data = try Data(contentsOf: fullURL)
   35|      0|                let json = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments)
   36|      0|
   37|      0|                if let value = json as? [String: Any] {
   38|      0|                    cachedValues[langID] = value
   39|      0|                    return value
   40|      0|                }
   41|      0|                return nil
   42|      0|            }
   43|      0|            
   44|      0|            return cachedValue
   45|      0|
   46|      0|        } catch {
   47|      0|            debugPrint("Failed to read data for language id: \(langID)")
   48|      0|            return nil
   49|      0|        }
   50|      0|    }
   51|       |}
   52|       |
   53|       |public enum RelativeFormatterLanguage: String, CaseIterable {
   54|       |    case af = "af" // Locales.afrikaans
   55|       |    case am = "am" // Locales.amharic
   56|       |    case ar_AE = "ar_AE" // Locales.arabicUnitedArabEmirates
   57|       |    case ar = "ar" // Locales.arabic
   58|       |    case `as` = "as" // Locales.assamese
   59|       |    case az = "az" // Locales.assamese
   60|       |    case be = "be" // Locales.belarusian
   61|       |    case bg = "bg" // Locales.bulgarian
   62|       |    case bn = "bn" // Locales.bengali
   63|       |    case br = "br" // Locales.breton
   64|       |    case bs = "bs" // Locales.bosnian
   65|       |    case bs_Cyrl = "bs-Cyrl" // Locales.belarusian
   66|       |    case ca = "ca" // Locales.catalan
   67|       |    case cz = "cz" // Locales.czech
   68|       |    case cy = "cy" // Locales.welsh
   69|       |    case cs = "cs" // Locales.czech
   70|       |    case da = "da" // Locales.danish
   71|       |    case de = "de" // Locales.dutch
   72|       |    case dsb = "dsb" // Locales.lowerSorbian
   73|       |    case dz = "dz" // Locales.dzongkha
   74|       |    case ee = "ee" // Locales.ewe
   75|       |    case el = "el" // Locales.greek
   76|       |    case en = "en" // Locales.english
   77|       |    case es_AR = "es_AR" // Locales.spanishArgentina
   78|       |    case es_PY = "es_PY" // Locales.spanishParaguay
   79|       |    case es_MX = "es_MX" // Locales.spanishMexico
   80|       |    case es_US = "es_US" // Locales.spanishUnitedStates
   81|       |    case es = "es" // Locales.spanish
   82|       |    case et = "et" // Locales.estonian
   83|       |    case eu = "eu" // Locales.basque
   84|       |    case fa = "fa" // Locales.persian
   85|       |    case fi = "fi" // Locales.finnish
   86|       |    case fil = "fil" // Locales.filipino
   87|       |    case fo = "fo" // Locales.faroese
   88|       |    case fr_CA = "fr_CA" // French (Canada)
   89|       |    case fr = "fr" // French
   90|       |    case fur = "fur" // Friulian
   91|       |    case fy = "fy" // Western Frisian
   92|       |    case ga = "ga" // Irish
   93|       |    case gd = "gd" // Scottish Gaelic
   94|       |    case gl = "gl" // Galician
   95|       |    case gu = "gu" // Gujarati
   96|       |    case he = "he" // Hebrew
   97|       |    case hi = "hi" // Hindi
   98|       |    case hr = "hr" // Croatian
   99|       |    case hsb = "hsb" // Upper Sorbian
  100|       |    case hu = "hu" // Hungarian
  101|       |    case hy = "hy" // Armenian
  102|       |    case id = "id" // Indonesian
  103|       |    case `is` = "is" // Icelandic
  104|       |    case it = "it" // Locales.italian
  105|       |    case ja = "ja" // Japanese
  106|       |    case jgo = "jgo" // Ngomba
  107|       |    case ka = "ka" // Georgian
  108|       |    case kea = "kea" // Kabuverdianu
  109|       |    case kk = "kk" // Kazakh
  110|       |    case kl = "kl" // Kalaallisut
  111|       |    case km = "km" // Khmer
  112|       |    case kn = "kn" // Kannada
  113|       |    case ko = "ko" // Korean
  114|       |    case kok = "kok" // Konkani
  115|       |    case ksh = "ksh" // Colognian
  116|       |    case ky = "ky" // Kyrgyz
  117|       |    case lb = "lb" // Luxembourgish
  118|       |    case lkt = "lkt" // Lakota
  119|       |    case lo = "lo" // Lao
  120|       |    case lt = "lt" // Lithuanian
  121|       |    case lv = "lv" // Latvian
  122|       |    case mk = "mk" // Macedonian
  123|       |    case ml = "ml" // Malayalam
  124|       |    case mn = "mn" // Mongolian
  125|       |    case mr = "mr" // Marathi
  126|       |    case ms = "ms" // Malay
  127|       |    case mt = "mt" // Maltese
  128|       |    case my = "my" // Burmese
  129|       |    case mzn = "mzn" // Mazanderani
  130|       |    case nb = "nb" // Norwegian Bokmål
  131|       |    case ne = "ne" // Nepali
  132|       |    case nl = "nl" // Netherland
  133|       |    case nn = "nn" // Norwegian Nynorsk
  134|       |    case or = "or" // Odia
  135|       |    case pa = "pa" // Punjabi
  136|       |    case pl = "pl" // Polish
  137|       |    case ps = "ps" // Pashto
  138|       |    case pt = "pt" // Portuguese
  139|       |    case ro = "ro" // Romanian
  140|       |    case ru = "ru" // Russian
  141|       |    case sah = "sah" // Sakha
  142|       |    case sd = "sd" // Sindhi
  143|       |    case se_FI = "se_FI" // Northern Sami (Finland)
  144|       |    case se = "se" // Northern Sami
  145|       |    case si = "si" // Sinhala
  146|       |    case sk = "sk" // Slovak
  147|       |    case sl = "sl" // Slovenian
  148|       |    case sq = "sq" // Albanian
  149|       |    case sr_Latn = "sr_Latn" // Serbian (Latin)
  150|       |    case sr = "sr" // Serbian
  151|       |    case sv = "sv" // Swedish
  152|       |    case sw = "sw" // Swedish
  153|       |    case ta = "ta" // Tamil
  154|       |    case te = "te" // Telugu
  155|       |    case th = "th" // Thai
  156|       |    case ti = "ti" // Tigrinya
  157|       |    case tk = "tk" // Turkmen
  158|       |    case to = "to" // Tongan
  159|       |    case tr = "tr" // Turkish
  160|       |    case ug = "ug" // Uyghur
  161|       |    case uk = "uk" // Ukrainian
  162|       |    case ur_IN = "ur_IN" // Urdu (India)
  163|       |    case ur = "ur" // Urdu
  164|       |    case uz_Cyrl = "uz_Cyrl" // Uzbek (Cyrillic)
  165|       |    case uz = "uz" // Uzbek (Cyrillic)
  166|       |    case vi = "vi" // Vietnamese
  167|       |    case wae = "wae" // Walser
  168|       |    case yue_Hans = "yue_Hans" // Cantonese (Simplified)
  169|       |    case yue_Hant = "yue_Hant" // Cantonese (Traditional)
  170|       |    case zh_Hans_HK = "zh_Hans_HK" // Chinese (Simplified, Hong Kong [China])
  171|       |    case zh_Hans_MO = "zh_Hans_MO" // Chinese (Simplified, Macau [China])
  172|       |    case zh_Hans_SG = "zh_Hans_SG" // Chinese (Simplified, Singapore)
  173|       |    case zh_Hant_HK = "zh_Hant_HK" // Chinese (Traditional, Hong Kong [China])
  174|       |    case zh_Hant_MO = "zh_Hant_MO" // Chinese (Traditional, Macau [China])
  175|       |    case zh_Hans = "zh_Hans" // Chinese (Simplified)
  176|       |    case zh_Hant = "zh_Hant" // Chinese (Traditional)
  177|       |    case zh = "zh" // Chinese
  178|       |    case zu = "zu" // Zulu
  179|       |
  180|       |    /// Table with the data of the language.
  181|       |    /// Data is structured in:
  182|       |    /// { flavour: { unit : { data } } }
  183|      0|    public var flavours: [String: Any] {
  184|      0|        return RelativeFormatterLanguagesCache.shared.flavoursForLocaleID(self.rawValue) ?? [:]
  185|      0|    }
  186|       |
  187|      0|    public var identifier: String {
  188|      0|        return self.rawValue
  189|      0|    }
  190|       |
  191|      0|    public func quantifyKey(forValue value: Double) -> RelativeFormatter.PluralForm? {
  192|      0|        switch self {
  193|      0|
  194|      0|        case .sr_Latn, .sr, .uk:
  195|      0|            let mod10 = Int(value) % 10
  196|      0|            let mod100 = Int(value) % 100
  197|      0|
  198|      0|            switch mod10 {
  199|      0|            case 1:
  200|      0|                switch mod100 {
  201|      0|                case 11:
  202|      0|                    break
  203|      0|                default:
  204|      0|                    return .one
  205|      0|                }
  206|      0|            case 2, 3, 4:
  207|      0|                switch mod100 {
  208|      0|                case 12, 13, 14:
  209|      0|                    break
  210|      0|                default:
  211|      0|                    return .few
  212|      0|                }
  213|      0|            default:
  214|      0|                break
  215|      0|            }
  216|      0|
  217|      0|            return .many
  218|      0|
  219|      0|        case .ru, .sk, .sl:
  220|      0|            let mod10 = Int(value) % 10
  221|      0|            let mod100 = Int(value) % 100
  222|      0|
  223|      0|            switch mod100 {
  224|      0|            case 11...14:
  225|      0|                break
  226|      0|
  227|      0|            default:
  228|      0|                switch mod10 {
  229|      0|                case 1:
  230|      0|                    return .one
  231|      0|                case 2...4:
  232|      0|                    return .few
  233|      0|                default:
  234|      0|                    break
  235|      0|                }
  236|      0|
  237|      0|            }
  238|      0|            return .many
  239|      0|
  240|      0|        case .ro:
  241|      0|            let mod100 = Int(value) % 100
  242|      0|
  243|      0|            switch value {
  244|      0|            case 0:
  245|      0|                return .few
  246|      0|            case 1:
  247|      0|                return .one
  248|      0|            default:
  249|      0|                if mod100 > 1 && mod100 <= 19 {
  250|      0|                    return .few
  251|      0|                }
  252|      0|            }
  253|      0|
  254|      0|            return .other
  255|      0|
  256|      0|        case .pa:
  257|      0|            switch value {
  258|      0|            case 0, 1:
  259|      0|                return .one
  260|      0|            default:
  261|      0|                return .other
  262|      0|            }
  263|      0|
  264|      0|        case .mt:
  265|      0|            switch value {
  266|      0|            case 1: return .one
  267|      0|            case 0: return .few
  268|      0|            case 2...10: return .few
  269|      0|            case 11...19: return .many
  270|      0|            default: return .other
  271|      0|            }
  272|      0|
  273|      0|        case .lt, .lv:
  274|      0|            let mod10 = Int(value) % 10
  275|      0|            let mod100 = Int(value) % 100
  276|      0|
  277|      0|            if value == 0 {
  278|      0|                return .zero
  279|      0|            }
  280|      0|
  281|      0|            if value == 1 {
  282|      0|                return .one
  283|      0|            }
  284|      0|
  285|      0|            switch mod10 {
  286|      0|            case 1:
  287|      0|                if mod100 != 11 {
  288|      0|                    return .one
  289|      0|                }
  290|      0|                return .many
  291|      0|            default:
  292|      0|                return .many
  293|      0|            }
  294|      0|
  295|      0|        case .ksh, .se:
  296|      0|            switch value {
  297|      0|            case 0: return .zero
  298|      0|            case 1: return .one
  299|      0|            default: return .other
  300|      0|            }
  301|      0|
  302|      0|        case .`is`:
  303|      0|            let mod10 = Int(value) % 10
  304|      0|            let mod100 = Int(value) % 100
  305|      0|
  306|      0|            if value == 0 {
  307|      0|                return .zero
  308|      0|            }
  309|      0|
  310|      0|            if value == 1 {
  311|      0|                return .one
  312|      0|            }
  313|      0|
  314|      0|            switch mod10 {
  315|      0|            case 1:
  316|      0|                if mod100 != 11 {
  317|      0|                    return .one
  318|      0|                }
  319|      0|            default:
  320|      0|                break
  321|      0|            }
  322|      0|
  323|      0|            return .many
  324|      0|
  325|      0|        case .id, .ja, .ms, .my, .mzn, .sah, .se_FI, .si, .th, .yue_Hans, .yue_Hant,
  326|      0|             .zh_Hans_HK, .zh_Hans_MO, .zh_Hans_SG, .zh_Hant_HK, .zh_Hant_MO, .zh:
  327|      0|
  328|      0|            return .other
  329|      0|
  330|      0|        case .hy:
  331|      0|            return (value >= 0 && value < 2 ? .one : .other)
  332|      0|
  333|      0|        case .ga, .gd:
  334|      0|            switch Int(value) {
  335|      0|            case 1: return .one
  336|      0|            case 2: return .two
  337|      0|            case 3...6: return .few
  338|      0|            case 7...10: return .many
  339|      0|            default: return .other
  340|      0|            }
  341|      0|
  342|      0|        case .fr_CA, .fr:
  343|      0|            return (value >= 0 && value < 2 ? .one : .other)
  344|      0|
  345|      0|        case .dz, .kea, .ko, .kok, .lkt, .lo:
  346|      0|            return nil
  347|      0|
  348|      0|        case .cs: // Locales.czech
  349|      0|            switch value {
  350|      0|            case 1:
  351|      0|                return .one
  352|      0|            case 2, 3, 4:
  353|      0|                return .few
  354|      0|            default:
  355|      0|                return .other
  356|      0|            }
  357|      0|
  358|      0|        case .cy:
  359|      0|            switch value {
  360|      0|            case 0:    return .zero
  361|      0|            case 1: return .one
  362|      0|            case 2: return .two
  363|      0|            case 3: return .few
  364|      0|            case 6: return .many
  365|      0|            default: return .other
  366|      0|            }
  367|      0|
  368|      0|        case .cz, .dsb:
  369|      0|            switch value {
  370|      0|            case 1:
  371|      0|                return .one
  372|      0|            case 2, 3, 4:
  373|      0|                return .few
  374|      0|            default:
  375|      0|                return .other
  376|      0|            }
  377|      0|
  378|      0|        case .br:
  379|      0|            let n = Int(value)
  380|      0|            return n % 10 == 1 && n % 100 != 11 && n % 100 != 71 && n % 100 != 91 ? .zero : n % 10 == 2 && n % 100 != 12 && n % 100 != 72 && n % 100 != 92 ? .one : (n % 10 == 3 || n % 10 == 4 || n % 10 == 9) && n % 100 != 13 && n % 100 != 14 && n % 100 != 19 && n % 100 != 73 && n % 100 != 74 && n % 100 != 79 && n % 100 != 93 && n % 100 != 94 && n % 100 != 99 ? .two : n % 1_000_000 == 0 && n != 0 ? .many : .other
  381|      0|
  382|      0|        case .be, .bs, .bs_Cyrl, .hr, .hsb, .pl:
  383|      0|            let mod10 = Int(value) % 10
  384|      0|            let mod100 = Int(value) % 100
  385|      0|
  386|      0|            switch mod10 {
  387|      0|            case 1:
  388|      0|                switch mod100 {
  389|      0|                case 11:
  390|      0|                    break
  391|      0|                default:
  392|      0|                    return .one
  393|      0|                }
  394|      0|            case 2, 3, 4:
  395|      0|                switch mod100 {
  396|      0|                case 12, 13, 14:
  397|      0|                    break
  398|      0|                default:
  399|      0|                    return .few
  400|      0|                }
  401|      0|            default:
  402|      0|                break
  403|      0|            }
  404|      0|            return .many
  405|      0|
  406|      0|        case .ar, .ar_AE, .he:
  407|      0|            switch value {
  408|      0|            case 0: return .zero
  409|      0|            case 1: return .one
  410|      0|            case 2: return .two
  411|      0|            default:
  412|      0|                let mod100 = Int(value) % 100
  413|      0|                if mod100 >= 3 && mod100 <= 10 {
  414|      0|                    return .few
  415|      0|                } else if mod100 >= 11 {
  416|      0|                    return .many
  417|      0|                } else {
  418|      0|                    return .other
  419|      0|                }
  420|      0|            }
  421|      0|
  422|      0|        case .am, .bn, .fa, .gu, .kn, .mr, .zu:
  423|      0|            return (value >= 0 && value <= 1 ? .one : .other)
  424|      0|
  425|      0|        default:
  426|      0|            return (value == 1 ? .one : .other)
  427|      0|
  428|      0|        }
  429|      0|    }
  430|       |
  431|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Foundation+Extras/DateComponents+Extras.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |// MARK: - Date Components Extensions
   16|       |
   17|       |public extension Calendar.Component {
   18|       |
   19|       |	/// Return a description of the calendar component in seconds.
   20|       |	/// Note: 	Values for `era`,`weekday`,`weekdayOrdinal`, `yearForWeekOfYear`, `calendar`, `timezone` are `nil`.
   21|       |	/// 		For `weekOfYear` it return the same value of `weekOfMonth`.
   22|      0|	var timeInterval: Double? {
   23|      0|		switch self {
   24|      0|		case .era: 						return nil
   25|      0|		case .year: 					return (Calendar.Component.day.timeInterval! * 365.0)
   26|      0|		case .month: 					return (Calendar.Component.minute.timeInterval! * 43800)
   27|      0|		case .day: 						return 86400
   28|      0|		case .hour: 					return 3600
   29|      0|		case .minute: 					return 60
   30|      0|		case .second: 					return 1
   31|      0|		case .quarter: 					return (Calendar.Component.day.timeInterval! * 91.25)
   32|      0|		case .weekOfMonth, .weekOfYear: return (Calendar.Component.day.timeInterval! * 7)
   33|      0|		case .nanosecond: 				return 1e-9
   34|      0|		default: 						return nil
   35|      0|		}
   36|      0|	}
   37|       |
   38|       |	/// Return the localized identifier of a calendar component
   39|       |	///
   40|       |	/// - parameter unit:  unit
   41|       |	/// - parameter value: value
   42|       |	///
   43|       |	/// - returns: return the plural or singular form of the time unit used to compose a valid identifier for search a localized
   44|       |	///   string in resource bundle
   45|      0|	internal func localizedKey(forValue value: Int) -> String {
   46|      0|		let locKey = localizedKey
   47|      0|		let absValue = abs(value)
   48|      0|		switch absValue {
   49|      0|		case 0: // zero difference for this unit
   50|      0|			return "0\(locKey)"
   51|      0|		case 1: // one unit of difference
   52|      0|			return locKey
   53|      0|		default: // more than 1 unit of difference
   54|      0|			return "\(locKey)\(locKey)"
   55|      0|		}
   56|      0|	}
   57|       |
   58|      0|	internal var localizedKey: String {
   59|      0|		switch self {
   60|      0|		case .year:			return "y"
   61|      0|		case .month:		return "m"
   62|      0|		case .weekOfYear:	return "w"
   63|      0|		case .day:			return "d"
   64|      0|		case .hour:			return "h"
   65|      0|		case .minute:		return "M"
   66|      0|		case .second:		return "s"
   67|      0|		default:
   68|      0|			return ""
   69|      0|		}
   70|      0|	}
   71|       |
   72|       |}
   73|       |
   74|       |public extension DateComponents {
   75|       |
   76|       |	/// Shortcut for 'all calendar components'.
   77|      0|	static var allComponentsSet: Set<Calendar.Component> {
   78|      0|		return [.era, .year, .month, .day, .hour, .minute,
   79|      0|				.second, .weekday, .weekdayOrdinal, .quarter,
   80|      0|				.weekOfMonth, .weekOfYear, .yearForWeekOfYear,
   81|      0|				.nanosecond, .calendar, .timeZone]
   82|      0|	}
   83|       |
   84|       |	internal static let allComponents: [Calendar.Component] =  [.nanosecond, .second, .minute, .hour,
   85|       |																.day, .month, .year, .yearForWeekOfYear,
   86|       |																.weekOfYear, .weekday, .quarter, .weekdayOrdinal,
   87|       |																.weekOfMonth]
   88|       |
   89|       |	/// This function return the absolute amount of seconds described by the components of the receiver.
   90|       |	/// Note: 	evaluated value maybe not strictly exact because it ignore the context (calendar/date) of
   91|       |	/// 		the date components. In details:
   92|       |	/// 		- The following keys are ignored: `era`,`weekday`,`weekdayOrdinal`,
   93|       |	///				`weekOfYear`, `yearForWeekOfYear`, `calendar`, `timezone
   94|       |	///
   95|       |	/// Some other values dependant from dates are fixed. This is a complete table:
   96|       |	///			- `year` is 365.0 `days`
   97|       |	///			- `month` is 30.4167 `days` (or 43800 minutes)
   98|       |	///			- `quarter` is 91.25 `days`
   99|       |	///			- `weekOfMonth` is 7 `days`
  100|       |	///			- `day` is 86400 `seconds`
  101|       |	///			- `hour` is 3600 `seconds`
  102|       |	///			- `minute` is 60 `seconds`
  103|       |	///			- `nanosecond` is 1e-9 `seconds`
  104|      0|	var timeInterval: TimeInterval {
  105|      0|		var totalAmount: TimeInterval = 0
  106|      0|		DateComponents.allComponents.forEach {
  107|      0|			if let multipler = $0.timeInterval, let value = value(for: $0), value != Int(NSDateComponentUndefined) {
  108|      0|				totalAmount += (TimeInterval(value) * multipler)
  109|      0|			}
  110|      0|		}
  111|      0|		return totalAmount
  112|      0|	}
  113|       |
  114|       |	/// Create a new `DateComponents` instance with builder pattern.
  115|       |	///
  116|       |	/// - Parameter builder: callback for builder
  117|       |	/// - Returns: new instance
  118|      0|	static func create(_ builder: ((inout DateComponents) -> Void)) -> DateComponents {
  119|      0|		var components = DateComponents()
  120|      0|		builder(&components)
  121|      0|		return components
  122|      0|	}
  123|       |
  124|       |	/// Return the current date plus the receive's interval
  125|       |	/// The default calendar used is the `SwiftDate.defaultRegion`'s calendar.
  126|      0|	var fromNow: Date {
  127|      0|		return SwiftDate.defaultRegion.calendar.date(byAdding: (self as DateComponents) as DateComponents, to: Date() as Date)!
  128|      0|	}
  129|       |
  130|       |	/// Returns the current date minus the receiver's interval
  131|       |	/// The default calendar used is the `SwiftDate.defaultRegion`'s calendar.
  132|      0|	var ago: Date {
  133|      0|		return SwiftDate.defaultRegion.calendar.date(byAdding: -self as DateComponents, to: Date())!
  134|      0|	}
  135|       |
  136|       |	/// - returns: the date that will occur once the receiver's components pass after the provide date.
  137|      0|	func from(_ date: DateRepresentable) -> Date? {
  138|      0|		return date.calendar.date(byAdding: self, to: date.date)
  139|      0|	}
  140|       |
  141|       |	/// Return `true` if all interval components are zeroes
  142|      0|	var isZero: Bool {
  143|      0|		for component in DateComponents.allComponents {
  144|      0|			if let value = value(for: component), value != 0 {
  145|      0|				return false
  146|      0|			}
  147|      0|		}
  148|      0|		return true
  149|      0|	}
  150|       |
  151|       |	/// Transform a `DateComponents` instance to a dictionary where key is the `Calendar.Component` and value is the
  152|       |	/// value associated.
  153|       |	///
  154|       |	/// - returns: a new `[Calendar.Component : Int]` dict representing source `DateComponents` instance
  155|      0|	internal func toDict() -> [Calendar.Component: Int] {
  156|      0|		var list: [Calendar.Component: Int] = [:]
  157|      0|		DateComponents.allComponents.forEach { component in
  158|      0|			let value = self.value(for: component)
  159|      0|			if value != nil && value != Int(NSDateComponentUndefined) {
  160|      0|				list[component] = value!
  161|      0|			}
  162|      0|		}
  163|      0|		return list
  164|      0|	}
  165|       |
  166|       |	/// Alter date components specified into passed dictionary.
  167|       |	///
  168|       |	/// - Parameter components: components dictionary with their values.
  169|      0|	internal mutating func alterComponents(_ components: [Calendar.Component: Int?]) {
  170|      0|		components.forEach {
  171|      0|			if let v = $0.value {
  172|      0|				setValue(v, for: $0.key)
  173|      0|			}
  174|      0|		}
  175|      0|	}
  176|       |
  177|       |	/// Adds two NSDateComponents and returns their combined individual components.
  178|      0|	static func + (lhs: DateComponents, rhs: DateComponents) -> DateComponents {
  179|      0|		return combine(lhs, rhs: rhs, transform: +)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1poiyA2C_ACtFZS2i_SitcSimcfu_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1poiyA2C_ACtFZS2i_SitcSimcfu_S2i_Sitcfu0_
  ------------------
  180|      0|	}
  181|       |
  182|       |	/// Subtracts two NSDateComponents and returns the relative difference between them.
  183|      0|	static func - (lhs: DateComponents, rhs: DateComponents) -> DateComponents {
  184|      0|		return lhs + (-rhs)
  185|      0|	}
  186|       |
  187|       |	/// Applies the `transform` to the two `T` provided, defaulting either of them if it's
  188|       |	/// `nil`
  189|      0|	internal static func bimap<T>(_ a: T?, _ b: T?, default: T, _ transform: (T, T) -> T) -> T? {
  190|      0|		if a == nil && b == nil { return nil }
  191|      0|		return transform(a ?? `default`, b ?? `default`)
  192|      0|	}
  193|       |
  194|       |	/// - returns: a new `NSDateComponents` that represents the negative of all values within the
  195|       |	/// components that are not `NSDateComponentUndefined`.
  196|      0|	static prefix func - (rhs: DateComponents) -> DateComponents {
  197|      0|		var components = DateComponents()
  198|      0|		components.era = rhs.era.map(-)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu_S2icfu0_
  ------------------
  199|      0|		components.year = rhs.year.map(-)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu1_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu1_S2icfu2_
  ------------------
  200|      0|		components.month = rhs.month.map(-)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu3_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu3_S2icfu4_
  ------------------
  201|      0|		components.day = rhs.day.map(-)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu5_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu5_S2icfu6_
  ------------------
  202|      0|		components.hour = rhs.hour.map(-)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu7_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu7_S2icfu8_
  ------------------
  203|      0|		components.minute = rhs.minute.map(-)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu9_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu9_S2icfu10_
  ------------------
  204|      0|		components.second = rhs.second.map(-)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu11_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu11_S2icfu12_
  ------------------
  205|      0|		components.nanosecond = rhs.nanosecond.map(-)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu13_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu13_S2icfu14_
  ------------------
  206|      0|		components.weekday = rhs.weekday.map(-)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu15_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu15_S2icfu16_
  ------------------
  207|      0|		components.weekdayOrdinal = rhs.weekdayOrdinal.map(-)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu17_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu17_S2icfu18_
  ------------------
  208|      0|		components.quarter = rhs.quarter.map(-)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu19_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu19_S2icfu20_
  ------------------
  209|      0|		components.weekOfMonth = rhs.weekOfMonth.map(-)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu21_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu21_S2icfu22_
  ------------------
  210|      0|		components.weekOfYear = rhs.weekOfYear.map(-)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu23_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu23_S2icfu24_
  ------------------
  211|      0|		components.yearForWeekOfYear = rhs.yearForWeekOfYear.map(-)
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu25_
  ------------------
  | Unexecuted instantiation: $s10Foundation14DateComponentsV05SwiftB0E1sopyA2CFZS2icSimcfu25_S2icfu26_
  ------------------
  212|      0|		return components
  213|      0|	}
  214|       |
  215|       |	/// Combines two date components using the provided `transform` on all
  216|       |	/// values within the components that are not `NSDateComponentUndefined`.
  217|      0|	private static func combine(_ lhs: DateComponents, rhs: DateComponents, transform: (Int, Int) -> Int) -> DateComponents {
  218|      0|		var components = DateComponents()
  219|      0|		components.era = bimap(lhs.era, rhs.era, default: 0, transform)
  220|      0|		components.year = bimap(lhs.year, rhs.year, default: 0, transform)
  221|      0|		components.month = bimap(lhs.month, rhs.month, default: 0, transform)
  222|      0|		components.day = bimap(lhs.day, rhs.day, default: 0, transform)
  223|      0|		components.hour = bimap(lhs.hour, rhs.hour, default: 0, transform)
  224|      0|		components.minute = bimap(lhs.minute, rhs.minute, default: 0, transform)
  225|      0|		components.second = bimap(lhs.second, rhs.second, default: 0, transform)
  226|      0|		components.nanosecond = bimap(lhs.nanosecond, rhs.nanosecond, default: 0, transform)
  227|      0|		components.weekday = bimap(lhs.weekday, rhs.weekday, default: 0, transform)
  228|      0|		components.weekdayOrdinal = bimap(lhs.weekdayOrdinal, rhs.weekdayOrdinal, default: 0, transform)
  229|      0|		components.quarter = bimap(lhs.quarter, rhs.quarter, default: 0, transform)
  230|      0|		components.weekOfMonth = bimap(lhs.weekOfMonth, rhs.weekOfMonth, default: 0, transform)
  231|      0|		components.weekOfYear = bimap(lhs.weekOfYear, rhs.weekOfYear, default: 0, transform)
  232|      0|		components.yearForWeekOfYear = bimap(lhs.yearForWeekOfYear, rhs.yearForWeekOfYear, default: 0, transform)
  233|      0|		return components
  234|      0|	}
  235|       |
  236|       |	/// Subscription support for `DateComponents` instances.
  237|       |	/// ie. `cmps[.day] = 5`
  238|       |	///
  239|       |	/// Note: This does not take into account any built-in errors, `Int.max` returned instead of `nil`.
  240|       |	///
  241|       |	/// - Parameter component: component to get
  242|      0|	subscript(component: Calendar.Component) -> Int? {
  243|      0|		switch component {
  244|      0|		case .era: 					return era
  245|      0|		case .year: 				return year
  246|      0|		case .month: 				return month
  247|      0|		case .day: 					return day
  248|      0|		case .hour: 				return hour
  249|      0|		case .minute: 				return minute
  250|      0|		case .second: 				return second
  251|      0|		case .weekday: 				return weekday
  252|      0|		case .weekdayOrdinal: 		return weekdayOrdinal
  253|      0|		case .quarter: 				return quarter
  254|      0|		case .weekOfMonth: 			return weekOfMonth
  255|      0|		case .weekOfYear:	 		return weekOfYear
  256|      0|		case .yearForWeekOfYear: 	return yearForWeekOfYear
  257|      0|		case .nanosecond: 			return nanosecond
  258|      0|		default: 					return nil // `calendar` and `timezone` are ignored in this context
  259|      0|		}
  260|      0|	}
  261|       |
  262|       |	/// Express a `DateComponents` instance in another time unit you choose.
  263|       |	///
  264|       |	/// - parameter component: time component
  265|       |	/// - parameter calendar:  context calendar to use
  266|       |	///
  267|       |	/// - returns: the value of interval expressed in selected `Calendar.Component`
  268|      0|	func `in`(_ component: Calendar.Component, of calendar: CalendarConvertible? = nil) -> Int? {
  269|      0|		let cal = (calendar?.toCalendar() ?? SwiftDate.defaultRegion.calendar)
  270|      0|		let dateFrom = Date()
  271|      0|		let dateTo = (dateFrom + self)
  272|      0|		let components: Set<Calendar.Component> = [component]
  273|      0|		let value = cal.dateComponents(components, from: dateFrom, to: dateTo).value(for: component)
  274|      0|		return value
  275|      0|	}
  276|       |
  277|       |	/// Express a `DateComponents` instance in a set of time units you choose.
  278|       |	///
  279|       |	/// - Parameters:
  280|       |	///   - component: time component
  281|       |	///   - calendar: context calendar to use
  282|       |	/// - Returns: a dictionary of extract values.
  283|      0|	func `in`(_ components: Set<Calendar.Component>, of calendar: CalendarConvertible? = nil) -> [Calendar.Component: Int] {
  284|      0|		let cal = (calendar?.toCalendar() ?? SwiftDate.defaultRegion.calendar)
  285|      0|		let dateFrom = Date()
  286|      0|		let dateTo = (dateFrom + self)
  287|      0|		let extractedCmps = cal.dateComponents(components, from: dateFrom, to: dateTo)
  288|      0|		return extractedCmps.toDict()
  289|      0|	}
  290|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Foundation+Extras/Int+DateComponents.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |// MARK: Int Extension
   16|       |
   17|       |/// This allows us to transform a literal number in a `DateComponents` and use it in math operations
   18|       |/// For example `5.days` will create a new `DateComponents` where `.day = 5`.
   19|       |
   20|       |public extension Int {
   21|       |
   22|       |	/// Internal transformation function
   23|       |	///
   24|       |	/// - parameter type: component to use
   25|       |	///
   26|       |	/// - returns: return self value in form of `DateComponents` where given `Calendar.Component` has `self` as value
   27|      0|	internal func toDateComponents(type: Calendar.Component) -> DateComponents {
   28|      0|		var dateComponents = DateComponents()
   29|      0|        DateComponents.allComponents.forEach( { dateComponents.setValue(0, for: $0 )})
   30|      0|        dateComponents.setValue(self, for: type)
   31|      0|        dateComponents.setValue(0, for: .era)
   32|      0|		return dateComponents
   33|      0|	}
   34|       |
   35|       |	/// Create a `DateComponents` with `self` value set as nanoseconds
   36|      0|	var nanoseconds: DateComponents {
   37|      0|		return toDateComponents(type: .nanosecond)
   38|      0|	}
   39|       |
   40|       |	/// Create a `DateComponents` with `self` value set as seconds
   41|      0|	var seconds: DateComponents {
   42|      0|		return toDateComponents(type: .second)
   43|      0|	}
   44|       |
   45|       |	/// Create a `DateComponents` with `self` value set as minutes
   46|      0|	var minutes: DateComponents {
   47|      0|		return toDateComponents(type: .minute)
   48|      0|	}
   49|       |
   50|       |	/// Create a `DateComponents` with `self` value set as hours
   51|      0|	var hours: DateComponents {
   52|      0|		return toDateComponents(type: .hour)
   53|      0|	}
   54|       |
   55|       |	/// Create a `DateComponents` with `self` value set as days
   56|      0|	var days: DateComponents {
   57|      0|		return toDateComponents(type: .day)
   58|      0|	}
   59|       |
   60|       |	/// Create a `DateComponents` with `self` value set as weeks
   61|      0|	var weeks: DateComponents {
   62|      0|		return toDateComponents(type: .weekOfYear)
   63|      0|	}
   64|       |
   65|       |	/// Create a `DateComponents` with `self` value set as months
   66|      0|	var months: DateComponents {
   67|      0|		return toDateComponents(type: .month)
   68|      0|	}
   69|       |
   70|       |	/// Create a `DateComponents` with `self` value set as years
   71|      0|	var years: DateComponents {
   72|      0|		return toDateComponents(type: .year)
   73|      0|	}
   74|       |
   75|       |	/// Create a `DateComponents` with `self` value set as quarters
   76|      0|	var quarters: DateComponents {
   77|      0|		return toDateComponents(type: .quarter)
   78|      0|	}
   79|       |
   80|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Foundation+Extras/String+Parser.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |// MARK: - DataParsable Protocol
   16|       |
   17|       |public protocol DateParsable {
   18|       |
   19|       |	/// Convert a string to a `DateInRegion` instance by parsing it with given parser
   20|       |	/// or using one of the built-in parser (if you know the format of the date you
   21|       |	/// should consider explicitly pass it to avoid unecessary computations).
   22|       |	///
   23|       |	/// - Parameters:
   24|       |	///   - format: format of the date, `nil` to leave the library to found the best
   25|       |	///				one via `SwiftDate.autoFormats`
   26|       |	///   - region: region in which the date should be expressed in.
   27|       |	///				Region's locale is used to format the date when using long readable unit names (like MMM
   28|       |	///				for month).
   29|       |	/// - Returns: date in region representation, `nil` if parse fails
   30|       |	func toDate(_ format: String?, region: Region) -> DateInRegion?
   31|       |
   32|       |	/// Convert a string to a `DateInRegion` instance by parsing it with the ordered
   33|       |	/// list of provided formats.
   34|       |	/// If `formats` array is not provided it uses the `SwiftDate.autoFormats` array instead.
   35|       |	/// Note: if you knwo the format of the date you should consider explicitly pass it to avoid
   36|       |	///       unecessary computations.
   37|       |	///
   38|       |	/// - Parameters:
   39|       |	///   - format: ordered formats to parse date (if you don't have a list of formats you can pass `SwiftDate.autoFormats`)
   40|       |	///   - region: region in which the date should be expressed in.
   41|       |	///				Region's locale is used to format the date when using long readable unit names (like MMM
   42|       |	///				for month).
   43|       |	/// - Returns: date in region representation, `nil` if parse fails
   44|       |	func toDate(_ formats: [String], region: Region) -> DateInRegion?
   45|       |
   46|       |	/// Convert a string to a valid `DateInRegion` using passed style.
   47|       |	///
   48|       |	/// - Parameters:
   49|       |	///   - style: parsing style.
   50|       |	///   - region: region in which the date should be expressed in
   51|       |	/// - Returns: date in region representation, `nil` if parse fails
   52|       |	func toDate(style: StringToDateStyles, region: Region) -> DateInRegion?
   53|       |
   54|       |	/// Convert to date from a valid ISO8601 string
   55|       |	///
   56|       |	/// - Parameters:
   57|       |	///   - options: options of the parser
   58|       |	///   - region: region in which the date should be expressed in (timzone is ignored and evaluated automatically)
   59|       |	/// - Returns: date in region representation, `nil` if parse fails
   60|       |	func toISODate(_ options: ISOParser.Options?, region: Region?) -> DateInRegion?
   61|       |
   62|       |	/// Convert to date from a valid DOTNET string
   63|       |	///
   64|       |	///   - region: region in which the date should be expressed in (timzone is ignored and evaluated automatically)
   65|       |	/// - Returns: date in region representation, `nil` if parse fails
   66|       |	func toDotNETDate(region: Region) -> DateInRegion?
   67|       |
   68|       |	/// Convert to a date from a valid RSS/ALT RSS string
   69|       |	///
   70|       |	/// - Parameters:
   71|       |	///   - alt: `true` if string represent an ALT RSS formatted date, `false` if a standard RSS formatted date.
   72|       |	///   - region: region in which the date should be expressed in (timzone is ignored and evaluated automatically)
   73|       |	/// - Returns: date in region representation, `nil` if parse fails
   74|       |	func toRSSDate(alt: Bool, region: Region) -> DateInRegion?
   75|       |
   76|       |	/// Convert to a date from a valid SQL format string.
   77|       |	///
   78|       |	/// - Parameters:
   79|       |	///   - region: region in which the date should be expressed in (timzone is ignored and evaluated automatically)
   80|       |	/// - Returns: date in region representation, `nil` if parse fails
   81|       |	func toSQLDate(region: Region) -> DateInRegion?
   82|       |
   83|       |}
   84|       |
   85|       |// MARK: - DataParsable Implementation for Strings
   86|       |
   87|       |extension String: DateParsable {
   88|       |
   89|      0|	public func toDate(_ format: String? = nil, region: Region = SwiftDate.defaultRegion) -> DateInRegion? {
   90|      0|		return DateInRegion(self, format: format, region: region)
   91|      0|	}
   92|       |
   93|      0|	public func toDate(_ formats: [String], region: Region) -> DateInRegion? {
   94|      0|		return DateInRegion(self, formats: formats, region: region)
   95|      0|	}
   96|       |
   97|      0|	public func toDate(style: StringToDateStyles, region: Region = SwiftDate.defaultRegion) -> DateInRegion? {
   98|      0|		return style.toDate(self, region: region)
   99|      0|	}
  100|       |
  101|      0|	public func toISODate(_ options: ISOParser.Options? = nil, region: Region? = nil) -> DateInRegion? {
  102|      0|		return ISOParser.parse(self, region: region, options: options)
  103|      0|	}
  104|       |
  105|      0|	public func toDotNETDate(region: Region = Region.ISO) -> DateInRegion? {
  106|      0|		return DOTNETParser.parse(self, region: region, options: nil)
  107|      0|	}
  108|       |
  109|      0|	public func toRSSDate(alt: Bool, region: Region = Region.ISO) -> DateInRegion? {
  110|      0|		switch alt {
  111|      0|		case true: 	return StringToDateStyles.altRSS.toDate(self, region: region)
  112|      0|		case false: return StringToDateStyles.rss.toDate(self, region: region)
  113|      0|		}
  114|      0|	}
  115|       |
  116|      0|	public func toSQLDate(region: Region = Region.ISO) -> DateInRegion? {
  117|      0|		return StringToDateStyles.sql.toDate(self, region: region)
  118|      0|	}
  119|       |	
  120|      0|	public func asLocale() -> Locale {
  121|      0|               Locale(identifier: self)
  122|      0|        }
  123|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Foundation+Extras/TimeInterval+Formatter.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public extension TimeInterval {
   16|       |
   17|       |	struct ComponentsFormatterOptions {
   18|       |
   19|       |		/// Fractional units may be used when a value cannot be exactly represented using the available units.
   20|       |		/// For example, if minutes are not allowed, the value “1h 30m” could be formatted as “1.5h”.
   21|       |		public var allowsFractionalUnits: Bool?
   22|       |
   23|       |		/// Specify the units that can be used in the output.
   24|       |		public var allowedUnits: NSCalendar.Unit?
   25|       |
   26|       |		/// A Boolean value indicating whether to collapse the largest unit into smaller units when a certain threshold is met.
   27|       |		public var collapsesLargestUnit: Bool?
   28|       |
   29|       |		/// The maximum number of time units to include in the output string.
   30|       |		/// If 0 does not cause the elimination of any units.
   31|       |		public var maximumUnitCount: Int?
   32|       |
   33|       |		/// The formatting style for units whose value is 0.
   34|       |		public var zeroFormattingBehavior: DateComponentsFormatter.ZeroFormattingBehavior?
   35|       |
   36|       |		/// The preferred style for units.
   37|       |		public var unitsStyle: DateComponentsFormatter.UnitsStyle?
   38|       |
   39|       |		/// Locale of the formatter
   40|       |		public var locale: LocaleConvertible? {
   41|      0|			set { calendar.locale = newValue?.toLocale() }
   42|      0|			get { return calendar.locale }
   43|       |		}
   44|       |
   45|       |		/// Calendar
   46|      0|        public var calendar = Calendar.autoupdatingCurrent
   47|       |
   48|      0|		public func apply(toFormatter formatter: DateComponentsFormatter) {
   49|      0|            formatter.calendar = calendar
   50|      0|
   51|      0|            if let allowsFractionalUnits = self.allowsFractionalUnits {
   52|      0|                formatter.allowsFractionalUnits = allowsFractionalUnits
   53|      0|            }
   54|      0|            if let allowedUnits = self.allowedUnits {
   55|      0|                formatter.allowedUnits = allowedUnits
   56|      0|            }
   57|      0|            if let collapsesLargestUnit = self.collapsesLargestUnit {
   58|      0|                formatter.collapsesLargestUnit = collapsesLargestUnit
   59|      0|            }
   60|      0|            if let maximumUnitCount = self.maximumUnitCount {
   61|      0|                formatter.maximumUnitCount = maximumUnitCount
   62|      0|            }
   63|      0|            if let zeroFormattingBehavior = self.zeroFormattingBehavior {
   64|      0|                formatter.zeroFormattingBehavior = zeroFormattingBehavior
   65|      0|            }
   66|      0|            if let unitsStyle = self.unitsStyle {
   67|      0|                formatter.unitsStyle = unitsStyle
   68|      0|            }
   69|      0|		}
   70|       |
   71|      0|		public init() {}
   72|       |	}
   73|       |
   74|       |	/// Return the local thread shared formatter for date components
   75|      0|	private static func sharedFormatter() -> DateComponentsFormatter {
   76|      0|		let name = "SwiftDate_\(NSStringFromClass(DateComponentsFormatter.self))"
   77|      0|		return threadSharedObject(key: name, create: {
   78|      0|			let formatter = DateComponentsFormatter()
   79|      0|			formatter.includesApproximationPhrase = false
   80|      0|			formatter.includesTimeRemainingPhrase = false
   81|      0|			return formatter
   82|      0|		})
   83|      0|	}
   84|       |
   85|       |	//@available(*, deprecated: 5.0.13, obsoleted: 5.1, message: "Use toIntervalString function instead")
   86|      0|	func toString(options callback: ((inout ComponentsFormatterOptions) -> Void)? = nil) -> String {
   87|      0|		return self.toIntervalString(options: callback)
   88|      0|	}
   89|       |
   90|       |	/// Format a time interval in a string with desidered components with passed style.
   91|       |	///
   92|       |	/// - Parameters:
   93|       |	///   - units: units to include in string.
   94|       |	///   - style: style of the units, by default is `.abbreviated`
   95|       |	/// - Returns: string representation
   96|      0|	func toIntervalString(options callback: ((inout ComponentsFormatterOptions) -> Void)? = nil) -> String {
   97|      0|		let formatter = DateComponentsFormatter()
   98|      0|		var options = ComponentsFormatterOptions()
   99|      0|		callback?(&options)
  100|      0|		options.apply(toFormatter: formatter)
  101|      0|
  102|      0|        let formattedValue = (formatter.string(from: self) ?? "")
  103|      0|        if options.zeroFormattingBehavior?.contains(.pad) ?? false {
  104|      0|            // for some strange reason padding is not added at the very beginning positional item.
  105|      0|            // we'll add it manually if necessaru
  106|      0|            if let index = formattedValue.firstIndex(of: ":"), index.utf16Offset(in: formattedValue) < 2 {
  107|      0|                return "0\(formattedValue)"
  108|      0|            }
  109|      0|        }
  110|      0|        return formattedValue
  111|      0|	}
  112|       |
  113|       |	/// Format a time interval in a string with desidered components with passed style.
  114|       |	///
  115|       |	/// - Parameter options: options for formatting.
  116|       |	/// - Returns: string representation
  117|      0|	func toString(options: ComponentsFormatterOptions) -> String {
  118|      0|		let formatter = TimeInterval.sharedFormatter()
  119|      0|		options.apply(toFormatter: formatter)
  120|      0|		return (formatter.string(from: self) ?? "")
  121|      0|	}
  122|       |
  123|       |	/// Return a string representation of the time interval in form of clock countdown (ie. 57:00:00)
  124|       |	///
  125|       |	/// - Parameter zero: behaviour with zero.
  126|       |	/// - Returns: string representation
  127|      0|	func toClock(zero: DateComponentsFormatter.ZeroFormattingBehavior =  [.pad, .dropLeading]) -> String {
  128|      0|		return toIntervalString(options: {
  129|      0|            $0.collapsesLargestUnit = true
  130|      0|            $0.maximumUnitCount = 0
  131|      0|			$0.unitsStyle = .positional
  132|      0|            $0.locale = Locales.englishUnitedStatesComputer
  133|      0|			$0.zeroFormattingBehavior = zero
  134|      0|		})
  135|      0|	}
  136|       |
  137|       |	/// Extract requeste time units components from given interval.
  138|       |	/// Reference date's calendar is used to make the extraction.
  139|       |	///
  140|       |	/// NOTE:
  141|       |	///		Extraction is calendar/date based; if you specify a `refDate` calculation is made
  142|       |	/// 	between the `refDate` and `refDate + interval`.
  143|       |	/// 	If `refDate` is `nil` evaluation is made from `now()` and `now() + interval` in the context
  144|       |	/// 	of the `SwiftDate.defaultRegion` set.
  145|       |	///
  146|       |	/// - Parameters:
  147|       |	///   - units: units to extract
  148|       |	///   - from: starting reference date, `nil` means `now()` in the context of the default region set.
  149|       |	/// - Returns: dictionary with extracted components
  150|      0|	func toUnits(_ units: Set<Calendar.Component>, to refDate: DateInRegion? = nil) -> [Calendar.Component: Int] {
  151|      0|		let dateTo = (refDate ?? DateInRegion())
  152|      0|		let dateFrom = dateTo.addingTimeInterval(-self)
  153|      0|		let components = dateFrom.calendar.dateComponents(units, from: dateFrom.date, to: dateTo.date)
  154|      0|		return components.toDict()
  155|      0|	}
  156|       |
  157|       |	/// Express a time interval (expressed in seconds) in another time unit you choose.
  158|       |	/// Reference date's calendar is used to make the extraction.
  159|       |	///
  160|       |	/// - parameter component: time unit in which you want to express the calendar component
  161|       |	/// - parameter from: starting reference date, `nil` means `now()` in the context of the default region set.
  162|       |	///
  163|       |	/// - returns: the value of interval expressed in selected `Calendar.Component`
  164|      0|	func toUnit(_ component: Calendar.Component, to refDate: DateInRegion? = nil) -> Int? {
  165|      0|		return toUnits([component], to: refDate)[component]
  166|      0|	}
  167|       |
  168|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Supports/AssociatedValues.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |#if os(Linux)
   14|       |
   15|       |#else
   16|       |import Foundation
   17|       |import ObjectiveC.runtime
   18|       |
   19|      0|internal func getAssociatedValue<T>(key: String, object: AnyObject) -> T? {
   20|      0|	return (objc_getAssociatedObject(object, key.address) as? AssociatedValue)?.value as? T
   21|      0|}
   22|       |
   23|      0|internal func getAssociatedValue<T>(key: String, object: AnyObject, initialValue: @autoclosure () -> T) -> T {
   24|      0|	return getAssociatedValue(key: key, object: object) ?? setAndReturn(initialValue: initialValue(), key: key, object: object)
   25|      0|}
   26|       |
   27|      0|internal func getAssociatedValue<T>(key: String, object: AnyObject, initialValue: () -> T) -> T {
   28|      0|	return getAssociatedValue(key: key, object: object) ?? setAndReturn(initialValue: initialValue(), key: key, object: object)
   29|      0|}
   30|       |
   31|      0|private func setAndReturn<T>(initialValue: T, key: String, object: AnyObject) -> T {
   32|      0|	set(associatedValue: initialValue, key: key, object: object)
   33|      0|	return initialValue
   34|      0|}
   35|       |
   36|      0|internal func set<T>(associatedValue: T?, key: String, object: AnyObject) {
   37|      0|	set(associatedValue: AssociatedValue(associatedValue), key: key, object: object)
   38|      0|}
   39|       |
   40|      0|internal func set<T: AnyObject>(weakAssociatedValue: T?, key: String, object: AnyObject) {
   41|      0|	set(associatedValue: AssociatedValue(weak: weakAssociatedValue), key: key, object: object)
   42|      0|}
   43|       |
   44|       |extension String {
   45|       |
   46|      0|	fileprivate var address: UnsafeRawPointer {
   47|      0|		return UnsafeRawPointer(bitPattern: abs(hashValue))!
   48|      0|	}
   49|       |
   50|       |}
   51|       |
   52|      0|private func set(associatedValue: AssociatedValue, key: String, object: AnyObject) {
   53|      0|	objc_setAssociatedObject(object, key.address, associatedValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
   54|      0|}
   55|       |
   56|       |private class AssociatedValue {
   57|       |
   58|       |	weak var _weakValue: AnyObject?
   59|       |	var _value: Any?
   60|       |
   61|      0|	var value: Any? {
   62|      0|		return _weakValue ?? _value
   63|      0|	}
   64|       |
   65|      0|	init(_ value: Any?) {
   66|      0|		_value = value
   67|      0|	}
   68|       |
   69|      0|	init(weak: AnyObject?) {
   70|      0|		_weakValue = weak
   71|      0|	}
   72|       |
   73|       |}
   74|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Supports/Calendars.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public typealias Calendars = Calendar.Identifier
   16|       |
   17|       |public protocol CalendarConvertible {
   18|       |	func toCalendar() -> Calendar
   19|       |}
   20|       |
   21|       |extension Calendar: CalendarConvertible {
   22|       |
   23|      0|	public func toCalendar() -> Calendar {
   24|      0|		return self
   25|      0|	}
   26|       |
   27|      0|	internal static func newCalendar(_ calendar: CalendarConvertible, configure: ((inout Calendar) -> Void)? = nil) -> Calendar {
   28|      0|		var cal = calendar.toCalendar()
   29|      0|		configure?(&cal)
   30|      0|		return cal
   31|      0|	}
   32|       |
   33|       |}
   34|       |
   35|       |extension Calendar.Identifier: CalendarConvertible {
   36|       |
   37|      0|	public func toCalendar() -> Calendar {
   38|      0|		return Calendar(identifier: self)
   39|      0|	}
   40|       |
   41|       |}
   42|       |
   43|       |// MARK: - Support for Calendar.Identifier encoding with Codable
   44|       |
   45|       |extension Calendar.Identifier: CustomStringConvertible {
   46|       |
   47|      0|	public var description: String {
   48|      0|		switch self {
   49|      0|		case .gregorian:			return "gregorian"
   50|      0|		case .buddhist:				return "buddhist"
   51|      0|		case .chinese:				return "chinese"
   52|      0|		case .coptic:				return "coptic"
   53|      0|		case .ethiopicAmeteMihret:	return "ethiopicAmeteMihret"
   54|      0|		case .ethiopicAmeteAlem:	return "ethiopicAmeteAlem"
   55|      0|		case .hebrew:				return "hebrew"
   56|      0|		case .iso8601:				return "iso8601"
   57|      0|		case .indian:				return "indian"
   58|      0|		case .islamic:				return "islamic"
   59|      0|		case .islamicCivil:			return "islamicCivil"
   60|      0|		case .japanese:				return "japanese"
   61|      0|		case .persian:				return "persian"
   62|      0|		case .republicOfChina:		return "republicOfChina"
   63|      0|		case .islamicTabular:		return "islamicTabular"
   64|      0|		case .islamicUmmAlQura:		return "islamicUmmAlQura"
   65|      0|		@unknown default:
   66|      0|			fatalError("Unsupported calendar \(self)")
   67|      0|		}
   68|      0|	}
   69|       |
   70|      0|	public init(_ rawValue: String) {
   71|      0|		switch rawValue {
   72|      0|		case Calendar.Identifier.gregorian.description:				self = .gregorian
   73|      0|		case Calendar.Identifier.buddhist.description:				self = .buddhist
   74|      0|		case Calendar.Identifier.chinese.description:				self = .chinese
   75|      0|		case Calendar.Identifier.coptic.description:				self = .coptic
   76|      0|		case Calendar.Identifier.ethiopicAmeteMihret.description:	self = .ethiopicAmeteMihret
   77|      0|		case Calendar.Identifier.ethiopicAmeteAlem.description:		self = .ethiopicAmeteAlem
   78|      0|		case Calendar.Identifier.hebrew.description:				self = .hebrew
   79|      0|		case Calendar.Identifier.iso8601.description:				self = .iso8601
   80|      0|		case Calendar.Identifier.indian.description:				self = .indian
   81|      0|		case Calendar.Identifier.islamic.description:				self = .islamic
   82|      0|		case Calendar.Identifier.islamicCivil.description:			self = .islamicCivil
   83|      0|		case Calendar.Identifier.japanese.description:				self = .japanese
   84|      0|		case Calendar.Identifier.persian.description:				self = .persian
   85|      0|		case Calendar.Identifier.republicOfChina.description:		self = .republicOfChina
   86|      0|		case Calendar.Identifier.islamicTabular.description:		self = .islamicTabular
   87|      0|		case Calendar.Identifier.islamicTabular.description:		self = .islamicTabular
   88|      0|		case Calendar.Identifier.islamicUmmAlQura.description:		self = .islamicUmmAlQura
   89|      0|		default:
   90|      0|			let defaultCalendar = SwiftDate.defaultRegion.calendar.identifier
   91|      0|			debugPrint("Calendar Identifier '\(rawValue)' not recognized. Using default (\(defaultCalendar))")
   92|      0|			self = defaultCalendar
   93|      0|		}
   94|      0|	}
   95|       |
   96|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Supports/Commons.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |// MARK: - Atomic Variable Support
   16|       |
   17|       |@propertyWrapper
   18|       |internal struct Atomic<Value> {
   19|      0|    private let queue = DispatchQueue(label: "com.vadimbulavin.atomic")
   20|       |    private var value: Value
   21|       |
   22|      0|    init(wrappedValue: Value) {
   23|      0|        self.value = wrappedValue
   24|      0|    }
   25|       |    
   26|       |    var wrappedValue: Value {
   27|      0|        get {
   28|      0|            return queue.sync { value }
   29|      0|        }
   30|      0|        set {
   31|      0|            queue.sync { value = newValue }
   32|      0|        }
   33|       |    }
   34|       |    
   35|       |}
   36|       |
   37|       |// MARK: - DateFormatter
   38|       |
   39|       |public extension DateFormatter {
   40|       |
   41|       |	/// Return the local thread shared formatter initialized with the configuration of the region passed.
   42|       |	///
   43|       |	/// - Parameters:
   44|       |	///   - region: region used to pre-configure the cell.
   45|       |	///   - format: optional format used to set the `dateFormat` property.
   46|       |	/// - Returns: date formatter instance
   47|      0|	static func sharedFormatter(forRegion region: Region?, format: String? = nil) -> DateFormatter {
   48|      0|		let name = "SwiftDate_\(NSStringFromClass(DateFormatter.self))"
   49|      0|		let formatter: DateFormatter = threadSharedObject(key: name, create: { return DateFormatter() })
   50|      0|		if let region = region {
   51|      0|			formatter.timeZone = region.timeZone
   52|      0|			formatter.calendar = region.calendar
   53|      0|			formatter.locale = region.locale
   54|      0|		}
   55|      0|		formatter.dateFormat = (format ?? DateFormats.iso8601)
   56|      0|		return formatter
   57|      0|	}
   58|       |
   59|       |	/// Returned number formatter instance shared along calling thread to format ordinal numbers.
   60|       |	///
   61|       |	/// - Parameter locale: locale to set
   62|       |	/// - Returns: number formatter instance
   63|       |	@available(iOS 9.0, macOS 10.11, *)
   64|      0|	static func sharedOrdinalNumberFormatter(locale: LocaleConvertible) -> NumberFormatter {
   65|      0|		let name = "SwiftDate_\(NSStringFromClass(NumberFormatter.self))"
   66|      0|		let formatter = threadSharedObject(key: name, create: { return NumberFormatter() })
   67|      0|		formatter.numberStyle = .ordinal
   68|      0|		formatter.locale = locale.toLocale()
   69|      0|		return formatter
   70|      0|	}
   71|       |
   72|       |}
   73|       |
   74|       |/// This function create (if necessary) and return a thread singleton instance of the
   75|       |/// object you want.
   76|       |///
   77|       |/// - Parameters:
   78|       |///   - key: identifier of the object.
   79|       |///   - create: create routine used the first time you are about to create the object in thread.
   80|       |/// - Returns: instance of the object for caller's thread.
   81|      0|internal func threadSharedObject<T: AnyObject>(key: String, create: () -> T) -> T {
   82|      0|	if let cachedObj = Thread.current.threadDictionary[key] as? T {
   83|      0|		return cachedObj
   84|      0|	} else {
   85|      0|		let newObject = create()
   86|      0|		Thread.current.threadDictionary[key] = newObject
   87|      0|		return newObject
   88|      0|	}
   89|      0|}
   90|       |
   91|       |/// Style used to format month, weekday, quarter symbols.
   92|       |/// Stand-alone properties are for use in places like calendar headers.
   93|       |/// Non-stand-alone properties are for use in context (for example, “Saturday, November 12th”).
   94|       |///
   95|       |/// - `default`: Default formatter (ie. `4th quarter` for quarter, `April` for months and `Wednesday` for weekdays)
   96|       |/// - defaultStandalone:  See `default`; See `short`; stand-alone properties are for use in places like calendar headers.
   97|       |/// - short: Short symbols (ie. `Jun` for months, `Fri` for weekdays, `Q1` for quarters).
   98|       |/// - veryShort: Very short symbols (ie. `J` for months, `F` for weekdays, for quarter it just return `short` variant).
   99|       |/// - standaloneShort: See `short`; stand-alone properties are for use in places like calendar headers.
  100|       |/// - standaloneVeryShort: See `veryShort`; stand-alone properties are for use in places like calendar headers.
  101|       |public enum SymbolFormatStyle {
  102|       |	case `default`
  103|       |	case defaultStandalone
  104|       |	case short
  105|       |	case veryShort
  106|       |	case standaloneShort
  107|       |	case standaloneVeryShort
  108|       |}
  109|       |
  110|       |/// Encapsulate the logic to use date format strings
  111|       |public struct DateFormats {
  112|       |
  113|       |	/// This is the built-in list of all supported formats for auto-parsing of a string to a date.
  114|       |	internal static let builtInAutoFormat: [String] =  [
  115|       |		DateFormats.iso8601,
  116|       |		"yyyy'-'MM'-'dd'T'HH':'mm':'ssZ",
  117|       |		"yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZ",
  118|       |		"yyyy-MM-dd'T'HH:mm:ss.SSSZ",
  119|       |		"yyyy-MM-dd HH:mm:ss",
  120|       |		"yyyy-MM-dd HH:mm",
  121|       |		"yyyy-MM-dd",
  122|       |		"h:mm:ss A",
  123|       |		"h:mm A",
  124|       |		"MM/dd/yyyy",
  125|       |		"MMMM d, yyyy",
  126|       |		"MMMM d, yyyy LT",
  127|       |		"dddd, MMMM D, yyyy LT",
  128|       |		"yyyyyy-MM-dd",
  129|       |		"yyyy-MM-dd",
  130|       |		"yyyy-'W'ww-E",
  131|       |		"GGGG-'['W']'ww-E",
  132|       |		"yyyy-'W'ww",
  133|       |		"GGGG-'['W']'ww",
  134|       |		"yyyy'W'ww",
  135|       |		"yyyy-ddd",
  136|       |		"HH:mm:ss.SSSS",
  137|       |		"HH:mm:ss",
  138|       |		"HH:mm",
  139|       |		"HH"
  140|       |	]
  141|       |
  142|       |	/// This is the ordered list of all formats SwiftDate can use in order to attempt parsing a passaed
  143|       |	/// date expressed as string. Evaluation is made in order; you can add or remove new formats as you wish.
  144|       |	/// In order to reset the list call `resetAutoFormats()` function.
  145|       |	public static var autoFormats: [String] = DateFormats.builtInAutoFormat
  146|       |
  147|       |	/// Default ISO8601 format string
  148|       |	public static let iso8601: String = "yyyy-MM-dd'T'HH:mm:ssZZZZZ"
  149|       |
  150|       |	/// Extended format
  151|       |	public static let extended: String = "eee dd-MMM-yyyy GG HH:mm:ss.SSS zzz"
  152|       |
  153|       |	/// The Alternative RSS formatted date "d MMM yyyy HH:mm:ss ZZZ" i.e. "09 Sep 2011 15:26:08 +0200"
  154|       |	public static let altRSS: String = "d MMM yyyy HH:mm:ss ZZZ"
  155|       |
  156|       |	/// The RSS formatted date "EEE, d MMM yyyy HH:mm:ss ZZZ" i.e. "Fri, 09 Sep 2011 15:26:08 +0200"
  157|       |	public static let rss: String = "EEE, d MMM yyyy HH:mm:ss ZZZ"
  158|       |
  159|       |	/// The http header formatted date "EEE, dd MMM yyyy HH:mm:ss zzz" i.e. "Tue, 15 Nov 1994 12:45:26 GMT"
  160|       |	public static let httpHeader: String = "EEE, dd MMM yyyy HH:mm:ss zzz"
  161|       |
  162|       |	/// A generic standard format date i.e. "EEE MMM dd HH:mm:ss Z yyyy"
  163|       |	public static let standard: String = "EEE MMM dd HH:mm:ss Z yyyy"
  164|       |
  165|       |	/// SQL date format
  166|       |	public static let sql: String = "yyyy-MM-dd'T'HH:mm:ss.SSSX"
  167|       |
  168|       |	/// Reset the list of auto formats to the initial settings.
  169|      0|	public static func resetAutoFormats() {
  170|      0|		autoFormats = DateFormats.builtInAutoFormat
  171|      0|	}
  172|       |
  173|       |	/// Parse a new string optionally passing the format in which is encoded. If no format is passed
  174|       |	/// an attempt is made by cycling all the formats set in `autoFormats` property.
  175|       |	///
  176|       |	/// - Parameters:
  177|       |	///   - string: date expressed as string.
  178|       |	///   - suggestedFormat: optional format of the date expressed by the string (set it if you can in order to optimize the parse task).
  179|       |	///   - region: region in which the date is expressed.
  180|       |	/// - Returns: parsed absolute `Date`, `nil` if parse fails.
  181|      0|	public static func parse(string: String, format: String?, region: Region) -> Date? {
  182|      0|		let formats = (format != nil ? [format!] : DateFormats.autoFormats)
  183|      0|		return DateFormats.parse(string: string, formats: formats, region: region)
  184|      0|	}
  185|       |
  186|      0|	public static func parse(string: String, formats: [String], region: Region) -> Date? {
  187|      0|		let formatter = DateFormatter.sharedFormatter(forRegion: region)
  188|      0|
  189|      0|		var parsedDate: Date?
  190|      0|		for format in formats {
  191|      0|			formatter.dateFormat = format
  192|      0|			formatter.locale = region.locale
  193|      0|			if let date = formatter.date(from: string) {
  194|      0|				parsedDate = date
  195|      0|				break
  196|      0|			}
  197|      0|		}
  198|      0|		return parsedDate
  199|      0|	}
  200|       |}
  201|       |
  202|       |// MARK: - Calendar Extension
  203|       |
  204|       |public extension Calendar.Component {
  205|       |
  206|      0|	internal static func toSet(_ src: [Calendar.Component]) -> Set<Calendar.Component> {
  207|      0|		var l: Set<Calendar.Component> = []
  208|      0|		src.forEach { l.insert($0) }
  209|      0|		return l
  210|      0|	}
  211|       |
  212|      0|	internal var nsCalendarUnit: NSCalendar.Unit {
  213|      0|		switch self {
  214|      0|		case .era: return NSCalendar.Unit.era
  215|      0|		case .year: return NSCalendar.Unit.year
  216|      0|		case .month: return NSCalendar.Unit.month
  217|      0|		case .day: return NSCalendar.Unit.day
  218|      0|		case .hour: return NSCalendar.Unit.hour
  219|      0|		case .minute: return NSCalendar.Unit.minute
  220|      0|		case .second: return NSCalendar.Unit.second
  221|      0|		case .weekday: return NSCalendar.Unit.weekday
  222|      0|		case .weekdayOrdinal: return NSCalendar.Unit.weekdayOrdinal
  223|      0|		case .quarter: return NSCalendar.Unit.quarter
  224|      0|		case .weekOfMonth: return NSCalendar.Unit.weekOfMonth
  225|      0|		case .weekOfYear: return NSCalendar.Unit.weekOfYear
  226|      0|		case .yearForWeekOfYear: return NSCalendar.Unit.yearForWeekOfYear
  227|      0|		case .nanosecond: return NSCalendar.Unit.nanosecond
  228|      0|		case .calendar: return NSCalendar.Unit.calendar
  229|      0|		case .timeZone: return NSCalendar.Unit.timeZone
  230|      0|		@unknown default:
  231|      0|			fatalError("Unsupported type \(self)")
  232|      0|		}
  233|      0|	}
  234|       |}
  235|       |
  236|       |/// Rounding mode for dates.
  237|       |/// Round off/up (ceil) or down (floor) target date.
  238|       |public enum RoundDateMode {
  239|       |	case to5Mins
  240|       |	case to10Mins
  241|       |	case to30Mins
  242|       |	case toMins(_: Int)
  243|       |	case toCeil5Mins
  244|       |	case toCeil10Mins
  245|       |	case toCeil30Mins
  246|       |	case toCeilMins(_: Int)
  247|       |	case toFloor5Mins
  248|       |	case toFloor10Mins
  249|       |	case toFloor30Mins
  250|       |	case toFloorMins(_: Int)
  251|       |}
  252|       |
  253|       |/// Related type enum to get derivated date from a receiver date.
  254|       |public enum DateRelatedType {
  255|       |	case startOfDay
  256|       |	case endOfDay
  257|       |	case startOfWeek
  258|       |	case endOfWeek
  259|       |	case startOfMonth
  260|       |	case endOfMonth
  261|       |	case tomorrow
  262|       |	case tomorrowAtStart
  263|       |	case yesterday
  264|       |	case yesterdayAtStart
  265|       |	case nearestMinute(minute: Int)
  266|       |	case nearestHour(hour :Int)
  267|       |	case nextWeekday(_: WeekDay)
  268|       |	case nextDSTDate
  269|       |	case prevMonth
  270|       |	case nextMonth
  271|       |	case prevWeek
  272|       |	case nextWeek
  273|       |	case nextYear
  274|       |	case prevYear
  275|       |	case nextDSTTransition
  276|       |}
  277|       |
  278|       |public struct TimeCalculationOptions {
  279|       |
  280|       |	/// Specifies the technique the search algorithm uses to find result
  281|       |	public var matchingPolicy: Calendar.MatchingPolicy
  282|       |
  283|       |	/// Specifies the behavior when multiple matches are found
  284|       |	public var repeatedTimePolicy: Calendar.RepeatedTimePolicy
  285|       |
  286|       |	/// Specifies the direction in time to search
  287|       |	public var direction: Calendar.SearchDirection
  288|       |
  289|       |	public init(matching: Calendar.MatchingPolicy = .nextTime,
  290|       |				timePolicy: Calendar.RepeatedTimePolicy = .first,
  291|      0|				direction: Calendar.SearchDirection = .forward) {
  292|      0|		self.matchingPolicy = matching
  293|      0|		self.repeatedTimePolicy = timePolicy
  294|      0|		self.direction = direction
  295|      0|	}
  296|       |}
  297|       |
  298|       |// MARK: - compactMap for Swift 4.0 (not necessary > 4.0)
  299|       |
  300|       |#if swift(>=4.1)
  301|       |#else
  302|       |	extension Collection {
  303|       |		func compactMap<ElementOfResult>(
  304|       |			_ transform: (Element) throws -> ElementOfResult?
  305|       |			) rethrows -> [ElementOfResult] {
  306|       |			return try flatMap(transform)
  307|       |		}
  308|       |	}
  309|       |#endif
  310|       |
  311|       |// MARK: - Foundation Bundle
  312|       |
  313|       |private class BundleFinder {}
  314|       |
  315|       |extension Foundation.Bundle {
  316|       |    
  317|       |    /// Returns the resource bundle associated with the current Swift module.
  318|       |    /// This is used instead of `module` to allows compatibility outside the SwiftPM environment (ie. CocoaPods).
  319|      0|    static var appModule: Bundle? = {
  320|      0|        let bundleName = "SwiftDate_SwiftDate"
  321|      0|
  322|      0|        let candidates = [
  323|      0|            // Bundle should be present here when the package is linked into an App.
  324|      0|            Bundle.main.resourceURL,
  325|      0|
  326|      0|            // Bundle should be present here when the package is linked into a framework.
  327|      0|            Bundle(for: BundleFinder.self).resourceURL,
  328|      0|
  329|      0|            // For command-line tools.
  330|      0|            Bundle.main.bundleURL,
  331|      0|        ]
  332|      0|
  333|      0|        for candidate in candidates {
  334|      0|            let bundlePath = candidate?.appendingPathComponent(bundleName + ".bundle")
  335|      0|            if let bundle = bundlePath.flatMap(Bundle.init(url:)) {
  336|      0|                return bundle
  337|      0|            }
  338|      0|        }
  339|      0|        
  340|      0|        return nil
  341|      0|    }()
  342|       |    
  343|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Supports/Locales.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |// swiftlint:disable file_length
   14|       |
   15|       |import Foundation
   16|       |
   17|       |public protocol LocaleConvertible {
   18|       |	func toLocale() -> Locale
   19|       |}
   20|       |
   21|       |extension Locale: LocaleConvertible {
   22|      0|	public func toLocale() -> Locale {
   23|      0|		return self
   24|      0|	}
   25|       |}
   26|       |
   27|       |// swiftlint:disable type_body_length
   28|       |public enum Locales: String, LocaleConvertible {
   29|       |
   30|       |	case current = "current"
   31|       |	case autoUpdating = "currentAutoUpdating"
   32|       |
   33|       |	case afrikaans = "af"
   34|       |	case afrikaansNamibia = "af_NA"
   35|       |	case afrikaansSouthAfrica = "af_ZA"
   36|       |	case aghem = "agq"
   37|       |	case aghemCameroon = "agq_CM"
   38|       |	case akan = "ak"
   39|       |	case akanGhana = "ak_GH"
   40|       |	case albanian = "sq"
   41|       |	case albanianAlbania = "sq_AL"
   42|       |	case albanianKosovo = "sq_XK"
   43|       |	case albanianMacedonia = "sq_MK"
   44|       |	case amharic = "am"
   45|       |	case amharicEthiopia = "am_ET"
   46|       |	case arabic = "ar"
   47|       |	case arabicAlgeria = "ar_DZ"
   48|       |	case arabicBahrain = "ar_BH"
   49|       |	case arabicChad = "ar_TD"
   50|       |	case arabicComoros = "ar_KM"
   51|       |	case arabicDjibouti = "ar_DJ"
   52|       |	case arabicEgypt = "ar_EG"
   53|       |	case arabicEritrea = "ar_ER"
   54|       |	case arabicIraq = "ar_IQ"
   55|       |	case arabicIsrael = "ar_IL"
   56|       |	case arabicJordan = "ar_JO"
   57|       |	case arabicKuwait = "ar_KW"
   58|       |	case arabicLebanon = "ar_LB"
   59|       |	case arabicLibya = "ar_LY"
   60|       |	case arabicMauritania = "ar_MR"
   61|       |	case arabicMorocco = "ar_MA"
   62|       |	case arabicOman = "ar_OM"
   63|       |	case arabicPalestinianTerritories = "ar_PS"
   64|       |	case arabicQatar = "ar_QA"
   65|       |	case arabicSaudiArabia = "ar_SA"
   66|       |	case arabicSomalia = "ar_SO"
   67|       |	case arabicSouthSudan = "ar_SS"
   68|       |	case arabicSudan = "ar_SD"
   69|       |	case arabicSyria = "ar_SY"
   70|       |	case arabicTunisia = "ar_TN"
   71|       |	case arabicUnitedArabEmirates = "ar_AE"
   72|       |	case arabicWesternSahara = "ar_EH"
   73|       |	case arabicWorld = "ar_001"
   74|       |	case arabicYemen = "ar_YE"
   75|       |	case armenian = "hy"
   76|       |	case armenianArmenia = "hy_AM"
   77|       |	case assamese = "as"
   78|       |	case assameseIndia = "as_IN"
   79|       |	case asu = "asa"
   80|       |	case asuTanzania = "asa_TZ"
   81|       |	case azerbaijani = "az_Latn"
   82|       |	case azerbaijaniAzerbaijan = "az_Latn_AZ"
   83|       |	case azerbaijaniCyrillic = "az_Cyrl"
   84|       |	case azerbaijaniCyrillicAzerbaijan = "az_Cyrl_AZ"
   85|       |	case bafia = "ksf"
   86|       |	case bafiaCameroon = "ksf_CM"
   87|       |	case bambara = "bm_Latn"
   88|       |	case bambaraMali = "bm_Latn_ML"
   89|       |	case basaa = "bas"
   90|       |	case basaaCameroon = "bas_CM"
   91|       |	case basque = "eu"
   92|       |	case basqueSpain = "eu_ES"
   93|       |	case belarusian = "be"
   94|       |	case belarusianBelarus = "be_BY"
   95|       |	case bemba = "bem"
   96|       |	case bembaZambia = "bem_ZM"
   97|       |	case bena = "bez"
   98|       |	case benaTanzania = "bez_TZ"
   99|       |	case bengali = "bn"
  100|       |	case bengaliBangladesh = "bn_BD"
  101|       |	case engaliIndia = "bn_IN"
  102|       |	case bodo = "brx"
  103|       |	case bodoIndia = "brx_IN"
  104|       |	case bosnian = "bs_Latn"
  105|       |	case bosnianBosniaHerzegovina = "bs_Latn_BA"
  106|       |	case bosnianCyrillic = "bs_Cyrl"
  107|       |	case bosnianCyrillicBosniaHerzegovina = "bs_Cyrl_BA"
  108|       |	case breton = "br"
  109|       |	case bretonFrance = "br_FR"
  110|       |	case bulgarian = "bg"
  111|       |	case bulgarianBulgaria = "bg_BG"
  112|       |	case burmese = "my"
  113|       |	case burmeseMyanmarBurma = "my_MM"
  114|       |	case catalan = "ca"
  115|       |	case catalanAndorra = "ca_AD"
  116|       |	case catalanFrance = "ca_FR"
  117|       |	case catalanItaly = "ca_IT"
  118|       |	case catalanSpain = "ca_ES"
  119|       |	case centralAtlasTamazight = "tzm_Latn"
  120|       |	case centralAtlasTamazightMorocco = "tzm_Latn_MA"
  121|       |	case centralKurdish = "ckb"
  122|       |	case centralKurdishIran = "ckb_IR"
  123|       |	case centralKurdishIraq = "ckb_IQ"
  124|       |	case cherokee = "chr"
  125|       |	case cherokeeUnitedStates = "chr_US"
  126|       |	case chiga = "cgg"
  127|       |	case chigaUganda = "cgg_UG"
  128|       |	case chinese = "zh"
  129|       |	case chineseChina = "zh_Hans_CN"
  130|       |	case chineseHongKongSarChina = "zh_Hant_HK"
  131|       |	case chineseMacauSarChina = "zh_Hant_MO"
  132|       |	case chineseSimplified = "zh_Hans"
  133|       |	case chineseSimplifiedHongKongSarChina = "zh_Hans_HK"
  134|       |	case chineseSimplifiedMacauSarChina = "zh_Hans_MO"
  135|       |	case chineseSingapore = "zh_Hans_SG"
  136|       |	case chineseTaiwan = "zh_Hant_TW"
  137|       |	case chineseTraditional = "zh_Hant"
  138|       |	case colognian = "ksh"
  139|       |	case colognianGermany = "ksh_DE"
  140|       |	case cornish = "kw"
  141|       |	case cornishUnitedKingdom = "kw_GB"
  142|       |	case croatian = "hr"
  143|       |	case croatianBosniaHerzegovina = "hr_BA"
  144|       |	case croatianCroatia = "hr_HR"
  145|       |	case czech = "cs"
  146|       |	case czechCzechRepublic = "cs_CZ"
  147|       |	case danish = "da"
  148|       |	case danishDenmark = "da_DK"
  149|       |	case danishGreenland = "da_GL"
  150|       |	case duala = "dua"
  151|       |	case dualaCameroon = "dua_CM"
  152|       |	case dutch = "nl"
  153|       |	case dutchAruba = "nl_AW"
  154|       |	case dutchBelgium = "nl_BE"
  155|       |	case dutchCaribbeanNetherlands = "nl_BQ"
  156|       |	case dutchCuraao = "nl_CW"
  157|       |	case dutchNetherlands = "nl_NL"
  158|       |	case dutchSintMaarten = "nl_SX"
  159|       |	case dutchSuriname = "nl_SR"
  160|       |	case dzongkha = "dz"
  161|       |	case dzongkhaBhutan = "dz_BT"
  162|       |	case embu = "ebu"
  163|       |	case embuKenya = "ebu_KE"
  164|       |	case english = "en"
  165|       |	case englishAlbania = "en_AL"
  166|       |	case englishAmericanSamoa = "en_AS"
  167|       |	case englishAndorra = "en_AD"
  168|       |	case englishAnguilla = "en_AI"
  169|       |	case englishAntiguaBarbuda = "en_AG"
  170|       |	case englishAustralia = "en_AU"
  171|       |	case englishAustria = "en_AT"
  172|       |	case englishBahamas = "en_BS"
  173|       |	case englishBarbados = "en_BB"
  174|       |	case englishBelgium = "en_BE"
  175|       |	case englishBelize = "en_BZ"
  176|       |	case englishBermuda = "en_BM"
  177|       |	case englishBosniaHerzegovina = "en_BA"
  178|       |	case englishBotswana = "en_BW"
  179|       |	case englishBritishIndianOceanTerritory = "en_IO"
  180|       |	case englishBritishVirginIslands = "en_VG"
  181|       |	case englishCameroon = "en_CM"
  182|       |	case englishCanada = "en_CA"
  183|       |	case englishCaymanIslands = "en_KY"
  184|       |	case englishChristmasIsland = "en_CX"
  185|       |	case englishCocosKeelingIslands = "en_CC"
  186|       |	case englishCookIslands = "en_CK"
  187|       |	case englishCroatia = "en_HR"
  188|       |	case englishCyprus = "en_CY"
  189|       |	case englishCzechRepublic = "en_CZ"
  190|       |	case englishDenmark = "en_DK"
  191|       |	case englishDiegoGarcia = "en_DG"
  192|       |	case englishDominica = "en_DM"
  193|       |	case englishEritrea = "en_ER"
  194|       |	case englishEstonia = "en_EE"
  195|       |	case englishEurope = "en_150"
  196|       |	case englishFalklandIslands = "en_FK"
  197|       |	case englishFiji = "en_FJ"
  198|       |	case englishFinland = "en_FI"
  199|       |	case englishFrance = "en_FR"
  200|       |	case englishGambia = "en_GM"
  201|       |	case englishGermany = "en_DE"
  202|       |	case englishGhana = "en_GH"
  203|       |	case englishGibraltar = "en_GI"
  204|       |	case englishGreece = "en_GR"
  205|       |	case englishGrenada = "en_GD"
  206|       |	case englishGuam = "en_GU"
  207|       |	case englishGuernsey = "en_GG"
  208|       |	case englishGuyana = "en_GY"
  209|       |	case englishHongKongSarChina = "en_HK"
  210|       |	case englishHungary = "en_HU"
  211|       |	case englishIceland = "en_IS"
  212|       |	case englishIndia = "en_IN"
  213|       |	case englishIreland = "en_IE"
  214|       |	case englishIsleOfMan = "en_IM"
  215|       |	case englishIsrael = "en_IL"
  216|       |	case englishItaly = "en_IT"
  217|       |	case englishJamaica = "en_JM"
  218|       |	case englishJersey = "en_JE"
  219|       |	case englishKenya = "en_KE"
  220|       |	case englishKiribati = "en_KI"
  221|       |	case englishLatvia = "en_LV"
  222|       |	case englishLesotho = "en_LS"
  223|       |	case englishLiberia = "en_LR"
  224|       |	case englishLithuania = "en_LT"
  225|       |	case englishLuxembourg = "en_LU"
  226|       |	case englishMacauSarChina = "en_MO"
  227|       |	case englishMadagascar = "en_MG"
  228|       |	case englishMalawi = "en_MW"
  229|       |	case englishMalaysia = "en_MY"
  230|       |	case englishMalta = "en_MT"
  231|       |	case englishMarshallIslands = "en_MH"
  232|       |	case englishMauritius = "en_MU"
  233|       |	case englishMicronesia = "en_FM"
  234|       |	case englishMontenegro = "en_ME"
  235|       |	case englishMontserrat = "en_MS"
  236|       |	case englishNamibia = "en_NA"
  237|       |	case englishNauru = "en_NR"
  238|       |	case englishNetherlands = "en_NL"
  239|       |	case englishNewZealand = "en_NZ"
  240|       |	case englishNigeria = "en_NG"
  241|       |	case englishNiue = "en_NU"
  242|       |	case englishNorfolkIsland = "en_NF"
  243|       |	case englishNorthernMarianaIslands = "en_MP"
  244|       |	case englishNorway = "en_NO"
  245|       |	case englishPakistan = "en_PK"
  246|       |	case englishPalau = "en_PW"
  247|       |	case englishPapuaNewGuinea = "en_PG"
  248|       |	case englishPhilippines = "en_PH"
  249|       |	case englishPitcairnIslands = "en_PN"
  250|       |	case englishPoland = "en_PL"
  251|       |	case englishPortugal = "en_PT"
  252|       |	case englishPuertoRico = "en_PR"
  253|       |	case englishRomania = "en_RO"
  254|       |	case englishRussia = "en_RU"
  255|       |	case englishRwanda = "en_RW"
  256|       |	case englishSamoa = "en_WS"
  257|       |	case englishSeychelles = "en_SC"
  258|       |	case englishSierraLeone = "en_SL"
  259|       |	case englishSingapore = "en_SG"
  260|       |	case englishSintMaarten = "en_SX"
  261|       |	case englishSlovakia = "en_SK"
  262|       |	case englishSlovenia = "en_SI"
  263|       |	case englishSolomonIslands = "en_SB"
  264|       |	case englishSouthAfrica = "en_ZA"
  265|       |	case englishSouthSudan = "en_SS"
  266|       |	case englishSpain = "en_ES"
  267|       |	case englishStHelena = "en_SH"
  268|       |	case englishStKittsNevis = "en_KN"
  269|       |	case englishStLucia = "en_LC"
  270|       |	case englishStVincentGrenadines = "en_VC"
  271|       |	case englishSudan = "en_SD"
  272|       |	case englishSwaziland = "en_SZ"
  273|       |	case englishSweden = "en_SE"
  274|       |	case englishSwitzerland = "en_CH"
  275|       |	case englishTanzania = "en_TZ"
  276|       |	case englishTokelau = "en_TK"
  277|       |	case englishTonga = "en_TO"
  278|       |	case englishTrinidadTobago = "en_TT"
  279|       |	case englishTurkey = "en_TR"
  280|       |	case englishTurksCaicosIslands = "en_TC"
  281|       |	case englishTuvalu = "en_TV"
  282|       |	case englishUSOutlyingIslands = "en_UM"
  283|       |	case englishUSVirginIslands = "en_VI"
  284|       |	case englishUganda = "en_UG"
  285|       |	case englishUnitedKingdom = "en_GB"
  286|       |	case englishUnitedStates = "en_US"
  287|       |	case englishUnitedStatesComputer = "en_US_POSIX"
  288|       |	case englishVanuatu = "en_VU"
  289|       |	case englishWorld = "en_001"
  290|       |	case englishZambia = "en_ZM"
  291|       |	case englishZimbabwe = "en_ZW"
  292|       |	case esperanto = "eo"
  293|       |	case estonian = "et"
  294|       |	case estonianEstonia = "et_EE"
  295|       |	case ewe = "ee"
  296|       |	case eweGhana = "ee_GH"
  297|       |	case eweTogo = "ee_TG"
  298|       |	case ewondo = "ewo"
  299|       |	case ewondoCameroon = "ewo_CM"
  300|       |	case faroese = "fo"
  301|       |	case faroeseFaroeIslands = "fo_FO"
  302|       |	case filipino = "fil"
  303|       |	case filipinoPhilippines = "fil_PH"
  304|       |	case finnish = "fi"
  305|       |	case finnishFinland = "fi_FI"
  306|       |	case french = "fr"
  307|       |	case frenchAlgeria = "fr_DZ"
  308|       |	case frenchBelgium = "fr_BE"
  309|       |	case frenchBenin = "fr_BJ"
  310|       |	case frenchBurkinaFaso = "fr_BF"
  311|       |	case frenchBurundi = "fr_BI"
  312|       |	case frenchCameroon = "fr_CM"
  313|       |	case frenchCanada = "fr_CA"
  314|       |	case frenchCentralAfricanRepublic = "fr_CF"
  315|       |	case frenchChad = "fr_TD"
  316|       |	case frenchComoros = "fr_KM"
  317|       |	case frenchCongoBrazzaville = "fr_CG"
  318|       |	case frenchCongoKinshasa = "fr_CD"
  319|       |	case frenchCteDivoire = "fr_CI"
  320|       |	case frenchDjibouti = "fr_DJ"
  321|       |	case frenchEquatorialGuinea = "fr_GQ"
  322|       |	case frenchFrance = "fr_FR"
  323|       |	case frenchFrenchGuiana = "fr_GF"
  324|       |	case frenchFrenchPolynesia = "fr_PF"
  325|       |	case frenchGabon = "fr_GA"
  326|       |	case frenchGuadeloupe = "fr_GP"
  327|       |	case frenchGuinea = "fr_GN"
  328|       |	case frenchHaiti = "fr_HT"
  329|       |	case frenchLuxembourg = "fr_LU"
  330|       |	case frenchMadagascar = "fr_MG"
  331|       |	case frenchMali = "fr_ML"
  332|       |	case frenchMartinique = "fr_MQ"
  333|       |	case frenchMauritania = "fr_MR"
  334|       |	case frenchMauritius = "fr_MU"
  335|       |	case frenchMayotte = "fr_YT"
  336|       |	case frenchMonaco = "fr_MC"
  337|       |	case frenchMorocco = "fr_MA"
  338|       |	case frenchNewCaledonia = "fr_NC"
  339|       |	case frenchNiger = "fr_NE"
  340|       |	case frenchRunion = "fr_RE"
  341|       |	case frenchRwanda = "fr_RW"
  342|       |	case frenchSenegal = "fr_SN"
  343|       |	case frenchSeychelles = "fr_SC"
  344|       |	case frenchStBarthlemy = "fr_BL"
  345|       |	case frenchStMartin = "fr_MF"
  346|       |	case frenchStPierreMiquelon = "fr_PM"
  347|       |	case frenchSwitzerland = "fr_CH"
  348|       |	case frenchSyria = "fr_SY"
  349|       |	case frenchTogo = "fr_TG"
  350|       |	case frenchTunisia = "fr_TN"
  351|       |	case frenchVanuatu = "fr_VU"
  352|       |	case frenchWallisFutuna = "fr_WF"
  353|       |	case friulian = "fur"
  354|       |	case friulianItaly = "fur_IT"
  355|       |	case fulah = "ff"
  356|       |	case fulahCameroon = "ff_CM"
  357|       |	case fulahGuinea = "ff_GN"
  358|       |	case fulahMauritania = "ff_MR"
  359|       |	case fulahSenegal = "ff_SN"
  360|       |	case galician = "gl"
  361|       |	case galicianSpain = "gl_ES"
  362|       |	case ganda = "lg"
  363|       |	case gandaUganda = "lg_UG"
  364|       |	case georgian = "ka"
  365|       |	case georgianGeorgia = "ka_GE"
  366|       |	case german = "de"
  367|       |	case germanAustria = "de_AT"
  368|       |	case germanBelgium = "de_BE"
  369|       |	case germanGermany = "de_DE"
  370|       |	case germanLiechtenstein = "de_LI"
  371|       |	case germanLuxembourg = "de_LU"
  372|       |	case germanSwitzerland = "de_CH"
  373|       |	case greek = "el"
  374|       |	case greekCyprus = "el_CY"
  375|       |	case greekGreece = "el_GR"
  376|       |	case gujarati = "gu"
  377|       |	case gujaratiIndia = "gu_IN"
  378|       |	case gusii = "guz"
  379|       |	case gusiiKenya = "guz_KE"
  380|       |	case hausa = "ha_Latn"
  381|       |	case hausaGhana = "ha_Latn_GH"
  382|       |	case hausaNiger = "ha_Latn_NE"
  383|       |	case hausaNigeria = "ha_Latn_NG"
  384|       |	case hawaiian = "haw"
  385|       |	case hawaiianUnitedStates = "haw_US"
  386|       |	case hebrew = "he"
  387|       |	case hebrewIsrael = "he_IL"
  388|       |	case hindi = "hi"
  389|       |	case hindiIndia = "hi_IN"
  390|       |	case hungarian = "hu"
  391|       |	case hungarianHungary = "hu_HU"
  392|       |	case icelandic = "is"
  393|       |	case icelandicIceland = "is_IS"
  394|       |	case igbo = "ig"
  395|       |	case igboNigeria = "ig_NG"
  396|       |	case inariSami = "smn"
  397|       |	case inariSamiFinland = "smn_FI"
  398|       |	case indonesian = "id"
  399|       |	case indonesianIndonesia = "id_ID"
  400|       |	case inuktitut = "iu"
  401|       |	case inuktitutUnifiedCanadianAboriginalSyllabics = "iu_Cans"
  402|       |	case inuktitutUnifiedCanadianAboriginalSyllabicsCanada = "iu_Cans_CA"
  403|       |	case irish = "ga"
  404|       |	case irishIreland = "ga_IE"
  405|       |	case italian = "it"
  406|       |	case italianItaly = "it_IT"
  407|       |	case italianSanMarino = "it_SM"
  408|       |	case italianSwitzerland = "it_CH"
  409|       |	case japanese = "ja"
  410|       |	case japaneseJapan = "ja_JP"
  411|       |	case jolaFonyi = "dyo"
  412|       |	case jolaFonyiSenegal = "dyo_SN"
  413|       |	case kabuverdianu = "kea"
  414|       |	case kabuverdianuCapeVerde = "kea_CV"
  415|       |	case kabyle = "kab"
  416|       |	case kabyleAlgeria = "kab_DZ"
  417|       |	case kako = "kkj"
  418|       |	case kakoCameroon = "kkj_CM"
  419|       |	case kalaallisut = "kl"
  420|       |	case kalaallisutGreenland = "kl_GL"
  421|       |	case kalenjin = "kln"
  422|       |	case kalenjinKenya = "kln_KE"
  423|       |	case kamba = "kam"
  424|       |	case kambaKenya = "kam_KE"
  425|       |	case kannada = "kn"
  426|       |	case kannadaIndia = "kn_IN"
  427|       |	case kashmiri = "ks"
  428|       |	case kashmiriArabic = "ks_Arab"
  429|       |	case kashmiriArabicIndia = "ks_Arab_IN"
  430|       |	case kazakh = "kk_Cyrl"
  431|       |	case kazakhKazakhstan = "kk_Cyrl_KZ"
  432|       |	case khmer = "km"
  433|       |	case khmerCambodia = "km_KH"
  434|       |	case kikuyu = "ki"
  435|       |	case kikuyuKenya = "ki_KE"
  436|       |	case kinyarwanda = "rw"
  437|       |	case kinyarwandaRwanda = "rw_RW"
  438|       |	case konkani = "kok"
  439|       |	case konkaniIndia = "kok_IN"
  440|       |	case korean = "ko"
  441|       |	case koreanNorthKorea = "ko_KP"
  442|       |	case koreanSouthKorea = "ko_KR"
  443|       |	case koyraChiini = "khq"
  444|       |	case koyraChiiniMali = "khq_ML"
  445|       |	case koyraboroSenni = "ses"
  446|       |	case koyraboroSenniMali = "ses_ML"
  447|       |	case kwasio = "nmg"
  448|       |	case kwasioCameroon = "nmg_CM"
  449|       |	case kyrgyz = "ky_Cyrl"
  450|       |	case kyrgyzKyrgyzstan = "ky_Cyrl_KG"
  451|       |	case lakota = "lkt"
  452|       |	case lakotaUnitedStates = "lkt_US"
  453|       |	case langi = "lag"
  454|       |	case langiTanzania = "lag_TZ"
  455|       |	case lao = "lo"
  456|       |	case laoLaos = "lo_LA"
  457|       |	case latvian = "lv"
  458|       |	case latvianLatvia = "lv_LV"
  459|       |	case lingala = "ln"
  460|       |	case lingalaAngola = "ln_AO"
  461|       |	case lingalaCentralAfricanRepublic = "ln_CF"
  462|       |	case lingalaCongoBrazzaville = "ln_CG"
  463|       |	case lingalaCongoKinshasa = "ln_CD"
  464|       |	case lithuanian = "lt"
  465|       |	case lithuanianLithuania = "lt_LT"
  466|       |	case lowerSorbian = "dsb"
  467|       |	case lowerSorbianGermany = "dsb_DE"
  468|       |	case lubaKatanga = "lu"
  469|       |	case lubaKatangaCongoKinshasa = "lu_CD"
  470|       |	case luo = "luo"
  471|       |	case luoKenya = "luo_KE"
  472|       |	case luxembourgish = "lb"
  473|       |	case luxembourgishLuxembourg = "lb_LU"
  474|       |	case luyia = "luy"
  475|       |	case luyiaKenya = "luy_KE"
  476|       |	case macedonian = "mk"
  477|       |	case macedonianMacedonia = "mk_MK"
  478|       |	case machame = "jmc"
  479|       |	case machameTanzania = "jmc_TZ"
  480|       |	case makhuwaMeetto = "mgh"
  481|       |	case makhuwaMeettoMozambique = "mgh_MZ"
  482|       |	case makonde = "kde"
  483|       |	case makondeTanzania = "kde_TZ"
  484|       |	case malagasy = "mg"
  485|       |	case malagasyMadagascar = "mg_MG"
  486|       |	case malay = "ms_Latn"
  487|       |	case malayArabic = "ms_Arab"
  488|       |	case malayArabicBrunei = "ms_Arab_BN"
  489|       |	case malayArabicMalaysia = "ms_Arab_MY"
  490|       |	case malayBrunei = "ms_Latn_BN"
  491|       |	case malayMalaysia = "ms_Latn_MY"
  492|       |	case malaySingapore = "ms_Latn_SG"
  493|       |	case malayalam = "ml"
  494|       |	case malayalamIndia = "ml_IN"
  495|       |	case maltese = "mt"
  496|       |	case malteseMalta = "mt_MT"
  497|       |	case manx = "gv"
  498|       |	case manxIsleOfMan = "gv_IM"
  499|       |	case marathi = "mr"
  500|       |	case marathiIndia = "mr_IN"
  501|       |	case masai = "mas"
  502|       |	case masaiKenya = "mas_KE"
  503|       |	case masaiTanzania = "mas_TZ"
  504|       |	case meru = "mer"
  505|       |	case meruKenya = "mer_KE"
  506|       |	case meta = "mgo"
  507|       |	case metaCameroon = "mgo_CM"
  508|       |	case mongolian = "mn_Cyrl"
  509|       |	case mongolianMongolia = "mn_Cyrl_MN"
  510|       |	case morisyen = "mfe"
  511|       |	case morisyenMauritius = "mfe_MU"
  512|       |	case mundang = "mua"
  513|       |	case mundangCameroon = "mua_CM"
  514|       |	case nama = "naq"
  515|       |	case namaNamibia = "naq_NA"
  516|       |	case nepali = "ne"
  517|       |	case nepaliIndia = "ne_IN"
  518|       |	case nepaliNepal = "ne_NP"
  519|       |	case ngiemboon = "nnh"
  520|       |	case ngiemboonCameroon = "nnh_CM"
  521|       |	case ngomba = "jgo"
  522|       |	case ngombaCameroon = "jgo_CM"
  523|       |	case northNdebele = "nd"
  524|       |	case northNdebeleZimbabwe = "nd_ZW"
  525|       |	case northernSami = "se"
  526|       |	case northernSamiFinland = "se_FI"
  527|       |	case northernSamiNorway = "se_NO"
  528|       |	case northernSamiSweden = "se_SE"
  529|       |	case norwegianBokml = "nb"
  530|       |	case norwegianBokmlNorway = "nb_NO"
  531|       |	case norwegianBokmlSvalbardJanMayen = "nb_SJ"
  532|       |	case norwegianNynorsk = "nn"
  533|       |	case norwegianNynorskNorway = "nn_NO"
  534|       |	case nuer = "nus"
  535|       |	case nuerSudan = "nus_SD"
  536|       |	case nyankole = "nyn"
  537|       |	case nyankoleUganda = "nyn_UG"
  538|       |	case oriya = "or"
  539|       |	case oriyaIndia = "or_IN"
  540|       |	case oromo = "om"
  541|       |	case oromoEthiopia = "om_ET"
  542|       |	case oromoKenya = "om_KE"
  543|       |	case ossetic = "os"
  544|       |	case osseticGeorgia = "os_GE"
  545|       |	case osseticRussia = "os_RU"
  546|       |	case pashto = "ps"
  547|       |	case pashtoAfghanistan = "ps_AF"
  548|       |	case persian = "fa"
  549|       |	case persianAfghanistan = "fa_AF"
  550|       |	case persianIran = "fa_IR"
  551|       |	case polish = "pl"
  552|       |	case polishPoland = "pl_PL"
  553|       |	case portuguese = "pt"
  554|       |	case portugueseAngola = "pt_AO"
  555|       |	case portugueseBrazil = "pt_BR"
  556|       |	case portugueseCapeVerde = "pt_CV"
  557|       |	case portugueseGuineaBissau = "pt_GW"
  558|       |	case portugueseMacauSarChina = "pt_MO"
  559|       |	case portugueseMozambique = "pt_MZ"
  560|       |	case portuguesePortugal = "pt_PT"
  561|       |	case portugueseSoTomPrncipe = "pt_ST"
  562|       |	case portugueseTimorLeste = "pt_TL"
  563|       |	case punjabi = "pa_Guru"
  564|       |	case punjabiArabic = "pa_Arab"
  565|       |	case punjabiArabicPakistan = "pa_Arab_PK"
  566|       |	case punjabiIndia = "pa_Guru_IN"
  567|       |	case quechua = "qu"
  568|       |	case quechuaBolivia = "qu_BO"
  569|       |	case quechuaEcuador = "qu_EC"
  570|       |	case quechuaPeru = "qu_PE"
  571|       |	case romanian = "ro"
  572|       |	case romanianMoldova = "ro_MD"
  573|       |	case romanianRomania = "ro_RO"
  574|       |	case romansh = "rm"
  575|       |	case romanshSwitzerland = "rm_CH"
  576|       |	case rombo = "rof"
  577|       |	case romboTanzania = "rof_TZ"
  578|       |	case rundi = "rn"
  579|       |	case rundiBurundi = "rn_BI"
  580|       |	case russian = "ru"
  581|       |	case russianBelarus = "ru_BY"
  582|       |	case russianKazakhstan = "ru_KZ"
  583|       |	case russianKyrgyzstan = "ru_KG"
  584|       |	case russianMoldova = "ru_MD"
  585|       |	case russianRussia = "ru_RU"
  586|       |	case russianUkraine = "ru_UA"
  587|       |	case rwa = "rwk"
  588|       |	case rwaTanzania = "rwk_TZ"
  589|       |	case sakha = "sah"
  590|       |	case sakhaRussia = "sah_RU"
  591|       |	case samburu = "saq"
  592|       |	case samburuKenya = "saq_KE"
  593|       |	case sango = "sg"
  594|       |	case sangoCentralAfricanRepublic = "sg_CF"
  595|       |	case sangu = "sbp"
  596|       |	case sanguTanzania = "sbp_TZ"
  597|       |	case scottishGaelic = "gd"
  598|       |	case scottishGaelicUnitedKingdom = "gd_GB"
  599|       |	case sena = "seh"
  600|       |	case senaMozambique = "seh_MZ"
  601|       |	case serbian = "sr_Cyrl"
  602|       |	case serbianBosniaHerzegovina = "sr_Cyrl_BA"
  603|       |	case serbianKosovo = "sr_Cyrl_XK"
  604|       |	case serbianLatin = "sr_Latn"
  605|       |	case serbianLatinBosniaHerzegovina = "sr_Latn_BA"
  606|       |	case serbianLatinKosovo = "sr_Latn_XK"
  607|       |	case serbianLatinMontenegro = "sr_Latn_ME"
  608|       |	case serbianLatinSerbia = "sr_Latn_RS"
  609|       |	case serbianMontenegro = "sr_Cyrl_ME"
  610|       |	case serbianSerbia = "sr_Cyrl_RS"
  611|       |	case shambala = "ksb"
  612|       |	case shambalaTanzania = "ksb_TZ"
  613|       |	case shona = "sn"
  614|       |	case shonaZimbabwe = "sn_ZW"
  615|       |	case sichuanYi = "ii"
  616|       |	case sichuanYiChina = "ii_CN"
  617|       |	case sinhala = "si"
  618|       |	case sinhalaSriLanka = "si_LK"
  619|       |	case slovak = "sk"
  620|       |	case slovakSlovakia = "sk_SK"
  621|       |	case slovenian = "sl"
  622|       |	case slovenianSlovenia = "sl_SI"
  623|       |	case soga = "xog"
  624|       |	case sogaUganda = "xog_UG"
  625|       |	case somali = "so"
  626|       |	case somaliDjibouti = "so_DJ"
  627|       |	case somaliEthiopia = "so_ET"
  628|       |	case somaliKenya = "so_KE"
  629|       |	case somaliSomalia = "so_SO"
  630|       |	case spanish = "es"
  631|       |	case spanishArgentina = "es_AR"
  632|       |	case spanishBolivia = "es_BO"
  633|       |	case spanishCanaryIslands = "es_IC"
  634|       |	case spanishCeutaMelilla = "es_EA"
  635|       |	case spanishChile = "es_CL"
  636|       |	case spanishColombia = "es_CO"
  637|       |	case spanishCostaRica = "es_CR"
  638|       |	case spanishCuba = "es_CU"
  639|       |	case spanishDominicanRepublic = "es_DO"
  640|       |	case spanishEcuador = "es_EC"
  641|       |	case spanishElSalvador = "es_SV"
  642|       |	case spanishEquatorialGuinea = "es_GQ"
  643|       |	case spanishGuatemala = "es_GT"
  644|       |	case spanishHonduras = "es_HN"
  645|       |	case spanishLatinAmerica = "es_419"
  646|       |	case spanishMexico = "es_MX"
  647|       |	case spanishNicaragua = "es_NI"
  648|       |	case spanishPanama = "es_PA"
  649|       |	case spanishParaguay = "es_PY"
  650|       |	case spanishPeru = "es_PE"
  651|       |	case spanishPhilippines = "es_PH"
  652|       |	case spanishPuertoRico = "es_PR"
  653|       |	case spanishSpain = "es_ES"
  654|       |	case spanishUnitedStates = "es_US"
  655|       |	case spanishUruguay = "es_UY"
  656|       |	case spanishVenezuela = "es_VE"
  657|       |	case standardMoroccanTamazight = "zgh"
  658|       |	case standardMoroccanTamazightMorocco = "zgh_MA"
  659|       |	case swahili = "sw"
  660|       |	case swahiliCongoKinshasa = "sw_CD"
  661|       |	case swahiliKenya = "sw_KE"
  662|       |	case swahiliTanzania = "sw_TZ"
  663|       |	case swahiliUganda = "sw_UG"
  664|       |	case swedish = "sv"
  665|       |	case swedishlandIslands = "sv_AX"
  666|       |	case swedishFinland = "sv_FI"
  667|       |	case swedishSweden = "sv_SE"
  668|       |	case swissGerman = "gsw"
  669|       |	case swissGermanFrance = "gsw_FR"
  670|       |	case swissGermanLiechtenstein = "gsw_LI"
  671|       |	case swissGermanSwitzerland = "gsw_CH"
  672|       |	case tachelhit = "shi_Latn"
  673|       |	case tachelhitMorocco = "shi_Latn_MA"
  674|       |	case tachelhitTifinagh = "shi_Tfng"
  675|       |	case tachelhitTifinaghMorocco = "shi_Tfng_MA"
  676|       |	case taita = "dav"
  677|       |	case taitaKenya = "dav_KE"
  678|       |	case tajik = "tg_Cyrl"
  679|       |	case tajikTajikistan = "tg_Cyrl_TJ"
  680|       |	case tamil = "ta"
  681|       |	case tamilIndia = "ta_IN"
  682|       |	case tamilMalaysia = "ta_MY"
  683|       |	case tamilSingapore = "ta_SG"
  684|       |	case tamilSriLanka = "ta_LK"
  685|       |	case tasawaq = "twq"
  686|       |	case tasawaqNiger = "twq_NE"
  687|       |	case telugu = "te"
  688|       |	case teluguIndia = "te_IN"
  689|       |	case teso = "teo"
  690|       |	case tesoKenya = "teo_KE"
  691|       |	case tesoUganda = "teo_UG"
  692|       |	case thai = "th"
  693|       |	case thaiThailand = "th_TH"
  694|       |	case tibetan = "bo"
  695|       |	case tibetanChina = "bo_CN"
  696|       |	case tibetanIndia = "bo_IN"
  697|       |	case tigrinya = "ti"
  698|       |	case tigrinyaEritrea = "ti_ER"
  699|       |	case tigrinyaEthiopia = "ti_ET"
  700|       |	case tongan = "to"
  701|       |	case tonganTonga = "to_TO"
  702|       |	case turkish = "tr"
  703|       |	case turkishCyprus = "tr_CY"
  704|       |	case turkishTurkey = "tr_TR"
  705|       |	case turkmen = "tk_Latn"
  706|       |	case turkmenTurkmenistan = "tk_Latn_TM"
  707|       |	case ukrainian = "uk"
  708|       |	case ukrainianUkraine = "uk_UA"
  709|       |	case upperSorbian = "hsb"
  710|       |	case upperSorbianGermany = "hsb_DE"
  711|       |	case urdu = "ur"
  712|       |	case urduIndia = "ur_IN"
  713|       |	case urduPakistan = "ur_PK"
  714|       |	case uyghur = "ug"
  715|       |	case uyghurArabic = "ug_Arab"
  716|       |	case uyghurArabicChina = "ug_Arab_CN"
  717|       |	case uzbek = "uz_Cyrl"
  718|       |	case uzbekArabic = "uz_Arab"
  719|       |	case uzbekArabicAfghanistan = "uz_Arab_AF"
  720|       |	case uzbekLatin = "uz_Latn"
  721|       |	case uzbekLatinUzbekistan = "uz_Latn_UZ"
  722|       |	case uzbekUzbekistan = "uz_Cyrl_UZ"
  723|       |	case vai = "vai_Vaii"
  724|       |	case vaiLatin = "vai_Latn"
  725|       |	case vaiLatinLiberia = "vai_Latn_LR"
  726|       |	case vaiLiberia = "vai_Vaii_LR"
  727|       |	case vietnamese = "vi"
  728|       |	case vietnameseVietnam = "vi_VN"
  729|       |	case vunjo = "vun"
  730|       |	case vunjoTanzania = "vun_TZ"
  731|       |	case walser = "wae"
  732|       |	case walserSwitzerland = "wae_CH"
  733|       |	case welsh = "cy"
  734|       |	case welshUnitedKingdom = "cy_GB"
  735|       |	case westernFrisian = "fy"
  736|       |	case westernFrisianNetherlands = "fy_NL"
  737|       |	case yangben = "yav"
  738|       |	case yangbenCameroon = "yav_CM"
  739|       |	case yiddish = "yi"
  740|       |	case yiddishWorld = "yi_001"
  741|       |	case yoruba = "yo"
  742|       |	case yorubaBenin = "yo_BJ"
  743|       |	case yorubaNigeria = "yo_NG"
  744|       |	case zarma = "dje"
  745|       |	case zarmaNiger = "dje_NE"
  746|       |	case zulu = "zu"
  747|       |	case zuluSouthAfrica = "zu_ZA"
  748|       |
  749|       |	/// Return a valid `Locale` instance from current selected locale enum
  750|      0|	public func toLocale() -> Locale {
  751|      0|		switch self {
  752|      0|		case .current:			return Locale.current
  753|      0|		case .autoUpdating:		return Locale.autoupdatingCurrent
  754|      0|		default:				return Locale(identifier: rawValue)
  755|      0|		}
  756|      0|	}
  757|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Supports/TimeStructures.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |// MARK: - Weekday
   16|       |
   17|       |/// This define the weekdays for some functions.
   18|       |public enum WeekDay: Int {
   19|       |	case sunday = 1, monday, tuesday, wednesday, thursday, friday, saturday
   20|       |
   21|       |	/// Returns the name of the day given a specific locale.
   22|       |	/// For example, for the `Friday` enum value, the en_AU locale would return "Friday" and fr_FR would return "samedi"
   23|       |	///
   24|       |	/// - Parameter locale: locale of the output, omit to use the `defaultRegion`'s locale.
   25|       |	/// - Returns: display name
   26|      0|	public func name(style: SymbolFormatStyle = .`default`, locale: LocaleConvertible = SwiftDate.defaultRegion.locale) -> String {
   27|      0|		let region = Region(calendar: SwiftDate.defaultRegion.calendar, zone: SwiftDate.defaultRegion.timeZone, locale: locale)
   28|      0|		let formatter = DateFormatter.sharedFormatter(forRegion: region, format: nil)
   29|      0|
   30|      0|		let idx = (self.rawValue - 1)
   31|      0|		switch style {
   32|      0|		case .default:				return formatter.weekdaySymbols[idx]
   33|      0|		case .defaultStandalone:	return formatter.standaloneWeekdaySymbols[idx]
   34|      0|		case .short:				return formatter.shortWeekdaySymbols[idx]
   35|      0|		case .standaloneShort:		return formatter.shortStandaloneWeekdaySymbols[idx]
   36|      0|		case .veryShort:			return formatter.veryShortWeekdaySymbols[idx]
   37|      0|		case .standaloneVeryShort:	return formatter.veryShortStandaloneWeekdaySymbols[idx]
   38|      0|		}
   39|      0|	}
   40|       |
   41|       |	/// Adds a number of days to the current weekday and returns the new weekday.
   42|       |	///
   43|       |	/// - Parameter months: number of months to add
   44|       |	/// - Returns: new month.
   45|      0|	public func add(days: Int) -> WeekDay {
   46|      0|		let normalized = days % 7
   47|      0|		return WeekDay(rawValue: ((self.rawValue + normalized + 7 - 1) % 7) + 1)!
   48|      0|	}
   49|       |
   50|       |	/// Subtracts a number of days from the current weekday and returns the new weekday.
   51|       |	///
   52|       |	/// - Parameter months: number of days to subtract. May be negative, in which case it will be added
   53|       |	/// - Returns: new weekday.
   54|      0|	public func subtract(days: Int) -> WeekDay {
   55|      0|		return add(days: -(days % 7))
   56|      0|	}
   57|       |
   58|       |}
   59|       |
   60|       |// MARK: - Year
   61|       |
   62|       |public struct Year: CustomStringConvertible, Equatable {
   63|       |	let year: Int
   64|       |
   65|      0|	public var description: String {
   66|      0|		return "\(self.year)"
   67|      0|	}
   68|       |
   69|       |	/// Constructs a `Year` from the passed value.
   70|       |	///
   71|       |	/// - Parameter year: year value. Can be negative.
   72|      0|	public init(_ year: Int) {
   73|      0|		self.year = year
   74|      0|	}
   75|       |
   76|       |	/// Returns whether this year is a leap year
   77|       |	///
   78|       |	/// - Returns: A boolean indicating whether this year is a leap year
   79|      0|	public func isLeap() -> Bool {
   80|      0|		return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0)
   81|      0|	}
   82|       |
   83|       |	/// Returns the number of days in this year
   84|       |	///
   85|       |	/// - Returns: The number of days in this year
   86|      0|	public func numberOfDays() -> Int {
   87|      0|		return self.isLeap() ? 366 : 365
   88|      0|	}
   89|       |
   90|       |}
   91|       |
   92|       |// MARK: - Month
   93|       |
   94|       |/// Defines months in a year
   95|       |public enum Month: Int, CustomStringConvertible, Equatable {
   96|       |	case january = 0, february, march, april, may, june, july, august, september, october, november, december
   97|       |
   98|      0|	public var description: String {
   99|      0|		return self.name()
  100|      0|	}
  101|       |
  102|       |	/// Returns the name of the month given a specific locale.
  103|       |	/// For example, for the `January` enum value, the en_AU locale would return "January" and fr_FR would return "janvier"
  104|       |	///
  105|       |	/// - Parameter locale: locale of the output, omit to use the `defaultRegion`'s locale.
  106|       |	/// - Returns: display name
  107|      0|	public func name(style: SymbolFormatStyle = .`default`, locale: LocaleConvertible = SwiftDate.defaultRegion.locale) -> String {
  108|      0|		let region = Region(calendar: SwiftDate.defaultRegion.calendar, zone: SwiftDate.defaultRegion.timeZone, locale: locale)
  109|      0|		let formatter = DateFormatter.sharedFormatter(forRegion: region, format: nil)
  110|      0|		switch style {
  111|      0|		case .default:				return formatter.monthSymbols[self.rawValue]
  112|      0|		case .defaultStandalone:	return formatter.standaloneMonthSymbols[self.rawValue]
  113|      0|		case .short:				return formatter.shortMonthSymbols[self.rawValue]
  114|      0|		case .standaloneShort:		return formatter.shortStandaloneMonthSymbols[self.rawValue]
  115|      0|		case .veryShort:			return formatter.veryShortMonthSymbols[self.rawValue]
  116|      0|		case .standaloneVeryShort:	return formatter.veryShortStandaloneMonthSymbols[self.rawValue]
  117|      0|		}
  118|      0|	}
  119|       |
  120|       |	/// Adds a number of months to the current month and returns the new month.
  121|       |	///
  122|       |	/// - Parameter months: number of months to add
  123|       |	/// - Returns: new month.
  124|      0|	public func add(months: Int) -> Month {
  125|      0|		let normalized = months % 12
  126|      0|		return Month(rawValue: (self.rawValue + normalized + 12) % 12)!
  127|      0|	}
  128|       |
  129|       |	/// Subtracts a number of months from the current month and returns the new month.
  130|       |	///
  131|       |	/// - Parameter months: number of months to subtract. May be negative, in which case it will be added
  132|       |	/// - Returns: new month.
  133|      0|	public func subtract(months: Int) -> Month {
  134|      0|		return add(months: -(months % 12))
  135|      0|	}
  136|       |
  137|       |	/// Returns the number of days in a this month for a given year
  138|       |	///
  139|       |	/// - Parameter year: reference year.
  140|       |	/// - Returns: The number of days in this month.
  141|      0|	public func numberOfDays(year: Int) -> Int {
  142|      0|		switch self {
  143|      0|		case .february:
  144|      0|			return Year(year).isLeap() ? 29 : 28
  145|      0|		case .april, .june, .september, .november:
  146|      0|			return 30
  147|      0|		default:
  148|      0|			return 31
  149|      0|		}
  150|      0|	}
  151|       |
  152|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/Supports/Zones.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public protocol ZoneConvertible {
   16|       |	func toTimezone() -> TimeZone
   17|       |}
   18|       |
   19|       |extension TimeZone: ZoneConvertible {
   20|      0|	public func toTimezone() -> TimeZone {
   21|      0|		return self
   22|      0|	}
   23|       |}
   24|       |
   25|       |// swiftlint:disable type_body_length
   26|       |public enum Zones: String, ZoneConvertible {
   27|       |	case current = "Current"
   28|       |	case autoUpdating = "CurrentAutoUpdating"
   29|       |	case africaAbidjan = "Africa/Abidjan"
   30|       |	case africaAccra = "Africa/Accra"
   31|       |	case africaAddisAbaba = "Africa/Addis_Ababa"
   32|       |	case africaAlgiers = "Africa/Algiers"
   33|       |	case africaAsmara = "Africa/Asmara"
   34|       |	case africaBamako = "Africa/Bamako"
   35|       |	case africaBangui = "Africa/Bangui"
   36|       |	case africaBanjul = "Africa/Banjul"
   37|       |	case africaBissau = "Africa/Bissau"
   38|       |	case africaBlantyre = "Africa/Blantyre"
   39|       |	case africaBrazzaville = "Africa/Brazzaville"
   40|       |	case africaBujumbura = "Africa/Bujumbura"
   41|       |	case africaCairo = "Africa/Cairo"
   42|       |	case africaCasablanca = "Africa/Casablanca"
   43|       |	case africaCeuta = "Africa/Ceuta"
   44|       |	case africaConakry = "Africa/Conakry"
   45|       |	case africaDakar = "Africa/Dakar"
   46|       |	case africaDarEsSalaam = "Africa/Dar_es_Salaam"
   47|       |	case africaDjibouti = "Africa/Djibouti"
   48|       |	case africaDouala = "Africa/Douala"
   49|       |	case africaElAaiun = "Africa/El_Aaiun"
   50|       |	case africaFreetown = "Africa/Freetown"
   51|       |	case africaGaborone = "Africa/Gaborone"
   52|       |	case africaHarare = "Africa/Harare"
   53|       |	case africaJohannesburg = "Africa/Johannesburg"
   54|       |	case africaJuba = "Africa/Juba"
   55|       |	case africaKampala = "Africa/Kampala"
   56|       |	case africaKhartoum = "Africa/Khartoum"
   57|       |	case fricaKigali = "Africa/Kigali"
   58|       |	case africaKinshasa = "Africa/Kinshasa"
   59|       |	case africaLagos = "Africa/Lagos"
   60|       |	case africaLibreville = "Africa/Libreville"
   61|       |	case africaLome = "Africa/Lome"
   62|       |	case africaLuanda = "Africa/Luanda"
   63|       |	case africaLubumbashi = "Africa/Lubumbashi"
   64|       |	case africaLusaka = "Africa/Lusaka"
   65|       |	case africaMalabo = "Africa/Malabo"
   66|       |	case africaMaputo = "Africa/Maputo"
   67|       |	case africaMaseru = "Africa/Maseru"
   68|       |	case africaMbabane = "Africa/Mbabane"
   69|       |	case africaMogadishu = "Africa/Mogadishu"
   70|       |	case africaMonrovia = "Africa/Monrovia"
   71|       |	case africaNairobi = "Africa/Nairobi"
   72|       |	case africaNdjamena = "Africa/Ndjamena"
   73|       |	case africaNiamey = "Africa/Niamey"
   74|       |	case africaNouakchott = "Africa/Nouakchott"
   75|       |	case africaOuagadougou = "Africa/Ouagadougou"
   76|       |	case africaPortoNovo = "Africa/Porto-Novo"
   77|       |	case africaSaoTome = "Africa/Sao_Tome"
   78|       |	case africaTripoli = "Africa/Tripoli"
   79|       |	case africaTunis = "Africa/Tunis"
   80|       |	case africaWindhoek = "Africa/Windhoek"
   81|       |	case americaAdak = "America/Adak"
   82|       |	case americaAnchorage = "America/Anchorage"
   83|       |	case americaAnguilla = "America/Anguilla"
   84|       |	case americaAntigua = "America/Antigua"
   85|       |	case americaAraguaina = "America/Araguaina"
   86|       |	case americaArgentinaBuenosAires = "America/Argentina/Buenos_Aires"
   87|       |	case americaArgentinaCatamarca = "America/Argentina/Catamarca"
   88|       |	case americaArgentinaCordoba = "America/Argentina/Cordoba"
   89|       |	case americaArgentinaJujuy = "America/Argentina/Jujuy"
   90|       |	case americaArgentinaLaRioja = "America/Argentina/La_Rioja"
   91|       |	case americaArgentinaMendoza = "America/Argentina/Mendoza"
   92|       |	case americaArgentinaRioGallegos = "America/Argentina/Rio_Gallegos"
   93|       |	case americaArgentinaSalta = "America/Argentina/Salta"
   94|       |	case americaArgentinaSanJuan = "America/Argentina/San_Juan"
   95|       |	case americaArgentinaSanLuis = "America/Argentina/San_Luis"
   96|       |	case americaArgentinaTucuman = "America/Argentina/Tucuman"
   97|       |	case americaArgentinaUshuaia = "America/Argentina/Ushuaia"
   98|       |	case americaAruba = "America/Aruba"
   99|       |	case americaAsuncion = "America/Asuncion"
  100|       |	case americaAtikokan = "America/Atikokan"
  101|       |	case americaBahia = "America/Bahia"
  102|       |	case americaBahiaBanderas = "America/Bahia_Banderas"
  103|       |	case americaBarbados = "America/Barbados"
  104|       |	case americaBelem = "America/Belem"
  105|       |	case americaBelize = "America/Belize"
  106|       |	case americaBlancSablon = "America/Blanc-Sablon"
  107|       |	case americaBoaVista = "America/Boa_Vista"
  108|       |	case americaBogota = "America/Bogota"
  109|       |	case americaBoise = "America/Boise"
  110|       |	case americaCambridgeBay = "America/Cambridge_Bay"
  111|       |	case americaCampoGrande = "America/Campo_Grande"
  112|       |	case americaCancun = "America/Cancun"
  113|       |	case americaCaracas = "America/Caracas"
  114|       |	case americaCayenne = "America/Cayenne"
  115|       |	case americaCayman = "America/Cayman"
  116|       |	case americaChicago = "America/Chicago"
  117|       |	case americaChihuahua = "America/Chihuahua"
  118|       |	case americaCostaRica = "America/Costa_Rica"
  119|       |	case americaCreston = "America/Creston"
  120|       |	case americaCuiaba = "America/Cuiaba"
  121|       |	case americaCuracao = "America/Curacao"
  122|       |	case americaDanmarkshavn = "America/Danmarkshavn"
  123|       |	case americaDawson = "America/Dawson"
  124|       |	case americaDawsonCreek = "America/Dawson_Creek"
  125|       |	case americaDenver = "America/Denver"
  126|       |	case americaDetroit = "America/Detroit"
  127|       |	case americaDominica = "America/Dominica"
  128|       |	case americaEdmonton = "America/Edmonton"
  129|       |	case americaEirunepe = "America/Eirunepe"
  130|       |	case americaElSalvador = "America/El_Salvador"
  131|       |	case americaFortNelson = "America/Fort_Nelson"
  132|       |	case americaFortaleza = "America/Fortaleza"
  133|       |	case americaGlaceBay = "America/Glace_Bay"
  134|       |	case americaGodthab = "America/Godthab"
  135|       |	case americaGooseBay = "America/Goose_Bay"
  136|       |	case americaGrandTurk = "America/Grand_Turk"
  137|       |	case americaGrenada = "America/Grenada"
  138|       |	case americaGuadeloupe = "America/Guadeloupe"
  139|       |	case americaGuatemala = "America/Guatemala"
  140|       |	case americaGuayaquil = "America/Guayaquil"
  141|       |	case americaGuyana = "America/Guyana"
  142|       |	case americaHalifax = "America/Halifax"
  143|       |	case americaHavana = "America/Havana"
  144|       |	case americaHermosillo = "America/Hermosillo"
  145|       |	case americaIndianaIndianapolis = "America/Indiana/Indianapolis"
  146|       |	case americaIndianaKnox = "America/Indiana/Knox"
  147|       |	case americaIndianaMarengo = "America/Indiana/Marengo"
  148|       |	case americaIndianaPetersburg = "America/Indiana/Petersburg"
  149|       |	case americaIndianaTellCity = "America/Indiana/Tell_City"
  150|       |	case americaIndianaVevay = "America/Indiana/Vevay"
  151|       |	case americaIndianaVincennes = "America/Indiana/Vincennes"
  152|       |	case americaIndianaWinamac = "America/Indiana/Winamac"
  153|       |	case americaInuvik = "America/Inuvik"
  154|       |	case americaIqaluit = "America/Iqaluit"
  155|       |	case americaJamaica = "America/Jamaica"
  156|       |	case americaJuneau = "America/Juneau"
  157|       |	case americaKentuckyLouisville = "America/Kentucky/Louisville"
  158|       |	case americaKentuckyMonticello = "America/Kentucky/Monticello"
  159|       |	case americaKralendijk = "America/Kralendijk"
  160|       |	case americaLaPaz = "America/La_Paz"
  161|       |	case americaLima = "America/Lima"
  162|       |	case americaLosAngeles = "America/Los_Angeles"
  163|       |	case americaLowerPrinces = "America/Lower_Princes"
  164|       |	case americaMaceio = "America/Maceio"
  165|       |	case americaManagua = "America/Managua"
  166|       |	case americaManaus = "America/Manaus"
  167|       |	case americaMarigot = "America/Marigot"
  168|       |	case americaMartinique = "America/Martinique"
  169|       |	case americaMatamoros = "America/Matamoros"
  170|       |	case americaMazatlan = "America/Mazatlan"
  171|       |	case americaMenominee = "America/Menominee"
  172|       |	case americaMerida = "America/Merida"
  173|       |	case americaMetlakatla = "America/Metlakatla"
  174|       |	case americaMexicoCity = "America/Mexico_City"
  175|       |	case americaMiquelon = "America/Miquelon"
  176|       |	case americaMoncton = "America/Moncton"
  177|       |	case americaMonterrey = "America/Monterrey"
  178|       |	case americaMontevideo = "America/Montevideo"
  179|       |	case americaMontreal = "America/Montreal"
  180|       |	case americaMontserrat = "America/Montserrat"
  181|       |	case americaNassau = "America/Nassau"
  182|       |	case americaNewYork = "America/New_York"
  183|       |	case americaNipigon = "America/Nipigon"
  184|       |	case americaNome = "America/Nome"
  185|       |	case americaNoronha = "America/Noronha"
  186|       |	case americaNorthDakotaBeulah = "America/North_Dakota/Beulah"
  187|       |	case americaNorthDakotaCenter = "America/North_Dakota/Center"
  188|       |	case americaNorthDakotaNewSalem = "America/North_Dakota/New_Salem"
  189|       |	case americaOjinaga = "America/Ojinaga"
  190|       |	case americaPanama = "America/Panama"
  191|       |	case americaPangnirtung = "America/Pangnirtung"
  192|       |	case americaParamaribo = "America/Paramaribo"
  193|       |	case americaPhoenix = "America/Phoenix"
  194|       |	case americaPortAuPrince = "America/Port-au-Prince"
  195|       |	case americaPortOfSpain = "America/Port_of_Spain"
  196|       |	case americaPortoVelho = "America/Porto_Velho"
  197|       |	case americaPuertoRico = "America/Puerto_Rico"
  198|       |	case americaRainyRiver = "America/Rainy_River"
  199|       |	case americaRankinInlet = "America/Rankin_Inlet"
  200|       |	case americaRecife = "America/Recife"
  201|       |	case americaRegina = "America/Regina"
  202|       |	case americaResolute = "America/Resolute"
  203|       |	case americaRioBranco = "America/Rio_Branco"
  204|       |	case americaSantaIsabel = "America/Santa_Isabel"
  205|       |	case americaSantarem = "America/Santarem"
  206|       |	case americaSantiago = "America/Santiago"
  207|       |	case americaSantoDomingo = "America/Santo_Domingo"
  208|       |	case americaSaoPaulo = "America/Sao_Paulo"
  209|       |	case americaScoresbysund = "America/Scoresbysund"
  210|       |	case americaShiprock = "America/Shiprock"
  211|       |	case americaSitka = "America/Sitka"
  212|       |	case americaStBarthelemy = "America/St_Barthelemy"
  213|       |	case americaStJohns = "America/St_Johns"
  214|       |	case americaStKitts = "America/St_Kitts"
  215|       |	case americaStLucia = "America/St_Lucia"
  216|       |	case americaStThomas = "America/St_Thomas"
  217|       |	case americaStVincent = "America/St_Vincent"
  218|       |	case americaSwiftCurrent = "America/Swift_Current"
  219|       |	case americaTegucigalpa = "America/Tegucigalpa"
  220|       |	case americaThule = "America/Thule"
  221|       |	case americaThunderBay = "America/Thunder_Bay"
  222|       |	case americaTijuana = "America/Tijuana"
  223|       |	case americaToronto = "America/Toronto"
  224|       |	case americaTortola = "America/Tortola"
  225|       |	case americaVancouver = "America/Vancouver"
  226|       |	case americaWhitehorse = "America/Whitehorse"
  227|       |	case americaWinnipeg = "America/Winnipeg"
  228|       |	case americaYakutat = "America/Yakutat"
  229|       |	case americaYellowknife = "America/Yellowknife"
  230|       |	case antarcticaCasey = "Antarctica/Casey"
  231|       |	case antarcticaDavis = "Antarctica/Davis"
  232|       |	case antarcticaDumontdurville = "Antarctica/DumontDUrville"
  233|       |	case antarcticaMacquarie = "Antarctica/Macquarie"
  234|       |	case antarcticaMawson = "Antarctica/Mawson"
  235|       |	case antarcticaMcmurdo = "Antarctica/McMurdo"
  236|       |	case antarcticaPalmer = "Antarctica/Palmer"
  237|       |	case antarcticaRothera = "Antarctica/Rothera"
  238|       |	case antarcticaSouthPole = "Antarctica/South_Pole"
  239|       |	case antarcticaSyowa = "Antarctica/Syowa"
  240|       |	case antarcticaTroll = "Antarctica/Troll"
  241|       |	case antarcticaVostok = "Antarctica/Vostok"
  242|       |	case arcticLongyearbyen = "Arctic/Longyearbyen"
  243|       |	case asiaAden = "Asia/Aden"
  244|       |	case asiaAlmaty = "Asia/Almaty"
  245|       |	case asiaAmman = "Asia/Amman"
  246|       |	case asiaAnadyr = "Asia/Anadyr"
  247|       |	case asiaAqtau = "Asia/Aqtau"
  248|       |	case asiaAqtobe = "Asia/Aqtobe"
  249|       |	case asiaAshgabat = "Asia/Ashgabat"
  250|       |	case asiaBaghdad = "Asia/Baghdad"
  251|       |	case asiaBahrain = "Asia/Bahrain"
  252|       |	case asiaBaku = "Asia/Baku"
  253|       |	case asiaBangkok = "Asia/Bangkok"
  254|       |	case asiaBeirut = "Asia/Beirut"
  255|       |	case asiaBishkek = "Asia/Bishkek"
  256|       |	case asiaBrunei = "Asia/Brunei"
  257|       |	case asiaChita = "Asia/Chita"
  258|       |	case asiaChoibalsan = "Asia/Choibalsan"
  259|       |	case asiaChongqing = "Asia/Chongqing"
  260|       |	case asiaColombo = "Asia/Colombo"
  261|       |	case asiaDamascus = "Asia/Damascus"
  262|       |	case asiaDhaka = "Asia/Dhaka"
  263|       |	case asiaDili = "Asia/Dili"
  264|       |	case asiaDubai = "Asia/Dubai"
  265|       |	case asiaDushanbe = "Asia/Dushanbe"
  266|       |	case asiaGaza = "Asia/Gaza"
  267|       |	case asiaHarbin = "Asia/Harbin"
  268|       |	case asiaHebron = "Asia/Hebron"
  269|       |	case asiaHoChiMinh = "Asia/Ho_Chi_Minh"
  270|       |	case asiaSaigon = "Asia/Saigon"
  271|       |	case asiaHongKong = "Asia/Hong_Kong"
  272|       |	case asiaHovd = "Asia/Hovd"
  273|       |	case asiaIrkutsk = "Asia/Irkutsk"
  274|       |	case asiaJakarta = "Asia/Jakarta"
  275|       |	case asiaJayapura = "Asia/Jayapura"
  276|       |	case asiaJerusalem = "Asia/Jerusalem"
  277|       |	case asiaKabul = "Asia/Kabul"
  278|       |	case asiaKamchatka = "Asia/Kamchatka"
  279|       |	case asiaKarachi = "Asia/Karachi"
  280|       |	case asiaKashgar = "Asia/Kashgar"
  281|       |	case asiaKathmandu = "Asia/Kathmandu"
  282|       |	case asiaKatmandu = "Asia/Katmandu"
  283|       |	case asiaKhandyga = "Asia/Khandyga"
  284|       |	case asiaKolkata = "Asia/Kolkata"
  285|       |	case asiaKrasnoyarsk = "Asia/Krasnoyarsk"
  286|       |	case asiaKualaLumpur = "Asia/Kuala_Lumpur"
  287|       |	case asiaKuching = "Asia/Kuching"
  288|       |	case asiaKuwait = "Asia/Kuwait"
  289|       |	case asiaMacau = "Asia/Macau"
  290|       |	case asiaMagadan = "Asia/Magadan"
  291|       |	case asiaMakassar = "Asia/Makassar"
  292|       |	case asiaManila = "Asia/Manila"
  293|       |	case asiaMuscat = "Asia/Muscat"
  294|       |	case asiaNicosia = "Asia/Nicosia"
  295|       |	case asiaNovokuznetsk = "Asia/Novokuznetsk"
  296|       |	case asiaNovosibirsk = "Asia/Novosibirsk"
  297|       |	case asiaOmsk = "Asia/Omsk"
  298|       |	case asiaOral = "Asia/Oral"
  299|       |	case asiaPhnomPenh = "Asia/Phnom_Penh"
  300|       |	case asiaPontianak = "Asia/Pontianak"
  301|       |	case asiaPyongyang = "Asia/Pyongyang"
  302|       |	case asiaQatar = "Asia/Qatar"
  303|       |	case asiaQyzylorda = "Asia/Qyzylorda"
  304|       |	case asiaRangoon = "Asia/Rangoon"
  305|       |	case asiaRiyadh = "Asia/Riyadh"
  306|       |	case asiaSakhalin = "Asia/Sakhalin"
  307|       |	case asiaSamarkand = "Asia/Samarkand"
  308|       |	case asiaSeoul = "Asia/Seoul"
  309|       |	case asiaShanghai = "Asia/Shanghai"
  310|       |	case asiaSingapore = "Asia/Singapore"
  311|       |	case asiaSrednekolymsk = "Asia/Srednekolymsk"
  312|       |	case asiaTaipei = "Asia/Taipei"
  313|       |	case asiaTashkent = "Asia/Tashkent"
  314|       |	case asiaTbilisi = "Asia/Tbilisi"
  315|       |	case asiaTehran = "Asia/Tehran"
  316|       |	case asiaThimphu = "Asia/Thimphu"
  317|       |	case asiaTokyo = "Asia/Tokyo"
  318|       |	case asiaUlaanbaatar = "Asia/Ulaanbaatar"
  319|       |	case asiaUrumqi = "Asia/Urumqi"
  320|       |	case asiaUstNera = "Asia/Ust-Nera"
  321|       |	case asiaVientiane = "Asia/Vientiane"
  322|       |	case asiaVladivostok = "Asia/Vladivostok"
  323|       |	case asiaYakutsk = "Asia/Yakutsk"
  324|       |	case asiaYekaterinburg = "Asia/Yekaterinburg"
  325|       |	case asiaYerevan = "Asia/Yerevan"
  326|       |	case atlanticAzores = "Atlantic/Azores"
  327|       |	case atlanticBermuda = "Atlantic/Bermuda"
  328|       |	case atlanticCanary = "Atlantic/Canary"
  329|       |	case atlanticCapeVerde = "Atlantic/Cape_Verde"
  330|       |	case atlanticFaroe = "Atlantic/Faroe"
  331|       |	case atlanticMadeira = "Atlantic/Madeira"
  332|       |	case atlanticReykjavik = "Atlantic/Reykjavik"
  333|       |	case atlanticSouthGeorgia = "Atlantic/South_Georgia"
  334|       |	case atlanticStHelena = "Atlantic/St_Helena"
  335|       |	case atlanticStanley = "Atlantic/Stanley"
  336|       |	case australiaAdelaide = "Australia/Adelaide"
  337|       |	case australiaBrisbane = "Australia/Brisbane"
  338|       |	case australiaBrokenHill = "Australia/Broken_Hill"
  339|       |	case australiaCurrie = "Australia/Currie"
  340|       |	case australiaDarwin = "Australia/Darwin"
  341|       |	case australiaEucla = "Australia/Eucla"
  342|       |	case australiaHobart = "Australia/Hobart"
  343|       |	case australiaLindeman = "Australia/Lindeman"
  344|       |	case australiaLordHowe = "Australia/Lord_Howe"
  345|       |	case australiaMelbourne = "Australia/Melbourne"
  346|       |	case australiaPerth = "Australia/Perth"
  347|       |	case australiaSydney = "Australia/Sydney"
  348|       |	case europeAmsterdam = "Europe/Amsterdam"
  349|       |	case europeAndorra = "Europe/Andorra"
  350|       |	case europeAthens = "Europe/Athens"
  351|       |	case europeBelgrade = "Europe/Belgrade"
  352|       |	case europeBerlin = "Europe/Berlin"
  353|       |	case europeBratislava = "Europe/Bratislava"
  354|       |	case europeBrussels = "Europe/Brussels"
  355|       |	case europeBucharest = "Europe/Bucharest"
  356|       |	case europeBudapest = "Europe/Budapest"
  357|       |	case europeBusingen = "Europe/Busingen"
  358|       |	case europeChisinau = "Europe/Chisinau"
  359|       |	case europeCopenhagen = "Europe/Copenhagen"
  360|       |	case europeDublin = "Europe/Dublin"
  361|       |	case europeGibraltar = "Europe/Gibraltar"
  362|       |	case europeGuernsey = "Europe/Guernsey"
  363|       |	case europeHelsinki = "Europe/Helsinki"
  364|       |	case europeIsleOfMan = "Europe/Isle_of_Man"
  365|       |	case europeIstanbul = "Europe/Istanbul"
  366|       |	case europeJersey = "Europe/Jersey"
  367|       |	case europeKaliningrad = "Europe/Kaliningrad"
  368|       |	case europeKiev = "Europe/Kiev"
  369|       |	case europeLisbon = "Europe/Lisbon"
  370|       |	case europeLjubljana = "Europe/Ljubljana"
  371|       |	case europeLondon = "Europe/London"
  372|       |	case europeLuxembourg = "Europe/Luxembourg"
  373|       |	case europeMadrid = "Europe/Madrid"
  374|       |	case europeMalta = "Europe/Malta"
  375|       |	case europeMariehamn = "Europe/Mariehamn"
  376|       |	case europeMinsk = "Europe/Minsk"
  377|       |	case europeMonaco = "Europe/Monaco"
  378|       |	case europeMoscow = "Europe/Moscow"
  379|       |	case europeOslo = "Europe/Oslo"
  380|       |	case europeParis = "Europe/Paris"
  381|       |	case europePodgorica = "Europe/Podgorica"
  382|       |	case europePrague = "Europe/Prague"
  383|       |	case europeRiga = "Europe/Riga"
  384|       |	case europeRome = "Europe/Rome"
  385|       |	case europeSamara = "Europe/Samara"
  386|       |	case europeSanMarino = "Europe/San_Marino"
  387|       |	case europeSarajevo = "Europe/Sarajevo"
  388|       |	case europeSimferopol = "Europe/Simferopol"
  389|       |	case europeSkopje = "Europe/Skopje"
  390|       |	case europeSofia = "Europe/Sofia"
  391|       |	case europeStockholm = "Europe/Stockholm"
  392|       |	case europeTallinn = "Europe/Tallinn"
  393|       |	case europeTirane = "Europe/Tirane"
  394|       |	case europeUzhgorod = "Europe/Uzhgorod"
  395|       |	case europeVaduz = "Europe/Vaduz"
  396|       |	case europeVatican = "Europe/Vatican"
  397|       |	case europeVienna = "Europe/Vienna"
  398|       |	case europeVilnius = "Europe/Vilnius"
  399|       |	case europeVolgograd = "Europe/Volgograd"
  400|       |	case europeWarsaw = "Europe/Warsaw"
  401|       |	case europeZagreb = "Europe/Zagreb"
  402|       |	case europeZaporozhye = "Europe/Zaporozhye"
  403|       |	case europeZurich = "Europe/Zurich"
  404|       |	case gmt = "GMT"
  405|       |	case indianAntananarivo = "Indian/Antananarivo"
  406|       |	case indianChagos = "Indian/Chagos"
  407|       |	case indianChristmas = "Indian/Christmas"
  408|       |	case indianCocos = "Indian/Cocos"
  409|       |	case indianComoro = "Indian/Comoro"
  410|       |	case indianKerguelen = "Indian/Kerguelen"
  411|       |	case indianMahe = "Indian/Mahe"
  412|       |	case indianMaldives = "Indian/Maldives"
  413|       |	case indianMauritius = "Indian/Mauritius"
  414|       |	case indianMayotte = "Indian/Mayotte"
  415|       |	case indianReunion = "Indian/Reunion"
  416|       |	case pacificApia = "Pacific/Apia"
  417|       |	case pacificAuckland = "Pacific/Auckland"
  418|       |	case pacificBougainville = "Pacific/Bougainville"
  419|       |	case pacificChatham = "Pacific/Chatham"
  420|       |	case pacificChuuk = "Pacific/Chuuk"
  421|       |	case pacificEaster = "Pacific/Easter"
  422|       |	case pacificEfate = "Pacific/Efate"
  423|       |	case pacificEnderbury = "Pacific/Enderbury"
  424|       |	case pacificFakaofo = "Pacific/Fakaofo"
  425|       |	case pacificFiji = "Pacific/Fiji"
  426|       |	case pacificFunafuti = "Pacific/Funafuti"
  427|       |	case pacificGalapagos = "Pacific/Galapagos"
  428|       |	case pacificGambier = "Pacific/Gambier"
  429|       |	case pacificGuadalcanal = "Pacific/Guadalcanal"
  430|       |	case pacificGuam = "Pacific/Guam"
  431|       |	case pacificHonolulu = "Pacific/Honolulu"
  432|       |	case pacificJohnston = "Pacific/Johnston"
  433|       |	case pacificKiritimati = "Pacific/Kiritimati"
  434|       |	case pacificKosrae = "Pacific/Kosrae"
  435|       |	case pacificKwajalein = "Pacific/Kwajalein"
  436|       |	case pacificMajuro = "Pacific/Majuro"
  437|       |	case pacificMarquesas = "Pacific/Marquesas"
  438|       |	case pacificMidway = "Pacific/Midway"
  439|       |	case pacificNauru = "Pacific/Nauru"
  440|       |	case pacificNiue = "Pacific/Niue"
  441|       |	case pacificNorfolk = "Pacific/Norfolk"
  442|       |	case pacificNoumea = "Pacific/Noumea"
  443|       |	case pacificPagoPago = "Pacific/Pago_Pago"
  444|       |	case pacificPalau = "Pacific/Palau"
  445|       |	case pacificPitcairn = "Pacific/Pitcairn"
  446|       |	case pacificPohnpei = "Pacific/Pohnpei"
  447|       |	case pacificPonape = "Pacific/Ponape"
  448|       |	case pacificPortMoresby = "Pacific/Port_Moresby"
  449|       |	case pacificRarotonga = "Pacific/Rarotonga"
  450|       |	case pacificSaipan = "Pacific/Saipan"
  451|       |	case pacificTahiti = "Pacific/Tahiti"
  452|       |	case pacificTarawa = "Pacific/Tarawa"
  453|       |	case pacificTongatapu = "Pacific/Tongatapu"
  454|       |	case pacificTruk = "Pacific/Truk"
  455|       |	case pacificWake = "Pacific/Wake"
  456|       |	case pacificWallis = "Pacific/Wallis"
  457|       |
  458|      0|	public func toTimezone() -> TimeZone {
  459|      0|		switch self {
  460|      0|		case .current:			return TimeZone.current
  461|      0|		case .autoUpdating:		return TimeZone.autoupdatingCurrent
  462|      0|		default:				return TimeZone(identifier: rawValue)!
  463|      0|		}
  464|      0|	}
  465|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/SwiftDate.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public struct SwiftDate {
   16|       |
   17|      0|	private init() { }
   18|       |
   19|       |	/// The default region is used to manipulate and work with plain `Date` object and
   20|       |	/// wherever a region parameter is optional. By default region is the to GMT timezone
   21|       |	/// along with the default device's locale and calendar (both autoupdating).
   22|       |	public static var defaultRegion = Region.UTC
   23|       |
   24|       |	/// This is the ordered list of all formats SwiftDate can use in order to attempt parsing a passaed
   25|       |	/// date expressed as string. Evaluation is made in order; you can add or remove new formats as you wish.
   26|       |	/// In order to reset the list call `resetAutoFormats()` function.
   27|       |	public static var autoFormats: [String] {
   28|      0|		set { DateFormats.autoFormats = newValue }
   29|      0|		get { return DateFormats.autoFormats }
   30|       |	}
   31|       |
   32|       |	/// Reset the list of all built-in auto formats patterns.
   33|      0|	public static func resetAutoFormats() {
   34|      0|		DateFormats.resetAutoFormats()
   35|      0|	}
   36|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/TimePeriod/Groups/TimePeriodChain.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |/// Time period chains serve as a tightly coupled set of time periods.
   16|       |/// They are always organized by start and end date, and have their own characteristics like
   17|       |/// a StartDate and EndDate that are extrapolated from the time periods within.
   18|       |/// Time period chains do not allow overlaps within their set of time periods.
   19|       |/// This type of group is ideal for modeling schedules like sequential meetings or appointments.
   20|       |open class TimePeriodChain: TimePeriodGroup {
   21|       |
   22|       |	// MARK: - Chain Existence Manipulation
   23|       |
   24|       |	/**
   25|       |	*  Append a TimePeriodProtocol to the periods array and update the Chain's
   26|       |	*  beginning and end.
   27|       |	*
   28|       |	* - parameter period: TimePeriodProtocol to add to the collection
   29|       |	*/
   30|      0|	public func append(_ period: TimePeriodProtocol) {
   31|      0|		let beginning = (periods.count > 0) ? periods.last!.end! : period.start
   32|      0|
   33|      0|		let newPeriod = TimePeriod(start: beginning!, duration: period.duration)
   34|      0|		periods.append(newPeriod)
   35|      0|
   36|      0|		//Update updateExtremes
   37|      0|		if periods.count == 1 {
   38|      0|			start = period.start
   39|      0|			end = period.end
   40|      0|		} else {
   41|      0|			end = end?.addingTimeInterval(period.duration)
   42|      0|		}
   43|      0|	}
   44|       |
   45|       |	/**
   46|       |	*  Append a TimePeriodProtocol array to the periods array and update the Chain's
   47|       |	*  beginning and end.
   48|       |	*
   49|       |	* - parameter periodArray: TimePeriodProtocol list to add to the collection
   50|       |	*/
   51|      0|	public func append<G: TimePeriodGroup>(contentsOf group: G) {
   52|      0|		for period in group.periods {
   53|      0|			let beginning = (periods.count > 0) ? periods.last!.end! : period.start
   54|      0|
   55|      0|			let newPeriod = TimePeriod(start: beginning!, duration: period.duration)
   56|      0|			periods.append(newPeriod)
   57|      0|
   58|      0|			//Update updateExtremes
   59|      0|			if periods.count == 1 {
   60|      0|				start = period.start
   61|      0|				end = period.end
   62|      0|			} else {
   63|      0|				end = end?.addingTimeInterval(period.duration)
   64|      0|			}
   65|      0|		}
   66|      0|	}
   67|       |
   68|       |	/// Insert period into periods array at given index.
   69|       |	///
   70|       |	/// - Parameters:
   71|       |	///   - period: The period to insert
   72|       |	///   - index: Index to insert period at
   73|      0|	public func insert(_ period: TimePeriodProtocol, at index: Int) {
   74|      0|		//Check for special zero case which takes the beginning date
   75|      0|		if index == 0 && period.start != nil && period.end != nil {
   76|      0|			//Insert new period
   77|      0|			periods.insert(period, at: index)
   78|      0|		} else if period.start != nil && period.end != nil {
   79|      0|			//Insert new period
   80|      0|			periods.insert(period, at: index)
   81|      0|		} else {
   82|      0|			print("All TimePeriods in a TimePeriodChain must contain a defined start and end date")
   83|      0|			return
   84|      0|		}
   85|      0|
   86|      0|		//Shift all periods after inserted period
   87|      0|		for i in 0..<periods.count {
   88|      0|			if i > index && i > 0 {
   89|      0|				let currentPeriod = TimePeriod(start: period.start, end: period.end)
   90|      0|				periods[i].start = periods[i - 1].end
   91|      0|				periods[i].end = periods[i].start!.addingTimeInterval(currentPeriod.duration)
   92|      0|			}
   93|      0|		}
   94|      0|
   95|      0|		updateExtremes()
   96|      0|	}
   97|       |
   98|       |	/// Remove from period array at the given index.
   99|       |	///
  100|       |	/// - Parameter index: The index in the collection to remove
  101|      0|	public func remove(at index: Int) {
  102|      0|		//Retrieve duration of period to be removed
  103|      0|		let duration = periods[index].duration
  104|      0|
  105|      0|		//Remove period
  106|      0|		periods.remove(at: index)
  107|      0|
  108|      0|		//Shift all periods after inserted period
  109|      0|		for i in index..<periods.count {
  110|      0|			periods[i].shift(by: -duration)
  111|      0|		}
  112|      0|		updateExtremes()
  113|      0|	}
  114|       |
  115|       |	/// Remove all periods from period array.
  116|      0|	public func removeAll() {
  117|      0|		periods.removeAll()
  118|      0|		updateExtremes()
  119|      0|	}
  120|       |
  121|       |	// MARK: - Chain Content Manipulation
  122|       |
  123|       |	/// In place, shifts all chain time periods by a given time interval
  124|       |	///
  125|       |	/// - Parameter duration: The time interval to shift the period by
  126|      0|	public func shift(by duration: TimeInterval) {
  127|      0|		for var period in periods {
  128|      0|			period.shift(by: duration)
  129|      0|		}
  130|      0|		start = start?.addingTimeInterval(duration)
  131|      0|		end = end?.addingTimeInterval(duration)
  132|      0|	}
  133|       |
  134|      0|	public override func map<T>(_ transform: (TimePeriodProtocol) throws -> T) rethrows -> [T] {
  135|      0|		return try periods.map(transform)
  136|      0|	}
  137|       |
  138|      0|	public override func filter(_ isIncluded: (TimePeriodProtocol) throws -> Bool) rethrows -> [TimePeriodProtocol] {
  139|      0|		return try periods.filter(isIncluded)
  140|      0|	}
  141|       |
  142|      0|	internal override func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (Result, TimePeriodProtocol) throws -> Result) rethrows -> Result {
  143|      0|		return try periods.reduce(initialResult, nextPartialResult)
  144|      0|	}
  145|       |
  146|       |	/// Removes the last object from the `TimePeriodChain` and returns it
  147|      0|	public func pop() -> TimePeriodProtocol? {
  148|      0|		let period = periods.popLast()
  149|      0|		updateExtremes()
  150|      0|
  151|      0|		return period
  152|      0|	}
  153|       |
  154|      0|	internal func updateExtremes() {
  155|      0|		start = periods.first?.start
  156|      0|		end = periods.last?.end
  157|      0|	}
  158|       |
  159|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/TimePeriod/Groups/TimePeriodCollection.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |/// Sort type
   16|       |///
   17|       |/// - ascending: sort in ascending order
   18|       |/// - descending: sort in descending order
   19|       |public enum SortMode {
   20|       |	case ascending
   21|       |	case descending
   22|       |}
   23|       |
   24|       |/// Sorting type
   25|       |///
   26|       |/// - start: sort by start date
   27|       |/// - end: sort by end date
   28|       |/// - duration: sort by duration
   29|       |/// - custom: sort using custom function
   30|       |public enum SortType {
   31|       |	case start(_: SortMode)
   32|       |	case end(_: SortMode)
   33|       |	case duration(_: SortMode)
   34|       |	case custom(_: ((TimePeriodProtocol, TimePeriodProtocol) -> Bool))
   35|       |}
   36|       |
   37|       |/// Time period collections serve as loose sets of time periods.
   38|       |/// They are unorganized unless you decide to sort them, and have their own characteristics
   39|       |/// like a `start` and `end` that are extrapolated from the time periods within.
   40|       |/// Time period collections allow overlaps within their set of time periods.
   41|       |open class TimePeriodCollection: TimePeriodGroup {
   42|       |
   43|       |	// MARK: - Collection Manipulation
   44|       |
   45|       |	/// Append a TimePeriodProtocol to the periods array and check if the Collection's start and end should change.
   46|       |	///
   47|       |	/// - Parameter period: TimePeriodProtocol to add to the collection
   48|      0|	public func append(_ period: TimePeriodProtocol) {
   49|      0|		periods.append(period)
   50|      0|		updateExtremes(period: period)
   51|      0|	}
   52|       |
   53|       |	/// Append a TimePeriodProtocol array to the periods array and check if the Collection's
   54|       |	/// start and end should change.
   55|       |	///
   56|       |	/// - Parameter periodArray: TimePeriodProtocol list to add to the collection
   57|      0|	public func append(_ periodArray: [TimePeriodProtocol]) {
   58|      0|		for period in periodArray {
   59|      0|			periods.append(period)
   60|      0|			updateExtremes(period: period)
   61|      0|		}
   62|      0|	}
   63|       |
   64|       |	/// Append a TimePeriodGroup's periods array to the periods array of self and check if the Collection's
   65|       |	/// start and end should change.
   66|       |	///
   67|       |	/// - Parameter newPeriods: TimePeriodGroup to merge periods arrays with
   68|      0|	public func append<C: TimePeriodGroup>(contentsOf newPeriods: C) {
   69|      0|		for period in newPeriods as TimePeriodGroup {
   70|      0|			periods.append(period)
   71|      0|			updateExtremes(period: period)
   72|      0|		}
   73|      0|	}
   74|       |
   75|       |	/// Insert period into periods array at given index.
   76|       |	///
   77|       |	/// - Parameters:
   78|       |	///   - newElement: The period to insert
   79|       |	///   - index: Index to insert period at
   80|      0|	public func insert(_ newElement: TimePeriodProtocol, at index: Int) {
   81|      0|		periods.insert(newElement, at: index)
   82|      0|		updateExtremes(period: newElement)
   83|      0|	}
   84|       |
   85|       |	/// Remove from period array at the given index.
   86|       |	///
   87|       |	/// - Parameter at: The index in the collection to remove
   88|      0|	public func remove(at: Int) {
   89|      0|		periods.remove(at: at)
   90|      0|		updateExtremes()
   91|      0|	}
   92|       |
   93|       |	/// Remove all periods from period array.
   94|      0|	public func removeAll() {
   95|      0|		periods.removeAll()
   96|      0|		updateExtremes()
   97|      0|	}
   98|       |
   99|       |	// MARK: - Sorting
  100|       |
  101|       |	/// Sort elements in place using given method.
  102|       |	///
  103|       |	/// - Parameter type: sorting method
  104|      0|	public func sort(by type: SortType) {
  105|      0|		switch type {
  106|      0|		case .duration(let mode):	periods.sort(by: sortFuncDuration(mode))
  107|      0|		case .start(let mode):		periods.sort(by: sortFunc(byStart: true, type: mode))
  108|      0|		case .end(let mode):		periods.sort(by: sortFunc(byStart: false, type: mode))
  109|      0|		case .custom(let f):		periods.sort(by: f)
  110|      0|		}
  111|      0|	}
  112|       |
  113|       |	/// Generate a new `TimePeriodCollection` where items are sorted with specified method.
  114|       |	///
  115|       |	/// - Parameters:
  116|       |	///   - type: sorting method
  117|       |	/// - Returns: collection ordered by given function
  118|      0|	public func sorted(by type: SortType) -> TimePeriodCollection {
  119|      0|		var sortedList: [TimePeriodProtocol]!
  120|      0|		switch type {
  121|      0|		case .duration(let mode):	sortedList = periods.sorted(by: sortFuncDuration(mode))
  122|      0|		case .start(let mode):		sortedList = periods.sorted(by: sortFunc(byStart: true, type: mode))
  123|      0|		case .end(let mode):		sortedList = periods.sorted(by: sortFunc(byStart: false, type: mode))
  124|      0|		case .custom(let f):		sortedList = periods.sorted(by: f)
  125|      0|		}
  126|      0|		return TimePeriodCollection(sortedList)
  127|      0|	}
  128|       |
  129|       |	// MARK: - Collection Relationship
  130|       |
  131|       |	/// Returns from the `TimePeriodCollection` a sub-collection of `TimePeriod`s
  132|       |	/// whose start and end dates fall completely inside the interval of the given `TimePeriod`.
  133|       |	///
  134|       |	/// - Parameter period: The period to compare each other period against
  135|       |	/// - Returns: Collection of periods inside the given period
  136|      0|	public func periodsInside(period: TimePeriodProtocol) -> TimePeriodCollection {
  137|      0|		return TimePeriodCollection(periods.filter({ $0.isInside(period) }))
  138|      0|	}
  139|       |
  140|       |	//  Returns from the `TimePeriodCollection` a sub-collection of `TimePeriod`s containing the given date.
  141|       |	///
  142|       |	/// - Parameter date: The date to compare each period to
  143|       |	/// - Returns: Collection of periods intersected by the given date
  144|      0|	public func periodsIntersected(by date: DateInRegion) -> TimePeriodCollection {
  145|      0|		return TimePeriodCollection(periods.filter({ $0.contains(date: date, interval: .closed) }))
  146|      0|	}
  147|       |
  148|       |	/// Returns from the `TimePeriodCollection` a sub-collection of `TimePeriod`s
  149|       |	/// containing either the start date or the end date--or both--of the given `TimePeriod`.
  150|       |	///
  151|       |	/// - Parameter period: The period to compare each other period to
  152|       |	/// - Returns: Collection of periods intersected by the given period
  153|      0|	public func periodsIntersected(by period: TimePeriodProtocol) -> TimePeriodCollection {
  154|      0|		return TimePeriodCollection(periods.filter({ $0.intersects(with: period) }))
  155|      0|	}
  156|       |
  157|       |	/// Returns an instance of DTTimePeriodCollection with all the time periods in the receiver that overlap a given time period.
  158|       |	/// Overlap with the given time period does NOT include other time periods that simply touch it.
  159|       |	/// (i.e. one's start date is equal to another's end date)
  160|       |	///
  161|       |	/// - Parameter period: The time period to check against the receiver's time periods.
  162|       |	/// - Returns: Collection of periods overlapped by the given period
  163|      0|	public func periodsOverlappedBy(_ period: TimePeriodProtocol) -> TimePeriodCollection {
  164|      0|		return TimePeriodCollection(periods.filter({ $0.overlaps(with: period) }))
  165|      0|	}
  166|       |
  167|       |	// MARK: - Map
  168|       |
  169|      0|	public func map(_ transform: (TimePeriodProtocol) throws -> TimePeriodProtocol) rethrows -> TimePeriodCollection {
  170|      0|		var mappedArray = [TimePeriodProtocol]()
  171|      0|		mappedArray = try periods.map(transform)
  172|      0|		let mappedCollection = TimePeriodCollection()
  173|      0|		for period in mappedArray {
  174|      0|			mappedCollection.periods.append(period)
  175|      0|			mappedCollection.updateExtremes(period: period)
  176|      0|		}
  177|      0|		return mappedCollection
  178|      0|	}
  179|       |
  180|       |	// MARK: - Helpers
  181|       |
  182|      0|	private func sortFuncDuration(_ type: SortMode) -> ((TimePeriodProtocol, TimePeriodProtocol) -> Bool) {
  183|      0|		switch type {
  184|      0|		case .ascending: 	return { $0.duration < $1.duration }
  185|      0|		case .descending: 	return { $0.duration > $1.duration }
  186|      0|		}
  187|      0|	}
  188|       |
  189|      0|	private func sortFunc(byStart start: Bool = true, type: SortMode) -> ((TimePeriodProtocol, TimePeriodProtocol) -> Bool) {
  190|      0|		return {
  191|      0|			let date0 = (start ? $0.start : $0.end)
  192|      0|			let date1 = (start ? $1.start : $1.end)
  193|      0|			if date0 == nil && date1 == nil {
  194|      0|				return false
  195|      0|			} else if date0 == nil {
  196|      0|				return true
  197|      0|			} else if date1 == nil {
  198|      0|				return false
  199|      0|			} else {
  200|      0|				return (type == .ascending ? date1! > date0! : date0! > date1!)
  201|      0|			}
  202|      0|		}
  203|      0|	}
  204|       |
  205|      0|	private func updateExtremes(period: TimePeriodProtocol) {
  206|      0|		//Check incoming period against previous start and end date
  207|      0|		guard count != 1 else {
  208|      0|			start = period.start
  209|      0|			end = period.end
  210|      0|			return
  211|      0|		}
  212|      0|		start = nilOrEarlier(date1: start, date2: period.start)
  213|      0|		end = nilOrLater(date1: end, date2: period.end)
  214|      0|	}
  215|       |
  216|      0|	private func updateExtremes() {
  217|      0|		guard periods.count > 0 else {
  218|      0|			start = nil
  219|      0|			end = nil
  220|      0|			return
  221|      0|		}
  222|      0|
  223|      0|		start = periods.first!.start
  224|      0|		end = periods.first!.end
  225|      0|		for i in 1..<periods.count {
  226|      0|			start = nilOrEarlier(date1: start, date2: periods[i].start)
  227|      0|			end = nilOrEarlier(date1: end, date2: periods[i].end)
  228|      0|		}
  229|      0|	}
  230|       |
  231|      0|	private func nilOrEarlier(date1: DateInRegion?, date2: DateInRegion?) -> DateInRegion? {
  232|      0|		guard date1 != nil && date2 != nil else { return nil }
  233|      0|		return date1!.earlierDate(date2!)
  234|      0|	}
  235|       |
  236|      0|	private func nilOrLater(date1: DateInRegion?, date2: DateInRegion?) -> DateInRegion? {
  237|      0|		guard date1 != nil && date2 != nil else { return nil }
  238|      0|		return date1!.laterDate(date2!)
  239|      0|	}
  240|       |
  241|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/TimePeriod/Groups/TimePeriodGroup.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |/// Time period groups are the final abstraction of date and time in DateTools.
   16|       |/// Here, time periods are gathered and organized into something useful.
   17|       |/// There are two main types of time period groups, `TimePeriodCollection` and `TimePeriodChain`.
   18|       |open class TimePeriodGroup: Sequence, Equatable {
   19|       |
   20|       |	/// Array of periods that define the group.
   21|      0|	internal var periods: [TimePeriodProtocol] = []
   22|       |
   23|       |	/// The earliest beginning date of a `TimePeriod` in the group.
   24|       |	/// `nil` if any `TimePeriod` in group has a nil beginning date (indefinite).
   25|       |	public internal(set) var start: DateInRegion?
   26|       |
   27|       |	/// The latest end date of a `TimePeriod` in the group.
   28|       |	/// `nil` if any `TimePeriod` in group has a nil end date (indefinite).
   29|       |	public internal(set) var end: DateInRegion?
   30|       |
   31|       |	/// The total amount of time between the earliest and latest dates stored in the periods array.
   32|       |	/// `nil` if any beginning or end date in any contained period is `nil`.
   33|      0|	public var duration: TimeInterval? {
   34|      0|		guard let start = start, let end = end else { return nil }
   35|      0|		return end.timeIntervalSince(start)
   36|      0|	}
   37|       |
   38|       |	/// The number of periods in the periods array.
   39|      0|	public var count: Int {
   40|      0|		return periods.count
   41|      0|	}
   42|       |
   43|       |	// MARK: - Equatable
   44|       |
   45|      0|	public static func == (lhs: TimePeriodGroup, rhs: TimePeriodGroup) -> Bool {
   46|      0|		return TimePeriodGroup.hasSameElements(array1: lhs.periods, rhs.periods)
   47|      0|	}
   48|       |
   49|       |	// MARK: - Initializers
   50|       |
   51|      0|	public init(_ periods: [TimePeriodProtocol]? = nil) {
   52|      0|		self.periods = (periods ?? [])
   53|      0|	}
   54|       |
   55|       |	// MARK: - Sequence Protocol
   56|       |
   57|      0|	public func makeIterator() -> IndexingIterator<[TimePeriodProtocol]> {
   58|      0|		return periods.makeIterator()
   59|      0|	}
   60|       |
   61|      0|	public func map<T>(_ transform: (TimePeriodProtocol) throws -> T) rethrows -> [T] {
   62|      0|		return try periods.map(transform)
   63|      0|	}
   64|       |
   65|      0|	public func filter(_ isIncluded: (TimePeriodProtocol) throws -> Bool) rethrows -> [TimePeriodProtocol] {
   66|      0|		return try periods.filter(isIncluded)
   67|      0|	}
   68|       |
   69|      0|	public func forEach(_ body: (TimePeriodProtocol) throws -> Void) rethrows {
   70|      0|		return try periods.forEach(body)
   71|      0|	}
   72|       |
   73|      0|	public func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator isSeparator: (TimePeriodProtocol) throws -> Bool) rethrows -> [AnySequence<TimePeriodProtocol>] {
   74|      0|		return try periods.split(maxSplits: maxSplits, omittingEmptySubsequences: omittingEmptySubsequences, whereSeparator: isSeparator).map(AnySequence.init)
   75|      0|	}
   76|       |
   77|       |	public subscript(index: Int) -> TimePeriodProtocol {
   78|      0|		get {
   79|      0|			return periods[index]
   80|      0|		}
   81|       |	}
   82|       |
   83|      0|	internal func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (Result, TimePeriodProtocol) throws -> Result) rethrows -> Result {
   84|      0|		return try periods.reduce(initialResult, nextPartialResult)
   85|      0|	}
   86|       |
   87|       |	// MARK: - Internal Helper Functions
   88|       |
   89|      0|	internal static func hasSameElements(array1: [TimePeriodProtocol], _ array2: [TimePeriodProtocol]) -> Bool {
   90|      0|		guard array1.count == array2.count else {
   91|      0|			return false // No need to sorting if they already have different counts
   92|      0|		}
   93|      0|
   94|      0|		let compArray1: [TimePeriodProtocol] = array1.sorted { (period1: TimePeriodProtocol, period2: TimePeriodProtocol) -> Bool in
   95|      0|			if period1.start == nil && period2.start == nil {
   96|      0|				return false
   97|      0|			} else if period1.start == nil {
   98|      0|				return true
   99|      0|			} else if period2.start == nil {
  100|      0|				return false
  101|      0|			} else {
  102|      0|				return period2.start! < period1.start!
  103|      0|			}
  104|      0|		}
  105|      0|		let compArray2: [TimePeriodProtocol] = array2.sorted { (period1: TimePeriodProtocol, period2: TimePeriodProtocol) -> Bool in
  106|      0|			if period1.start == nil && period2.start == nil {
  107|      0|				return false
  108|      0|			} else if period1.start == nil {
  109|      0|				return true
  110|      0|			} else if period2.start == nil {
  111|      0|				return false
  112|      0|			} else {
  113|      0|				return period2.start! < period1.start!
  114|      0|			}
  115|      0|		}
  116|      0|		for x in 0..<compArray1.count {
  117|      0|			if !compArray1[x].equals(compArray2[x]) {
  118|      0|				return false
  119|      0|			}
  120|      0|		}
  121|      0|		return true
  122|      0|	}
  123|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/TimePeriod/TimePeriod.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |/// Time periods are represented by the TimePeriodProtocol protocol.
   16|       |/// Required variables and method impleementations are bound below.
   17|       |/// An inheritable implementation of the TimePeriodProtocol is available through the TimePeriod class.
   18|       |open class TimePeriod: TimePeriodProtocol {
   19|       |
   20|       |	/// The start date for a TimePeriod representing the starting boundary of the time period
   21|       |	public var start: DateInRegion?
   22|       |
   23|       |	/// The end date for a TimePeriod representing the ending boundary of the time period
   24|       |	public var end: DateInRegion?
   25|       |
   26|       |	// MARK: - Initializers
   27|       |
   28|      0|	public init() { }
   29|       |
   30|       |	/// Create a new time period with given date range.
   31|       |	///
   32|       |	/// - Parameters:
   33|       |	///   - start: start date
   34|       |	///   - end: end date
   35|      0|	public init(start: DateInRegion?, end: DateInRegion?) {
   36|      0|		self.start = start
   37|      0|		self.end = end
   38|      0|	}
   39|       |
   40|       |	/// Create a new time period with given start and a length specified in number of seconds.
   41|       |	///
   42|       |	/// - Parameters:
   43|       |	///   - start: start of the period
   44|       |	///   - duration: duration of the period expressed in seconds
   45|      0|	public init(start: DateInRegion, duration: TimeInterval) {
   46|      0|		self.start = start
   47|      0|		self.end = DateInRegion(start.date.addingTimeInterval(duration), region: start.region)
   48|      0|	}
   49|       |
   50|       |	/// Create a new time period which ends at given date and start date is back on time by given interval.
   51|       |	///
   52|       |	/// - Parameters:
   53|       |	///   - end: end date
   54|       |	///   - duration: duration expressed in seconds (it will be subtracted from start date)
   55|      0|	public init(end: DateInRegion, duration: TimeInterval) {
   56|      0|		self.end = end
   57|      0|		self.start = end.addingTimeInterval(-duration)
   58|      0|	}
   59|       |
   60|       |	/// Return a new instance of the TimePeriod that starts on the provided start date and is of the
   61|       |	/// size provided.
   62|       |	///
   63|       |	/// - Parameters:
   64|       |	///   - start: start of the period
   65|       |	///   - duration: length of the period (ie. `2.days` or `14.hours`...)
   66|      0|	public init(start: DateInRegion, duration: DateComponents) {
   67|      0|		self.start = start
   68|      0|		self.end = (start + duration)
   69|      0|	}
   70|       |
   71|       |	/// Return a new instance of the TimePeriod that starts at end time minus given duration.
   72|       |	///
   73|       |	/// - Parameters:
   74|       |	///   - end: end date
   75|       |	///   - duration: duration (it will be subtracted from end date in order to provide the start date)
   76|      0|	public init(end: DateInRegion, duration: DateComponents) {
   77|      0|		self.start = (end - duration)
   78|      0|		self.end = end
   79|      0|	}
   80|       |
   81|       |	/// Returns a new instance of DTTimePeriod that represents the largest time period available.
   82|       |	/// The start date is in the distant past and the end date is in the distant future.
   83|       |	///
   84|       |	/// - Returns: a new time period
   85|      0|	public static func infinity() -> TimePeriod {
   86|      0|		return TimePeriod(start: DateInRegion.past(), end: DateInRegion.future())
   87|      0|	}
   88|       |
   89|       |	// MARK: - Shifted
   90|       |
   91|       |	/// Shift the `TimePeriod` by a `TimeInterval`
   92|       |	///
   93|       |	/// - Parameter timeInterval: The time interval to shift the period by
   94|       |	/// - Returns: The new, shifted `TimePeriod`
   95|      0|	public func shifted(by timeInterval: TimeInterval) -> TimePeriod {
   96|      0|		let timePeriod = TimePeriod()
   97|      0|		timePeriod.start = start?.addingTimeInterval(timeInterval)
   98|      0|		timePeriod.end = end?.addingTimeInterval(timeInterval)
   99|      0|		return timePeriod
  100|      0|	}
  101|       |
  102|       |	/// Shift the `TimePeriod` by the specified components value.
  103|       |	/// ie. `let shifted = period.shifted(by: 3.days)`
  104|       |	///
  105|       |	/// - Parameter components: components to shift
  106|       |	/// - Returns: new period
  107|      0|	public func shifted(by components: DateComponents) -> TimePeriod {
  108|      0|		let timePeriod = TimePeriod()
  109|      0|		timePeriod.start = (hasStart ? (start! + components) : nil)
  110|      0|		timePeriod.end = (hasEnd ? (end! + components) : nil)
  111|      0|		return timePeriod
  112|      0|	}
  113|       |
  114|       |	// MARK: - Lengthen / Shorten
  115|       |
  116|       |	/// Lengthen the `TimePeriod` by a `TimeInterval`
  117|       |	///
  118|       |	/// - Parameters:
  119|       |	///   - timeInterval: The time interval to lengthen the period by
  120|       |	///   - anchor: The anchor point from which to make the change
  121|       |	/// - Returns: The new, lengthened `TimePeriod`
  122|      0|	public func lengthened(by timeInterval: TimeInterval, at anchor: TimePeriodAnchor) -> TimePeriod {
  123|      0|		let timePeriod = TimePeriod()
  124|      0|		switch anchor {
  125|      0|		case .beginning:
  126|      0|			timePeriod.start = start
  127|      0|			timePeriod.end = end?.addingTimeInterval(timeInterval)
  128|      0|		case .center:
  129|      0|			timePeriod.start = start?.addingTimeInterval(-timeInterval)
  130|      0|			timePeriod.end = end?.addingTimeInterval(timeInterval)
  131|      0|		case .end:
  132|      0|			timePeriod.start = start?.addingTimeInterval(-timeInterval)
  133|      0|			timePeriod.end = end
  134|      0|		}
  135|      0|		return timePeriod
  136|      0|	}
  137|       |
  138|       |	/// Shorten the `TimePeriod` by a `TimeInterval`
  139|       |	///
  140|       |	/// - Parameters:
  141|       |	///   - timeInterval:  The time interval to shorten the period by
  142|       |	///   - anchor: The anchor point from which to make the change
  143|       |	/// - Returns: The new, shortened `TimePeriod`
  144|      0|	public func shortened(by timeInterval: TimeInterval, at anchor: TimePeriodAnchor) -> TimePeriod {
  145|      0|		let timePeriod = TimePeriod()
  146|      0|		switch anchor {
  147|      0|		case .beginning:
  148|      0|			timePeriod.start = start
  149|      0|			timePeriod.end = end?.addingTimeInterval(-timeInterval)
  150|      0|		case .center:
  151|      0|			timePeriod.start = start?.addingTimeInterval(-timeInterval / 2)
  152|      0|			timePeriod.end = end?.addingTimeInterval(timeInterval / 2)
  153|      0|		case .end:
  154|      0|			timePeriod.start = start?.addingTimeInterval(timeInterval)
  155|      0|			timePeriod.end = end
  156|      0|		}
  157|      0|		return timePeriod
  158|      0|	}
  159|       |
  160|       |	// MARK: - Operator Overloads
  161|       |
  162|       |	/// Default anchor = beginning
  163|       |	/// Operator overload for lengthening a `TimePeriod` by a `TimeInterval`
  164|      0|	public static func + (leftAddend: TimePeriod, rightAddend: TimeInterval) -> TimePeriod {
  165|      0|		return leftAddend.lengthened(by: rightAddend, at: .beginning)
  166|      0|	}
  167|       |
  168|       |	/// Default anchor = beginning
  169|       |	/// Operator overload for shortening a `TimePeriod` by a `TimeInterval`
  170|      0|	public static func - (minuend: TimePeriod, subtrahend: TimeInterval) -> TimePeriod {
  171|      0|		return minuend.shortened(by: subtrahend, at: .beginning)
  172|      0|	}
  173|       |
  174|       |	/// Operator overload for checking if a `TimePeriod` is equal to a `TimePeriodProtocol`
  175|      0|	public static func == (left: TimePeriod, right: TimePeriodProtocol) -> Bool {
  176|      0|		return left.equals(right)
  177|      0|	}
  178|       |
  179|       |}
  180|       |
  181|       |public extension TimePeriod {
  182|       |
  183|       |    /// The start date of the time period
  184|      0|    var startDate: Date? {
  185|      0|        return start?.date
  186|      0|    }
  187|       |
  188|       |    /// The end date of the time period
  189|      0|    var endDate: Date? {
  190|      0|        return end?.date
  191|      0|    }
  192|       |
  193|       |    /// Create a new time period with the given start date, end date and region (default is UTC)
  194|      0|    convenience init(startDate: Date, endDate: Date, region: Region = Region.UTC) {
  195|      0|        let start = DateInRegion(startDate, region: region)
  196|      0|        let end = DateInRegion(endDate, region: region)
  197|      0|        self.init(start: start, end: end)
  198|      0|    }
  199|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/SwiftDate/Sources/SwiftDate/TimePeriod/TimePeriodProtocol.swift:
    1|       |//
    2|       |//  SwiftDate
    3|       |//  Parse, validate, manipulate, and display dates, time and timezones in Swift
    4|       |//
    5|       |//  Created by Daniele Margutti
    6|       |//   - Web: https://www.danielemargutti.com
    7|       |//   - Twitter: https://twitter.com/danielemargutti
    8|       |//   - Mail: hello@danielemargutti.com
    9|       |//
   10|       |//  Copyright © 2019 Daniele Margutti. Licensed under MIT License.
   11|       |//
   12|       |
   13|       |import Foundation
   14|       |
   15|       |public protocol TimePeriodProtocol {
   16|       |
   17|       |	/// The start date for a TimePeriod representing the starting boundary of the time period
   18|       |	var start: DateInRegion? { get set }
   19|       |
   20|       |	/// The end date for a TimePeriod representing the ending boundary of the time period
   21|       |	var end: DateInRegion? { get set }
   22|       |
   23|       |}
   24|       |
   25|       |public extension TimePeriodProtocol {
   26|       |
   27|       |	/// Return `true` if time period has both start and end dates
   28|      0|	var hasFiniteRange: Bool {
   29|      0|		guard start != nil && end != nil else { return false }
   30|      0|		return true
   31|      0|	}
   32|       |
   33|       |	/// Return `true` if period has a start date
   34|      0|	var hasStart: Bool {
   35|      0|		return (start != nil)
   36|      0|	}
   37|       |
   38|       |	/// Return `true` if period has a end date
   39|      0|	var hasEnd: Bool {
   40|      0|		return (end != nil)
   41|      0|	}
   42|       |
   43|       |	/// Check if receiver is equal to given period (both start/end groups are equals)
   44|       |	///
   45|       |	/// - Parameter period: period to compare against to.
   46|       |	/// - Returns: true if are equals
   47|      0|	func equals(_ period: TimePeriodProtocol) -> Bool {
   48|      0|		return (start == period.start && end == period.end)
   49|      0|	}
   50|       |
   51|       |	/// If the given `TimePeriod`'s beginning is before `beginning` and
   52|       |	/// if the given 'TimePeriod`'s end is after `end`.
   53|       |	///
   54|       |	/// - Parameter period: The time period to compare to self
   55|       |	/// - Returns: True if self is inside of the given `TimePeriod`
   56|      0|	func isInside(_ period: TimePeriodProtocol) -> Bool {
   57|      0|		guard hasFiniteRange, period.hasFiniteRange else { return false }
   58|      0|		return (period.start! <= start! && period.end! >= end!)
   59|      0|	}
   60|       |
   61|       |	/// If the given Date is after `beginning` and before `end`.
   62|       |	///
   63|       |	/// - Parameters:
   64|       |	///   - date: The time period to compare to self
   65|       |	///   - interval: Whether the edge of the date is included in the calculation
   66|       |	/// - Returns: True if the given `TimePeriod` is inside of self
   67|      0|	func contains(date: DateInRegion, interval: IntervalType = .closed) -> Bool {
   68|      0|		guard hasFiniteRange else { return false }
   69|      0|		switch interval {
   70|      0|		case .closed:	return (start! <= date && end! >= date)
   71|      0|		case .open:		return (start! < date && end! > date)
   72|      0|		}
   73|      0|	}
   74|       |
   75|       |	/// If the given `TimePeriod`'s beginning is after `beginning` and
   76|       |	/// if the given 'TimePeriod`'s after is after `end`.
   77|       |	///
   78|       |	/// - Parameter period: The time period to compare to self
   79|       |	/// - Returns: True if the given `TimePeriod` is inside of self
   80|      0|	func contains(_ period: TimePeriodProtocol) -> Bool {
   81|      0|		guard hasFiniteRange, period.hasFiniteRange else { return false }
   82|      0|		if period.start! < start! && period.end! > start! {
   83|      0|			return true // Outside -> Inside
   84|      0|		} else if period.start! >= start! && period.end! <= end! {
   85|      0|			return true // Enclosing
   86|      0|		} else if period.start! < end! && period.end! > end! {
   87|      0|			return true // Inside -> Out
   88|      0|		}
   89|      0|		return false
   90|      0|	}
   91|       |
   92|       |	/// If self and the given `TimePeriod` share any sub-`TimePeriod`.
   93|       |	///
   94|       |	/// - Parameter period: The time period to compare to self
   95|       |	/// - Returns: True if there is a period of time that is shared by both `TimePeriod`s
   96|      0|	func overlaps(with period: TimePeriodProtocol) -> Bool {
   97|      0|		if period.start! < start! && period.end! > start! {
   98|      0|			return true // Outside -> Inside
   99|      0|		} else if period.start! >= start! && period.end! <= end! {
  100|      0|			return true // Enclosing
  101|      0|		} else if period.start! < end! && period.end! > end! {
  102|      0|			return true // Inside -> Out
  103|      0|		}
  104|      0|		return false
  105|      0|	}
  106|       |
  107|       |	/// If self and the given `TimePeriod` overlap or the period's edges touch.
  108|       |	///
  109|       |	/// - Parameter period: The time period to compare to self
  110|       |	/// - Returns: True if there is a period of time or moment that is shared by both `TimePeriod`s
  111|      0|	func intersects(with period: TimePeriodProtocol) -> Bool {
  112|      0|		let relation = self.relation(to: period)
  113|      0|		return (relation != .after && relation != .before)
  114|      0|	}
  115|       |
  116|       |	/// If self is before the given `TimePeriod` chronologically. (A gap must exist between the two).
  117|       |	///
  118|       |	/// - Parameter period: The time period to compare to self
  119|       |	/// - Returns: True if self is after the given `TimePeriod`
  120|      0|	func isBefore(_ period: TimePeriodProtocol) -> Bool {
  121|      0|		return (relation(to: period) == .before)
  122|      0|	}
  123|       |
  124|       |	/// If self is after the given `TimePeriod` chronologically. (A gap must exist between the two).
  125|       |	///
  126|       |	/// - Parameter period: The time period to compare to self
  127|       |	/// - Returns: True if self is after the given `TimePeriod`
  128|      0|	func isAfter(_ period: TimePeriodProtocol) -> Bool {
  129|      0|		return (relation(to: period) == .after)
  130|      0|	}
  131|       |
  132|       |	/// The period of time between self and the given `TimePeriod` not contained by either.
  133|       |	///
  134|       |	/// - Parameter period: The time period to compare to self
  135|       |	/// - Returns: The gap between the periods. Zero if there is no gap.
  136|      0|	func hasGap(between period: TimePeriodProtocol) -> Bool {
  137|      0|		return (isBefore(period) || isAfter(period))
  138|      0|	}
  139|       |
  140|       |	/// The period of time between self and the given `TimePeriod` not contained by either.
  141|       |	///
  142|       |	/// - Parameter period: The time period to compare to self
  143|       |	/// - Returns: The gap between the periods. Zero if there is no gap.
  144|      0|	func gap(between period: TimePeriodProtocol) -> TimeInterval {
  145|      0|		guard hasFiniteRange, period.hasFiniteRange else { return TimeInterval.greatestFiniteMagnitude }
  146|      0|		if end! < period.start! {
  147|      0|			return abs(end!.timeIntervalSince(period.start!))
  148|      0|		} else if period.end! < start! {
  149|      0|			return abs(end!.timeIntervalSince(start!))
  150|      0|		}
  151|      0|		return 0
  152|      0|	}
  153|       |
  154|       |	/// In place, shift the `TimePeriod` by a `TimeInterval`
  155|       |	///
  156|       |	/// - Parameter timeInterval: The time interval to shift the period by
  157|      0|	mutating func shift(by timeInterval: TimeInterval) {
  158|      0|		start?.addTimeInterval(timeInterval)
  159|      0|		end?.addTimeInterval(timeInterval)
  160|      0|	}
  161|       |
  162|       |	/// In place, lengthen the `TimePeriod`, anchored at the beginning, end or center
  163|       |	///
  164|       |	/// - Parameters:
  165|       |	///   - timeInterval: The time interval to lengthen the period by
  166|       |	///   - anchor: The anchor point from which to make the change
  167|      0|	mutating func lengthen(by timeInterval: TimeInterval, at anchor: TimePeriodAnchor) {
  168|      0|		switch anchor {
  169|      0|		case .beginning:
  170|      0|			end?.addTimeInterval(timeInterval)
  171|      0|		case .end:
  172|      0|			start?.addTimeInterval(timeInterval)
  173|      0|		case .center:
  174|      0|			start = start?.addingTimeInterval(-timeInterval / 2.0)
  175|      0|			end = end?.addingTimeInterval(timeInterval / 2.0)
  176|      0|		}
  177|      0|	}
  178|       |
  179|       |	/// In place, shorten the `TimePeriod`, anchored at the beginning, end or center
  180|       |	///
  181|       |	/// - Parameters:
  182|       |	///   - timeInterval: The time interval to shorten the period by
  183|       |	///   - anchor: The anchor point from which to make the change
  184|      0|	mutating func shorten(by timeInterval: TimeInterval, at anchor: TimePeriodAnchor) {
  185|      0|		switch anchor {
  186|      0|		case .beginning:
  187|      0|			end?.addTimeInterval(-timeInterval)
  188|      0|		case .end:
  189|      0|			start?.addTimeInterval(timeInterval)
  190|      0|		case .center:
  191|      0|			start?.addTimeInterval(timeInterval / 2.0)
  192|      0|			end?.addTimeInterval(-timeInterval / 2.0)
  193|      0|		}
  194|      0|	}
  195|       |
  196|       |	/// The relationship of the self `TimePeriod` to the given `TimePeriod`.
  197|       |	/// Relations are stored in Enums.swift. Formal defnitions available in the provided
  198|       |	/// links:
  199|       |	/// [GitHub](https://github.com/MatthewYork/DateTools#relationships),
  200|       |	/// [CodeProject](http://www.codeproject.com/Articles/168662/Time-Period-Library-for-NET)
  201|       |	///
  202|       |	/// - Parameter period: The time period to compare to self
  203|       |	/// - Returns: The relationship between self and the given time period
  204|      0|	func relation(to period: TimePeriodProtocol) -> TimePeriodRelation {
  205|      0|		//Make sure that all start and end points exist for comparison
  206|      0|		guard hasFiniteRange, period.hasFiniteRange else { return .none }
  207|      0|		//Make sure time periods are of positive durations
  208|      0|		guard start! < end! && period.start! < period.end! else { return .none }
  209|      0|		//Make comparisons
  210|      0|		if period.start! < start! {
  211|      0|			return .after
  212|      0|		} else if period.end! == start! {
  213|      0|			return .startTouching
  214|      0|		} else if period.start! < start! && period.end! < end! {
  215|      0|			return .startInside
  216|      0|		} else if period.start! == start! && period.end! > end! {
  217|      0|			return .insideStartTouching
  218|      0|		} else if period.start! == start! && period.end! < end! {
  219|      0|			return .enclosingStartTouching
  220|      0|		} else if period.start! > start! && period.end! < end! {
  221|      0|			return .enclosing
  222|      0|		} else if period.start! > start! && period.end! == end! {
  223|      0|			return .enclosingEndTouching
  224|      0|		} else if period.start == start! && period.end! == end! {
  225|      0|			return .exactMatch
  226|      0|		} else if period.start! < start! && period.end! > end! {
  227|      0|			return .inside
  228|      0|		} else if period.start! < start! && period.end! == end! {
  229|      0|			return .insideEndTouching
  230|      0|		} else if period.start! < end! && period.end! > end! {
  231|      0|			return .endInside
  232|      0|		} else if period.start! == end! && period.end! > end! {
  233|      0|			return .endTouching
  234|      0|		} else if period.start! > end! {
  235|      0|			return .before
  236|      0|		}
  237|      0|		return .none
  238|      0|	}
  239|       |
  240|       |	/// Return `true` if period is zero-seconds long or less than specified precision.
  241|       |	///
  242|       |	/// - Parameter precision: precision in seconds; by default is 0.
  243|       |	/// - Returns: true if start/end has the same value or less than specified precision
  244|      0|	func isMoment(precision: TimeInterval = 0) -> Bool {
  245|      0|		guard hasFiniteRange else { return false }
  246|      0|		return (abs(start!.date.timeIntervalSince1970 - end!.date.timeIntervalSince1970) <= precision)
  247|      0|	}
  248|       |
  249|       |	/// Returns the duration of the receiver expressed with given time unit.
  250|       |	/// If time period has not a finite range it returns `nil`.
  251|       |	///
  252|       |	/// - Parameter unit: unit of the duration
  253|       |	/// - Returns: duration, `nil` if period has not a finite range
  254|      0|	func durationIn(_ units: Set<Calendar.Component>) -> DateComponents? {
  255|      0|		guard hasFiniteRange else { return nil }
  256|      0|		return start!.calendar.dateComponents(units, from: start!.date, to: end!.date)
  257|      0|	}
  258|       |
  259|       |	/// Returns the duration of the receiver expressed with given time unit.
  260|       |	/// If time period has not a finite range it returns `nil`.
  261|       |	///
  262|       |	/// - Parameter unit: unit of the duration
  263|       |	/// - Returns: duration, `nil` if period has not a finite range
  264|      0|	func durationIn(_ unit: Calendar.Component) -> Int? {
  265|      0|		guard hasFiniteRange else { return nil }
  266|      0|		return start!.calendar.dateComponents([unit], from: start!.date, to: end!.date).value(for: unit)
  267|      0|	}
  268|       |
  269|       |	/// The duration of the `TimePeriod` in years.
  270|       |	/// Returns the `Int.max` if beginning or end are `nil`.
  271|      0|	var years: Int {
  272|      0|		guard let b = start, let e = end else { return Int.max }
  273|      0|		return b.toUnit(.year, to: e)
  274|      0|	}
  275|       |
  276|       |	/// The duration of the `TimePeriod` in months.
  277|       |	/// Returns the `Int.max` if beginning or end are `nil`.
  278|      0|	var months: Int {
  279|      0|		guard let b = start, let e = end else { return Int.max }
  280|      0|		return b.toUnit(.month, to: e)
  281|      0|	}
  282|       |
  283|       |	/// The duration of the `TimePeriod` in weeks.
  284|       |	/// Returns the `Int.max` if beginning or end are `nil`.
  285|      0|	var weeks: Int {
  286|      0|		guard let b = start, let e = end else { return Int.max }
  287|      0|		return b.toUnit(.weekOfMonth, to: e)
  288|      0|	}
  289|       |
  290|       |	/// The duration of the `TimePeriod` in days.
  291|       |	/// Returns the `Int.max` if beginning or end are `nil`.
  292|      0|	var days: Int {
  293|      0|		guard let b = start, let e = end else { return Int.max }
  294|      0|		return b.toUnit(.day, to: e)
  295|      0|	}
  296|       |
  297|       |	/// The duration of the `TimePeriod` in hours.
  298|       |	/// Returns the `Int.max` if beginning or end are `nil`.
  299|      0|	var hours: Int {
  300|      0|		guard let b = start, let e = end else { return Int.max }
  301|      0|		return b.toUnit(.hour, to: e)
  302|      0|	}
  303|       |
  304|       |	/// The duration of the `TimePeriod` in years.
  305|       |	/// Returns the `Int.max` if beginning or end are `nil`.
  306|      0|	var minutes: Int {
  307|      0|		guard let b = start, let e = end else { return Int.max }
  308|      0|		return b.toUnit(.minute, to: e)
  309|      0|	}
  310|       |
  311|       |	/// The duration of the `TimePeriod` in seconds.
  312|       |	/// Returns the `Int.max` if beginning or end are `nil`.
  313|      0|	var seconds: Int {
  314|      0|		guard let b = start, let e = end else { return Int.max }
  315|      0|		return b.toUnit(.second, to: e)
  316|      0|	}
  317|       |
  318|       |	/// The length of time between the beginning and end dates of the
  319|       |	/// `TimePeriod` as a `TimeInterval`.
  320|       |	/// If intervals are not nil returns `Double.greatestFiniteMagnitude`
  321|      0|	var duration: TimeInterval {
  322|      0|		guard let b = start, let e = end else {
  323|      0|			return TimeInterval(Double.greatestFiniteMagnitude)
  324|      0|		}
  325|      0|		return abs(b.date.timeIntervalSince(e.date))
  326|      0|	}
  327|       |
  328|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/combine-schedulers/Sources/CombineSchedulers/AnyScheduler.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |/// A type-erasing wrapper for the `Scheduler` protocol, which can be useful for being generic over
    5|       |/// many types of schedulers without needing to actually introduce a generic to your code.
    6|       |///
    7|       |/// This type is useful for times that you want to be able to customize the scheduler used in some
    8|       |/// code from the outside, but you don't want to introduce a generic to make it customizable. For
    9|       |/// example, suppose you have a view model `ObservableObject` that performs an API request when a
   10|       |/// method is called:
   11|       |///
   12|       |///     class EpisodeViewModel: ObservableObject {
   13|       |///       @Published var episode: Episode?
   14|       |///
   15|       |///       let apiClient: ApiClient
   16|       |///
   17|       |///       init(apiClient: ApiClient) {
   18|       |///         self.apiClient = apiClient
   19|       |///       }
   20|       |///
   21|       |///       func reloadButtonTapped() {
   22|       |///         self.apiClient.fetchEpisode()
   23|       |///           .receive(on: DispatchQueue.main)
   24|       |///           .assign(to: &self.$episode)
   25|       |///       }
   26|       |///     }
   27|       |///
   28|       |/// Notice that we are using `DispatchQueue.main` in the `reloadButtonTapped` method because the
   29|       |/// `fetchEpisode` endpoint most likely delivers its output on a background thread (as is the case
   30|       |/// with `URLSession`).
   31|       |///
   32|       |/// This code seems innocent enough, but the presence of `.receive(on: DispatchQueue.main)` makes
   33|       |/// this code harder to test since you have to use `XCTest` expectations to explicitly wait a small
   34|       |/// amount of time for the queue to execute. This can lead to flakiness in tests and make test
   35|       |/// suites take longer to execute than necessary.
   36|       |///
   37|       |/// One way to fix this testing problem is to use an "immediate" scheduler instead of
   38|       |/// `DispatchQueue.main`, which will cause `fetchEpisode` to deliver its output as soon as possible
   39|       |/// with no thread hops. In order to allow for this we would need to inject a scheduler into our
   40|       |/// view model so that we can control it from the outside:
   41|       |///
   42|       |///     class EpisodeViewModel<S: Scheduler>: ObservableObject {
   43|       |///       @Published var episode: Episode?
   44|       |///
   45|       |///       let apiClient: ApiClient
   46|       |///       let scheduler: S
   47|       |///
   48|       |///       init(apiClient: ApiClient, scheduler: S) {
   49|       |///         self.apiClient = apiClient
   50|       |///         self.scheduler = scheduler
   51|       |///       }
   52|       |///
   53|       |///       func reloadButtonTapped() {
   54|       |///         self.apiClient.fetchEpisode()
   55|       |///           .receive(on: self.scheduler)
   56|       |///           .assign(to: &self.$episode)
   57|       |///       }
   58|       |///     }
   59|       |///
   60|       |/// Now we can initialize this view model in production by using `DispatchQueue.main` and we can
   61|       |/// initialize it in tests using `DispatchQueue.immediate`. Sounds like a win!
   62|       |///
   63|       |/// However, introducing this generic to our view model is quite heavyweight as it is loudly
   64|       |/// announcing to the outside world that this type uses a scheduler, and worse it will end up
   65|       |/// infecting any code that touches this view model that also wants to be testable. For example,
   66|       |/// any view that uses this view model will need to introduce a generic if it wants to also be able
   67|       |/// to control the scheduler, which would be useful if we wanted to write snapshot tests.
   68|       |///
   69|       |/// Instead of introducing a generic to allow for substituting in different schedulers we can use
   70|       |/// `AnyScheduler`. It allows us to be somewhat generic in the scheduler, but without actually
   71|       |/// introducing a generic.
   72|       |///
   73|       |/// Instead of holding a generic scheduler in our view model we can say that we only want a
   74|       |/// scheduler whose associated types match that of `DispatchQueue`:
   75|       |///
   76|       |///     class EpisodeViewModel: ObservableObject {
   77|       |///       @Published var episode: Episode?
   78|       |///
   79|       |///       let apiClient: ApiClient
   80|       |///       let scheduler: AnySchedulerOf<DispatchQueue>
   81|       |///
   82|       |///       init(apiClient: ApiClient, scheduler: AnySchedulerOf<DispatchQueue>) {
   83|       |///         self.apiClient = apiClient
   84|       |///         self.scheduler = scheduler
   85|       |///       }
   86|       |///
   87|       |///       func reloadButtonTapped() {
   88|       |///         self.apiClient.fetchEpisode()
   89|       |///           .receive(on: self.scheduler)
   90|       |///           .assign(to: &self.$episode)
   91|       |///       }
   92|       |///     }
   93|       |///
   94|       |/// Then, in production we can create a view model that uses a live `DispatchQueue`, but we just
   95|       |/// have to first erase its type:
   96|       |///
   97|       |///     let viewModel = EpisodeViewModel(
   98|       |///       apiClient: ...,
   99|       |///       scheduler: DispatchQueue.main.eraseToAnyScheduler()
  100|       |///     )
  101|       |///
  102|       |/// For common schedulers, like `DispatchQueue`, `OperationQueue`, and `RunLoop`, there is even a
  103|       |/// static helper on `AnyScheduler` that further simplifies this:
  104|       |///
  105|       |///     let viewModel = EpisodeViewModel(
  106|       |///       apiClient: ...,
  107|       |///       scheduler: .main
  108|       |///     )
  109|       |///
  110|       |/// And in tests we can use an immediate scheduler:
  111|       |///
  112|       |///     let viewModel = EpisodeViewModel(
  113|       |///       apiClient: ...,
  114|       |///       scheduler: .immediate
  115|       |///     )
  116|       |///
  117|       |/// So, in general, `AnyScheduler` is great for allowing one to control what scheduler is used
  118|       |/// in classes, functions, etc. without needing to introduce a generic, which can help simplify
  119|       |/// the code and reduce implementation details from leaking out.
  120|       |///
  121|       |public struct AnyScheduler<SchedulerTimeType, SchedulerOptions>: Scheduler
  122|       |where
  123|       |  SchedulerTimeType: Strideable,
  124|       |  SchedulerTimeType.Stride: SchedulerTimeIntervalConvertible
  125|       |{
  126|       |
  127|       |  private let _minimumTolerance: () -> SchedulerTimeType.Stride
  128|       |  private let _now: () -> SchedulerTimeType
  129|       |  private let _scheduleAfterIntervalToleranceOptionsAction:
  130|       |    (
  131|       |      SchedulerTimeType,
  132|       |      SchedulerTimeType.Stride,
  133|       |      SchedulerTimeType.Stride,
  134|       |      SchedulerOptions?,
  135|       |      @escaping () -> Void
  136|       |    ) -> Cancellable
  137|       |  private let _scheduleAfterToleranceOptionsAction:
  138|       |    (
  139|       |      SchedulerTimeType,
  140|       |      SchedulerTimeType.Stride,
  141|       |      SchedulerOptions?,
  142|       |      @escaping () -> Void
  143|       |    ) -> Void
  144|       |  private let _scheduleOptionsAction: (SchedulerOptions?, @escaping () -> Void) -> Void
  145|       |
  146|       |  /// The minimum tolerance allowed by the scheduler.
  147|      0|  public var minimumTolerance: SchedulerTimeType.Stride { self._minimumTolerance() }
  148|       |
  149|       |  /// This scheduler’s definition of the current moment in time.
  150|      0|  public var now: SchedulerTimeType { self._now() }
  151|       |
  152|       |  /// Creates a type-erasing scheduler to wrap the provided endpoints.
  153|       |  ///
  154|       |  /// - Parameters:
  155|       |  ///   - minimumTolerance: A closure that returns the scheduler's minimum tolerance.
  156|       |  ///   - now: A closure that returns the scheduler's current time.
  157|       |  ///   - scheduleImmediately: A closure that schedules a unit of work to be run as soon as possible.
  158|       |  ///   - delayed: A closure that schedules a unit of work to be run after a delay.
  159|       |  ///   - interval: A closure that schedules a unit of work to be performed on a repeating interval.
  160|       |  public init(
  161|       |    minimumTolerance: @escaping () -> SchedulerTimeType.Stride,
  162|       |    now: @escaping () -> SchedulerTimeType,
  163|       |    scheduleImmediately: @escaping (SchedulerOptions?, @escaping () -> Void) -> Void,
  164|       |    delayed: @escaping (
  165|       |      SchedulerTimeType, SchedulerTimeType.Stride, SchedulerOptions?, @escaping () -> Void
  166|       |    ) -> Void,
  167|       |    interval: @escaping (
  168|       |      SchedulerTimeType, SchedulerTimeType.Stride, SchedulerTimeType.Stride, SchedulerOptions?,
  169|       |      @escaping () -> Void
  170|       |    ) -> Cancellable
  171|      0|  ) {
  172|      0|    self._minimumTolerance = minimumTolerance
  173|      0|    self._now = now
  174|      0|    self._scheduleOptionsAction = scheduleImmediately
  175|      0|    self._scheduleAfterToleranceOptionsAction = delayed
  176|      0|    self._scheduleAfterIntervalToleranceOptionsAction = interval
  177|      0|  }
  178|       |
  179|       |  /// Creates a type-erasing scheduler to wrap the provided scheduler.
  180|       |  ///
  181|       |  /// - Parameters:
  182|       |  ///   - scheduler: A scheduler to wrap with a type-eraser.
  183|       |  public init<S>(
  184|       |    _ scheduler: S
  185|       |  )
  186|       |  where
  187|       |    S: Scheduler, S.SchedulerTimeType == SchedulerTimeType, S.SchedulerOptions == SchedulerOptions
  188|      0|  {
  189|      0|    self._now = { scheduler.now }
  190|      0|    self._minimumTolerance = { scheduler.minimumTolerance }
  191|      0|    self._scheduleAfterToleranceOptionsAction = scheduler.schedule
  ------------------
  | Unexecuted instantiation: $s17CombineSchedulers12AnySchedulerVyACyxq_Gqd__c0D8TimeTypeQyd__Rsz0D7OptionsQyd__Rs_0A00D0Rd__lufcyx_6StrideQzq_Sgyyctcqd__cfu_
  ------------------
  | Unexecuted instantiation: $s17CombineSchedulers12AnySchedulerVyACyxq_Gqd__c0D8TimeTypeQyd__Rsz0D7OptionsQyd__Rs_0A00D0Rd__lufcyx_6StrideQzq_Sgyyctcqd__cfu_yx_AlMyyctcfu0_
  ------------------
  192|      0|    self._scheduleAfterIntervalToleranceOptionsAction = scheduler.schedule
  ------------------
  | Unexecuted instantiation: $s17CombineSchedulers12AnySchedulerVyACyxq_Gqd__c0D8TimeTypeQyd__Rsz0D7OptionsQyd__Rs_0A00D0Rd__lufcAI11Cancellable_px_6StrideQzAMq_Sgyyctcqd__cfu1_
  ------------------
  | Unexecuted instantiation: $s17CombineSchedulers12AnySchedulerVyACyxq_Gqd__c0D8TimeTypeQyd__Rsz0D7OptionsQyd__Rs_0A00D0Rd__lufcAI11Cancellable_px_6StrideQzAMq_Sgyyctcqd__cfu1_AiK_px_A2mNyyctcfu2_
  ------------------
  193|      0|    self._scheduleOptionsAction = scheduler.schedule
  ------------------
  | Unexecuted instantiation: $s17CombineSchedulers12AnySchedulerVyACyxq_Gqd__c0D8TimeTypeQyd__Rsz0D7OptionsQyd__Rs_0A00D0Rd__lufcyq_Sg_yyctcqd__cfu3_
  ------------------
  | Unexecuted instantiation: $s17CombineSchedulers12AnySchedulerVyACyxq_Gqd__c0D8TimeTypeQyd__Rsz0D7OptionsQyd__Rs_0A00D0Rd__lufcyq_Sg_yyctcqd__cfu3_yAK_yyctcfu4_
  ------------------
  194|      0|  }
  195|       |
  196|       |  /// Performs the action at some time after the specified date.
  197|       |  public func schedule(
  198|       |    after date: SchedulerTimeType,
  199|       |    tolerance: SchedulerTimeType.Stride,
  200|       |    options: SchedulerOptions?,
  201|       |    _ action: @escaping () -> Void
  202|      0|  ) {
  203|      0|    self._scheduleAfterToleranceOptionsAction(date, tolerance, options, action)
  204|      0|  }
  205|       |
  206|       |  /// Performs the action at some time after the specified date, at the
  207|       |  /// specified frequency, taking into account tolerance if possible.
  208|       |  public func schedule(
  209|       |    after date: SchedulerTimeType,
  210|       |    interval: SchedulerTimeType.Stride,
  211|       |    tolerance: SchedulerTimeType.Stride,
  212|       |    options: SchedulerOptions?,
  213|       |    _ action: @escaping () -> Void
  214|      0|  ) -> Cancellable {
  215|      0|    self._scheduleAfterIntervalToleranceOptionsAction(
  216|      0|      date, interval, tolerance, options, action)
  217|      0|  }
  218|       |
  219|       |  /// Performs the action at the next possible opportunity.
  220|       |  public func schedule(
  221|       |    options: SchedulerOptions?,
  222|       |    _ action: @escaping () -> Void
  223|      0|  ) {
  224|      0|    self._scheduleOptionsAction(options, action)
  225|      0|  }
  226|       |}
  227|       |
  228|       |/// A convenience type to specify an `AnyScheduler` by the scheduler it wraps rather than by the
  229|       |/// time type and options type.
  230|       |public typealias AnySchedulerOf<Scheduler> = AnyScheduler<
  231|       |  Scheduler.SchedulerTimeType, Scheduler.SchedulerOptions
  232|       |> where Scheduler: Combine.Scheduler
  233|       |
  234|       |extension Scheduler {
  235|       |  /// Wraps this scheduler with a type eraser.
  236|      0|  public func eraseToAnyScheduler() -> AnyScheduler<SchedulerTimeType, SchedulerOptions> {
  237|      0|    AnyScheduler(self)
  238|      0|  }
  239|       |}
  240|       |
  241|       |extension AnyScheduler
  242|       |where
  243|       |  SchedulerTimeType == DispatchQueue.SchedulerTimeType,
  244|       |  SchedulerOptions == DispatchQueue.SchedulerOptions
  245|       |{
  246|       |  /// A type-erased main dispatch queue.
  247|      0|  public static var main: Self {
  248|      0|    DispatchQueue.main.eraseToAnyScheduler()
  249|      0|  }
  250|       |}
  251|       |
  252|       |extension AnyScheduler
  253|       |where
  254|       |  SchedulerTimeType == OperationQueue.SchedulerTimeType,
  255|       |  SchedulerOptions == OperationQueue.SchedulerOptions
  256|       |{
  257|       |  /// A type-erased main operation queue.
  258|      0|  public static var main: Self {
  259|      0|    OperationQueue.main.eraseToAnyScheduler()
  260|      0|  }
  261|       |}
  262|       |
  263|       |extension AnyScheduler
  264|       |where
  265|       |  SchedulerTimeType == RunLoop.SchedulerTimeType,
  266|       |  SchedulerOptions == RunLoop.SchedulerOptions
  267|       |{
  268|       |  /// A type-erased main run loop.
  269|      0|  public static var main: Self {
  270|      0|    RunLoop.main.eraseToAnyScheduler()
  271|      0|  }
  272|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/combine-schedulers/Sources/CombineSchedulers/FailingScheduler.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |import XCTestDynamicOverlay
    4|       |
    5|       |/// A scheduler that causes the current XCTest test case to fail if it is used.
    6|       |///
    7|       |/// This scheduler can provide an additional layer of certainty that a tested code path does not
    8|       |/// require the use of a scheduler.
    9|       |///
   10|       |/// As a view model becomes more complex, only some of its logic may require a scheduler. When
   11|       |/// writing unit tests for any logic that does _not_ require a scheduler, one should provide a
   12|       |/// failing scheduler, instead. This documents, directly in the test, that the feature does not
   13|       |/// use a scheduler. If it did, or ever does in the future, the test will fail.
   14|       |///
   15|       |/// For example, the following view model has a couple responsibilities:
   16|       |///
   17|       |///     class EpisodeViewModel: ObservableObject {
   18|       |///       @Published var episode: Episode?
   19|       |///
   20|       |///       let apiClient: ApiClient
   21|       |///       let mainQueue: AnySchedulerOf<DispatchQueue>
   22|       |///
   23|       |///       init(apiClient: ApiClient, mainQueue: AnySchedulerOf<DispatchQueue>) {
   24|       |///         self.apiClient = apiClient
   25|       |///         self.mainQueue = mainQueue
   26|       |///       }
   27|       |///
   28|       |///       func reloadButtonTapped() {
   29|       |///         self.apiClient.fetchEpisode()
   30|       |///           .receive(on: self.mainQueue)
   31|       |///           .assign(to: &self.$episode)
   32|       |///       }
   33|       |///
   34|       |///       func favoriteButtonTapped() {
   35|       |///         self.episode?.isFavorite.toggle()
   36|       |///       }
   37|       |///     }
   38|       |///
   39|       |///   * It lets the user tap a button to refresh some episode data
   40|       |///   * It lets the user toggle if the episode is one of their favorites
   41|       |///
   42|       |/// The API client delivers the episode on a background queue, so the view model must receive it
   43|       |/// on its main queue before mutating its state.
   44|       |///
   45|       |/// Tapping the favorite button, however, involves no scheduling. This means that a test can be
   46|       |/// written with a failing scheduler:
   47|       |///
   48|       |///     func testFavoriteButton() {
   49|       |///       let viewModel = EpisodeViewModel(
   50|       |///         apiClient: .mock,
   51|       |///         mainQueue: .failing
   52|       |///       )
   53|       |///       viewModel.episode = .mock
   54|       |///
   55|       |///       viewModel.favoriteButtonTapped()
   56|       |///       XCTAssert(viewModel.episode?.isFavorite == true)
   57|       |///
   58|       |///       viewModel.favoriteButtonTapped()
   59|       |///       XCTAssert(viewModel.episode?.isFavorite == false)
   60|       |///     }
   61|       |///
   62|       |/// With `.failing`, this test pretty strongly declares that favoriting an episode does not need
   63|       |/// a scheduler to do the job, which means it is reasonable to assume that the feature is simple
   64|       |/// and does not involve any asynchrony.
   65|       |///
   66|       |/// In the future, should favoriting an episode fire off an API request that involves a scheduler,
   67|       |/// this test will begin to fail, which is a good thing! This will force us to address the
   68|       |/// complexity that was introduced. Had we used any other scheduler, it would quietly receive this
   69|       |/// additional work and the test would continue to pass.
   70|       |public struct FailingScheduler<SchedulerTimeType, SchedulerOptions>: Scheduler
   71|       |where
   72|       |  SchedulerTimeType: Strideable,
   73|       |  SchedulerTimeType.Stride: SchedulerTimeIntervalConvertible
   74|       |{
   75|       |
   76|      0|  public var minimumTolerance: SchedulerTimeType.Stride {
   77|      0|    XCTFail(
   78|      0|      """
   79|      0|      \(self.prefix.isEmpty ? "" : "\(self.prefix) - ")\
   80|      0|      A failing scheduler was asked its minimum tolerance.
   81|      0|      """
   82|      0|    )
   83|      0|    return self._minimumTolerance
   84|      0|  }
   85|       |
   86|      0|  public var now: SchedulerTimeType {
   87|      0|    XCTFail(
   88|      0|      """
   89|      0|      \(self.prefix.isEmpty ? "" : "\(self.prefix) - ")\
   90|      0|      A failing scheduler was asked the current time.
   91|      0|      """
   92|      0|    )
   93|      0|    return self._now
   94|      0|  }
   95|       |
   96|       |  public let prefix: String
   97|      0|  private let _minimumTolerance: SchedulerTimeType.Stride = .zero
   98|       |  private let _now: SchedulerTimeType
   99|       |
  100|       |  /// Creates a failing test scheduler with the given date.
  101|       |  ///
  102|       |  /// - Parameters:
  103|       |  ///   - prefix: A string that identifies this scheduler and will prefix all failure messages.
  104|       |  ///   - now: now: The current date of the failing scheduler.
  105|      0|  public init(_ prefix: String = "", now: SchedulerTimeType) {
  106|      0|    self._now = now
  107|      0|    self.prefix = prefix
  108|      0|  }
  109|       |
  110|      0|  public func schedule(options _: SchedulerOptions?, _ action: () -> Void) {
  111|      0|    XCTFail(
  112|      0|      """
  113|      0|      \(self.prefix.isEmpty ? "" : "\(self.prefix) - ")\
  114|      0|      A failing scheduler scheduled an action to run immediately.
  115|      0|      """
  116|      0|    )
  117|      0|  }
  118|       |
  119|       |  public func schedule(
  120|       |    after _: SchedulerTimeType,
  121|       |    tolerance _: SchedulerTimeType.Stride,
  122|       |    options _: SchedulerOptions?,
  123|       |    _ action: () -> Void
  124|      0|  ) {
  125|      0|    XCTFail(
  126|      0|      """
  127|      0|      \(self.prefix.isEmpty ? "" : "\(self.prefix) - ")\
  128|      0|      A failing scheduler scheduled an action to run later.
  129|      0|      """
  130|      0|    )
  131|      0|  }
  132|       |
  133|       |  public func schedule(
  134|       |    after _: SchedulerTimeType,
  135|       |    interval _: SchedulerTimeType.Stride,
  136|       |    tolerance _: SchedulerTimeType.Stride,
  137|       |    options _: SchedulerOptions?,
  138|       |    _ action: () -> Void
  139|      0|  ) -> Cancellable {
  140|      0|    XCTFail(
  141|      0|      """
  142|      0|      \(self.prefix.isEmpty ? "" : "\(self.prefix) - ")\
  143|      0|      A failing scheduler scheduled an action to run on a timer.
  144|      0|      """
  145|      0|    )
  146|      0|    return AnyCancellable {}
  147|      0|  }
  148|       |}
  149|       |
  150|       |extension DispatchQueue {
  151|       |  /// A failing scheduler that can substitute itself for a dispatch queue.
  152|      0|  public static var failing: FailingSchedulerOf<DispatchQueue> {
  153|      0|    Self.failing("DispatchQueue")
  154|      0|  }
  155|       |
  156|       |  /// A failing scheduler that can substitute itself for a dispatch queue.
  157|       |  ///
  158|       |  /// - Parameter prefix: A string that identifies this scheduler and will prefix all failure
  159|       |  ///   messages.
  160|       |  /// - Returns: A failing scheduler.
  161|      0|  public static func failing(_ prefix: String) -> FailingSchedulerOf<DispatchQueue> {
  162|      0|    // NB: `DispatchTime(uptimeNanoseconds: 0) == .now())`. Use `1` for consistency.
  163|      0|    .init(prefix, now: .init(.init(uptimeNanoseconds: 1)))
  164|      0|  }
  165|       |}
  166|       |
  167|       |extension OperationQueue {
  168|       |  /// A failing scheduler that can substitute itself for an operation queue.
  169|      0|  public static var failing: FailingSchedulerOf<OperationQueue> {
  170|      0|    Self.failing("OperationQueue")
  171|      0|  }
  172|       |
  173|       |  /// A failing scheduler that can substitute itself for an operation queue.
  174|       |  ///
  175|       |  /// - Parameter prefix: A string that identifies this scheduler and will prefix all failure
  176|       |  ///   messages.
  177|       |  /// - Returns: A failing scheduler.
  178|      0|  public static func failing(_ prefix: String) -> FailingSchedulerOf<OperationQueue> {
  179|      0|    .init(prefix, now: .init(.init(timeIntervalSince1970: 0)))
  180|      0|  }
  181|       |}
  182|       |
  183|       |extension RunLoop {
  184|       |  /// A failing scheduler that can substitute itself for a run loop.
  185|      0|  public static var failing: FailingSchedulerOf<RunLoop> {
  186|      0|    Self.failing("RunLoop")
  187|      0|  }
  188|       |
  189|       |  /// A failing scheduler that can substitute itself for a run loop.
  190|       |  ///
  191|       |  /// - Parameter prefix: A string that identifies this scheduler and will prefix all failure
  192|       |  ///   messages.
  193|       |  /// - Returns: A failing scheduler.
  194|      0|  public static func failing(_ prefix: String) -> FailingSchedulerOf<RunLoop> {
  195|      0|    .init(prefix, now: .init(.init(timeIntervalSince1970: 0)))
  196|      0|  }
  197|       |}
  198|       |
  199|       |extension AnyScheduler
  200|       |where
  201|       |  SchedulerTimeType == DispatchQueue.SchedulerTimeType,
  202|       |  SchedulerOptions == DispatchQueue.SchedulerOptions
  203|       |{
  204|       |  /// A failing scheduler that can substitute itself for a dispatch queue.
  205|      0|  public static var failing: Self {
  206|      0|    DispatchQueue.failing.eraseToAnyScheduler()
  207|      0|  }
  208|       |
  209|       |  /// A failing scheduler that can substitute itself for a dispatch queue.
  210|       |  ///
  211|       |  /// - Parameter prefix: A string that identifies this scheduler and will prefix all failure
  212|       |  ///   messages.
  213|       |  /// - Returns: A failing scheduler.
  214|      0|  public static func failing(_ prefix: String) -> Self {
  215|      0|    DispatchQueue.failing(prefix).eraseToAnyScheduler()
  216|      0|  }
  217|       |}
  218|       |
  219|       |extension AnyScheduler
  220|       |where
  221|       |  SchedulerTimeType == OperationQueue.SchedulerTimeType,
  222|       |  SchedulerOptions == OperationQueue.SchedulerOptions
  223|       |{
  224|       |  /// A failing scheduler that can substitute itself for an operation queue.
  225|      0|  public static var failing: Self {
  226|      0|    OperationQueue.failing.eraseToAnyScheduler()
  227|      0|  }
  228|       |
  229|       |  /// A failing scheduler that can substitute itself for an operation queue.
  230|       |  ///
  231|       |  /// - Parameter prefix: A string that identifies this scheduler and will prefix all failure
  232|       |  ///   messages.
  233|       |  /// - Returns: A failing scheduler.
  234|      0|  public static func failing(_ prefix: String) -> Self {
  235|      0|    OperationQueue.failing(prefix).eraseToAnyScheduler()
  236|      0|  }
  237|       |}
  238|       |
  239|       |extension AnyScheduler
  240|       |where
  241|       |  SchedulerTimeType == RunLoop.SchedulerTimeType,
  242|       |  SchedulerOptions == RunLoop.SchedulerOptions
  243|       |{
  244|       |  /// A failing scheduler that can substitute itself for a run loop.
  245|      0|  public static var failing: Self {
  246|      0|    RunLoop.failing.eraseToAnyScheduler()
  247|      0|  }
  248|       |
  249|       |  /// A failing scheduler that can substitute itself for a run loop.
  250|       |  ///
  251|       |  /// - Parameter prefix: A string that identifies this scheduler and will prefix all failure
  252|       |  ///   messages.
  253|       |  /// - Returns: A failing scheduler.
  254|      0|  public static func failing(_ prefix: String) -> Self {
  255|      0|    RunLoop.failing(prefix).eraseToAnyScheduler()
  256|      0|  }
  257|       |}
  258|       |
  259|       |/// A convenience type to specify a `FailingScheduler` by the scheduler it wraps rather than by
  260|       |/// the time type and options type.
  261|       |public typealias FailingSchedulerOf<Scheduler> = FailingScheduler<
  262|       |  Scheduler.SchedulerTimeType, Scheduler.SchedulerOptions
  263|       |> where Scheduler: Combine.Scheduler

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/combine-schedulers/Sources/CombineSchedulers/ImmediateScheduler.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |/// A scheduler for performing synchronous actions.
    5|       |///
    6|       |/// You can only use this scheduler for immediate actions. If you attempt to schedule actions
    7|       |/// after a specific date, this scheduler ignores the date and performs them immediately.
    8|       |///
    9|       |/// This scheduler is useful for writing tests against publishers that use asynchrony operators,
   10|       |/// such as `receive(on:)`, `subscribe(on:)` and others, because it forces the publisher to emit
   11|       |/// immediately rather than needing to wait for thread hops or delays using `XCTestExpectation`.
   12|       |///
   13|       |/// This scheduler is different from `TestScheduler` in that you cannot explicitly control how
   14|       |/// time flows through your publisher, but rather you are instantly collapsing time into a single
   15|       |/// point.
   16|       |///
   17|       |/// As a basic example, suppose you have a view model that loads some data after waiting for 10
   18|       |/// seconds from when a button is tapped:
   19|       |///
   20|       |///     class HomeViewModel: ObservableObject {
   21|       |///       @Published var episodes: [Episode]?
   22|       |///
   23|       |///       let apiClient: ApiClient
   24|       |///
   25|       |///       init(apiClient: ApiClient) {
   26|       |///         self.apiClient = apiClient
   27|       |///       }
   28|       |///
   29|       |///       func reloadButtonTapped() {
   30|       |///         Just(())
   31|       |///           .delay(for: .seconds(10), scheduler: DispachQueue.main)
   32|       |///           .flatMap { apiClient.fetchEpisodes() }
   33|       |///           .assign(to: &self.episodes)
   34|       |///       }
   35|       |///     }
   36|       |///
   37|       |/// In order to test this code you would literally need to wait 10 seconds for the publisher to
   38|       |/// emit:
   39|       |///
   40|       |///     func testViewModel() {
   41|       |///       let viewModel = HomeViewModel(apiClient: .mock)
   42|       |///
   43|       |///       viewModel.reloadButtonTapped()
   44|       |///
   45|       |///       _ = XCTWaiter.wait(for: [XCTestExpectation()], timeout: 10)
   46|       |///
   47|       |///       XCTAssert(viewModel.episodes, [Episode(id: 42)])
   48|       |///     }
   49|       |///
   50|       |/// Alternatively, we can explicitly pass a scheduler into the view model initializer so that it
   51|       |/// can be controller from the outside:
   52|       |///
   53|       |///     class HomeViewModel: ObservableObject {
   54|       |///       @Published var episodes: [Episode]?
   55|       |///
   56|       |///       let apiClient: ApiClient
   57|       |///       let scheduler: AnySchedulerOf<DispatchQueue>
   58|       |///
   59|       |///       init(apiClient: ApiClient, scheduler: AnySchedulerOf<DispatchQueue>) {
   60|       |///         self.apiClient = apiClient
   61|       |///         self.scheduler = scheduler
   62|       |///       }
   63|       |///
   64|       |///       func reloadButtonTapped() {
   65|       |///         Just(())
   66|       |///           .delay(for: .seconds(10), scheduler: self.scheduler)
   67|       |///           .flatMap { self.apiClient.fetchEpisodes() }
   68|       |///           .assign(to: &self.$episodes)
   69|       |///       }
   70|       |///     }
   71|       |///
   72|       |/// And then in tests use an immediate scheduler:
   73|       |///
   74|       |///     func testViewModel() {
   75|       |///       let viewModel = HomeViewModel(
   76|       |///         apiClient: .mock,
   77|       |///         scheduler: .immediate
   78|       |///       )
   79|       |///
   80|       |///       viewModel.reloadButtonTapped()
   81|       |///
   82|       |///       // No more waiting...
   83|       |///
   84|       |///       XCTAssert(viewModel.episodes, [Episode(id: 42)])
   85|       |///     }
   86|       |///
   87|       |/// - Note: This scheduler can _not_ be used to test publishers with more complex timing logic,
   88|       |///   like those that use `Debounce`, `Throttle`, or `Timer.Publisher`, and in fact
   89|       |///   `ImmediateScheduler` will not schedule this work in a defined way. Use a `TestScheduler`
   90|       |///   instead to capture your publisher's timing behavior.
   91|       |///
   92|       |public struct ImmediateScheduler<SchedulerTimeType, SchedulerOptions>: Scheduler
   93|       |where
   94|       |  SchedulerTimeType: Strideable,
   95|       |  SchedulerTimeType.Stride: SchedulerTimeIntervalConvertible
   96|       |{
   97|       |
   98|      0|  public let minimumTolerance: SchedulerTimeType.Stride = .zero
   99|       |  public let now: SchedulerTimeType
  100|       |
  101|       |  /// Creates an immediate test scheduler with the given date.
  102|       |  ///
  103|       |  /// - Parameter now: The current date of the test scheduler.
  104|      0|  public init(now: SchedulerTimeType) {
  105|      0|    self.now = now
  106|      0|  }
  107|       |
  108|      0|  public func schedule(options _: SchedulerOptions?, _ action: () -> Void) {
  109|      0|    action()
  110|      0|  }
  111|       |
  112|       |  public func schedule(
  113|       |    after _: SchedulerTimeType,
  114|       |    tolerance _: SchedulerTimeType.Stride,
  115|       |    options _: SchedulerOptions?,
  116|       |    _ action: () -> Void
  117|      0|  ) {
  118|      0|    action()
  119|      0|  }
  120|       |
  121|       |  public func schedule(
  122|       |    after _: SchedulerTimeType,
  123|       |    interval _: SchedulerTimeType.Stride,
  124|       |    tolerance _: SchedulerTimeType.Stride,
  125|       |    options _: SchedulerOptions?,
  126|       |    _ action: () -> Void
  127|      0|  ) -> Cancellable {
  128|      0|    action()
  129|      0|    return AnyCancellable {}
  130|      0|  }
  131|       |}
  132|       |
  133|       |extension DispatchQueue {
  134|       |  /// An immediate scheduler that can substitute itself for a dispatch queue.
  135|      0|  public static var immediate: ImmediateSchedulerOf<DispatchQueue> {
  136|      0|    // NB: `DispatchTime(uptimeNanoseconds: 0) == .now())`. Use `1` for consistency.
  137|      0|    .init(now: .init(.init(uptimeNanoseconds: 1)))
  138|      0|  }
  139|       |}
  140|       |
  141|       |extension OperationQueue {
  142|       |  /// An immediate scheduler that can substitute itself for an operation queue.
  143|      0|  public static var immediate: ImmediateSchedulerOf<OperationQueue> {
  144|      0|    .init(now: .init(.init(timeIntervalSince1970: 0)))
  145|      0|  }
  146|       |}
  147|       |
  148|       |extension RunLoop {
  149|       |  /// An immediate scheduler that can substitute itself for a run loop.
  150|      0|  public static var immediate: ImmediateSchedulerOf<RunLoop> {
  151|      0|    .init(now: .init(.init(timeIntervalSince1970: 0)))
  152|      0|  }
  153|       |}
  154|       |
  155|       |extension AnyScheduler
  156|       |where
  157|       |  SchedulerTimeType == DispatchQueue.SchedulerTimeType,
  158|       |  SchedulerOptions == DispatchQueue.SchedulerOptions
  159|       |{
  160|       |  /// An immediate scheduler that can substitute itself for a dispatch queue.
  161|      0|  public static var immediate: Self {
  162|      0|    DispatchQueue.immediate.eraseToAnyScheduler()
  163|      0|  }
  164|       |}
  165|       |
  166|       |extension AnyScheduler
  167|       |where
  168|       |  SchedulerTimeType == OperationQueue.SchedulerTimeType,
  169|       |  SchedulerOptions == OperationQueue.SchedulerOptions
  170|       |{
  171|       |  /// An immediate scheduler that can substitute itself for an operation queue.
  172|      0|  public static var immediate: Self {
  173|      0|    OperationQueue.immediate.eraseToAnyScheduler()
  174|      0|  }
  175|       |}
  176|       |
  177|       |extension AnyScheduler
  178|       |where
  179|       |  SchedulerTimeType == RunLoop.SchedulerTimeType,
  180|       |  SchedulerOptions == RunLoop.SchedulerOptions
  181|       |{
  182|       |  /// An immediate scheduler that can substitute itself for a run loop.
  183|      0|  public static var immediate: Self {
  184|      0|    RunLoop.immediate.eraseToAnyScheduler()
  185|      0|  }
  186|       |}
  187|       |
  188|       |/// A convenience type to specify an `ImmediateScheduler` by the scheduler it wraps rather than by
  189|       |/// the time type and options type.
  190|       |public typealias ImmediateSchedulerOf<Scheduler> = ImmediateScheduler<
  191|       |  Scheduler.SchedulerTimeType, Scheduler.SchedulerOptions
  192|       |> where Scheduler: Combine.Scheduler

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/combine-schedulers/Sources/CombineSchedulers/Internal/Deprecations.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |// NB: Deprecated after 0.4.1:
    5|       |
    6|       |extension Scheduler
    7|       |where
    8|       |  SchedulerTimeType == DispatchQueue.SchedulerTimeType,
    9|       |  SchedulerOptions == DispatchQueue.SchedulerOptions
   10|       |{
   11|       |  @available(*, deprecated, renamed: "immediate")
   12|      0|  public static var immediateScheduler: ImmediateSchedulerOf<Self> {
   13|      0|    // NB: `DispatchTime(uptimeNanoseconds: 0) == .now())`. Use `1` for consistency.
   14|      0|    ImmediateScheduler(now: SchedulerTimeType(DispatchTime(uptimeNanoseconds: 1)))
   15|      0|  }
   16|       |}
   17|       |
   18|       |extension Scheduler
   19|       |where
   20|       |  SchedulerTimeType == RunLoop.SchedulerTimeType,
   21|       |  SchedulerOptions == RunLoop.SchedulerOptions
   22|       |{
   23|       |  @available(*, deprecated, renamed: "immediate")
   24|      0|  public static var immediateScheduler: ImmediateSchedulerOf<Self> {
   25|      0|    ImmediateScheduler(now: SchedulerTimeType(Date(timeIntervalSince1970: 0)))
   26|      0|  }
   27|       |}
   28|       |
   29|       |extension Scheduler
   30|       |where
   31|       |  SchedulerTimeType == OperationQueue.SchedulerTimeType,
   32|       |  SchedulerOptions == OperationQueue.SchedulerOptions
   33|       |{
   34|       |  @available(*, deprecated, renamed: "immediate")
   35|      0|  public static var immediateScheduler: ImmediateSchedulerOf<Self> {
   36|      0|    ImmediateScheduler(now: SchedulerTimeType(Date(timeIntervalSince1970: 0)))
   37|      0|  }
   38|       |}
   39|       |
   40|       |extension Scheduler
   41|       |where
   42|       |  SchedulerTimeType == DispatchQueue.SchedulerTimeType,
   43|       |  SchedulerOptions == DispatchQueue.SchedulerOptions
   44|       |{
   45|       |  /// A test scheduler of dispatch queues.
   46|       |  @available(*, deprecated, renamed: "test")
   47|      0|  public static var testScheduler: TestSchedulerOf<Self> {
   48|      0|    // NB: `DispatchTime(uptimeNanoseconds: 0) == .now())`. Use `1` for consistency.
   49|      0|    TestScheduler(now: SchedulerTimeType(DispatchTime(uptimeNanoseconds: 1)))
   50|      0|  }
   51|       |}
   52|       |
   53|       |extension Scheduler
   54|       |where
   55|       |  SchedulerTimeType == OperationQueue.SchedulerTimeType,
   56|       |  SchedulerOptions == OperationQueue.SchedulerOptions
   57|       |{
   58|       |  /// A test scheduler of operation queues.
   59|       |  @available(*, deprecated, renamed: "test")
   60|      0|  public static var testScheduler: TestSchedulerOf<Self> {
   61|      0|    TestScheduler(now: SchedulerTimeType(Date(timeIntervalSince1970: 0)))
   62|      0|  }
   63|       |}
   64|       |
   65|       |extension Scheduler
   66|       |where
   67|       |  SchedulerTimeType == RunLoop.SchedulerTimeType,
   68|       |  SchedulerOptions == RunLoop.SchedulerOptions
   69|       |{
   70|       |  /// A test scheduler of run loops.
   71|       |  @available(*, deprecated, renamed: "test")
   72|      0|  public static var testScheduler: TestSchedulerOf<Self> {
   73|      0|    TestScheduler(now: SchedulerTimeType(Date(timeIntervalSince1970: 0)))
   74|      0|  }
   75|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/combine-schedulers/Sources/CombineSchedulers/Internal/Lock.swift:
    1|       |#if canImport(Darwin)
    2|       |  //===----------------------------------------------------------------------===//
    3|       |  //
    4|       |  // This source file is part of the Swift.org open source project
    5|       |  //
    6|       |  // Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
    7|       |  // Licensed under Apache License v2.0 with Runtime Library Exception
    8|       |  //
    9|       |  // See https://swift.org/LICENSE.txt for license information
   10|       |  // See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
   11|       |  //
   12|       |  //===----------------------------------------------------------------------===//
   13|       |
   14|       |  import Darwin
   15|       |
   16|       |  @available(macOS 10.12, iOS 10, tvOS 10, watchOS 3, *)
   17|       |  typealias Lock = os_unfair_lock_t
   18|       |
   19|       |  @available(macOS 10.12, iOS 10, tvOS 10, watchOS 3, *)
   20|       |  extension UnsafeMutablePointer where Pointee == os_unfair_lock_s {
   21|      0|    internal init() {
   22|      0|      let l = UnsafeMutablePointer.allocate(capacity: 1)
   23|      0|      l.initialize(to: os_unfair_lock())
   24|      0|      self = l
   25|      0|    }
   26|       |
   27|      0|    internal func cleanupLock() {
   28|      0|      deinitialize(count: 1)
   29|      0|      deallocate()
   30|      0|    }
   31|       |
   32|      0|    internal func lock() {
   33|      0|      os_unfair_lock_lock(self)
   34|      0|    }
   35|       |
   36|      0|    internal func tryLock() -> Bool {
   37|      0|      let result = os_unfair_lock_trylock(self)
   38|      0|      return result
   39|      0|    }
   40|       |
   41|      0|    internal func unlock() {
   42|      0|      os_unfair_lock_unlock(self)
   43|      0|    }
   44|       |  }
   45|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/combine-schedulers/Sources/CombineSchedulers/SwiftUI.swift:
    1|       |import Combine
    2|       |import SwiftUI
    3|       |
    4|       |extension Scheduler {
    5|       |  /// Specifies an animation to perform when an action is scheduled. This can be useful for times
    6|       |  /// that you cannot easily wrap state mutations in a `withAnimation` block.
    7|       |  ///
    8|       |  /// For example, if you load some asynchronous data in an `ObservableObject` and then
    9|       |  /// pipe its output into a `@Published` field, you may be tempted to use the `.assign(to:)`
   10|       |  /// operator:
   11|       |  ///
   12|       |  ///     class ViewModel: ObservableObject {
   13|       |  ///       @Published var articles: [Article] = []
   14|       |  ///
   15|       |  ///       init() {
   16|       |  ///         apiClient.loadArticles()
   17|       |  ///           .receive(on: DispatchQueue.main)
   18|       |  ///           .assign(to: &self.$articles)
   19|       |  ///       }
   20|       |  ///     }
   21|       |  ///
   22|       |  /// However, this prevents you from wrapping the `articles` mutation in `withAnimation` since
   23|       |  /// that is hidden from you in the `.assign(to:)` operator. In this situation you can simply
   24|       |  /// use the `.animation` operator on `Scheduler` to transform `DispatchQueue.main` into a
   25|       |  /// scheduler that performs its work inside `withAnimation`:
   26|       |  ///
   27|       |  ///     class ViewModel: ObservableObject {
   28|       |  ///       @Published var articles: [Article] = []
   29|       |  ///
   30|       |  ///       init() {
   31|       |  ///         apiClient.loadArticles()
   32|       |  ///           .receive(on: DispatchQueue.main.animation())
   33|       |  ///           .assign(to: &self.$articles)
   34|       |  ///       }
   35|       |  ///     }
   36|       |  ///
   37|       |  /// Another common use case is when you have a Combine publisher made up of many publishers
   38|       |  /// that have been merged or concatenated. You may want to animate the outputs of each of
   39|       |  /// those publishers differently:
   40|       |  ///
   41|       |  ///     class ViewModel: ObservableObject {
   42|       |  ///       @Published var articles: [Article] = []
   43|       |  ///
   44|       |  ///       init() {
   45|       |  ///         cachedArticles()
   46|       |  ///           // Don't animate cached articles when they load
   47|       |  ///           .receive(on: DispatchQueue.main.animation(nil))
   48|       |  ///           .append(
   49|       |  ///             apiClient.loadArticles()
   50|       |  ///               // Animate the fresh articles when they load
   51|       |  ///               .receive(on: DispatchQueue.main.animation())
   52|       |  ///           )
   53|       |  ///       }
   54|       |  ///     }
   55|       |  ///
   56|       |  /// - Parameter animation: An animation to be performed.
   57|       |  /// - Returns: A scheduler that performs an animation when a scheduled action is run.
   58|      0|  public func animation(_ animation: Animation? = .default) -> AnySchedulerOf<Self> {
   59|      0|    AnyScheduler(
   60|      0|      minimumTolerance: { self.minimumTolerance },
   61|      0|      now: { self.now },
   62|      0|      scheduleImmediately: { options, action in
   63|      0|        self.schedule(options: options) {
   64|      0|          withAnimation(animation, action)
   65|      0|        }
   66|      0|      },
   67|      0|      delayed: { date, tolerance, options, action in
   68|      0|        self.schedule(after: date, tolerance: tolerance, options: options) {
   69|      0|          withAnimation(animation, action)
   70|      0|        }
   71|      0|      },
   72|      0|      interval: { date, interval, tolerance, options, action in
   73|      0|        self.schedule(after: date, interval: interval, tolerance: tolerance, options: options) {
   74|      0|          withAnimation(animation, action)
   75|      0|        }
   76|      0|      }
   77|      0|    )
   78|      0|  }
   79|       |
   80|       |  /// Wraps scheduled actions in a transaction.
   81|       |  ///
   82|       |  /// - Parameter transaction: A transaction.
   83|       |  /// - Returns: A scheduler that wraps scheduled actions in a transaction.
   84|      0|  public func transaction(_ transaction: Transaction) -> AnySchedulerOf<Self> {
   85|      0|    AnyScheduler(
   86|      0|      minimumTolerance: { self.minimumTolerance },
   87|      0|      now: { self.now },
   88|      0|      scheduleImmediately: { options, action in
   89|      0|        self.schedule(options: options) {
   90|      0|          withTransaction(transaction, action)
   91|      0|        }
   92|      0|      },
   93|      0|      delayed: { date, tolerance, options, action in
   94|      0|        self.schedule(after: date, tolerance: tolerance, options: options) {
   95|      0|          withTransaction(transaction, action)
   96|      0|        }
   97|      0|      },
   98|      0|      interval: { date, interval, tolerance, options, action in
   99|      0|        self.schedule(after: date, interval: interval, tolerance: tolerance, options: options) {
  100|      0|          withTransaction(transaction, action)
  101|      0|        }
  102|      0|      }
  103|      0|    )
  104|      0|  }
  105|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/combine-schedulers/Sources/CombineSchedulers/TestScheduler.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |/// A scheduler whose current time and execution can be controlled in a deterministic manner.
    5|       |///
    6|       |/// This scheduler is useful for testing how the flow of time effects publishers that use
    7|       |/// asynchronous operators, such as `debounce`, `throttle`, `delay`, `timeout`, `receive(on:)`,
    8|       |/// `subscribe(on:)` and more.
    9|       |///
   10|       |/// For example, consider the following `race` operator that runs two futures in parallel, but
   11|       |/// only emits the first one that completes:
   12|       |///
   13|       |///     func race<Output, Failure: Error>(
   14|       |///       _ first: Future<Output, Failure>,
   15|       |///       _ second: Future<Output, Failure>
   16|       |///     ) -> AnyPublisher<Output, Failure> {
   17|       |///       first
   18|       |///         .merge(with: second)
   19|       |///         .prefix(1)
   20|       |///         .eraseToAnyPublisher()
   21|       |///     }
   22|       |///
   23|       |/// Although this publisher is quite simple we may still want to write some tests for it.
   24|       |///
   25|       |/// To do this we can create a test scheduler and create two futures, one that emits after a
   26|       |/// second and one that emits after two seconds:
   27|       |///
   28|       |///     let scheduler = DispatchQueue.test
   29|       |///     let first = Future<Int, Never> { callback in
   30|       |///       scheduler.schedule(after: scheduler.now.advanced(by: 1)) { callback(.success(1)) }
   31|       |///     }
   32|       |///     let second = Future<Int, Never> { callback in
   33|       |///       scheduler.schedule(after: scheduler.now.advanced(by: 2)) { callback(.success(2)) }
   34|       |///     }
   35|       |///
   36|       |/// And then we can race these futures and collect their emissions into an array:
   37|       |///
   38|       |///     var output: [Int] = []
   39|       |///     let cancellable = race(first, second).sink { output.append($0) }
   40|       |///
   41|       |/// And then we can deterministically move time forward in the scheduler to see how the publisher
   42|       |/// emits. We can start by moving time forward by one second:
   43|       |///
   44|       |///     scheduler.advance(by: 1)
   45|       |///     XCTAssertEqual(output, [1])
   46|       |///
   47|       |/// This proves that we get the first emission from the publisher since one second of time has
   48|       |/// passed. If we further advance by one more second we can prove that we do not get anymore
   49|       |/// emissions:
   50|       |///
   51|       |///     scheduler.advance(by: 1)
   52|       |///     XCTAssertEqual(output, [1])
   53|       |///
   54|       |/// This is a very simple example of how to control the flow of time with the test scheduler,
   55|       |/// but this technique can be used to test any publisher that involves Combine's asynchronous
   56|       |/// operations.
   57|       |///
   58|       |public final class TestScheduler<SchedulerTimeType, SchedulerOptions>: Scheduler
   59|       |where SchedulerTimeType: Strideable, SchedulerTimeType.Stride: SchedulerTimeIntervalConvertible {
   60|       |
   61|       |  private var lastSequence: UInt = 0
   62|      0|  public let minimumTolerance: SchedulerTimeType.Stride = .zero
   63|       |  public private(set) var now: SchedulerTimeType
   64|      0|  private var scheduled: [(sequence: UInt, date: SchedulerTimeType, action: () -> Void)] = []
   65|       |
   66|       |  /// Creates a test scheduler with the given date.
   67|       |  ///
   68|       |  /// - Parameter now: The current date of the test scheduler.
   69|      0|  public init(now: SchedulerTimeType) {
   70|      0|    self.now = now
   71|      0|  }
   72|       |
   73|       |  /// Advances the scheduler by the given stride.
   74|       |  ///
   75|       |  /// - Parameter stride: A stride. By default this argument is `.zero`, which does not advance the
   76|       |  ///   scheduler's time but does cause the scheduler to execute any units of work that are waiting
   77|       |  ///   to be performed for right now.
   78|      0|  public func advance(by stride: SchedulerTimeType.Stride = .zero) {
   79|      0|    let finalDate = self.now.advanced(by: stride)
   80|      0|
   81|      0|    while self.now <= finalDate {
   82|      0|      self.scheduled.sort { ($0.date, $0.sequence) < ($1.date, $1.sequence) }
   83|      0|
   84|      0|      guard
   85|      0|        let nextDate = self.scheduled.first?.date,
   86|      0|        finalDate >= nextDate
   87|      0|      else {
   88|      0|        self.now = finalDate
   89|      0|        return
   90|      0|      }
   91|      0|
   92|      0|      self.now = nextDate
   93|      0|
   94|      0|      while let (_, date, action) = self.scheduled.first, date == nextDate {
   95|      0|        self.scheduled.removeFirst()
   96|      0|        action()
   97|      0|      }
   98|      0|    }
   99|      0|  }
  100|       |
  101|       |  /// Runs the scheduler until it has no scheduled items left.
  102|       |  ///
  103|       |  /// This method is useful for proving exhaustively that your publisher eventually completes
  104|       |  /// and does not run forever. For example, the following code will run an infinite loop forever
  105|       |  /// because the timer never finishes:
  106|       |  ///
  107|       |  ///     let scheduler = DispatchQueue.test
  108|       |  ///     Publishers.Timer(every: .seconds(1), scheduler: scheduler)
  109|       |  ///       .autoconnect()
  110|       |  ///       .sink { _ in print($0) }
  111|       |  ///       .store(in: &cancellables)
  112|       |  ///
  113|       |  ///     scheduler.run() // Will never complete
  114|       |  ///
  115|       |  /// If you wanted to make sure that this publisher eventually completes you would need to
  116|       |  /// chain on another operator that completes it when a certain condition is met. This can be
  117|       |  /// done in many ways, such as using `prefix`:
  118|       |  ///
  119|       |  ///     let scheduler = DispatchQueue.test
  120|       |  ///     Publishers.Timer(every: .seconds(1), scheduler: scheduler)
  121|       |  ///       .autoconnect()
  122|       |  ///       .prefix(3)
  123|       |  ///       .sink { _ in print($0) }
  124|       |  ///       .store(in: &cancellables)
  125|       |  ///
  126|       |  ///     scheduler.run() // Prints 3 times and completes.
  127|       |  ///
  128|      0|  public func run() {
  129|      0|    while let date = self.scheduled.first?.date {
  130|      0|      self.advance(by: self.now.distance(to: date))
  131|      0|    }
  132|      0|  }
  133|       |
  134|       |  public func schedule(
  135|       |    after date: SchedulerTimeType,
  136|       |    interval: SchedulerTimeType.Stride,
  137|       |    tolerance _: SchedulerTimeType.Stride,
  138|       |    options _: SchedulerOptions?,
  139|       |    _ action: @escaping () -> Void
  140|      0|  ) -> Cancellable {
  141|      0|    let sequence = self.nextSequence()
  142|      0|
  143|      0|    func scheduleAction(for date: SchedulerTimeType) -> () -> Void {
  144|      0|      return { [weak self] in
  145|      0|        let nextDate = date.advanced(by: interval)
  146|      0|        self?.scheduled.append((sequence, nextDate, scheduleAction(for: nextDate)))
  147|      0|        action()
  148|      0|      }
  149|      0|    }
  150|      0|
  151|      0|    self.scheduled.append((sequence, date, scheduleAction(for: date)))
  152|      0|
  153|      0|    return AnyCancellable { [weak self] in
  154|      0|      self?.scheduled.removeAll(where: { $0.sequence == sequence })
  155|      0|    }
  156|      0|  }
  157|       |
  158|       |  public func schedule(
  159|       |    after date: SchedulerTimeType,
  160|       |    tolerance _: SchedulerTimeType.Stride,
  161|       |    options _: SchedulerOptions?,
  162|       |    _ action: @escaping () -> Void
  163|      0|  ) {
  164|      0|    self.scheduled.append((self.nextSequence(), date, action))
  165|      0|  }
  166|       |
  167|      0|  public func schedule(options _: SchedulerOptions?, _ action: @escaping () -> Void) {
  168|      0|    self.scheduled.append((self.nextSequence(), self.now, action))
  169|      0|  }
  170|       |
  171|      0|  private func nextSequence() -> UInt {
  172|      0|    self.lastSequence += 1
  173|      0|    return self.lastSequence
  174|      0|  }
  175|       |}
  176|       |
  177|       |extension DispatchQueue {
  178|       |  /// A test scheduler of dispatch queues.
  179|      0|  public static var test: TestSchedulerOf<DispatchQueue> {
  180|      0|    // NB: `DispatchTime(uptimeNanoseconds: 0) == .now())`. Use `1` for consistency.
  181|      0|    .init(now: .init(.init(uptimeNanoseconds: 1)))
  182|      0|  }
  183|       |}
  184|       |
  185|       |extension OperationQueue {
  186|       |  /// A test scheduler of operation queues.
  187|      0|  public static var test: TestSchedulerOf<OperationQueue> {
  188|      0|    .init(now: .init(.init(timeIntervalSince1970: 0)))
  189|      0|  }
  190|       |}
  191|       |
  192|       |extension RunLoop {
  193|       |  /// A test scheduler of run loops.
  194|      0|  public static var test: TestSchedulerOf<RunLoop> {
  195|      0|    .init(now: .init(.init(timeIntervalSince1970: 0)))
  196|      0|  }
  197|       |}
  198|       |
  199|       |/// A convenience type to specify a `TestScheduler` by the scheduler it wraps rather than by the
  200|       |/// time type and options type.
  201|       |public typealias TestSchedulerOf<Scheduler> = TestScheduler<
  202|       |  Scheduler.SchedulerTimeType, Scheduler.SchedulerOptions
  203|       |> where Scheduler: Combine.Scheduler

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/combine-schedulers/Sources/CombineSchedulers/Timer.swift:
    1|       |//===----------------------------------------------------------------------===//
    2|       |//
    3|       |// This source file is part of the Swift.org open source project
    4|       |//
    5|       |// Copyright (c) 2014 - 2019 Apple Inc. and the Swift project authors
    6|       |// Licensed under Apache License v2.0 with Runtime Library Exception
    7|       |//
    8|       |// See https://swift.org/LICENSE.txt for license information
    9|       |// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
   10|       |//
   11|       |//===----------------------------------------------------------------------===//
   12|       |
   13|       |// Only support 64bit
   14|       |#if !(os(iOS) && (arch(i386) || arch(arm))) && canImport(Combine)
   15|       |  @_exported import Foundation  // Clang module
   16|       |  import Combine
   17|       |  import Foundation
   18|       |
   19|       |  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
   20|       |  extension Scheduler {
   21|       |    /// Returns a publisher that repeatedly emits the scheduler's current time on the given
   22|       |    /// interval.
   23|       |    ///
   24|       |    /// - Parameters:
   25|       |    ///   - interval: The time interval on which to publish events. For example, a value of `0.5`
   26|       |    ///     publishes an event approximately every half-second.
   27|       |    ///   - tolerance: The allowed timing variance when emitting events. Defaults to `nil`, which
   28|       |    ///     allows any variance.
   29|       |    ///   - options: Scheduler options passed to the timer. Defaults to `nil`.
   30|       |    /// - Returns: A publisher that repeatedly emits the current date on the given interval.
   31|       |    public func timerPublisher(
   32|       |      every interval: SchedulerTimeType.Stride,
   33|       |      tolerance: SchedulerTimeType.Stride? = nil,
   34|       |      options: SchedulerOptions? = nil
   35|      0|    ) -> Publishers.Timer<Self> {
   36|      0|      Publishers.Timer(every: interval, tolerance: tolerance, scheduler: self, options: options)
   37|      0|    }
   38|       |  }
   39|       |
   40|       |  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
   41|       |  extension Publishers {
   42|       |    /// A publisher that emits a scheduler's current time on a repeating interval.
   43|       |    ///
   44|       |    /// This publisher is an alternative to Foundation's `Timer.publisher`, with its primary
   45|       |    /// difference being that it allows you to use any scheduler for the timer, not just `RunLoop`.
   46|       |    /// This is useful because the `RunLoop` scheduler is not testable in the sense that if you want
   47|       |    /// to write tests against a publisher that makes use of `Timer.publisher` you must explicitly
   48|       |    /// wait for time to pass in order to get emissions. This is likely to lead to fragile tests and
   49|       |    /// greatly bloat the time your tests take to execute.
   50|       |    ///
   51|       |    /// It can be used much like Foundation's timer, except you specify a scheduler rather than a
   52|       |    /// run loop:
   53|       |    ///
   54|       |    ///     Publishers.Timer(every: .seconds(1), scheduler: DispatchQueue.main)
   55|       |    ///       .autoconnect()
   56|       |    ///       .sink { print("Timer", $0) }
   57|       |    ///
   58|       |    /// But more importantly, you can use it with `TestScheduler` so that any Combine code you write
   59|       |    /// involving timers becomes more testable. This shows how we can easily simulate the idea of
   60|       |    /// moving time forward 1,000 seconds in a timer:
   61|       |    ///
   62|       |    ///     let scheduler = DispatchQueue.test
   63|       |    ///     var output: [Int] = []
   64|       |    ///
   65|       |    ///     Publishers.Timer(every: 1, scheduler: scheduler)
   66|       |    ///       .autoconnect()
   67|       |    ///       .sink { _ in output.append(output.count) }
   68|       |    ///       .store(in: &self.cancellables)
   69|       |    ///
   70|       |    ///     XCTAssertEqual(output, [])
   71|       |    ///
   72|       |    ///     scheduler.advance(by: 1)
   73|       |    ///     XCTAssertEqual(output, [0])
   74|       |    ///
   75|       |    ///     scheduler.advance(by: 1)
   76|       |    ///     XCTAssertEqual(output, [0, 1])
   77|       |    ///
   78|       |    ///     scheduler.advance(by: 1_000)
   79|       |    ///     XCTAssertEqual(output, Array(0...1_001))
   80|       |    ///
   81|       |    public final class Timer<S: Scheduler>: ConnectablePublisher {
   82|       |      public typealias Output = S.SchedulerTimeType
   83|       |      public typealias Failure = Never
   84|       |
   85|       |      public let interval: S.SchedulerTimeType.Stride
   86|       |      public let options: S.SchedulerOptions?
   87|       |      public let scheduler: S
   88|       |      public let tolerance: S.SchedulerTimeType.Stride?
   89|       |
   90|      0|      private lazy var routingSubscription: RoutingSubscription = {
   91|      0|        return RoutingSubscription(parent: self)
   92|      0|      }()
   93|       |
   94|       |      // Stores if a `.connect()` happened before subscription, internally readable for tests
   95|      0|      internal var isConnected: Bool {
   96|      0|        return routingSubscription.isConnected
   97|      0|      }
   98|       |
   99|       |      public init(
  100|       |        every interval: S.SchedulerTimeType.Stride,
  101|       |        tolerance: S.SchedulerTimeType.Stride? = nil,
  102|       |        scheduler: S,
  103|       |        options: S.SchedulerOptions? = nil
  104|      0|      ) {
  105|      0|        self.interval = interval
  106|      0|        self.options = options
  107|      0|        self.scheduler = scheduler
  108|      0|        self.tolerance = tolerance
  109|      0|      }
  110|       |
  111|       |      /// Adapter subscription to allow `Timer` to multiplex to multiple subscribers
  112|       |      /// the values produced by a single `TimerPublisher.Inner`
  113|       |      private class RoutingSubscription: Subscription, Subscriber, CustomStringConvertible,
  114|       |        CustomReflectable, CustomPlaygroundDisplayConvertible
  115|       |      {
  116|       |        typealias Input = S.SchedulerTimeType
  117|       |        typealias Failure = Never
  118|       |
  119|       |        private typealias ErasedSubscriber = AnySubscriber<Output, Failure>
  120|       |
  121|       |        private let lock: Lock
  122|       |
  123|       |        // Inner is IUP due to init requirements
  124|       |        private var inner: Inner<RoutingSubscription>!
  125|      0|        private var subscribers: [ErasedSubscriber] = []
  126|       |
  127|       |        private var _lockedIsConnected = false
  128|       |        var isConnected: Bool {
  129|      0|          get {
  130|      0|            lock.lock()
  131|      0|            defer { lock.unlock() }
  132|      0|            return _lockedIsConnected
  133|      0|          }
  134|       |
  135|      0|          set {
  136|      0|            lock.lock()
  137|      0|            let oldValue = _lockedIsConnected
  138|      0|            _lockedIsConnected = newValue
  139|      0|
  140|      0|            // Inner will always be non-nil
  141|      0|            let inner = self.inner!
  142|      0|            lock.unlock()
  143|      0|
  144|      0|            guard newValue, !oldValue else {
  145|      0|              return
  146|      0|            }
  147|      0|            inner.enqueue()
  148|      0|          }
  149|       |        }
  150|       |
  151|      0|        var description: String { return "Timer" }
  152|      0|        var customMirror: Mirror { return inner.customMirror }
  153|      0|        var playgroundDescription: Any { return description }
  154|      0|        var combineIdentifier: CombineIdentifier { return inner.combineIdentifier }
  155|       |
  156|      0|        init(parent: Publishers.Timer<S>) {
  157|      0|          self.lock = Lock()
  158|      0|          self.inner = .init(parent, self)
  159|      0|        }
  160|       |
  161|      0|        deinit {
  162|      0|          lock.cleanupLock()
  163|      0|        }
  164|       |
  165|       |        func addSubscriber<S: Subscriber>(_ sub: S)
  166|       |        where
  167|       |          S.Failure == Failure,
  168|       |          S.Input == Output
  169|      0|        {
  170|      0|          lock.lock()
  171|      0|          subscribers.append(AnySubscriber(sub))
  172|      0|          lock.unlock()
  173|      0|
  174|      0|          sub.receive(subscription: self)
  175|      0|        }
  176|       |
  177|      0|        func receive(subscription: Subscription) {
  178|      0|          lock.lock()
  179|      0|          let subscribers = self.subscribers
  180|      0|          lock.unlock()
  181|      0|
  182|      0|          for sub in subscribers {
  183|      0|            sub.receive(subscription: subscription)
  184|      0|          }
  185|      0|        }
  186|       |
  187|      0|        func receive(_ value: Input) -> Subscribers.Demand {
  188|      0|          var resultingDemand: Subscribers.Demand = .max(0)
  189|      0|          lock.lock()
  190|      0|          let subscribers = self.subscribers
  191|      0|          let isConnected = _lockedIsConnected
  192|      0|          lock.unlock()
  193|      0|
  194|      0|          guard isConnected else { return .none }
  195|      0|
  196|      0|          for sub in subscribers {
  197|      0|            resultingDemand += sub.receive(value)
  198|      0|          }
  199|      0|          return resultingDemand
  200|      0|        }
  201|       |
  202|      0|        func receive(completion: Subscribers.Completion<Failure>) {
  203|      0|          lock.lock()
  204|      0|          let subscribers = self.subscribers
  205|      0|          lock.unlock()
  206|      0|
  207|      0|          for sub in subscribers {
  208|      0|            sub.receive(completion: completion)
  209|      0|          }
  210|      0|        }
  211|       |
  212|      0|        func request(_ demand: Subscribers.Demand) {
  213|      0|          lock.lock()
  214|      0|          // Inner will always be non-nil
  215|      0|          let inner = self.inner!
  216|      0|          lock.unlock()
  217|      0|
  218|      0|          inner.request(demand)
  219|      0|        }
  220|       |
  221|      0|        func cancel() {
  222|      0|          lock.lock()
  223|      0|          // Inner will always be non-nil
  224|      0|          let inner = self.inner!
  225|      0|          _lockedIsConnected = false
  226|      0|          self.subscribers = []
  227|      0|          lock.unlock()
  228|      0|
  229|      0|          inner.cancel()
  230|      0|        }
  231|       |      }
  232|       |
  233|       |      public func receive<S: Subscriber>(subscriber: S)
  234|      0|      where Failure == S.Failure, Output == S.Input {
  235|      0|        routingSubscription.addSubscriber(subscriber)
  236|      0|      }
  237|       |
  238|      0|      public func connect() -> Cancellable {
  239|      0|        routingSubscription.isConnected = true
  240|      0|        return routingSubscription
  241|      0|      }
  242|       |
  243|       |      private typealias Parent = Publishers.Timer
  244|       |      private final class Inner<Downstream: Subscriber>: NSObject, Subscription, CustomReflectable,
  245|       |        CustomPlaygroundDisplayConvertible
  246|       |      where
  247|       |        Downstream.Input == S.SchedulerTimeType,
  248|       |        Downstream.Failure == Never
  249|       |      {
  250|       |        private var cancellable: Cancellable?
  251|       |        private let lock: Lock
  252|       |        private var downstream: Downstream?
  253|       |        private var parent: Parent<S>?
  254|       |        private var started: Bool
  255|       |        private var demand: Subscribers.Demand
  256|       |
  257|      0|        override var description: String { return "Timer" }
  258|      0|        var customMirror: Mirror {
  259|      0|          lock.lock()
  260|      0|          defer { lock.unlock() }
  261|      0|          return Mirror(
  262|      0|            self,
  263|      0|            children: [
  264|      0|              "downstream": downstream as Any,
  265|      0|              "interval": parent?.interval as Any,
  266|      0|              "tolerance": parent?.tolerance as Any,
  267|      0|            ])
  268|      0|        }
  269|      0|        var playgroundDescription: Any { return description }
  270|       |
  271|      0|        init(_ parent: Parent<S>, _ downstream: Downstream) {
  272|      0|          self.lock = Lock()
  273|      0|          self.parent = parent
  274|      0|          self.downstream = downstream
  275|      0|          self.started = false
  276|      0|          self.demand = .max(0)
  277|      0|          super.init()
  278|      0|        }
  279|       |
  280|      0|        deinit {
  281|      0|          lock.cleanupLock()
  282|      0|        }
  283|       |
  284|      0|        func enqueue() {
  285|      0|          lock.lock()
  286|      0|          guard let parent = self.parent, !started else {
  287|      0|            lock.unlock()
  288|      0|            return
  289|      0|          }
  290|      0|
  291|      0|          started = true
  292|      0|          lock.unlock()
  293|      0|
  294|      0|          self.cancellable = parent.scheduler.schedule(
  295|      0|            after: parent.scheduler.now.advanced(by: parent.interval),
  296|      0|            interval: parent.interval,
  297|      0|            tolerance: parent.tolerance ?? .zero,
  298|      0|            options: parent.options
  299|      0|          ) {
  300|      0|            self.timerFired()
  301|      0|          }
  302|      0|        }
  303|       |
  304|      0|        func cancel() {
  305|      0|          lock.lock()
  306|      0|          guard let t = self.cancellable else {
  307|      0|            lock.unlock()
  308|      0|            return
  309|      0|          }
  310|      0|
  311|      0|          // clear out all optionals
  312|      0|          downstream = nil
  313|      0|          parent = nil
  314|      0|          started = false
  315|      0|          demand = .max(0)
  316|      0|          lock.unlock()
  317|      0|
  318|      0|          // cancel the timer
  319|      0|          t.cancel()
  320|      0|        }
  321|       |
  322|      0|        func request(_ n: Subscribers.Demand) {
  323|      0|          lock.lock()
  324|      0|          defer { lock.unlock() }
  325|      0|          guard parent != nil else {
  326|      0|            return
  327|      0|          }
  328|      0|          demand += n
  329|      0|        }
  330|       |
  331|       |        @objc
  332|      0|        func timerFired() {
  333|      0|          lock.lock()
  334|      0|          guard let ds = downstream, let parent = self.parent else {
  335|      0|            lock.unlock()
  336|      0|            return
  337|      0|          }
  338|      0|
  339|      0|          // This publisher drops events on the floor when there is no space in the subscriber
  340|      0|          guard demand > 0 else {
  341|      0|            lock.unlock()
  342|      0|            return
  343|      0|          }
  344|      0|
  345|      0|          demand -= 1
  346|      0|          lock.unlock()
  347|      0|
  348|      0|          let extra = ds.receive(parent.scheduler.now)
  349|      0|          guard extra > 0 else {
  350|      0|            return
  351|      0|          }
  352|      0|
  353|      0|          lock.lock()
  354|      0|          demand += extra
  355|      0|          lock.unlock()
  356|      0|        }
  357|       |      }
  358|       |    }
  359|       |  }
  360|       |
  361|       |#endif /* !(os(iOS) && (arch(i386) || arch(arm))) */

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/combine-schedulers/Sources/CombineSchedulers/UIScheduler.swift:
    1|       |#if canImport(Combine)
    2|       |  import Combine
    3|       |  import Dispatch
    4|       |
    5|       |  /// A scheduler that executes its work on the main queue as soon as possible.
    6|       |  ///
    7|       |  /// This scheduler is inspired by the
    8|       |  /// [equivalent](https://github.com/ReactiveCocoa/ReactiveSwift/blob/58d92aa01081301549c48a4049e215210f650d07/Sources/Scheduler.swift#L92)
    9|       |  /// scheduler in the [ReactiveSwift](https://github.com/ReactiveCocoa/ReactiveSwift) project.
   10|       |  ///
   11|       |  /// If `UIScheduler.shared.schedule` is invoked from the main thread then the unit of work will be
   12|       |  /// performed immediately. This is in contrast to `DispatchQueue.main.schedule`, which will incur
   13|       |  /// a thread hop before executing since it uses `DispatchQueue.main.async` under the hood.
   14|       |  ///
   15|       |  /// This scheduler can be useful for situations where you need work executed as quickly as
   16|       |  /// possible on the main thread, and for which a thread hop would be problematic, such as when
   17|       |  /// performing animations.
   18|       |  public struct UIScheduler: Scheduler {
   19|       |    public typealias SchedulerOptions = Never
   20|       |    public typealias SchedulerTimeType = DispatchQueue.SchedulerTimeType
   21|       |
   22|       |    /// The shared instance of the UI scheduler.
   23|       |    ///
   24|       |    /// You cannot create instances of the UI scheduler yourself. Use only the shared instance.
   25|       |    public static let shared = Self()
   26|       |
   27|      0|    public var now: SchedulerTimeType { DispatchQueue.main.now }
   28|      0|    public var minimumTolerance: SchedulerTimeType.Stride { DispatchQueue.main.minimumTolerance }
   29|       |
   30|      4|    public func schedule(options: SchedulerOptions? = nil, _ action: @escaping () -> Void) {
   31|      4|      if DispatchQueue.getSpecific(key: key) == value {
   32|      4|        action()
   33|      4|      } else {
   34|      0|        DispatchQueue.main.schedule(action)
   35|      4|      }
   36|      4|    }
   37|       |
   38|       |    public func schedule(
   39|       |      after date: SchedulerTimeType,
   40|       |      tolerance: SchedulerTimeType.Stride,
   41|       |      options: SchedulerOptions? = nil,
   42|       |      _ action: @escaping () -> Void
   43|      0|    ) {
   44|      0|      DispatchQueue.main.schedule(after: date, tolerance: tolerance, options: nil, action)
   45|      0|    }
   46|       |
   47|       |    public func schedule(
   48|       |      after date: SchedulerTimeType,
   49|       |      interval: SchedulerTimeType.Stride,
   50|       |      tolerance: SchedulerTimeType.Stride,
   51|       |      options: SchedulerOptions? = nil,
   52|       |      _ action: @escaping () -> Void
   53|      0|    ) -> Cancellable {
   54|      0|      DispatchQueue.main.schedule(
   55|      0|        after: date, interval: interval, tolerance: tolerance, options: nil, action
   56|      0|      )
   57|      0|    }
   58|       |
   59|      2|    private init() { _ = setSpecific }
   60|       |  }
   61|       |
   62|       |  private let key = DispatchSpecificKey<UInt8>()
   63|       |  private let value: UInt8 = 0
   64|      2|  private var setSpecific: () = { DispatchQueue.main.setSpecific(key: key, value: value) }()
   65|       |#endif

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/API/Markdown.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |///
    8|       |/// A parsed Markdown value, which contains its rendered
    9|       |/// HTML representation, as well as any metadata found at
   10|       |/// the top of the Markdown document.
   11|       |///
   12|       |/// You create instances of this type by parsing Markdown
   13|       |/// strings using `MarkdownParser`.
   14|       |public struct Markdown {
   15|       |    /// The HTML representation of the Markdown, ready to
   16|       |    /// be rendered in a web browser.
   17|       |    public var html: String
   18|       |    /// The inferred title of the document, from any top-level
   19|       |    /// heading found when parsing. If the Markdown text contained
   20|       |    /// two top-level headings, then this property will contain
   21|       |    /// the first one. Note that this property does not take modifiers
   22|       |    /// into acccount.
   23|       |    public var title: String? {
   24|      0|        get { makeTitle() }
   25|      0|        set { overrideTitle(with: newValue) }
   26|       |    }
   27|       |    /// Any metadata values found at the top of the Markdown
   28|       |    /// document. See this project's README for more information.
   29|       |    public var metadata: [String : String]
   30|       |
   31|       |    private let titleHeading: Heading?
   32|     72|    private var titleStorage = TitleStorage()
   33|       |
   34|       |    internal init(html: String,
   35|       |                  titleHeading: Heading?,
   36|     72|                  metadata: [String : String]) {
   37|     72|        self.html = html
   38|     72|        self.titleHeading = titleHeading
   39|     72|        self.metadata = metadata
   40|     72|    }
   41|       |}
   42|       |
   43|       |private extension Markdown {
   44|       |    final class TitleStorage {
   45|       |        var title: String?
   46|       |    }
   47|       |
   48|      0|    mutating func overrideTitle(with title: String?) {
   49|      0|        let storage = TitleStorage()
   50|      0|        storage.title = title
   51|      0|        titleStorage = storage
   52|      0|    }
   53|       |
   54|      0|    func makeTitle() -> String? {
   55|      0|        if let stored = titleStorage.title { return stored }
   56|      0|        titleStorage.title = titleHeading?.plainText()
   57|      0|        return titleStorage.title
   58|      0|    }
   59|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/API/MarkdownParser.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |///
    8|       |/// A parser used to convert Markdown text into HTML.
    9|       |///
   10|       |/// You can use an instance of this type to either convert
   11|       |/// a Markdown string into an HTML string, or into a `Markdown`
   12|       |/// value, which also contains any metadata values found in
   13|       |/// the parsed Markdown text.
   14|       |///
   15|       |/// To customize how this parser performs its work, attach
   16|       |/// a `Modifier` using the `addModifier` method.
   17|       |public struct MarkdownParser {
   18|       |    private var modifiers: ModifierCollection
   19|       |
   20|       |    /// Initialize an instance, optionally passing an array
   21|       |    /// of modifiers used to customize the parsing process.
   22|     72|    public init(modifiers: [Modifier] = []) {
   23|     72|        self.modifiers = ModifierCollection(modifiers: modifiers)
   24|     72|    }
   25|       |
   26|       |    /// Add a modifier to this parser, which can be used to
   27|       |    /// customize the parsing process. See `Modifier` for more info.
   28|      0|    public mutating func addModifier(_ modifier: Modifier) {
   29|      0|        modifiers.insert(modifier)
   30|      0|    }
   31|       |
   32|       |    /// Convert a Markdown string into HTML, discarding any metadata
   33|       |    /// found in the process. To preserve the Markdown's metadata,
   34|       |    /// use the `parse` method instead.
   35|     72|    public func html(from markdown: String) -> String {
   36|     72|        parse(markdown).html
   37|     72|    }
   38|       |
   39|       |    /// Parse a Markdown string into a `Markdown` value, which contains
   40|       |    /// both the HTML representation of the given string, and also any
   41|       |    /// metadata values found within it.
   42|     72|    public func parse(_ markdown: String) -> Markdown {
   43|     72|        var reader = Reader(string: markdown)
   44|     72|        var fragments = [ParsedFragment]()
   45|     72|        var urlsByName = [String : URL]()
   46|     72|        var titleHeading: Heading?
   47|     72|        var metadata: Metadata?
   48|     72|
   49|  1.58k|        while !reader.didReachEnd {
   50|  1.53k|            reader.discardWhitespacesAndNewlines()
   51|  1.53k|            guard !reader.didReachEnd else { break }
   52|  1.49k|
   53|  1.49k|            do {
   54|  1.49k|                if metadata == nil, fragments.isEmpty, reader.currentCharacter == "-" {
   55|      0|                    if let parsedMetadata = try? Metadata.readOrRewind(using: &reader) {
   56|      0|                        metadata = parsedMetadata.applyingModifiers(modifiers)
   57|      0|                        continue
   58|      0|                    }
   59|  1.49k|                }
   60|  1.49k|
   61|  1.49k|                guard reader.currentCharacter != "[" else {
   62|     16|                    let declaration = try URLDeclaration.readOrRewind(using: &reader)
   63|     16|                    urlsByName[declaration.name] = declaration.url
   64|     16|                    continue
   65|  1.47k|                }
   66|  1.47k|
   67|  1.47k|                let type = fragmentType(for: reader.currentCharacter,
   68|  1.47k|                                        nextCharacter: reader.nextCharacter)
   69|  1.47k|
   70|  1.47k|                #if swift(>=5.3) && swift(<5.4) && os(Linux)
   71|  1.47k|                // inline function call to work around https://bugs.swift.org/browse/SR-13645
   72|  1.47k|                let fragment: ParsedFragment = try {
   73|  1.47k|                    let startIndex = reader.currentIndex
   74|  1.47k|                    let fragment = try type.readOrRewind(using: &reader)
   75|  1.47k|                    let rawString = reader.characters(in: startIndex..<reader.currentIndex)
   76|  1.47k|                    return ParsedFragment(fragment: fragment, rawString: rawString)
   77|  1.47k|                }()
   78|  1.47k|                #else
   79|  2.95k|                let fragment = try makeFragment(using: type.readOrRewind, reader: &reader)
  ------------------
  | $s3Ink14MarkdownParserV5parseyAA0B0VSSFAA15HTMLConvertible_AA10ModifiableAA20PlainTextConvertibleAA8ReadablepAA6ReaderVzKcAaG_AahaiaJpXpcfu_:
  |   79|  1.47k|                let fragment = try makeFragment(using: type.readOrRewind, reader: &reader)
  ------------------
  | $s3Ink14MarkdownParserV5parseyAA0B0VSSFAA15HTMLConvertible_AA10ModifiableAA20PlainTextConvertibleAA8ReadablepAA6ReaderVzKcAaG_AahaiaJpXpcfu_AaG_AahaiaJpALzKcfu0_:
  |   79|  1.47k|                let fragment = try makeFragment(using: type.readOrRewind, reader: &reader)
  ------------------
   80|  1.47k|                #endif
   81|  1.47k|                fragments.append(fragment)
   82|  1.47k|
   83|  1.47k|                if titleHeading == nil, let heading = fragment.fragment as? Heading {
   84|      0|                    if heading.level == 1 {
   85|      0|                        titleHeading = heading
   86|      0|                    }
   87|  1.47k|                }
   88|  1.47k|            } catch {
   89|  1.00k|                let paragraph = makeFragment(using: Paragraph.read, reader: &reader)
  ------------------
  | $s3Ink14MarkdownParserV5parseyAA0B0VSSFAA9ParagraphVAA6ReaderVzcAHmcfu1_:
  |   89|    500|                let paragraph = makeFragment(using: Paragraph.read, reader: &reader)
  ------------------
  | $s3Ink14MarkdownParserV5parseyAA0B0VSSFAA9ParagraphVAA6ReaderVzcAHmcfu1_AhJzcfu2_:
  |   89|    500|                let paragraph = makeFragment(using: Paragraph.read, reader: &reader)
  ------------------
   90|    500|                fragments.append(paragraph)
   91|  1.49k|            }
   92|  1.49k|        }
   93|     88|
   94|     88|        let urls = NamedURLCollection(urlsByName: urlsByName)
   95|     88|
   96|  1.49k|        let html = fragments.reduce(into: "") { result, wrapper in
   97|  1.49k|            let html = wrapper.fragment.html(
   98|  1.49k|                usingURLs: urls,
   99|  1.49k|                rawString: wrapper.rawString,
  100|  1.49k|                applyingModifiers: modifiers
  101|  1.49k|            )
  102|  1.49k|
  103|  1.49k|            result.append(html)
  104|  1.49k|        }
  105|     88|
  106|     88|        return Markdown(
  107|     88|            html: html,
  108|     88|            titleHeading: titleHeading,
  109|     88|            metadata: metadata?.values ?? [:]
  110|     88|        )
  111|     72|    }
  112|       |}
  113|       |
  114|       |private extension MarkdownParser {
  115|       |    struct ParsedFragment {
  116|       |        var fragment: Fragment
  117|       |        var rawString: Substring
  118|       |    }
  119|       |
  120|       |    func makeFragment(using closure: (inout Reader) throws -> Fragment,
  121|  1.97k|                      reader: inout Reader) rethrows -> ParsedFragment {
  122|  1.97k|        let startIndex = reader.currentIndex
  123|  1.97k|        let fragment = try closure(&reader)
  124|  1.97k|        let rawString = reader.characters(in: startIndex..<reader.currentIndex)
  125|  1.97k|        return ParsedFragment(fragment: fragment, rawString: rawString)
  126|  1.97k|    }
  127|       |
  128|       |    func fragmentType(for character: Character,
  129|  1.47k|                      nextCharacter: Character?) -> Fragment.Type {
  130|  1.47k|        switch character {
  131|  1.47k|        case "#": return Heading.self
  132|  1.47k|        case "!": return Image.self
  133|  1.47k|        case "<": return HTML.self
  134|  1.47k|        case ">": return Blockquote.self
  135|  1.47k|        case "`": return CodeBlock.self
  136|  1.47k|        case "-" where character == nextCharacter,
  137|      0|             "*" where character == nextCharacter:
  138|      0|            return HorizontalLine.self
  139|  1.47k|        case "-", "*", "+", \.isNumber: return List.self
  140|  1.47k|        case "|": return Table.self
  141|  1.47k|        default: return Paragraph.self
  142|  1.47k|        }
  143|  1.47k|    }
  144|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/API/Modifier.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |///
    8|       |/// Modifiers can be attached to a `MarkdownParser` and are used
    9|       |/// to customize Ink's parsing process. Each modifier is associated
   10|       |/// with a given `Target`, which determines which type of Markdown
   11|       |/// fragments that it is capable of modifying.
   12|       |///
   13|       |/// You can use a `Modifier` to adjust the HTML that was generated
   14|       |/// for a given fragment, or to inject completely custom HTML based
   15|       |/// on the fragment's raw Markdown representation.
   16|       |public struct Modifier {
   17|       |    /// The type of input that each modifier is given, which both
   18|       |    /// contains the HTML that was generated for a fragment, and
   19|       |    /// its raw Markdown representation. Note that for metadata
   20|       |    /// targets, the two input arguments will be equivalent.
   21|       |    public typealias Input = (html: String, markdown: Substring)
   22|       |    /// The type of closure that Modifiers are based on. Each
   23|       |    /// modifier is given a set of input, and is expected to return
   24|       |    /// an HTML string after performing its modifications.
   25|       |    public typealias Closure = (Input) -> String
   26|       |
   27|       |    /// The modifier's target, that defines what kind of fragment
   28|       |    /// that it's used to modify. See `Target` for more info.
   29|       |    public var target: Target
   30|       |    /// The closure that makes up the modifier's body.
   31|       |    public var closure: Closure
   32|       |
   33|       |    /// Initialize an instance with the kind of target that the modifier
   34|       |    /// should be used on, and a closure that makes up its body.
   35|      0|    public init(target: Target, closure: @escaping Closure) {
   36|      0|        self.target = target
   37|      0|        self.closure = closure
   38|      0|    }
   39|       |}
   40|       |
   41|       |public extension Modifier {
   42|       |    enum Target {
   43|       |        case metadataKeys
   44|       |        case metadataValues
   45|       |        case blockquotes
   46|       |        case codeBlocks
   47|       |        case headings
   48|       |        case horizontalLines
   49|       |        case html
   50|       |        case images
   51|       |        case inlineCode
   52|       |        case links
   53|       |        case lists
   54|       |        case paragraphs
   55|       |        case tables
   56|       |    }
   57|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/Blockquote.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct Blockquote: Fragment {
    8|      0|    var modifierTarget: Modifier.Target { .blockquotes }
    9|       |
   10|       |    private var text: FormattedText
   11|       |
   12|      0|    static func read(using reader: inout Reader) throws -> Blockquote {
   13|      0|        try reader.read(">")
   14|      0|        try reader.readWhitespaces()
   15|      0|
   16|      0|        var text = FormattedText.readLine(using: &reader)
   17|      0|
   18|      0|        while !reader.didReachEnd {
   19|      0|            switch reader.currentCharacter {
   20|      0|            case \.isNewline:
   21|      0|                return Blockquote(text: text)
   22|      0|            case ">":
   23|      0|                reader.advanceIndex()
   24|      0|            default:
   25|      0|                break
   26|      0|            }
   27|      0|
   28|      0|            text.append(FormattedText.readLine(using: &reader))
   29|      0|        }
   30|      0|
   31|      0|        return Blockquote(text: text)
   32|      0|    }
   33|       |
   34|       |    func html(usingURLs urls: NamedURLCollection,
   35|      0|              modifiers: ModifierCollection) -> String {
   36|      0|        let body = text.html(usingURLs: urls, modifiers: modifiers)
   37|      0|        return "<blockquote><p>\(body)</p></blockquote>"
   38|      0|    }
   39|       |
   40|      0|    func plainText() -> String {
   41|      0|        text.plainText()
   42|      0|    }
   43|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/Character+Classification.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal extension Character {
    8|   261k|    var isSameLineWhitespace: Bool {
    9|   261k|        isWhitespace && !isNewline
   10|   261k|    }
   11|       |}
   12|       |
   13|       |internal extension Set where Element == Character {
   14|       |    static let boldItalicStyleMarkers: Self = ["*", "_"]
   15|       |    static let allStyleMarkers: Self = boldItalicStyleMarkers.union(["~"])
   16|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/Character+Escaping.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal extension Character {
    8|   326k|    var escaped: String? {
    9|   326k|        switch self {
   10|   326k|        case ">": return "&gt;"
   11|   326k|        case "<": return "&lt;"
   12|   326k|        case "&": return "&amp;"
   13|   326k|        default: return nil
   14|   326k|        }
   15|   326k|    }
   16|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/CodeBlock.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct CodeBlock: Fragment {
    8|     54|    var modifierTarget: Modifier.Target { .codeBlocks }
    9|       |
   10|       |    private static let marker: Character = "`"
   11|       |
   12|       |    private var language: Substring
   13|       |    private var code: String
   14|       |
   15|     54|    static func read(using reader: inout Reader) throws -> CodeBlock {
   16|     54|        let startingMarkerCount = reader.readCount(of: marker)
   17|     54|        try require(startingMarkerCount >= 3)
   18|     54|        reader.discardWhitespaces()
   19|     54|
   20|     54|        let language = reader
   21|     54|            .readUntilEndOfLine()
   22|     54|            .trimmingTrailingWhitespaces()
   23|     54|
   24|     54|        var code = ""
   25|     54|
   26|  79.4k|        while !reader.didReachEnd {
   27|  79.4k|            if code.last == "\n", reader.currentCharacter == marker {
   28|     54|                let markerCount = reader.readCount(of: marker)
   29|     54|
   30|     54|                if markerCount == startingMarkerCount {
   31|     54|                    break
   32|     54|                } else {
   33|      0|                    code.append(String(repeating: marker, count: markerCount))
   34|      0|                    guard !reader.didReachEnd else { break }
   35|      0|                }
   36|  79.3k|            }
   37|  79.3k|
   38|  79.3k|            if let escaped = reader.currentCharacter.escaped {
   39|    116|                code.append(escaped)
   40|  79.3k|            } else {
   41|  79.2k|                code.append(reader.currentCharacter)
   42|  79.3k|            }
   43|  79.3k|
   44|  79.3k|            reader.advanceIndex()
   45|  79.3k|        }
   46|     54|
   47|     54|        return CodeBlock(language: language, code: code)
   48|     54|    }
   49|       |
   50|       |    func html(usingURLs urls: NamedURLCollection,
   51|     54|              modifiers: ModifierCollection) -> String {
   52|     54|        let languageClass = language.isEmpty ? "" : " class=\"language-\(language)\""
   53|     54|        return "<pre><code\(languageClass)>\(code)</code></pre>"
   54|     54|    }
   55|       |
   56|      0|    func plainText() -> String {
   57|      0|        code
   58|      0|    }
   59|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/FormattedText.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct FormattedText: Readable, HTMLConvertible, PlainTextConvertible {
    8|  7.02k|    private var components = [Component]()
    9|       |
   10|    950|    static func read(using reader: inout Reader) -> Self {
   11|    950|        read(using: &reader, terminators: [])
   12|    950|    }
   13|       |
   14|  3.18k|    static func readLine(using reader: inout Reader) -> Self {
   15|  3.18k|        let text = read(using: &reader, terminators: ["\n"])
   16|  3.18k|        if !reader.didReachEnd { reader.advanceIndex() }
   17|  3.18k|        return text
   18|  3.18k|    }
   19|       |
   20|       |    static func read(using reader: inout Reader,
   21|  7.02k|                     terminators: Set<Character>) -> Self {
   22|  7.02k|        var parser = Parser(reader: reader, terminators: terminators)
   23|  7.02k|        parser.parse()
   24|  7.02k|        reader = parser.reader
   25|  7.02k|        return parser.text
   26|  7.02k|    }
   27|       |
   28|       |    func html(usingURLs urls: NamedURLCollection,
   29|  7.02k|              modifiers: ModifierCollection) -> String {
   30|  16.7k|        components.reduce(into: "") { string, component in
   31|  16.7k|            switch component {
   32|  16.7k|            case .linebreak:
   33|      0|                string.append("<br>")
   34|  16.7k|            case .text(let text):
   35|  12.6k|                string.append(String(text))
   36|  16.7k|            case .styleMarker(let marker):
   37|  1.19k|                let html = marker.html(usingURLs: urls, modifiers: modifiers)
   38|  1.19k|                string.append(html)
   39|  16.7k|            case .fragment(let fragment, let rawString):
   40|  2.88k|                let html = fragment.html(
   41|  2.88k|                    usingURLs: urls,
   42|  2.88k|                    rawString: rawString,
   43|  2.88k|                    applyingModifiers: modifiers
   44|  2.88k|                )
   45|  2.88k|
   46|  2.88k|                string.append(html)
   47|  16.7k|            }
   48|  16.7k|        }
   49|  7.02k|    }
   50|       |
   51|      0|    func plainText() -> String {
   52|      0|        components.reduce(into: "") { string, component in
   53|      0|            switch component {
   54|      0|            case .linebreak:
   55|      0|                string.append("\n")
   56|      0|            case .text(let text):
   57|      0|                string.append(String(text))
   58|      0|            case .styleMarker:
   59|      0|                break
   60|      0|            case .fragment(let fragment, _):
   61|      0|                string.append(fragment.plainText())
   62|      0|            }
   63|      0|        }
   64|      0|    }
   65|       |
   66|      0|    mutating func append(_ text: FormattedText, separator: Substring = "") {
   67|      0|        let separator = separator.isEmpty ? [] : [Component.text(separator)]
   68|      0|        components += separator + text.components
   69|      0|    }
   70|       |}
   71|       |
   72|       |private extension FormattedText {
   73|       |    enum Component {
   74|       |        case linebreak
   75|       |        case text(Substring)
   76|       |        case styleMarker(TextStyleMarker)
   77|       |        case fragment(Fragment, rawString: Substring)
   78|       |    }
   79|       |
   80|       |    struct Parser {
   81|       |        var reader: Reader
   82|       |        let terminators: Set<Character>
   83|  7.02k|        var text = FormattedText()
   84|       |        var pendingTextRange: Range<String.Index>
   85|  7.02k|        var activeStyles = Set<TextStyle>()
   86|  7.02k|        var activeStyleMarkers = [TextStyleMarker]()
   87|       |
   88|  7.02k|        init(reader: Reader, terminators: Set<Character>) {
   89|  7.02k|            self.reader = reader
   90|  7.02k|            self.terminators = terminators
   91|  7.02k|            self.pendingTextRange = reader.currentIndex..<reader.endIndex
   92|  7.02k|        }
   93|       |
   94|  7.02k|        mutating func parse() {
   95|  7.02k|            var sequentialSpaceCount = 0
   96|  7.02k|
   97|   505k|            while !reader.didReachEnd {
   98|   257k|                do {
   99|   257k|                    if !terminators.isEmpty, reader.previousCharacter != "\\" {
  100|   236k|                        guard !terminators.contains(reader.currentCharacter) else {
  101|  6.07k|                            break
  102|   230k|                        }
  103|   251k|                    }
  104|   251k|
  105|   251k|                    if reader.currentCharacter.isNewline {
  106|    958|                        addPendingTextIfNeeded()
  107|    958|
  108|    958|                        guard let nextCharacter = reader.nextCharacter else {
  109|     16|                            break
  110|    942|                        }
  111|    942|
  112|    942|                        guard reader.previousCharacter != "\\" && !(sequentialSpaceCount >= 2) else {
  113|      0|                            text.components.append(.linebreak)
  114|      0|                            skipCharacter()
  115|      0|                            continue
  116|    942|                        }
  117|    942|
  118|    942|                        guard !nextCharacter.isAny(of: ["\n", "#", "<", "`"]) else {
  119|    934|                            break
  120|    934|                        }
  121|      8|
  122|      8|                        if !nextCharacter.isWhitespace {
  123|      4|                            text.components.append(.text(" "))
  124|      8|                        }
  125|      8|
  126|      8|                        skipCharacter()
  127|      8|                        continue
  128|   250k|                    }
  129|   250k|
  130|   250k|                    if reader.currentCharacter == " " {
  131|  22.0k|                        sequentialSpaceCount += 1
  132|   250k|                    } else {
  133|   228k|                        sequentialSpaceCount = 0
  134|   250k|                    }
  135|   250k|
  136|   250k|                    if reader.currentCharacter.isSameLineWhitespace {
  137|  22.0k|                        guard let nextCharacter = reader.nextCharacter else {
  138|      0|                            break
  139|  22.0k|                        }
  140|  22.0k|
  141|  22.0k|                        guard !nextCharacter.isWhitespace else {
  142|     66|                            addPendingTextIfNeeded()
  143|     66|                            skipCharacter()
  144|     66|                            continue
  145|  21.9k|                        }
  146|   250k|                    }
  147|   250k|
  148|   250k|                    guard !reader.currentCharacter.isAny(of: .allStyleMarkers) else {
  149|  1.19k|                        addPendingTextIfNeeded()
  150|  1.19k|                        try parseStyleMarker()
  151|  1.19k|                        continue
  152|   249k|                    }
  153|   249k|
  154|   249k|                    if reader.currentCharacter == "<" {
  155|     30|                        guard let nextCharacter = reader.nextCharacter else {
  156|      0|                            reader.advanceIndex()
  157|      0|                            break
  158|     30|                        }
  159|     30|
  160|     30|                        if nextCharacter.lowercased() == "p" {
  161|      0|                            break
  162|     30|                        }
  163|   249k|                    }
  164|   249k|
  165|   249k|                    guard let type = nextFragmentType() else {
  166|   246k|                        parseNonTriggeringCharacter()
  167|   246k|                        continue
  168|   246k|                    }
  169|  3.33k|
  170|  3.33k|                    addPendingTextIfNeeded()
  171|  3.33k|
  172|  3.33k|                    let startIndex = reader.currentIndex
  173|  3.33k|                    let fragment = try type.readOrRewind(using: &reader)
  174|  3.33k|                    let rawString = reader.characters(in: startIndex..<reader.currentIndex)
  175|  3.33k|                    text.components.append(.fragment(fragment, rawString: rawString))
  176|  3.33k|                    pendingTextRange = reader.currentIndex..<reader.endIndex
  177|  3.33k|                } catch {
  178|    450|                    parseNonTriggeringCharacter()
  179|   250k|                }
  180|   254k|            }
  181|   254k|
  182|   254k|            addPendingTextIfNeeded(trimmingWhitespaces: true)
  183|   254k|            handleUnterminatedStyleMarkers()
  184|   254k|        }
  185|       |
  186|  12.6k|        private mutating func addPendingTextIfNeeded(trimmingWhitespaces trimWhitespaces: Bool = false) {
  187|  12.6k|            guard !pendingTextRange.isEmpty else { return }
  188|  12.6k|
  189|  12.6k|            let textEndIndex = reader.currentIndex
  190|  12.6k|            let endingTextRange = pendingTextRange.lowerBound..<textEndIndex
  191|  12.6k|            var string = reader.characters(in: endingTextRange)
  192|  12.6k|
  193|  12.6k|            if trimWhitespaces {
  194|  7.02k|                string = string.trimmingTrailingWhitespaces()
  195|  12.6k|            }
  196|  12.6k|
  197|  12.6k|            text.components.append(.text(string))
  198|  12.6k|            pendingTextRange = reader.currentIndex..<reader.endIndex
  199|  12.6k|        }
  200|       |
  201|   246k|        private mutating func parseNonTriggeringCharacter() {
  202|   246k|            switch reader.currentCharacter {
  203|   246k|            case "\\":
  204|      0|                addPendingTextIfNeeded()
  205|      0|                skipCharacter()
  206|   246k|            case "&":
  207|     30|                let ampersandIndex = reader.currentIndex
  208|     30|
  209|     30|                do {
  210|     30|                    try reader.read(until: ";", allowWhitespace: false)
  211|     30|                    addPendingTextIfNeeded()
  212|     30|                } catch {
  213|     30|                    reader.moveToIndex(ampersandIndex)
  214|     30|                    fallthrough
  215|   246k|                }
  216|   246k|            default:
  217|   246k|                if let escaped = reader.currentCharacter.escaped {
  218|     60|                    addPendingTextIfNeeded()
  219|     60|                    text.components.append(.text(Substring(escaped)))
  220|     60|                    skipCharacter()
  221|   246k|                } else {
  222|   246k|                    reader.advanceIndex()
  223|   246k|                }
  224|   246k|            }
  225|   246k|        }
  226|       |
  227|  1.19k|        private mutating func parseStyleMarker() throws {
  228|  1.19k|            let marker = try TextStyleMarker.readOrRewind(using: &reader)
  229|  1.19k|
  230|  1.19k|            if activeStyles.contains(marker.style) {
  231|    570|                closeStyle(with: marker)
  232|  1.19k|            } else {
  233|    620|                activeStyles.insert(marker.style)
  234|    620|                activeStyleMarkers.append(marker)
  235|  1.19k|            }
  236|  1.19k|
  237|  1.19k|            text.components.append(.styleMarker(marker))
  238|  1.19k|            pendingTextRange = reader.currentIndex..<reader.endIndex
  239|  1.19k|        }
  240|       |
  241|    570|        private mutating func closeStyle(with marker: TextStyleMarker) {
  242|    570|            turnBoldMarkerIntoItalicIfNeeded(marker)
  243|    570|
  244|    570|            marker.kind = .closing
  245|    570|            var stylesToRemove = Set<TextStyle>()
  246|    570|
  247|    570|            for otherMarker in activeStyleMarkers.reversed() {
  248|    570|                stylesToRemove.insert(otherMarker.style)
  249|    570|
  250|    570|                if otherMarker.style == marker.style {
  251|    570|                    break
  252|    570|                }
  253|      0|
  254|      0|                otherMarker.isValid = false
  255|    570|            }
  256|    570|
  257|    570|            activeStyleMarkers.removeLast(stylesToRemove.count)
  258|    570|            activeStyles.subtract(stylesToRemove)
  259|    570|        }
  260|       |
  261|    570|        private mutating func turnBoldMarkerIntoItalicIfNeeded(_ marker: TextStyleMarker) {
  262|    570|            guard marker.style == .bold, activeStyles.contains(.italic) else { return }
  263|      0|            guard !reader.didReachEnd else { return }
  264|      0|            guard reader.currentCharacter.isAny(of: .boldItalicStyleMarkers) else { return }
  265|      0|
  266|      0|            marker.style = .italic
  267|      0|            marker.rawMarkers.removeLast()
  268|      0|            reader.rewindIndex()
  269|      0|        }
  270|       |
  271|  7.02k|        private mutating func handleUnterminatedStyleMarkers() {
  272|  7.02k|            var boldMarker: TextStyleMarker?
  273|  7.02k|            var italicMarker: TextStyleMarker?
  274|  7.02k|
  275|  7.02k|            if activeStyles.isSuperset(of: [.bold, .italic]) {
  276|      0|                markerIteration: for marker in activeStyleMarkers {
  277|      0|                    switch marker.style {
  278|      0|                    case .bold:
  279|      0|                        marker.style = .italic
  280|      0|
  281|      0|                        if let otherMarker = italicMarker {
  282|      0|                            guard marker.characterRange.lowerBound !=
  283|      0|                                  otherMarker.characterRange.upperBound else {
  284|      0|                                italicMarker = nil
  285|      0|                                break markerIteration
  286|      0|                            }
  287|      0|
  288|      0|                            marker.suffix = marker.rawMarkers.removeLast()
  289|      0|                            marker.kind = .closing
  290|      0|                        } else {
  291|      0|                            marker.prefix = marker.rawMarkers.removeFirst()
  292|      0|                        }
  293|      0|
  294|      0|                        boldMarker = marker
  295|      0|                    case .italic:
  296|      0|                        if let otherMarker = boldMarker {
  297|      0|                            guard marker.characterRange.lowerBound !=
  298|      0|                                  otherMarker.characterRange.upperBound else {
  299|      0|                                if let prefix = otherMarker.prefix {
  300|      0|                                    otherMarker.rawMarkers = "\(prefix)\(otherMarker.rawMarkers)"
  301|      0|                                } else if let suffix = otherMarker.suffix {
  302|      0|                                    otherMarker.rawMarkers.append(suffix)
  303|      0|                                }
  304|      0|
  305|      0|                                boldMarker = nil
  306|      0|                                break markerIteration
  307|      0|                            }
  308|      0|
  309|      0|                            marker.kind = .closing
  310|      0|                        }
  311|      0|
  312|      0|                        italicMarker = marker
  313|      0|                    case .strikethrough:
  314|      0|                        break
  315|      0|                    }
  316|      0|                }
  317|  7.02k|            }
  318|  7.02k|
  319|  7.02k|            for marker in activeStyleMarkers {
  320|     50|                guard marker !== boldMarker else { continue }
  321|     50|                guard marker !== italicMarker else { continue }
  322|     50|                marker.isValid = false
  323|  7.02k|            }
  324|  7.02k|        }
  325|       |
  326|    134|        private mutating func skipCharacter() {
  327|    134|            reader.advanceIndex()
  328|    134|            pendingTextRange = reader.currentIndex..<reader.endIndex
  329|    134|        }
  330|       |
  331|   249k|        private func nextFragmentType() -> Fragment.Type? {
  332|   249k|            switch reader.currentCharacter {
  333|   249k|            case "`": return InlineCode.self
  334|   249k|            case "[": return Link.self
  335|   249k|            case "!": return Image.self
  336|   249k|            case "<": return HTML.self
  337|   249k|            default: return nil
  338|   249k|            }
  339|   249k|        }
  340|       |    }
  341|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/HTML.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct HTML: Fragment {
    8|      0|    var modifierTarget: Modifier.Target { .html }
    9|       |
   10|       |    private var string: Substring
   11|       |
   12|     30|    static func read(using reader: inout Reader) throws -> HTML {
   13|     30|        let startIndex = reader.currentIndex
   14|     30|        let rootElement = try reader.readHTMLElement()
   15|     30|
   16|     30|        guard !rootElement.isSelfClosing else {
   17|      0|            let html = reader.characters(in: startIndex..<reader.currentIndex)
   18|      0|            return HTML(string: html)
   19|     30|        }
   20|     30|
   21|     30|        var rootElementCount = 1
   22|     30|
   23|     30|        while !reader.didReachEnd {
   24|      0|            guard reader.currentCharacter == "<" else {
   25|      0|                reader.advanceIndex()
   26|      0|                continue
   27|      0|            }
   28|      0|
   29|      0|            guard var element = try? reader.readHTMLElement() else {
   30|      0|                continue
   31|      0|            }
   32|      0|
   33|      0|            guard rootElement.name != element.name else {
   34|      0|                rootElementCount += 1
   35|      0|                continue
   36|      0|            }
   37|      0|
   38|      0|            guard element.name.first == "/" else {
   39|      0|                continue
   40|      0|            }
   41|      0|
   42|      0|            element.name = element.name.dropFirst()
   43|      0|
   44|      0|            if rootElement.name == element.name {
   45|      0|                rootElementCount -= 1
   46|      0|                guard rootElementCount > 0 else { break }
   47|      0|            }
   48|     30|        }
   49|     30|
   50|     30|        let html = reader.characters(in: startIndex..<reader.currentIndex)
   51|     30|        return HTML(string: html)
   52|     30|    }
   53|       |
   54|       |    func html(usingURLs urls: NamedURLCollection,
   55|      0|              modifiers: ModifierCollection) -> String {
   56|      0|        String(string)
   57|      0|    }
   58|       |
   59|      0|    func plainText() -> String {
   60|      0|        // Since we want to strip all HTML from plain text output,
   61|      0|        // there is nothing to return here, just an empty string.
   62|      0|        ""
   63|      0|    }
   64|       |}
   65|       |
   66|       |private extension Reader {
   67|       |    typealias HTMLElement = (name: Substring, isSelfClosing: Bool)
   68|       |
   69|     30|    mutating func readHTMLElement() throws -> HTMLElement {
   70|     30|        try read("<")
   71|     30|        let startIndex = currentIndex
   72|     30|
   73|     90|        while !didReachEnd {
   74|     90|            guard !currentCharacter.isWhitespace, currentCharacter != ">" else {
   75|     30|                let name = characters(in: startIndex..<currentIndex)
   76|     30|                try require(!name.isEmpty)
   77|     30|                let suffix = try read(until: ">", allowLineBreaks: true)
   78|     30|
   79|     30|                guard name.last != "/" else {
   80|      0|                    return (name.dropLast(), true)
   81|     30|                }
   82|     30|
   83|     30|                return (name, suffix.last == "/" || name == "!--")
   84|     60|            }
   85|     60|
   86|     60|            advanceIndex()
   87|     60|        }
   88|      0|
   89|      0|        throw Error()
   90|     30|    }
   91|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/HTMLConvertible.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal protocol HTMLConvertible {
    8|       |    func html(usingURLs urls: NamedURLCollection,
    9|       |              modifiers: ModifierCollection) -> String
   10|       |}
   11|       |
   12|       |extension HTMLConvertible where Self: Modifiable {
   13|       |    func html(usingURLs urls: NamedURLCollection,
   14|       |              rawString: Substring,
   15|  4.37k|              applyingModifiers modifiers: ModifierCollection) -> String {
   16|  4.37k|        var html = self.html(usingURLs: urls, modifiers: modifiers)
   17|  4.37k|
   18|  4.37k|        modifiers.applyModifiers(for: modifierTarget) { modifier in
   19|      0|            html = modifier.closure((html, rawString))
   20|      0|        }
   21|  4.37k|
   22|  4.37k|        return html
   23|  4.37k|    }
   24|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/Hashable+AnyOf.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal extension Hashable {
    8|   254k|    func isAny(of candidates: Set<Self>) -> Bool {
    9|   254k|        return candidates.contains(self)
   10|   254k|    }
   11|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/Heading.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct Heading: Fragment {
    8|      0|    var modifierTarget: Modifier.Target { .headings }
    9|       |    var level: Int
   10|       |
   11|       |    private var text: FormattedText
   12|       |
   13|      0|    static func read(using reader: inout Reader) throws -> Heading {
   14|      0|        let level = reader.readCount(of: "#")
   15|      0|        try require(level > 0 && level < 7)
   16|      0|        try reader.readWhitespaces()
   17|      0|        let text = FormattedText.read(using: &reader, terminators: ["\n"])
   18|      0|
   19|      0|        return Heading(level: level, text: text)
   20|      0|    }
   21|       |
   22|       |    func html(usingURLs urls: NamedURLCollection,
   23|      0|              modifiers: ModifierCollection) -> String {
   24|      0|        let body = stripTrailingMarkers(
   25|      0|            from: text.html(usingURLs: urls, modifiers: modifiers)
   26|      0|        )
   27|      0|
   28|      0|        let tagName = "h\(level)"
   29|      0|        return "<\(tagName)>\(body)</\(tagName)>"
   30|      0|    }
   31|       |
   32|      0|    func plainText() -> String {
   33|      0|        stripTrailingMarkers(from: text.plainText())
   34|      0|    }
   35|       |}
   36|       |
   37|       |private extension Heading {
   38|      0|    func stripTrailingMarkers(from text: String) -> String {
   39|      0|        guard !text.isEmpty else { return text }
   40|      0|
   41|      0|        let lastCharacterIndex = text.index(before: text.endIndex)
   42|      0|        var trimIndex = lastCharacterIndex
   43|      0|
   44|      0|        while text[trimIndex] == "#", trimIndex != text.startIndex {
   45|      0|            trimIndex = text.index(before: trimIndex)
   46|      0|        }
   47|      0|
   48|      0|        if trimIndex != lastCharacterIndex {
   49|      0|            return String(text[..<trimIndex])
   50|      0|        }
   51|      0|
   52|      0|        return text
   53|      0|    }
   54|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/HorizontalLine.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct HorizontalLine: Fragment {
    8|      0|    var modifierTarget: Modifier.Target { .horizontalLines }
    9|       |
   10|      0|    static func read(using reader: inout Reader) throws -> HorizontalLine {
   11|      0|        guard reader.currentCharacter.isAny(of: ["-", "*"]) else {
   12|      0|            throw Reader.Error()
   13|      0|        }
   14|      0|
   15|      0|        try require(reader.readCount(of: reader.currentCharacter) > 2)
   16|      0|        try require(reader.readUntilEndOfLine().isEmpty)
   17|      0|        return HorizontalLine()
   18|      0|    }
   19|       |
   20|       |    func html(usingURLs urls: NamedURLCollection,
   21|      0|              modifiers: ModifierCollection) -> String {
   22|      0|        "<hr>"
   23|      0|    }
   24|       |
   25|      0|    func plainText() -> String {
   26|      0|        // Since we want to strip all HTML from plain text output,
   27|      0|        // there is nothing to return here, just an empty string.
   28|      0|        ""
   29|      0|    }
   30|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/Image.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct Image: Fragment {
    8|     12|    var modifierTarget: Modifier.Target { .images }
    9|       |
   10|       |    private var link: Link
   11|       |
   12|    432|    static func read(using reader: inout Reader) throws -> Image {
   13|    432|        try reader.read("!")
   14|    432|        return try Image(link: .read(using: &reader))
   15|    432|    }
   16|       |
   17|       |    func html(usingURLs urls: NamedURLCollection,
   18|     12|              modifiers: ModifierCollection) -> String {
   19|     12|        let url = link.target.url(from: urls)
   20|     12|        var alt = link.text.html(usingURLs: urls, modifiers: modifiers)
   21|     12|
   22|     12|        if !alt.isEmpty {
   23|      0|            alt = " alt=\"\(alt)\""
   24|     12|        }
   25|     12|
   26|     12|        return "<img src=\"\(url)\"\(alt)/>"
   27|     12|    }
   28|       |
   29|      0|    func plainText() -> String {
   30|      0|        link.plainText()
   31|      0|    }
   32|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/InlineCode.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |struct InlineCode: Fragment {
    8|      0|    var modifierTarget: Modifier.Target { .inlineCode }
    9|       |
   10|       |    private var code: String
   11|       |
   12|      0|    static func read(using reader: inout Reader) throws -> InlineCode {
   13|      0|        try reader.read("`")
   14|      0|        var code = ""
   15|      0|
   16|      0|        while !reader.didReachEnd {
   17|      0|            switch reader.currentCharacter {
   18|      0|            case \.isNewline:
   19|      0|                throw Reader.Error()
   20|      0|            case "`":
   21|      0|                reader.advanceIndex()
   22|      0|                return InlineCode(code: code)
   23|      0|            default:
   24|      0|                if let escaped = reader.currentCharacter.escaped {
   25|      0|                    code.append(escaped)
   26|      0|                } else {
   27|      0|                    code.append(reader.currentCharacter)
   28|      0|                }
   29|      0|
   30|      0|                reader.advanceIndex()
   31|      0|            }
   32|      0|        }
   33|      0|
   34|      0|        throw Reader.Error()
   35|      0|    }
   36|       |
   37|       |    func html(usingURLs urls: NamedURLCollection,
   38|      0|              modifiers: ModifierCollection) -> String {
   39|      0|        return "<code>\(code)</code>"
   40|      0|    }
   41|       |
   42|      0|    func plainText() -> String {
   43|      0|        code
   44|      0|    }
   45|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/KeyPathPatterns.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|  11.8k|internal func ~=<T>(rhs: KeyPath<T, Bool>, lhs: T) -> Bool {
    8|  11.8k|    lhs[keyPath: rhs]
    9|  11.8k|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/Link.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct Link: Fragment {
    8|  2.88k|    var modifierTarget: Modifier.Target { .links }
    9|       |
   10|       |    var target: Target
   11|       |    var text: FormattedText
   12|       |
   13|  3.31k|    static func read(using reader: inout Reader) throws -> Link {
   14|  3.31k|        try reader.read("[")
   15|  3.31k|        let text = FormattedText.read(using: &reader, terminators: ["]"])
   16|  3.31k|        try reader.read("]")
   17|  3.31k|
   18|  3.31k|        guard !reader.didReachEnd else { throw Reader.Error() }
   19|  3.31k|
   20|  3.31k|        if reader.currentCharacter == "(" {
   21|  2.89k|            reader.advanceIndex()
   22|  2.89k|            let url = try reader.read(until: ")")
   23|  2.89k|            return Link(target: .url(url), text: text)
   24|  2.89k|        } else {
   25|    420|            try reader.read("[")
   26|    420|            let reference = try reader.read(until: "]")
   27|    420|            return Link(target: .reference(reference), text: text)
   28|    420|        }
   29|      0|    }
   30|       |
   31|       |    func html(usingURLs urls: NamedURLCollection,
   32|  2.88k|              modifiers: ModifierCollection) -> String {
   33|  2.88k|        let url = target.url(from: urls)
   34|  2.88k|        let title = text.html(usingURLs: urls, modifiers: modifiers)
   35|  2.88k|        return "<a href=\"\(url)\">\(title)</a>"
   36|  2.88k|    }
   37|       |
   38|      0|    func plainText() -> String {
   39|      0|        text.plainText()
   40|      0|    }
   41|       |}
   42|       |
   43|       |extension Link {
   44|       |    enum Target {
   45|       |        case url(URL)
   46|       |        case reference(Substring)
   47|       |    }
   48|       |}
   49|       |
   50|       |extension Link.Target {
   51|  2.89k|    func url(from urls: NamedURLCollection) -> URL {
   52|  2.89k|        switch self {
   53|  2.89k|        case .url(let url):
   54|  2.89k|            return url
   55|  2.89k|        case .reference(let name):
   56|      0|            return urls.url(named: name) ?? name
   57|  2.89k|        }
   58|  2.89k|    }
   59|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/List.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct List: Fragment {
    8|    480|    var modifierTarget: Modifier.Target { .lists }
    9|       |
   10|       |    private var listMarker: Character
   11|       |    private var kind: Kind
   12|    960|    private var items = [Item]()
   13|       |
   14|    964|    static func read(using reader: inout Reader) throws -> List {
   15|    964|        try read(using: &reader, indentationLength: 0)
   16|    964|    }
   17|       |
   18|       |    private static func read(using reader: inout Reader,
   19|    964|                             indentationLength: Int) throws -> List {
   20|    964|        let startIndex = reader.currentIndex
   21|    964|        let isOrdered = reader.currentCharacter.isNumber
   22|    964|
   23|    964|        var list: List
   24|    964|
   25|    964|        if isOrdered {
   26|      4|            let firstNumberString = try reader.readCharacters(matching: \.isNumber, max: 9)
   27|      4|            let firstNumber = Int(firstNumberString) ?? 1
   28|      4|            
   29|      4|            let listMarker = try reader.readCharacter(in: List.orderedListMarkers)
   30|      4|            list = List(listMarker: listMarker, kind: .ordered(firstNumber: firstNumber))
   31|    964|        } else {
   32|    960|            let listMarker = reader.currentCharacter
   33|    960|            list = List(listMarker: listMarker, kind: .unordered)
   34|    964|        }
   35|    964|
   36|    964|        reader.moveToIndex(startIndex)
   37|    964|
   38|    964|        func addTextToLastItem() throws {
   39|    480|            try require(!list.items.isEmpty)
   40|    480|            let text = FormattedText.readLine(using: &reader)
   41|    480|            var lastItem = list.items.removeLast()
   42|    480|            lastItem.text.append(text, separator: " ")
   43|    480|            list.items.append(lastItem)
   44|    480|        }
   45|    964|
   46|  5.55k|        while !reader.didReachEnd {
   47|  4.11k|            switch reader.currentCharacter {
   48|  4.11k|            case \.isNewline:
   49|    450|                return list
   50|  4.11k|            case \.isWhitespace:
   51|      0|                guard !list.items.isEmpty else {
   52|      0|                    try reader.readWhitespaces()
   53|      0|                    continue
   54|      0|                }
   55|      0|
   56|      0|                let itemIndentationLength = try reader.readWhitespaces().count
   57|      0|
   58|      0|                if itemIndentationLength < indentationLength {
   59|      0|                    return list
   60|      0|                } else if itemIndentationLength == indentationLength {
   61|      0|                    continue
   62|      0|                }
   63|      0|
   64|      0|                let fallbackIndex = reader.currentIndex
   65|      0|
   66|      0|                do {
   67|      0|                    let nestedList = try List.read(
   68|      0|                        using: &reader, indentationLength:
   69|      0|                        itemIndentationLength
   70|      0|                    )
   71|      0|
   72|      0|                    var lastItem = list.items.removeLast()
   73|      0|                    lastItem.nestedList = nestedList
   74|      0|                    list.items.append(lastItem)
   75|      0|                } catch {
   76|      0|                    reader.moveToIndex(fallbackIndex)
   77|      0|                    try addTextToLastItem()
   78|  4.11k|                }
   79|  4.11k|            case \.isNumber:
   80|      0|                guard case .ordered = list.kind else {
   81|      0|                    try addTextToLastItem()
   82|      0|                    continue
   83|      0|                }
   84|      0|
   85|      0|                let startIndex = reader.currentIndex
   86|      0|
   87|      0|                do {
   88|      0|                    try reader.readCharacters(matching: \.isNumber, max: 9)
   89|      0|                    let foundMarker = try reader.readCharacter(in: List.orderedListMarkers)
   90|      0|
   91|      0|                    guard foundMarker == list.listMarker else {
   92|      0|                        reader.moveToIndex(startIndex)
   93|      0|                        return list
   94|      0|                    }
   95|      0|
   96|      0|                    try reader.readWhitespaces()
   97|      0|
   98|      0|                    list.items.append(Item(text: .readLine(using: &reader)))
   99|      0|                } catch {
  100|      0|                    reader.moveToIndex(startIndex)
  101|      0|                    try addTextToLastItem()
  102|  4.11k|                }
  103|  4.11k|            case "-", "*", "+":
  104|  3.66k|                guard let nextCharacter = reader.nextCharacter,
  105|  3.66k|                      nextCharacter.isSameLineWhitespace else {
  106|    480|                    try addTextToLastItem()
  107|    480|                    continue
  108|  3.18k|                }
  109|  3.18k|
  110|  3.18k|                guard reader.currentCharacter == list.listMarker else {
  111|      0|                    return list
  112|  3.18k|                }
  113|  3.18k|
  114|  3.18k|                reader.advanceIndex()
  115|  3.18k|                try reader.readWhitespaces()
  116|  3.18k|                list.items.append(Item(text: .readLine(using: &reader)))
  117|  4.11k|            default:
  118|      0|                try addTextToLastItem()
  119|  4.11k|            }
  120|  4.11k|        }
  121|  1.44k|
  122|  1.44k|        return list
  123|    964|    }
  124|       |
  125|       |    func html(usingURLs urls: NamedURLCollection,
  126|    480|              modifiers: ModifierCollection) -> String {
  127|    480|        let tagName: String
  128|    480|        let startAttribute: String
  129|    480|
  130|    480|        switch kind {
  131|    480|        case .unordered:
  132|    480|            tagName = "ul"
  133|    480|            startAttribute = ""
  134|    480|        case let .ordered(startingIndex):
  135|      0|            tagName = "ol"
  136|      0|
  137|      0|            if startingIndex != 1 {
  138|      0|                startAttribute = #" start="\#(startingIndex)""#
  139|      0|            } else {
  140|      0|                startAttribute = ""
  141|    480|            }
  142|    480|        }
  143|    480|
  144|  3.18k|        let body = items.reduce(into: "") { html, item in
  145|  3.18k|            html.append(item.html(usingURLs: urls, modifiers: modifiers))
  146|  3.18k|        }
  147|    480|
  148|    480|        return "<\(tagName)\(startAttribute)>\(body)</\(tagName)>"
  149|    480|    }
  150|       |
  151|      0|    func plainText() -> String {
  152|      0|        var isFirst = true
  153|      0|
  154|      0|        return items.reduce(into: "") { string, item in
  155|      0|            if isFirst {
  156|      0|                isFirst = false
  157|      0|            } else {
  158|      0|                string.append(", ")
  159|      0|            }
  160|      0|
  161|      0|            string.append(item.text.plainText())
  162|      0|        }
  163|      0|    }
  164|       |}
  165|       |
  166|       |private extension List {
  167|       |    struct Item: HTMLConvertible {
  168|       |        var text: FormattedText
  169|       |        var nestedList: List? = nil
  170|       |
  171|       |        func html(usingURLs urls: NamedURLCollection,
  172|  3.18k|                  modifiers: ModifierCollection) -> String {
  173|  3.18k|            let textHTML = text.html(usingURLs: urls, modifiers: modifiers)
  174|  3.18k|            let listHTML = nestedList?.html(usingURLs: urls, modifiers: modifiers)
  175|  3.18k|            return "<li>\(textHTML)\(listHTML ?? "")</li>"
  176|  3.18k|        }
  177|       |    }
  178|       |
  179|       |    enum Kind {
  180|       |        case unordered
  181|       |        case ordered(firstNumber: Int)
  182|       |    }
  183|       |
  184|       |    static let orderedListMarkers: Set<Character> = [".", ")"]
  185|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/Metadata.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct Metadata: Readable {
    8|      0|    var values = [String : String]()
    9|       |
   10|      0|    static func read(using reader: inout Reader) throws -> Metadata {
   11|      0|        try require(reader.readCount(of: "-") == 3)
   12|      0|        try reader.read("\n")
   13|      0|
   14|      0|        var metadata = Metadata()
   15|      0|        var lastKey: String?
   16|      0|
   17|      0|        while !reader.didReachEnd {
   18|      0|            reader.discardWhitespacesAndNewlines()
   19|      0|
   20|      0|            guard reader.currentCharacter != "-" else {
   21|      0|                try require(reader.readCount(of: "-") == 3)
   22|      0|                return metadata
   23|      0|            }
   24|      0|
   25|      0|            let key = try trim(reader.read(until: ":", required: false))
   26|      0|
   27|      0|            guard reader.previousCharacter == ":" else {
   28|      0|                if let lastKey = lastKey {
   29|      0|                    metadata.values[lastKey]?.append(" " + key)
   30|      0|                }
   31|      0|
   32|      0|                continue
   33|      0|            }
   34|      0|
   35|      0|            let value = trim(reader.readUntilEndOfLine())
   36|      0|
   37|      0|            if !value.isEmpty {
   38|      0|                metadata.values[key] = value
   39|      0|                lastKey = key
   40|      0|            }
   41|      0|        }
   42|      0|
   43|      0|        throw Reader.Error()
   44|      0|    }
   45|       |
   46|      0|    func applyingModifiers(_ modifiers: ModifierCollection) -> Self {
   47|      0|        var modified = self
   48|      0|
   49|      0|        modifiers.applyModifiers(for: .metadataKeys) { modifier in
   50|      0|            for (key, value) in modified.values {
   51|      0|                let newKey = modifier.closure((key, Substring(key)))
   52|      0|                modified.values[key] = nil
   53|      0|                modified.values[newKey] = value
   54|      0|            }
   55|      0|        }
   56|      0|
   57|      0|        modifiers.applyModifiers(for: .metadataValues) { modifier in
   58|      0|            modified.values = modified.values.mapValues { value in
   59|      0|                modifier.closure((value, Substring(value)))
   60|      0|            }
   61|      0|        }
   62|      0|
   63|      0|        return modified
   64|      0|    }
   65|       |}
   66|       |
   67|       |private extension Metadata {
   68|      0|    static func trim(_ string: Substring) -> String {
   69|      0|        String(string
   70|      0|            .trimmingLeadingWhitespaces()
   71|      0|            .trimmingTrailingWhitespaces()
   72|      0|        )
   73|      0|    }
   74|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/ModifierCollection.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct ModifierCollection {
    8|       |    private var modifiers: [Modifier.Target : [Modifier]]
    9|       |
   10|     72|    init(modifiers: [Modifier]) {
   11|     72|        self.modifiers = Dictionary(grouping: modifiers, by: { $0.target })
   12|     72|    }
   13|       |
   14|       |    func applyModifiers(for target: Modifier.Target,
   15|  4.37k|                        using closure: (Modifier) -> Void) {
   16|  4.37k|        modifiers[target]?.forEach(closure)
   17|  4.37k|    }
   18|       |
   19|      0|    mutating func insert(_ modifier: Modifier) {
   20|      0|        modifiers[modifier.target, default: []].append(modifier)
   21|      0|    }
   22|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/NamedURLCollection.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct NamedURLCollection {
    8|       |    private let urlsByName: [String : URL]
    9|       |
   10|     72|    init(urlsByName: [String : URL]) {
   11|     72|        self.urlsByName = urlsByName
   12|     72|    }
   13|       |
   14|      0|    func url(named name: Substring) -> URL? {
   15|      0|        urlsByName[name.lowercased()]
   16|      0|    }
   17|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/Paragraph.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct Paragraph: Fragment {
    8|    950|    var modifierTarget: Modifier.Target { .paragraphs }
    9|       |
   10|       |    private var text: FormattedText
   11|       |
   12|    950|    static func read(using reader: inout Reader) -> Paragraph {
   13|    950|        return Paragraph(text: .read(using: &reader))
   14|    950|    }
   15|       |
   16|       |    func html(usingURLs urls: NamedURLCollection,
   17|    950|              modifiers: ModifierCollection) -> String {
   18|    950|        let body = text.html(usingURLs: urls, modifiers: modifiers)
   19|    950|        return "<p>\(body)</p>"
   20|    950|    }
   21|       |
   22|      0|    func plainText() -> String {
   23|      0|        text.plainText()
   24|      0|    }
   25|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/Readable.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal protocol Readable {
    8|       |    static func read(using reader: inout Reader) throws -> Self
    9|       |}
   10|       |
   11|       |extension Readable {
   12|  6.01k|    static func readOrRewind(using reader: inout Reader) throws -> Self {
   13|  6.01k|        guard reader.previousCharacter != "\\" else {
   14|      0|            throw Reader.Error()
   15|  6.01k|        }
   16|  6.01k|
   17|  6.01k|        let previousReader = reader
   18|  6.01k|
   19|  6.01k|        do {
   20|  6.01k|            return try read(using: &reader)
   21|  6.01k|        } catch {
   22|    950|            reader = previousReader
   23|    950|            throw error
   24|    950|        }
   25|      0|    }
   26|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/Reader.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct Reader {
    8|       |    private let string: String
    9|       |    private(set) var currentIndex: String.Index
   10|       |
   11|     72|    init(string: String) {
   12|     72|        self.string = string
   13|     72|        self.currentIndex = string.startIndex
   14|     72|    }
   15|       |}
   16|       |
   17|       |extension Reader {
   18|       |    struct Error: Swift.Error {}
   19|       |
   20|  1.03M|    var didReachEnd: Bool { currentIndex == endIndex }
   21|   243k|    var previousCharacter: Character? { lookBehindAtPreviousCharacter() }
   22|  3.30M|    var currentCharacter: Character { string[currentIndex] }
   23|  28.1k|    var nextCharacter: Character? { lookAheadAtNextCharacter() }
   24|  1.06M|    var endIndex: String.Index { string.endIndex }
   25|       |
   26|  17.0k|    func characters(in range: Range<String.Index>) -> Substring {
   27|  17.0k|        return string[range]
   28|  17.0k|    }
   29|       |
   30|  6.69k|    mutating func read(_ character: Character) throws {
   31|  6.69k|        guard !didReachEnd else { throw Error() }
   32|  6.69k|        guard currentCharacter == character else { throw Error() }
   33|  6.26k|        advanceIndex()
   34|  6.26k|    }
   35|       |
   36|       |    @discardableResult
   37|       |    mutating func read(until character: Character,
   38|       |                       required: Bool = true,
   39|       |                       allowWhitespace: Bool = true,
   40|  2.96k|                       allowLineBreaks: Bool = false) throws -> Substring {
   41|  2.96k|        let startIndex = currentIndex
   42|  2.96k|
   43|   641k|        while !didReachEnd {
   44|   641k|            guard currentCharacter != character else {
   45|  2.90k|                let result = string[startIndex..<currentIndex]
   46|  2.90k|                advanceIndex()
   47|  2.90k|                return result
   48|   638k|            }
   49|   638k|
   50|   638k|            if !allowWhitespace, currentCharacter.isSameLineWhitespace {
   51|     30|                break
   52|   638k|            }
   53|   638k|
   54|   638k|            if !allowLineBreaks, currentCharacter.isNewline {
   55|      0|                break
   56|   638k|            }
   57|   638k|
   58|   638k|            advanceIndex()
   59|   638k|        }
   60|     60|
   61|     60|        if required { throw Error() }
   62|      0|        return string[startIndex..<currentIndex]
   63|     60|    }
   64|       |
   65|    108|    mutating func readCount(of character: Character) -> Int {
   66|    108|        var count = 0
   67|    108|
   68|    432|        while !didReachEnd {
   69|    428|            guard currentCharacter == character else { break }
   70|    324|            count += 1
   71|    324|            advanceIndex()
   72|    324|        }
   73|    108|
   74|    108|        return count
   75|    108|    }
   76|       |
   77|       |    /// Read characters that match by evaluating a keypath
   78|       |    ///
   79|       |    /// - Parameters:
   80|       |    ///   - keyPath: A keypath to evaluate that is `true` for target characters.
   81|       |    ///   - maxCount: The maximum number of characters to attempt to read.
   82|       |    /// - Returns: The substring of characters successfully read
   83|       |    /// - Complexity: O(*n*), where *n* is the length of the string being read.
   84|       |    @discardableResult
   85|       |    mutating func readCharacters(matching keyPath: KeyPath<Character, Bool>,
   86|  3.18k|                                 max maxCount: Int = Int.max) throws -> Substring {
   87|  3.18k|        let startIndex = currentIndex
   88|  3.18k|        var count = 0
   89|  3.18k|        
   90|  6.36k|        while !didReachEnd
   91|  6.36k|              && count < maxCount
   92|  6.36k|              && currentCharacter[keyPath: keyPath] {
   93|  3.18k|            advanceIndex()
   94|  3.18k|            count += 1
   95|  3.18k|        }
   96|  3.18k|
   97|  3.18k|        guard startIndex != currentIndex else {
   98|      0|            throw Error()
   99|  3.18k|        }
  100|  3.18k|
  101|  3.18k|        return string[startIndex..<currentIndex]
  102|  3.18k|    }
  103|       |    
  104|       |    /// Read a character that exist in a set
  105|       |    ///
  106|       |    /// - Parameters:
  107|       |    ///   - set: The set of valid characters.
  108|       |    /// - Returns: The character that matched.
  109|       |    /// - Complexity: O(1)
  110|       |    @discardableResult
  111|      4|    mutating func readCharacter(in set: Set<Character>) throws -> Character {
  112|      4|        guard !didReachEnd else { throw Error() }
  113|      4|        guard currentCharacter.isAny(of: set) else { throw Error() }
  114|      0|        defer { advanceIndex() }
  115|      0|
  116|      0|        return currentCharacter
  117|      4|    }
  118|       |
  119|       |    @discardableResult
  120|  3.18k|    mutating func readWhitespaces() throws -> Substring {
  121|  3.18k|        try readCharacters(matching: \.isSameLineWhitespace)
  122|  3.18k|    }
  123|       |
  124|     54|    mutating func readUntilEndOfLine() -> Substring {
  125|     54|        let startIndex = currentIndex
  126|     54|
  127|    324|        while !didReachEnd {
  128|    324|            guard !currentCharacter.isNewline else {
  129|     54|                let text = string[startIndex..<currentIndex]
  130|     54|                advanceIndex()
  131|     54|                return text
  132|    270|            }
  133|    270|
  134|    270|            advanceIndex()
  135|    270|        }
  136|      0|
  137|      0|        return string[startIndex..<currentIndex]
  138|     54|    }
  139|       |    
  140|     54|    mutating func discardWhitespaces() {
  141|     54|        while !didReachEnd {
  142|     54|            guard currentCharacter.isSameLineWhitespace else { return }
  143|      0|            advanceIndex()
  144|      0|        }
  145|      0|    }
  146|       |    
  147|  1.53k|    mutating func discardWhitespacesAndNewlines() {
  148|  4.00k|        while !didReachEnd {
  149|  3.96k|            guard currentCharacter.isWhitespace else { return }
  150|  2.47k|            advanceIndex()
  151|  2.47k|        }
  152|     38|    }
  153|       |
  154|   990k|    mutating func advanceIndex(by offset: Int = 1) {
  155|   990k|        currentIndex = string.index(currentIndex, offsetBy: offset)
  156|   990k|    }
  157|       |
  158|      0|    mutating func rewindIndex() {
  159|      0|        currentIndex = string.index(before: currentIndex)
  160|      0|    }
  161|       |
  162|    990|    mutating func moveToIndex(_ index: String.Index) {
  163|    990|        currentIndex = index
  164|    990|    }
  165|       |}
  166|       |
  167|       |private extension Reader {
  168|   243k|    func lookBehindAtPreviousCharacter() -> Character? {
  169|   243k|        guard currentIndex != string.startIndex else { return nil }
  170|   243k|        let previousIndex = string.index(before: currentIndex)
  171|   243k|        return string[previousIndex]
  172|   243k|    }
  173|       |
  174|  28.1k|    func lookAheadAtNextCharacter() -> Character? {
  175|  28.1k|        guard !didReachEnd else { return nil }
  176|  28.1k|        let nextIndex = string.index(after: currentIndex)
  177|  28.1k|        guard nextIndex != string.endIndex else { return nil }
  178|  28.1k|        return string[nextIndex]
  179|  28.1k|    }
  180|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/Require.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|    564|func require(_ bool: Bool) throws {
    8|    564|    struct RequireError: Error {}
    9|    564|    guard bool else { throw RequireError() }
   10|     84|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/Substring+Trimming.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal extension Substring {
    8|      0|    func trimmingLeadingWhitespaces() -> Self {
    9|      0|        drop(while: { $0.isWhitespace })
   10|      0|    }
   11|       |
   12|  7.07k|    func trimmingTrailingWhitespaces() -> Self {
   13|  7.07k|        var trimmed = self
   14|  7.07k|
   15|  7.07k|        while trimmed.last?.isWhitespace == true {
   16|      0|            trimmed = trimmed.dropLast()
   17|  7.07k|        }
   18|  7.07k|
   19|  7.07k|        return trimmed
   20|  7.07k|    }
   21|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/Table.swift:
    1|       |/**
    2|       | *  Ink
    3|       | *  Copyright (c) John Sundell 2020
    4|       | *  MIT license, see LICENSE file for details
    5|       | */
    6|       |
    7|       |import Foundation
    8|       |
    9|       |struct Table: Fragment {
   10|      0|    var modifierTarget: Modifier.Target { .tables }
   11|       |
   12|       |    private var header: Row?
   13|      0|    private var rows = [Row]()
   14|       |    private var columnCount = 0
   15|      0|    private var columnAlignments = [ColumnAlignment]()
   16|       |
   17|      0|    static func read(using reader: inout Reader) throws -> Table {
   18|      0|        var table = Table()
   19|      0|
   20|      0|        while !reader.didReachEnd, !reader.currentCharacter.isNewline {
   21|      0|            guard reader.currentCharacter == "|" else {
   22|      0|                break
   23|      0|            }
   24|      0|
   25|      0|            let row = try reader.readTableRow()
   26|      0|            table.rows.append(row)
   27|      0|            table.columnCount = max(table.columnCount, row.count)
   28|      0|        }
   29|      0|
   30|      0|        guard !table.rows.isEmpty else { throw Reader.Error() }
   31|      0|        table.formHeaderAndColumnAlignmentsIfNeeded()
   32|      0|        return table
   33|      0|    }
   34|       |
   35|       |    func html(usingURLs urls: NamedURLCollection,
   36|      0|              modifiers: ModifierCollection) -> String {
   37|      0|        var html = ""
   38|      0|        let render: () -> String = { "<table>\(html)</table>" }
   39|      0|
   40|      0|        if let header = header {
   41|      0|            let rowHTML = self.html(
   42|      0|                forRow: header,
   43|      0|                cellElementName: "th",
   44|      0|                urls: urls,
   45|      0|                modifiers: modifiers
   46|      0|            )
   47|      0|
   48|      0|            html.append("<thead>\(rowHTML)</thead>")
   49|      0|        }
   50|      0|
   51|      0|        guard !rows.isEmpty else {
   52|      0|            return render()
   53|      0|        }
   54|      0|
   55|      0|        html.append("<tbody>")
   56|      0|
   57|      0|        for row in rows {
   58|      0|            let rowHTML = self.html(
   59|      0|                forRow: row,
   60|      0|                cellElementName: "td",
   61|      0|                urls: urls,
   62|      0|                modifiers: modifiers
   63|      0|            )
   64|      0|
   65|      0|            html.append(rowHTML)
   66|      0|        }
   67|      0|
   68|      0|        html.append("</tbody>")
   69|      0|        return render()
   70|      0|    }
   71|       |
   72|      0|    func plainText() -> String {
   73|      0|        var text = header.map(plainText) ?? ""
  ------------------
  | Unexecuted instantiation: $s3Ink5TableV9plainTextSSyFSSSayAA09FormattedD0VGcACcfu_
  ------------------
  | Unexecuted instantiation: $s3Ink5TableV9plainTextSSyFSSSayAA09FormattedD0VGcACcfu_SSAGcfu0_
  ------------------
   74|      0|
   75|      0|        for row in rows {
   76|      0|            if !text.isEmpty { text.append("\n") }
   77|      0|            text.append(plainText(forRow: row))
   78|      0|        }
   79|      0|
   80|      0|        return text
   81|      0|    }
   82|       |}
   83|       |
   84|       |private extension Table {
   85|       |    typealias Row = [FormattedText]
   86|       |    typealias Cell = FormattedText
   87|       |
   88|       |    static let delimiters: Set<Character> = ["|", "\n"]
   89|       |    static let allowedHeaderCharacters: Set<Character> = ["-", ":"]
   90|       |
   91|       |    enum ColumnAlignment {
   92|       |        case none
   93|       |        case left
   94|       |        case center
   95|       |        case right
   96|       |
   97|      0|        var attribute: String {
   98|      0|            switch self {
   99|      0|            case .none:
  100|      0|                return ""
  101|      0|            case .left:
  102|      0|                return #" align="left""#
  103|      0|            case .center:
  104|      0|                return #" align="center""#
  105|      0|            case .right:
  106|      0|                return #" align="right""#
  107|      0|            }
  108|      0|        }
  109|       |    }
  110|       |
  111|      0|    mutating func formHeaderAndColumnAlignmentsIfNeeded() {
  112|      0|        guard rows.count > 1 else { return }
  113|      0|        guard rows[0].count == rows[1].count else { return }
  114|      0|
  115|      0|        let textPredicate = Self.allowedHeaderCharacters.contains
  ------------------
  | Unexecuted instantiation: $s3Ink5TableV37formHeaderAndColumnAlignmentsIfNeeded33_6998F67635AB1979FBC9FDF8A0D722DELLyyFSbSJcShySJGcfu_
  ------------------
  | Unexecuted instantiation: $s3Ink5TableV37formHeaderAndColumnAlignmentsIfNeeded33_6998F67635AB1979FBC9FDF8A0D722DELLyyFSbSJcShySJGcfu_SbSJcfu0_
  ------------------
  116|      0|        var alignments = [ColumnAlignment]()
  117|      0|
  118|      0|        for cell in rows[1] {
  119|      0|            let text = cell.plainText()
  120|      0|
  121|      0|            guard text.allSatisfy(textPredicate) else {
  122|      0|                return
  123|      0|            }
  124|      0|
  125|      0|            alignments.append(parseColumnAlignment(from: text))
  126|      0|        }
  127|      0|
  128|      0|        header = rows[0]
  129|      0|        columnAlignments = alignments
  130|      0|        rows.removeSubrange(0...1)
  131|      0|    }
  132|       |
  133|      0|    func parseColumnAlignment(from text: String) -> ColumnAlignment {
  134|      0|        switch (text.first, text.last) {
  135|      0|        case (":", ":"):
  136|      0|            return .center
  137|      0|        case (":", _):
  138|      0|            return .left
  139|      0|        case (_, ":"):
  140|      0|            return .right
  141|      0|        default:
  142|      0|            return .none
  143|      0|        }
  144|      0|    }
  145|       |
  146|       |    func html(forRow row: Row,
  147|       |              cellElementName: String,
  148|       |              urls: NamedURLCollection,
  149|      0|              modifiers: ModifierCollection) -> String {
  150|      0|        var html = "<tr>"
  151|      0|
  152|      0|        for index in 0..<columnCount {
  153|      0|            let cell = index < row.count ? row[index] : nil
  154|      0|            let contents = cell?.html(usingURLs: urls, modifiers: modifiers)
  155|      0|
  156|      0|            html.append(htmlForCell(
  157|      0|                at: index,
  158|      0|                contents: contents ?? "",
  159|      0|                elementName: cellElementName
  160|      0|            ))
  161|      0|        }
  162|      0|
  163|      0|        return html + "</tr>"
  164|      0|    }
  165|       |
  166|      0|    func htmlForCell(at index: Int, contents: String, elementName: String) -> String {
  167|      0|        let alignment = index < columnAlignments.count
  168|      0|            ? columnAlignments[index]
  169|      0|            : .none
  170|      0|
  171|      0|        let tags = (
  172|      0|            opening: "<\(elementName)\(alignment.attribute)>",
  173|      0|            closing: "</\(elementName)>"
  174|      0|        )
  175|      0|
  176|      0|        return tags.opening + contents + tags.closing
  177|      0|    }
  178|       |
  179|      0|    func plainText(forRow row: Row) -> String {
  180|      0|        var text = ""
  181|      0|
  182|      0|        for index in 0..<columnCount {
  183|      0|            let cell = index < row.count ? row[index] : nil
  184|      0|            if index > 0 { text.append(" | ") }
  185|      0|            text.append(cell?.plainText() ?? "")
  186|      0|        }
  187|      0|
  188|      0|        return text + " |"
  189|      0|    }
  190|       |}
  191|       |
  192|       |private extension Reader {
  193|      0|    mutating func readTableRow() throws -> Table.Row {
  194|      0|        try readTableDelimiter()
  195|      0|        var row = Table.Row()
  196|      0|
  197|      0|        while !didReachEnd {
  198|      0|            let cell = FormattedText.read(
  199|      0|                using: &self,
  200|      0|                terminators: Table.delimiters
  201|      0|            )
  202|      0|
  203|      0|            try readTableDelimiter()
  204|      0|            row.append(cell)
  205|      0|
  206|      0|            if !didReachEnd, currentCharacter.isNewline {
  207|      0|                advanceIndex()
  208|      0|                break
  209|      0|            }
  210|      0|        }
  211|      0|
  212|      0|        return row
  213|      0|    }
  214|       |
  215|      0|    mutating func readTableDelimiter() throws {
  216|      0|        try read("|")
  217|      0|        discardWhitespaces()
  218|      0|    }
  219|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/TextStyle.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal enum TextStyle {
    8|       |    case italic
    9|       |    case bold
   10|       |    case strikethrough
   11|       |}
   12|       |
   13|       |extension TextStyle {
   14|  1.14k|    var htmlTagName: String {
   15|  1.14k|        switch self {
   16|  1.14k|        case .italic: return "em"
   17|  1.14k|        case .bold: return "strong"
   18|  1.14k|        case .strikethrough: return "s"
   19|  1.14k|        }
   20|  1.14k|    }
   21|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/TextStyleMarker.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal final class TextStyleMarker: Readable, HTMLConvertible {
    8|       |    var style: TextStyle
    9|       |    var rawMarkers: String
   10|       |    let characterRange: Range<String.Index>
   11|  1.19k|    var kind: Kind = .opening
   12|       |    var isValid = true
   13|       |    var prefix: Character?
   14|       |    var suffix: Character?
   15|       |
   16|  1.19k|    private init(style: TextStyle, rawMarkers: String, characterRange: Range<String.Index>) {
   17|  1.19k|        self.style = style
   18|  1.19k|        self.rawMarkers = rawMarkers
   19|  1.19k|        self.characterRange = characterRange
   20|  1.19k|    }
   21|       |
   22|  1.19k|    static func read(using reader: inout Reader) throws -> Self {
   23|  1.19k|        let startIndex = reader.currentIndex
   24|  1.19k|
   25|  1.19k|        if reader.currentCharacter.isAny(of: .boldItalicStyleMarkers) {
   26|  1.19k|            let firstMarker = reader.currentCharacter
   27|  1.19k|            reader.advanceIndex()
   28|  1.19k|
   29|  1.19k|            if !reader.didReachEnd, reader.currentCharacter.isAny(of: .boldItalicStyleMarkers) {
   30|    180|                let secondMarker = reader.currentCharacter
   31|    180|                let markers = String([firstMarker, secondMarker])
   32|    180|                reader.advanceIndex()
   33|    180|
   34|    180|                return Self(
   35|    180|                    style: .bold,
   36|    180|                    rawMarkers: markers,
   37|    180|                    characterRange: startIndex..<reader.currentIndex
   38|    180|                )
   39|  1.01k|            }
   40|  1.01k|
   41|  1.01k|            return Self(
   42|  1.01k|                style: .italic,
   43|  1.01k|                rawMarkers: String(firstMarker),
   44|  1.01k|                characterRange: startIndex..<reader.currentIndex
   45|  1.01k|            )
   46|  1.19k|        }
   47|      0|
   48|      0|        try reader.read("~")
   49|      0|        try reader.read("~")
   50|      0|
   51|      0|        return Self(
   52|      0|            style: .strikethrough,
   53|      0|            rawMarkers: "~~",
   54|      0|            characterRange: startIndex..<reader.currentIndex
   55|      0|        )
   56|  1.19k|    }
   57|       |
   58|       |    func html(usingURLs urls: NamedURLCollection,
   59|  1.19k|              modifiers: ModifierCollection) -> String {
   60|  1.19k|        guard isValid else { return rawMarkers }
   61|  1.14k|
   62|  1.14k|        let leadingTag: String
   63|  1.14k|
   64|  1.14k|        switch kind {
   65|  1.14k|        case .opening: leadingTag = "<"
   66|  1.14k|        case .closing: leadingTag = "</"
   67|  1.14k|        }
   68|  1.14k|
   69|  1.14k|        let prefix = self.prefix.map(String.init) ?? ""
   70|  1.14k|        let suffix = self.suffix.map(String.init) ?? ""
   71|  1.14k|        return prefix + leadingTag + style.htmlTagName + ">" + suffix
   72|  1.14k|    }
   73|       |}
   74|       |
   75|       |extension TextStyleMarker {
   76|       |    enum Kind {
   77|       |        case opening
   78|       |        case closing
   79|       |    }
   80|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/ink/Sources/Ink/Internal/URLDeclaration.swift:
    1|       |/**
    2|       |*  Ink
    3|       |*  Copyright (c) John Sundell 2019
    4|       |*  MIT license, see LICENSE file for details
    5|       |*/
    6|       |
    7|       |internal struct URLDeclaration: Readable {
    8|       |    var name: String
    9|       |    var url: URL
   10|       |
   11|     16|    static func read(using reader: inout Reader) throws -> Self {
   12|     16|        try reader.read("[")
   13|     16|        let name = try reader.read(until: "]")
   14|     16|        try reader.read(":")
   15|     16|        try reader.readWhitespaces()
   16|     16|        let url = reader.readUntilEndOfLine()
   17|     16|
   18|     16|        return URLDeclaration(name: name.lowercased(), url: url)
   19|     16|    }
   20|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/swift-html-entities/Sources/HTMLEntities/Constants.swift:
    1|       |/*
    2|       | * Copyright IBM Corporation 2016, 2017
    3|       | *
    4|       | * Licensed under the Apache License, Version 2.0 (the "License");
    5|       | * you may not use this file except in compliance with the License.
    6|       | * You may obtain a copy of the License at
    7|       | *
    8|       | * http://www.apache.org/licenses/LICENSE-2.0
    9|       | *
   10|       | * Unless required by applicable law or agreed to in writing, software
   11|       | * distributed under the License is distributed on an "AS IS" BASIS,
   12|       | * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   13|       | * See the License for the specific language governing permissions and
   14|       | * limitations under the License.
   15|       | */
   16|       |
   17|       |// Linux toolchain required Foundation to resolve `String` class's `hasSuffix()` function
   18|       |// before Swift 4.2.
   19|       |#if !swift(>=4.2) && os(Linux)
   20|       |    import Foundation
   21|       |#endif
   22|       |
   23|       |// Replacement character U+FFFD
   24|       |let replacementCharacterAsUInt32: UInt32 = 0xFFFD
   25|       |
   26|       |// Generated from
   27|       |// https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
   28|       |// "Find the row with that number in the first column, and return a character token for
   29|       |// the Unicode character given in the second column of that row."
   30|       |let deprecatedNumericDecodeMap: [UInt32: UInt32] = [
   31|       |    0x00:0xFFFD,0x80:0x20AC,0x82:0x201A,0x83:0x0192,0x84:0x201E,0x85:0x2026,0x86:0x2020,
   32|       |    0x87:0x2021,0x88:0x02C6,0x89:0x2030,0x8A:0x0160,0x8B:0x2039,0x8C:0x0152,0x8E:0x017D,
   33|       |    0x91:0x2018,0x92:0x2019,0x93:0x201C,0x94:0x201D,0x95:0x2022,0x96:0x2013,0x97:0x2014,
   34|       |    0x98:0x02DC,0x99:0x2122,0x9A:0x0161,0x9B:0x203A,0x9C:0x0153,0x9E:0x017E,0x9F:0x0178
   35|       |]
   36|       |
   37|       |// Generated from
   38|       |// https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
   39|       |// "[I]f the number is in the range 0x0001 to 0x0008, 0x000D to 0x001F, 0x007F
   40|       |// to 0x009F, 0xFDD0 to 0xFDEF, or is one of 0x000B, 0xFFFE, 0xFFFF, 0x1FFFE,
   41|       |// 0x1FFFF, 0x2FFFE, 0x2FFFF, 0x3FFFE, 0x3FFFF, 0x4FFFE, 0x4FFFF, 0x5FFFE,
   42|       |// 0x5FFFF, 0x6FFFE, 0x6FFFF, 0x7FFFE, 0x7FFFF, 0x8FFFE, 0x8FFFF, 0x9FFFE,
   43|       |// 0x9FFFF, 0xAFFFE, 0xAFFFF, 0xBFFFE, 0xBFFFF, 0xCFFFE, 0xCFFFF, 0xDFFFE,
   44|       |// 0xDFFFF, 0xEFFFE, 0xEFFFF, 0xFFFFE, 0xFFFFF, 0x10FFFE, or 0x10FFFF, then
   45|       |// this is a parse error."
   46|       |let disallowedNumericReferences: Set<UInt32> = [
   47|       |    0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0xB,0xD,0xE,0xF,0x10,0x11,0x12,0x13,0x14,0x15,0x16,
   48|       |    0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0xFDD0,0xFDD1,0xFDD2,0xFDD3,0xFDD4,
   49|       |    0xFDD5,0xFDD6,0xFDD7,0xFDD8,0xFDD9,0xFDDA,0xFDDB,0xFDDC,0xFDDD,0xFDDE,0xFDDF,0xFDE0,
   50|       |    0xFDE1,0xFDE2,0xFDE3,0xFDE4,0xFDE5,0xFDE6,0xFDE7,0xFDE8,0xFDE9,0xFDEA,0xFDEB,0xFDEC,
   51|       |    0xFDED,0xFDEE,0xFDEF,0xFFFE,0xFFFF,0x1FFFE,0x1FFFF,0x2FFFE,0x2FFFF,0x3FFFE,0x3FFFF,
   52|       |    0x4FFFE,0x4FFFF,0x5FFFE,0x5FFFF,0x6FFFE,0x6FFFF,0x7FFFE,0x7FFFF,0x8FFFE,0x8FFFF,
   53|       |    0x9FFFE,0x9FFFF,0xAFFFE,0xAFFFF,0xBFFFE,0xBFFFF,0xCFFFE,0xCFFFF,0xDFFFE,0xDFFFF,
   54|       |    0xEFFFE,0xEFFFF,0xFFFFE,0xFFFFF,0x10FFFE,0x10FFFF
   55|       |]
   56|       |
   57|       |// Only encode to named character references that end with ;
   58|       |// If multiple exists for a given character, i.e., 'AMP;' and 'amp;', pick the one
   59|       |// that is shorter and/or all lowercase
   60|      0|let namedCharactersEncodeMap = namedCharactersDecodeMap.inverting() {
   61|      0|    existing, new in
   62|      0|    let isExistingLegacy = !existing.hasSuffix(";")
   63|      0|    let isNewLegacy = !new.hasSuffix(";")
   64|      0|
   65|      0|    #if swift(>=3.2)
   66|      0|        let existingCount = existing.count
   67|      0|        let newCount = new.count
   68|      0|    #else
   69|      0|        let existingCount = existing.characters.count
   70|      0|        let newCount = new.characters.count
   71|      0|    #endif
   72|      0|
   73|      0|    if isExistingLegacy && !isNewLegacy {
   74|      0|        // prefer non-legacy
   75|      0|        return new
   76|      0|    }
   77|      0|
   78|      0|    if !isExistingLegacy && isNewLegacy {
   79|      0|        // prefer non-legacy
   80|      0|        return existing
   81|      0|    }
   82|      0|
   83|      0|    if existingCount < newCount {
   84|      0|        // if both are same type, prefer shorter name
   85|      0|        return existing
   86|      0|    }
   87|      0|
   88|      0|    if newCount < existingCount {
   89|      0|        // if both are same type, prefer shorter name
   90|      0|        return new
   91|      0|    }
   92|      0|
   93|      0|    if new == new.lowercased() {
   94|      0|        // if both are same type and same length, prefer lowercase name
   95|      0|        return new
   96|      0|    }
   97|      0|
   98|      0|    // new isn't better than existing
   99|      0|    // return existing
  100|      0|    return existing
  101|      0|}
  102|       |
  103|       |// Entities that map to more than one character in Swift
  104|       |// E.g., their decoded form spans more than one extended grapheme cluster
  105|       |let specialNamedCharactersDecodeMap: [String: String] = [
  106|       |    "fjlig;":"\u{66}\u{6A}",
  107|       |    "ThickSpace;":"\u{205F}\u{200A}"
  108|       |]
  109|       |
  110|       |// Range of string lengths of legacy named characters
  111|       |// Should be 2...6, but generate statically to avoid hardcoding numbers
  112|      0|let legacyNamedCharactersLengthRange: CountableClosedRange<Int> = { () -> CountableClosedRange<Int> in
  113|      0|    var min = Int.max, max = Int.min
  114|      0|
  115|      0|    for (name, _) in legacyNamedCharactersDecodeMap {
  116|      0|        #if swift(>=3.2)
  117|      0|            let length = name.count
  118|      0|        #else
  119|      0|            let length = name.characters.count
  120|      0|        #endif
  121|      0|        min = length < min ? length : min
  122|      0|        max = length > max ? length : max
  123|      0|    }
  124|      0|
  125|      0|    return min...max
  126|      0|}()
  127|       |
  128|       |// Named character references that may be parsed without an ending ;
  129|       |let legacyNamedCharactersDecodeMap: [String: Character] = [
  130|       |    "Aacute":Character(Unicode.Scalar(0xC1)!),"aacute":Character(Unicode.Scalar(0xE1)!),"Acirc":Character(Unicode.Scalar(0xC2)!),"acirc":Character(Unicode.Scalar(0xE2)!),
  131|       |    "acute":Character(Unicode.Scalar(0xB4)!),"AElig":Character(Unicode.Scalar(0xC6)!),"aelig":Character(Unicode.Scalar(0xE6)!),"Agrave":Character(Unicode.Scalar(0xC0)!),
  132|       |    "agrave":Character(Unicode.Scalar(0xE0)!),"AMP":Character(Unicode.Scalar(0x26)!),"amp":Character(Unicode.Scalar(0x26)!),"Aring":Character(Unicode.Scalar(0xC5)!),
  133|       |    "aring":Character(Unicode.Scalar(0xE5)!),"Atilde":Character(Unicode.Scalar(0xC3)!),"atilde":Character(Unicode.Scalar(0xE3)!),"Auml":Character(Unicode.Scalar(0xC4)!),
  134|       |    "auml":Character(Unicode.Scalar(0xE4)!),"brvbar":Character(Unicode.Scalar(0xA6)!),"Ccedil":Character(Unicode.Scalar(0xC7)!),"ccedil":Character(Unicode.Scalar(0xE7)!),
  135|       |    "cedil":Character(Unicode.Scalar(0xB8)!),"cent":Character(Unicode.Scalar(0xA2)!),"COPY":Character(Unicode.Scalar(0xA9)!),"copy":Character(Unicode.Scalar(0xA9)!),
  136|       |    "curren":Character(Unicode.Scalar(0xA4)!),"deg":Character(Unicode.Scalar(0xB0)!),"divide":Character(Unicode.Scalar(0xF7)!),"Eacute":Character(Unicode.Scalar(0xC9)!),
  137|       |    "eacute":Character(Unicode.Scalar(0xE9)!),"Ecirc":Character(Unicode.Scalar(0xCA)!),"ecirc":Character(Unicode.Scalar(0xEA)!),"Egrave":Character(Unicode.Scalar(0xC8)!),
  138|       |    "egrave":Character(Unicode.Scalar(0xE8)!),"ETH":Character(Unicode.Scalar(0xD0)!),"eth":Character(Unicode.Scalar(0xF0)!),"Euml":Character(Unicode.Scalar(0xCB)!),
  139|       |    "euml":Character(Unicode.Scalar(0xEB)!),"frac12":Character(Unicode.Scalar(0xBD)!),"frac14":Character(Unicode.Scalar(0xBC)!),"frac34":Character(Unicode.Scalar(0xBE)!),
  140|       |    "GT":Character(Unicode.Scalar(0x3E)!),"gt":Character(Unicode.Scalar(0x3E)!),"Iacute":Character(Unicode.Scalar(0xCD)!),"iacute":Character(Unicode.Scalar(0xED)!),
  141|       |    "Icirc":Character(Unicode.Scalar(0xCE)!),"icirc":Character(Unicode.Scalar(0xEE)!),"iexcl":Character(Unicode.Scalar(0xA1)!),"Igrave":Character(Unicode.Scalar(0xCC)!),
  142|       |    "igrave":Character(Unicode.Scalar(0xEC)!),"iquest":Character(Unicode.Scalar(0xBF)!),"Iuml":Character(Unicode.Scalar(0xCF)!),"iuml":Character(Unicode.Scalar(0xEF)!),
  143|       |    "laquo":Character(Unicode.Scalar(0xAB)!),"LT":Character(Unicode.Scalar(0x3C)!),"lt":Character(Unicode.Scalar(0x3C)!),"macr":Character(Unicode.Scalar(0xAF)!),
  144|       |    "micro":Character(Unicode.Scalar(0xB5)!),"middot":Character(Unicode.Scalar(0xB7)!),"nbsp":Character(Unicode.Scalar(0xA0)!),"not":Character(Unicode.Scalar(0xAC)!),
  145|       |    "Ntilde":Character(Unicode.Scalar(0xD1)!),"ntilde":Character(Unicode.Scalar(0xF1)!),"Oacute":Character(Unicode.Scalar(0xD3)!),"oacute":Character(Unicode.Scalar(0xF3)!),
  146|       |    "Ocirc":Character(Unicode.Scalar(0xD4)!),"ocirc":Character(Unicode.Scalar(0xF4)!),"Ograve":Character(Unicode.Scalar(0xD2)!),"ograve":Character(Unicode.Scalar(0xF2)!),
  147|       |    "ordf":Character(Unicode.Scalar(0xAA)!),"ordm":Character(Unicode.Scalar(0xBA)!),"Oslash":Character(Unicode.Scalar(0xD8)!),"oslash":Character(Unicode.Scalar(0xF8)!),
  148|       |    "Otilde":Character(Unicode.Scalar(0xD5)!),"otilde":Character(Unicode.Scalar(0xF5)!),"Ouml":Character(Unicode.Scalar(0xD6)!),"ouml":Character(Unicode.Scalar(0xF6)!),
  149|       |    "para":Character(Unicode.Scalar(0xB6)!),"plusmn":Character(Unicode.Scalar(0xB1)!),"pound":Character(Unicode.Scalar(0xA3)!),"QUOT":Character(Unicode.Scalar(0x22)!),
  150|       |    "quot":Character(Unicode.Scalar(0x22)!),"raquo":Character(Unicode.Scalar(0xBB)!),"REG":Character(Unicode.Scalar(0xAE)!),"reg":Character(Unicode.Scalar(0xAE)!),
  151|       |    "sect":Character(Unicode.Scalar(0xA7)!),"shy":Character(Unicode.Scalar(0xAD)!),"sup1":Character(Unicode.Scalar(0xB9)!),"sup2":Character(Unicode.Scalar(0xB2)!),
  152|       |    "sup3":Character(Unicode.Scalar(0xB3)!),"szlig":Character(Unicode.Scalar(0xDF)!),"THORN":Character(Unicode.Scalar(0xDE)!),"thorn":Character(Unicode.Scalar(0xFE)!),
  153|       |    "times":Character(Unicode.Scalar(0xD7)!),"Uacute":Character(Unicode.Scalar(0xDA)!),"uacute":Character(Unicode.Scalar(0xFA)!),"Ucirc":Character(Unicode.Scalar(0xDB)!),
  154|       |    "ucirc":Character(Unicode.Scalar(0xFB)!),"Ugrave":Character(Unicode.Scalar(0xD9)!),"ugrave":Character(Unicode.Scalar(0xF9)!),"uml":Character(Unicode.Scalar(0xA8)!),
  155|       |    "Uuml":Character(Unicode.Scalar(0xDC)!),"uuml":Character(Unicode.Scalar(0xFC)!),"Yacute":Character(Unicode.Scalar(0xDD)!),"yacute":Character(Unicode.Scalar(0xFD)!),
  156|       |    "yen":Character(Unicode.Scalar(0xA5)!),"yuml":Character(Unicode.Scalar(0xFF)!)
  157|       |]
  158|       |
  159|       |// Split map into two halves; otherwise, segmentation fault when compiling
  160|       |let namedCharactersDecodeMap = namedCharactersDecodeMap1.updating(namedCharactersDecodeMap2)
  161|       |
  162|       |let namedCharactersDecodeMap1: [String: Character] = [
  163|       |    "Aacute;":Character(Unicode.Scalar(0xC1)!),"aacute;":Character(Unicode.Scalar(0xE1)!),"Abreve;":Character(Unicode.Scalar(0x102)!),"abreve;":Character(Unicode.Scalar(0x103)!),
  164|       |    "ac;":Character(Unicode.Scalar(0x223E)!),"acd;":Character(Unicode.Scalar(0x223F)!),"acE;":"\u{223E}\u{333}","Acirc;":Character(Unicode.Scalar(0xC2)!),
  165|       |    "acirc;":Character(Unicode.Scalar(0xE2)!),"acute;":Character(Unicode.Scalar(0xB4)!),"Acy;":Character(Unicode.Scalar(0x410)!),"acy;":Character(Unicode.Scalar(0x430)!),
  166|       |    "AElig;":Character(Unicode.Scalar(0xC6)!),"aelig;":Character(Unicode.Scalar(0xE6)!),"af;":Character(Unicode.Scalar(0x2061)!),"Afr;":Character(Unicode.Scalar(0x1D504)!),
  167|       |    "afr;":Character(Unicode.Scalar(0x1D51E)!),"Agrave;":Character(Unicode.Scalar(0xC0)!),"agrave;":Character(Unicode.Scalar(0xE0)!),"alefsym;":Character(Unicode.Scalar(0x2135)!),
  168|       |    "aleph;":Character(Unicode.Scalar(0x2135)!),"Alpha;":Character(Unicode.Scalar(0x391)!),"alpha;":Character(Unicode.Scalar(0x3B1)!),"Amacr;":Character(Unicode.Scalar(0x100)!),
  169|       |    "amacr;":Character(Unicode.Scalar(0x101)!),"amalg;":Character(Unicode.Scalar(0x2A3F)!),"AMP;":Character(Unicode.Scalar(0x26)!),"amp;":Character(Unicode.Scalar(0x26)!),
  170|       |    "And;":Character(Unicode.Scalar(0x2A53)!),"and;":Character(Unicode.Scalar(0x2227)!),"andand;":Character(Unicode.Scalar(0x2A55)!),"andd;":Character(Unicode.Scalar(0x2A5C)!),
  171|       |    "andslope;":Character(Unicode.Scalar(0x2A58)!),"andv;":Character(Unicode.Scalar(0x2A5A)!),"ang;":Character(Unicode.Scalar(0x2220)!),"ange;":Character(Unicode.Scalar(0x29A4)!),
  172|       |    "angle;":Character(Unicode.Scalar(0x2220)!),"angmsd;":Character(Unicode.Scalar(0x2221)!),"angmsdaa;":Character(Unicode.Scalar(0x29A8)!),"angmsdab;":Character(Unicode.Scalar(0x29A9)!),
  173|       |    "angmsdac;":Character(Unicode.Scalar(0x29AA)!),"angmsdad;":Character(Unicode.Scalar(0x29AB)!),"angmsdae;":Character(Unicode.Scalar(0x29AC)!),"angmsdaf;":Character(Unicode.Scalar(0x29AD)!),
  174|       |    "angmsdag;":Character(Unicode.Scalar(0x29AE)!),"angmsdah;":Character(Unicode.Scalar(0x29AF)!),"angrt;":Character(Unicode.Scalar(0x221F)!),"angrtvb;":Character(Unicode.Scalar(0x22BE)!),
  175|       |    "angrtvbd;":Character(Unicode.Scalar(0x299D)!),"angsph;":Character(Unicode.Scalar(0x2222)!),"angst;":Character(Unicode.Scalar(0xC5)!),"angzarr;":Character(Unicode.Scalar(0x237C)!),
  176|       |    "Aogon;":Character(Unicode.Scalar(0x104)!),"aogon;":Character(Unicode.Scalar(0x105)!),"Aopf;":Character(Unicode.Scalar(0x1D538)!),"aopf;":Character(Unicode.Scalar(0x1D552)!),
  177|       |    "ap;":Character(Unicode.Scalar(0x2248)!),"apacir;":Character(Unicode.Scalar(0x2A6F)!),"apE;":Character(Unicode.Scalar(0x2A70)!),"ape;":Character(Unicode.Scalar(0x224A)!),
  178|       |    "apid;":Character(Unicode.Scalar(0x224B)!),"apos;":Character(Unicode.Scalar(0x27)!),"ApplyFunction;":Character(Unicode.Scalar(0x2061)!),"approx;":Character(Unicode.Scalar(0x2248)!),
  179|       |    "approxeq;":Character(Unicode.Scalar(0x224A)!),"Aring;":Character(Unicode.Scalar(0xC5)!),"aring;":Character(Unicode.Scalar(0xE5)!),"Ascr;":Character(Unicode.Scalar(0x1D49C)!),
  180|       |    "ascr;":Character(Unicode.Scalar(0x1D4B6)!),"Assign;":Character(Unicode.Scalar(0x2254)!),"ast;":Character(Unicode.Scalar(0x2A)!),"asymp;":Character(Unicode.Scalar(0x2248)!),
  181|       |    "asympeq;":Character(Unicode.Scalar(0x224D)!),"Atilde;":Character(Unicode.Scalar(0xC3)!),"atilde;":Character(Unicode.Scalar(0xE3)!),"Auml;":Character(Unicode.Scalar(0xC4)!),
  182|       |    "auml;":Character(Unicode.Scalar(0xE4)!),"awconint;":Character(Unicode.Scalar(0x2233)!),"awint;":Character(Unicode.Scalar(0x2A11)!),"backcong;":Character(Unicode.Scalar(0x224C)!),
  183|       |    "backepsilon;":Character(Unicode.Scalar(0x3F6)!),"backprime;":Character(Unicode.Scalar(0x2035)!),"backsim;":Character(Unicode.Scalar(0x223D)!),"backsimeq;":Character(Unicode.Scalar(0x22CD)!),
  184|       |    "Backslash;":Character(Unicode.Scalar(0x2216)!),"Barv;":Character(Unicode.Scalar(0x2AE7)!),"barvee;":Character(Unicode.Scalar(0x22BD)!),"Barwed;":Character(Unicode.Scalar(0x2306)!),
  185|       |    "barwed;":Character(Unicode.Scalar(0x2305)!),"barwedge;":Character(Unicode.Scalar(0x2305)!),"bbrk;":Character(Unicode.Scalar(0x23B5)!),"bbrktbrk;":Character(Unicode.Scalar(0x23B6)!),
  186|       |    "bcong;":Character(Unicode.Scalar(0x224C)!),"Bcy;":Character(Unicode.Scalar(0x411)!),"bcy;":Character(Unicode.Scalar(0x431)!),"bdquo;":Character(Unicode.Scalar(0x201E)!),
  187|       |    "becaus;":Character(Unicode.Scalar(0x2235)!),"Because;":Character(Unicode.Scalar(0x2235)!),"because;":Character(Unicode.Scalar(0x2235)!),"bemptyv;":Character(Unicode.Scalar(0x29B0)!),
  188|       |    "bepsi;":Character(Unicode.Scalar(0x3F6)!),"bernou;":Character(Unicode.Scalar(0x212C)!),"Bernoullis;":Character(Unicode.Scalar(0x212C)!),"Beta;":Character(Unicode.Scalar(0x392)!),
  189|       |    "beta;":Character(Unicode.Scalar(0x3B2)!),"beth;":Character(Unicode.Scalar(0x2136)!),"between;":Character(Unicode.Scalar(0x226C)!),"Bfr;":Character(Unicode.Scalar(0x1D505)!),
  190|       |    "bfr;":Character(Unicode.Scalar(0x1D51F)!),"bigcap;":Character(Unicode.Scalar(0x22C2)!),"bigcirc;":Character(Unicode.Scalar(0x25EF)!),"bigcup;":Character(Unicode.Scalar(0x22C3)!),
  191|       |    "bigodot;":Character(Unicode.Scalar(0x2A00)!),"bigoplus;":Character(Unicode.Scalar(0x2A01)!),"bigotimes;":Character(Unicode.Scalar(0x2A02)!),"bigsqcup;":Character(Unicode.Scalar(0x2A06)!),
  192|       |    "bigstar;":Character(Unicode.Scalar(0x2605)!),"bigtriangledown;":Character(Unicode.Scalar(0x25BD)!),"bigtriangleup;":Character(Unicode.Scalar(0x25B3)!),"biguplus;":Character(Unicode.Scalar(0x2A04)!),
  193|       |    "bigvee;":Character(Unicode.Scalar(0x22C1)!),"bigwedge;":Character(Unicode.Scalar(0x22C0)!),"bkarow;":Character(Unicode.Scalar(0x290D)!),"blacklozenge;":Character(Unicode.Scalar(0x29EB)!),
  194|       |    "blacksquare;":Character(Unicode.Scalar(0x25AA)!),"blacktriangle;":Character(Unicode.Scalar(0x25B4)!),"blacktriangledown;":Character(Unicode.Scalar(0x25BE)!),"blacktriangleleft;":Character(Unicode.Scalar(0x25C2)!),
  195|       |    "blacktriangleright;":Character(Unicode.Scalar(0x25B8)!),"blank;":Character(Unicode.Scalar(0x2423)!),"blk12;":Character(Unicode.Scalar(0x2592)!),"blk14;":Character(Unicode.Scalar(0x2591)!),
  196|       |    "blk34;":Character(Unicode.Scalar(0x2593)!),"block;":Character(Unicode.Scalar(0x2588)!),"bne;":"\u{3D}\u{20E5}","bnequiv;":"\u{2261}\u{20E5}",
  197|       |    "bNot;":Character(Unicode.Scalar(0x2AED)!),"bnot;":Character(Unicode.Scalar(0x2310)!),"Bopf;":Character(Unicode.Scalar(0x1D539)!),"bopf;":Character(Unicode.Scalar(0x1D553)!),
  198|       |    "bot;":Character(Unicode.Scalar(0x22A5)!),"bottom;":Character(Unicode.Scalar(0x22A5)!),"bowtie;":Character(Unicode.Scalar(0x22C8)!),"boxbox;":Character(Unicode.Scalar(0x29C9)!),
  199|       |    "boxDL;":Character(Unicode.Scalar(0x2557)!),"boxDl;":Character(Unicode.Scalar(0x2556)!),"boxdL;":Character(Unicode.Scalar(0x2555)!),"boxdl;":Character(Unicode.Scalar(0x2510)!),
  200|       |    "boxDR;":Character(Unicode.Scalar(0x2554)!),"boxDr;":Character(Unicode.Scalar(0x2553)!),"boxdR;":Character(Unicode.Scalar(0x2552)!),"boxdr;":Character(Unicode.Scalar(0x250C)!),
  201|       |    "boxH;":Character(Unicode.Scalar(0x2550)!),"boxh;":Character(Unicode.Scalar(0x2500)!),"boxHD;":Character(Unicode.Scalar(0x2566)!),"boxHd;":Character(Unicode.Scalar(0x2564)!),
  202|       |    "boxhD;":Character(Unicode.Scalar(0x2565)!),"boxhd;":Character(Unicode.Scalar(0x252C)!),"boxHU;":Character(Unicode.Scalar(0x2569)!),"boxHu;":Character(Unicode.Scalar(0x2567)!),
  203|       |    "boxhU;":Character(Unicode.Scalar(0x2568)!),"boxhu;":Character(Unicode.Scalar(0x2534)!),"boxminus;":Character(Unicode.Scalar(0x229F)!),"boxplus;":Character(Unicode.Scalar(0x229E)!),
  204|       |    "boxtimes;":Character(Unicode.Scalar(0x22A0)!),"boxUL;":Character(Unicode.Scalar(0x255D)!),"boxUl;":Character(Unicode.Scalar(0x255C)!),"boxuL;":Character(Unicode.Scalar(0x255B)!),
  205|       |    "boxul;":Character(Unicode.Scalar(0x2518)!),"boxUR;":Character(Unicode.Scalar(0x255A)!),"boxUr;":Character(Unicode.Scalar(0x2559)!),"boxuR;":Character(Unicode.Scalar(0x2558)!),
  206|       |    "boxur;":Character(Unicode.Scalar(0x2514)!),"boxV;":Character(Unicode.Scalar(0x2551)!),"boxv;":Character(Unicode.Scalar(0x2502)!),"boxVH;":Character(Unicode.Scalar(0x256C)!),
  207|       |    "boxVh;":Character(Unicode.Scalar(0x256B)!),"boxvH;":Character(Unicode.Scalar(0x256A)!),"boxvh;":Character(Unicode.Scalar(0x253C)!),"boxVL;":Character(Unicode.Scalar(0x2563)!),
  208|       |    "boxVl;":Character(Unicode.Scalar(0x2562)!),"boxvL;":Character(Unicode.Scalar(0x2561)!),"boxvl;":Character(Unicode.Scalar(0x2524)!),"boxVR;":Character(Unicode.Scalar(0x2560)!),
  209|       |    "boxVr;":Character(Unicode.Scalar(0x255F)!),"boxvR;":Character(Unicode.Scalar(0x255E)!),"boxvr;":Character(Unicode.Scalar(0x251C)!),"bprime;":Character(Unicode.Scalar(0x2035)!),
  210|       |    "Breve;":Character(Unicode.Scalar(0x2D8)!),"breve;":Character(Unicode.Scalar(0x2D8)!),"brvbar;":Character(Unicode.Scalar(0xA6)!),"Bscr;":Character(Unicode.Scalar(0x212C)!),
  211|       |    "bscr;":Character(Unicode.Scalar(0x1D4B7)!),"bsemi;":Character(Unicode.Scalar(0x204F)!),"bsim;":Character(Unicode.Scalar(0x223D)!),"bsime;":Character(Unicode.Scalar(0x22CD)!),
  212|       |    "bsol;":Character(Unicode.Scalar(0x5C)!),"bsolb;":Character(Unicode.Scalar(0x29C5)!),"bsolhsub;":Character(Unicode.Scalar(0x27C8)!),"bull;":Character(Unicode.Scalar(0x2022)!),
  213|       |    "bullet;":Character(Unicode.Scalar(0x2022)!),"bump;":Character(Unicode.Scalar(0x224E)!),"bumpE;":Character(Unicode.Scalar(0x2AAE)!),"bumpe;":Character(Unicode.Scalar(0x224F)!),
  214|       |    "Bumpeq;":Character(Unicode.Scalar(0x224E)!),"bumpeq;":Character(Unicode.Scalar(0x224F)!),"Cacute;":Character(Unicode.Scalar(0x106)!),"cacute;":Character(Unicode.Scalar(0x107)!),
  215|       |    "Cap;":Character(Unicode.Scalar(0x22D2)!),"cap;":Character(Unicode.Scalar(0x2229)!),"capand;":Character(Unicode.Scalar(0x2A44)!),"capbrcup;":Character(Unicode.Scalar(0x2A49)!),
  216|       |    "capcap;":Character(Unicode.Scalar(0x2A4B)!),"capcup;":Character(Unicode.Scalar(0x2A47)!),"capdot;":Character(Unicode.Scalar(0x2A40)!),"CapitalDifferentialD;":Character(Unicode.Scalar(0x2145)!),
  217|       |    "caps;":"\u{2229}\u{FE00}","caret;":Character(Unicode.Scalar(0x2041)!),"caron;":Character(Unicode.Scalar(0x2C7)!),"Cayleys;":Character(Unicode.Scalar(0x212D)!),
  218|       |    "ccaps;":Character(Unicode.Scalar(0x2A4D)!),"Ccaron;":Character(Unicode.Scalar(0x10C)!),"ccaron;":Character(Unicode.Scalar(0x10D)!),"Ccedil;":Character(Unicode.Scalar(0xC7)!),
  219|       |    "ccedil;":Character(Unicode.Scalar(0xE7)!),"Ccirc;":Character(Unicode.Scalar(0x108)!),"ccirc;":Character(Unicode.Scalar(0x109)!),"Cconint;":Character(Unicode.Scalar(0x2230)!),
  220|       |    "ccups;":Character(Unicode.Scalar(0x2A4C)!),"ccupssm;":Character(Unicode.Scalar(0x2A50)!),"Cdot;":Character(Unicode.Scalar(0x10A)!),"cdot;":Character(Unicode.Scalar(0x10B)!),
  221|       |    "cedil;":Character(Unicode.Scalar(0xB8)!),"Cedilla;":Character(Unicode.Scalar(0xB8)!),"cemptyv;":Character(Unicode.Scalar(0x29B2)!),"cent;":Character(Unicode.Scalar(0xA2)!),
  222|       |    "CenterDot;":Character(Unicode.Scalar(0xB7)!),"centerdot;":Character(Unicode.Scalar(0xB7)!),"Cfr;":Character(Unicode.Scalar(0x212D)!),"cfr;":Character(Unicode.Scalar(0x1D520)!),
  223|       |    "CHcy;":Character(Unicode.Scalar(0x427)!),"chcy;":Character(Unicode.Scalar(0x447)!),"check;":Character(Unicode.Scalar(0x2713)!),"checkmark;":Character(Unicode.Scalar(0x2713)!),
  224|       |    "Chi;":Character(Unicode.Scalar(0x3A7)!),"chi;":Character(Unicode.Scalar(0x3C7)!),"cir;":Character(Unicode.Scalar(0x25CB)!),"circ;":Character(Unicode.Scalar(0x2C6)!),
  225|       |    "circeq;":Character(Unicode.Scalar(0x2257)!),"circlearrowleft;":Character(Unicode.Scalar(0x21BA)!),"circlearrowright;":Character(Unicode.Scalar(0x21BB)!),"circledast;":Character(Unicode.Scalar(0x229B)!),
  226|       |    "circledcirc;":Character(Unicode.Scalar(0x229A)!),"circleddash;":Character(Unicode.Scalar(0x229D)!),"CircleDot;":Character(Unicode.Scalar(0x2299)!),"circledR;":Character(Unicode.Scalar(0xAE)!),
  227|       |    "circledS;":Character(Unicode.Scalar(0x24C8)!),"CircleMinus;":Character(Unicode.Scalar(0x2296)!),"CirclePlus;":Character(Unicode.Scalar(0x2295)!),"CircleTimes;":Character(Unicode.Scalar(0x2297)!),
  228|       |    "cirE;":Character(Unicode.Scalar(0x29C3)!),"cire;":Character(Unicode.Scalar(0x2257)!),"cirfnint;":Character(Unicode.Scalar(0x2A10)!),"cirmid;":Character(Unicode.Scalar(0x2AEF)!),
  229|       |    "cirscir;":Character(Unicode.Scalar(0x29C2)!),"ClockwiseContourIntegral;":Character(Unicode.Scalar(0x2232)!),"CloseCurlyDoubleQuote;":Character(Unicode.Scalar(0x201D)!),"CloseCurlyQuote;":Character(Unicode.Scalar(0x2019)!),
  230|       |    "clubs;":Character(Unicode.Scalar(0x2663)!),"clubsuit;":Character(Unicode.Scalar(0x2663)!),"Colon;":Character(Unicode.Scalar(0x2237)!),"colon;":Character(Unicode.Scalar(0x3A)!),
  231|       |    "Colone;":Character(Unicode.Scalar(0x2A74)!),"colone;":Character(Unicode.Scalar(0x2254)!),"coloneq;":Character(Unicode.Scalar(0x2254)!),"comma;":Character(Unicode.Scalar(0x2C)!),
  232|       |    "commat;":Character(Unicode.Scalar(0x40)!),"comp;":Character(Unicode.Scalar(0x2201)!),"compfn;":Character(Unicode.Scalar(0x2218)!),"complement;":Character(Unicode.Scalar(0x2201)!),
  233|       |    "complexes;":Character(Unicode.Scalar(0x2102)!),"cong;":Character(Unicode.Scalar(0x2245)!),"congdot;":Character(Unicode.Scalar(0x2A6D)!),"Congruent;":Character(Unicode.Scalar(0x2261)!),
  234|       |    "Conint;":Character(Unicode.Scalar(0x222F)!),"conint;":Character(Unicode.Scalar(0x222E)!),"ContourIntegral;":Character(Unicode.Scalar(0x222E)!),"Copf;":Character(Unicode.Scalar(0x2102)!),
  235|       |    "copf;":Character(Unicode.Scalar(0x1D554)!),"coprod;":Character(Unicode.Scalar(0x2210)!),"Coproduct;":Character(Unicode.Scalar(0x2210)!),"COPY;":Character(Unicode.Scalar(0xA9)!),
  236|       |    "copy;":Character(Unicode.Scalar(0xA9)!),"copysr;":Character(Unicode.Scalar(0x2117)!),"CounterClockwiseContourIntegral;":Character(Unicode.Scalar(0x2233)!),"crarr;":Character(Unicode.Scalar(0x21B5)!),
  237|       |    "Cross;":Character(Unicode.Scalar(0x2A2F)!),"cross;":Character(Unicode.Scalar(0x2717)!),"Cscr;":Character(Unicode.Scalar(0x1D49E)!),"cscr;":Character(Unicode.Scalar(0x1D4B8)!),
  238|       |    "csub;":Character(Unicode.Scalar(0x2ACF)!),"csube;":Character(Unicode.Scalar(0x2AD1)!),"csup;":Character(Unicode.Scalar(0x2AD0)!),"csupe;":Character(Unicode.Scalar(0x2AD2)!),
  239|       |    "ctdot;":Character(Unicode.Scalar(0x22EF)!),"cudarrl;":Character(Unicode.Scalar(0x2938)!),"cudarrr;":Character(Unicode.Scalar(0x2935)!),"cuepr;":Character(Unicode.Scalar(0x22DE)!),
  240|       |    "cuesc;":Character(Unicode.Scalar(0x22DF)!),"cularr;":Character(Unicode.Scalar(0x21B6)!),"cularrp;":Character(Unicode.Scalar(0x293D)!),"Cup;":Character(Unicode.Scalar(0x22D3)!),
  241|       |    "cup;":Character(Unicode.Scalar(0x222A)!),"cupbrcap;":Character(Unicode.Scalar(0x2A48)!),"CupCap;":Character(Unicode.Scalar(0x224D)!),"cupcap;":Character(Unicode.Scalar(0x2A46)!),
  242|       |    "cupcup;":Character(Unicode.Scalar(0x2A4A)!),"cupdot;":Character(Unicode.Scalar(0x228D)!),"cupor;":Character(Unicode.Scalar(0x2A45)!),"cups;":"\u{222A}\u{FE00}",
  243|       |    "curarr;":Character(Unicode.Scalar(0x21B7)!),"curarrm;":Character(Unicode.Scalar(0x293C)!),"curlyeqprec;":Character(Unicode.Scalar(0x22DE)!),"curlyeqsucc;":Character(Unicode.Scalar(0x22DF)!),
  244|       |    "curlyvee;":Character(Unicode.Scalar(0x22CE)!),"curlywedge;":Character(Unicode.Scalar(0x22CF)!),"curren;":Character(Unicode.Scalar(0xA4)!),"curvearrowleft;":Character(Unicode.Scalar(0x21B6)!),
  245|       |    "curvearrowright;":Character(Unicode.Scalar(0x21B7)!),"cuvee;":Character(Unicode.Scalar(0x22CE)!),"cuwed;":Character(Unicode.Scalar(0x22CF)!),"cwconint;":Character(Unicode.Scalar(0x2232)!),
  246|       |    "cwint;":Character(Unicode.Scalar(0x2231)!),"cylcty;":Character(Unicode.Scalar(0x232D)!),"Dagger;":Character(Unicode.Scalar(0x2021)!),"dagger;":Character(Unicode.Scalar(0x2020)!),
  247|       |    "daleth;":Character(Unicode.Scalar(0x2138)!),"Darr;":Character(Unicode.Scalar(0x21A1)!),"dArr;":Character(Unicode.Scalar(0x21D3)!),"darr;":Character(Unicode.Scalar(0x2193)!),
  248|       |    "dash;":Character(Unicode.Scalar(0x2010)!),"Dashv;":Character(Unicode.Scalar(0x2AE4)!),"dashv;":Character(Unicode.Scalar(0x22A3)!),"dbkarow;":Character(Unicode.Scalar(0x290F)!),
  249|       |    "dblac;":Character(Unicode.Scalar(0x2DD)!),"Dcaron;":Character(Unicode.Scalar(0x10E)!),"dcaron;":Character(Unicode.Scalar(0x10F)!),"Dcy;":Character(Unicode.Scalar(0x414)!),
  250|       |    "dcy;":Character(Unicode.Scalar(0x434)!),"DD;":Character(Unicode.Scalar(0x2145)!),"dd;":Character(Unicode.Scalar(0x2146)!),"ddagger;":Character(Unicode.Scalar(0x2021)!),
  251|       |    "ddarr;":Character(Unicode.Scalar(0x21CA)!),"DDotrahd;":Character(Unicode.Scalar(0x2911)!),"ddotseq;":Character(Unicode.Scalar(0x2A77)!),"deg;":Character(Unicode.Scalar(0xB0)!),
  252|       |    "Del;":Character(Unicode.Scalar(0x2207)!),"Delta;":Character(Unicode.Scalar(0x394)!),"delta;":Character(Unicode.Scalar(0x3B4)!),"demptyv;":Character(Unicode.Scalar(0x29B1)!),
  253|       |    "dfisht;":Character(Unicode.Scalar(0x297F)!),"Dfr;":Character(Unicode.Scalar(0x1D507)!),"dfr;":Character(Unicode.Scalar(0x1D521)!),"dHar;":Character(Unicode.Scalar(0x2965)!),
  254|       |    "dharl;":Character(Unicode.Scalar(0x21C3)!),"dharr;":Character(Unicode.Scalar(0x21C2)!),"DiacriticalAcute;":Character(Unicode.Scalar(0xB4)!),"DiacriticalDot;":Character(Unicode.Scalar(0x2D9)!),
  255|       |    "DiacriticalDoubleAcute;":Character(Unicode.Scalar(0x2DD)!),"DiacriticalGrave;":Character(Unicode.Scalar(0x60)!),"DiacriticalTilde;":Character(Unicode.Scalar(0x2DC)!),"diam;":Character(Unicode.Scalar(0x22C4)!),
  256|       |    "Diamond;":Character(Unicode.Scalar(0x22C4)!),"diamond;":Character(Unicode.Scalar(0x22C4)!),"diamondsuit;":Character(Unicode.Scalar(0x2666)!),"diams;":Character(Unicode.Scalar(0x2666)!),
  257|       |    "die;":Character(Unicode.Scalar(0xA8)!),"DifferentialD;":Character(Unicode.Scalar(0x2146)!),"digamma;":Character(Unicode.Scalar(0x3DD)!),"disin;":Character(Unicode.Scalar(0x22F2)!),
  258|       |    "div;":Character(Unicode.Scalar(0xF7)!),"divide;":Character(Unicode.Scalar(0xF7)!),"divideontimes;":Character(Unicode.Scalar(0x22C7)!),"divonx;":Character(Unicode.Scalar(0x22C7)!),
  259|       |    "DJcy;":Character(Unicode.Scalar(0x402)!),"djcy;":Character(Unicode.Scalar(0x452)!),"dlcorn;":Character(Unicode.Scalar(0x231E)!),"dlcrop;":Character(Unicode.Scalar(0x230D)!),
  260|       |    "dollar;":Character(Unicode.Scalar(0x24)!),"Dopf;":Character(Unicode.Scalar(0x1D53B)!),"dopf;":Character(Unicode.Scalar(0x1D555)!),"Dot;":Character(Unicode.Scalar(0xA8)!),
  261|       |    "dot;":Character(Unicode.Scalar(0x2D9)!),"DotDot;":Character(Unicode.Scalar(0x20DC)!),"doteq;":Character(Unicode.Scalar(0x2250)!),"doteqdot;":Character(Unicode.Scalar(0x2251)!),
  262|       |    "DotEqual;":Character(Unicode.Scalar(0x2250)!),"dotminus;":Character(Unicode.Scalar(0x2238)!),"dotplus;":Character(Unicode.Scalar(0x2214)!),"dotsquare;":Character(Unicode.Scalar(0x22A1)!),
  263|       |    "doublebarwedge;":Character(Unicode.Scalar(0x2306)!),"DoubleContourIntegral;":Character(Unicode.Scalar(0x222F)!),"DoubleDot;":Character(Unicode.Scalar(0xA8)!),"DoubleDownArrow;":Character(Unicode.Scalar(0x21D3)!),
  264|       |    "DoubleLeftArrow;":Character(Unicode.Scalar(0x21D0)!),"DoubleLeftRightArrow;":Character(Unicode.Scalar(0x21D4)!),"DoubleLeftTee;":Character(Unicode.Scalar(0x2AE4)!),"DoubleLongLeftArrow;":Character(Unicode.Scalar(0x27F8)!),
  265|       |    "DoubleLongLeftRightArrow;":Character(Unicode.Scalar(0x27FA)!),"DoubleLongRightArrow;":Character(Unicode.Scalar(0x27F9)!),"DoubleRightArrow;":Character(Unicode.Scalar(0x21D2)!),"DoubleRightTee;":Character(Unicode.Scalar(0x22A8)!),
  266|       |    "DoubleUpArrow;":Character(Unicode.Scalar(0x21D1)!),"DoubleUpDownArrow;":Character(Unicode.Scalar(0x21D5)!),"DoubleVerticalBar;":Character(Unicode.Scalar(0x2225)!),"DownArrow;":Character(Unicode.Scalar(0x2193)!),
  267|       |    "Downarrow;":Character(Unicode.Scalar(0x21D3)!),"downarrow;":Character(Unicode.Scalar(0x2193)!),"DownArrowBar;":Character(Unicode.Scalar(0x2913)!),"DownArrowUpArrow;":Character(Unicode.Scalar(0x21F5)!),
  268|       |    "DownBreve;":Character(Unicode.Scalar(0x311)!),"downdownarrows;":Character(Unicode.Scalar(0x21CA)!),"downharpoonleft;":Character(Unicode.Scalar(0x21C3)!),"downharpoonright;":Character(Unicode.Scalar(0x21C2)!),
  269|       |    "DownLeftRightVector;":Character(Unicode.Scalar(0x2950)!),"DownLeftTeeVector;":Character(Unicode.Scalar(0x295E)!),"DownLeftVector;":Character(Unicode.Scalar(0x21BD)!),"DownLeftVectorBar;":Character(Unicode.Scalar(0x2956)!),
  270|       |    "DownRightTeeVector;":Character(Unicode.Scalar(0x295F)!),"DownRightVector;":Character(Unicode.Scalar(0x21C1)!),"DownRightVectorBar;":Character(Unicode.Scalar(0x2957)!),"DownTee;":Character(Unicode.Scalar(0x22A4)!),
  271|       |    "DownTeeArrow;":Character(Unicode.Scalar(0x21A7)!),"drbkarow;":Character(Unicode.Scalar(0x2910)!),"drcorn;":Character(Unicode.Scalar(0x231F)!),"drcrop;":Character(Unicode.Scalar(0x230C)!),
  272|       |    "Dscr;":Character(Unicode.Scalar(0x1D49F)!),"dscr;":Character(Unicode.Scalar(0x1D4B9)!),"DScy;":Character(Unicode.Scalar(0x405)!),"dscy;":Character(Unicode.Scalar(0x455)!),
  273|       |    "dsol;":Character(Unicode.Scalar(0x29F6)!),"Dstrok;":Character(Unicode.Scalar(0x110)!),"dstrok;":Character(Unicode.Scalar(0x111)!),"dtdot;":Character(Unicode.Scalar(0x22F1)!),
  274|       |    "dtri;":Character(Unicode.Scalar(0x25BF)!),"dtrif;":Character(Unicode.Scalar(0x25BE)!),"duarr;":Character(Unicode.Scalar(0x21F5)!),"duhar;":Character(Unicode.Scalar(0x296F)!),
  275|       |    "dwangle;":Character(Unicode.Scalar(0x29A6)!),"DZcy;":Character(Unicode.Scalar(0x40F)!),"dzcy;":Character(Unicode.Scalar(0x45F)!),"dzigrarr;":Character(Unicode.Scalar(0x27FF)!),
  276|       |    "Eacute;":Character(Unicode.Scalar(0xC9)!),"eacute;":Character(Unicode.Scalar(0xE9)!),"easter;":Character(Unicode.Scalar(0x2A6E)!),"Ecaron;":Character(Unicode.Scalar(0x11A)!),
  277|       |    "ecaron;":Character(Unicode.Scalar(0x11B)!),"ecir;":Character(Unicode.Scalar(0x2256)!),"Ecirc;":Character(Unicode.Scalar(0xCA)!),"ecirc;":Character(Unicode.Scalar(0xEA)!),
  278|       |    "ecolon;":Character(Unicode.Scalar(0x2255)!),"Ecy;":Character(Unicode.Scalar(0x42D)!),"ecy;":Character(Unicode.Scalar(0x44D)!),"eDDot;":Character(Unicode.Scalar(0x2A77)!),
  279|       |    "Edot;":Character(Unicode.Scalar(0x116)!),"eDot;":Character(Unicode.Scalar(0x2251)!),"edot;":Character(Unicode.Scalar(0x117)!),"ee;":Character(Unicode.Scalar(0x2147)!),
  280|       |    "efDot;":Character(Unicode.Scalar(0x2252)!),"Efr;":Character(Unicode.Scalar(0x1D508)!),"efr;":Character(Unicode.Scalar(0x1D522)!),"eg;":Character(Unicode.Scalar(0x2A9A)!),
  281|       |    "Egrave;":Character(Unicode.Scalar(0xC8)!),"egrave;":Character(Unicode.Scalar(0xE8)!),"egs;":Character(Unicode.Scalar(0x2A96)!),"egsdot;":Character(Unicode.Scalar(0x2A98)!),
  282|       |    "el;":Character(Unicode.Scalar(0x2A99)!),"Element;":Character(Unicode.Scalar(0x2208)!),"elinters;":Character(Unicode.Scalar(0x23E7)!),"ell;":Character(Unicode.Scalar(0x2113)!),
  283|       |    "els;":Character(Unicode.Scalar(0x2A95)!),"elsdot;":Character(Unicode.Scalar(0x2A97)!),"Emacr;":Character(Unicode.Scalar(0x112)!),"emacr;":Character(Unicode.Scalar(0x113)!),
  284|       |    "empty;":Character(Unicode.Scalar(0x2205)!),"emptyset;":Character(Unicode.Scalar(0x2205)!),"EmptySmallSquare;":Character(Unicode.Scalar(0x25FB)!),"emptyv;":Character(Unicode.Scalar(0x2205)!),
  285|       |    "EmptyVerySmallSquare;":Character(Unicode.Scalar(0x25AB)!),"emsp;":Character(Unicode.Scalar(0x2003)!),"emsp13;":Character(Unicode.Scalar(0x2004)!),"emsp14;":Character(Unicode.Scalar(0x2005)!),
  286|       |    "ENG;":Character(Unicode.Scalar(0x14A)!),"eng;":Character(Unicode.Scalar(0x14B)!),"ensp;":Character(Unicode.Scalar(0x2002)!),"Eogon;":Character(Unicode.Scalar(0x118)!),
  287|       |    "eogon;":Character(Unicode.Scalar(0x119)!),"Eopf;":Character(Unicode.Scalar(0x1D53C)!),"eopf;":Character(Unicode.Scalar(0x1D556)!),"epar;":Character(Unicode.Scalar(0x22D5)!),
  288|       |    "eparsl;":Character(Unicode.Scalar(0x29E3)!),"eplus;":Character(Unicode.Scalar(0x2A71)!),"epsi;":Character(Unicode.Scalar(0x3B5)!),"Epsilon;":Character(Unicode.Scalar(0x395)!),
  289|       |    "epsilon;":Character(Unicode.Scalar(0x3B5)!),"epsiv;":Character(Unicode.Scalar(0x3F5)!),"eqcirc;":Character(Unicode.Scalar(0x2256)!),"eqcolon;":Character(Unicode.Scalar(0x2255)!),
  290|       |    "eqsim;":Character(Unicode.Scalar(0x2242)!),"eqslantgtr;":Character(Unicode.Scalar(0x2A96)!),"eqslantless;":Character(Unicode.Scalar(0x2A95)!),"Equal;":Character(Unicode.Scalar(0x2A75)!),
  291|       |    "equals;":Character(Unicode.Scalar(0x3D)!),"EqualTilde;":Character(Unicode.Scalar(0x2242)!),"equest;":Character(Unicode.Scalar(0x225F)!),"Equilibrium;":Character(Unicode.Scalar(0x21CC)!),
  292|       |    "equiv;":Character(Unicode.Scalar(0x2261)!),"equivDD;":Character(Unicode.Scalar(0x2A78)!),"eqvparsl;":Character(Unicode.Scalar(0x29E5)!),"erarr;":Character(Unicode.Scalar(0x2971)!),
  293|       |    "erDot;":Character(Unicode.Scalar(0x2253)!),"Escr;":Character(Unicode.Scalar(0x2130)!),"escr;":Character(Unicode.Scalar(0x212F)!),"esdot;":Character(Unicode.Scalar(0x2250)!),
  294|       |    "Esim;":Character(Unicode.Scalar(0x2A73)!),"esim;":Character(Unicode.Scalar(0x2242)!),"Eta;":Character(Unicode.Scalar(0x397)!),"eta;":Character(Unicode.Scalar(0x3B7)!),
  295|       |    "ETH;":Character(Unicode.Scalar(0xD0)!),"eth;":Character(Unicode.Scalar(0xF0)!),"Euml;":Character(Unicode.Scalar(0xCB)!),"euml;":Character(Unicode.Scalar(0xEB)!),
  296|       |    "euro;":Character(Unicode.Scalar(0x20AC)!),"excl;":Character(Unicode.Scalar(0x21)!),"exist;":Character(Unicode.Scalar(0x2203)!),"Exists;":Character(Unicode.Scalar(0x2203)!),
  297|       |    "expectation;":Character(Unicode.Scalar(0x2130)!),"ExponentialE;":Character(Unicode.Scalar(0x2147)!),"exponentiale;":Character(Unicode.Scalar(0x2147)!),"fallingdotseq;":Character(Unicode.Scalar(0x2252)!),
  298|       |    "Fcy;":Character(Unicode.Scalar(0x424)!),"fcy;":Character(Unicode.Scalar(0x444)!),"female;":Character(Unicode.Scalar(0x2640)!),"ffilig;":Character(Unicode.Scalar(0xFB03)!),
  299|       |    "fflig;":Character(Unicode.Scalar(0xFB00)!),"ffllig;":Character(Unicode.Scalar(0xFB04)!),"Ffr;":Character(Unicode.Scalar(0x1D509)!),"ffr;":Character(Unicode.Scalar(0x1D523)!),
  300|       |    "filig;":Character(Unicode.Scalar(0xFB01)!),"FilledSmallSquare;":Character(Unicode.Scalar(0x25FC)!),"FilledVerySmallSquare;":Character(Unicode.Scalar(0x25AA)!),
  301|       |
  302|       |    // Skip "fjlig;" due to Swift not recognizing it as a single grapheme cluster
  303|       |    // "fjlig;":Character(Unicode.Scalar(0x66}\u{6A)!),
  304|       |
  305|       |    "flat;":Character(Unicode.Scalar(0x266D)!),"fllig;":Character(Unicode.Scalar(0xFB02)!),"fltns;":Character(Unicode.Scalar(0x25B1)!),"fnof;":Character(Unicode.Scalar(0x192)!),
  306|       |    "Fopf;":Character(Unicode.Scalar(0x1D53D)!),"fopf;":Character(Unicode.Scalar(0x1D557)!),"ForAll;":Character(Unicode.Scalar(0x2200)!),"forall;":Character(Unicode.Scalar(0x2200)!),
  307|       |    "fork;":Character(Unicode.Scalar(0x22D4)!),"forkv;":Character(Unicode.Scalar(0x2AD9)!),"Fouriertrf;":Character(Unicode.Scalar(0x2131)!),"fpartint;":Character(Unicode.Scalar(0x2A0D)!),
  308|       |    "frac12;":Character(Unicode.Scalar(0xBD)!),"frac13;":Character(Unicode.Scalar(0x2153)!),"frac14;":Character(Unicode.Scalar(0xBC)!),"frac15;":Character(Unicode.Scalar(0x2155)!),
  309|       |    "frac16;":Character(Unicode.Scalar(0x2159)!),"frac18;":Character(Unicode.Scalar(0x215B)!),"frac23;":Character(Unicode.Scalar(0x2154)!),"frac25;":Character(Unicode.Scalar(0x2156)!),
  310|       |    "frac34;":Character(Unicode.Scalar(0xBE)!),"frac35;":Character(Unicode.Scalar(0x2157)!),"frac38;":Character(Unicode.Scalar(0x215C)!),"frac45;":Character(Unicode.Scalar(0x2158)!),
  311|       |    "frac56;":Character(Unicode.Scalar(0x215A)!),"frac58;":Character(Unicode.Scalar(0x215D)!),"frac78;":Character(Unicode.Scalar(0x215E)!),"frasl;":Character(Unicode.Scalar(0x2044)!),
  312|       |    "frown;":Character(Unicode.Scalar(0x2322)!),"Fscr;":Character(Unicode.Scalar(0x2131)!),"fscr;":Character(Unicode.Scalar(0x1D4BB)!),"gacute;":Character(Unicode.Scalar(0x1F5)!),
  313|       |    "Gamma;":Character(Unicode.Scalar(0x393)!),"gamma;":Character(Unicode.Scalar(0x3B3)!),"Gammad;":Character(Unicode.Scalar(0x3DC)!),"gammad;":Character(Unicode.Scalar(0x3DD)!),
  314|       |    "gap;":Character(Unicode.Scalar(0x2A86)!),"Gbreve;":Character(Unicode.Scalar(0x11E)!),"gbreve;":Character(Unicode.Scalar(0x11F)!),"Gcedil;":Character(Unicode.Scalar(0x122)!),
  315|       |    "Gcirc;":Character(Unicode.Scalar(0x11C)!),"gcirc;":Character(Unicode.Scalar(0x11D)!),"Gcy;":Character(Unicode.Scalar(0x413)!),"gcy;":Character(Unicode.Scalar(0x433)!),
  316|       |    "Gdot;":Character(Unicode.Scalar(0x120)!),"gdot;":Character(Unicode.Scalar(0x121)!),"gE;":Character(Unicode.Scalar(0x2267)!),"ge;":Character(Unicode.Scalar(0x2265)!),
  317|       |    "gEl;":Character(Unicode.Scalar(0x2A8C)!),"gel;":Character(Unicode.Scalar(0x22DB)!),"geq;":Character(Unicode.Scalar(0x2265)!),"geqq;":Character(Unicode.Scalar(0x2267)!),
  318|       |    "geqslant;":Character(Unicode.Scalar(0x2A7E)!),"ges;":Character(Unicode.Scalar(0x2A7E)!),"gescc;":Character(Unicode.Scalar(0x2AA9)!),"gesdot;":Character(Unicode.Scalar(0x2A80)!),
  319|       |    "gesdoto;":Character(Unicode.Scalar(0x2A82)!),"gesdotol;":Character(Unicode.Scalar(0x2A84)!),"gesl;":"\u{22DB}\u{FE00}","gesles;":Character(Unicode.Scalar(0x2A94)!),
  320|       |    "Gfr;":Character(Unicode.Scalar(0x1D50A)!),"gfr;":Character(Unicode.Scalar(0x1D524)!),"Gg;":Character(Unicode.Scalar(0x22D9)!),"gg;":Character(Unicode.Scalar(0x226B)!),
  321|       |    "ggg;":Character(Unicode.Scalar(0x22D9)!),"gimel;":Character(Unicode.Scalar(0x2137)!),"GJcy;":Character(Unicode.Scalar(0x403)!),"gjcy;":Character(Unicode.Scalar(0x453)!),
  322|       |    "gl;":Character(Unicode.Scalar(0x2277)!),"gla;":Character(Unicode.Scalar(0x2AA5)!),"glE;":Character(Unicode.Scalar(0x2A92)!),"glj;":Character(Unicode.Scalar(0x2AA4)!),
  323|       |    "gnap;":Character(Unicode.Scalar(0x2A8A)!),"gnapprox;":Character(Unicode.Scalar(0x2A8A)!),"gnE;":Character(Unicode.Scalar(0x2269)!),"gne;":Character(Unicode.Scalar(0x2A88)!),
  324|       |    "gneq;":Character(Unicode.Scalar(0x2A88)!),"gneqq;":Character(Unicode.Scalar(0x2269)!),"gnsim;":Character(Unicode.Scalar(0x22E7)!),"Gopf;":Character(Unicode.Scalar(0x1D53E)!),
  325|       |    "gopf;":Character(Unicode.Scalar(0x1D558)!),"grave;":Character(Unicode.Scalar(0x60)!),"GreaterEqual;":Character(Unicode.Scalar(0x2265)!),"GreaterEqualLess;":Character(Unicode.Scalar(0x22DB)!),
  326|       |    "GreaterFullEqual;":Character(Unicode.Scalar(0x2267)!),"GreaterGreater;":Character(Unicode.Scalar(0x2AA2)!),"GreaterLess;":Character(Unicode.Scalar(0x2277)!),"GreaterSlantEqual;":Character(Unicode.Scalar(0x2A7E)!),
  327|       |    "GreaterTilde;":Character(Unicode.Scalar(0x2273)!),"Gscr;":Character(Unicode.Scalar(0x1D4A2)!),"gscr;":Character(Unicode.Scalar(0x210A)!),"gsim;":Character(Unicode.Scalar(0x2273)!),
  328|       |    "gsime;":Character(Unicode.Scalar(0x2A8E)!),"gsiml;":Character(Unicode.Scalar(0x2A90)!),"GT;":Character(Unicode.Scalar(0x3E)!),"Gt;":Character(Unicode.Scalar(0x226B)!),
  329|       |    "gt;":Character(Unicode.Scalar(0x3E)!),"gtcc;":Character(Unicode.Scalar(0x2AA7)!),"gtcir;":Character(Unicode.Scalar(0x2A7A)!),"gtdot;":Character(Unicode.Scalar(0x22D7)!),
  330|       |    "gtlPar;":Character(Unicode.Scalar(0x2995)!),"gtquest;":Character(Unicode.Scalar(0x2A7C)!),"gtrapprox;":Character(Unicode.Scalar(0x2A86)!),"gtrarr;":Character(Unicode.Scalar(0x2978)!),
  331|       |    "gtrdot;":Character(Unicode.Scalar(0x22D7)!),"gtreqless;":Character(Unicode.Scalar(0x22DB)!),"gtreqqless;":Character(Unicode.Scalar(0x2A8C)!),"gtrless;":Character(Unicode.Scalar(0x2277)!),
  332|       |    "gtrsim;":Character(Unicode.Scalar(0x2273)!),"gvertneqq;":"\u{2269}\u{FE00}","gvnE;":"\u{2269}\u{FE00}","Hacek;":Character(Unicode.Scalar(0x2C7)!),
  333|       |    "hairsp;":Character(Unicode.Scalar(0x200A)!),"half;":Character(Unicode.Scalar(0xBD)!),"hamilt;":Character(Unicode.Scalar(0x210B)!),"HARDcy;":Character(Unicode.Scalar(0x42A)!),
  334|       |    "hardcy;":Character(Unicode.Scalar(0x44A)!),"hArr;":Character(Unicode.Scalar(0x21D4)!),"harr;":Character(Unicode.Scalar(0x2194)!),"harrcir;":Character(Unicode.Scalar(0x2948)!),
  335|       |    "harrw;":Character(Unicode.Scalar(0x21AD)!),"Hat;":Character(Unicode.Scalar(0x5E)!),"hbar;":Character(Unicode.Scalar(0x210F)!),"Hcirc;":Character(Unicode.Scalar(0x124)!),
  336|       |    "hcirc;":Character(Unicode.Scalar(0x125)!),"hearts;":Character(Unicode.Scalar(0x2665)!),"heartsuit;":Character(Unicode.Scalar(0x2665)!),"hellip;":Character(Unicode.Scalar(0x2026)!),
  337|       |    "hercon;":Character(Unicode.Scalar(0x22B9)!),"Hfr;":Character(Unicode.Scalar(0x210C)!),"hfr;":Character(Unicode.Scalar(0x1D525)!),"HilbertSpace;":Character(Unicode.Scalar(0x210B)!),
  338|       |    "hksearow;":Character(Unicode.Scalar(0x2925)!),"hkswarow;":Character(Unicode.Scalar(0x2926)!),"hoarr;":Character(Unicode.Scalar(0x21FF)!),"homtht;":Character(Unicode.Scalar(0x223B)!),
  339|       |    "hookleftarrow;":Character(Unicode.Scalar(0x21A9)!),"hookrightarrow;":Character(Unicode.Scalar(0x21AA)!),"Hopf;":Character(Unicode.Scalar(0x210D)!),"hopf;":Character(Unicode.Scalar(0x1D559)!),
  340|       |    "horbar;":Character(Unicode.Scalar(0x2015)!),"HorizontalLine;":Character(Unicode.Scalar(0x2500)!),"Hscr;":Character(Unicode.Scalar(0x210B)!),"hscr;":Character(Unicode.Scalar(0x1D4BD)!),
  341|       |    "hslash;":Character(Unicode.Scalar(0x210F)!),"Hstrok;":Character(Unicode.Scalar(0x126)!),"hstrok;":Character(Unicode.Scalar(0x127)!),"HumpDownHump;":Character(Unicode.Scalar(0x224E)!),
  342|       |    "HumpEqual;":Character(Unicode.Scalar(0x224F)!),"hybull;":Character(Unicode.Scalar(0x2043)!),"hyphen;":Character(Unicode.Scalar(0x2010)!),"Iacute;":Character(Unicode.Scalar(0xCD)!),
  343|       |    "iacute;":Character(Unicode.Scalar(0xED)!),"ic;":Character(Unicode.Scalar(0x2063)!),"Icirc;":Character(Unicode.Scalar(0xCE)!),"icirc;":Character(Unicode.Scalar(0xEE)!),
  344|       |    "Icy;":Character(Unicode.Scalar(0x418)!),"icy;":Character(Unicode.Scalar(0x438)!),"Idot;":Character(Unicode.Scalar(0x130)!),"IEcy;":Character(Unicode.Scalar(0x415)!),
  345|       |    "iecy;":Character(Unicode.Scalar(0x435)!),"iexcl;":Character(Unicode.Scalar(0xA1)!),"iff;":Character(Unicode.Scalar(0x21D4)!),"Ifr;":Character(Unicode.Scalar(0x2111)!),
  346|       |    "ifr;":Character(Unicode.Scalar(0x1D526)!),"Igrave;":Character(Unicode.Scalar(0xCC)!),"igrave;":Character(Unicode.Scalar(0xEC)!),"ii;":Character(Unicode.Scalar(0x2148)!),
  347|       |    "iiiint;":Character(Unicode.Scalar(0x2A0C)!),"iiint;":Character(Unicode.Scalar(0x222D)!),"iinfin;":Character(Unicode.Scalar(0x29DC)!),"iiota;":Character(Unicode.Scalar(0x2129)!),
  348|       |    "IJlig;":Character(Unicode.Scalar(0x132)!),"ijlig;":Character(Unicode.Scalar(0x133)!),"Im;":Character(Unicode.Scalar(0x2111)!),"Imacr;":Character(Unicode.Scalar(0x12A)!),
  349|       |    "imacr;":Character(Unicode.Scalar(0x12B)!),"image;":Character(Unicode.Scalar(0x2111)!),"ImaginaryI;":Character(Unicode.Scalar(0x2148)!),"imagline;":Character(Unicode.Scalar(0x2110)!),
  350|       |    "imagpart;":Character(Unicode.Scalar(0x2111)!),"imath;":Character(Unicode.Scalar(0x131)!),"imof;":Character(Unicode.Scalar(0x22B7)!),"imped;":Character(Unicode.Scalar(0x1B5)!),
  351|       |    "Implies;":Character(Unicode.Scalar(0x21D2)!),"in;":Character(Unicode.Scalar(0x2208)!),"incare;":Character(Unicode.Scalar(0x2105)!),"infin;":Character(Unicode.Scalar(0x221E)!),
  352|       |    "infintie;":Character(Unicode.Scalar(0x29DD)!),"inodot;":Character(Unicode.Scalar(0x131)!),"Int;":Character(Unicode.Scalar(0x222C)!),"int;":Character(Unicode.Scalar(0x222B)!),
  353|       |    "intcal;":Character(Unicode.Scalar(0x22BA)!),"integers;":Character(Unicode.Scalar(0x2124)!),"Integral;":Character(Unicode.Scalar(0x222B)!),"intercal;":Character(Unicode.Scalar(0x22BA)!),
  354|       |    "Intersection;":Character(Unicode.Scalar(0x22C2)!),"intlarhk;":Character(Unicode.Scalar(0x2A17)!),"intprod;":Character(Unicode.Scalar(0x2A3C)!),"InvisibleComma;":Character(Unicode.Scalar(0x2063)!),
  355|       |    "InvisibleTimes;":Character(Unicode.Scalar(0x2062)!),"IOcy;":Character(Unicode.Scalar(0x401)!),"iocy;":Character(Unicode.Scalar(0x451)!),"Iogon;":Character(Unicode.Scalar(0x12E)!),
  356|       |    "iogon;":Character(Unicode.Scalar(0x12F)!),"Iopf;":Character(Unicode.Scalar(0x1D540)!),"iopf;":Character(Unicode.Scalar(0x1D55A)!),"Iota;":Character(Unicode.Scalar(0x399)!),
  357|       |    "iota;":Character(Unicode.Scalar(0x3B9)!),"iprod;":Character(Unicode.Scalar(0x2A3C)!),"iquest;":Character(Unicode.Scalar(0xBF)!),"Iscr;":Character(Unicode.Scalar(0x2110)!),
  358|       |    "iscr;":Character(Unicode.Scalar(0x1D4BE)!),"isin;":Character(Unicode.Scalar(0x2208)!),"isindot;":Character(Unicode.Scalar(0x22F5)!),"isinE;":Character(Unicode.Scalar(0x22F9)!),
  359|       |    "isins;":Character(Unicode.Scalar(0x22F4)!),"isinsv;":Character(Unicode.Scalar(0x22F3)!),"isinv;":Character(Unicode.Scalar(0x2208)!),"it;":Character(Unicode.Scalar(0x2062)!),
  360|       |    "Itilde;":Character(Unicode.Scalar(0x128)!),"itilde;":Character(Unicode.Scalar(0x129)!),"Iukcy;":Character(Unicode.Scalar(0x406)!),"iukcy;":Character(Unicode.Scalar(0x456)!),
  361|       |    "Iuml;":Character(Unicode.Scalar(0xCF)!),"iuml;":Character(Unicode.Scalar(0xEF)!),"Jcirc;":Character(Unicode.Scalar(0x134)!),"jcirc;":Character(Unicode.Scalar(0x135)!),
  362|       |    "Jcy;":Character(Unicode.Scalar(0x419)!),"jcy;":Character(Unicode.Scalar(0x439)!),"Jfr;":Character(Unicode.Scalar(0x1D50D)!),"jfr;":Character(Unicode.Scalar(0x1D527)!),
  363|       |    "jmath;":Character(Unicode.Scalar(0x237)!),"Jopf;":Character(Unicode.Scalar(0x1D541)!),"jopf;":Character(Unicode.Scalar(0x1D55B)!),"Jscr;":Character(Unicode.Scalar(0x1D4A5)!),
  364|       |    "jscr;":Character(Unicode.Scalar(0x1D4BF)!),"Jsercy;":Character(Unicode.Scalar(0x408)!),"jsercy;":Character(Unicode.Scalar(0x458)!),"Jukcy;":Character(Unicode.Scalar(0x404)!),
  365|       |    "jukcy;":Character(Unicode.Scalar(0x454)!),"Kappa;":Character(Unicode.Scalar(0x39A)!),"kappa;":Character(Unicode.Scalar(0x3BA)!),"kappav;":Character(Unicode.Scalar(0x3F0)!),
  366|       |    "Kcedil;":Character(Unicode.Scalar(0x136)!),"kcedil;":Character(Unicode.Scalar(0x137)!),"Kcy;":Character(Unicode.Scalar(0x41A)!),"kcy;":Character(Unicode.Scalar(0x43A)!),
  367|       |    "Kfr;":Character(Unicode.Scalar(0x1D50E)!),"kfr;":Character(Unicode.Scalar(0x1D528)!),"kgreen;":Character(Unicode.Scalar(0x138)!),"KHcy;":Character(Unicode.Scalar(0x425)!),
  368|       |    "khcy;":Character(Unicode.Scalar(0x445)!),"KJcy;":Character(Unicode.Scalar(0x40C)!),"kjcy;":Character(Unicode.Scalar(0x45C)!),"Kopf;":Character(Unicode.Scalar(0x1D542)!),
  369|       |    "kopf;":Character(Unicode.Scalar(0x1D55C)!),"Kscr;":Character(Unicode.Scalar(0x1D4A6)!),"kscr;":Character(Unicode.Scalar(0x1D4C0)!),"lAarr;":Character(Unicode.Scalar(0x21DA)!),
  370|       |    "Lacute;":Character(Unicode.Scalar(0x139)!),"lacute;":Character(Unicode.Scalar(0x13A)!),"laemptyv;":Character(Unicode.Scalar(0x29B4)!),"lagran;":Character(Unicode.Scalar(0x2112)!),
  371|       |    "Lambda;":Character(Unicode.Scalar(0x39B)!),"lambda;":Character(Unicode.Scalar(0x3BB)!),"Lang;":Character(Unicode.Scalar(0x27EA)!),"lang;":Character(Unicode.Scalar(0x27E8)!),
  372|       |    "langd;":Character(Unicode.Scalar(0x2991)!),"langle;":Character(Unicode.Scalar(0x27E8)!),"lap;":Character(Unicode.Scalar(0x2A85)!),"Laplacetrf;":Character(Unicode.Scalar(0x2112)!),
  373|       |    "laquo;":Character(Unicode.Scalar(0xAB)!),"Larr;":Character(Unicode.Scalar(0x219E)!),"lArr;":Character(Unicode.Scalar(0x21D0)!),"larr;":Character(Unicode.Scalar(0x2190)!),
  374|       |    "larrb;":Character(Unicode.Scalar(0x21E4)!),"larrbfs;":Character(Unicode.Scalar(0x291F)!),"larrfs;":Character(Unicode.Scalar(0x291D)!),"larrhk;":Character(Unicode.Scalar(0x21A9)!),
  375|       |    "larrlp;":Character(Unicode.Scalar(0x21AB)!),"larrpl;":Character(Unicode.Scalar(0x2939)!),"larrsim;":Character(Unicode.Scalar(0x2973)!),"larrtl;":Character(Unicode.Scalar(0x21A2)!),
  376|       |    "lat;":Character(Unicode.Scalar(0x2AAB)!),"lAtail;":Character(Unicode.Scalar(0x291B)!),"latail;":Character(Unicode.Scalar(0x2919)!),"late;":Character(Unicode.Scalar(0x2AAD)!),
  377|       |    "lates;":"\u{2AAD}\u{FE00}","lBarr;":Character(Unicode.Scalar(0x290E)!),"lbarr;":Character(Unicode.Scalar(0x290C)!),"lbbrk;":Character(Unicode.Scalar(0x2772)!),
  378|       |    "lbrace;":Character(Unicode.Scalar(0x7B)!),"lbrack;":Character(Unicode.Scalar(0x5B)!),"lbrke;":Character(Unicode.Scalar(0x298B)!),"lbrksld;":Character(Unicode.Scalar(0x298F)!),
  379|       |    "lbrkslu;":Character(Unicode.Scalar(0x298D)!),"Lcaron;":Character(Unicode.Scalar(0x13D)!),"lcaron;":Character(Unicode.Scalar(0x13E)!),"Lcedil;":Character(Unicode.Scalar(0x13B)!),
  380|       |    "lcedil;":Character(Unicode.Scalar(0x13C)!),"lceil;":Character(Unicode.Scalar(0x2308)!),"lcub;":Character(Unicode.Scalar(0x7B)!),"Lcy;":Character(Unicode.Scalar(0x41B)!),
  381|       |    "lcy;":Character(Unicode.Scalar(0x43B)!),"ldca;":Character(Unicode.Scalar(0x2936)!),"ldquo;":Character(Unicode.Scalar(0x201C)!),"ldquor;":Character(Unicode.Scalar(0x201E)!),
  382|       |    "ldrdhar;":Character(Unicode.Scalar(0x2967)!),"ldrushar;":Character(Unicode.Scalar(0x294B)!),"ldsh;":Character(Unicode.Scalar(0x21B2)!),"lE;":Character(Unicode.Scalar(0x2266)!),
  383|       |    "le;":Character(Unicode.Scalar(0x2264)!),"LeftAngleBracket;":Character(Unicode.Scalar(0x27E8)!),"LeftArrow;":Character(Unicode.Scalar(0x2190)!),"Leftarrow;":Character(Unicode.Scalar(0x21D0)!),
  384|       |    "leftarrow;":Character(Unicode.Scalar(0x2190)!),"LeftArrowBar;":Character(Unicode.Scalar(0x21E4)!),"LeftArrowRightArrow;":Character(Unicode.Scalar(0x21C6)!),"leftarrowtail;":Character(Unicode.Scalar(0x21A2)!),
  385|       |    "LeftCeiling;":Character(Unicode.Scalar(0x2308)!),"LeftDoubleBracket;":Character(Unicode.Scalar(0x27E6)!),"LeftDownTeeVector;":Character(Unicode.Scalar(0x2961)!),"LeftDownVector;":Character(Unicode.Scalar(0x21C3)!),
  386|       |    "LeftDownVectorBar;":Character(Unicode.Scalar(0x2959)!),"LeftFloor;":Character(Unicode.Scalar(0x230A)!),"leftharpoondown;":Character(Unicode.Scalar(0x21BD)!),"leftharpoonup;":Character(Unicode.Scalar(0x21BC)!),
  387|       |    "leftleftarrows;":Character(Unicode.Scalar(0x21C7)!),"LeftRightArrow;":Character(Unicode.Scalar(0x2194)!),"Leftrightarrow;":Character(Unicode.Scalar(0x21D4)!),"leftrightarrow;":Character(Unicode.Scalar(0x2194)!),
  388|       |    "leftrightarrows;":Character(Unicode.Scalar(0x21C6)!),"leftrightharpoons;":Character(Unicode.Scalar(0x21CB)!),"leftrightsquigarrow;":Character(Unicode.Scalar(0x21AD)!),"LeftRightVector;":Character(Unicode.Scalar(0x294E)!),
  389|       |    "LeftTee;":Character(Unicode.Scalar(0x22A3)!),"LeftTeeArrow;":Character(Unicode.Scalar(0x21A4)!),"LeftTeeVector;":Character(Unicode.Scalar(0x295A)!),"leftthreetimes;":Character(Unicode.Scalar(0x22CB)!),
  390|       |    "LeftTriangle;":Character(Unicode.Scalar(0x22B2)!),"LeftTriangleBar;":Character(Unicode.Scalar(0x29CF)!),"LeftTriangleEqual;":Character(Unicode.Scalar(0x22B4)!),"LeftUpDownVector;":Character(Unicode.Scalar(0x2951)!),
  391|       |    "LeftUpTeeVector;":Character(Unicode.Scalar(0x2960)!),"LeftUpVector;":Character(Unicode.Scalar(0x21BF)!),"LeftUpVectorBar;":Character(Unicode.Scalar(0x2958)!),"LeftVector;":Character(Unicode.Scalar(0x21BC)!),
  392|       |    "LeftVectorBar;":Character(Unicode.Scalar(0x2952)!),"lEg;":Character(Unicode.Scalar(0x2A8B)!),"leg;":Character(Unicode.Scalar(0x22DA)!),"leq;":Character(Unicode.Scalar(0x2264)!),
  393|       |    "leqq;":Character(Unicode.Scalar(0x2266)!),"leqslant;":Character(Unicode.Scalar(0x2A7D)!),"les;":Character(Unicode.Scalar(0x2A7D)!),"lescc;":Character(Unicode.Scalar(0x2AA8)!),
  394|       |    "lesdot;":Character(Unicode.Scalar(0x2A7F)!),"lesdoto;":Character(Unicode.Scalar(0x2A81)!),"lesdotor;":Character(Unicode.Scalar(0x2A83)!),"lesg;":"\u{22DA}\u{FE00}",
  395|       |    "lesges;":Character(Unicode.Scalar(0x2A93)!),"lessapprox;":Character(Unicode.Scalar(0x2A85)!),"lessdot;":Character(Unicode.Scalar(0x22D6)!),"lesseqgtr;":Character(Unicode.Scalar(0x22DA)!),
  396|       |    "lesseqqgtr;":Character(Unicode.Scalar(0x2A8B)!),"LessEqualGreater;":Character(Unicode.Scalar(0x22DA)!),"LessFullEqual;":Character(Unicode.Scalar(0x2266)!),"LessGreater;":Character(Unicode.Scalar(0x2276)!),
  397|       |    "lessgtr;":Character(Unicode.Scalar(0x2276)!),"LessLess;":Character(Unicode.Scalar(0x2AA1)!),"lesssim;":Character(Unicode.Scalar(0x2272)!),"LessSlantEqual;":Character(Unicode.Scalar(0x2A7D)!),
  398|       |    "LessTilde;":Character(Unicode.Scalar(0x2272)!),"lfisht;":Character(Unicode.Scalar(0x297C)!),"lfloor;":Character(Unicode.Scalar(0x230A)!),"Lfr;":Character(Unicode.Scalar(0x1D50F)!),
  399|       |    "lfr;":Character(Unicode.Scalar(0x1D529)!),"lg;":Character(Unicode.Scalar(0x2276)!),"lgE;":Character(Unicode.Scalar(0x2A91)!),"lHar;":Character(Unicode.Scalar(0x2962)!),
  400|       |    "lhard;":Character(Unicode.Scalar(0x21BD)!),"lharu;":Character(Unicode.Scalar(0x21BC)!),"lharul;":Character(Unicode.Scalar(0x296A)!),"lhblk;":Character(Unicode.Scalar(0x2584)!),
  401|       |    "LJcy;":Character(Unicode.Scalar(0x409)!),"ljcy;":Character(Unicode.Scalar(0x459)!),"Ll;":Character(Unicode.Scalar(0x22D8)!),"ll;":Character(Unicode.Scalar(0x226A)!),
  402|       |    "llarr;":Character(Unicode.Scalar(0x21C7)!),"llcorner;":Character(Unicode.Scalar(0x231E)!),"Lleftarrow;":Character(Unicode.Scalar(0x21DA)!),"llhard;":Character(Unicode.Scalar(0x296B)!),
  403|       |    "lltri;":Character(Unicode.Scalar(0x25FA)!),"Lmidot;":Character(Unicode.Scalar(0x13F)!),"lmidot;":Character(Unicode.Scalar(0x140)!),"lmoust;":Character(Unicode.Scalar(0x23B0)!),
  404|       |    "lmoustache;":Character(Unicode.Scalar(0x23B0)!),"lnap;":Character(Unicode.Scalar(0x2A89)!),"lnapprox;":Character(Unicode.Scalar(0x2A89)!),"lnE;":Character(Unicode.Scalar(0x2268)!),
  405|       |    "lne;":Character(Unicode.Scalar(0x2A87)!),"lneq;":Character(Unicode.Scalar(0x2A87)!),"lneqq;":Character(Unicode.Scalar(0x2268)!),"lnsim;":Character(Unicode.Scalar(0x22E6)!),
  406|       |    "loang;":Character(Unicode.Scalar(0x27EC)!),"loarr;":Character(Unicode.Scalar(0x21FD)!),"lobrk;":Character(Unicode.Scalar(0x27E6)!),"LongLeftArrow;":Character(Unicode.Scalar(0x27F5)!),
  407|       |    "Longleftarrow;":Character(Unicode.Scalar(0x27F8)!),"longleftarrow;":Character(Unicode.Scalar(0x27F5)!),"LongLeftRightArrow;":Character(Unicode.Scalar(0x27F7)!),"Longleftrightarrow;":Character(Unicode.Scalar(0x27FA)!),
  408|       |    "longleftrightarrow;":Character(Unicode.Scalar(0x27F7)!),"longmapsto;":Character(Unicode.Scalar(0x27FC)!),"LongRightArrow;":Character(Unicode.Scalar(0x27F6)!),"Longrightarrow;":Character(Unicode.Scalar(0x27F9)!),
  409|       |    "longrightarrow;":Character(Unicode.Scalar(0x27F6)!),"looparrowleft;":Character(Unicode.Scalar(0x21AB)!),"looparrowright;":Character(Unicode.Scalar(0x21AC)!),"lopar;":Character(Unicode.Scalar(0x2985)!),
  410|       |    "Lopf;":Character(Unicode.Scalar(0x1D543)!),"lopf;":Character(Unicode.Scalar(0x1D55D)!),"loplus;":Character(Unicode.Scalar(0x2A2D)!),"lotimes;":Character(Unicode.Scalar(0x2A34)!),
  411|       |    "lowast;":Character(Unicode.Scalar(0x2217)!),"lowbar;":Character(Unicode.Scalar(0x5F)!),"LowerLeftArrow;":Character(Unicode.Scalar(0x2199)!),"LowerRightArrow;":Character(Unicode.Scalar(0x2198)!),
  412|       |    "loz;":Character(Unicode.Scalar(0x25CA)!),"lozenge;":Character(Unicode.Scalar(0x25CA)!),"lozf;":Character(Unicode.Scalar(0x29EB)!),"lpar;":Character(Unicode.Scalar(0x28)!),
  413|       |    "lparlt;":Character(Unicode.Scalar(0x2993)!),"lrarr;":Character(Unicode.Scalar(0x21C6)!),"lrcorner;":Character(Unicode.Scalar(0x231F)!),"lrhar;":Character(Unicode.Scalar(0x21CB)!),
  414|       |    "lrhard;":Character(Unicode.Scalar(0x296D)!),"lrm;":Character(Unicode.Scalar(0x200E)!),"lrtri;":Character(Unicode.Scalar(0x22BF)!),"lsaquo;":Character(Unicode.Scalar(0x2039)!),
  415|       |    "Lscr;":Character(Unicode.Scalar(0x2112)!),"lscr;":Character(Unicode.Scalar(0x1D4C1)!),"Lsh;":Character(Unicode.Scalar(0x21B0)!),"lsh;":Character(Unicode.Scalar(0x21B0)!),
  416|       |    "lsim;":Character(Unicode.Scalar(0x2272)!),"lsime;":Character(Unicode.Scalar(0x2A8D)!),"lsimg;":Character(Unicode.Scalar(0x2A8F)!),"lsqb;":Character(Unicode.Scalar(0x5B)!),
  417|       |    "lsquo;":Character(Unicode.Scalar(0x2018)!),"lsquor;":Character(Unicode.Scalar(0x201A)!),"Lstrok;":Character(Unicode.Scalar(0x141)!),"lstrok;":Character(Unicode.Scalar(0x142)!),
  418|       |    "LT;":Character(Unicode.Scalar(0x3C)!),"Lt;":Character(Unicode.Scalar(0x226A)!),"lt;":Character(Unicode.Scalar(0x3C)!),"ltcc;":Character(Unicode.Scalar(0x2AA6)!),
  419|       |    "ltcir;":Character(Unicode.Scalar(0x2A79)!),"ltdot;":Character(Unicode.Scalar(0x22D6)!),"lthree;":Character(Unicode.Scalar(0x22CB)!),"ltimes;":Character(Unicode.Scalar(0x22C9)!),
  420|       |    "ltlarr;":Character(Unicode.Scalar(0x2976)!),"ltquest;":Character(Unicode.Scalar(0x2A7B)!),"ltri;":Character(Unicode.Scalar(0x25C3)!),"ltrie;":Character(Unicode.Scalar(0x22B4)!),
  421|       |    "ltrif;":Character(Unicode.Scalar(0x25C2)!),"ltrPar;":Character(Unicode.Scalar(0x2996)!),"lurdshar;":Character(Unicode.Scalar(0x294A)!),"luruhar;":Character(Unicode.Scalar(0x2966)!),
  422|       |    "lvertneqq;":"\u{2268}\u{FE00}","lvnE;":"\u{2268}\u{FE00}","macr;":Character(Unicode.Scalar(0xAF)!),"male;":Character(Unicode.Scalar(0x2642)!),
  423|       |    "malt;":Character(Unicode.Scalar(0x2720)!),"maltese;":Character(Unicode.Scalar(0x2720)!),"Map;":Character(Unicode.Scalar(0x2905)!),"map;":Character(Unicode.Scalar(0x21A6)!),
  424|       |    "mapsto;":Character(Unicode.Scalar(0x21A6)!),"mapstodown;":Character(Unicode.Scalar(0x21A7)!),"mapstoleft;":Character(Unicode.Scalar(0x21A4)!),"mapstoup;":Character(Unicode.Scalar(0x21A5)!),
  425|       |    "marker;":Character(Unicode.Scalar(0x25AE)!),"mcomma;":Character(Unicode.Scalar(0x2A29)!),"Mcy;":Character(Unicode.Scalar(0x41C)!),"mcy;":Character(Unicode.Scalar(0x43C)!),
  426|       |    "mdash;":Character(Unicode.Scalar(0x2014)!),"mDDot;":Character(Unicode.Scalar(0x223A)!),"measuredangle;":Character(Unicode.Scalar(0x2221)!),"MediumSpace;":Character(Unicode.Scalar(0x205F)!),
  427|       |    "Mellintrf;":Character(Unicode.Scalar(0x2133)!),"Mfr;":Character(Unicode.Scalar(0x1D510)!),"mfr;":Character(Unicode.Scalar(0x1D52A)!),"mho;":Character(Unicode.Scalar(0x2127)!),
  428|       |    "micro;":Character(Unicode.Scalar(0xB5)!),"mid;":Character(Unicode.Scalar(0x2223)!),"midast;":Character(Unicode.Scalar(0x2A)!),"midcir;":Character(Unicode.Scalar(0x2AF0)!),
  429|       |    "middot;":Character(Unicode.Scalar(0xB7)!),"minus;":Character(Unicode.Scalar(0x2212)!),"minusb;":Character(Unicode.Scalar(0x229F)!),"minusd;":Character(Unicode.Scalar(0x2238)!),
  430|       |    "minusdu;":Character(Unicode.Scalar(0x2A2A)!),"MinusPlus;":Character(Unicode.Scalar(0x2213)!),"mlcp;":Character(Unicode.Scalar(0x2ADB)!),"mldr;":Character(Unicode.Scalar(0x2026)!)
  431|       |]
  432|       |
  433|       |let namedCharactersDecodeMap2: [String: Character] = [
  434|       |    "mnplus;":Character(Unicode.Scalar(0x2213)!),"models;":Character(Unicode.Scalar(0x22A7)!),"Mopf;":Character(Unicode.Scalar(0x1D544)!),"mopf;":Character(Unicode.Scalar(0x1D55E)!),
  435|       |    "mp;":Character(Unicode.Scalar(0x2213)!),"Mscr;":Character(Unicode.Scalar(0x2133)!),"mscr;":Character(Unicode.Scalar(0x1D4C2)!),"mstpos;":Character(Unicode.Scalar(0x223E)!),
  436|       |    "Mu;":Character(Unicode.Scalar(0x39C)!),"mu;":Character(Unicode.Scalar(0x3BC)!),"multimap;":Character(Unicode.Scalar(0x22B8)!),"mumap;":Character(Unicode.Scalar(0x22B8)!),
  437|       |    "nabla;":Character(Unicode.Scalar(0x2207)!),"Nacute;":Character(Unicode.Scalar(0x143)!),"nacute;":Character(Unicode.Scalar(0x144)!),"nang;":"\u{2220}\u{20D2}",
  438|       |    "nap;":Character(Unicode.Scalar(0x2249)!),"napE;":"\u{2A70}\u{338}","napid;":"\u{224B}\u{338}","napos;":Character(Unicode.Scalar(0x149)!),
  439|       |    "napprox;":Character(Unicode.Scalar(0x2249)!),"natur;":Character(Unicode.Scalar(0x266E)!),"natural;":Character(Unicode.Scalar(0x266E)!),"naturals;":Character(Unicode.Scalar(0x2115)!),
  440|       |    "nbsp;":Character(Unicode.Scalar(0xA0)!),"nbump;":"\u{224E}\u{338}","nbumpe;":"\u{224F}\u{338}","ncap;":Character(Unicode.Scalar(0x2A43)!),
  441|       |    "Ncaron;":Character(Unicode.Scalar(0x147)!),"ncaron;":Character(Unicode.Scalar(0x148)!),"Ncedil;":Character(Unicode.Scalar(0x145)!),"ncedil;":Character(Unicode.Scalar(0x146)!),
  442|       |    "ncong;":Character(Unicode.Scalar(0x2247)!),"ncongdot;":"\u{2A6D}\u{338}","ncup;":Character(Unicode.Scalar(0x2A42)!),"Ncy;":Character(Unicode.Scalar(0x41D)!),
  443|       |    "ncy;":Character(Unicode.Scalar(0x43D)!),"ndash;":Character(Unicode.Scalar(0x2013)!),"ne;":Character(Unicode.Scalar(0x2260)!),"nearhk;":Character(Unicode.Scalar(0x2924)!),
  444|       |    "neArr;":Character(Unicode.Scalar(0x21D7)!),"nearr;":Character(Unicode.Scalar(0x2197)!),"nearrow;":Character(Unicode.Scalar(0x2197)!),"nedot;":"\u{2250}\u{338}",
  445|       |    "NegativeMediumSpace;":Character(Unicode.Scalar(0x200B)!),"NegativeThickSpace;":Character(Unicode.Scalar(0x200B)!),"NegativeThinSpace;":Character(Unicode.Scalar(0x200B)!),"NegativeVeryThinSpace;":Character(Unicode.Scalar(0x200B)!),
  446|       |    "nequiv;":Character(Unicode.Scalar(0x2262)!),"nesear;":Character(Unicode.Scalar(0x2928)!),"nesim;":"\u{2242}\u{338}","NestedGreaterGreater;":Character(Unicode.Scalar(0x226B)!),
  447|       |    "NestedLessLess;":Character(Unicode.Scalar(0x226A)!),"NewLine;":Character(Unicode.Scalar(0xA)!),"nexist;":Character(Unicode.Scalar(0x2204)!),"nexists;":Character(Unicode.Scalar(0x2204)!),
  448|       |    "Nfr;":Character(Unicode.Scalar(0x1D511)!),"nfr;":Character(Unicode.Scalar(0x1D52B)!),"ngE;":"\u{2267}\u{338}","nge;":Character(Unicode.Scalar(0x2271)!),
  449|       |    "ngeq;":Character(Unicode.Scalar(0x2271)!),"ngeqq;":"\u{2267}\u{338}","ngeqslant;":"\u{2A7E}\u{338}","nges;":"\u{2A7E}\u{338}",
  450|       |    "nGg;":"\u{22D9}\u{338}","ngsim;":Character(Unicode.Scalar(0x2275)!),"nGt;":"\u{226B}\u{20D2}","ngt;":Character(Unicode.Scalar(0x226F)!),
  451|       |    "ngtr;":Character(Unicode.Scalar(0x226F)!),"nGtv;":"\u{226B}\u{338}","nhArr;":Character(Unicode.Scalar(0x21CE)!),"nharr;":Character(Unicode.Scalar(0x21AE)!),
  452|       |    "nhpar;":Character(Unicode.Scalar(0x2AF2)!),"ni;":Character(Unicode.Scalar(0x220B)!),"nis;":Character(Unicode.Scalar(0x22FC)!),"nisd;":Character(Unicode.Scalar(0x22FA)!),
  453|       |    "niv;":Character(Unicode.Scalar(0x220B)!),"NJcy;":Character(Unicode.Scalar(0x40A)!),"njcy;":Character(Unicode.Scalar(0x45A)!),"nlArr;":Character(Unicode.Scalar(0x21CD)!),
  454|       |    "nlarr;":Character(Unicode.Scalar(0x219A)!),"nldr;":Character(Unicode.Scalar(0x2025)!),"nlE;":"\u{2266}\u{338}","nle;":Character(Unicode.Scalar(0x2270)!),
  455|       |    "nLeftarrow;":Character(Unicode.Scalar(0x21CD)!),"nleftarrow;":Character(Unicode.Scalar(0x219A)!),"nLeftrightarrow;":Character(Unicode.Scalar(0x21CE)!),"nleftrightarrow;":Character(Unicode.Scalar(0x21AE)!),
  456|       |    "nleq;":Character(Unicode.Scalar(0x2270)!),"nleqq;":"\u{2266}\u{338}","nleqslant;":"\u{2A7D}\u{338}","nles;":"\u{2A7D}\u{338}",
  457|       |    "nless;":Character(Unicode.Scalar(0x226E)!),"nLl;":"\u{22D8}\u{338}","nlsim;":Character(Unicode.Scalar(0x2274)!),"nLt;":"\u{226A}\u{338}",
  458|       |    "nlt;":Character(Unicode.Scalar(0x226E)!),"nltri;":Character(Unicode.Scalar(0x22EA)!),"nltrie;":Character(Unicode.Scalar(0x22EC)!),"nLtv;":"\u{226A}\u{338}",
  459|       |    "nmid;":Character(Unicode.Scalar(0x2224)!),"NoBreak;":Character(Unicode.Scalar(0x2060)!),"NonBreakingSpace;":Character(Unicode.Scalar(0xA0)!),"Nopf;":Character(Unicode.Scalar(0x2115)!),
  460|       |    "nopf;":Character(Unicode.Scalar(0x1D55F)!),"Not;":Character(Unicode.Scalar(0x2AEC)!),"not;":Character(Unicode.Scalar(0xAC)!),"NotCongruent;":Character(Unicode.Scalar(0x2262)!),
  461|       |    "NotCupCap;":Character(Unicode.Scalar(0x226D)!),"NotDoubleVerticalBar;":Character(Unicode.Scalar(0x2226)!),"NotElement;":Character(Unicode.Scalar(0x2209)!),"NotEqual;":Character(Unicode.Scalar(0x2260)!),
  462|       |    "NotEqualTilde;":"\u{2242}\u{338}","NotExists;":Character(Unicode.Scalar(0x2204)!),"NotGreater;":Character(Unicode.Scalar(0x226F)!),"NotGreaterEqual;":Character(Unicode.Scalar(0x2271)!),
  463|       |    "NotGreaterFullEqual;":"\u{2267}\u{338}","NotGreaterGreater;":"\u{226B}\u{338}","NotGreaterLess;":Character(Unicode.Scalar(0x2279)!),"NotGreaterSlantEqual;":"\u{2A7E}\u{338}",
  464|       |    "NotGreaterTilde;":Character(Unicode.Scalar(0x2275)!),"NotHumpDownHump;":"\u{224E}\u{338}","NotHumpEqual;":"\u{224F}\u{338}","notin;":Character(Unicode.Scalar(0x2209)!),
  465|       |    "notindot;":"\u{22F5}\u{338}","notinE;":"\u{22F9}\u{338}","notinva;":Character(Unicode.Scalar(0x2209)!),"notinvb;":Character(Unicode.Scalar(0x22F7)!),
  466|       |    "notinvc;":Character(Unicode.Scalar(0x22F6)!),"NotLeftTriangle;":Character(Unicode.Scalar(0x22EA)!),"NotLeftTriangleBar;":"\u{29CF}\u{338}","NotLeftTriangleEqual;":Character(Unicode.Scalar(0x22EC)!),
  467|       |    "NotLess;":Character(Unicode.Scalar(0x226E)!),"NotLessEqual;":Character(Unicode.Scalar(0x2270)!),"NotLessGreater;":Character(Unicode.Scalar(0x2278)!),"NotLessLess;":"\u{226A}\u{338}",
  468|       |    "NotLessSlantEqual;":"\u{2A7D}\u{338}","NotLessTilde;":Character(Unicode.Scalar(0x2274)!),"NotNestedGreaterGreater;":"\u{2AA2}\u{338}","NotNestedLessLess;":"\u{2AA1}\u{338}",
  469|       |    "notni;":Character(Unicode.Scalar(0x220C)!),"notniva;":Character(Unicode.Scalar(0x220C)!),"notnivb;":Character(Unicode.Scalar(0x22FE)!),"notnivc;":Character(Unicode.Scalar(0x22FD)!),
  470|       |    "NotPrecedes;":Character(Unicode.Scalar(0x2280)!),"NotPrecedesEqual;":"\u{2AAF}\u{338}","NotPrecedesSlantEqual;":Character(Unicode.Scalar(0x22E0)!),"NotReverseElement;":Character(Unicode.Scalar(0x220C)!),
  471|       |    "NotRightTriangle;":Character(Unicode.Scalar(0x22EB)!),"NotRightTriangleBar;":"\u{29D0}\u{338}","NotRightTriangleEqual;":Character(Unicode.Scalar(0x22ED)!),"NotSquareSubset;":"\u{228F}\u{338}",
  472|       |    "NotSquareSubsetEqual;":Character(Unicode.Scalar(0x22E2)!),"NotSquareSuperset;":"\u{2290}\u{338}","NotSquareSupersetEqual;":Character(Unicode.Scalar(0x22E3)!),"NotSubset;":"\u{2282}\u{20D2}",
  473|       |    "NotSubsetEqual;":Character(Unicode.Scalar(0x2288)!),"NotSucceeds;":Character(Unicode.Scalar(0x2281)!),"NotSucceedsEqual;":"\u{2AB0}\u{338}","NotSucceedsSlantEqual;":Character(Unicode.Scalar(0x22E1)!),
  474|       |    "NotSucceedsTilde;":"\u{227F}\u{338}","NotSuperset;":"\u{2283}\u{20D2}","NotSupersetEqual;":Character(Unicode.Scalar(0x2289)!),"NotTilde;":Character(Unicode.Scalar(0x2241)!),
  475|       |    "NotTildeEqual;":Character(Unicode.Scalar(0x2244)!),"NotTildeFullEqual;":Character(Unicode.Scalar(0x2247)!),"NotTildeTilde;":Character(Unicode.Scalar(0x2249)!),"NotVerticalBar;":Character(Unicode.Scalar(0x2224)!),
  476|       |    "npar;":Character(Unicode.Scalar(0x2226)!),"nparallel;":Character(Unicode.Scalar(0x2226)!),"nparsl;":"\u{2AFD}\u{20E5}","npart;":"\u{2202}\u{338}",
  477|       |    "npolint;":Character(Unicode.Scalar(0x2A14)!),"npr;":Character(Unicode.Scalar(0x2280)!),"nprcue;":Character(Unicode.Scalar(0x22E0)!),"npre;":"\u{2AAF}\u{338}",
  478|       |    "nprec;":Character(Unicode.Scalar(0x2280)!),"npreceq;":"\u{2AAF}\u{338}","nrArr;":Character(Unicode.Scalar(0x21CF)!),"nrarr;":Character(Unicode.Scalar(0x219B)!),
  479|       |    "nrarrc;":"\u{2933}\u{338}","nrarrw;":"\u{219D}\u{338}","nRightarrow;":Character(Unicode.Scalar(0x21CF)!),"nrightarrow;":Character(Unicode.Scalar(0x219B)!),
  480|       |    "nrtri;":Character(Unicode.Scalar(0x22EB)!),"nrtrie;":Character(Unicode.Scalar(0x22ED)!),"nsc;":Character(Unicode.Scalar(0x2281)!),"nsccue;":Character(Unicode.Scalar(0x22E1)!),
  481|       |    "nsce;":"\u{2AB0}\u{338}","Nscr;":Character(Unicode.Scalar(0x1D4A9)!),"nscr;":Character(Unicode.Scalar(0x1D4C3)!),"nshortmid;":Character(Unicode.Scalar(0x2224)!),
  482|       |    "nshortparallel;":Character(Unicode.Scalar(0x2226)!),"nsim;":Character(Unicode.Scalar(0x2241)!),"nsime;":Character(Unicode.Scalar(0x2244)!),"nsimeq;":Character(Unicode.Scalar(0x2244)!),
  483|       |    "nsmid;":Character(Unicode.Scalar(0x2224)!),"nspar;":Character(Unicode.Scalar(0x2226)!),"nsqsube;":Character(Unicode.Scalar(0x22E2)!),"nsqsupe;":Character(Unicode.Scalar(0x22E3)!),
  484|       |    "nsub;":Character(Unicode.Scalar(0x2284)!),"nsubE;":"\u{2AC5}\u{338}","nsube;":Character(Unicode.Scalar(0x2288)!),"nsubset;":"\u{2282}\u{20D2}",
  485|       |    "nsubseteq;":Character(Unicode.Scalar(0x2288)!),"nsubseteqq;":"\u{2AC5}\u{338}","nsucc;":Character(Unicode.Scalar(0x2281)!),"nsucceq;":"\u{2AB0}\u{338}",
  486|       |    "nsup;":Character(Unicode.Scalar(0x2285)!),"nsupE;":"\u{2AC6}\u{338}","nsupe;":Character(Unicode.Scalar(0x2289)!),"nsupset;":"\u{2283}\u{20D2}",
  487|       |    "nsupseteq;":Character(Unicode.Scalar(0x2289)!),"nsupseteqq;":"\u{2AC6}\u{338}","ntgl;":Character(Unicode.Scalar(0x2279)!),"Ntilde;":Character(Unicode.Scalar(0xD1)!),
  488|       |    "ntilde;":Character(Unicode.Scalar(0xF1)!),"ntlg;":Character(Unicode.Scalar(0x2278)!),"ntriangleleft;":Character(Unicode.Scalar(0x22EA)!),"ntrianglelefteq;":Character(Unicode.Scalar(0x22EC)!),
  489|       |    "ntriangleright;":Character(Unicode.Scalar(0x22EB)!),"ntrianglerighteq;":Character(Unicode.Scalar(0x22ED)!),"Nu;":Character(Unicode.Scalar(0x39D)!),"nu;":Character(Unicode.Scalar(0x3BD)!),
  490|       |    "num;":Character(Unicode.Scalar(0x23)!),"numero;":Character(Unicode.Scalar(0x2116)!),"numsp;":Character(Unicode.Scalar(0x2007)!),"nvap;":"\u{224D}\u{20D2}",
  491|       |    "nVDash;":Character(Unicode.Scalar(0x22AF)!),"nVdash;":Character(Unicode.Scalar(0x22AE)!),"nvDash;":Character(Unicode.Scalar(0x22AD)!),"nvdash;":Character(Unicode.Scalar(0x22AC)!),
  492|       |    "nvge;":"\u{2265}\u{20D2}","nvgt;":"\u{3E}\u{20D2}","nvHarr;":Character(Unicode.Scalar(0x2904)!),"nvinfin;":Character(Unicode.Scalar(0x29DE)!),
  493|       |    "nvlArr;":Character(Unicode.Scalar(0x2902)!),"nvle;":"\u{2264}\u{20D2}","nvlt;":"\u{3C}\u{20D2}","nvltrie;":"\u{22B4}\u{20D2}",
  494|       |    "nvrArr;":Character(Unicode.Scalar(0x2903)!),"nvrtrie;":"\u{22B5}\u{20D2}","nvsim;":"\u{223C}\u{20D2}","nwarhk;":Character(Unicode.Scalar(0x2923)!),
  495|       |    "nwArr;":Character(Unicode.Scalar(0x21D6)!),"nwarr;":Character(Unicode.Scalar(0x2196)!),"nwarrow;":Character(Unicode.Scalar(0x2196)!),"nwnear;":Character(Unicode.Scalar(0x2927)!),
  496|       |    "Oacute;":Character(Unicode.Scalar(0xD3)!),"oacute;":Character(Unicode.Scalar(0xF3)!),"oast;":Character(Unicode.Scalar(0x229B)!),"ocir;":Character(Unicode.Scalar(0x229A)!),
  497|       |    "Ocirc;":Character(Unicode.Scalar(0xD4)!),"ocirc;":Character(Unicode.Scalar(0xF4)!),"Ocy;":Character(Unicode.Scalar(0x41E)!),"ocy;":Character(Unicode.Scalar(0x43E)!),
  498|       |    "odash;":Character(Unicode.Scalar(0x229D)!),"Odblac;":Character(Unicode.Scalar(0x150)!),"odblac;":Character(Unicode.Scalar(0x151)!),"odiv;":Character(Unicode.Scalar(0x2A38)!),
  499|       |    "odot;":Character(Unicode.Scalar(0x2299)!),"odsold;":Character(Unicode.Scalar(0x29BC)!),"OElig;":Character(Unicode.Scalar(0x152)!),"oelig;":Character(Unicode.Scalar(0x153)!),
  500|       |    "ofcir;":Character(Unicode.Scalar(0x29BF)!),"Ofr;":Character(Unicode.Scalar(0x1D512)!),"ofr;":Character(Unicode.Scalar(0x1D52C)!),"ogon;":Character(Unicode.Scalar(0x2DB)!),
  501|       |    "Ograve;":Character(Unicode.Scalar(0xD2)!),"ograve;":Character(Unicode.Scalar(0xF2)!),"ogt;":Character(Unicode.Scalar(0x29C1)!),"ohbar;":Character(Unicode.Scalar(0x29B5)!),
  502|       |    "ohm;":Character(Unicode.Scalar(0x3A9)!),"oint;":Character(Unicode.Scalar(0x222E)!),"olarr;":Character(Unicode.Scalar(0x21BA)!),"olcir;":Character(Unicode.Scalar(0x29BE)!),
  503|       |    "olcross;":Character(Unicode.Scalar(0x29BB)!),"oline;":Character(Unicode.Scalar(0x203E)!),"olt;":Character(Unicode.Scalar(0x29C0)!),"Omacr;":Character(Unicode.Scalar(0x14C)!),
  504|       |    "omacr;":Character(Unicode.Scalar(0x14D)!),"Omega;":Character(Unicode.Scalar(0x3A9)!),"omega;":Character(Unicode.Scalar(0x3C9)!),"Omicron;":Character(Unicode.Scalar(0x39F)!),
  505|       |    "omicron;":Character(Unicode.Scalar(0x3BF)!),"omid;":Character(Unicode.Scalar(0x29B6)!),"ominus;":Character(Unicode.Scalar(0x2296)!),"Oopf;":Character(Unicode.Scalar(0x1D546)!),
  506|       |    "oopf;":Character(Unicode.Scalar(0x1D560)!),"opar;":Character(Unicode.Scalar(0x29B7)!),"OpenCurlyDoubleQuote;":Character(Unicode.Scalar(0x201C)!),"OpenCurlyQuote;":Character(Unicode.Scalar(0x2018)!),
  507|       |    "operp;":Character(Unicode.Scalar(0x29B9)!),"oplus;":Character(Unicode.Scalar(0x2295)!),"Or;":Character(Unicode.Scalar(0x2A54)!),"or;":Character(Unicode.Scalar(0x2228)!),
  508|       |    "orarr;":Character(Unicode.Scalar(0x21BB)!),"ord;":Character(Unicode.Scalar(0x2A5D)!),"order;":Character(Unicode.Scalar(0x2134)!),"orderof;":Character(Unicode.Scalar(0x2134)!),
  509|       |    "ordf;":Character(Unicode.Scalar(0xAA)!),"ordm;":Character(Unicode.Scalar(0xBA)!),"origof;":Character(Unicode.Scalar(0x22B6)!),"oror;":Character(Unicode.Scalar(0x2A56)!),
  510|       |    "orslope;":Character(Unicode.Scalar(0x2A57)!),"orv;":Character(Unicode.Scalar(0x2A5B)!),"oS;":Character(Unicode.Scalar(0x24C8)!),"Oscr;":Character(Unicode.Scalar(0x1D4AA)!),
  511|       |    "oscr;":Character(Unicode.Scalar(0x2134)!),"Oslash;":Character(Unicode.Scalar(0xD8)!),"oslash;":Character(Unicode.Scalar(0xF8)!),"osol;":Character(Unicode.Scalar(0x2298)!),
  512|       |    "Otilde;":Character(Unicode.Scalar(0xD5)!),"otilde;":Character(Unicode.Scalar(0xF5)!),"Otimes;":Character(Unicode.Scalar(0x2A37)!),"otimes;":Character(Unicode.Scalar(0x2297)!),
  513|       |    "otimesas;":Character(Unicode.Scalar(0x2A36)!),"Ouml;":Character(Unicode.Scalar(0xD6)!),"ouml;":Character(Unicode.Scalar(0xF6)!),"ovbar;":Character(Unicode.Scalar(0x233D)!),
  514|       |    "OverBar;":Character(Unicode.Scalar(0x203E)!),"OverBrace;":Character(Unicode.Scalar(0x23DE)!),"OverBracket;":Character(Unicode.Scalar(0x23B4)!),"OverParenthesis;":Character(Unicode.Scalar(0x23DC)!),
  515|       |    "par;":Character(Unicode.Scalar(0x2225)!),"para;":Character(Unicode.Scalar(0xB6)!),"parallel;":Character(Unicode.Scalar(0x2225)!),"parsim;":Character(Unicode.Scalar(0x2AF3)!),
  516|       |    "parsl;":Character(Unicode.Scalar(0x2AFD)!),"part;":Character(Unicode.Scalar(0x2202)!),"PartialD;":Character(Unicode.Scalar(0x2202)!),"Pcy;":Character(Unicode.Scalar(0x41F)!),
  517|       |    "pcy;":Character(Unicode.Scalar(0x43F)!),"percnt;":Character(Unicode.Scalar(0x25)!),"period;":Character(Unicode.Scalar(0x2E)!),"permil;":Character(Unicode.Scalar(0x2030)!),
  518|       |    "perp;":Character(Unicode.Scalar(0x22A5)!),"pertenk;":Character(Unicode.Scalar(0x2031)!),"Pfr;":Character(Unicode.Scalar(0x1D513)!),"pfr;":Character(Unicode.Scalar(0x1D52D)!),
  519|       |    "Phi;":Character(Unicode.Scalar(0x3A6)!),"phi;":Character(Unicode.Scalar(0x3C6)!),"phiv;":Character(Unicode.Scalar(0x3D5)!),"phmmat;":Character(Unicode.Scalar(0x2133)!),
  520|       |    "phone;":Character(Unicode.Scalar(0x260E)!),"Pi;":Character(Unicode.Scalar(0x3A0)!),"pi;":Character(Unicode.Scalar(0x3C0)!),"pitchfork;":Character(Unicode.Scalar(0x22D4)!),
  521|       |    "piv;":Character(Unicode.Scalar(0x3D6)!),"planck;":Character(Unicode.Scalar(0x210F)!),"planckh;":Character(Unicode.Scalar(0x210E)!),"plankv;":Character(Unicode.Scalar(0x210F)!),
  522|       |    "plus;":Character(Unicode.Scalar(0x2B)!),"plusacir;":Character(Unicode.Scalar(0x2A23)!),"plusb;":Character(Unicode.Scalar(0x229E)!),"pluscir;":Character(Unicode.Scalar(0x2A22)!),
  523|       |    "plusdo;":Character(Unicode.Scalar(0x2214)!),"plusdu;":Character(Unicode.Scalar(0x2A25)!),"pluse;":Character(Unicode.Scalar(0x2A72)!),"PlusMinus;":Character(Unicode.Scalar(0xB1)!),
  524|       |    "plusmn;":Character(Unicode.Scalar(0xB1)!),"plussim;":Character(Unicode.Scalar(0x2A26)!),"plustwo;":Character(Unicode.Scalar(0x2A27)!),"pm;":Character(Unicode.Scalar(0xB1)!),
  525|       |    "Poincareplane;":Character(Unicode.Scalar(0x210C)!),"pointint;":Character(Unicode.Scalar(0x2A15)!),"Popf;":Character(Unicode.Scalar(0x2119)!),"popf;":Character(Unicode.Scalar(0x1D561)!),
  526|       |    "pound;":Character(Unicode.Scalar(0xA3)!),"Pr;":Character(Unicode.Scalar(0x2ABB)!),"pr;":Character(Unicode.Scalar(0x227A)!),"prap;":Character(Unicode.Scalar(0x2AB7)!),
  527|       |    "prcue;":Character(Unicode.Scalar(0x227C)!),"prE;":Character(Unicode.Scalar(0x2AB3)!),"pre;":Character(Unicode.Scalar(0x2AAF)!),"prec;":Character(Unicode.Scalar(0x227A)!),
  528|       |    "precapprox;":Character(Unicode.Scalar(0x2AB7)!),"preccurlyeq;":Character(Unicode.Scalar(0x227C)!),"Precedes;":Character(Unicode.Scalar(0x227A)!),"PrecedesEqual;":Character(Unicode.Scalar(0x2AAF)!),
  529|       |    "PrecedesSlantEqual;":Character(Unicode.Scalar(0x227C)!),"PrecedesTilde;":Character(Unicode.Scalar(0x227E)!),"preceq;":Character(Unicode.Scalar(0x2AAF)!),"precnapprox;":Character(Unicode.Scalar(0x2AB9)!),
  530|       |    "precneqq;":Character(Unicode.Scalar(0x2AB5)!),"precnsim;":Character(Unicode.Scalar(0x22E8)!),"precsim;":Character(Unicode.Scalar(0x227E)!),"Prime;":Character(Unicode.Scalar(0x2033)!),
  531|       |    "prime;":Character(Unicode.Scalar(0x2032)!),"primes;":Character(Unicode.Scalar(0x2119)!),"prnap;":Character(Unicode.Scalar(0x2AB9)!),"prnE;":Character(Unicode.Scalar(0x2AB5)!),
  532|       |    "prnsim;":Character(Unicode.Scalar(0x22E8)!),"prod;":Character(Unicode.Scalar(0x220F)!),"Product;":Character(Unicode.Scalar(0x220F)!),"profalar;":Character(Unicode.Scalar(0x232E)!),
  533|       |    "profline;":Character(Unicode.Scalar(0x2312)!),"profsurf;":Character(Unicode.Scalar(0x2313)!),"prop;":Character(Unicode.Scalar(0x221D)!),"Proportion;":Character(Unicode.Scalar(0x2237)!),
  534|       |    "Proportional;":Character(Unicode.Scalar(0x221D)!),"propto;":Character(Unicode.Scalar(0x221D)!),"prsim;":Character(Unicode.Scalar(0x227E)!),"prurel;":Character(Unicode.Scalar(0x22B0)!),
  535|       |    "Pscr;":Character(Unicode.Scalar(0x1D4AB)!),"pscr;":Character(Unicode.Scalar(0x1D4C5)!),"Psi;":Character(Unicode.Scalar(0x3A8)!),"psi;":Character(Unicode.Scalar(0x3C8)!),
  536|       |    "puncsp;":Character(Unicode.Scalar(0x2008)!),"Qfr;":Character(Unicode.Scalar(0x1D514)!),"qfr;":Character(Unicode.Scalar(0x1D52E)!),"qint;":Character(Unicode.Scalar(0x2A0C)!),
  537|       |    "Qopf;":Character(Unicode.Scalar(0x211A)!),"qopf;":Character(Unicode.Scalar(0x1D562)!),"qprime;":Character(Unicode.Scalar(0x2057)!),"Qscr;":Character(Unicode.Scalar(0x1D4AC)!),
  538|       |    "qscr;":Character(Unicode.Scalar(0x1D4C6)!),"quaternions;":Character(Unicode.Scalar(0x210D)!),"quatint;":Character(Unicode.Scalar(0x2A16)!),"quest;":Character(Unicode.Scalar(0x3F)!),
  539|       |    "questeq;":Character(Unicode.Scalar(0x225F)!),"QUOT;":Character(Unicode.Scalar(0x22)!),"quot;":Character(Unicode.Scalar(0x22)!),"rAarr;":Character(Unicode.Scalar(0x21DB)!),
  540|       |    "race;":"\u{223D}\u{331}","Racute;":Character(Unicode.Scalar(0x154)!),"racute;":Character(Unicode.Scalar(0x155)!),"radic;":Character(Unicode.Scalar(0x221A)!),
  541|       |    "raemptyv;":Character(Unicode.Scalar(0x29B3)!),"Rang;":Character(Unicode.Scalar(0x27EB)!),"rang;":Character(Unicode.Scalar(0x27E9)!),"rangd;":Character(Unicode.Scalar(0x2992)!),
  542|       |    "range;":Character(Unicode.Scalar(0x29A5)!),"rangle;":Character(Unicode.Scalar(0x27E9)!),"raquo;":Character(Unicode.Scalar(0xBB)!),"Rarr;":Character(Unicode.Scalar(0x21A0)!),
  543|       |    "rArr;":Character(Unicode.Scalar(0x21D2)!),"rarr;":Character(Unicode.Scalar(0x2192)!),"rarrap;":Character(Unicode.Scalar(0x2975)!),"rarrb;":Character(Unicode.Scalar(0x21E5)!),
  544|       |    "rarrbfs;":Character(Unicode.Scalar(0x2920)!),"rarrc;":Character(Unicode.Scalar(0x2933)!),"rarrfs;":Character(Unicode.Scalar(0x291E)!),"rarrhk;":Character(Unicode.Scalar(0x21AA)!),
  545|       |    "rarrlp;":Character(Unicode.Scalar(0x21AC)!),"rarrpl;":Character(Unicode.Scalar(0x2945)!),"rarrsim;":Character(Unicode.Scalar(0x2974)!),"Rarrtl;":Character(Unicode.Scalar(0x2916)!),
  546|       |    "rarrtl;":Character(Unicode.Scalar(0x21A3)!),"rarrw;":Character(Unicode.Scalar(0x219D)!),"rAtail;":Character(Unicode.Scalar(0x291C)!),"ratail;":Character(Unicode.Scalar(0x291A)!),
  547|       |    "ratio;":Character(Unicode.Scalar(0x2236)!),"rationals;":Character(Unicode.Scalar(0x211A)!),"RBarr;":Character(Unicode.Scalar(0x2910)!),"rBarr;":Character(Unicode.Scalar(0x290F)!),
  548|       |    "rbarr;":Character(Unicode.Scalar(0x290D)!),"rbbrk;":Character(Unicode.Scalar(0x2773)!),"rbrace;":Character(Unicode.Scalar(0x7D)!),"rbrack;":Character(Unicode.Scalar(0x5D)!),
  549|       |    "rbrke;":Character(Unicode.Scalar(0x298C)!),"rbrksld;":Character(Unicode.Scalar(0x298E)!),"rbrkslu;":Character(Unicode.Scalar(0x2990)!),"Rcaron;":Character(Unicode.Scalar(0x158)!),
  550|       |    "rcaron;":Character(Unicode.Scalar(0x159)!),"Rcedil;":Character(Unicode.Scalar(0x156)!),"rcedil;":Character(Unicode.Scalar(0x157)!),"rceil;":Character(Unicode.Scalar(0x2309)!),
  551|       |    "rcub;":Character(Unicode.Scalar(0x7D)!),"Rcy;":Character(Unicode.Scalar(0x420)!),"rcy;":Character(Unicode.Scalar(0x440)!),"rdca;":Character(Unicode.Scalar(0x2937)!),
  552|       |    "rdldhar;":Character(Unicode.Scalar(0x2969)!),"rdquo;":Character(Unicode.Scalar(0x201D)!),"rdquor;":Character(Unicode.Scalar(0x201D)!),"rdsh;":Character(Unicode.Scalar(0x21B3)!),
  553|       |    "Re;":Character(Unicode.Scalar(0x211C)!),"real;":Character(Unicode.Scalar(0x211C)!),"realine;":Character(Unicode.Scalar(0x211B)!),"realpart;":Character(Unicode.Scalar(0x211C)!),
  554|       |    "reals;":Character(Unicode.Scalar(0x211D)!),"rect;":Character(Unicode.Scalar(0x25AD)!),"REG;":Character(Unicode.Scalar(0xAE)!),"reg;":Character(Unicode.Scalar(0xAE)!),
  555|       |    "ReverseElement;":Character(Unicode.Scalar(0x220B)!),"ReverseEquilibrium;":Character(Unicode.Scalar(0x21CB)!),"ReverseUpEquilibrium;":Character(Unicode.Scalar(0x296F)!),"rfisht;":Character(Unicode.Scalar(0x297D)!),
  556|       |    "rfloor;":Character(Unicode.Scalar(0x230B)!),"Rfr;":Character(Unicode.Scalar(0x211C)!),"rfr;":Character(Unicode.Scalar(0x1D52F)!),"rHar;":Character(Unicode.Scalar(0x2964)!),
  557|       |    "rhard;":Character(Unicode.Scalar(0x21C1)!),"rharu;":Character(Unicode.Scalar(0x21C0)!),"rharul;":Character(Unicode.Scalar(0x296C)!),"Rho;":Character(Unicode.Scalar(0x3A1)!),
  558|       |    "rho;":Character(Unicode.Scalar(0x3C1)!),"rhov;":Character(Unicode.Scalar(0x3F1)!),"RightAngleBracket;":Character(Unicode.Scalar(0x27E9)!),"RightArrow;":Character(Unicode.Scalar(0x2192)!),
  559|       |    "Rightarrow;":Character(Unicode.Scalar(0x21D2)!),"rightarrow;":Character(Unicode.Scalar(0x2192)!),"RightArrowBar;":Character(Unicode.Scalar(0x21E5)!),"RightArrowLeftArrow;":Character(Unicode.Scalar(0x21C4)!),
  560|       |    "rightarrowtail;":Character(Unicode.Scalar(0x21A3)!),"RightCeiling;":Character(Unicode.Scalar(0x2309)!),"RightDoubleBracket;":Character(Unicode.Scalar(0x27E7)!),"RightDownTeeVector;":Character(Unicode.Scalar(0x295D)!),
  561|       |    "RightDownVector;":Character(Unicode.Scalar(0x21C2)!),"RightDownVectorBar;":Character(Unicode.Scalar(0x2955)!),"RightFloor;":Character(Unicode.Scalar(0x230B)!),"rightharpoondown;":Character(Unicode.Scalar(0x21C1)!),
  562|       |    "rightharpoonup;":Character(Unicode.Scalar(0x21C0)!),"rightleftarrows;":Character(Unicode.Scalar(0x21C4)!),"rightleftharpoons;":Character(Unicode.Scalar(0x21CC)!),"rightrightarrows;":Character(Unicode.Scalar(0x21C9)!),
  563|       |    "rightsquigarrow;":Character(Unicode.Scalar(0x219D)!),"RightTee;":Character(Unicode.Scalar(0x22A2)!),"RightTeeArrow;":Character(Unicode.Scalar(0x21A6)!),"RightTeeVector;":Character(Unicode.Scalar(0x295B)!),
  564|       |    "rightthreetimes;":Character(Unicode.Scalar(0x22CC)!),"RightTriangle;":Character(Unicode.Scalar(0x22B3)!),"RightTriangleBar;":Character(Unicode.Scalar(0x29D0)!),"RightTriangleEqual;":Character(Unicode.Scalar(0x22B5)!),
  565|       |    "RightUpDownVector;":Character(Unicode.Scalar(0x294F)!),"RightUpTeeVector;":Character(Unicode.Scalar(0x295C)!),"RightUpVector;":Character(Unicode.Scalar(0x21BE)!),"RightUpVectorBar;":Character(Unicode.Scalar(0x2954)!),
  566|       |    "RightVector;":Character(Unicode.Scalar(0x21C0)!),"RightVectorBar;":Character(Unicode.Scalar(0x2953)!),"ring;":Character(Unicode.Scalar(0x2DA)!),"risingdotseq;":Character(Unicode.Scalar(0x2253)!),
  567|       |    "rlarr;":Character(Unicode.Scalar(0x21C4)!),"rlhar;":Character(Unicode.Scalar(0x21CC)!),"rlm;":Character(Unicode.Scalar(0x200F)!),"rmoust;":Character(Unicode.Scalar(0x23B1)!),
  568|       |    "rmoustache;":Character(Unicode.Scalar(0x23B1)!),"rnmid;":Character(Unicode.Scalar(0x2AEE)!),"roang;":Character(Unicode.Scalar(0x27ED)!),"roarr;":Character(Unicode.Scalar(0x21FE)!),
  569|       |    "robrk;":Character(Unicode.Scalar(0x27E7)!),"ropar;":Character(Unicode.Scalar(0x2986)!),"Ropf;":Character(Unicode.Scalar(0x211D)!),"ropf;":Character(Unicode.Scalar(0x1D563)!),
  570|       |    "roplus;":Character(Unicode.Scalar(0x2A2E)!),"rotimes;":Character(Unicode.Scalar(0x2A35)!),"RoundImplies;":Character(Unicode.Scalar(0x2970)!),"rpar;":Character(Unicode.Scalar(0x29)!),
  571|       |    "rpargt;":Character(Unicode.Scalar(0x2994)!),"rppolint;":Character(Unicode.Scalar(0x2A12)!),"rrarr;":Character(Unicode.Scalar(0x21C9)!),"Rrightarrow;":Character(Unicode.Scalar(0x21DB)!),
  572|       |    "rsaquo;":Character(Unicode.Scalar(0x203A)!),"Rscr;":Character(Unicode.Scalar(0x211B)!),"rscr;":Character(Unicode.Scalar(0x1D4C7)!),"Rsh;":Character(Unicode.Scalar(0x21B1)!),
  573|       |    "rsh;":Character(Unicode.Scalar(0x21B1)!),"rsqb;":Character(Unicode.Scalar(0x5D)!),"rsquo;":Character(Unicode.Scalar(0x2019)!),"rsquor;":Character(Unicode.Scalar(0x2019)!),
  574|       |    "rthree;":Character(Unicode.Scalar(0x22CC)!),"rtimes;":Character(Unicode.Scalar(0x22CA)!),"rtri;":Character(Unicode.Scalar(0x25B9)!),"rtrie;":Character(Unicode.Scalar(0x22B5)!),
  575|       |    "rtrif;":Character(Unicode.Scalar(0x25B8)!),"rtriltri;":Character(Unicode.Scalar(0x29CE)!),"RuleDelayed;":Character(Unicode.Scalar(0x29F4)!),"ruluhar;":Character(Unicode.Scalar(0x2968)!),
  576|       |    "rx;":Character(Unicode.Scalar(0x211E)!),"Sacute;":Character(Unicode.Scalar(0x15A)!),"sacute;":Character(Unicode.Scalar(0x15B)!),"sbquo;":Character(Unicode.Scalar(0x201A)!),
  577|       |    "Sc;":Character(Unicode.Scalar(0x2ABC)!),"sc;":Character(Unicode.Scalar(0x227B)!),"scap;":Character(Unicode.Scalar(0x2AB8)!),"Scaron;":Character(Unicode.Scalar(0x160)!),
  578|       |    "scaron;":Character(Unicode.Scalar(0x161)!),"sccue;":Character(Unicode.Scalar(0x227D)!),"scE;":Character(Unicode.Scalar(0x2AB4)!),"sce;":Character(Unicode.Scalar(0x2AB0)!),
  579|       |    "Scedil;":Character(Unicode.Scalar(0x15E)!),"scedil;":Character(Unicode.Scalar(0x15F)!),"Scirc;":Character(Unicode.Scalar(0x15C)!),"scirc;":Character(Unicode.Scalar(0x15D)!),
  580|       |    "scnap;":Character(Unicode.Scalar(0x2ABA)!),"scnE;":Character(Unicode.Scalar(0x2AB6)!),"scnsim;":Character(Unicode.Scalar(0x22E9)!),"scpolint;":Character(Unicode.Scalar(0x2A13)!),
  581|       |    "scsim;":Character(Unicode.Scalar(0x227F)!),"Scy;":Character(Unicode.Scalar(0x421)!),"scy;":Character(Unicode.Scalar(0x441)!),"sdot;":Character(Unicode.Scalar(0x22C5)!),
  582|       |    "sdotb;":Character(Unicode.Scalar(0x22A1)!),"sdote;":Character(Unicode.Scalar(0x2A66)!),"searhk;":Character(Unicode.Scalar(0x2925)!),"seArr;":Character(Unicode.Scalar(0x21D8)!),
  583|       |    "searr;":Character(Unicode.Scalar(0x2198)!),"searrow;":Character(Unicode.Scalar(0x2198)!),"sect;":Character(Unicode.Scalar(0xA7)!),"semi;":Character(Unicode.Scalar(0x3B)!),
  584|       |    "seswar;":Character(Unicode.Scalar(0x2929)!),"setminus;":Character(Unicode.Scalar(0x2216)!),"setmn;":Character(Unicode.Scalar(0x2216)!),"sext;":Character(Unicode.Scalar(0x2736)!),
  585|       |    "Sfr;":Character(Unicode.Scalar(0x1D516)!),"sfr;":Character(Unicode.Scalar(0x1D530)!),"sfrown;":Character(Unicode.Scalar(0x2322)!),"sharp;":Character(Unicode.Scalar(0x266F)!),
  586|       |    "SHCHcy;":Character(Unicode.Scalar(0x429)!),"shchcy;":Character(Unicode.Scalar(0x449)!),"SHcy;":Character(Unicode.Scalar(0x428)!),"shcy;":Character(Unicode.Scalar(0x448)!),
  587|       |    "ShortDownArrow;":Character(Unicode.Scalar(0x2193)!),"ShortLeftArrow;":Character(Unicode.Scalar(0x2190)!),"shortmid;":Character(Unicode.Scalar(0x2223)!),"shortparallel;":Character(Unicode.Scalar(0x2225)!),
  588|       |    "ShortRightArrow;":Character(Unicode.Scalar(0x2192)!),"ShortUpArrow;":Character(Unicode.Scalar(0x2191)!),"shy;":Character(Unicode.Scalar(0xAD)!),"Sigma;":Character(Unicode.Scalar(0x3A3)!),
  589|       |    "sigma;":Character(Unicode.Scalar(0x3C3)!),"sigmaf;":Character(Unicode.Scalar(0x3C2)!),"sigmav;":Character(Unicode.Scalar(0x3C2)!),"sim;":Character(Unicode.Scalar(0x223C)!),
  590|       |    "simdot;":Character(Unicode.Scalar(0x2A6A)!),"sime;":Character(Unicode.Scalar(0x2243)!),"simeq;":Character(Unicode.Scalar(0x2243)!),"simg;":Character(Unicode.Scalar(0x2A9E)!),
  591|       |    "simgE;":Character(Unicode.Scalar(0x2AA0)!),"siml;":Character(Unicode.Scalar(0x2A9D)!),"simlE;":Character(Unicode.Scalar(0x2A9F)!),"simne;":Character(Unicode.Scalar(0x2246)!),
  592|       |    "simplus;":Character(Unicode.Scalar(0x2A24)!),"simrarr;":Character(Unicode.Scalar(0x2972)!),"slarr;":Character(Unicode.Scalar(0x2190)!),"SmallCircle;":Character(Unicode.Scalar(0x2218)!),
  593|       |    "smallsetminus;":Character(Unicode.Scalar(0x2216)!),"smashp;":Character(Unicode.Scalar(0x2A33)!),"smeparsl;":Character(Unicode.Scalar(0x29E4)!),"smid;":Character(Unicode.Scalar(0x2223)!),
  594|       |    "smile;":Character(Unicode.Scalar(0x2323)!),"smt;":Character(Unicode.Scalar(0x2AAA)!),"smte;":Character(Unicode.Scalar(0x2AAC)!),"smtes;":"\u{2AAC}\u{FE00}",
  595|       |    "SOFTcy;":Character(Unicode.Scalar(0x42C)!),"softcy;":Character(Unicode.Scalar(0x44C)!),"sol;":Character(Unicode.Scalar(0x2F)!),"solb;":Character(Unicode.Scalar(0x29C4)!),
  596|       |    "solbar;":Character(Unicode.Scalar(0x233F)!),"Sopf;":Character(Unicode.Scalar(0x1D54A)!),"sopf;":Character(Unicode.Scalar(0x1D564)!),"spades;":Character(Unicode.Scalar(0x2660)!),
  597|       |    "spadesuit;":Character(Unicode.Scalar(0x2660)!),"spar;":Character(Unicode.Scalar(0x2225)!),"sqcap;":Character(Unicode.Scalar(0x2293)!),"sqcaps;":"\u{2293}\u{FE00}",
  598|       |    "sqcup;":Character(Unicode.Scalar(0x2294)!),"sqcups;":"\u{2294}\u{FE00}","Sqrt;":Character(Unicode.Scalar(0x221A)!),"sqsub;":Character(Unicode.Scalar(0x228F)!),
  599|       |    "sqsube;":Character(Unicode.Scalar(0x2291)!),"sqsubset;":Character(Unicode.Scalar(0x228F)!),"sqsubseteq;":Character(Unicode.Scalar(0x2291)!),"sqsup;":Character(Unicode.Scalar(0x2290)!),
  600|       |    "sqsupe;":Character(Unicode.Scalar(0x2292)!),"sqsupset;":Character(Unicode.Scalar(0x2290)!),"sqsupseteq;":Character(Unicode.Scalar(0x2292)!),"squ;":Character(Unicode.Scalar(0x25A1)!),
  601|       |    "Square;":Character(Unicode.Scalar(0x25A1)!),"square;":Character(Unicode.Scalar(0x25A1)!),"SquareIntersection;":Character(Unicode.Scalar(0x2293)!),"SquareSubset;":Character(Unicode.Scalar(0x228F)!),
  602|       |    "SquareSubsetEqual;":Character(Unicode.Scalar(0x2291)!),"SquareSuperset;":Character(Unicode.Scalar(0x2290)!),"SquareSupersetEqual;":Character(Unicode.Scalar(0x2292)!),"SquareUnion;":Character(Unicode.Scalar(0x2294)!),
  603|       |    "squarf;":Character(Unicode.Scalar(0x25AA)!),"squf;":Character(Unicode.Scalar(0x25AA)!),"srarr;":Character(Unicode.Scalar(0x2192)!),"Sscr;":Character(Unicode.Scalar(0x1D4AE)!),
  604|       |    "sscr;":Character(Unicode.Scalar(0x1D4C8)!),"ssetmn;":Character(Unicode.Scalar(0x2216)!),"ssmile;":Character(Unicode.Scalar(0x2323)!),"sstarf;":Character(Unicode.Scalar(0x22C6)!),
  605|       |    "Star;":Character(Unicode.Scalar(0x22C6)!),"star;":Character(Unicode.Scalar(0x2606)!),"starf;":Character(Unicode.Scalar(0x2605)!),"straightepsilon;":Character(Unicode.Scalar(0x3F5)!),
  606|       |    "straightphi;":Character(Unicode.Scalar(0x3D5)!),"strns;":Character(Unicode.Scalar(0xAF)!),"Sub;":Character(Unicode.Scalar(0x22D0)!),"sub;":Character(Unicode.Scalar(0x2282)!),
  607|       |    "subdot;":Character(Unicode.Scalar(0x2ABD)!),"subE;":Character(Unicode.Scalar(0x2AC5)!),"sube;":Character(Unicode.Scalar(0x2286)!),"subedot;":Character(Unicode.Scalar(0x2AC3)!),
  608|       |    "submult;":Character(Unicode.Scalar(0x2AC1)!),"subnE;":Character(Unicode.Scalar(0x2ACB)!),"subne;":Character(Unicode.Scalar(0x228A)!),"subplus;":Character(Unicode.Scalar(0x2ABF)!),
  609|       |    "subrarr;":Character(Unicode.Scalar(0x2979)!),"Subset;":Character(Unicode.Scalar(0x22D0)!),"subset;":Character(Unicode.Scalar(0x2282)!),"subseteq;":Character(Unicode.Scalar(0x2286)!),
  610|       |    "subseteqq;":Character(Unicode.Scalar(0x2AC5)!),"SubsetEqual;":Character(Unicode.Scalar(0x2286)!),"subsetneq;":Character(Unicode.Scalar(0x228A)!),"subsetneqq;":Character(Unicode.Scalar(0x2ACB)!),
  611|       |    "subsim;":Character(Unicode.Scalar(0x2AC7)!),"subsub;":Character(Unicode.Scalar(0x2AD5)!),"subsup;":Character(Unicode.Scalar(0x2AD3)!),"succ;":Character(Unicode.Scalar(0x227B)!),
  612|       |    "succapprox;":Character(Unicode.Scalar(0x2AB8)!),"succcurlyeq;":Character(Unicode.Scalar(0x227D)!),"Succeeds;":Character(Unicode.Scalar(0x227B)!),"SucceedsEqual;":Character(Unicode.Scalar(0x2AB0)!),
  613|       |    "SucceedsSlantEqual;":Character(Unicode.Scalar(0x227D)!),"SucceedsTilde;":Character(Unicode.Scalar(0x227F)!),"succeq;":Character(Unicode.Scalar(0x2AB0)!),"succnapprox;":Character(Unicode.Scalar(0x2ABA)!),
  614|       |    "succneqq;":Character(Unicode.Scalar(0x2AB6)!),"succnsim;":Character(Unicode.Scalar(0x22E9)!),"succsim;":Character(Unicode.Scalar(0x227F)!),"SuchThat;":Character(Unicode.Scalar(0x220B)!),
  615|       |    "Sum;":Character(Unicode.Scalar(0x2211)!),"sum;":Character(Unicode.Scalar(0x2211)!),"sung;":Character(Unicode.Scalar(0x266A)!),"Sup;":Character(Unicode.Scalar(0x22D1)!),
  616|       |    "sup;":Character(Unicode.Scalar(0x2283)!),"sup1;":Character(Unicode.Scalar(0xB9)!),"sup2;":Character(Unicode.Scalar(0xB2)!),"sup3;":Character(Unicode.Scalar(0xB3)!),
  617|       |    "supdot;":Character(Unicode.Scalar(0x2ABE)!),"supdsub;":Character(Unicode.Scalar(0x2AD8)!),"supE;":Character(Unicode.Scalar(0x2AC6)!),"supe;":Character(Unicode.Scalar(0x2287)!),
  618|       |    "supedot;":Character(Unicode.Scalar(0x2AC4)!),"Superset;":Character(Unicode.Scalar(0x2283)!),"SupersetEqual;":Character(Unicode.Scalar(0x2287)!),"suphsol;":Character(Unicode.Scalar(0x27C9)!),
  619|       |    "suphsub;":Character(Unicode.Scalar(0x2AD7)!),"suplarr;":Character(Unicode.Scalar(0x297B)!),"supmult;":Character(Unicode.Scalar(0x2AC2)!),"supnE;":Character(Unicode.Scalar(0x2ACC)!),
  620|       |    "supne;":Character(Unicode.Scalar(0x228B)!),"supplus;":Character(Unicode.Scalar(0x2AC0)!),"Supset;":Character(Unicode.Scalar(0x22D1)!),"supset;":Character(Unicode.Scalar(0x2283)!),
  621|       |    "supseteq;":Character(Unicode.Scalar(0x2287)!),"supseteqq;":Character(Unicode.Scalar(0x2AC6)!),"supsetneq;":Character(Unicode.Scalar(0x228B)!),"supsetneqq;":Character(Unicode.Scalar(0x2ACC)!),
  622|       |    "supsim;":Character(Unicode.Scalar(0x2AC8)!),"supsub;":Character(Unicode.Scalar(0x2AD4)!),"supsup;":Character(Unicode.Scalar(0x2AD6)!),"swarhk;":Character(Unicode.Scalar(0x2926)!),
  623|       |    "swArr;":Character(Unicode.Scalar(0x21D9)!),"swarr;":Character(Unicode.Scalar(0x2199)!),"swarrow;":Character(Unicode.Scalar(0x2199)!),"swnwar;":Character(Unicode.Scalar(0x292A)!),
  624|       |    "szlig;":Character(Unicode.Scalar(0xDF)!),"Tab;":Character(Unicode.Scalar(0x9)!),"target;":Character(Unicode.Scalar(0x2316)!),"Tau;":Character(Unicode.Scalar(0x3A4)!),
  625|       |    "tau;":Character(Unicode.Scalar(0x3C4)!),"tbrk;":Character(Unicode.Scalar(0x23B4)!),"Tcaron;":Character(Unicode.Scalar(0x164)!),"tcaron;":Character(Unicode.Scalar(0x165)!),
  626|       |    "Tcedil;":Character(Unicode.Scalar(0x162)!),"tcedil;":Character(Unicode.Scalar(0x163)!),"Tcy;":Character(Unicode.Scalar(0x422)!),"tcy;":Character(Unicode.Scalar(0x442)!),
  627|       |    "tdot;":Character(Unicode.Scalar(0x20DB)!),"telrec;":Character(Unicode.Scalar(0x2315)!),"Tfr;":Character(Unicode.Scalar(0x1D517)!),"tfr;":Character(Unicode.Scalar(0x1D531)!),
  628|       |    "there4;":Character(Unicode.Scalar(0x2234)!),"Therefore;":Character(Unicode.Scalar(0x2234)!),"therefore;":Character(Unicode.Scalar(0x2234)!),"Theta;":Character(Unicode.Scalar(0x398)!),
  629|       |    "theta;":Character(Unicode.Scalar(0x3B8)!),"thetasym;":Character(Unicode.Scalar(0x3D1)!),"thetav;":Character(Unicode.Scalar(0x3D1)!),"thickapprox;":Character(Unicode.Scalar(0x2248)!),
  630|       |    "thicksim;":Character(Unicode.Scalar(0x223C)!),
  631|       |
  632|       |    // Skip "ThickSpace;" due to Swift not recognizing it as a single grapheme cluster
  633|       |    // "ThickSpace;":Character(Unicode.Scalar(0x205F}\u{200A)!),
  634|       |
  635|       |    "thinsp;":Character(Unicode.Scalar(0x2009)!),"ThinSpace;":Character(Unicode.Scalar(0x2009)!),"thkap;":Character(Unicode.Scalar(0x2248)!),"thksim;":Character(Unicode.Scalar(0x223C)!),
  636|       |    "THORN;":Character(Unicode.Scalar(0xDE)!),"thorn;":Character(Unicode.Scalar(0xFE)!),"Tilde;":Character(Unicode.Scalar(0x223C)!),"tilde;":Character(Unicode.Scalar(0x2DC)!),
  637|       |    "TildeEqual;":Character(Unicode.Scalar(0x2243)!),"TildeFullEqual;":Character(Unicode.Scalar(0x2245)!),"TildeTilde;":Character(Unicode.Scalar(0x2248)!),"times;":Character(Unicode.Scalar(0xD7)!),
  638|       |    "timesb;":Character(Unicode.Scalar(0x22A0)!),"timesbar;":Character(Unicode.Scalar(0x2A31)!),"timesd;":Character(Unicode.Scalar(0x2A30)!),"tint;":Character(Unicode.Scalar(0x222D)!),
  639|       |    "toea;":Character(Unicode.Scalar(0x2928)!),"top;":Character(Unicode.Scalar(0x22A4)!),"topbot;":Character(Unicode.Scalar(0x2336)!),"topcir;":Character(Unicode.Scalar(0x2AF1)!),
  640|       |    "Topf;":Character(Unicode.Scalar(0x1D54B)!),"topf;":Character(Unicode.Scalar(0x1D565)!),"topfork;":Character(Unicode.Scalar(0x2ADA)!),"tosa;":Character(Unicode.Scalar(0x2929)!),
  641|       |    "tprime;":Character(Unicode.Scalar(0x2034)!),"TRADE;":Character(Unicode.Scalar(0x2122)!),"trade;":Character(Unicode.Scalar(0x2122)!),"triangle;":Character(Unicode.Scalar(0x25B5)!),
  642|       |    "triangledown;":Character(Unicode.Scalar(0x25BF)!),"triangleleft;":Character(Unicode.Scalar(0x25C3)!),"trianglelefteq;":Character(Unicode.Scalar(0x22B4)!),"triangleq;":Character(Unicode.Scalar(0x225C)!),
  643|       |    "triangleright;":Character(Unicode.Scalar(0x25B9)!),"trianglerighteq;":Character(Unicode.Scalar(0x22B5)!),"tridot;":Character(Unicode.Scalar(0x25EC)!),"trie;":Character(Unicode.Scalar(0x225C)!),
  644|       |    "triminus;":Character(Unicode.Scalar(0x2A3A)!),"TripleDot;":Character(Unicode.Scalar(0x20DB)!),"triplus;":Character(Unicode.Scalar(0x2A39)!),"trisb;":Character(Unicode.Scalar(0x29CD)!),
  645|       |    "tritime;":Character(Unicode.Scalar(0x2A3B)!),"trpezium;":Character(Unicode.Scalar(0x23E2)!),"Tscr;":Character(Unicode.Scalar(0x1D4AF)!),"tscr;":Character(Unicode.Scalar(0x1D4C9)!),
  646|       |    "TScy;":Character(Unicode.Scalar(0x426)!),"tscy;":Character(Unicode.Scalar(0x446)!),"TSHcy;":Character(Unicode.Scalar(0x40B)!),"tshcy;":Character(Unicode.Scalar(0x45B)!),
  647|       |    "Tstrok;":Character(Unicode.Scalar(0x166)!),"tstrok;":Character(Unicode.Scalar(0x167)!),"twixt;":Character(Unicode.Scalar(0x226C)!),"twoheadleftarrow;":Character(Unicode.Scalar(0x219E)!),
  648|       |    "twoheadrightarrow;":Character(Unicode.Scalar(0x21A0)!),"Uacute;":Character(Unicode.Scalar(0xDA)!),"uacute;":Character(Unicode.Scalar(0xFA)!),"Uarr;":Character(Unicode.Scalar(0x219F)!),
  649|       |    "uArr;":Character(Unicode.Scalar(0x21D1)!),"uarr;":Character(Unicode.Scalar(0x2191)!),"Uarrocir;":Character(Unicode.Scalar(0x2949)!),"Ubrcy;":Character(Unicode.Scalar(0x40E)!),
  650|       |    "ubrcy;":Character(Unicode.Scalar(0x45E)!),"Ubreve;":Character(Unicode.Scalar(0x16C)!),"ubreve;":Character(Unicode.Scalar(0x16D)!),"Ucirc;":Character(Unicode.Scalar(0xDB)!),
  651|       |    "ucirc;":Character(Unicode.Scalar(0xFB)!),"Ucy;":Character(Unicode.Scalar(0x423)!),"ucy;":Character(Unicode.Scalar(0x443)!),"udarr;":Character(Unicode.Scalar(0x21C5)!),
  652|       |    "Udblac;":Character(Unicode.Scalar(0x170)!),"udblac;":Character(Unicode.Scalar(0x171)!),"udhar;":Character(Unicode.Scalar(0x296E)!),"ufisht;":Character(Unicode.Scalar(0x297E)!),
  653|       |    "Ufr;":Character(Unicode.Scalar(0x1D518)!),"ufr;":Character(Unicode.Scalar(0x1D532)!),"Ugrave;":Character(Unicode.Scalar(0xD9)!),"ugrave;":Character(Unicode.Scalar(0xF9)!),
  654|       |    "uHar;":Character(Unicode.Scalar(0x2963)!),"uharl;":Character(Unicode.Scalar(0x21BF)!),"uharr;":Character(Unicode.Scalar(0x21BE)!),"uhblk;":Character(Unicode.Scalar(0x2580)!),
  655|       |    "ulcorn;":Character(Unicode.Scalar(0x231C)!),"ulcorner;":Character(Unicode.Scalar(0x231C)!),"ulcrop;":Character(Unicode.Scalar(0x230F)!),"ultri;":Character(Unicode.Scalar(0x25F8)!),
  656|       |    "Umacr;":Character(Unicode.Scalar(0x16A)!),"umacr;":Character(Unicode.Scalar(0x16B)!),"uml;":Character(Unicode.Scalar(0xA8)!),"UnderBar;":Character(Unicode.Scalar(0x5F)!),
  657|       |    "UnderBrace;":Character(Unicode.Scalar(0x23DF)!),"UnderBracket;":Character(Unicode.Scalar(0x23B5)!),"UnderParenthesis;":Character(Unicode.Scalar(0x23DD)!),"Union;":Character(Unicode.Scalar(0x22C3)!),
  658|       |    "UnionPlus;":Character(Unicode.Scalar(0x228E)!),"Uogon;":Character(Unicode.Scalar(0x172)!),"uogon;":Character(Unicode.Scalar(0x173)!),"Uopf;":Character(Unicode.Scalar(0x1D54C)!),
  659|       |    "uopf;":Character(Unicode.Scalar(0x1D566)!),"UpArrow;":Character(Unicode.Scalar(0x2191)!),"Uparrow;":Character(Unicode.Scalar(0x21D1)!),"uparrow;":Character(Unicode.Scalar(0x2191)!),
  660|       |    "UpArrowBar;":Character(Unicode.Scalar(0x2912)!),"UpArrowDownArrow;":Character(Unicode.Scalar(0x21C5)!),"UpDownArrow;":Character(Unicode.Scalar(0x2195)!),"Updownarrow;":Character(Unicode.Scalar(0x21D5)!),
  661|       |    "updownarrow;":Character(Unicode.Scalar(0x2195)!),"UpEquilibrium;":Character(Unicode.Scalar(0x296E)!),"upharpoonleft;":Character(Unicode.Scalar(0x21BF)!),"upharpoonright;":Character(Unicode.Scalar(0x21BE)!),
  662|       |    "uplus;":Character(Unicode.Scalar(0x228E)!),"UpperLeftArrow;":Character(Unicode.Scalar(0x2196)!),"UpperRightArrow;":Character(Unicode.Scalar(0x2197)!),"Upsi;":Character(Unicode.Scalar(0x3D2)!),
  663|       |    "upsi;":Character(Unicode.Scalar(0x3C5)!),"upsih;":Character(Unicode.Scalar(0x3D2)!),"Upsilon;":Character(Unicode.Scalar(0x3A5)!),"upsilon;":Character(Unicode.Scalar(0x3C5)!),
  664|       |    "UpTee;":Character(Unicode.Scalar(0x22A5)!),"UpTeeArrow;":Character(Unicode.Scalar(0x21A5)!),"upuparrows;":Character(Unicode.Scalar(0x21C8)!),"urcorn;":Character(Unicode.Scalar(0x231D)!),
  665|       |    "urcorner;":Character(Unicode.Scalar(0x231D)!),"urcrop;":Character(Unicode.Scalar(0x230E)!),"Uring;":Character(Unicode.Scalar(0x16E)!),"uring;":Character(Unicode.Scalar(0x16F)!),
  666|       |    "urtri;":Character(Unicode.Scalar(0x25F9)!),"Uscr;":Character(Unicode.Scalar(0x1D4B0)!),"uscr;":Character(Unicode.Scalar(0x1D4CA)!),"utdot;":Character(Unicode.Scalar(0x22F0)!),
  667|       |    "Utilde;":Character(Unicode.Scalar(0x168)!),"utilde;":Character(Unicode.Scalar(0x169)!),"utri;":Character(Unicode.Scalar(0x25B5)!),"utrif;":Character(Unicode.Scalar(0x25B4)!),
  668|       |    "uuarr;":Character(Unicode.Scalar(0x21C8)!),"Uuml;":Character(Unicode.Scalar(0xDC)!),"uuml;":Character(Unicode.Scalar(0xFC)!),"uwangle;":Character(Unicode.Scalar(0x29A7)!),
  669|       |    "vangrt;":Character(Unicode.Scalar(0x299C)!),"varepsilon;":Character(Unicode.Scalar(0x3F5)!),"varkappa;":Character(Unicode.Scalar(0x3F0)!),"varnothing;":Character(Unicode.Scalar(0x2205)!),
  670|       |    "varphi;":Character(Unicode.Scalar(0x3D5)!),"varpi;":Character(Unicode.Scalar(0x3D6)!),"varpropto;":Character(Unicode.Scalar(0x221D)!),"vArr;":Character(Unicode.Scalar(0x21D5)!),
  671|       |    "varr;":Character(Unicode.Scalar(0x2195)!),"varrho;":Character(Unicode.Scalar(0x3F1)!),"varsigma;":Character(Unicode.Scalar(0x3C2)!),"varsubsetneq;":"\u{228A}\u{FE00}",
  672|       |    "varsubsetneqq;":"\u{2ACB}\u{FE00}","varsupsetneq;":"\u{228B}\u{FE00}","varsupsetneqq;":"\u{2ACC}\u{FE00}","vartheta;":Character(Unicode.Scalar(0x3D1)!),
  673|       |    "vartriangleleft;":Character(Unicode.Scalar(0x22B2)!),"vartriangleright;":Character(Unicode.Scalar(0x22B3)!),"Vbar;":Character(Unicode.Scalar(0x2AEB)!),"vBar;":Character(Unicode.Scalar(0x2AE8)!),
  674|       |    "vBarv;":Character(Unicode.Scalar(0x2AE9)!),"Vcy;":Character(Unicode.Scalar(0x412)!),"vcy;":Character(Unicode.Scalar(0x432)!),"VDash;":Character(Unicode.Scalar(0x22AB)!),
  675|       |    "Vdash;":Character(Unicode.Scalar(0x22A9)!),"vDash;":Character(Unicode.Scalar(0x22A8)!),"vdash;":Character(Unicode.Scalar(0x22A2)!),"Vdashl;":Character(Unicode.Scalar(0x2AE6)!),
  676|       |    "Vee;":Character(Unicode.Scalar(0x22C1)!),"vee;":Character(Unicode.Scalar(0x2228)!),"veebar;":Character(Unicode.Scalar(0x22BB)!),"veeeq;":Character(Unicode.Scalar(0x225A)!),
  677|       |    "vellip;":Character(Unicode.Scalar(0x22EE)!),"Verbar;":Character(Unicode.Scalar(0x2016)!),"verbar;":Character(Unicode.Scalar(0x7C)!),"Vert;":Character(Unicode.Scalar(0x2016)!),
  678|       |    "vert;":Character(Unicode.Scalar(0x7C)!),"VerticalBar;":Character(Unicode.Scalar(0x2223)!),"VerticalLine;":Character(Unicode.Scalar(0x7C)!),"VerticalSeparator;":Character(Unicode.Scalar(0x2758)!),
  679|       |    "VerticalTilde;":Character(Unicode.Scalar(0x2240)!),"VeryThinSpace;":Character(Unicode.Scalar(0x200A)!),"Vfr;":Character(Unicode.Scalar(0x1D519)!),"vfr;":Character(Unicode.Scalar(0x1D533)!),
  680|       |    "vltri;":Character(Unicode.Scalar(0x22B2)!),"vnsub;":"\u{2282}\u{20D2}","vnsup;":"\u{2283}\u{20D2}","Vopf;":Character(Unicode.Scalar(0x1D54D)!),
  681|       |    "vopf;":Character(Unicode.Scalar(0x1D567)!),"vprop;":Character(Unicode.Scalar(0x221D)!),"vrtri;":Character(Unicode.Scalar(0x22B3)!),"Vscr;":Character(Unicode.Scalar(0x1D4B1)!),
  682|       |    "vscr;":Character(Unicode.Scalar(0x1D4CB)!),"vsubnE;":"\u{2ACB}\u{FE00}","vsubne;":"\u{228A}\u{FE00}","vsupnE;":"\u{2ACC}\u{FE00}",
  683|       |    "vsupne;":"\u{228B}\u{FE00}","Vvdash;":Character(Unicode.Scalar(0x22AA)!),"vzigzag;":Character(Unicode.Scalar(0x299A)!),"Wcirc;":Character(Unicode.Scalar(0x174)!),
  684|       |    "wcirc;":Character(Unicode.Scalar(0x175)!),"wedbar;":Character(Unicode.Scalar(0x2A5F)!),"Wedge;":Character(Unicode.Scalar(0x22C0)!),"wedge;":Character(Unicode.Scalar(0x2227)!),
  685|       |    "wedgeq;":Character(Unicode.Scalar(0x2259)!),"weierp;":Character(Unicode.Scalar(0x2118)!),"Wfr;":Character(Unicode.Scalar(0x1D51A)!),"wfr;":Character(Unicode.Scalar(0x1D534)!),
  686|       |    "Wopf;":Character(Unicode.Scalar(0x1D54E)!),"wopf;":Character(Unicode.Scalar(0x1D568)!),"wp;":Character(Unicode.Scalar(0x2118)!),"wr;":Character(Unicode.Scalar(0x2240)!),
  687|       |    "wreath;":Character(Unicode.Scalar(0x2240)!),"Wscr;":Character(Unicode.Scalar(0x1D4B2)!),"wscr;":Character(Unicode.Scalar(0x1D4CC)!),"xcap;":Character(Unicode.Scalar(0x22C2)!),
  688|       |    "xcirc;":Character(Unicode.Scalar(0x25EF)!),"xcup;":Character(Unicode.Scalar(0x22C3)!),"xdtri;":Character(Unicode.Scalar(0x25BD)!),"Xfr;":Character(Unicode.Scalar(0x1D51B)!),
  689|       |    "xfr;":Character(Unicode.Scalar(0x1D535)!),"xhArr;":Character(Unicode.Scalar(0x27FA)!),"xharr;":Character(Unicode.Scalar(0x27F7)!),"Xi;":Character(Unicode.Scalar(0x39E)!),
  690|       |    "xi;":Character(Unicode.Scalar(0x3BE)!),"xlArr;":Character(Unicode.Scalar(0x27F8)!),"xlarr;":Character(Unicode.Scalar(0x27F5)!),"xmap;":Character(Unicode.Scalar(0x27FC)!),
  691|       |    "xnis;":Character(Unicode.Scalar(0x22FB)!),"xodot;":Character(Unicode.Scalar(0x2A00)!),"Xopf;":Character(Unicode.Scalar(0x1D54F)!),"xopf;":Character(Unicode.Scalar(0x1D569)!),
  692|       |    "xoplus;":Character(Unicode.Scalar(0x2A01)!),"xotime;":Character(Unicode.Scalar(0x2A02)!),"xrArr;":Character(Unicode.Scalar(0x27F9)!),"xrarr;":Character(Unicode.Scalar(0x27F6)!),
  693|       |    "Xscr;":Character(Unicode.Scalar(0x1D4B3)!),"xscr;":Character(Unicode.Scalar(0x1D4CD)!),"xsqcup;":Character(Unicode.Scalar(0x2A06)!),"xuplus;":Character(Unicode.Scalar(0x2A04)!),
  694|       |    "xutri;":Character(Unicode.Scalar(0x25B3)!),"xvee;":Character(Unicode.Scalar(0x22C1)!),"xwedge;":Character(Unicode.Scalar(0x22C0)!),"Yacute;":Character(Unicode.Scalar(0xDD)!),
  695|       |    "yacute;":Character(Unicode.Scalar(0xFD)!),"YAcy;":Character(Unicode.Scalar(0x42F)!),"yacy;":Character(Unicode.Scalar(0x44F)!),"Ycirc;":Character(Unicode.Scalar(0x176)!),
  696|       |    "ycirc;":Character(Unicode.Scalar(0x177)!),"Ycy;":Character(Unicode.Scalar(0x42B)!),"ycy;":Character(Unicode.Scalar(0x44B)!),"yen;":Character(Unicode.Scalar(0xA5)!),
  697|       |    "Yfr;":Character(Unicode.Scalar(0x1D51C)!),"yfr;":Character(Unicode.Scalar(0x1D536)!),"YIcy;":Character(Unicode.Scalar(0x407)!),"yicy;":Character(Unicode.Scalar(0x457)!),
  698|       |    "Yopf;":Character(Unicode.Scalar(0x1D550)!),"yopf;":Character(Unicode.Scalar(0x1D56A)!),"Yscr;":Character(Unicode.Scalar(0x1D4B4)!),"yscr;":Character(Unicode.Scalar(0x1D4CE)!),
  699|       |    "YUcy;":Character(Unicode.Scalar(0x42E)!),"yucy;":Character(Unicode.Scalar(0x44E)!),"Yuml;":Character(Unicode.Scalar(0x178)!),"yuml;":Character(Unicode.Scalar(0xFF)!),
  700|       |    "Zacute;":Character(Unicode.Scalar(0x179)!),"zacute;":Character(Unicode.Scalar(0x17A)!),"Zcaron;":Character(Unicode.Scalar(0x17D)!),"zcaron;":Character(Unicode.Scalar(0x17E)!),
  701|       |    "Zcy;":Character(Unicode.Scalar(0x417)!),"zcy;":Character(Unicode.Scalar(0x437)!),"Zdot;":Character(Unicode.Scalar(0x17B)!),"zdot;":Character(Unicode.Scalar(0x17C)!),
  702|       |    "zeetrf;":Character(Unicode.Scalar(0x2128)!),"ZeroWidthSpace;":Character(Unicode.Scalar(0x200B)!),"Zeta;":Character(Unicode.Scalar(0x396)!),"zeta;":Character(Unicode.Scalar(0x3B6)!),
  703|       |    "Zfr;":Character(Unicode.Scalar(0x2128)!),"zfr;":Character(Unicode.Scalar(0x1D537)!),"ZHcy;":Character(Unicode.Scalar(0x416)!),"zhcy;":Character(Unicode.Scalar(0x436)!),
  704|       |    "zigrarr;":Character(Unicode.Scalar(0x21DD)!),"Zopf;":Character(Unicode.Scalar(0x2124)!),"zopf;":Character(Unicode.Scalar(0x1D56B)!),"Zscr;":Character(Unicode.Scalar(0x1D4B5)!),
  705|       |    "zscr;":Character(Unicode.Scalar(0x1D4CF)!),"zwj;":Character(Unicode.Scalar(0x200D)!),"zwnj;":Character(Unicode.Scalar(0x200C)!)
  706|       |]

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/swift-html-entities/Sources/HTMLEntities/String+HTMLEntities.swift:
    1|       |/*
    2|       | * Copyright IBM Corporation 2016, 2017
    3|       | *
    4|       | * Licensed under the Apache License, Version 2.0 (the "License");
    5|       | * you may not use this file except in compliance with the License.
    6|       | * You may obtain a copy of the License at
    7|       | *
    8|       | * http://www.apache.org/licenses/LICENSE-2.0
    9|       | *
   10|       | * Unless required by applicable law or agreed to in writing, software
   11|       | * distributed under the License is distributed on an "AS IS" BASIS,
   12|       | * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   13|       | * See the License for the specific language governing permissions and
   14|       | * limitations under the License.
   15|       | */
   16|       |
   17|       |/// This String extension provides utility functions to convert strings to their
   18|       |/// HTML escaped equivalents and vice versa.
   19|       |public extension String {
   20|       |    /// Global HTML escape options
   21|       |    struct HTMLEscapeOptions {
   22|       |        /// Specifies if all ASCII characters should be skipped when escaping text
   23|       |        public static var allowUnsafeSymbols = false
   24|       |
   25|       |        /// Specifies if decimal escapes should be used instead of hexadecimal escapes
   26|       |        public static var decimal = false
   27|       |
   28|       |        /// Specifies if all characters should be escaped, even if some are safe characters
   29|       |        public static var encodeEverything = false
   30|       |
   31|       |        /// Specifies if named character references should be used whenever possible
   32|       |        public static var useNamedReferences = false
   33|       |    }
   34|       |
   35|       |    // Private enum used by the parser state machine
   36|       |    private enum EntityParseState {
   37|       |        case Dec
   38|       |        case Hex
   39|       |        case Invalid
   40|       |        case Named
   41|       |        case Number
   42|       |        case Unknown
   43|       |    }
   44|       |
   45|       |    /// Return string as HTML escaped by replacing non-ASCII and unsafe characters
   46|       |    /// with their numeric character escapes, or if such exists, their HTML named
   47|       |    /// character reference equivalents. For example, this function turns
   48|       |    ///
   49|       |    /// `"<script>alert("abc")</script>"`
   50|       |    ///
   51|       |    /// into
   52|       |    ///
   53|       |    /// `"&lt;script&gt;alert(&quot;abc&quot;)&lt;/script&gt;"`
   54|       |    ///
   55|       |    /// You can view/change default option values globally via `String.HTMLEscapeOptions`.
   56|       |    ///
   57|       |    /// - Parameter allowUnsafeSymbols: Specifies if all ASCII characters should be skipped
   58|       |    /// when escaping text. *Optional*
   59|       |    /// - Parameter decimal: Specifies if decimal escapes should be used instead of
   60|       |    /// hexadecimal escapes. *Optional*
   61|       |    /// - Parameter encodeEverything: Specifies if all characters should be escaped, even if
   62|       |    /// some are safe characters. *Optional*
   63|       |    /// - Parameter useNamedReferences: Specifies if named character references
   64|       |    /// should be used whenever possible. *Optional*
   65|       |    func htmlEscape(allowUnsafeSymbols: Bool = HTMLEscapeOptions.allowUnsafeSymbols,
   66|       |                           decimal: Bool = HTMLEscapeOptions.decimal,
   67|       |                           encodeEverything: Bool = HTMLEscapeOptions.encodeEverything,
   68|       |                           useNamedReferences: Bool = HTMLEscapeOptions.useNamedReferences)
   69|      0|        -> String {
   70|      0|            // result buffer
   71|      0|            var str: String = ""
   72|      0|
   73|      0|            #if swift(>=3.2)
   74|      0|                let characters = self
   75|      0|            #else
   76|      0|                let characters = self.characters
   77|      0|            #endif
   78|      0|
   79|      0|            for c in characters {
   80|      0|                let unicodes = String(c).unicodeScalars
   81|      0|
   82|      0|                if !encodeEverything,
   83|      0|                    unicodes.count == 1,
   84|      0|                    let unicode = unicodes.first?.value,
   85|      0|                    unicode.isASCII && allowUnsafeSymbols || unicode.isSafeASCII {
   86|      0|                    // character consists of only one unicode,
   87|      0|                    // and is a safe ASCII character,
   88|      0|                    // or allowUnsafeSymbols is true
   89|      0|                    str += String(c)
   90|      0|                }
   91|      0|                else if useNamedReferences,
   92|      0|                    let entity = namedCharactersEncodeMap[c] {
   93|      0|                    // character has a named character reference equivalent
   94|      0|                    str += "&" + entity
   95|      0|                }
   96|      0|                else {
   97|      0|                    // all other cases:
   98|      0|                    // deconstruct character into unicodes,
   99|      0|                    // then escape each unicode individually
  100|      0|                    for scalar in unicodes {
  101|      0|                        let unicode = scalar.value
  102|      0|
  103|      0|                        if !encodeEverything && unicode.isSafeASCII {
  104|      0|                            str += String(scalar)
  105|      0|                        }
  106|      0|                        else {
  107|      0|                            let codeStr = decimal ? String(unicode, radix: 10) :
  108|      0|                                "x" + String(unicode, radix: 16, uppercase: true)
  109|      0|
  110|      0|                            str += "&#" + codeStr + ";"
  111|      0|                        }
  112|      0|                    }
  113|      0|                }
  114|      0|            }
  115|      0|
  116|      0|            return str
  117|      0|    }
  118|       |
  119|       |    /// Return string as HTML unescaped by replacing HTML character references with their
  120|       |    /// unicode character equivalents. For example, this function turns
  121|       |    ///
  122|       |    /// `"&lt;script&gt;alert(&quot;abc&quot;)&lt;/script&gt;"`
  123|       |    ///
  124|       |    /// into
  125|       |    ///
  126|       |    /// `"<script>alert(\"abc\")</script>"`
  127|       |    ///
  128|       |    /// - Parameter strict: Specifies if escapes MUST always end with `;`.
  129|       |    /// - Throws: (Only if `strict == true`) The first `ParseError` encountered during parsing.
  130|      0|    func htmlUnescape(strict: Bool) throws -> String {
  131|      0|        // result buffer
  132|      0|        var str = ""
  133|      0|
  134|      0|        // entity buffers
  135|      0|        var entityPrefix = ""
  136|      0|        var entity = ""
  137|      0|
  138|      0|        // current parse state
  139|      0|        var state = EntityParseState.Invalid
  140|      0|
  141|      0|        for u in self.unicodeScalars {
  142|      0|            let unicodeAsString = String(u)
  143|      0|            let unicode = u.value
  144|      0|
  145|      0|            // nondeterminstic finite automaton for parsing entity
  146|      0|            switch state {
  147|      0|            case .Invalid:
  148|      0|                if unicode.isAmpersand {
  149|      0|                    // start of a possible character reference
  150|      0|                    state = .Unknown
  151|      0|                    entityPrefix = unicodeAsString
  152|      0|                }
  153|      0|                else {
  154|      0|                    // move unicode to result buffer
  155|      0|                    str += unicodeAsString
  156|      0|                }
  157|      0|            case .Unknown:
  158|      0|                // previously parsed &
  159|      0|                // need to determine type of character reference
  160|      0|                if unicode.isAmpersand {
  161|      0|                    // parsed & again
  162|      0|                    // move previous & to result buffer
  163|      0|                    str += unicodeAsString
  164|      0|                }
  165|      0|                else if unicode.isHash {
  166|      0|                    // numeric character reference
  167|      0|                    state = .Number
  168|      0|                    entityPrefix += unicodeAsString
  169|      0|                }
  170|      0|                else if unicode.isAlphaNumeric {
  171|      0|                    // named character reference
  172|      0|                    state = .Named
  173|      0|
  174|      0|                    // move current unicode to entity buffer
  175|      0|                    entity += unicodeAsString
  176|      0|                }
  177|      0|                else {
  178|      0|                    // false alarm, not a character reference
  179|      0|                    // move back to invalid state
  180|      0|                    state = .Invalid
  181|      0|
  182|      0|                    // move the consumed & and current unicode to result buffer
  183|      0|                    str += entityPrefix + unicodeAsString
  184|      0|
  185|      0|                    // clear entityPrefix buffer
  186|      0|                    entityPrefix = ""
  187|      0|                }
  188|      0|            case .Number:
  189|      0|                // previously parsed &#
  190|      0|                // need to determine dec or hex
  191|      0|                if unicode.isAmpersand {
  192|      0|                    // parsed & again
  193|      0|                    if strict {
  194|      0|                        // https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
  195|      0|                        // "If no characters match the range, then don't consume any characters
  196|      0|                        // (and unconsume the U+0023 NUMBER SIGN character and, if appropriate,
  197|      0|                        // the X character). This is a parse error; nothing is returned."
  198|      0|                        throw ParseError.MalformedNumericReference(entityPrefix + unicodeAsString)
  199|      0|                    }
  200|      0|
  201|      0|                    // move the consume &# to result buffer
  202|      0|                    str += entityPrefix
  203|      0|
  204|      0|                    // move to unknown state
  205|      0|                    state = .Unknown
  206|      0|                    entityPrefix = unicodeAsString
  207|      0|                }
  208|      0|                else if unicode.isX {
  209|      0|                    // hexadecimal numeric character reference
  210|      0|                    state = .Hex
  211|      0|                    entityPrefix += unicodeAsString
  212|      0|                }
  213|      0|                else if unicode.isNumeral {
  214|      0|                    // decimal numeric character reference
  215|      0|                    state = .Dec
  216|      0|                    entity += unicodeAsString
  217|      0|                }
  218|      0|                else {
  219|      0|                    // false alarm, not a character reference
  220|      0|                    if strict {
  221|      0|                        // https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
  222|      0|                        // "If no characters match the range, then don't consume any characters
  223|      0|                        // (and unconsume the U+0023 NUMBER SIGN character and, if appropriate,
  224|      0|                        // the X character). This is a parse error; nothing is returned."
  225|      0|                        throw ParseError.MalformedNumericReference(entityPrefix + unicodeAsString)
  226|      0|                    }
  227|      0|
  228|      0|                    // move the consumed &# and current unicode to result buffer
  229|      0|                    str += entityPrefix + unicodeAsString
  230|      0|
  231|      0|                    // move to invalid state
  232|      0|                    state = .Invalid
  233|      0|                    entityPrefix = ""
  234|      0|                    entity = ""
  235|      0|                }
  236|      0|            case .Dec, .Hex:
  237|      0|                // previously parsed &#[0-9]+ or &#[xX][0-9A-Fa-f]*
  238|      0|                if state == .Dec && unicode.isNumeral || state == .Hex && unicode.isHexNumeral {
  239|      0|                    // greedy matching
  240|      0|                    // consume as many valid characters as possible before unescaping
  241|      0|                    entity += unicodeAsString
  242|      0|                }
  243|      0|                else {
  244|      0|                    // current character is not in matching range
  245|      0|                    if strict {
  246|      0|                        if entity == "" {
  247|      0|                            // no characters matching range was parsed
  248|      0|                            // https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
  249|      0|                            // "If no characters match the range, then don't consume any characters
  250|      0|                            // (and unconsume the U+0023 NUMBER SIGN character and, if appropriate,
  251|      0|                            // the X character). This is a parse error; nothing is returned."
  252|      0|                            throw ParseError.MalformedNumericReference(entityPrefix + unicodeAsString)
  253|      0|                        }
  254|      0|
  255|      0|                        if !unicode.isSemicolon {
  256|      0|                            // entity did not end with ;
  257|      0|                            // https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
  258|      0|                            // "[I]f the next character is a U+003B SEMICOLON, consume that too.
  259|      0|                            // If it isn't, there is a parse error."
  260|      0|                            throw ParseError.MissingSemicolon(entityPrefix + entity)
  261|      0|                        }
  262|      0|                    }
  263|      0|
  264|      0|                    let unescaped = try decode(entity: entity, entityPrefix: entityPrefix, strict: strict)
  265|      0|
  266|      0|                    // append unescaped numeric reference to result buffer
  267|      0|                    str += unescaped
  268|      0|
  269|      0|                    if unicode.isAmpersand {
  270|      0|                        // parsed & again
  271|      0|                        // move to unknown state
  272|      0|                        state = .Unknown
  273|      0|                        entityPrefix = unicodeAsString
  274|      0|                        entity = ""
  275|      0|                    }
  276|      0|                    else {
  277|      0|                        if !unicode.isSemicolon {
  278|      0|                            // move current unicode to result buffer
  279|      0|                            str += unicodeAsString
  280|      0|                        }
  281|      0|
  282|      0|                        // move back to invalid state
  283|      0|                        state = .Invalid
  284|      0|                        entityPrefix = ""
  285|      0|                        entity = ""
  286|      0|                    }
  287|      0|                }
  288|      0|            case .Named:
  289|      0|                // previously parsed &[0-9A-Za-z]+
  290|      0|                if unicode.isAlphaNumeric {
  291|      0|                    // keep consuming alphanumeric unicodes
  292|      0|                    // only try to decode it when we encounter a nonalphanumeric unicode
  293|      0|                    entity += unicodeAsString
  294|      0|                }
  295|      0|                else {
  296|      0|                    if unicode.isSemicolon {
  297|      0|                        entity += unicodeAsString
  298|      0|                    }
  299|      0|
  300|      0|                    // try to decode parsed chunk of alphanumeric unicodes
  301|      0|                    let unescaped = try decode(entity: entity, entityPrefix: entityPrefix, strict: strict)
  302|      0|
  303|      0|                    str += unescaped
  304|      0|
  305|      0|                    if unicode.isAmpersand {
  306|      0|                        // parsed & again
  307|      0|                        // move to unknown state
  308|      0|                        state = .Unknown
  309|      0|                        entityPrefix = unicodeAsString
  310|      0|                        entity = ""
  311|      0|
  312|      0|                        break
  313|      0|                    }
  314|      0|                    else if !unicode.isSemicolon {
  315|      0|                        // move current unicode to result buffer
  316|      0|                        str += unicodeAsString
  317|      0|                    }
  318|      0|
  319|      0|                    // move back to invalid state
  320|      0|                    state = .Invalid
  321|      0|                    entityPrefix = ""
  322|      0|                    entity = ""
  323|      0|                }
  324|      0|            }
  325|      0|        }
  326|      0|
  327|      0|        // one more round of finite automaton to catch the edge case where the original string
  328|      0|        // ends with a character reference that isn't terminated by ;
  329|      0|        switch state {
  330|      0|        case .Dec, .Hex:
  331|      0|            // parsed a partial numeric character reference
  332|      0|            if strict {
  333|      0|                if entity == "" {
  334|      0|                    // no characters matching range was parsed
  335|      0|                    // https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
  336|      0|                    // "If no characters match the range, then don't consume any characters
  337|      0|                    // (and unconsume the U+0023 NUMBER SIGN character and, if appropriate,
  338|      0|                    // the X character). This is a parse error; nothing is returned."
  339|      0|                    throw ParseError.MalformedNumericReference(entityPrefix)
  340|      0|                }
  341|      0|
  342|      0|                // by this point in code, entity is not empty and did not end with ;
  343|      0|                // if it did, the numeric character reference would've been unescaped inside the loop
  344|      0|                // https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
  345|      0|                // "[I]f the next character is a U+003B SEMICOLON, consume that too.
  346|      0|                // If it isn't, there is a parse error."
  347|      0|                throw ParseError.MissingSemicolon(entityPrefix + entity)
  348|      0|            }
  349|      0|
  350|      0|            fallthrough
  351|      0|        case .Named:
  352|      0|            // parsed a partial character reference
  353|      0|            // unescape what we have left
  354|      0|            str += try decode(entity: entity, entityPrefix: entityPrefix, strict: strict)
  355|      0|        default:
  356|      0|            // all other states
  357|      0|            // dump partial buffers into result string
  358|      0|            str += entityPrefix + entity
  359|      0|        }
  360|      0|
  361|      0|        return str
  362|      0|    }
  363|       |
  364|       |    /// Return string as HTML unescaped by replacing HTML character references with their
  365|       |    /// unicode character equivalents. For example, this function turns
  366|       |    ///
  367|       |    /// `"&lt;script&gt;alert(&quot;abc&quot;)&lt;/script&gt;"`
  368|       |    ///
  369|       |    /// into
  370|       |    ///
  371|       |    /// `"<script>alert(\"abc\")</script>"`
  372|       |    ///
  373|       |    /// Equivalent to `htmlUnescape(strict: false)`, but does NOT throw parse error.
  374|      0|    func htmlUnescape() -> String {
  375|      0|        // non-strict mode should never throw error
  376|      0|        return try! self.htmlUnescape(strict: false)
  377|      0|    }
  378|       |}
  379|       |
  380|       |// Utility function to decode a single entity
  381|      0|fileprivate func decode(entity: String, entityPrefix: String, strict: Bool) throws -> String {
  382|      0|    switch entityPrefix {
  383|      0|    case "&#", "&#x", "&#X":
  384|      0|        // numeric character reference
  385|      0|        let radix = entityPrefix == "&#" ? 10 : 16
  386|      0|
  387|      0|        if strict && entity == "" {
  388|      0|            // https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
  389|      0|            // "If no characters match the range, then don't consume any characters
  390|      0|            // (and unconsume the U+0023 NUMBER SIGN character and, if appropriate,
  391|      0|            // the X character). This is a parse error; nothing is returned."
  392|      0|            throw ParseError.MalformedNumericReference(entityPrefix)
  393|      0|        }
  394|      0|        else if var code = UInt32(entity, radix: radix) {
  395|      0|            if code.isReplacementCharacterEquivalent {
  396|      0|                code = replacementCharacterAsUInt32
  397|      0|
  398|      0|                if strict {
  399|      0|                    // https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
  400|      0|                    // "[I]f the number is in the range 0xD800 to 0xDFFF or is greater
  401|      0|                    // than 0x10FFFF, then this is a parse error."
  402|      0|                    throw ParseError.OutsideValidUnicodeRange(entityPrefix + entity)
  403|      0|                }
  404|      0|            }
  405|      0|            else if let c = deprecatedNumericDecodeMap[code] {
  406|      0|                code = c
  407|      0|
  408|      0|                if strict {
  409|      0|                    // https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
  410|      0|                    // "If that number is one of the numbers in the first column of the
  411|      0|                    // following table, then this is a parse error."
  412|      0|                    throw ParseError.DeprecatedNumericReference(entityPrefix + entity)
  413|      0|                }
  414|      0|            }
  415|      0|            else if strict && code.isDisallowedReference {
  416|      0|                // https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
  417|      0|                // "[I]f the number is in the range 0x0001 to 0x0008, 0x000D to 0x001F, 0x007F
  418|      0|                // to 0x009F, 0xFDD0 to 0xFDEF, or is one of 0x000B, 0xFFFE, 0xFFFF, 0x1FFFE,
  419|      0|                // 0x1FFFF, 0x2FFFE, 0x2FFFF, 0x3FFFE, 0x3FFFF, 0x4FFFE, 0x4FFFF, 0x5FFFE,
  420|      0|                // 0x5FFFF, 0x6FFFE, 0x6FFFF, 0x7FFFE, 0x7FFFF, 0x8FFFE, 0x8FFFF, 0x9FFFE,
  421|      0|                // 0x9FFFF, 0xAFFFE, 0xAFFFF, 0xBFFFE, 0xBFFFF, 0xCFFFE, 0xCFFFF, 0xDFFFE,
  422|      0|                // 0xDFFFF, 0xEFFFE, 0xEFFFF, 0xFFFFE, 0xFFFFF, 0x10FFFE, or 0x10FFFF, then
  423|      0|                // this is a parse error."
  424|      0|                throw ParseError.DisallowedNumericReference(entityPrefix + entity)
  425|      0|            }
  426|      0|
  427|      0|            return String(UnicodeScalar(code)!)
  428|      0|        }
  429|      0|        else {
  430|      0|            // Assume entity is nonempty and only contains valid characters for the given type
  431|      0|            // of numeric character reference. Given this assumption, at this point in the code
  432|      0|            // the numeric character reference must be greater than `UInt32.max`, i.e., it is
  433|      0|            // not representable by UInt32 (and it is, by transitivity, greater than 0x10FFFF);
  434|      0|            // therefore, the numeric character reference should be replaced by U+FFFD
  435|      0|            if strict {
  436|      0|                // https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
  437|      0|                // "[I]f the number is in the range 0xD800 to 0xDFFF or is greater
  438|      0|                // than 0x10FFFF, then this is a parse error."
  439|      0|                throw ParseError.OutsideValidUnicodeRange(entityPrefix + entity)
  440|      0|            }
  441|      0|
  442|      0|            return String(UnicodeScalar(replacementCharacterAsUInt32)!)
  443|      0|        }
  444|      0|    case "&":
  445|      0|        // named character reference
  446|      0|        if entity == "" {
  447|      0|            return entityPrefix
  448|      0|        }
  449|      0|
  450|      0|        if entity.hasSuffix(";") {
  451|      0|            // Step 1: check all other named characters first
  452|      0|            // Assume special case is rare, always check regular case first to minimize
  453|      0|            // search time cost amortization
  454|      0|            if let c = namedCharactersDecodeMap[entity] {
  455|      0|                return String(c)
  456|      0|            }
  457|      0|
  458|      0|            // Step 2: check special named characters if entity didn't match any regular
  459|      0|            // named character references
  460|      0|            if let s = specialNamedCharactersDecodeMap[entity] {
  461|      0|                return s
  462|      0|            }
  463|      0|        }
  464|      0|
  465|      0|        for length in legacyNamedCharactersLengthRange {
  466|      0|            #if swift(>=3.2)
  467|      0|                let count = entity.count
  468|      0|            #else
  469|      0|                let count = entity.characters.count
  470|      0|            #endif
  471|      0|
  472|      0|            guard length <= count else {
  473|      0|                break
  474|      0|            }
  475|      0|
  476|      0|            let upperIndex = entity.index(entity.startIndex, offsetBy: length)
  477|      0|
  478|      0|            #if swift(>=3.2)
  479|      0|                let reference = String(entity[..<upperIndex])
  480|      0|            #else
  481|      0|                let reference = entity[entity.startIndex..<upperIndex]
  482|      0|            #endif
  483|      0|
  484|      0|            if let c = legacyNamedCharactersDecodeMap[reference] {
  485|      0|                if strict {
  486|      0|                    // https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
  487|      0|                    // "[A] character reference is parsed. If the last character matched is not a
  488|      0|                    // ";" (U+003B) character, there is a parse error."
  489|      0|                    throw ParseError.MissingSemicolon("&" + reference)
  490|      0|                }
  491|      0|
  492|      0|                return String(c) + entity[upperIndex..<entity.endIndex]
  493|      0|            }
  494|      0|        }
  495|      0|
  496|      0|        if strict && entity.hasSuffix(";") {
  497|      0|            // No name character reference matched; for the sake of simplicity, assume
  498|      0|            // entity can only contain alphanumeric characters with a semicolon at the end
  499|      0|            // https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
  500|      0|            // "[I]f the characters after the U+0026 AMPERSAND character (&) consist of
  501|      0|            // a sequence of one or more alphanumeric ASCII characters followed by a
  502|      0|            // U+003B SEMICOLON character (;), then this is a parse error."
  503|      0|            throw ParseError.InvalidNamedReference(entityPrefix + entity)
  504|      0|        }
  505|      0|        
  506|      0|        return entityPrefix + entity
  507|      0|    default:
  508|      0|        // this should NEVER be hit in code execution
  509|      0|        // if this error is thrown, then decoder has faulty logic
  510|      0|        throw ParseError.IllegalArgument("Invaild entityPrefix: must be one of [\"&\", \"&#\", \"&#x\", \"&#X\"]")
  511|      0|    }
  512|      0|}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/swift-html-entities/Sources/HTMLEntities/Utilities.swift:
    1|       |/*
    2|       | * Copyright IBM Corporation 2016, 2017
    3|       | *
    4|       | * Licensed under the Apache License, Version 2.0 (the "License");
    5|       | * you may not use this file except in compliance with the License.
    6|       | * You may obtain a copy of the License at
    7|       | *
    8|       | * http://www.apache.org/licenses/LICENSE-2.0
    9|       | *
   10|       | * Unless required by applicable law or agreed to in writing, software
   11|       | * distributed under the License is distributed on an "AS IS" BASIS,
   12|       | * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   13|       | * See the License for the specific language governing permissions and
   14|       | * limitations under the License.
   15|       | */
   16|       |
   17|       |extension Dictionary {
   18|       |    /// Union of two dictionaries
   19|       |    /// Note: The <key, value> in the argument will override
   20|       |    /// the current dictionary's <key, value> if the keys match
   21|      0|    func updating(_ dict: [Key: Value]) -> [Key: Value] {
   22|      0|        var newDict = self
   23|      0|
   24|      0|        for (key, value) in dict {
   25|      0|            newDict[key] = value
   26|      0|        }
   27|      0|
   28|      0|        return newDict
   29|      0|    }
   30|       |}
   31|       |
   32|       |extension Dictionary where Value: Hashable {
   33|       |    /// Invert a dictionary: <Key, Value> -> <Value, Key>
   34|       |    /// Note: Does not check for uniqueness among values
   35|      0|    func inverting(_ pick: (Key, Key) -> Key = { existingValue, newValue in
   36|      0|        return newValue
   37|      0|        }) -> [Value: Key] {
   38|      0|        var inverseDict: [Value: Key] = [:]
   39|      0|
   40|      0|        for (key, value) in self {
   41|      0|            if let existing = inverseDict[value] {
   42|      0|                inverseDict[value] = pick(existing, key)
   43|      0|            }
   44|      0|            else {
   45|      0|                inverseDict[value] = key
   46|      0|            }
   47|      0|        }
   48|      0|
   49|      0|        return inverseDict
   50|      0|    }
   51|       |}
   52|       |
   53|       |extension UInt32 {
   54|      0|    var isAlphaNumeric: Bool {
   55|      0|        // unicode values of [0-9], [A-Z], and [a-z]
   56|      0|        return self.isNumeral || 0x41...0x5A ~= self || 0x61...0x7A ~= self
   57|      0|    }
   58|       |
   59|      0|    var isAmpersand: Bool {
   60|      0|        // unicode value of &
   61|      0|        return self == 0x26
   62|      0|    }
   63|       |
   64|      0|    var isASCII: Bool {
   65|      0|        // Less than 0x80
   66|      0|        return self < 0x80
   67|      0|    }
   68|       |
   69|       |    /// https://www.w3.org/International/questions/qa-escapes#use
   70|      0|    var isAttributeSyntax: Bool {
   71|      0|        // unicode values of [", ']
   72|      0|        return self == 0x22 || self == 0x27
   73|      0|    }
   74|       |
   75|      0|    var isDisallowedReference: Bool {
   76|      0|        // unicode values of [0x1-0x8], [0xD-0x1F], [0x7F-0x9F], [0xFDD0-0xFDEF],
   77|      0|        // 0xB, 0xFFFE, 0xFFFF, 0x1FFFE, 0x1FFFF, 0x2FFFE, 0x2FFFF, 0x3FFFE, 0x3FFFF,
   78|      0|        // 0x4FFFE, 0x4FFFF, 0x5FFFE, 0x5FFFF, 0x6FFFE, 0x6FFFF, 0x7FFFE, 0x7FFFF,
   79|      0|        // 0x8FFFE, 0x8FFFF, 0x9FFFE, 0x9FFFF, 0xAFFFE, 0xAFFFF, 0xBFFFE, 0xBFFFF,
   80|      0|        // 0xCFFFE, 0xCFFFF, 0xDFFFE, 0xDFFFF, 0xEFFFE, 0xEFFFF, 0xFFFFE, 0xFFFFF,
   81|      0|        // 0x10FFFE, and 0x10FFFF
   82|      0|        return disallowedNumericReferences.contains(self)
   83|      0|    }
   84|       |
   85|      0|    var isHash: Bool {
   86|      0|        // unicode value of #
   87|      0|        return self == 0x23
   88|      0|    }
   89|       |
   90|      0|    var isHexNumeral: Bool {
   91|      0|        // unicode values of [0-9], [A-F], and [a-f]
   92|      0|        return isNumeral || 0x41...0x46 ~= self || 0x61...0x66 ~= self
   93|      0|    }
   94|       |
   95|      0|    var isNumeral: Bool {
   96|      0|        // unicode values of [0-9]
   97|      0|        return 0x30...0x39 ~= self
   98|      0|    }
   99|       |
  100|       |    /// https://www.w3.org/TR/html5/syntax.html#tokenizing-character-references
  101|      0|    var isReplacementCharacterEquivalent: Bool {
  102|      0|        // UInt32 values of [0xD800-0xDFFF], (0x10FFFF-∞]
  103|      0|        return 0xD800...0xDFFF ~= self || 0x10FFFF < self
  104|      0|    }
  105|       |
  106|      0|    var isSafeASCII: Bool {
  107|      0|        return self.isASCII && !self.isAttributeSyntax && !self.isTagSyntax
  108|      0|    }
  109|       |
  110|      0|    var isSemicolon: Bool {
  111|      0|        // unicode value of ;
  112|      0|        return self == 0x3B
  113|      0|    }
  114|       |
  115|       |    /// https://www.w3.org/International/questions/qa-escapes#use
  116|      0|    var isTagSyntax: Bool {
  117|      0|        // unicode values of [&, < , >]
  118|      0|        return self.isAmpersand || self == 0x3C || self == 0x3E
  119|      0|    }
  120|       |
  121|      0|    var isX: Bool {
  122|      0|        // unicode values of X and x
  123|      0|        return self == 0x58 || self == 0x78
  124|      0|    }
  125|       |}

/Users/automan/Library/Developer/Xcode/DerivedData/SwiftPamphletApp-cmcttrgkqhyuufeuvvthgtuupjob/SourcePackages/checkouts/xctest-dynamic-overlay/Sources/XCTestDynamicOverlay/XCTFail.swift:
    1|       |#if DEBUG
    2|       |  #if canImport(ObjectiveC)
    3|       |    import Foundation
    4|       |  
    5|       |    /// This function generates a failure immediately and unconditionally.
    6|       |    ///
    7|       |    /// Dynamically creates and records an `XCTIssue` under the hood that captures the source code
    8|       |    /// context of the caller. Useful for defining assertion helpers that fail in indirect code
    9|       |    /// paths, where the `file` and `line` of the failure have not been realized.
   10|       |    ///
   11|       |    /// - Parameter message: An optional description of the assertion, for inclusion in test
   12|       |    ///   results.
   13|      0|    public func XCTFail(_ message: String = "") {
   14|      0|      if let XCTestObservationCenter = NSClassFromString("XCTestObservationCenter")
   15|      0|        as Any as? NSObjectProtocol,
   16|      0|        String(describing: XCTestObservationCenter) != "<null>",
   17|      0|        let shared = XCTestObservationCenter.perform(Selector(("sharedTestObservationCenter")))?
   18|      0|          .takeUnretainedValue(),
   19|      0|        let observers = shared.perform(Selector(("observers")))?
   20|      0|          .takeUnretainedValue() as? [AnyObject],
   21|      0|        let observer =
   22|      0|          observers
   23|      0|          .first(where: { NSStringFromClass(type(of: $0)) == "XCTestMisuseObserver" }),
   24|      0|        let currentTestCase = observer.perform(Selector(("currentTestCase")))?
   25|      0|          .takeUnretainedValue(),
   26|      0|        let XCTIssue = NSClassFromString("XCTIssue")
   27|      0|          as Any as? NSObjectProtocol,
   28|      0|        let alloc = XCTIssue.perform(NSSelectorFromString("alloc"))?
   29|      0|          .takeUnretainedValue(),
   30|      0|        let issue =
   31|      0|          alloc
   32|      0|          .perform(
   33|      0|            Selector(("initWithType:compactDescription:")),
   34|      0|            with: 0,
   35|      0|            with: message.isEmpty ? "failed" : message
   36|      0|          )?
   37|      0|          .takeUnretainedValue()
   38|      0|      {
   39|      0|        _ = currentTestCase.perform(Selector(("recordIssue:")), with: issue)
   40|      0|        return
   41|      0|      }
   42|      0|    }
   43|       |  
   44|       |    /// This function generates a failure immediately and unconditionally.
   45|       |    ///
   46|       |    /// Dynamically calls `XCTFail` with the given file and line. Useful for defining assertion
   47|       |    /// helpers that have the source code context at hand and want to highlight the direct caller
   48|       |    /// of the helper.
   49|       |    ///
   50|       |    /// - Parameter message: An optional description of the assertion, for inclusion in test
   51|       |    ///   results.
   52|      0|    public func XCTFail(_ message: String = "", file: StaticString, line: UInt) {
   53|      0|      guard let _XCTFailureHandler = _XCTFailureHandler
   54|      0|      else { return }
   55|      0|  
   56|      0|      _XCTFailureHandler(nil, true, "\(file)", line, "\(message.isEmpty ? "failed" : message)", nil)
   57|      0|    }
   58|       |  
   59|       |    private typealias XCTFailureHandler = @convention(c) (
   60|       |      AnyObject?, Bool, UnsafePointer<CChar>, UInt, String, String?
   61|       |    ) -> Void
   62|       |    private let XCTest = NSClassFromString("XCTest")
   63|      0|      .flatMap(Bundle.init(for:))
   64|      0|      .flatMap { $0.executablePath }
   65|      0|      .flatMap { dlopen($0, RTLD_NOW) }
   66|       |    private let _XCTFailureHandler =
   67|       |      XCTest
   68|      0|      .flatMap { dlsym($0, "_XCTFailureHandler") }
   69|      0|      .map { unsafeBitCast($0, to: XCTFailureHandler.self) }
   70|       |  #else
   71|       |    // NB: It seems to be safe to import XCTest on Linux
   72|       |    @_exported import func XCTest.XCTFail
   73|       |  #endif
   74|       |#else
   75|       |  /// This function generates a failure immediately and unconditionally.
   76|       |  ///
   77|       |  /// Dynamically creates and records an `XCTIssue` under the hood that captures the source code
   78|       |  /// context of the caller. Useful for defining assertion helpers that fail in indirect code
   79|       |  /// paths, where the `file` and `line` of the failure have not been realized.
   80|       |  ///
   81|       |  /// - Parameter message: An optional description of the assertion, for inclusion in test
   82|       |  ///   results.
   83|       |  public func XCTFail(_ message: String = "") {}
   84|       |
   85|       |  /// This function generates a failure immediately and unconditionally.
   86|       |  ///
   87|       |  /// Dynamically creates and records an `XCTIssue` under the hood that captures the source code
   88|       |  /// context of the caller. Useful for defining assertion helpers that fail in indirect code
   89|       |  /// paths, where the `file` and `line` of the failure have not been realized.
   90|       |  ///
   91|       |  /// - Parameter message: An optional description of the assertion, for inclusion in test
   92|       |  ///   results.
   93|       |  public func XCTFail(_ message: String = "", file: StaticString, line: UInt) {}
   94|       |#endif

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/AppVM.swift:
    1|       |//
    2|       |//  AppVM.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/1.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |import Combine
   10|       |import AppKit
   11|       |
   12|       |final class AppVM: ObservableObject {
   13|       |
   14|       |    @Published var alertMsg = "" // 警告信息
   15|       |    @Published var webLinkStr = "" // 导航上的外部链接
   16|       |
   17|       |    // 开发者动态
   18|      2|    @Published var devsNotis = [String: Int]()
   19|       |    @Published var devsCountNotis = 0
   20|       |    // 博客动态
   21|       |    @Published var rssCountNotis = 0
   22|       |    
   23|       |    // MARK: - 库存档
   24|      2|    @Published var archiveRepos = [SPReposModel]()
   25|       |
   26|       |    // MARK: - CCY
   27|       |    // 探索更多库
   28|      2|    @Published var expNotis = [String: DBRepoStore]()
   29|       |    @Published var expCountNotis = 0
   30|      2|    @Published var exps = [SPReposModel]()
   31|       |
   32|       |    // MARK: - Combine
   33|      2|    private var cc: [AnyCancellable] = []
   34|       |    private let apiSev: APISev
   35|       |
   36|       |    // MARK: - Timer for get intervals data
   37|       |
   38|       |    // 开发者动态
   39|       |    private var stepCountDevs = 0
   40|      2|    private var devsNotisKeys = [String]()
   41|       |    // 探索库
   42|       |    private var stepCountExp = 0
   43|      2|    private var expNotisKeys = [String]()
   44|       |    
   45|       |    // MARK: - 获取 NSSplitViewController
   46|      0|    func splitVC() -> NSSplitViewController {
   47|      0|        return ((NSApp.keyWindow?.contentView?.subviews.first?.subviews.first?.subviews.first as? NSSplitView)?.delegate as? NSSplitViewController)!
   48|      0|    }
   49|       |    
   50|       |    // MARK: - 全屏
   51|      0|    func fullScreen(isEnter: Bool) {
   52|      0|        if isEnter == true {
   53|      0|            // 进入全屏
   54|      0|            let presOptions:
   55|      0|            NSApplication.PresentationOptions = ([.autoHideDock,.autoHideMenuBar])
   56|      0|            let optionsDictionary = [NSView.FullScreenModeOptionKey.fullScreenModeApplicationPresentationOptions : NSNumber(value: presOptions.rawValue)]
   57|      0|            
   58|      0|            let v = splitVC().splitViewItems[2].viewController.view
   59|      0|            v.enterFullScreenMode(NSScreen.main!, withOptions: optionsDictionary)
   60|      0|            v.wantsLayer = true
   61|      0|        } else {
   62|      0|            // 退出全屏
   63|      0|            NSApp.keyWindow?.contentView?.exitFullScreenMode()
   64|      0|        } // end if
   65|      0|    }
   66|       |    
   67|       |    // MARK: - Sidebar and LastView Toggle
   68|      0|    func toggleSidebar() {
   69|      0|        splitVC().toggleSidebar(self)
   70|      0|    }
   71|       |    
   72|      0|    func toggleLastView() {
   73|      0|        splitVC().splitViewItems.last?.animator().isCollapsed.toggle()
   74|      0|    }
   75|       |
   76|       |    // MARK: - WebLink
   77|       |    @MainActor
   78|     58|    func updateWebLink(s: String) {
   79|     58|        webLinkStr = s
   80|     58|    }
   81|       |
   82|       |    // MARK: - RSS 读取
   83|      2|    func rssFetch() {
   84|      2|        Task {
   85|      2|            do {
   86|      2|                let rssFeed = SPC.rssFeed() // 获取所有 rss 源的模型
   87|      2|                var i = 0
   88|      2|                let count = rssFeed.count
   89|      2|                let ics = ["🚶","🏃🏽","👩‍🦽","💃🏿","🐕","🤸🏻‍♀️","🤾🏾","🏂","🏊🏻","🚴🏼","🛩","🚠","🚕","🛴","🛸","🚁"]
   90|     20|                for r in rssFeed {
   91|     20|                    i += 1
   92|     20|                    let progressStr = "(\(i)/\(count))"
   93|     20|                    await updateAlertMsg(msg: "\(progressStr) 正在同步 \(ics.randomElement() ?? "") \(r.title) ：\(r.des)")
   94|     20|                    let str = try await RSSReq(r.feedLink)
   95|     20|                    guard let str = str else {
   96|      0|                        break
   97|     20|                    }
   98|     20|                    RSSVM.handleFetchFeed(str: str, rssModel: r)
   99|     20|                    // 在 Main Actor 更新通知数
  100|     20|                    await rssUpdateNotis()
  101|     20|                }
  102|      2|            } catch {}
  103|      2|            await updateAlertMsg(msg: "")
  104|      2|        }
  105|      2|    }
  106|       |
  107|       |    @MainActor
  108|     18|    func rssUpdateNotis() {
  109|     18|        do {
  110|     18|            rssCountNotis = try RSSItemsDataHelper.findAllUnreadCount()
  111|     18|            showAppBadgeLabel()
  112|     18|        } catch {}
  113|     18|    }
  114|       |
  115|       |    @MainActor
  116|     20|    func updateAlertMsg(msg: String) {
  117|     20|        alertMsg = msg
  118|     20|    }
  119|       |    
  120|       |    // MARK: - 库存档
  121|      2|    func loadArchiveRepos() {
  122|      2|        archiveRepos = loadBundleJSONFile("archiveRepos.json")
  123|      2|    }
  124|       |
  125|       |    // MARK: - 获取所有探索更多库通知信息
  126|      2|    func loadExpFromServer() {
  127|      2|
  128|      2|        Task {
  129|      2|            var expDic = [String: DBRepoStore]()
  130|      2|            do {
  131|      2|                var grs = [SPReposModel]()
  132|      2|                grs = loadBundleJSONFile("repos.json")
  133|      2|
  134|     66|                for gr in grs {
  135|    440|                    for r in gr.repos {
  136|    440|                        expDic[r.id] = RepoStoreDataHelper.createEmptyDBRepoStore(r.id)
  137|    440|                        if let fd = try RepoStoreDataHelper.find(sFullName: r.id) {
  138|    440|                            expDic[r.id]?.unRead = fd.unRead
  139|    440|                        } else {
  140|      0|                            _ = try RepoStoreDataHelper.insert(i: RepoStoreDataHelper.createEmptyDBRepoStore(r.id))
  141|      0|                            expDic[r.id]?.unRead = 0
  142|    440|                        } // end if
  143|    440|                    } // end for
  144|     66|                } // end for
  145|      2|
  146|      2|                // 远程已经删除的仓库，同步本地删除
  147|      2|                if !(expDic.count > 0) { return }
  148|      2|                let expDicKeys = expDic.keys
  149|      2|                if let expsn = try RepoStoreDataHelper.findAll() {
  150|    436|                    for expn in expsn {
  151|    436|                        if !expDicKeys.contains(expn.fullName) {
  152|      0|                            do {
  153|      0|                                try RepoStoreDataHelper.delete(i: expn)
  154|      0|                            } catch { return }
  155|    436|                        } else {
  156|    436|//                            let aExp = SPReposModel
  157|    436|                            expDic[expn.fullName] = expn
  158|    436|                        } // end if else
  159|    436|                    } // end for
  160|      2|                } // end if let
  161|      2|
  162|      2|                await updateExps(exps: grs)
  163|      2|                await updateExpNotis(expNotis: expDic)
  164|      2|
  165|      2|            } catch {
  166|      0|                print("wrong")
  167|      2|            } // end do
  168|      2|        }
  169|      2|    }
  170|       |
  171|       |    @MainActor
  172|      2|    func updateExps(exps: [SPReposModel]) {
  173|      2|        self.exps = exps
  174|      2|    }
  175|       |    @MainActor
  176|      4|    func updateExpNotis(expNotis: [String: DBRepoStore]) {
  177|      4|        self.expNotis = expNotis
  178|      4|    }
  179|       |
  180|       |    // MARK: - Timer for get intervals data
  181|       |
  182|       |    // 探索库
  183|      0|    func timeForExpEvent() {
  184|      0|        Task {
  185|      0|            if expNotis.count > 0 {
  186|      0|                if stepCountExp >= expNotis.count {
  187|      0|                    stepCountExp = 0
  188|      0|                }
  189|      0|                if expNotisKeys.count == 0 {
  190|      0|                    for (k, _) in expNotis {
  191|      0|                        expNotisKeys.append(k)
  192|      0|                    }
  193|      0|                }
  194|      0|                guard stepCountExp < expNotisKeys.count else {
  195|      0|                    stepCountExp = 0
  196|      0|                    return
  197|      0|                }
  198|      0|                let repoName = expNotisKeys[stepCountExp]
  199|      0|                await updateAlertMsg(msg: "已同步 \(repoName)：\(expNotis[repoName]?.description ?? "")")
  200|      0|                // 网络请求 repo 的 commit，然后更新未读数
  201|      0|                let gAPI = RESTful(host: .github)
  202|      0|                do {
  203|      0|                    let repoModel = try await gAPI.value(for: Github.repos(repoName).get)
  204|      0|                    let commits = try await gAPI.value(for: Github.repos(repoName).commits.get)
  205|      0|                    if let f = try RepoStoreDataHelper.find(sFullName: repoName) {
  206|      0|                        var i = 0
  207|      0|                        var lrcs = f.lastReadCommitSha
  208|      0|                        for cm in commits {
  209|      0|                            if i == 0 {
  210|      0|                                lrcs = cm.sha ?? ""
  211|      0|                            }
  212|      0|                            if cm.sha == f.lastReadCommitSha {
  213|      0|                                break
  214|      0|                            }
  215|      0|                            i += 1
  216|      0|                        } // end for
  217|      0|                        i = f.unRead + i
  218|      0|                        if i > 0 {
  219|      0|                            await updateAlertMsg(msg: "有更新 \(repoName)：\(expNotis[repoName]?.description ?? "")")
  220|      0|                        }
  221|      0|                        _ = try RepoStoreDataHelper.update(i: DBRepoStore(
  222|      0|                            id: repoModel.id,
  223|      0|                            name: repoModel.name,
  224|      0|                            fullName: repoName,
  225|      0|                            description: repoModel.description ?? "",
  226|      0|                            stargazersCount: repoModel.stargazersCount,
  227|      0|                            openIssues: repoModel.openIssues,
  228|      0|                            language: repoModel.language ?? "",
  229|      0|                            htmlUrl: repoModel.htmlUrl ?? "",
  230|      0|                            lastReadCommitSha: lrcs,
  231|      0|                            unRead: i,
  232|      0|                            type: 0,
  233|      0|                            extra: ""
  234|      0|                        ))
  235|      0|                    }
  236|      0|
  237|      0|                } catch { return }
  238|      0|
  239|      0|                // 刷新数据
  240|      0|                loadDBExpLoal()
  241|      0|                stepCountExp += 1
  242|      0|            }
  243|      0|        }
  244|      0|    }
  245|       |
  246|       |    // 开发者动态
  247|       |    @MainActor
  248|      0|    func timeForDevsEvent() -> String? {
  249|      0|        if devsNotis.count > 0 {
  250|      0|            if stepCountDevs >= devsNotis.count {
  251|      0|                stepCountDevs = 0
  252|      0|            }
  253|      0|            if devsNotisKeys.count == 0 {
  254|      0|                for (k, _) in devsNotis {
  255|      0|                    devsNotisKeys.append(k)
  256|      0|                }
  257|      0|            }
  258|      0|            if stepCountDevs >= devsNotisKeys.count {
  259|      0|                stepCountDevs = 0
  260|      0|                return nil
  261|      0|            } else {
  262|      0|                let userName = devsNotisKeys[stepCountDevs]
  263|      0|                updateAlertMsg(msg: "已同步 \(userName)")
  264|      0|                loadDBDevsLoal()
  265|      0|                calculateDevsCountNotis()
  266|      0|                stepCountDevs += 1
  267|      0|                return userName
  268|      0|            }
  269|      0|        } else {
  270|      0|            return nil
  271|      0|        }
  272|      0|    }
  273|       |
  274|       |    // MARK: - On Appear Event
  275|      2|    func onAppearEvent() {
  276|      2|        nsck()
  277|      2|        // 开发者数据读取
  278|      2|        refreshDev()
  279|      2|        loadDBDevsLoal()
  280|      2|        // 探索更多库
  281|      2|        loadDBExpLoal()
  282|      2|        loadExpFromServer()
  283|      2|        // 库存档
  284|      2|        loadArchiveRepos()
  285|      2|    }
  286|       |
  287|      2|    func refreshDev() {
  288|      2|
  289|      2|        func switchToDevsDic() -> [String: Int] {
  290|      2|            var devsDic = [String: Int]()
  291|      2|            let ads:[SPActiveDevelopersModel] = loadBundleJSONFile("developers.json")
  292|      4|            for ad in ads {
  293|     54|                for d in ad.users {
  294|     54|                    do {
  295|     54|                        if let fd = try DevsNotiDataHelper.find(sLogin: d.id) {
  296|     54|                            devsDic[fd.login] = fd.unRead
  297|     54|                        } else {
  298|      0|                            do {
  299|      0|                                _ = try DevsNotiDataHelper.insert(i: DBDevNoti(login: d.id, lastReadId: "", unRead: 0))
  300|      0|                                devsDic[d.id] = 0
  301|      0|                            } catch {
  302|      0|                                return devsDic
  303|      0|                            }
  304|     54|                        }
  305|     54|                    } catch {
  306|      0|                        return devsDic
  307|     54|                    } // end do
  308|     54|                } // end for
  309|      4|            } // end for
  310|      2|
  311|      2|            // 远程已经删除的开发者，同步本地删除
  312|      2|            if !(devsDic.count > 0) {
  313|      0|                return devsDic
  314|      2|            }
  315|      2|            let devsDicKeys = devsDic.keys
  316|      2|            do {
  317|      2|                if let dvsn = try DevsNotiDataHelper.findAll() {
  318|     54|                    for dvn in dvsn {
  319|     54|                        if !devsDicKeys.contains(dvn.login) {
  320|      0|                            do {
  321|      0|                                try DevsNotiDataHelper.delete(i: dvn)
  322|      0|                            } catch {
  323|      0|                                return devsDic
  324|      0|                            } // end do
  325|     54|                        } // end if
  326|     54|                    } // end for
  327|      2|                } // end if let
  328|      2|            } catch {
  329|      0|                return devsDic
  330|      2|            }
  331|      2|
  332|      2|            return devsDic
  333|      2|        }
  334|      2|        devsNotis = switchToDevsDic()
  335|      2|    }
  336|       |
  337|       |    // MARK: Combine
  338|       |
  339|      2|    init() {
  340|      2|        self.apiSev = APISev()
  341|      2|        // MARK: - 初始化数据库
  342|      2|        let db = DB.shared
  343|      2|        do {
  344|      2|            try db.cTbs()
  345|      2|        } catch {
  346|      0|
  347|      2|        }
  348|      2|
  349|      2|    }
  350|       |
  351|       |    // MARK: 探索更多库，本地数据库读取
  352|      2|    func loadDBExpLoal() {
  353|      2|        Task {
  354|      2|            do {
  355|      2|                if let arr = try RepoStoreDataHelper.findAll() {
  356|      2|                    if arr.count > 0 {
  357|      2|                        var rDic = [String: DBRepoStore]()
  358|    436|                        for i in arr {
  359|    436|                            rDic[i.fullName] = i
  360|    436|                            if expNotis[i.fullName]?.unRead ?? 0 >= SPC.unreadMagicNumber {
  361|      0|                                rDic[i.fullName]?.unRead = SPC.unreadMagicNumber
  362|    436|                            } else {
  363|    436|                                rDic[i.fullName]?.unRead = i.unRead
  364|    436|                            }
  365|    436|                        }
  366|      2|                        await updateExpNotis(expNotis: rDic)
  367|      2|                        await calculateExpCountNotis()
  368|      2|                    } // end if
  369|      2|                } // end if
  370|      2|            } catch {}
  371|      2|        }
  372|      2|    }
  373|       |
  374|       |    // MARK: 开发者动态，本地数据库读取
  375|      2|    func loadDBDevsLoal() {
  376|      2|        do {
  377|      2|            if let arr = try DevsNotiDataHelper.findAll() {
  378|      2|                if arr.count > 0 {
  379|      2|                    var devsDic = [String: Int]()
  380|     54|                    for i in arr {
  381|     54|                        if devsNotis[i.login] ?? 0 >= SPC.unreadMagicNumber {
  382|      0|                            devsDic[i.login] = SPC.unreadMagicNumber
  383|     54|                        } else {
  384|     54|                            devsDic[i.login] = i.unRead
  385|     54|                        }
  386|     54|                    } // end for
  387|      2|                    devsNotis = devsDic
  388|      2|                } // end if
  389|      2|            } // end if
  390|      2|        } catch {}
  391|      2|    }
  392|       |
  393|       |    // MARK: - 计算通知数量
  394|       |    @MainActor
  395|      2|    func calculateExpCountNotis() {
  396|      2|        if SPC.gitHubAccessToken.isEmpty == true {
  397|      2|            return
  398|      2|        }
  399|      0|        var count = 0
  400|      0|        for i in expNotis {
  401|      0|            count += i.value.unRead
  402|      0|            if count > SPC.unreadMagicNumber * 10 {
  403|      0|                break
  404|      0|            }
  405|      0|        }
  406|      0|        if count >= SPC.unreadMagicNumber {
  407|      0|            count = count - SPC.unreadMagicNumber
  408|      0|        }
  409|      0|        expCountNotis = count
  410|      0|        showAppBadgeLabel()
  411|      0|    }
  412|       |
  413|       |    @MainActor
  414|      0|    func calculateDevsCountNotis() {
  415|      0|        var count = 0
  416|      0|        for i in devsNotis {
  417|      0|            count += i.value
  418|      0|            if count > SPC.unreadMagicNumber * 10 {
  419|      0|                break
  420|      0|            }
  421|      0|        }
  422|      0|        if count >= SPC.unreadMagicNumber {
  423|      0|            count = count - SPC.unreadMagicNumber
  424|      0|        }
  425|      0|        devsCountNotis = count
  426|      0|        showAppBadgeLabel()
  427|      0|    }
  428|       |
  429|     18|    func showAppBadgeLabel() {
  430|     18|        var count = devsCountNotis + expCountNotis + rssCountNotis
  431|     18|        if count > 0 {
  432|     18|            if count > SPC.unreadMagicNumber * 10 {
  433|      0|                count = SPC.unreadMagicNumber * 10
  434|     18|            }
  435|     18|            NSApp.dockTile.showsApplicationBadge = true
  436|     18|            NSApp.dockTile.badgeLabel = "\(count)"
  437|     18|        } else {
  438|      0|            NSApp.dockTile.badgeLabel = nil
  439|     18|        }
  440|     18|    }
  441|       |
  442|       |    // 订阅网络状态
  443|      2|    func nsck() {
  444|      2|        Nsck.shared.pb
  445|      2|            .sink { _ in
  446|      0|                //
  447|      4|            } receiveValue: { [weak self] path in
  448|      4|                self?.alertMsg = path.debugDescription
  449|      4|                switch path.status {
  450|      4|                case .satisfied:
  451|      2|                    self?.alertMsg = ""
  452|      4|                case .unsatisfied:
  453|      2|                    self?.alertMsg = "😱"
  454|      4|                case .requiresConnection:
  455|      0|                    self?.alertMsg = "🥱"
  456|      4|                @unknown default:
  457|      0|                    self?.alertMsg = "🤔"
  458|      4|                }
  459|      4|                if path.status == .unsatisfied {
  460|      2|                    switch path.unsatisfiedReason {
  461|      2|                    case .notAvailable:
  462|      2|                        self?.alertMsg += "网络不可用"
  463|      2|                    case .cellularDenied:
  464|      0|                        self?.alertMsg += "蜂窝网不可用"
  465|      2|                    case .wifiDenied:
  466|      0|                        self?.alertMsg += "Wifi不可用"
  467|      2|                    case .localNetworkDenied:
  468|      0|                        self?.alertMsg += "网线不可用"
  469|      2|                    @unknown default:
  470|      0|                        self?.alertMsg += "网络不可用"
  471|      2|                    }
  472|      4|                }
  473|      4|            }
  474|      2|            .store(in: &cc)
  475|      2|    }
  476|       |
  477|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/AutoTask.swift:
    1|       |//
    2|       |//  AutoTask.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/10.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |struct AutoTask {
   11|       |    
   12|      0|    static func buildContentMarkdownFile() {
   13|      0|        let a1 = ["guide-syntax","guide-features","guide-subject","lib-Combine","lib-Concurrency","lib-SwiftUI"]
   14|      0|//        let a1 = ["lib-SwiftUI"]
   15|      0|        var mk = ""
   16|      0|        for e in a1 {
   17|      0|            let fc:[CustomIssuesModel] = loadBundleJSONFile(e + ".json")
   18|      0|            if e == "guide-syntax" {
   19|      0|                mk += "## 语法速查\n\n"
   20|      0|            }
   21|      0|            if e == "guide-feature" {
   22|      0|                mk += "## 特性\n\n"
   23|      0|            }
   24|      0|            if e == "guide-subject" {
   25|      0|                mk += "## 专题\n\n"
   26|      0|            }
   27|      0|            if e == "lib-Combine" {
   28|      0|                mk += "## Combine\n\n"
   29|      0|            }
   30|      0|            if e == "lib-Concurrency" {
   31|      0|                mk += "## Concurrency\n\n"
   32|      0|            }
   33|      0|            if e == "lib-SwiftUI" {
   34|      0|                mk += "## SwiftUI\n\n"
   35|      0|            }
   36|      0|            for e1 in fc {
   37|      0|                mk += "### \(e1.name)\n\n"
   38|      0|                for e2 in e1.issues {
   39|      0|                    mk += "#### \(e2.title)\n\n"
   40|      0|                    let str = loadBundleString(String(e2.number) + ".md")
   41|      0|                    mk += str + "\n\n"
   42|      0|                }
   43|      0|            }
   44|      0|        }
   45|      0|        
   46|      0|        // 开发者
   47|      0|        mk += "## 开发者\n\n"
   48|      0|        let devs:[SPActiveDevelopersModel] = loadBundleJSONFile("developers.json")
   49|      0|        for d1 in devs {
   50|      0|            mk += "### \(d1.name)\n\n"
   51|      0|            for d2 in d1.users {
   52|      0|                let des = d2.des ?? ""
   53|      0|                mk += "* [\(d2.id)](\(SPC.githubHost + d2.id))" + (des.isEmpty == true ? "" : "：\(des)") + "\n"
   54|      0|            }
   55|      0|            mk += "\n"
   56|      0|        }
   57|      0|        
   58|      0|        // 探索库
   59|      0|        mk += "## 探索库\n\n"
   60|      0|        let explibs:[SPReposModel] = loadBundleJSONFile("repos.json")
   61|      0|        for el1 in explibs {
   62|      0|            mk += "### \(el1.name)\n\n"
   63|      0|            for el2 in el1.repos {
   64|      0|                var more = ""
   65|      0|                let des = el2.des ?? ""
   66|      0|                if des.isEmpty == false {
   67|      0|                    more += des + "\n"
   68|      0|                }
   69|      0|                do {
   70|      0|                    if let f = try RepoStoreDataHelper.find(sFullName: el2.id) {
   71|      0|                        more += "Star：\(f.stargazersCount) Issue：\(f.openIssues) 开发语言：\(f.language)\n"
   72|      0|                        more += f.description + "\n"
   73|      0|                    }
   74|      0|                } catch {}
   75|      0|                mk += "*[\(el2.id)](\(SPC.githubHost + el2.id))*\n" + more + "\n"
   76|      0|            }
   77|      0|            
   78|      0|            mk += "\n"
   79|      0|        }
   80|      0|        
   81|      0|        // 博客
   82|      0|        mk += "## 博客和资讯\n\n"
   83|      0|        let bn:[RSSFeedModel] = loadBundleJSONFile("rssfeed.json")
   84|      0|        for r in bn {
   85|      0|            mk += "* [\(r.title)](\(r.siteLink))" + (r.des.isEmpty ? "" : "：\(r.des)") + "\n"
   86|      0|        }
   87|      0|        mk += "\n"
   88|      0|        
   89|      0|        // 册子动态
   90|      0|        mk += loadBundleString("1.md")
   91|      0|        
   92|      0|        
   93|      0|        
   94|      0|        writeToDownload(fileName: "read.md", content: mk)
   95|      0|    }
   96|       |    
   97|       |}
   98|       |
   99|       |
  100|       |
  101|       |
  102|       |
  103|       |
  104|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Core/FundationFunction.swift:
    1|       |//
    2|       |//  BaseFunction.swift
    3|       |//  PresentSwiftUI
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/9.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |import SwiftUI
   10|       |import Combine
   11|       |import Network
   12|       |import SwiftDate
   13|       |import InstrProfiling
   14|       |
   15|       |// MARK: - Web
   16|     72|func wrapperHtmlContent(content: String, codeStyle: String = "lioshi.min") -> String {
   17|     72|    let reStr = """
   18|     72|<html lang="zh-Hans" data-darkmode="auto">
   19|     72|\(SPC.rssStyle())
   20|     72|<body>
   21|     72|    <main class="container">
   22|     72|        <article class="article heti heti--classic">
   23|     72|        \(content)
   24|     72|        </article>
   25|     72|    </main>
   26|     72|</body>
   27|     72|\(SPC.rssFooterJS())
   28|     72|</html>
   29|     72|"""
   30|     72|    // <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/\(codeStyle).css">
   31|     72|    // writeToDownload(fileName: "a.html", content: reStr)
   32|     72|    return reStr
   33|     72|}
   34|       |
   35|       |// MARK: - 时间
   36|      0|func howLongFromNow(timeStr: String) -> String {
   37|      0|    let cn = Region(zone: Zones.asiaShanghai, locale: Locales.chineseChina)
   38|      0|    SwiftDate.defaultRegion = cn
   39|      0|
   40|      0|    // 两个 DateInRegion 相差时间 interval
   41|      0|    var r = DateInRegion(timeStr, region: cn)
   42|      0|    if r == nil && !timeStr.isEmpty {
   43|      0|        r = timeStr.toRSSDate(alt: false)
   44|      0|    }
   45|      0|    guard let r = r else {
   46|      0|        return ""
   47|      0|    }
   48|      0|
   49|      0|    let i = DateInRegion(Date(), region: cn) - r
   50|      0|    let s = i.toString {
   51|      0|        $0.maximumUnitCount = 1
   52|      0|        $0.allowedUnits = [.year, .day, .hour, .minute]
   53|      0|        $0.collapsesLargestUnit = true
   54|      0|        $0.unitsStyle = .abbreviated
   55|      0|        $0.locale = Locales.chineseChina
   56|      0|    }
   57|      0|    var reStr = s + "前"
   58|      0|    if s == "0年" {
   59|      0|        reStr = "\(r.year)年\(r.month)月\(r.day)日"
   60|      0|    }
   61|      0|    return reStr
   62|      0|}
   63|       |
   64|       |// MARK: - 网络
   65|       |// 网络状态检查 network state check
   66|       |final class Nsck: ObservableObject {
   67|       |    static let shared = Nsck()
   68|       |    private(set) lazy var pb = mkpb()
   69|       |    @Published private(set) var pt: NWPath
   70|       |
   71|       |    private let monitor: NWPathMonitor
   72|       |    private lazy var sj = CurrentValueSubject<NWPath, Never>(monitor.currentPath)
   73|       |    private var sb: AnyCancellable?
   74|       |
   75|      2|    init() {
   76|      2|        monitor = NWPathMonitor()
   77|      2|        pt = monitor.currentPath
   78|      2|        monitor.pathUpdateHandler = { [weak self] path in
   79|      2|            self?.pt = path
   80|      2|            self?.sj.send(path)
   81|      2|        }
   82|      2|        monitor.start(queue: DispatchQueue.main)
   83|      2|    }
   84|       |
   85|      0|    deinit {
   86|      0|        monitor.cancel()
   87|      0|        sj.send(completion: .finished)
   88|      0|    }
   89|       |
   90|      2|    private func mkpb() -> AnyPublisher<NWPath, Never> {
   91|      2|        return sj.eraseToAnyPublisher()
   92|      2|    }
   93|       |}
   94|       |
   95|       |// 跳到浏览器中显示网址内容
   96|      0|func gotoWebBrowser(urlStr: String) {
   97|      0|    if !urlStr.isEmpty {
   98|      0|        let validUrlStr = validHTTPUrlStrFromUrlStr(urlStr: urlStr)
   99|      0|        NSWorkspace.shared.open(URL(string: validUrlStr)!)
  100|      0|    } else {
  101|      0|        print("error: url is empty!")
  102|      0|    }
  103|      0|}
  104|       |
  105|       |// 检查地址是否有效
  106|      0|func validHTTPUrlStrFromUrlStr(urlStr: String) -> String {
  107|      0|    let httpPrefix = "http://"
  108|      0|    let httpsPrefix = "https://"
  109|      0|    if (urlStr.hasPrefix(httpPrefix) || urlStr.hasPrefix(httpsPrefix)) {
  110|      0|        return urlStr
  111|      0|    }
  112|      0|    return httpsPrefix + urlStr
  113|      0|}
  114|       |
  115|       |// MARK: - 文件
  116|       |// just for test
  117|      0|func writeToDownload(fileName: String, content: String) {
  118|      0|    try! content.write(toFile: "/Users/mingdai/Downloads/\(fileName)", atomically: true, encoding: String.Encoding.utf8)
  119|      0|}
  120|       |
  121|       |// 从Bundle中读取并解析JSON文件生成Model
  122|     50|func loadBundleJSONFile<T: Decodable>(_ filename: String) -> T {
  123|     50|
  124|     50|    do {
  125|     50|        let decoder = JSONDecoder()
  126|     50|        return try decoder.decode(T.self, from: loadBundleData(filename))
  127|     50|    } catch {
  128|      0|        fatalError("Couldn't parse \(filename) as \(T.self):\n\(error)")
  129|      0|    }
  130|      0|}
  131|       |
  132|       |// 从 Bundle 中取出 Data
  133|    268|func loadBundleData(_ filename: String) -> Data {
  134|    268|    let data: Data
  135|    268|    guard let file = Bundle.main.url(forResource: filename, withExtension: nil) else {
  136|      0|        fatalError("Couldn't find \(filename) in main bundle.")
  137|    268|    }
  138|    268|    do {
  139|    268|        data = try Data(contentsOf: file)
  140|    268|        return data
  141|    268|    } catch {
  142|      0|        fatalError("Couldn't load \(filename) from main bundle:\n\(error)")
  143|      0|    }
  144|      0|}
  145|       |// 从 Bundle 中取出 String
  146|     74|func loadBundleString(_ filename: String) -> String {
  147|     74|    let d = loadBundleData(filename)
  148|     74|    return String(decoding: d, as: UTF8.self)
  149|     74|}
  150|       |
  151|       |// 读取指定路径下文件内容
  152|      0|func loadFileContent(path: String) -> String {
  153|      0|    do {
  154|      0|        return try String(contentsOfFile: path, encoding: String.Encoding.utf8)
  155|      0|    } catch {
  156|      0|        return ""
  157|      0|    }
  158|      0|}
  159|       |
  160|       |// MARK: - 基础
  161|       |// decoder
  162|       |// extension 
  163|       |
  164|       |// base64
  165|       |extension String {
  166|      0|    func base64Encoded() -> String? {
  167|      0|        return self.data(using: .utf8)?.base64EncodedString()
  168|      0|    }
  169|       |
  170|      0|    func base64Decoded() -> String? {
  171|      0|        guard let data = Data(base64Encoded: self) else { return nil }
  172|      0|        return String(data: data, encoding: .utf8)
  173|      0|    }
  174|       |}
  175|       |
  176|       |// MARK: - 调试
  177|       |extension View {
  178|      0|    func debug() -> Self {
  179|      0|        print(Mirror(reflecting: self).subjectType)
  180|      0|        return self
  181|      0|    }
  182|       |}
  183|       |
  184|       |// MARK: - 代码覆盖率
  185|      2|func codeCoverageProfrawDump(fileName: String = "cc") {
  186|      2|    let name = "\(fileName).profraw"
  187|      2|    let fileManager = FileManager.default
  188|      2|    do {
  189|      2|        let documentDirectory = try fileManager.url(for: .documentDirectory, in: .userDomainMask, appropriateFor:nil, create:false)
  190|      2|        let filePath: NSString = documentDirectory.appendingPathComponent(name).path as NSString
  191|      2|        __llvm_profile_set_filename(filePath.utf8String)
  192|      2|        print("File at: \(String(cString: __llvm_profile_get_filename()))")
  193|      2|        __llvm_profile_write_file()
  194|      2|    } catch {
  195|      0|        print(error)
  196|      2|    }
  197|      2|}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Core/Lexer.swift:
    1|       |//
    2|       |//  Lexer.swift
    3|       |//  SA
    4|       |//
    5|       |//  Created by ming on 2019/8/2.
    6|       |//  Copyright © 2019 ming. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |public enum LexerType {
   12|       |    case code
   13|       |    case plain
   14|       |}
   15|       |
   16|       |public class Lexer {
   17|       |
   18|       |    private let text: String
   19|       |    private var currentIndex: Int
   20|       |    private var currentCharacter: Character?
   21|       |    private var type: LexerType
   22|       |
   23|     20|    public init(input: String, type: LexerType) {
   24|     20|        if input.count == 0 {
   25|      0|            // fatalError("Error! input can't be empty")
   26|      0|            text = "0"
   27|     20|        } else {
   28|     20|            text = input
   29|     20|        }
   30|     20|        currentIndex = 0
   31|     20|        currentCharacter = text[text.startIndex]
   32|     20|        self.type = type
   33|     20|
   34|     20|    }
   35|       |
   36|      0|    public func allTkFastWithoutNewLineAndWhitespace(operaters:String) -> [Token] {
   37|      0|        let allToken = allTkFast(operaters: operaters)
   38|      0|        let flAllToken = allToken.filter {
   39|      0|            $0 != .newLine
   40|      0|        }
   41|      0|        let fwAllToken = flAllToken.filter {
   42|      0|            $0 != .space
   43|      0|        }
   44|      0|        return fwAllToken
   45|      0|    }
   46|       |
   47|     20|    public func allTkFast(operaters:String) -> [Token] {
   48|     20|        var nText = text.replacingOccurrences(of: " ", with: " starmingspace ")
   49|     20|        nText = nText.replacingOccurrences(of: "\n", with: " starmingnewline ")
   50|     20|        let scanner = Scanner(string: nText)
   51|     20|        var tks = [Token]()
   52|     20|        var set = CharacterSet()
   53|     20|        set.insert(charactersIn: operaters)
   54|     20|        set.formUnion(CharacterSet.whitespacesAndNewlines)
   55|     20|
   56|  2.81M|        while !scanner.isAtEnd {
   57|  25.3M|            for operater in operaters {
   58|  25.3M|                let opStr = operater.description
   59|  25.3M|                if (scanner.scanString(opStr) != nil) {
   60|  1.49M|                    tks.append(.id(opStr))
   61|  25.3M|                }
   62|  25.3M|            }
   63|  2.81M|
   64|  2.81M|            if let result = scanner.scanUpToCharacters(from: set) {
   65|  2.51M|                let resultString = result as String
   66|  2.51M|                if resultString == "starmingnewline" {
   67|  60.0k|                    tks.append(.newLine)
   68|  2.51M|                } else if resultString == "starmingspace" {
   69|   938k|                    tks.append(.space)
   70|  2.51M|                } else {
   71|  1.57M|                    tks.append(.id(result as String))
   72|  2.51M|                }
   73|  2.81M|            }
   74|  2.81M|        }
   75|     20|        tks.append(.eof)
   76|     20|        return tks
   77|     20|    }
   78|       |
   79|       |    // 返回所有 Token
   80|      0|    public func allTk() -> [Token] {
   81|      0|        var tk = nextTk()
   82|      0|        var all = [tk]
   83|      0|        while tk != .eof {
   84|      0|            tk = self.nextTk()
   85|      0|            all.append(tk)
   86|      0|        }
   87|      0|        return all
   88|      0|    }
   89|       |
   90|       |    // 流程
   91|      0|    private func nextTk() -> Token {
   92|      0|        // 检查是否到达文件末
   93|      0|        if isEof() {
   94|      0|            return .eof
   95|      0|        }
   96|      0|
   97|      0|        if CharacterSet.whitespaces.contains((currentCharacter?.unicodeScalars.first!)!) {
   98|      0|            skipWhiteSpace()
   99|      0|        }
  100|      0|
  101|      0|        // 检查是否到达文件末
  102|      0|        if isEof() {
  103|      0|            return .eof
  104|      0|        }
  105|      0|
  106|      0|        // 换行
  107|      0|        if CharacterSet.newlines.contains((currentCharacter?.unicodeScalars.first!)!) {
  108|      0|            advance()
  109|      0|            return .newLine
  110|      0|        }
  111|      0|
  112|      0|        // 数字
  113|      0|        if CharacterSet.decimalDigits.contains((currentCharacter?.unicodeScalars.first!)!) {
  114|      0|            let n = number()
  115|      0|            print(n.des())
  116|      0|            return n
  117|      0|        }
  118|      0|
  119|      0|        // 字符
  120|      0|        if CharacterSet.alphanumerics.contains((currentCharacter?.unicodeScalars.first!)!) {
  121|      0|            return id()
  122|      0|        }
  123|      0|
  124|      0|        // 代码分析
  125|      0|        if type == .code {
  126|      0|
  127|      0|            // 双引号内字符串
  128|      0|            if currentCharacter == "\"" {
  129|      0|                return doubleQuotationMarksString()
  130|      0|            }
  131|      0|
  132|      0|            // 处理注释
  133|      0|            if currentCharacter == "/" {
  134|      0|                // 双引号注释
  135|      0|                if peek() == "/" {
  136|      0|                    advance()
  137|      0|                    advance()
  138|      0|                    return commentsFromDoubleSlash()
  139|      0|                } else if peek() == "*" {
  140|      0|                    advance()
  141|      0|                    advance()
  142|      0|                    return commentsFromSlashAsterisk()
  143|      0|                }
  144|      0|            }
  145|      0|        }
  146|      0|
  147|      0|        // 其余当作符号处理
  148|      0|        guard let cStr = currentCharacter else {
  149|      0|            return .eof
  150|      0|        }
  151|      0|        advance()
  152|      0|        return .id(String(cStr))
  153|      0|
  154|      0|        // 需要处理严格规则的时候会走下面条件
  155|      0|//        advance()
  156|      0|//        return .eof
  157|      0|    }
  158|       |
  159|       |    // 对字符的处理
  160|      0|    private func id() -> Token {
  161|      0|        var idStr = ""
  162|      0|        while let character = currentCharacter, CharacterSet.alphanumerics.contains(character.unicodeScalars.first!) {
  163|      0|            idStr += String(character)
  164|      0|            advance()
  165|      0|        }
  166|      0|        return .id(idStr)
  167|      0|    }
  168|       |
  169|       |    // 对数字的处理
  170|      0|    private func number() -> Token {
  171|      0|        var numStr = ""
  172|      0|        while let character = currentCharacter,CharacterSet.decimalDigits.contains(character.unicodeScalars.first!) {
  173|      0|                numStr += String(character)
  174|      0|                advance()
  175|      0|        }
  176|      0|
  177|      0|        if let character = currentCharacter, character == ".", peek() != "." {
  178|      0|            numStr += "."
  179|      0|            advance()
  180|      0|            while let character = currentCharacter, CharacterSet.decimalDigits.contains(character.unicodeScalars.first!) {
  181|      0|                numStr += String(character)
  182|      0|                advance()
  183|      0|            }
  184|      0|            return .constant(.float(Float(numStr)!))
  185|      0|        }
  186|      0|        return .constant(.integer(Int(numStr)!))
  187|      0|    }
  188|       |
  189|       |    // MARK: 辅助函数
  190|      0|    private func advance() {
  191|      0|        currentIndex += 1
  192|      0|        guard currentIndex < text.count else {
  193|      0|            currentCharacter = nil
  194|      0|            return
  195|      0|        }
  196|      0|        currentCharacter = text[text.index(text.startIndex, offsetBy: currentIndex)]
  197|      0|    }
  198|       |
  199|       |    // 往前探一个字符
  200|      0|    private func peek() -> String? {
  201|      0|        return peekStep(step: 1)
  202|      0|    }
  203|      0|    private func peekStep(step:Int) -> String? {
  204|      0|        var reStr = ""
  205|      0|        for index in 1..<step+1 {
  206|      0|            let peekIndex = currentIndex + index
  207|      0|            guard peekIndex < text.count else {
  208|      0|                return nil
  209|      0|            }
  210|      0|            reStr.append(text[text.index(text.startIndex, offsetBy: peekIndex)])
  211|      0|        }
  212|      0|        return reStr
  213|      0|    }
  214|       |
  215|       |    // 取 // 这种注释
  216|      0|    private func commentsFromDoubleSlash() -> Token {
  217|      0|        var cStr = ""
  218|      0|        while let character = currentCharacter, !CharacterSet.newlines.contains(character.unicodeScalars.first!) {
  219|      0|            advance()
  220|      0|            cStr += String(character)
  221|      0|        }
  222|      0|        return .comments(cStr)
  223|      0|    }
  224|       |
  225|       |    // 取 /* */ 这样的注释
  226|      0|    private func commentsFromSlashAsterisk() -> Token {
  227|      0|        var cStr = ""
  228|      0|        while let character = currentCharacter {
  229|      0|            if character == "*" && peek() == "/" {
  230|      0|                advance()
  231|      0|                advance()
  232|      0|                break
  233|      0|            } else {
  234|      0|                advance()
  235|      0|                cStr += String(character)
  236|      0|            }
  237|      0|
  238|      0|        }
  239|      0|        return .comments(cStr)
  240|      0|    }
  241|       |
  242|       |    // 双引号内字符串
  243|      0|    private func doubleQuotationMarksString() -> Token {
  244|      0|        advance()
  245|      0|        var cStr = ""
  246|      0|        while let character = currentCharacter {
  247|      0|            if character == "\\" && peek() == "\"" {
  248|      0|                advance()
  249|      0|                advance()
  250|      0|                cStr += String("\"")
  251|      0|            } else if character == "\"" {
  252|      0|                advance()
  253|      0|                break
  254|      0|            } else {
  255|      0|                advance()
  256|      0|                cStr += String(character)
  257|      0|            }
  258|      0|        }
  259|      0|        return .string(cStr)
  260|      0|    }
  261|       |
  262|       |    // 跳过空格
  263|      0|    private func skipWhiteSpace() {
  264|      0|        while let character = currentCharacter, CharacterSet.whitespacesAndNewlines.contains(character.unicodeScalars.first!) {
  265|      0|            advance()
  266|      0|        }
  267|      0|    }
  268|       |
  269|      0|    private func isEof() -> Bool {
  270|      0|        if currentIndex > self.text.count - 1 {
  271|      0|            return true
  272|      0|        }
  273|      0|        return false
  274|      0|    }
  275|       |
  276|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Core/Token.swift:
    1|       |//
    2|       |//  Token.swift
    3|       |//  SA
    4|       |//
    5|       |//  Created by ming on 2019/8/5.
    6|       |//  Copyright © 2019 ming. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |public enum Token {
   12|       |    case eof
   13|       |    case newLine
   14|       |    case space
   15|       |    case comments(String)      // 注释
   16|       |    case constant(Constant)    // float、int
   17|       |    case id(String)            // string
   18|       |    case string(String)        // 代码中引号内字符串
   19|       |
   20|  3.49M|    func des() -> String {
   21|  3.49M|        switch self {
   22|  3.49M|        case .space:
   23|   833k|            return " "
   24|  3.49M|        case let .comments(commentString):
   25|      0|            return commentString
   26|  3.49M|        case let .constant(.float(float)):
   27|      0|            return "\(float)"
   28|  3.49M|        case let .constant(.integer(int)):
   29|      0|            return "\(int)"
   30|  3.49M|        case let .constant(.string(string)):
   31|      0|            return string
   32|  3.49M|        case let .id(idString):
   33|  2.65M|            return idString
   34|  3.49M|        case let .string(sString):
   35|      0|            return sString
   36|  3.49M|        default:
   37|      0|            return ""
   38|  3.49M|        }
   39|  3.49M|    }
   40|       |}
   41|       |
   42|       |extension Token: Equatable {
   43|  15.8M|    public static func == (lhs: Token, rhs: Token) -> Bool {
   44|  15.8M|        switch (lhs, rhs) {
   45|  15.8M|        case (.eof, .eof):
   46|     20|            return true
   47|  15.8M|        case (.newLine, .newLine):
   48|  60.0k|            return true
   49|  15.8M|        case (.space, .space):
   50|   940k|            return true
   51|  15.8M|        case let (.constant(left), .constant(right)):
   52|      0|            return left == right
   53|  15.8M|        case let (.comments(left), .comments(right)):
   54|      0|            return left == right
   55|  15.8M|        case let (.id(left), .id(right)):
   56|  3.08M|            return left == right
   57|  15.8M|        case let (.string(left), .string(right)):
   58|      0|            return left == right
   59|  15.8M|        default:
   60|  11.8M|            return false
   61|  15.8M|        }
   62|  15.8M|    }
   63|       |}
   64|       |
   65|       |public enum Constant {
   66|       |    case string(String)
   67|       |    case integer(Int)
   68|       |    case float(Float)
   69|       |    case boolean(Bool)
   70|       |}
   71|       |
   72|       |extension Constant: Equatable {
   73|      0|    public static func == (lhs: Constant, rhs: Constant) -> Bool {
   74|      0|        switch (lhs, rhs) {
   75|      0|        case let (.integer(left), .integer(right)):
   76|      0|            return left == right
   77|      0|        case let (.string(left), .string(right)):
   78|      0|            return left == right
   79|      0|        case let (.float(left), .float(right)):
   80|      0|            return left == right
   81|      0|        case let (.boolean(left), .boolean(right)):
   82|      0|            return left == right
   83|      0|        default:
   84|      0|            return false
   85|      0|        }
   86|      0|    }
   87|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/DataSorting/DataListView.swift:
    1|       |//
    2|       |//  DataListView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/3/1.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct DLModel: Jsonable {
   11|       |    var t: String
   12|       |    var d: String?
   13|       |    var id: String
   14|       |}
   15|       |
   16|       |struct DataListView: View {
   17|      0|    @State private var model = [DLModel]()
   18|       |    let name: String
   19|      4|    var body: some View {
   20|      4|        List {
   21|     20|            ForEach(model) { m in
   22|     20|                NavigationLink {
   23|     20|                    RepoWebView(urlStr: m.id)
   24|     20|                } label: {
   25|     20|                    VStack(alignment: .leading) {
   26|     20|                        Text(m.t)
   27|     20|                            .font(.headline)
   28|     20|                        if m.d != nil {
   29|      0|                            Text(m.d ?? "")
   30|      0|                                .font(.subheadline)
   31|      0|                                .foregroundColor(.secondary)
   32|     40|                        }
   33|     40|                    }
   34|     20|                    .padding(EdgeInsets(top: 0, leading: 0, bottom: 10, trailing: 0))
   35|     20|                    // end VStack
   36|     20|                } // end NavigationLink
   37|     20|            }
   38|      4|        }
   39|      4|        .onAppear {
   40|      2|            model = loadBundleJSONFile("D-\(name).json")
   41|      2|        }
   42|      4|    }
   43|       |}
   44|       |
   45|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/DataSorting/DataSortingListView.swift:
    1|       |//
    2|       |//  DataSortingListView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/3/1.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct DataSortingListView: View {
   11|       |    struct M: Hashable, Identifiable {
   12|    756|        var id = UUID()
   13|       |        var name: String
   14|       |        var icon: String?
   15|       |        var subs: [M]?
   16|       |        
   17|    588|        init(name: String) {
   18|    588|            self.name = name
   19|    588|        }
   20|       |        
   21|    168|        init(name: String, subs: [M]) {
   22|    168|            self.name = name
   23|    168|            self.subs = subs
   24|    168|        }
   25|       |    }
   26|       |    
   27|     84|    @State private var model = [
   28|     84|        M(name: "Swift", subs: [
   29|     84|            M(name: "Swift 官方"),
   30|     84|            M(name: "Swift 技术"),
   31|     84|            M(name: "SwiftUI"),
   32|     84|            M(name: "技术周报"),
   33|     84|            M(name: "技术播客")
   34|     84|        ]),
   35|     84|        M(name: "美术", subs: [
   36|     84|            M(name: "图片工具"),
   37|     84|            M(name: "美术素材")
   38|     84|        ])
   39|     84|    ]
   40|       |    
   41|     12|    var body: some View {
   42|     12|        List {
   43|     24|            ForEach(model) { m in
   44|     24|                Section {
   45|     84|                    OutlineGroup(m.subs ?? [], children: \.subs) { c in
   46|     84|//                        Text(c.name)
   47|     84|                        NavigationLink {
   48|     84|                            DataListView(name: c.name)
   49|     84|                        } label: {
   50|     84|                            Text(c.name)
   51|     84|                                .font(.title3)
   52|     84|                        }
   53|     84|
   54|     84|                    }
   55|     24|                } header: {
   56|     24|                    Text(m.name)
   57|     24|                        .font(.title)
   58|     24|                }
   59|     24|            }
   60|     12|        }
   61|     12|    }
   62|       |}
   63|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/DB/DBDevNoti.swift:
    1|       |//
    2|       |//  DBDevNoti.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/31.
    6|       |//
    7|       |import SQLite
    8|       |import Foundation
    9|       |
   10|       |// MARK: - 开发者更新提醒
   11|       |typealias DBDevNoti = (
   12|       |    login: String,
   13|       |    lastReadId: String,
   14|       |    unRead: Int
   15|       |)
   16|       |
   17|       |struct DevsNotiDataHelper: DataHelperProtocol {
   18|       |    static let table = Table("devsNoti")
   19|       |    static let login = Expression<String>("login")
   20|       |    static let lastReadId = Expression<String>("lastReadId")
   21|       |    static let unRead = Expression<Int>("unRead")
   22|       |    typealias T = DBDevNoti
   23|       |
   24|      2|    static func createTable() throws {
   25|      2|        guard let db = DB.shared.BBDB else {
   26|      0|            throw DBError.connectionErr
   27|      2|        }
   28|      2|        do {
   29|      2|            _ = try db.run(table.create(ifNotExists: true) { t in
   30|      2|                t.column(login, unique: true)
   31|      2|                t.column(lastReadId, defaultValue: "")
   32|      2|                t.column(unRead, defaultValue: 0)
   33|      2|            })
   34|      2|        } catch {
   35|      0|            throw DBError.connectionErr
   36|      2|        }
   37|      2|    } // end createTable
   38|       |
   39|      0|    static func insert(i: T) throws -> Int64 {
   40|      0|        guard let db = DB.shared.BBDB else {
   41|      0|            throw DBError.connectionErr
   42|      0|        }
   43|      0|        let insert = table.insert(login <- i.login, lastReadId <- i.lastReadId, unRead <- i.unRead)
   44|      0|        do {
   45|      0|            let rowId = try db.run(insert)
   46|      0|            guard rowId > 0 else {
   47|      0|                throw DBError.insertErr
   48|      0|            }
   49|      0|            return rowId
   50|      0|        } catch {
   51|      0|            throw DBError.insertErr
   52|      0|        }
   53|      0|    } // end insert
   54|       |
   55|      0|    static func delete(i: T) throws {
   56|      0|        guard let db = DB.shared.BBDB else {
   57|      0|            throw DBError.connectionErr
   58|      0|        }
   59|      0|        let query = table.filter(login == i.login)
   60|      0|        do {
   61|      0|            let tmp = try db.run(query.delete())
   62|      0|            guard tmp == 1 else {
   63|      0|                throw DBError.deleteErr
   64|      0|            }
   65|      0|        } catch {
   66|      0|            throw DBError.deleteErr
   67|      0|        }
   68|      0|    } // end delete
   69|       |
   70|     54|    static func find(sLogin: String) throws -> T? {
   71|     54|        guard let db = DB.shared.BBDB else {
   72|      0|            throw DBError.connectionErr
   73|     54|        }
   74|     54|        let query = table.filter(login == sLogin)
   75|     54|        let items = try db.prepare(query)
   76|     54|        for i in items {
   77|     54|            return T(login: i[login], lastReadId: i[lastReadId], unRead: i[unRead])
   78|     54|        }
   79|      0|        return nil
   80|     54|    } // end find
   81|       |
   82|      0|    static func update(i: T) throws {
   83|      0|        guard let db = DB.shared.BBDB else {
   84|      0|            throw DBError.connectionErr
   85|      0|        }
   86|      0|        let query = table.filter(login == i.login)
   87|      0|        do {
   88|      0|            if try db.run(query.update(lastReadId <- i.lastReadId, unRead <- i.unRead)) > 0 {
   89|      0|
   90|      0|            } else {
   91|      0|                throw DBError.updateErr
   92|      0|            }
   93|      0|        } catch {
   94|      0|            throw DBError.updateErr
   95|      0|        }
   96|      0|    } // end update
   97|       |
   98|      4|    static func findAll() throws -> [T]? {
   99|      4|        guard let db = DB.shared.BBDB else {
  100|      0|            throw DBError.connectionErr
  101|      4|        }
  102|      4|        var arr = [T]()
  103|      4|        let items = try db.prepare(table)
  104|    108|        for i in items {
  105|    108|            arr.append(T(login: i[login], lastReadId: i[lastReadId], unRead: i[unRead]))
  106|    108|        }
  107|      4|        return arr
  108|      4|    } // end find all
  109|       |
  110|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/DB/DBHandler.swift:
    1|       |//
    2|       |//  DBHandle.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/29.
    6|       |//
    7|       |
    8|       |import SQLite
    9|       |import Foundation
   10|       |import SwiftUI
   11|       |
   12|       |struct DB {
   13|       |    static let shared = DB()
   14|       |    static let path = NSSearchPathForDirectoriesInDomains(
   15|       |        .applicationSupportDirectory, .userDomainMask, true
   16|       |    ).first!
   17|       |    let BBDB: Connection?
   18|      2|    private init() {
   19|      2|        do {
   20|      2|            print(DB.path)
   21|      2|            BBDB = try Connection("\(DB.path)/github.sqlite3")
   22|      2|
   23|      2|        } catch {
   24|      0|            BBDB = nil
   25|      2|        }
   26|      2|        /// Swift 类型和 SQLite 类型对标如下：
   27|      2|        /// Int64 = INTEGER
   28|      2|        /// Double = REAL
   29|      2|        /// String = TEXT
   30|      2|        /// nil = NULL
   31|      2|        /// SQLite.Blob = BLOB
   32|      2|
   33|      2|    }
   34|       |
   35|      2|    func cTbs() throws {
   36|      2|        do {
   37|      2|            try DevsNotiDataHelper.createTable()
   38|      2|            try RepoStoreDataHelper.createTable()
   39|      2|            try RSSFeedDataHelper.createTable()
   40|      2|            try RSSItemsDataHelper.createTable()
   41|      2|        } catch {
   42|      0|            throw DBError.connectionErr
   43|      2|        }
   44|      2|    }
   45|       |
   46|       |}
   47|       |
   48|       |enum DBError: Error {
   49|       |    case connectionErr, insertErr, deleteErr, searchErr, updateErr, nilInData
   50|       |}
   51|       |
   52|       |protocol DataHelperProtocol {
   53|       |    associatedtype T
   54|       |    static func createTable() throws
   55|       |    static func insert(i: T) throws -> Int64
   56|       |    static func delete(i: T) throws
   57|       |    static func findAll() throws -> [T]?
   58|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/DB/DBRepoStore.swift:
    1|       |//
    2|       |//  DBRepoStore.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/31.
    6|       |//
    7|       |
    8|       |import SQLite
    9|       |import Foundation
   10|       |
   11|       |// MARK: - 探索更多库更新提醒
   12|       |typealias DBRepoStore = (
   13|       |    id: Int64,
   14|       |    name: String,
   15|       |    fullName: String,
   16|       |    description: String,
   17|       |    stargazersCount: Int,
   18|       |    openIssues: Int,
   19|       |    language: String,
   20|       |    htmlUrl: String,
   21|       |    lastReadCommitSha: String,
   22|       |    unRead: Int,
   23|       |    type: Int,
   24|       |    extra: String
   25|       |)
   26|       |struct RepoStoreDataHelper: DataHelperProtocol {
   27|       |    static let table = Table("RepoStore")
   28|       |    typealias T = DBRepoStore
   29|       |
   30|       |    static let id = Expression<Int64>("id")
   31|       |    static let name = Expression<String>("name")
   32|       |    static let fullName = Expression<String>("fullName")
   33|       |    static let description = Expression<String>("description")
   34|       |    static let stargazersCount = Expression<Int>("stargazersCount")
   35|       |    static let openIssues = Expression<Int>("openIssues")
   36|       |    static let language = Expression<String>("language")
   37|       |    static let htmlUrl = Expression<String>("htmlUrl")
   38|       |    static let lastReadCommitSha = Expression<String>("lastReadCommitSha")
   39|       |    static let unRead = Expression<Int>("unRead")
   40|       |    static let type = Expression<Int>("type")
   41|       |    static let extra = Expression<String>("extra")
   42|       |
   43|    440|    static func createEmptyDBRepoStore(_ pFullName: String) -> T {
   44|    440|        return T(
   45|    440|            id: 0,
   46|    440|            name: "",
   47|    440|            fullName: pFullName,
   48|    440|            description: "",
   49|    440|            stargazersCount: 0,
   50|    440|            openIssues: 0,
   51|    440|            language: "",
   52|    440|            htmlUrl: "",
   53|    440|            lastReadCommitSha: "",
   54|    440|            unRead: 0,
   55|    440|            type: 0,
   56|    440|            extra: ""
   57|    440|        )
   58|    440|    }
   59|       |
   60|      2|    static func createTable() throws {
   61|      2|        guard let db = DB.shared.BBDB else {
   62|      0|            throw DBError.connectionErr
   63|      2|        }
   64|      2|        do {
   65|      2|            _ = try db.run(table.create(ifNotExists: true) { t in
   66|      2|                t.column(id, defaultValue: 0)
   67|      2|                t.column(name, defaultValue: "")
   68|      2|                t.column(fullName, unique: true)
   69|      2|                t.column(description, defaultValue: "")
   70|      2|                t.column(stargazersCount, defaultValue: 0)
   71|      2|                t.column(openIssues, defaultValue: 0)
   72|      2|                t.column(language, defaultValue: "")
   73|      2|                t.column(htmlUrl, defaultValue: "")
   74|      2|                t.column(lastReadCommitSha, defaultValue: "")
   75|      2|                t.column(unRead, defaultValue: 0)
   76|      2|                t.column(type, defaultValue: 0)
   77|      2|                t.column(extra, defaultValue: "")
   78|      2|            })
   79|      2|        } catch {
   80|      0|            throw DBError.connectionErr
   81|      2|        }
   82|      2|    } // end createTable
   83|       |
   84|      0|    static func insert(i: T) throws -> Int64 {
   85|      0|        guard let db = DB.shared.BBDB else {
   86|      0|            throw DBError.connectionErr
   87|      0|        }
   88|      0|        let insert = table.insert(
   89|      0|            id <- i.id,
   90|      0|            name <- i.name,
   91|      0|            fullName <- i.fullName,
   92|      0|            description <- i.description,
   93|      0|            stargazersCount <- i.stargazersCount,
   94|      0|            openIssues <- i.openIssues,
   95|      0|            language <- i.language,
   96|      0|            htmlUrl <- i.htmlUrl,
   97|      0|            lastReadCommitSha <- i.lastReadCommitSha,
   98|      0|            unRead <- i.unRead,
   99|      0|            type <- i.type,
  100|      0|            extra <- i.extra
  101|      0|        )
  102|      0|        do {
  103|      0|            let rowId = try db.run(insert)
  104|      0|            guard rowId > 0 else {
  105|      0|                throw DBError.insertErr
  106|      0|            }
  107|      0|            return rowId
  108|      0|        } catch {
  109|      0|            throw DBError.insertErr
  110|      0|        }
  111|      0|    } // end insert
  112|       |
  113|      0|    static func delete(i: T) throws {
  114|      0|        guard let db = DB.shared.BBDB else {
  115|      0|            throw DBError.connectionErr
  116|      0|        }
  117|      0|        let query = table.filter(fullName == i.fullName)
  118|      0|        do {
  119|      0|            let tmp = try db.run(query.delete())
  120|      0|            guard tmp == 1 else {
  121|      0|                throw DBError.deleteErr
  122|      0|            }
  123|      0|        } catch {
  124|      0|            throw DBError.deleteErr
  125|      0|        }
  126|      0|    } // end delete
  127|       |
  128|    440|    static func find(sFullName: String) throws -> T? {
  129|    440|        guard let db = DB.shared.BBDB else {
  130|      0|            throw DBError.connectionErr
  131|    440|        }
  132|    440|        let query = table.filter(fullName == sFullName)
  133|    440|        let items = try db.prepare(query)
  134|    440|        for i in items {
  135|    440|            return T(
  136|    440|                id: i[id],
  137|    440|                name: i[name],
  138|    440|                fullName: i[fullName],
  139|    440|                description: i[description],
  140|    440|                stargazersCount: i[stargazersCount],
  141|    440|                openIssues: i[openIssues],
  142|    440|                language: i[language],
  143|    440|                htmlUrl: i[htmlUrl],
  144|    440|                lastReadCommitSha: i[lastReadCommitSha],
  145|    440|                unRead: i[unRead],
  146|    440|                type: i[type],
  147|    440|                extra: i[extra]
  148|    440|            )
  149|    440|        }
  150|      0|        return nil
  151|    440|    } // end find
  152|       |
  153|      0|    static func update(i: T) throws {
  154|      0|        guard let db = DB.shared.BBDB else {
  155|      0|            throw DBError.connectionErr
  156|      0|        }
  157|      0|        let query = table.filter(fullName == i.fullName)
  158|      0|        do {
  159|      0|            if try db.run(query.update(
  160|      0|                id <- i.id,
  161|      0|                name <- i.name,
  162|      0|                fullName <- i.fullName,
  163|      0|                description <- i.description,
  164|      0|                stargazersCount <- i.stargazersCount,
  165|      0|                openIssues <- i.openIssues,
  166|      0|                language <- i.language,
  167|      0|                htmlUrl <- i.htmlUrl,
  168|      0|                lastReadCommitSha <- i.lastReadCommitSha,
  169|      0|                unRead <- i.unRead
  170|      0|            )) > 0 {
  171|      0|
  172|      0|            } else {
  173|      0|                throw DBError.updateErr
  174|      0|            }
  175|      0|        } catch {
  176|      0|            throw DBError.updateErr
  177|      0|        }
  178|      0|    } // end update
  179|       |
  180|      0|    static func updateUnread(name: String, unread: Int) throws {
  181|      0|        guard let db = DB.shared.BBDB else {
  182|      0|            throw DBError.connectionErr
  183|      0|        }
  184|      0|        let query = table.filter(fullName == name)
  185|      0|        do {
  186|      0|            if try db.run(query.update(
  187|      0|                unRead <- unread
  188|      0|            )) > 0 {
  189|      0|
  190|      0|            } else {
  191|      0|                throw DBError.updateErr
  192|      0|            }
  193|      0|        } catch {
  194|      0|            throw DBError.updateErr
  195|      0|        }
  196|      0|    }
  197|       |
  198|      4|    static func findAll() throws -> [T]? {
  199|      4|        guard let db = DB.shared.BBDB else {
  200|      0|            throw DBError.connectionErr
  201|      4|        }
  202|      4|        var arr = [T]()
  203|      4|        let items = try db.prepare(table)
  204|    872|        for i in items {
  205|    872|            arr.append(T(
  206|    872|                id: i[id],
  207|    872|                name: i[name],
  208|    872|                fullName: i[fullName],
  209|    872|                description: i[description],
  210|    872|                stargazersCount: i[stargazersCount],
  211|    872|                openIssues: i[openIssues],
  212|    872|                language: i[language],
  213|    872|                htmlUrl: i[htmlUrl],
  214|    872|                lastReadCommitSha: i[lastReadCommitSha],
  215|    872|                unRead: i[unRead],
  216|    872|                type: i[type],
  217|    872|                extra: i[extra]
  218|    872|            ))
  219|    872|        }
  220|      4|        return arr
  221|      4|    } // end find all
  222|       |
  223|       |} // end RepoStore

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/DetailView/GuideView.swift:
    1|       |//
    2|       |//  GuideView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/1/24.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |import Ink
   10|       |
   11|       |struct GuideView: View {
   12|  3.07k|    @EnvironmentObject var appVM: AppVM
   13|       |    var number: Int
   14|       |    var title: String
   15|     72|    var body: some View {
   16|     72|        HStack {
   17|     72|            Spacer()
   18|     72|            Text(title).font(.title)
   19|     72|            Spacer()
   20|     72|
   21|     72|            NavigationLink {
   22|     72|                WebView(urlStr: "https://github.com/\(SPC.pamphletIssueRepoName)/issues/" + "\(number)")
   23|     72|            } label: {
   24|     72|                Text("议题讨论 #\(number)")
   25|     72|            }
   26|     72|        }
   27|     72|        .padding(EdgeInsets(top: 10, leading: 10, bottom: 2, trailing: 10))
   28|     72|        WebUIView(html: wrapperHtmlContent(content: MarkdownParser().html(from: "\(loadBundleString("\(number)" + ".md"))")), baseURLStr: "")
   29|     72|            .onAppear {
   30|     18|                appVM.updateWebLink(s: "https://github.com/\(SPC.pamphletIssueRepoName)/issues/" + "\(number)")
   31|     18|            }
   32|     72|            .frame(minWidth: SPC.detailMinWidth)
   33|     72|    }
   34|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/DetailView/IssueView.swift:
    1|       |//
    2|       |//  IssueView.swift
    3|       |//  PresentSwiftUI
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/12.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct IssueView: View {
   11|       |    enum EnterType {
   12|       |        case normal, hiddenUserInfo
   13|       |    }
   14|       |
   15|       |    @StateObject var vm: IssueVM
   16|      0|    @State var type: EnterType = .normal
   17|       |
   18|      0|    var body: some View {
   19|      0|        ScrollView {
   20|      0|            HStack {
   21|      0|                VStack(alignment: .leading, spacing: 10) {
   22|      0|                    HStack {
   23|      0|                        Text(vm.issue.title).font(.system(.largeTitle))
   24|      0|                        ButtonGoGitHubWeb(url: vm.issue.htmlUrl, text: "在 GitHub 上访问")
   25|      0|                        Button {
   26|      0|                            vm.doing(.update)
   27|      0|                        } label: {
   28|      0|                            Image(systemName: "arrow.triangle.2.circlepath")
   29|      0|                        }
   30|      0|
   31|      0|                    }
   32|      0|                    if type == .hiddenUserInfo {
   33|      0|                        Text(" \(howLongFromNow(timeStr:vm.issue.updatedAt))更新过").font(.footnote)
   34|      0|                    } else {
   35|      0|                        HStack {
   36|      0|                            AsyncImageWithPlaceholder(size: .smallSize, url: vm.issue.user.avatarUrl)
   37|      0|                            VStack(alignment:.leading) {
   38|      0|                                NavigationLink(destination: UserView(vm: UserVM(userName: vm.issue.user.login)), label: {
   39|      0|                                    Text(vm.issue.user.login)
   40|      0|                                })
   41|      0|                                HStack {
   42|      0|                                    Text("更新于 ")
   43|      0|                                    GitHubApiTimeView(timeStr: vm.issue.updatedAt)
   44|      0|                                }
   45|      0|                            }
   46|      0|                        } // end HStack
   47|      0|                    }
   48|      0|                    MarkdownView(s: vm.issue.body ?? "") // TODO: 等 SwiftUI 的 Text 支持完整的 markdown，再进行替换
   49|      0|                } // end VStack
   50|      0|                Spacer()
   51|      0|            } // end HStack
   52|      0|            .padding(EdgeInsets(top: 20, leading: 10, bottom: 10, trailing: 10))
   53|      0|
   54|      0|            if vm.comments.count > 0 {
   55|      0|                HStack {
   56|      0|                    VStack(alignment: .leading, spacing: 0) {
   57|      0|                        Text("留言").font(.system(.largeTitle))
   58|      0|                    }
   59|      0|                    .padding(10)
   60|      0|                    Spacer()
   61|      0|                }
   62|      0|                ForEach(vm.comments) { comment in
   63|      0|                    VStack(alignment: .leading) {
   64|      0|                        GitHubApiTimeView(timeStr: comment.updatedAt)
   65|      0|                        HStack {
   66|      0|                            AsyncImageWithPlaceholder(size: .smallSize, url: comment.user.avatarUrl)
   67|      0|                            ButtonGoGitHubWeb(url: comment.user.login, text: comment.user.login, ignoreHost: true)
   68|      0|
   69|      0|                            Text(comment.authorAssociation)
   70|      0|                                .font(.footnote)
   71|      0|                                .foregroundColor(.secondary)
   72|      0|
   73|      0|                        }
   74|      0|                        HStack {
   75|      0|                            VStack(alignment: .leading, spacing: 0) {
   76|      0|                                MarkdownView(s: comment.body)
   77|      0|                            }
   78|      0|                            Spacer()
   79|      0|                        }
   80|      0|                    } // end VStack
   81|      0|                    .padding(10)
   82|      0|                    Divider()
   83|      0|                        .padding(EdgeInsets(top: 0, leading: 10, bottom: 0, trailing: 10))
   84|      0|                } // end ForEach
   85|      0|            }
   86|      0|
   87|      0|        } // end ScrollView
   88|      0|        .alert(vm.errMsg, isPresented: $vm.errHint, actions: {})
   89|      0|        .frame(minWidth: SPC.detailMinWidth)
   90|      0|        .onAppear {
   91|      0|            vm.doing(.inInit)
   92|      0|        }
   93|      0|
   94|      0|    }
   95|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/DetailView/RepoView.swift:
    1|       |//
    2|       |//  RepoView.swift
    3|       |//  PresentSwiftUI
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/11.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct RepoView: View {
   11|       |    enum EnterType {
   12|       |        case normal, readme
   13|       |    }
   14|      0|    @EnvironmentObject var appVM: AppVM
   15|       |    @StateObject var vm: RepoVM
   16|       |    @State private var tabSelct = 1
   17|      0|    @State var type: EnterType = .normal
   18|       |    var isShowRepoCommitsLink = true
   19|       |    var isShowIssuesLink = true
   20|       |    var isCleanUnread = false
   21|       |    var isCleanExpUnread = false
   22|       |    @State private var expUnreadCount = 0
   23|       |    
   24|       |    @State var isEnterFullScreen: Bool = false // 全屏控制
   25|       |    
   26|      0|    var body: some View {
   27|      0|        HStack {
   28|      0|            VStack(alignment: .leading, spacing: 10) {
   29|      0|                HStack {
   30|      0|                    Text(vm.repo.name).font(.system(.largeTitle))
   31|      0|                    Text("(\(vm.repo.fullName))")
   32|      0|                }
   33|      0|                HStack {
   34|      0|                    Image(systemName: "star.fill").foregroundColor(.red)
   35|      0|                    Text("\(vm.repo.stargazersCount)")
   36|      0|                    Image(systemName: "tuningfork").foregroundColor(.cyan)
   37|      0|                    Text("\(vm.repo.forks)")
   38|      0|                    Text("议题 \(vm.repo.openIssues)")
   39|      0|                    Text("语言 \(vm.repo.language ?? "")")
   40|      0|                    ButtonGoGitHubWeb(url: vm.repo.htmlUrl ?? "https://github.com", text: "在 GitHub 上访问")
   41|      0|                    Button {
   42|      0|                        withAnimation {
   43|      0|                            isEnterFullScreen.toggle()
   44|      0|                            appVM.fullScreen(isEnter: isEnterFullScreen)
   45|      0|                        }
   46|      0|                    } label: {
   47|      0|                        Image(systemName: isEnterFullScreen == true ? "arrow.down.right.and.arrow.up.left" : "arrow.up.left.and.arrow.down.right")
   48|      0|                    }
   49|      0|
   50|      0|                }
   51|      0|                if vm.repo.description != nil {
   52|      0|                    Text("简介：\(vm.repo.description ?? "")")
   53|      0|                }
   54|      0|                
   55|      0|                HStack {
   56|      0|                    Text("作者：")
   57|      0|                    AsyncImageWithPlaceholder(size: .smallSize, url: vm.repo.owner.avatarUrl)
   58|      0|                    ButtonGoGitHubWeb(url: vm.repo.owner.login, text: vm.repo.owner.login, ignoreHost: true)
   59|      0|                }
   60|      0|            } // end VStack
   61|      0|            Spacer()
   62|      0|        }
   63|      0|        .alert(vm.errMsg, isPresented: $vm.errHint, actions: {})
   64|      0|        .frame(minWidth: SPC.detailMinWidth)
   65|      0|        
   66|      0|        .padding(EdgeInsets(top: 20, leading: 10, bottom: 0, trailing: 10))
   67|      0|        .onAppear {
   68|      0|            if type == .readme {
   69|      0|                vm.doing(.inInitJustRepo)
   70|      0|                tabSelct = 4
   71|      0|            } else {
   72|      0|                vm.doing(.inInit)
   73|      0|            }
   74|      0|        }
   75|      0|        .onDisappear {
   76|      0|            appVM.expNotis[vm.repoName]?.unRead = 0
   77|      0|            appVM.calculateExpCountNotis()
   78|      0|        }
   79|      0|        // end HStack
   80|      0|
   81|      0|        TabView(selection: $tabSelct) {
   82|      0|            RepoCommitsView(commits: vm.commits, repo: vm.repo, isShowLink: isShowRepoCommitsLink, unReadCount: expUnreadCount)
   83|      0|                .tabItem {
   84|      0|                    Text("新提交")
   85|      0|                }
   86|      0|                .onAppear(perform: {
   87|      0|                    vm.doing(.inCommit)
   88|      0|                    if isCleanExpUnread == true {
   89|      0|                        expUnreadCount = appVM.expNotis[vm.repoName]?.unRead ?? 0
   90|      0|                        vm.doing(.clearExpUnReadCommit)
   91|      0|                        appVM.expNotis[vm.repoName]?.unRead = SPC.unreadMagicNumber
   92|      0|                        appVM.calculateExpCountNotis()
   93|      0|                    }
   94|      0|                })
   95|      0|                .tag(1)
   96|      0|                
   97|      0|
   98|      0|            IssuesView(issues: vm.issues, repo: vm.repo, isShowLink: isShowIssuesLink)
   99|      0|                .tabItem {
  100|      0|                    Text("议题列表")
  101|      0|                }
  102|      0|                .onAppear {
  103|      0|                    vm.doing(.inIssues)
  104|      0|                }
  105|      0|                .tag(2)
  106|      0|
  107|      0|            IssueEventsView(issueEvents: vm.issueEvents, repo: vm.repo, isShowLink: isShowIssuesLink)
  108|      0|                .tabItem {
  109|      0|                    Text("议题事件")
  110|      0|                }
  111|      0|                .onAppear {
  112|      0|                    vm.doing(.inIssueEvents)
  113|      0|                }
  114|      0|                .tag(3)
  115|      0|
  116|      0|            ReadmeView(content: vm.readme.content.replacingOccurrences(of: "\n", with: ""))
  117|      0|                .tabItem {
  118|      0|                    Text("README")
  119|      0|                }
  120|      0|                .onAppear {
  121|      0|                    vm.doing(.inReadme)
  122|      0|                }
  123|      0|                .tag(4)
  124|      0|
  125|      0|        } // end TabView
  126|      0|        Spacer()
  127|      0|    }
  128|       |        
  129|       |}
  130|       |
  131|       |struct ReadmeView: View {
  132|       |    var content: String
  133|      0|    var body: some View {
  134|      0|        ScrollView {
  135|      0|            MarkdownView(s: content.base64Decoded() ?? "failed")
  136|      0|                .padding(10)
  137|      0|        }
  138|      0|    }
  139|       |}
  140|       |
  141|       |struct IssuesView: View {
  142|       |    var issues: [IssueModel]
  143|       |    var repo: RepoModel
  144|       |    var isShowLink = true
  145|      0|    var body: some View {
  146|      0|        List {
  147|      0|            ForEach(issues) { issue in
  148|      0|                if isShowLink == true {
  149|      0|                    NavigationLink(destination: IssueView(vm: IssueVM(repoName: repo.fullName, issueNumber: issue.number))) {
  150|      0|                        IssueLabelView(issue: issue)
  151|      0|                    }
  152|      0|                } else {
  153|      0|                    IssueLabelView(issue: issue)
  154|      0|                }
  155|      0|                Divider()
  156|      0|            } // end ForEach
  157|      0|        } // end List
  158|      0|    } // end body
  159|       |}
  160|       |
  161|       |struct IssueEventsView: View {
  162|       |    var issueEvents: [IssueEventModel]
  163|       |    var repo: RepoModel
  164|       |    var isShowLink = true
  165|      0|    var body: some View {
  166|      0|        List {
  167|      0|            ForEach(issueEvents) { issueEvent in
  168|      0|                if isShowLink == true {
  169|      0|                    NavigationLink(destination: IssueView(vm: IssueVM(repoName: repo.fullName, issueNumber: issueEvent.issue.number))) {
  170|      0|                        IssueEventLabelView(issueEvent: issueEvent)
  171|      0|                    } // end NavigationLink
  172|      0|                } else {
  173|      0|                    IssueEventLabelView(issueEvent: issueEvent)
  174|      0|                }
  175|      0|                Divider()
  176|      0|            } //  end ForEach
  177|      0|        } // end List
  178|      0|    } // end body
  179|       |}
  180|       |
  181|       |struct RepoCommitsView: View {
  182|       |    var commits: [CommitModel]
  183|       |    var repo: RepoModel
  184|       |    var isShowLink = true
  185|       |    var unReadCount = 0
  186|      0|    var body: some View {
  187|      0|        List {
  188|      0|            ForEach(Array(commits.enumerated()), id: \.0) { i, commit in
  189|      0|                if isShowLink == true {
  190|      0|                    NavigationLink {
  191|      0|                        VStack {
  192|      0|                            if commit.author?.login != nil {
  193|      0|                                UserView(vm: UserVM(userName: commit.author?.login ?? ""), isShowUserEventLink: false)
  194|      0|                            } else {
  195|      0|                                Text(commit.commit.author.name ?? "")
  196|      0|                            }
  197|      0|                        }
  198|      0|                    } label: {
  199|      0|                        RepoCommitLabelView(repo: repo, commit: commit, isUnRead: unReadCount > 0 && i < unReadCount)
  200|      0|                    } // end NavigationLink
  201|      0|                } else {
  202|      0|                    RepoCommitLabelView(repo: repo, commit: commit, isUnRead: unReadCount > 0 && i < unReadCount)
  203|      0|                }
  204|      0|
  205|      0|                Divider()
  206|      0|            } // end ForEach
  207|      0|        } // end List
  208|      0|        .frame(minWidth: SPC.detailMinWidth)
  209|      0|    } // end body
  210|       |}
  211|       |
  212|       |// MARK: - 碎视图
  213|       |struct RepoCommitLabelView: View {
  214|       |    var repo: RepoModel
  215|       |    var commit: CommitModel
  216|       |    var isUnRead = false
  217|      0|    var body: some View {
  218|      0|        VStack(alignment: .leading, spacing: 2) {
  219|      0|            GitHubApiTimeView(timeStr: commit.commit.author.date)
  220|      0|            HStack {
  221|      0|                if isUnRead {
  222|      0|                    Image(systemName: "envelope.badge.fill")
  223|      0|                }
  224|      0|                if commit.author != nil {
  225|      0|                    AsyncImageWithPlaceholder(size: .tinySize, url: commit.author?.avatarUrl ?? "")
  226|      0|                    ButtonGoGitHubWeb(url: commit.author?.login ?? "", text: commit.author?.login ?? "", ignoreHost: true, bold: true)
  227|      0|
  228|      0|                } else {
  229|      0|                    Text(commit.commit.author.name ?? "")
  230|      0|                }
  231|      0|                ButtonGoGitHubWeb(url: "https://github.com/\(repo.fullName)/commit/\(commit.sha ?? "")", text: "commit")
  232|      0|            } // end HStack
  233|      0|            MarkdownView(s: commit.commit.message ?? "")
  234|      0|        } // end VStack
  235|      0|    }
  236|       |}
  237|       |
  238|       |struct IssueLabelView: View {
  239|       |    var issue: IssueModel
  240|      0|    var body: some View {
  241|      0|        VStack(alignment: .leading, spacing: 5) {
  242|      0|            GitHubApiTimeView(timeStr: issue.updatedAt)
  243|      0|            HStack {
  244|      0|                Text(issue.title)
  245|      0|                    .font(.title2)
  246|      0|                Text("\(issue.comments) 回复")
  247|      0|                    .foregroundColor(.secondary)
  248|      0|                    .font(.footnote)
  249|      0|            }
  250|      0|            HStack {
  251|      0|                AsyncImageWithPlaceholder(size: .tinySize, url: issue.user.avatarUrl)
  252|      0|                ButtonGoGitHubWeb(url: issue.user.login, text: issue.user.login, ignoreHost: true)
  253|      0|            }
  254|      0|            MarkdownView(s: issue.body ?? "")
  255|      0|        } // end VStack
  256|      0|    }
  257|       |}
  258|       |
  259|       |struct IssueEventLabelView: View {
  260|       |    var issueEvent: IssueEventModel
  261|      0|    var body: some View {
  262|      0|        VStack(alignment: .leading, spacing: 5) {
  263|      0|            GitHubApiTimeView(timeStr: issueEvent.createdAt)
  264|      0|            HStack {
  265|      0|                AsyncImageWithPlaceholder(size: .tinySize, url: issueEvent.actor.avatarUrl)
  266|      0|                ButtonGoGitHubWeb(url: issueEvent.actor.login, text: issueEvent.actor.login, ignoreHost: true)
  267|      0|                Text(issueEvent.event)
  268|      0|                    .foregroundColor(.secondary)
  269|      0|            }
  270|      0|            HStack {
  271|      0|                Text(issueEvent.issue.title)
  272|      0|                    .font(.title2)
  273|      0|                Text("\(issueEvent.issue.comments) 回复")
  274|      0|                    .foregroundColor(.secondary)
  275|      0|                    .font(.footnote)
  276|      0|            }
  277|      0|            HStack {
  278|      0|                AsyncImageWithPlaceholder(size: .tinySize, url: issueEvent.issue.user.avatarUrl)
  279|      0|                ButtonGoGitHubWeb(url: issueEvent.issue.user.login, text: issueEvent.issue.user.login, ignoreHost: true)
  280|      0|            }
  281|      0|            MarkdownView(s: issueEvent.issue.body ?? "")
  282|      0|        } // end VStack
  283|      0|    }
  284|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/DetailView/RepoWebView.swift:
    1|       |//
    2|       |//  RepoWebView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/1/25.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct RepoWebView: View {
   11|     20|    @EnvironmentObject var appVM: AppVM
   12|       |    var urlStr: String
   13|      0|    var body: some View {
   14|      0|        WebView(urlStr: urlStr)
   15|      0|            .onAppear {
   16|      0|                appVM.updateWebLink(s: urlStr)
   17|      0|            }
   18|      0|            .frame(minWidth: SPC.detailMinWidth)
   19|      0|    }
   20|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/DetailView/UserView.swift:
    1|       |//
    2|       |//  UserView.swift
    3|       |//  PresentSwiftUI
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/10.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct UserView: View {
   11|      0|    @EnvironmentObject var appVM: AppVM
   12|       |    @StateObject var vm: UserVM
   13|       |    var isShowUserEventLink = true
   14|       |    var isCleanUnread = false
   15|       |    @State private var unReadCount = 0
   16|       |    @State private var tabSelct = 1
   17|      0|    var body: some View {
   18|      0|        HStack {
   19|      0|            VStack(alignment: .leading, spacing: 10) {
   20|      0|                HStack {
   21|      0|                    AsyncImageWithPlaceholder(size: .normalSize, url: vm.user.avatarUrl)
   22|      0|                    VStack(alignment: .leading, spacing: 5) {
   23|      0|                        HStack {
   24|      0|                            Text(vm.user.name ?? vm.user.login).font(.system(.title))
   25|      0|                            Text("(\(vm.user.login))")
   26|      0|                            Text("订阅者 \(vm.user.followers) 人，仓库 \(vm.user.publicRepos) 个")
   27|      0|                        }
   28|      0|                        HStack {
   29|      0|                            ButtonGoGitHubWeb(url: vm.user.htmlUrl, text: "在 GitHub 上访问")
   30|      0|                            if vm.user.location != nil {
   31|      0|                                Text("居住：\(vm.user.location ?? "")").font(.system(.subheadline))
   32|      0|                            }
   33|      0|                        }
   34|      0|                    } // end VStack
   35|      0|                } // end HStack
   36|      0|
   37|      0|                if vm.user.bio != nil {
   38|      0|                    Text("简介：\(vm.user.bio ?? "")")
   39|      0|                }
   40|      0|                HStack {
   41|      0|                    if vm.user.blog != nil {
   42|      0|                        if !vm.user.blog!.isEmpty {
   43|      0|                            Text("博客：\(vm.user.blog ?? "")")
   44|      0|                            ButtonGoGitHubWeb(url: vm.user.blog ?? "", text: "访问")
   45|      0|                        }
   46|      0|                    }
   47|      0|                    if vm.user.twitterUsername != nil {
   48|      0|                        Text("Twitter：")
   49|      0|                        ButtonGoGitHubWeb(url: "https://twitter.com/\(vm.user.twitterUsername ?? "")", text: "@\(vm.user.twitterUsername ?? "")")
   50|      0|                    }
   51|      0|                } // end HStack
   52|      0|            } // end VStack
   53|      0|            Spacer()
   54|      0|        }
   55|      0|        .alert(vm.errMsg, isPresented: $vm.errHint, actions: {})
   56|      0|        .padding(EdgeInsets(top: 20, leading: 10, bottom: 0, trailing: 10))
   57|      0|        .onAppear {
   58|      0|            vm.doing(.inInit)
   59|      0|        }
   60|      0|        .onDisappear(perform: {
   61|      0|            appVM.devsNotis[vm.userName] = 0
   62|      0|            appVM.calculateDevsCountNotis()
   63|      0|        })
   64|      0|        .frame(minWidth: SPC.detailMinWidth)
   65|      0|
   66|      0|        TabView(selection: $tabSelct) {
   67|      0|
   68|      0|            UserEventView(events: vm.events, isShowUserEventLink: isShowUserEventLink, unReadCount: unReadCount)
   69|      0|                .tabItem {
   70|      0|                    Image(systemName: "keyboard")
   71|      0|                    Text("事件")
   72|      0|                }
   73|      0|                .onAppear {
   74|      0|                    // 如果是从列表未读section里来的会检查清理未读
   75|      0|                    vm.doing(.inEvent)
   76|      0|                    if isCleanUnread == true {
   77|      0|                        vm.doing(.clearUnReadEvent)
   78|      0|                        unReadCount = appVM.devsNotis[vm.userName] ?? 0
   79|      0|                        appVM.devsNotis[vm.userName] = SPC.unreadMagicNumber
   80|      0|                        appVM.calculateDevsCountNotis()
   81|      0|                    }
   82|      0|                }
   83|      0|                .tag(1)
   84|      0|            UserEventView(events: vm.receivedEvents, isShowActor: true, isShowUserEventLink: isShowUserEventLink)
   85|      0|                .tabItem {
   86|      0|                    Image(systemName: "keyboard.badge.ellipsis")
   87|      0|                    Text("Ta 接收的事件")
   88|      0|                }
   89|      0|                .onAppear {
   90|      0|                    vm.doing(.inReceivedEvent)
   91|      0|                }
   92|      0|                .tag(2)
   93|      0|        }
   94|      0|        .frame(minWidth: SPC.detailMinWidth)
   95|      0|        Spacer()
   96|      0|
   97|      0|    }
   98|       |}
   99|       |
  100|       |struct UserEventView: View {
  101|       |    var events: [EventModel]
  102|       |    var isShowActor = false
  103|       |    var isShowUserEventLink = true
  104|       |    var unReadCount = 0
  105|      0|    var body: some View {
  106|      0|        List {
  107|      0|            ForEach(Array(events.enumerated()), id: \.0) { i, event in
  108|      0|
  109|      0|                if isShowUserEventLink == true {
  110|      0|                    NavigationLink {
  111|      0|                        UserEventLinkDestination(event: event)
  112|      0|                    } label: {
  113|      0|                        AUserEventLabel(
  114|      0|                            event: event,
  115|      0|                            isShowActor: isShowActor,
  116|      0|                            isUnRead: unReadCount > 0 && i < unReadCount
  117|      0|                        )
  118|      0|                    } // end NavigationLink
  119|      0|                } else {
  120|      0|                    AUserEventLabel(event: event, isShowActor: isShowActor, isUnRead: unReadCount > 0 && i < unReadCount)
  121|      0|                }
  122|      0|                Divider()
  123|      0|            } // end ForEach
  124|      0|        }//  end List
  125|      0|        .id(UUID()) // 优化 commits 有多个时数据变化可能影响的性能。这样做每次更新都产生新的视图，因此无法做动画效果。相当于 UITableView 上的 reloadData()
  126|      0|    } // end body
  127|       |} // end struct
  128|       |
  129|       |// MARK: - 碎视图
  130|       |
  131|       |struct ListCommits: View {
  132|       |    var event: EventModel
  133|      0|    var body: some View {
  134|      0|        ForEach(event.payload.commits ?? [PayloadCommitModel](), id: \.self) { c in
  135|      0|            ButtonGoGitHubWeb(url: "https://github.com/\(event.repo.name)/commit/\(c.sha ?? "")", text: "提交")
  136|      0|            MarkdownView(s: c.message ?? "")
  137|      0|        }
  138|      0|    }
  139|       |}
  140|       |
  141|       |struct UserEventLinkDestination: View {
  142|       |    var event: EventModel
  143|      0|    var body: some View {
  144|      0|        VStack {
  145|      0|            if event.payload.issue?.number != nil {
  146|      0|                IssueView(vm: IssueVM(repoName: event.repo.name, issueNumber: event.payload.issue?.number ?? 0))
  147|      0|            } else {
  148|      0|                RepoView(vm: RepoVM(repoName: event.repo.name), type: .readme, isShowRepoCommitsLink: false, isShowIssuesLink: false)
  149|      0|            }
  150|      0|        }
  151|      0|    }
  152|       |}
  153|       |
  154|       |struct AUserEventLabel: View {
  155|       |    var event: EventModel
  156|       |    var isShowActor: Bool = false
  157|       |    var isUnRead = false
  158|      0|    var body: some View {
  159|      0|        VStack(alignment: .leading) {
  160|      0|            GitHubApiTimeView(timeStr: event.createdAt)
  161|      0|            HStack {
  162|      0|                if isUnRead {
  163|      0|                    Image(systemName: "envelope.badge.fill")
  164|      0|                }
  165|      0|                Group {
  166|      0|                    Text(event.type)
  167|      0|                        .bold()
  168|      0|                    Text(event.payload.action ?? "")
  169|      0|                }
  170|      0|                .foregroundColor(.secondary)
  171|      0|                .font(.footnote)
  172|      0|            }
  173|      0|            ButtonGoGitHubWeb(url: "https://github.com/\(event.repo.name)", text: event.repo.name, bold: true)
  174|      0|            HStack {
  175|      0|                if event.payload.issue?.number != nil {
  176|      0|                    ButtonGoGitHubWeb(url: "https://github.com/\(event.repo.name)/issues/\(String(describing: event.payload.issue?.number ?? 0))", text: "议题")
  177|      0|                }
  178|      0|
  179|      0|                if isShowActor == true {
  180|      0|                    AsyncImageWithPlaceholder(size: .tinySize, url: event.actor.avatarUrl)
  181|      0|
  182|      0|                    Text(event.actor.login).bold()
  183|      0|
  184|      0|                } // end if
  185|      0|
  186|      0|            }
  187|      0|            .padding(EdgeInsets(top: 0, leading: 0, bottom: 5, trailing: 0))
  188|      0|
  189|      0|            if event.payload.issue?.number != nil {
  190|      0|                if event.payload.issue?.title != nil {
  191|      0|                    Text(event.payload.issue?.title ?? "")
  192|      0|                        .font(.system(.title2))
  193|      0|                }
  194|      0|                if event.payload.issue?.body != nil && event.type != "IssueCommentEvent" {
  195|      0|                    MarkdownView(s: event.payload.issue?.body ?? "")
  196|      0|                }
  197|      0|                if event.type == "IssueCommentEvent" && event.payload.comment?.body != nil {
  198|      0|                    MarkdownView(s: event.payload.comment?.body ?? "")
  199|      0|                }
  200|      0|            }
  201|      0|
  202|      0|            if event.payload.commits != nil {
  203|      0|                ListCommits(event: event)
  204|      0|            }
  205|      0|
  206|      0|            if event.payload.pullRequest != nil {
  207|      0|                if event.payload.pullRequest?.title != nil {
  208|      0|                    Text(event.payload.pullRequest?.title ?? "")
  209|      0|                        .font(.system(.title2))
  210|      0|                }
  211|      0|                if event.payload.pullRequest?.body != nil {
  212|      0|                    MarkdownView(s: event.payload.pullRequest?.body ?? "")
  213|      0|                }
  214|      0|            }
  215|      0|
  216|      0|            if event.payload.description != nil {
  217|      0|                MarkdownView(s: event.payload.description ?? "")
  218|      0|            }
  219|      0|        } // end VStack
  220|      0|    }
  221|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/GitHubAPIModel.swift:
    1|       |//
    2|       |//  GitHubAPIModel.swift
    3|       |//  PresentSwiftUI
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/8.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |// MARK: - Readme
   11|       |struct RepoContent: Decodable, Hashable {
   12|       |    var content: String = ""
   13|       |    var encoding: String = ""
   14|       |    var downloadUrl: String = ""
   15|       |    var htmlUrl: String = ""
   16|       |    var name: String = ""
   17|       |    var path: String = ""
   18|       |}
   19|       |
   20|       |// MARK: - IssueComment
   21|       |struct IssueComment: Jsonable {
   22|       |    var id: Int64
   23|       |    var authorAssociation: String
   24|       |    var body: String
   25|       |    var htmlUrl: String
   26|       |    var updatedAt: String
   27|       |    var user: GitUserModel
   28|       |}
   29|       |
   30|       |// MARK: - IssueEvent
   31|       |struct IssueEventModel: Jsonable {
   32|       |    var id: Int64
   33|       |    var actor: GitUserModel
   34|       |    var createdAt: String
   35|       |    var event: String
   36|       |    var issue: IssueModel
   37|       |}
   38|       |
   39|       |// MARK: - Issue
   40|       |struct IssueModel: Jsonable {
   41|       |    var id: Int64 = 0
   42|       |    var number: Int = 0
   43|       |    var title: String = ""
   44|       |    var body: String?
   45|       |    var htmlUrl: String = ""
   46|       |    var updatedAt: String = ""
   47|       |    var comments: Int = 0
   48|     20|    var user: GitUserModel = GitUserModel()
   49|       |}
   50|       |
   51|       |// MARK: - Commit
   52|       |struct CommitModel: Decodable, Hashable {
   53|       |    var sha: String?
   54|       |    var author: CommitAuthorModel?
   55|       |    var commit: CommitCommitModel
   56|       |
   57|       |}
   58|       |extension CommitModel: Identifiable {
   59|      0|    var id: UUID {
   60|      0|        return UUID()
   61|      0|    }
   62|       |}
   63|       |struct CommitAuthorModel: Decodable, Hashable {
   64|       |    var login: String?
   65|       |    var avatarUrl: String?
   66|       |}
   67|       |
   68|       |struct CommitCommitModel: Decodable, Hashable {
   69|       |    var author: CommitCommitAuthor
   70|       |    var message: String?
   71|       |}
   72|       |struct CommitCommitAuthor: Decodable, Hashable {
   73|       |    var date: String
   74|       |    var email: String
   75|       |    var name: String?
   76|       |}
   77|       |
   78|       |// MARK: - Event
   79|       |struct EventModel: Jsonable {
   80|       |    var id: String
   81|       |    var createdAt: String
   82|       |    var type: String
   83|       |    var repo: EventRepoModel
   84|       |    var payload: PayloadModel
   85|       |    var actor: GitUserModel
   86|       |}
   87|       |struct EventRepoModel: Jsonable {
   88|       |    var id: Int64
   89|       |    var name: String
   90|       |}
   91|       |
   92|       |struct PayloadModel: Decodable, Hashable {
   93|       |    var action: String?
   94|       |    var issue: PayloadIssueModel?
   95|       |    var commits: [PayloadCommitModel]?
   96|       |    var description: String?
   97|       |    var pullRequest: PayloadPullRequest?
   98|       |    var comment: PayloadComment?
   99|       |}
  100|       |struct PayloadIssueModel: Jsonable {
  101|       |    var id: Int64
  102|       |    var number: Int
  103|       |    var title: String?
  104|       |    var body: String?
  105|       |
  106|       |}
  107|       |struct PayloadCommitModel: Decodable, Hashable {
  108|       |    var message: String?
  109|       |    var sha: String?
  110|       |}
  111|       |struct PayloadPullRequest: Decodable, Hashable {
  112|       |    var body: String?
  113|       |    var title: String?
  114|       |}
  115|       |struct PayloadComment: Decodable, Hashable {
  116|       |    var body: String?
  117|       |}
  118|       |
  119|       |// MARK: - Repo
  120|       |
  121|       |struct SearchRepoModel: Decodable {
  122|       |    var items: [RepoModel]
  123|       |}
  124|       |
  125|       |struct RepoModel: Jsonable {
  126|       |    var id: Int64 = 0
  127|       |    var name: String = ""
  128|       |    var fullName: String = ""
  129|       |    var description: String?
  130|       |    var stargazersCount: Int = 0
  131|       |    var forks: Int = 0
  132|       |    var openIssues: Int = 0
  133|       |    var language: String?
  134|       |    var htmlUrl: String?
  135|      0|    var owner: GitUserModel = GitUserModel()
  136|       |}
  137|       |
  138|       |// MARK: - User
  139|       |struct UserModel: Jsonable {
  140|       |    var id: Int64 = 0
  141|       |    var login: String = ""
  142|       |    var avatarUrl: String = ""
  143|       |    var bio: String?
  144|       |    var blog: String?
  145|       |//    var company: String = ""
  146|       |    var email: String?
  147|       |    var twitterUsername: String?
  148|       |    var followers: Int = 0
  149|       |//    var following: Int = 0
  150|       |    var htmlUrl: String = ""
  151|       |    var location: String?
  152|       |    var name: String?
  153|       |    var publicGists: Int = 0
  154|       |    var publicRepos: Int = 0
  155|       |}
  156|       |struct UserEmailModel: Decodable {
  157|       |    var email: String
  158|       |    var verified: Bool
  159|       |    var primary: Bool
  160|       |    var visibility: String?
  161|       |}
  162|       |
  163|       |struct GitUserModel: Jsonable {
  164|       |    var id: Int64 = 0
  165|       |    var login: String = ""
  166|       |    var name: String?
  167|       |    var avatarUrl: String = ""
  168|       |}
  169|       |struct GitFoll: Jsonable {
  170|       |    var id: Int64 = 0
  171|       |    var login: String = ""
  172|       |    var name: String?
  173|       |    var avatarUrl: String = ""
  174|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/ListView/ActiveDeveloperListView.swift:
    1|       |//
    2|       |//  ActiveDeveloperListView.swift
    3|       |//  PresentSwiftUI
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/11.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct ActiveDeveloperListView: View {
   11|      0|    @EnvironmentObject var appVM: AppVM
   12|       |    @StateObject var vm: IssueVM
   13|      0|    var body: some View {
   14|      0|        List {
   15|      0|            Section {
   16|      0|                ForEach(vm.cIADs) { ad in
   17|      0|                    ForEach(ad.users) { u in
   18|      0|                        ActiveDeveloperUnreadLinkView(u: u)
   19|      0|                    } // end ForEach
   20|      0|                } // end ForEach
   21|      0|            } header: {
   22|      0|                Text("刚更新的").font(.title)
   23|      0|            }
   24|      0|            ForEach(vm.cIADs) { ad in
   25|      0|                Section {
   26|      0|                    ForEach(ad.users) { u in
   27|      0|                        if (appVM.devsNotis[u.id] ?? 0) > 0 {
   28|      0|
   29|      0|                        } else {
   30|      0|                            NavigationLink(destination: UserView(vm: .init(userName: u.id))) {
   31|      0|                                ActiveDeveloperListLinkView(u: u)
   32|      0|                            }
   33|      0|                        }
   34|      0|                    } // end ForEach
   35|      0|                } header: {
   36|      0|                    Text(ad.name).font(.title)
   37|      0|                } // end Sectioin
   38|      0|            } // end Foreach
   39|      0|        } // end List
   40|      0|        .alert(vm.errMsg, isPresented: $vm.errHint, actions: {})
   41|      0|        .navigationTitle("🤔 开发者")
   42|      0|        .onAppear {
   43|      0|            vm.doing(.ciads)
   44|      0|        }
   45|      0|
   46|      0|    }
   47|       |}
   48|       |
   49|       |// MARK: - 碎视图
   50|       |
   51|       |struct ActiveDeveloperUnreadLinkView: View {
   52|      0|    @EnvironmentObject var appVM: AppVM
   53|       |    var u: ADeveloperModel
   54|      0|    var body: some View {
   55|      0|        if appVM.devsNotis[u.id] ?? 0 > 0 {
   56|      0|            NavigationLink(destination: UserView(vm: .init(userName: u.id), isCleanUnread: true)) {
   57|      0|                ActiveDeveloperListLinkView(u: u)
   58|      0|                    .badge(appVM.devsNotis[u.id] == SPC.unreadMagicNumber ? 0 : appVM.devsNotis[u.id] ?? 0)
   59|      0|            }
   60|      0|        }
   61|      0|    }
   62|       |}
   63|       |
   64|       |struct ActiveDeveloperListLinkView: View {
   65|       |    var u: ADeveloperModel
   66|      0|    var body: some View {
   67|      0|        VStack(alignment: .leading, spacing: 1) {
   68|      0|            Text(u.id)
   69|      0|                .bold()
   70|      0|            if u.des != nil {
   71|      0|                Text("\((u.des != nil) ? "\(u.des!)" : "")")
   72|      0|                    .font(.subheadline)
   73|      0|                    .foregroundColor(.secondary)
   74|      0|            }
   75|      0|        }
   76|      0|    }
   77|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/ListView/ExploreRepoListView.swift:
    1|       |//
    2|       |//  ExploreRepoListView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/16.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |import CodeEditorView
   10|       |
   11|       |struct ExploreRepoListView: View {
   12|    168|    @EnvironmentObject var appVM: AppVM
   13|       |    var showAsGroup: Bool = false
   14|       |    var isArchive = false
   15|      0|    var body: some View {
   16|      0|        List {
   17|      0|            if SPC.gitHubAccessToken.isEmpty == false && showAsGroup == false {
   18|      0|                Section {
   19|      0|                    ForEach(isArchive ? appVM.archiveRepos : appVM.exps) { er in
   20|      0|                        ForEach(er.repos) { r in
   21|      0|                            ExpListUnreadLinkView(r: r)
   22|      0|                        }
   23|      0|                    }
   24|      0|                } header: {
   25|      0|                    Text("刚更新的").font(.title3)
   26|      0|                }
   27|      0|
   28|      0|            }
   29|      0|
   30|      0|            // end Section
   31|      0|            ForEach(isArchive ? appVM.archiveRepos : appVM.exps) { er in
   32|      0|                if SPC.gitHubAccessToken.isEmpty == false && showAsGroup == false {
   33|      0|//                    Section {
   34|      0|//                        ForEach(er.repos) { r in
   35|      0|//                            if (appVM.expNotis[r.id]?.unRead ?? 0) > 0 {
   36|      0|//
   37|      0|//                            } else {
   38|      0|//                                NavigationLink(destination: RepoView(vm: RepoVM(repoName: r.id))) {
   39|      0|//                                    ExpListLinkView(r: r)
   40|      0|//                                }
   41|      0|//                            } // end if
   42|      0|//
   43|      0|//                        }
   44|      0|//                    } header: {
   45|      0|//                        Text(er.name).font(.title3)
   46|      0|//                    }
   47|      0|                } else {
   48|      0|                    DisclosureGroupLikeButton {
   49|      0|                        ForEach(er.repos) { r in
   50|      0|                            if SPC.gitHubAccessToken.isEmpty == false {
   51|      0|                                NavigationLink(destination: RepoView(vm: RepoVM(repoName: r.id))) {
   52|      0|                                    ExpListLinkView(r: r)
   53|      0|                                }
   54|      0|                            } else {
   55|      0|                                NavigationLink(destination: RepoWebView(urlStr: SPC.githubHost + r.id)) {
   56|      0|                                    ExpListLinkView(r: r)
   57|      0|                                }
   58|      0|                            }
   59|      0|                        } // end ForEach
   60|      0|                    } label: {
   61|      0|                        HStack {
   62|      0|                            Text(er.name).font(.title3)
   63|      0|                            Spacer()
   64|      0|                        }
   65|      0|                        .background(
   66|      0|                            // 扩大可选面积
   67|      0|                            RoundedRectangle(cornerRadius: 1)
   68|      0|                                .fill(Color.secondary.opacity(0.0001))
   69|      0|                        )
   70|      0|                    }
   71|      0|                    .padding(EdgeInsets(top: 2, leading: 0, bottom: 2, trailing: 0))
   72|      0|                } // end if token
   73|      0|
   74|      0|            } // end ForEach
   75|      0|        } // end List
   76|      0|        .navigationTitle(showAsGroup == false ? "🥷🏻 库动态" : "👾 探索库" )
   77|      0|        .onAppear {
   78|      0|            if isArchive {
   79|      0|                appVM.loadArchiveRepos()
   80|      0|            } else {
   81|      0|                appVM.loadExpFromServer()
   82|      0|            }
   83|      0|            
   84|      0|            
   85|      0|        }
   86|      0|        .onDisappear {
   87|      0|            appVM.updateWebLink(s: "")
   88|      0|        }
   89|      0|    }
   90|       |}
   91|       |
   92|       |// MARK: - 碎视图
   93|       |struct ExpListUnreadLinkView: View {
   94|      0|    @EnvironmentObject var appVM: AppVM
   95|       |    var r: ARepoModel
   96|      0|    var body: some View {
   97|      0|        if appVM.expNotis[r.id]?.unRead ?? 0 > 0 {
   98|      0|            NavigationLink {
   99|      0|                RepoView(vm: RepoVM(repoName: r.id), isCleanExpUnread: true)
  100|      0|            } label: {
  101|      0|                ExpListLinkView(r: r)
  102|      0|                    .badge(appVM.expNotis[r.id]?.unRead == SPC.unreadMagicNumber ? 0 : appVM.expNotis[r.id]?.unRead ?? 0)
  103|      0|            } // end NavigationLink
  104|      0|        } // end if
  105|      0|    } // end body
  106|       |}
  107|       |
  108|       |struct ExpListLinkView: View {
  109|      0|    @EnvironmentObject var appVM: AppVM
  110|       |    var r: ARepoModel
  111|      0|    var rIdArr: [String] {
  112|      0|        r.id.components(separatedBy: "/")
  113|      0|    }
  114|      0|    var body: some View {
  115|      0|        VStack(alignment: .leading, spacing: 2) {
  116|      0|            HStack(spacing:1) {
  117|      0|                Text(rIdArr[0])
  118|      0|                Text("/")
  119|      0|            }
  120|      0|            .font(.subheadline)
  121|      0|            .foregroundColor(.secondary)
  122|      0|            Text(rIdArr[1])
  123|      0|                .bold()
  124|      0|            if r.des != nil {
  125|      0|                Text("\((r.des != nil) ? "\(r.des!)" : "")")
  126|      0|                    .font(.subheadline)
  127|      0|                    .foregroundColor(.secondary)
  128|      0|            }
  129|      0|            if appVM.expNotis[r.id]?.stargazersCount ?? 0 > 0 {
  130|      0|                HStack {
  131|      0|                    Image(systemName: "star.fill")
  132|      0|                    Text("\(appVM.expNotis[r.id]?.stargazersCount ?? 0)")
  133|      0|                    Image(systemName: "captions.bubble")
  134|      0|                    Text("\(appVM.expNotis[r.id]?.openIssues ?? 0)")
  135|      0|
  136|      0|                }
  137|      0|                .font(.footnote)
  138|      0|
  139|      0|            }
  140|      0|            if appVM.expNotis[r.id]?.language.isEmpty == false {
  141|      0|                HStack {
  142|      0|                    Image(systemName: "globe.asia.australia")
  143|      0|                    Text(appVM.expNotis[r.id]?.language ?? "")
  144|      0|                }
  145|      0|                .font(.footnote)
  146|      0|            }
  147|      0|
  148|      0|            if appVM.expNotis[r.id]?.description.isEmpty == false {
  149|      0|                Text(appVM.expNotis[r.id]?.description ?? "")
  150|      0|                    .font(.footnote)
  151|      0|                    .foregroundColor(.secondary)
  152|      0|            }
  153|      0|        } // end VStack
  154|      0|
  155|      0|    } // end body
  156|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/ListView/IssuesListFromCustomView.swift:
    1|       |//
    2|       |//  IssuesListFromCustom.swift
    3|       |//  PresentSwiftUI
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/15.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct IssuesListFromCustomView: View {
   11|    598|    @EnvironmentObject var appVM: AppVM
   12|       |    @StateObject var vm: IssueVM
   13|    178|    var body: some View {
   14|    178|        List {
   15|    976|            ForEach(vm.customIssues) { ci in
   16|    976|                Section {
   17|  3.07k|                    ForEach(ci.issues) { i in
   18|  3.07k|                        NavigationLink {
   19|  3.07k|                            GuideView(number: i.number, title: i.title)
   20|  3.07k|                        } label: {
   21|  3.07k|                            Text(i.title)
   22|  3.07k|                                .bold()
   23|  3.07k|                        }
   24|  3.07k|                    }
   25|    976|                } header: {
   26|    976|                    Text(ci.name).font(.title)
   27|    976|                }
   28|    976|
   29|    976|            }
   30|    178|        }
   31|    178|        .alert(vm.errMsg, isPresented: $vm.errHint, actions: {})
   32|    178|        .onAppear {
   33|     40|            vm.doing(.customIssues)
   34|     40|        }
   35|    178|        .onDisappear {
   36|     40|            appVM.updateWebLink(s: "")
   37|     40|        }
   38|    178|    }
   39|       |}
   40|       |
   41|       |struct CustomIssuesModel: Identifiable, Decodable, Hashable {
   42|       |    var id: Int64
   43|       |    var name: String
   44|       |    var issues: [CustomIssue]
   45|       |}
   46|       |
   47|       |struct CustomIssue: Identifiable, Decodable, Hashable {
   48|       |    var id: Int64
   49|       |    var title: String
   50|       |    var number: Int
   51|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/Network/APIRequest.swift:
    1|       |//
    2|       |//  NetRequest.swift
    3|       |//  PresentSwiftUI
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/8.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |import Combine
   10|       |
   11|       |// MARK: - API Request Fundation
   12|       |
   13|       |protocol APIReqType {
   14|       |    associatedtype Res: Decodable
   15|       |    var path: String { get }
   16|       |    var qItems: [URLQueryItem]? { get }
   17|       |}
   18|       |
   19|       |protocol APIVMable: ObservableObject {
   20|       |    associatedtype ActionType
   21|       |    func doing(_ somethinglike: ActionType)
   22|       |}
   23|       |
   24|       |protocol APISevType {
   25|       |    func response<Request>(from req: Request) -> AnyPublisher<Request.Res, APISevError> where Request: APIReqType
   26|       |}
   27|       |
   28|       |final class APISev: APISevType {
   29|       |    private let rootUrl: URL
   30|       |
   31|     22|    init(rootUrl: URL = URL(string: "https://api.github.com")!) {
   32|     22|        self.rootUrl = rootUrl
   33|     22|    }
   34|       |
   35|      0|    func response<Request>(from req: Request) -> AnyPublisher<Request.Res, APISevError> where Request : APIReqType {
   36|      0|        let path = URL(string: req.path, relativeTo: rootUrl)!
   37|      0|        var comp = URLComponents(url: path, resolvingAgainstBaseURL: true)!
   38|      0|        comp.queryItems = req.qItems
   39|      0|//        print(comp.url?.description ?? "url wrong")
   40|      0|        var req = URLRequest(url: comp.url!)
   41|      0|
   42|      0|        // token 处理
   43|      0|        // TODO: 支持 OAuth
   44|      0|        // TODO: 访问受限后会crash，异常待处理
   45|      0|        req.addValue("token \(SPC.gitHubAccessToken)", forHTTPHeaderField: "Authorization")
   46|      0|
   47|      0|//        print(req.allHTTPHeaderFields!)
   48|      0|        let de = JSONDecoder()
   49|      0|        de.keyDecodingStrategy = .convertFromSnakeCase
   50|      0|        let sch = DispatchQueue(label: "GitHub API Queue", qos: .default, attributes: .concurrent)
   51|      0|        return URLSession.shared.dataTaskPublisher(for: req)
   52|      0|            .retry(3)
   53|      0|            .subscribe(on: sch)
   54|      0|            .receive(on: sch)
   55|      0|            .map { data, _ in
   56|      0|//                print(String(decoding: data, as: UTF8.self))
   57|      0|//                print(res.description)
   58|      0|                // 打印api访问额度
   59|      0|//                let hres = res as! HTTPURLResponse
   60|      0|//                print(hres.value(forHTTPHeaderField: "x-ratelimit-remaining") ?? "none")
   61|      0|                return data
   62|      0|            }
   63|      0|            .mapError { _ in
   64|      0|                APISevError.resError
   65|      0|            }
   66|      0|            .decode(type: Request.Res.self, decoder: de)
   67|      0|            .mapError { _ in
   68|      0|                APISevError.parseError
   69|      0|            }
   70|      0|            .receive(on: RunLoop.main)
   71|      0|            .eraseToAnyPublisher()
   72|      0|    }
   73|       |}
   74|       |
   75|       |enum APISevError: Error {
   76|       |    case resError
   77|       |    case parseError
   78|       |
   79|      0|    var message: String {
   80|      0|        switch self {
   81|      0|        case .resError:
   82|      0|            return "网络无法访问"
   83|      0|        case .parseError:
   84|      0|            return "网络出错"
   85|      0|        }
   86|      0|    }
   87|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/Network/CCYGitHubAPI.swift:
    1|       |//
    2|       |//  CCYGitHubAPI.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/16.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |import SwiftUI
   10|       |
   11|       |enum Github {}
   12|       |
   13|       |// MARK: - /repos/{reponame}
   14|       |extension Github {
   15|      0|    static func repos(_ name: String) -> Repos {
   16|      0|        Repos(path: "/repos/\(name)")
   17|      0|    }
   18|       |    struct Repos {
   19|       |        let path: String
   20|      0|        var get: Req<RepoModel> {
   21|      0|            .get(path)
   22|      0|        }
   23|       |    }
   24|       |}
   25|       |// MARK: - /repos/{reponame}/issues/{issuenumber}
   26|       |extension Github.Repos {
   27|      0|    func issues(_ number: Int) -> Issues {
   28|      0|        Issues(path: path + "/issues/\(number)")
   29|      0|    }
   30|       |    struct Issues {
   31|       |        let path: String
   32|      0|        var get: Req<IssueModel> {
   33|      0|            .get(path)
   34|      0|        }
   35|       |    }
   36|       |}
   37|       |// MARK: - /repos/{reponame}/commits
   38|       |extension Github.Repos {
   39|      0|    var commits: Commits {
   40|      0|        Commits(path: path + "/commits", query: [("per_page", "100")])
   41|      0|    }
   42|       |
   43|       |    struct Commits {
   44|       |        let path: String
   45|       |        let query: [(String, String?)]?
   46|      0|        var get: Req<[CommitModel]> {
   47|      0|            .get(path, query: query)
   48|      0|        }
   49|       |    }
   50|       |}
   51|       |
   52|       |// MARK: - /user
   53|       |extension Github {
   54|      0|    static var user: User {
   55|      0|        User()
   56|      0|    }
   57|       |    struct User {
   58|       |        let path: String = "/user"
   59|      0|        var get: Req<UserModel> {
   60|      0|            .get(path)
   61|      0|        }
   62|       |    }
   63|       |}
   64|       |// MARK: - /user/following
   65|       |extension Github.User {
   66|      0|    var following: Following {
   67|      0|        Following()
   68|      0|    }
   69|       |    struct Following {
   70|       |        let path: String = "/user/following"
   71|      0|        var get: Req<[GitUserModel]> {
   72|      0|            .get(path)
   73|      0|        }
   74|       |    }
   75|       |}
   76|       |// MARK: - /users/{username}
   77|       |extension Github {
   78|      0|    static func users(_ name: String) -> Users {
   79|      0|        Users(path: "/users/\(name)")
   80|      0|    }
   81|       |    struct Users {
   82|       |        let path: String
   83|      0|        var get: Req<UserModel> {
   84|      0|            .get(path)
   85|      0|        }
   86|       |    }
   87|       |}
   88|       |// MARK: - /users/{username}/followers
   89|       |extension Github.Users {
   90|      0|    var followers: Followers {
   91|      0|        Followers(path: path + "/follower")
   92|      0|    }
   93|       |    struct Followers {
   94|       |        let path: String
   95|      0|        var get: Req<[GitUserModel]> {
   96|      0|            .get(path)
   97|      0|        }
   98|       |    }
   99|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/Network/CCYRSSReq.swift:
    1|       |//
    2|       |//  CCYReq.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/20.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|     20|func RSSReq(_ urlStr: String) async throws -> String? {
   11|     20|    guard let url = URL(string: urlStr) else {
   12|      0|        fatalError("wrong url")
   13|     20|    }
   14|     20|    let req = URLRequest(url: url)
   15|     20|    let (data, res) = try await URLSession.shared.data(for: req)
   16|     20|    guard (res as? HTTPURLResponse)?.statusCode == 200 else {
   17|      0|        return ""
   18|     20|    }
   19|     20|    let dataStr = String(data: data, encoding: .utf8)
   20|     20|    return dataStr
   21|     20|}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/VM/IssueVM.swift:
    1|       |//
    2|       |//  IssueVM.swift
    3|       |//  PresentSwiftUI
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/15.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |import Combine
   10|       |
   11|       |final class IssueVM: APIVMable {
   12|     20|    private var cancellables: [AnyCancellable] = []
   13|       |    public let repoName: String
   14|       |    public let issueNumber: Int
   15|       |    public let guideName: String
   16|       |    @Published private(set) var issue: IssueModel
   17|       |    @Published private(set) var comments: [IssueComment]
   18|       |    @Published private(set) var customIssues: [CustomIssuesModel]
   19|       |    @Published private(set) var cIADs: [SPActiveDevelopersModel] // 开发者动态
   20|       |    @Published var errHint = false
   21|       |    @Published var errMsg = ""
   22|       |
   23|       |    // MARK: - APISev
   24|       |    private let apiSev: APISev
   25|       |
   26|     20|    private let errSj = PassthroughSubject<APISevError, Never>()
   27|       |
   28|     20|    private let apIssueSj = PassthroughSubject<Void, Never>()
   29|     20|    private let apCommentsSj = PassthroughSubject<Void, Never>()
   30|       |
   31|     20|    private let resIssueSj = PassthroughSubject<IssueModel, Never>()
   32|     20|    private let resCommetsSj = PassthroughSubject<[IssueComment], Never>()
   33|       |
   34|       |    enum IssueActionType {
   35|       |        case inInit, customIssues, ciads, update
   36|       |    }
   37|       |    typealias ActionType = IssueActionType // 可在定义doing函数时，通过参数类型指定，类型推导出来
   38|     40|    func doing(_ somethinglike: IssueActionType) {
   39|     40|        switch somethinglike {
   40|     40|        case .inInit: // 初始化
   41|      0|            apIssueSj.send(())
   42|      0|            apCommentsSj.send(())
   43|     40|        case .customIssues: // 内容
   44|     40|            customIssues = loadBundleJSONFile(guideName + ".json")
   45|     40|        case .ciads: // 开发者动态
   46|      0|            cIADs = loadBundleJSONFile("developers.json")
   47|     40|        case .update: // 更新
   48|      0|            apIssueSj.send(())
   49|      0|            apCommentsSj.send(())
   50|     40|        }
   51|     40|    }
   52|       |
   53|     20|    init(repoName: String = "", issueNumber: Int = 0, guideName: String = "") {
   54|     20|        self.repoName = repoName
   55|     20|        self.issueNumber = issueNumber
   56|     20|        self.guideName = guideName
   57|     20|        self.apiSev = APISev()
   58|     20|        self.issue = IssueModel()
   59|     20|        self.comments = [IssueComment]()
   60|     20|        self.customIssues = [CustomIssuesModel]()
   61|     20|        self.cIADs = [SPActiveDevelopersModel]()
   62|     20|
   63|     20|        // MARK: - 议题的信息获取
   64|     20|        let reqIssue = IssueRequest(repoName: repoName, issueNumber: issueNumber)
   65|     20|        let resIssueSm = apIssueSj
   66|     20|            .flatMap { [apiSev] in
   67|      0|                apiSev.response(from: reqIssue)
   68|      0|                    .catch { [weak self] error -> Empty<IssueModel, Never> in
   69|      0|                        self?.errSj.send(error)
   70|      0|                        return .init()
   71|      0|                    }
   72|      0|            }
   73|     20|            .share()
   74|     20|            .subscribe(resIssueSj)
   75|     20|        let repIssueSm = resIssueSj
   76|     20|            .assign(to: \.issue, on: self)
   77|     20|
   78|     20|        // MARK: - 议题的留言获取
   79|     20|        let reqComments = IssueCommentsRequest(repoName: repoName, issueNumber: issueNumber)
   80|     20|        let resCommentsSm = apCommentsSj
   81|     20|            .flatMap { [apiSev] in
   82|      0|                apiSev.response(from: reqComments)
   83|      0|                    .catch { [weak self] error -> Empty<[IssueComment], Never> in
   84|      0|                        self?.errSj.send(error)
   85|      0|                        return .init()
   86|      0|                    }
   87|      0|            }
   88|     20|            .share()
   89|     20|            .subscribe(resCommetsSj)
   90|     20|        let repCommentsSm = resCommetsSj
   91|     20|            .assign(to: \.comments, on: self)
   92|     20|
   93|     20|        // MARK: - 错误
   94|     20|        let errMsgSm = errSj
   95|     20|            .map { err -> String in
   96|      0|                err.message
   97|      0|            }
   98|     20|            .assign(to: \.errMsg, on: self)
   99|     20|        let errHintSm = errSj
  100|     20|            .map { _ in
  101|      0|                true
  102|      0|            }
  103|     20|            .assign(to: \.errHint, on: self)
  104|     20|
  105|     20|        cancellables += [
  106|     20|            resIssueSm, repIssueSm,
  107|     20|            resCommentsSm, repCommentsSm,
  108|     20|            errMsgSm, errHintSm
  109|     20|        ]
  110|     20|    }
  111|       |}
  112|       |
  113|       |struct IssueCommentsRequest: APIReqType {
  114|       |    typealias Res = [IssueComment]
  115|       |    var repoName: String
  116|       |    var issueNumber: Int
  117|      0|    var path: String {
  118|      0|        return "/repos/\(repoName)/issues/\(issueNumber)/comments"
  119|      0|    }
  120|      0|    var qItems: [URLQueryItem]? {
  121|      0|        return [
  122|      0|            .init(name: "per_page", value: "100")
  123|      0|        ]
  124|      0|    }
  125|       |}
  126|       |
  127|       |struct IssueRequest: APIReqType {
  128|       |    typealias Res = IssueModel
  129|       |    var repoName: String
  130|       |    var issueNumber: Int
  131|      0|    var path: String {
  132|      0|        return "/repos/\(repoName)/issues/\(issueNumber)"
  133|      0|    }
  134|      0|    var qItems: [URLQueryItem]? {
  135|      0|        return nil
  136|      0|    }
  137|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/VM/RepoVM.swift:
    1|       |//
    2|       |//  RepoVM.swift
    3|       |//  PresentSwiftUI
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/11.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |import Combine
   10|       |
   11|       |final class RepoVM: APIVMable {
   12|      0|    private var cancellables: [AnyCancellable] = []
   13|       |
   14|       |    public let repoName: String
   15|       |
   16|       |    @Published private(set) var repo: RepoModel
   17|       |    @Published private(set) var commits: [CommitModel]
   18|       |    @Published private(set) var issueEvents: [IssueEventModel]
   19|       |    @Published private(set) var issues: [IssueModel]
   20|       |    @Published private(set) var readme: RepoContent
   21|       |
   22|       |    @Published var errHint = false
   23|       |    @Published var errMsg = ""
   24|      0|    private let errSj = PassthroughSubject<APISevError, Never>()
   25|       |
   26|       |    private let apiSev: APISev
   27|       |
   28|      0|    private let apRepoSj = PassthroughSubject<Void, Never>()
   29|      0|    private let apCommitsSj = PassthroughSubject<Void, Never>()
   30|       |
   31|      0|    private let apIssueEventsSj = PassthroughSubject<Void, Never>()
   32|      0|    private let apIssuesSj = PassthroughSubject<Void, Never>()
   33|      0|    private let apReadmeSj = PassthroughSubject<Void, Never>()
   34|       |
   35|      0|    private let resRepoSj = PassthroughSubject<RepoModel, Never>()
   36|      0|    private let resCommitsSj = PassthroughSubject<[CommitModel], Never>()
   37|      0|    private let resNotiCommitsSj = PassthroughSubject<[CommitModel], Never>()
   38|      0|    private let resIssueEventsSj = PassthroughSubject<[IssueEventModel], Never>()
   39|      0|    private let resIssuesSj = PassthroughSubject<[IssueModel], Never>()
   40|      0|    private let resReadmeSj = PassthroughSubject<RepoContent, Never>()
   41|       |
   42|       |    enum RepoActionType {
   43|       |        case inInit, inCommit, inInitJustRepo, inIssueEvents, inIssues, inReadme, clearExpUnReadCommit
   44|       |    }
   45|      0|    func doing(_ somethinglike: RepoActionType) {
   46|      0|        switch somethinglike {
   47|      0|        case .inInit:
   48|      0|            apRepoSj.send(())
   49|      0|        case .inCommit:
   50|      0|            apCommitsSj.send(())
   51|      0|        case .inInitJustRepo:
   52|      0|            apRepoSj.send(())
   53|      0|        case .inIssueEvents:
   54|      0|            apIssueEventsSj.send(())
   55|      0|        case .inIssues:
   56|      0|            apIssuesSj.send(())
   57|      0|        case .inReadme:
   58|      0|            apReadmeSj.send(())
   59|      0|        case .clearExpUnReadCommit:
   60|      0|            clearExpUnReadCommit()
   61|      0|        }
   62|      0|    }
   63|       |
   64|      0|    func clearExpUnReadCommit() {
   65|      0|        do {
   66|      0|            _ = try RepoStoreDataHelper.updateUnread(name: self.repoName, unread: 0)
   67|      0|        } catch {}
   68|      0|    }
   69|       |
   70|      0|    init(repoName: String) {
   71|      0|        self.repoName = repoName
   72|      0|        self.apiSev = APISev()
   73|      0|        self.repo = RepoModel()
   74|      0|        self.commits = [CommitModel]()
   75|      0|        self.issueEvents = [IssueEventModel]()
   76|      0|        self.issues = [IssueModel]()
   77|      0|        self.readme = RepoContent()
   78|      0|
   79|      0|        // MARK: - 仓库信息获取
   80|      0|        let reqRepo = RepoRequest(repoName: repoName)
   81|      0|        let resRepoSm = apRepoSj
   82|      0|            .flatMap { [apiSev] in
   83|      0|                apiSev.response(from: reqRepo)
   84|      0|                    .catch { [weak self] error -> Empty<RepoModel, Never> in
   85|      0|                        self?.errSj.send(error)
   86|      0|                        return .init()
   87|      0|                    }
   88|      0|            }
   89|      0|            .share()
   90|      0|            .subscribe(resRepoSj)
   91|      0|        let repRepoSm = resRepoSj
   92|      0|            .assign(to: \.repo, on: self)
   93|      0|
   94|      0|        // MARK: - 获取Commit
   95|      0|        let reqCommits = CommitsRequest(repoName: repoName)
   96|      0|        let resCommitsSm = apCommitsSj
   97|      0|            .flatMap { [apiSev] in
   98|      0|                apiSev.response(from: reqCommits)
   99|      0|                    .catch { [weak self] error -> Empty<[CommitModel], Never> in
  100|      0|                        self?.errSj.send(error)
  101|      0|                        return .init()
  102|      0|                    }
  103|      0|            }
  104|      0|            .share()
  105|      0|            .subscribe(resCommitsSj)
  106|      0|        let repCommitsSm = resCommitsSj
  107|      0|            .assign(to: \.commits, on: self)
  108|      0|
  109|      0|        // MARK: - 获取议题事件
  110|      0|        let reqIssueEvents = IssueEventsRequest(repoName: repoName)
  111|      0|        let resIssueEventsSm = apIssueEventsSj
  112|      0|            .flatMap { [apiSev] in
  113|      0|                apiSev.response(from: reqIssueEvents)
  114|      0|                    .catch { [weak self] error -> Empty<[IssueEventModel], Never> in
  115|      0|                        self?.errSj.send(error)
  116|      0|                        return .init()
  117|      0|                    }
  118|      0|            }
  119|      0|            .share()
  120|      0|            .subscribe(resIssueEventsSj)
  121|      0|        let repIssueEventsSm = resIssueEventsSj
  122|      0|            .assign(to: \.issueEvents, on: self)
  123|      0|
  124|      0|        // MARK: - 获取议题列表
  125|      0|        let reqIssues = IssuesRequest(repoName: repoName)
  126|      0|        let resIssuesSm = apIssuesSj
  127|      0|            .flatMap { [apiSev] in
  128|      0|                apiSev.response(from: reqIssues)
  129|      0|                    .catch { [weak self] error -> Empty<[IssueModel], Never> in
  130|      0|                        self?.errSj.send(error)
  131|      0|                        return .init()
  132|      0|                    }
  133|      0|            }
  134|      0|            .share()
  135|      0|            .subscribe(resIssuesSj)
  136|      0|        let repIssuesSm = resIssuesSj
  137|      0|            .assign(to: \.issues, on: self)
  138|      0|
  139|      0|        // MARK: - 获取 Readme
  140|      0|        let reqReadme = ReadmeRequest(repoName: repoName)
  141|      0|        let resReadmeSm = apReadmeSj
  142|      0|            .flatMap { [apiSev] in
  143|      0|                apiSev.response(from: reqReadme)
  144|      0|                    .catch { [weak self] error -> Empty<RepoContent, Never> in
  145|      0|                        self?.errSj.send(error)
  146|      0|                        return .init()
  147|      0|                    }
  148|      0|            }
  149|      0|            .share()
  150|      0|            .subscribe(resReadmeSj)
  151|      0|        let repReadmeSm = resReadmeSj
  152|      0|            .assign(to: \.readme, on: self)
  153|      0|
  154|      0|        // MARK: - 错误
  155|      0|        let errMsgSm = errSj
  156|      0|            .map { err -> String in
  157|      0|                err.message
  158|      0|            }
  159|      0|            .assign(to: \.errMsg, on: self)
  160|      0|        let errHintSm = errSj
  161|      0|            .map { _ in
  162|      0|                true
  163|      0|            }
  164|      0|            .assign(to: \.errHint, on: self)
  165|      0|
  166|      0|        cancellables += [
  167|      0|            resRepoSm, repRepoSm,
  168|      0|            resCommitsSm, repCommitsSm,
  169|      0|            resIssueEventsSm, repIssueEventsSm,
  170|      0|            resIssuesSm, repIssuesSm,
  171|      0|            resReadmeSm, repReadmeSm,
  172|      0|            errMsgSm, errHintSm
  173|      0|        ]
  174|      0|    }
  175|       |
  176|       |}
  177|       |
  178|       |struct ReadmeRequest: APIReqType {
  179|       |    typealias Res = RepoContent
  180|       |    var repoName: String
  181|      0|    var path: String {
  182|      0|        return "repos/\(repoName)/readme"
  183|      0|    }
  184|      0|    var qItems: [URLQueryItem]? {
  185|      0|        return []
  186|      0|    }
  187|       |}
  188|       |
  189|       |struct IssuesRequest: APIReqType {
  190|       |    typealias Res = [IssueModel]
  191|       |    var repoName: String
  192|      0|    var path: String {
  193|      0|        return "repos/\(repoName)/issues"
  194|      0|    }
  195|      0|    var qItems: [URLQueryItem]? {
  196|      0|        return [
  197|      0|//            .init(name: "per_page", value: "100")
  198|      0|        ]
  199|      0|    }
  200|       |}
  201|       |
  202|       |struct IssueEventsRequest: APIReqType {
  203|       |    typealias Res = [IssueEventModel]
  204|       |    var repoName: String
  205|      0|    var path: String {
  206|      0|        return "repos/\(repoName)/issues/events"
  207|      0|    }
  208|      0|    var qItems: [URLQueryItem]? {
  209|      0|        return [
  210|      0|            .init(name: "per_page", value: "100")
  211|      0|        ]
  212|      0|    }
  213|       |}
  214|       |
  215|       |struct CommitsRequest: APIReqType {
  216|       |    typealias Res = [CommitModel]
  217|       |    var repoName: String
  218|      0|    var path: String {
  219|      0|        return "repos/\(repoName)/commits"
  220|      0|    }
  221|      0|    var qItems: [URLQueryItem]? {
  222|      0|        return [
  223|      0|            .init(name: "per_page", value: "100")
  224|      0|        ]
  225|      0|    }
  226|       |}
  227|       |
  228|       |struct RepoRequest: APIReqType {
  229|       |    typealias Res = RepoModel
  230|       |    var repoName: String
  231|      0|    var path: String {
  232|      0|        return "/repos/\(repoName)"
  233|      0|    }
  234|      0|    var qItems: [URLQueryItem]? {
  235|      0|        return nil
  236|      0|    }
  237|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/GitHubAPI/VM/UserVM.swift:
    1|       |//
    2|       |//  UserVM.swift
    3|       |//  PresentSwiftUI
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/10.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |import Combine
   10|       |import AppKit
   11|       |
   12|       |final class UserVM: APIVMable {
   13|      0|    private var cancellables: [AnyCancellable] = []
   14|       |
   15|       |    public let userName: String
   16|       |
   17|       |    @Published private(set) var user: UserModel
   18|       |    @Published private(set) var events: [EventModel]
   19|       |    @Published private(set) var receivedEvents: [EventModel]
   20|       |
   21|       |    @Published var errHint = false
   22|       |    @Published var errMsg = ""
   23|      0|    private let errSj = PassthroughSubject<APISevError, Never>()
   24|       |
   25|       |    private let apiSev: APISev
   26|       |
   27|      0|    private let appearUserSubject = PassthroughSubject<Void, Never>()
   28|      0|    private let appearEventsSubject = PassthroughSubject<Void, Never>()
   29|      0|    private let appearNotiEventsSubject = PassthroughSubject<Void, Never>()
   30|      0|    private let appearReceivedEventsSubject = PassthroughSubject<Void, Never>()
   31|       |
   32|      0|    private let resUserSubject = PassthroughSubject<UserModel, Never>()
   33|      0|    private let resEventsSubject = PassthroughSubject<[EventModel], Never>()
   34|      0|    private let resNotiEventSubject = PassthroughSubject<[EventModel], Never>()
   35|      0|    private let resReceivedEventsSubject = PassthroughSubject<[EventModel], Never>()
   36|       |
   37|       |    enum UserActionType {
   38|       |        case inInit, inEvent, inReceivedEvent, notiEvent, clearUnReadEvent
   39|       |    }
   40|      0|    func doing(_ somethinglike: UserActionType) {
   41|      0|        switch somethinglike {
   42|      0|        case .inInit:
   43|      0|            appearUserSubject.send(())
   44|      0|        case .inEvent:
   45|      0|            appearEventsSubject.send(())
   46|      0|        case .inReceivedEvent:
   47|      0|            appearReceivedEventsSubject.send(())
   48|      0|        case .notiEvent:
   49|      0|            appearNotiEventsSubject.send(())
   50|      0|        case .clearUnReadEvent:
   51|      0|            clearUnReadEvent()
   52|      0|        }
   53|      0|    }
   54|       |
   55|      0|    func clearUnReadEvent() {
   56|      0|        do {
   57|      0|            if let f = try DevsNotiDataHelper.find(sLogin: userName) {
   58|      0|                do {
   59|      0|                    _ = try DevsNotiDataHelper.update(i: DBDevNoti(login: f.login, lastReadId: f.lastReadId, unRead: 0))
   60|      0|                } catch {}
   61|      0|            }
   62|      0|        } catch {}
   63|      0|    }
   64|       |
   65|      0|    init(userName: String) {
   66|      0|        self.userName = userName
   67|      0|        self.apiSev = APISev()
   68|      0|        self.user = UserModel()
   69|      0|        self.events = [EventModel]()
   70|      0|        self.receivedEvents = [EventModel]()
   71|      0|
   72|      0|        // MARK: - 用户信息获取
   73|      0|        let reqUser = UserRequest(userName: userName)
   74|      0|        let resUserStream = appearUserSubject
   75|      0|            .flatMap { [apiSev] in
   76|      0|                apiSev.response(from: reqUser)
   77|      0|                    .catch { [weak self] error -> Empty<UserModel, Never> in
   78|      0|                        self?.errSj.send(error)
   79|      0|                        return .init()
   80|      0|                    }
   81|      0|            }
   82|      0|            .share()
   83|      0|            .subscribe(resUserSubject)
   84|      0|
   85|      0|        let repUserStream = resUserSubject
   86|      0|            .assign(to: \.user, on: self)
   87|      0|
   88|      0|        // MARK: - 用户事件
   89|      0|        let reqEvent = UserEventsRequest(userName: userName)
   90|      0|        let resEventStream = appearEventsSubject
   91|      0|            .flatMap { [apiSev] in
   92|      0|                apiSev.response(from: reqEvent)
   93|      0|                    .catch { [weak self] error -> Empty<[EventModel], Never> in
   94|      0|                        self?.errSj.send(error)
   95|      0|                        return .init()
   96|      0|                    }
   97|      0|            }
   98|      0|            .share()
   99|      0|            .subscribe(resEventsSubject)
  100|      0|        let repEventStream = resEventsSubject
  101|      0|            .assign(to: \.events, on: self)
  102|      0|
  103|      0|        // MARK: - 用户接受的事件
  104|      0|        let reqReceivedEvent = UserReceivedEventsRequest(userName: userName)
  105|      0|        let resReceivedEventStream = appearReceivedEventsSubject
  106|      0|            .flatMap { [apiSev] in
  107|      0|                apiSev.response(from: reqReceivedEvent)
  108|      0|                    .catch { [weak self] error -> Empty<[EventModel], Never> in
  109|      0|                        self?.errSj.send(error)
  110|      0|                        return .init()
  111|      0|                    }
  112|      0|            }
  113|      0|            .share()
  114|      0|            .subscribe(resReceivedEventsSubject)
  115|      0|        let repReceivedEventStream = resReceivedEventsSubject
  116|      0|            .assign(to: \.receivedEvents, on: self)
  117|      0|
  118|      0|        // MARK: - 更新用户的通知信息
  119|      0|        let reqNotiEvents = UserEventsRequest(userName: userName)
  120|      0|        let resNotiEventsStream = appearNotiEventsSubject
  121|      0|            .flatMap { [apiSev] in
  122|      0|                apiSev.response(from: reqNotiEvents)
  123|      0|                    .catch { _ -> Empty<[EventModel], Never> in
  124|      0|                        return .init()
  125|      0|                    }
  126|      0|            }
  127|      0|            .share()
  128|      0|            .subscribe(resNotiEventSubject)
  129|      0|        func updateDBDevsInfo(ems: [EventModel]) {
  130|      0|            do {
  131|      0|                if let f = try DevsNotiDataHelper.find(sLogin: userName) {
  132|      0|                    var i = 0
  133|      0|                    var lrid = f.lastReadId
  134|      0|                    for em in ems {
  135|      0|                        if i == 0 {
  136|      0|                            lrid = em.id
  137|      0|                        }
  138|      0|                        if em.id == f.lastReadId {
  139|      0|                            break
  140|      0|                        }
  141|      0|                        i += 1
  142|      0|                    }
  143|      0|                    i = f.unRead + i
  144|      0|                    do {
  145|      0|                        _ = try DevsNotiDataHelper.update(i: DBDevNoti(login: userName, lastReadId: lrid, unRead: i))
  146|      0|                    } catch {}
  147|      0|                } // end if let f
  148|      0|            } catch {}
  149|      0|        } // end func updateDBDevsInfo
  150|      0|        let repNotiEventsStream = resNotiEventSubject
  151|      0|            .map { eventModels in
  152|      0|                updateDBDevsInfo(ems: eventModels)
  153|      0|                return eventModels
  154|      0|            }
  155|      0|            .assign(to: \.events, on: self)
  156|      0|
  157|      0|        // MARK: - 错误
  158|      0|        let errMsgSm = errSj
  159|      0|            .map { err -> String in
  160|      0|                err.message
  161|      0|            }
  162|      0|            .assign(to: \.errMsg, on: self)
  163|      0|        let errHintSm = errSj
  164|      0|            .map { _ in
  165|      0|                true
  166|      0|            }
  167|      0|            .assign(to: \.errHint, on: self)
  168|      0|
  169|      0|        cancellables += [
  170|      0|            resUserStream, repUserStream,
  171|      0|            resEventStream, repEventStream,
  172|      0|            resReceivedEventStream, repReceivedEventStream,
  173|      0|            resNotiEventsStream, repNotiEventsStream,
  174|      0|            errMsgSm, errHintSm
  175|      0|        ]
  176|      0|    }
  177|       |}
  178|       |
  179|       |struct UserReceivedEventsRequest: APIReqType {
  180|       |    typealias Res = [EventModel]
  181|       |    var userName: String
  182|      0|    var path: String {
  183|      0|        return "/users/\(userName)/received_events"
  184|      0|    }
  185|      0|    var qItems: [URLQueryItem]? {
  186|      0|        return [
  187|      0|            .init(name: "per_page", value: "100")
  188|      0|        ]
  189|      0|    }
  190|       |}
  191|       |
  192|       |struct UserEventsRequest: APIReqType {
  193|       |    typealias Res = [EventModel]
  194|       |    var userName: String
  195|      0|    var path: String {
  196|      0|        return "/users/\(userName)/events"
  197|      0|    }
  198|      0|    var qItems: [URLQueryItem]? {
  199|      0|        return [
  200|      0|            .init(name: "per_page", value: "100")
  201|      0|        ]
  202|      0|    }
  203|       |}
  204|       |
  205|       |struct UserRequest: APIReqType {
  206|       |    typealias Res = UserModel
  207|       |    var userName: String
  208|      0|    var path: String {
  209|      0|        return "/users/\(userName)"
  210|      0|    }
  211|      0|    var qItems: [URLQueryItem]? {
  212|      0|        return []
  213|      0|    }
  214|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/IntroView.swift:
    1|       |//
    2|       |//  IntroView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/31.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |import Inject
   10|       |
   11|       |struct IntroView: View {
   12|     94|    @ObservedObject private var iO = Inject.observer
   13|      2|    var body: some View {
   14|      2|        VStack(spacing: 15) {
   15|      2|            Image("logo")
   16|      2|                .resizable()
   17|      2|                .aspectRatio(contentMode: .fit)
   18|      2|                .frame(width: 120, height: 120)
   19|      2|            Text("戴铭的开发小册子").bold().font(.largeTitle)
   20|      2|            HStack {
   21|      2|                Text("一本活的开发手册")
   22|      2|                Link("GitHub 地址", destination: URL(string: "https://github.com/KwaiAppTeam/SwiftPamphletApp")!)
   23|      2|            }
   24|      2|            Text("版本4.6").font(.footnote)
   25|      2|        }
   26|      2|        .frame(minWidth: SPC.detailMinWidth)
   27|      2|        .enableInjection()
   28|      2|    }
   29|       |}
   30|       |
   31|       |
   32|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/NavView.swift:
    1|       |//
    2|       |//  NavView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/31.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct NavView: View {
   11|      2|    var body: some View {
   12|      2|        ScrollView {
   13|      2|            MarkdownView(s: loadBundleString("1.md"))
   14|      2|                .padding(20)
   15|      2|        }
   16|      2|        .frame(minWidth: 350)
   17|      2|    }
   18|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Network/CCYRESTfulAPI.swift:
    1|       |//
    2|       |//  RESTfulAPI.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/13.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |import SwiftUI
   10|       |/// 参考: https://kean.blog/post/new-api-client
   11|       |
   12|       |// MARK: - RESTful
   13|       |public actor RESTful {
   14|       |    enum Host: String {
   15|       |        case github = "api.github.com"
   16|       |    }
   17|       |
   18|       |    private let conf: Conf
   19|       |    private let session: URLSession
   20|       |    private let serializer: Serializer
   21|       |
   22|      0|    convenience init(host: Host, conf: URLSessionConfiguration = .default) {
   23|      0|        self.init(conf: Conf(host: host, sessionConf: conf))
   24|      0|    }
   25|       |
   26|      0|    public init(conf: Conf) {
   27|      0|        self.conf = conf
   28|      0|        self.session = URLSession(configuration: conf.sessionConf)
   29|      0|        self.serializer = Serializer()
   30|      0|    }
   31|       |    // MARK: - Conf
   32|       |    public struct Conf {
   33|       |        var host: Host
   34|       |        var port: Int?
   35|       |        var isInsecure = false // false 用 https，true 为 http
   36|      0|        var sessionConf: URLSessionConfiguration = .default
   37|       |
   38|      0|        init(host: Host, port: Int? = nil, isInsecure: Bool = false, sessionConf: URLSessionConfiguration = .default, decoder: JSONDecoder? = nil, encoder: JSONEncoder? = nil) {
   39|      0|            self.host = host
   40|      0|            self.port = port
   41|      0|            self.isInsecure = isInsecure
   42|      0|            self.sessionConf = sessionConf
   43|      0|        } // end init
   44|       |    } // end struct Conf
   45|       |
   46|       |    // MARK: - Return Value
   47|      0|    public func value<T: Decodable>(for req: Req<T>) async throws -> T {
   48|      0|        try await send(req).value
   49|      0|    }
   50|       |
   51|       |}
   52|       |extension RESTful {
   53|       |
   54|       |    // MARK: - send
   55|      0|    public func send<T: Decodable>(_ req: Req<T>) async throws -> Res<T> {
   56|      0|        try await send(req) { data in
   57|      0|            if T.self == Data.self {
   58|      0|                return data as! T
   59|      0|            } else if T.self == String.self {
   60|      0|                guard let string = String(data: data, encoding: .utf8) else {
   61|      0|                    throw URLError(.badServerResponse)
   62|      0|                }
   63|      0|                return string as! T
   64|      0|            } else {
   65|      0|                return try await self.serializer.decode(data)
   66|      0|            }
   67|      0|        }
   68|      0|    }
   69|       |
   70|       |    @discardableResult
   71|      0|    public func send(_ req: Req<Void>) async throws -> Res<Void> {
   72|      0|        try await send(req) { _ in () }
   73|      0|    }
   74|       |
   75|      0|    private func send<T>(_ req: Req<T>, _ decode: @escaping (Data) async throws -> T) async throws -> Res<T> {
   76|      0|        let res = try await data(for: req)
   77|      0|        let value = try await decode(res.value)
   78|      0|        return res.map { _ in
   79|      0|            value
   80|      0|        }
   81|      0|    }
   82|       |
   83|      0|    public func data<T>(for req: Req<T>) async throws -> Res<Data> {
   84|      0|        let req = try await makeRequest(for: req)
   85|      0|        return try await send(req)
   86|      0|    }
   87|       |
   88|      0|    private func send(_ req: URLRequest) async throws -> Res<Data> {
   89|      0|        do {
   90|      0|            return try await actuallySend(req)
   91|      0|        } catch {
   92|      0|            throw error
   93|      0|        }
   94|      0|    }
   95|       |
   96|      0|    private func actuallySend(_ req: URLRequest) async throws -> Res<Data> {
   97|      0|        let (data, res) = try await session.data(for: req, delegate: nil)
   98|      0|        try validate(res: res, data: data)
   99|      0|        let hRes = (res as? HTTPURLResponse) ?? HTTPURLResponse()
  100|      0|        return Res(value: data, data: data, req: req, res: hRes, sCode: hRes.statusCode)
  101|      0|    }
  102|       |
  103|       |    // MARK: - Make
  104|      0|    private func makeRequest<T>(for req: Req<T>) async throws -> URLRequest {
  105|      0|        let url = try makeURL(path: req.path, query: req.query)
  106|      0|        return try await makeRequest(url: url, method: req.method, body: req.body, headers: req.headers)
  107|      0|    }
  108|      0|    private func makeRequest(url: URL, method: String, body: AnyEncodable?, headers: [String: String]?) async throws -> URLRequest {
  109|      0|        var req = URLRequest(url: url)
  110|      0|        req.allHTTPHeaderFields = headers
  111|      0|        req.httpMethod = method
  112|      0|        if let body = body {
  113|      0|            req.httpBody = try await serializer.encode(body)
  114|      0|            req.setValue("application/json", forHTTPHeaderField: "Content-Type")
  115|      0|        }
  116|      0|        req.setValue("application/json", forHTTPHeaderField: "Accept")
  117|      0|        // 不同平台接口的 token
  118|      0|        switch self.conf.host {
  119|      0|        case .github:
  120|      0|            req.setValue("token \(SPC.gitHubAccessToken)", forHTTPHeaderField: "Authorization")
  121|      0|        }
  122|      0|
  123|      0|        return req
  124|      0|    }
  125|      0|    private func makeURL(path: String, query: [(String, String?)]?) throws -> URL {
  126|      0|        guard let url = URL(string: path), var comps = URLComponents(url: url, resolvingAgainstBaseURL: false) else {
  127|      0|            throw URLError(.badURL)
  128|      0|        }
  129|      0|        if path.starts(with: "/") {
  130|      0|            comps.scheme = conf.isInsecure ? "http" : "https"
  131|      0|            comps.host = conf.host.rawValue
  132|      0|            if let port = conf.port {
  133|      0|                comps.port = port
  134|      0|            }
  135|      0|        }
  136|      0|        if let query = query {
  137|      0|            comps.queryItems = query.map(URLQueryItem.init)
  138|      0|        }
  139|      0|        guard let url = comps.url else {
  140|      0|            throw URLError(.badURL)
  141|      0|        }
  142|      0|        return url
  143|      0|    }
  144|      0|    private func validate(res: URLResponse, data: Data) throws {
  145|      0|        guard let hRes = res as? HTTPURLResponse else {
  146|      0|            return
  147|      0|        }
  148|      0|        if !(200..<300).contains(hRes.statusCode) {
  149|      0|            print("Wrong, statusCode is \(hRes.statusCode)")
  150|      0|            throw URLError(.badServerResponse)
  151|      0|        }
  152|      0|    }
  153|       |}
  154|       |
  155|       |public enum RESTfulError: Error, LocalizedError {
  156|       |    case wrongStateCode(Int)
  157|      0|    public var des: String? {
  158|      0|        switch self {
  159|      0|        case .wrongStateCode(let sCode):
  160|      0|            return "错误的状态码 \(sCode)"
  161|      0|        }
  162|      0|    }
  163|       |}
  164|       |
  165|       |// MARK: - Serializer
  166|       |private actor Serializer {
  167|       |    private let decoder: JSONDecoder
  168|       |    private let encoder: JSONEncoder
  169|      0|    init() {
  170|      0|        self.decoder = JSONDecoder()
  171|      0|        self.decoder.keyDecodingStrategy = .convertFromSnakeCase
  172|      0|        self.decoder.dateDecodingStrategy = .iso8601
  173|      0|
  174|      0|        self.encoder = JSONEncoder()
  175|      0|        self.encoder.dateEncodingStrategy = .iso8601
  176|      0|    }
  177|       |
  178|      0|    func decode<T: Decodable>(_ data: Data) async throws -> T {
  179|      0|        try decoder.decode(T.self, from: data)
  180|      0|    }
  181|      0|    func encode<T: Encodable>(_ entity: T) async throws -> Data {
  182|      0|        try encoder.encode(entity)
  183|      0|    }
  184|       |}
  185|       |
  186|       |// MARK: - 请求和响应
  187|       |
  188|       |public struct Req<Res> {
  189|       |    public typealias ReqQType = [(String, String?)]?
  190|       |    public typealias ReqHType = [String: String]?
  191|       |
  192|       |    public var method: String
  193|       |    public var path: String
  194|       |    public var query: ReqQType
  195|       |    var body: AnyEncodable?
  196|       |    public var headers: ReqHType
  197|       |    public var id: String?
  198|       |
  199|      0|    public static func get(_ path: String, query: ReqQType = nil, headers: ReqHType = nil) -> Req {
  200|      0|        Req(method: "GET", path: path, query: query, headers: headers) // GET请求传 body URLSession 会报错
  201|      0|    }
  202|       |
  203|      0|    public static func post(_ path: String, query: ReqQType = nil, headers: ReqHType = nil) -> Req {
  204|      0|        Req(method: "POST", path: path, query: query, headers: headers)
  205|      0|    }
  206|       |
  207|      0|    public static func post<U: Encodable>(_ path: String, query: ReqQType = nil, body: U?, headers: ReqHType = nil) -> Req {
  208|      0|        Req(method: "POST", path: path, query: query, body: body.map(AnyEncodable.init), headers: headers)
  209|      0|    }
  210|       |
  211|      0|    public static func put(_ path: String, query: ReqQType = nil, headers: ReqHType = nil) -> Req {
  212|      0|        Req(method: "PUT", path: path, query: query, headers: headers)
  213|      0|    }
  214|      0|    public static func put<U: Encodable>(_ path: String, query: ReqQType = nil, body: U?, headers: ReqHType = nil) -> Req {
  215|      0|        Req(method: "PUT", path: path, query: query, body: body.map(AnyEncodable.init), headers: headers)
  216|      0|    }
  217|      0|    public static func patch(_ path: String, query: ReqQType = nil, headers: ReqHType = nil) -> Req {
  218|      0|        Req(method: "PATCH", path: path, query: query, headers: headers)
  219|      0|    }
  220|      0|    public static func patch<U: Encodable>(_ path: String, query: ReqQType = nil, body: U?, headers: ReqHType = nil) -> Req {
  221|      0|        Req(method: "PATCH", path: path, query: query, body: body.map(AnyEncodable.init), headers: headers)
  222|      0|    }
  223|      0|    public static func delete(_ path: String, query: ReqQType = nil, headers: ReqHType = nil) -> Req {
  224|      0|        Req(method: "DELETE", path: path, query: query, headers: headers)
  225|      0|    }
  226|      0|    public static func delete<U: Encodable>(_ path: String, query: ReqQType = nil, body: U?, headers: ReqHType = nil) -> Req {
  227|      0|        Req(method: "DELETE", path: path, query: query, body: body.map(AnyEncodable.init), headers: headers)
  228|      0|    }
  229|      0|    public static func options(_ path: String, query: ReqQType = nil, headers: ReqHType = nil) -> Req {
  230|      0|        Req(method: "OPTIONS", path: path, query: query, headers: headers)
  231|      0|    }
  232|      0|    public static func head(_ path: String, query: ReqQType = nil, headers: ReqHType = nil) -> Req {
  233|      0|        Req(method: "HEAD", path: path, query: query, headers: headers)
  234|      0|    }
  235|      0|    public static func trace(_ path: String, query: ReqQType = nil, headers: ReqHType = nil) -> Req {
  236|      0|        Req(method: "TRACE", path: path, query: query, headers: headers)
  237|      0|    }
  238|       |}
  239|       |
  240|       |struct AnyEncodable: Encodable {
  241|       |    private let value: Encodable
  242|      0|    init(_ value: Encodable) {
  243|      0|        self.value = value
  244|      0|    }
  245|      0|    func encode(to encoder: Encoder) throws {
  246|      0|        try value.encode(to: encoder)
  247|      0|    }
  248|       |}
  249|       |
  250|       |public struct Res<T> {
  251|       |    public let value: T
  252|       |    public let data: Data // 原始数据
  253|       |    public let req: URLRequest
  254|       |    public let res: HTTPURLResponse
  255|       |    public let sCode: Int
  256|       |
  257|       |    // 通过闭包生成指定类型
  258|      0|    func map<U>(_ closure: (T) -> U) -> Res<U> {
  259|      0|        Res<U>(value: closure(value), data: data, req: req, res: res, sCode: sCode)
  260|      0|    }
  261|       |}
  262|       |
  263|       |extension URLRequest {
  264|      0|    public func cURLDes() -> String {
  265|      0|        guard let url = url, let method = httpMethod else {
  266|      0|            return "$ curl command generation failed"
  267|      0|        }
  268|      0|        var comps = ["curl -v"]
  269|      0|        comps.append("-X \(method)")
  270|      0|        for hd in allHTTPHeaderFields ?? [:] {
  271|      0|            let v = hd.value.replacingOccurrences(of: "\"", with: "\\\"")
  272|      0|            comps.append("-H \"\(hd.key): \(v)\"")
  273|      0|        }
  274|      0|        if let hBData = httpBody {
  275|      0|            let httpBody = String(decoding: hBData, as: UTF8.self)
  276|      0|            var eB = httpBody.replacingOccurrences(of: "\\\"", with: "\\\\\"")
  277|      0|            eB = eB.replacingOccurrences(of: "\"", with: "\\\"")
  278|      0|            comps.append("-d \"\(eB)\"")
  279|      0|        }
  280|      0|        comps.append("\"\(url.absoluteString)\"")
  281|      0|        return comps.joined(separator: " \\\n\t")
  282|      0|    }
  283|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/RSSReader/DB/DBRSSFeed.swift:
    1|       |//
    2|       |//  DBRSSFeed.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/31.
    6|       |//
    7|       |
    8|       |import SQLite
    9|       |import Foundation
   10|       |
   11|       |// MARK: - RSS源
   12|       |
   13|       |typealias DBRSSFeed = (
   14|       |    title: String,
   15|       |    rssLink: String,
   16|       |    siteLink: String,
   17|       |    des: String,
   18|       |    unReadCount: Int
   19|       |)
   20|       |
   21|       |struct RSSFeedDataHelper: DataHelperProtocol {
   22|       |    static let table = Table("RSSFeed")
   23|       |    static let title = Expression<String>("title")
   24|       |    static let rssLink = Expression<String>("rssLink")
   25|       |    static let siteLink = Expression<String>("siteLink")
   26|       |    static let des = Expression<String>("des")
   27|       |    static let unReadCount = Expression<Int>("unReadCount")
   28|       |    typealias T = DBRSSFeed
   29|       |
   30|      2|    static func createTable() throws {
   31|      2|        guard let db = DB.shared.BBDB else {
   32|      0|            throw DBError.connectionErr
   33|      2|        }
   34|      2|        do {
   35|      2|            _ = try db.run(table.create(ifNotExists: true) { t in
   36|      2|                t.column(title, defaultValue: "")
   37|      2|                t.column(rssLink, unique: true)
   38|      2|                t.column(siteLink, defaultValue: "")
   39|      2|                t.column(des, defaultValue: "")
   40|      2|                t.column(unReadCount, defaultValue: 0)
   41|      2|            })
   42|      2|        } catch _ {
   43|      0|            throw DBError.connectionErr
   44|      2|        }
   45|      2|    }
   46|       |
   47|      0|    static func insert(i: T) throws -> Int64 {
   48|      0|        guard let db = DB.shared.BBDB else {
   49|      0|            throw DBError.connectionErr
   50|      0|        }
   51|      0|        let insert = table.insert(
   52|      0|            title <- i.title,
   53|      0|            rssLink <- i.rssLink,
   54|      0|            siteLink <- i.siteLink,
   55|      0|            des <- i.des
   56|      0|        )
   57|      0|        do {
   58|      0|            let rowId = try db.run(insert)
   59|      0|            guard rowId > 0 else {
   60|      0|                throw DBError.insertErr
   61|      0|            }
   62|      0|            return rowId
   63|      0|        } catch {
   64|      0|            throw DBError.insertErr
   65|      0|        }
   66|      0|    }
   67|       |
   68|      0|    static func delete(i: T) throws {
   69|      0|        guard let db = DB.shared.BBDB else {
   70|      0|            throw DBError.connectionErr
   71|      0|        }
   72|      0|        let query = table.filter(rssLink == i.rssLink)
   73|      0|        do {
   74|      0|            let tmp = try db.run(query.delete())
   75|      0|            guard tmp == 1 else {
   76|      0|                throw DBError.deleteErr
   77|      0|            }
   78|      0|        } catch {
   79|      0|            throw DBError.deleteErr
   80|      0|        }
   81|      0|    }
   82|       |
   83|     18|    static func find(sLink: String) throws -> T? {
   84|     18|        guard let db = DB.shared.BBDB else {
   85|      0|            throw DBError.connectionErr
   86|     18|        }
   87|     18|        let query = table.filter(rssLink == sLink)
   88|     18|        let items = try db.prepare(query)
   89|     18|        for i in items {
   90|     18|            return T(
   91|     18|                title: i[title],
   92|     18|                rssLink: i[rssLink],
   93|     18|                siteLink: i[siteLink],
   94|     18|                des: i[des],
   95|     18|                unReadCount: i[unReadCount]
   96|     18|            )
   97|     18|        }
   98|      0|        return nil
   99|     18|    } // end find
  100|       |
  101|     18|    static func update(i: T) throws {
  102|     18|        guard let db = DB.shared.BBDB else {
  103|      0|            throw DBError.connectionErr
  104|     18|        }
  105|     18|        let query = table.filter(rssLink == i.rssLink)
  106|     18|        do {
  107|     18|            if try db.run(query.update(
  108|     18|                title <- i.title,
  109|     18|                des <- i.des,
  110|     18|                unReadCount <- i.unReadCount
  111|     18|            )) > 0 {
  112|     18|
  113|     18|            } else {
  114|      0|                throw DBError.updateErr
  115|     18|            }
  116|     18|        } catch {
  117|      0|            throw DBError.updateErr
  118|     18|        }
  119|     18|    } // end update
  120|       |
  121|      0|    static func updateUnReadCount(rssLinkStr: String, unReadCountInt: Int) throws {
  122|      0|        guard let db = DB.shared.BBDB else {
  123|      0|            throw DBError.connectionErr
  124|      0|        }
  125|      0|        let query = table.filter(rssLink == rssLinkStr)
  126|      0|        do {
  127|      0|            if try db.run(query.update(
  128|      0|                unReadCount <- unReadCountInt
  129|      0|            )) > 0 {
  130|      0|
  131|      0|            } else {
  132|      0|                throw DBError.updateErr
  133|      0|            }
  134|      0|        } catch {
  135|      0|            throw DBError.updateErr
  136|      0|        }
  137|      0|    } // end update unread count
  138|       |
  139|      2|    static func findAll() throws -> [T]? {
  140|      2|        guard let db = DB.shared.BBDB else {
  141|      0|            throw DBError.connectionErr
  142|      2|        }
  143|      2|        var arr = [T]()
  144|      2|        let items = try db.prepare(table.order(unReadCount.desc))
  145|     40|        for i in items {
  146|     40|            arr.append(T(
  147|     40|                title: i[title],
  148|     40|                rssLink: i[rssLink],
  149|     40|                siteLink: i[siteLink],
  150|     40|                des: i[des],
  151|     40|                unReadCount: i[unReadCount]
  152|     40|            ))
  153|     40|        }
  154|      2|        return arr
  155|      2|    } // end find all
  156|       |
  157|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/RSSReader/DB/DBRSSItems.swift:
    1|       |//
    2|       |//  DBRSSItems.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/31.
    6|       |//
    7|       |
    8|       |import SQLite
    9|       |import Foundation
   10|       |
   11|       |// MARK: - RSS的数据
   12|       |typealias DBRSSItems = (
   13|       |    id: Int64,
   14|       |    title: String,
   15|       |    link: String,
   16|       |    des: String,
   17|       |    content: String,
   18|       |    pubDate: String,
   19|       |    rssLink: String,
   20|       |    isRead: Bool
   21|       |)
   22|       |
   23|       |struct RSSItemsDataHelper: DataHelperProtocol {
   24|       |    static let table = Table("RSSItems")
   25|       |    static let id = Expression<Int64>("id")
   26|       |    static let title = Expression<String>("title")
   27|       |    static let link = Expression<String>("link")
   28|       |    static let des = Expression<String>("des")
   29|       |    static let content = Expression<String>("content")
   30|       |    static let pubDate = Expression<String>("pubDate")
   31|       |    static let rssLink = Expression<String>("rssLink")
   32|       |    static let isRead = Expression<Bool>("isRead")
   33|       |    typealias T = DBRSSItems
   34|       |
   35|      2|    static func createTable() throws {
   36|      2|        guard let db = DB.shared.BBDB else {
   37|      0|            throw DBError.connectionErr
   38|      2|        }
   39|      2|        do {
   40|      2|            _ = try db.run(table.create(ifNotExists: true) { t in
   41|      2|                t.column(id, primaryKey: .autoincrement)
   42|      2|                t.column(title, defaultValue: "")
   43|      2|                t.column(link, unique: true)
   44|      2|                t.column(des, defaultValue: "")
   45|      2|                t.column(content, defaultValue: "")
   46|      2|                t.column(pubDate, defaultValue: "")
   47|      2|                t.column(rssLink, defaultValue: "")
   48|      2|                t.column(isRead, defaultValue: false)
   49|      2|            })
   50|      2|        } catch {
   51|      0|            throw DBError.connectionErr
   52|      2|        }
   53|      2|    }
   54|       |
   55|      0|    static func insert(i: T) throws -> Int64 {
   56|      0|        guard let db = DB.shared.BBDB else {
   57|      0|            throw DBError.connectionErr
   58|      0|        }
   59|      0|        let insert = table.insert(
   60|      0|            title <- i.title,
   61|      0|            link <- i.link,
   62|      0|            des <- i.des,
   63|      0|            content <- i.content,
   64|      0|            pubDate <- i.pubDate,
   65|      0|            rssLink <- i.rssLink,
   66|      0|            isRead <- false
   67|      0|        )
   68|      0|        do {
   69|      0|            let rowId = try db.run(insert)
   70|      0|            guard rowId > 0 else {
   71|      0|                throw DBError.insertErr
   72|      0|            }
   73|      0|            return rowId
   74|      0|        } catch {
   75|      0|            throw DBError.insertErr
   76|      0|        }
   77|      0|    } // end insert
   78|       |
   79|      0|    static func delete(i: T) throws {
   80|      0|        guard let db = DB.shared.BBDB else {
   81|      0|            throw DBError.connectionErr
   82|      0|        }
   83|      0|        let query = table.filter(id == i.id)
   84|      0|        do {
   85|      0|            let tmp = try db.run(query.delete())
   86|      0|            guard tmp == 1 else {
   87|      0|                throw DBError.deleteErr
   88|      0|            }
   89|      0|        } catch {
   90|      0|            throw DBError.deleteErr
   91|      0|        }
   92|      0|
   93|      0|    } // end delete
   94|       |
   95|     18|    static func deleteExpiredFeedItems(aRssLink: String) throws {
   96|     18|        guard let db = DB.shared.BBDB else {
   97|      0|            throw DBError.connectionErr
   98|     18|        }
   99|     18|        let q1 = table.filter(rssLink == aRssLink && isRead == true)
  100|     18|        let items = try db.prepare(q1)
  101|     18|        var count = 0
  102|     18|        for _ in items {
  103|      0|            count += 1
  104|     18|        }
  105|     18|        if count > 200 {
  106|      0|            let q2 = table
  107|      0|                .filter(rssLink == aRssLink && isRead == true)
  108|      0|                .order(id.asc)
  109|      0|                .limit(count - 200)
  110|      0|            let tmp = try db.run(q2.delete())
  111|      0|            guard tmp > 0 else {
  112|      0|                throw DBError.deleteErr
  113|      0|            }
  114|     18|        }
  115|     18|    }
  116|       |
  117|    946|    static func findLink(sLink: String) throws -> T? {
  118|    946|        guard let db = DB.shared.BBDB else {
  119|      0|            throw DBError.connectionErr
  120|    946|        }
  121|    946|        let query = table.filter(link == sLink)
  122|    946|        let items = try db.prepare(query)
  123|    946|        for i in items {
  124|    946|            return T(
  125|    946|                id: i[id],
  126|    946|                title: i[title],
  127|    946|                link: i[link],
  128|    946|                des: i[des],
  129|    946|                content: i[content],
  130|    946|                pubDate: i[pubDate],
  131|    946|                rssLink: i[rssLink],
  132|    946|                isRead: i[isRead]
  133|    946|            )
  134|    946|        }
  135|      0|        return nil
  136|    946|    } // end find
  137|       |
  138|      0|    static func findRssLink(sRssLink: String) throws -> [T] {
  139|      0|        guard let db = DB.shared.BBDB else {
  140|      0|            throw DBError.connectionErr
  141|      0|        }
  142|      0|        let query = table
  143|      0|            .filter(rssLink == sRssLink)
  144|      0|            .order(id.desc)
  145|      0|            .limit(100)
  146|      0|        let items = try db.prepare(query)
  147|      0|        var reArr = [T]()
  148|      0|        for i in items {
  149|      0|            reArr.append(T(
  150|      0|                id: i[id],
  151|      0|                title: i[title],
  152|      0|                link: i[link],
  153|      0|                des: i[des],
  154|      0|                content: i[content],
  155|      0|                pubDate: i[pubDate],
  156|      0|                rssLink: i[rssLink],
  157|      0|                isRead: i[isRead]
  158|      0|            ))
  159|      0|        }
  160|      0|        return reArr
  161|      0|    }
  162|       |
  163|     18|    static func findRssLinkUnreadCount(sRssLink: String) throws -> Int {
  164|     18|        guard let db = DB.shared.BBDB else {
  165|      0|            throw DBError.connectionErr
  166|     18|        }
  167|     18|        let query = table.filter(rssLink == sRssLink && isRead == false)
  168|     18|        return try db.scalar(query.count)
  169|     18|    }
  170|       |
  171|     18|    static func findAllUnreadCount() throws -> Int {
  172|     18|        guard let db = DB.shared.BBDB else {
  173|      0|            throw DBError.connectionErr
  174|     18|        }
  175|     18|        let query = table.filter(isRead == false)
  176|     18|        return try db.scalar(query.count)
  177|     18|    }
  178|       |
  179|      0|    static func update(i: T) throws {
  180|      0|        guard let db = DB.shared.BBDB else {
  181|      0|            throw DBError.connectionErr
  182|      0|        }
  183|      0|        let query = table.filter(id == i.id)
  184|      0|        do {
  185|      0|            if try db.run(query.update(
  186|      0|                id <- i.id,
  187|      0|                title <- i.title,
  188|      0|                link <- i.link,
  189|      0|                des <- i.des,
  190|      0|                content <- i.content,
  191|      0|                pubDate <- i.pubDate
  192|      0|            )) > 0 {
  193|      0|
  194|      0|            } else {
  195|      0|                throw DBError.updateErr
  196|      0|            }
  197|      0|        } catch {
  198|      0|            throw DBError.updateErr
  199|      0|        }
  200|      0|    } // end update
  201|       |
  202|      0|    static func markRead(aLink: String) throws {
  203|      0|        guard let db = DB.shared.BBDB else {
  204|      0|            throw DBError.connectionErr
  205|      0|        }
  206|      0|        let query = table.filter(link == aLink)
  207|      0|        do {
  208|      0|            if try db.run(query.update(
  209|      0|                isRead <- true
  210|      0|            )) > 0 {
  211|      0|
  212|      0|            } else {
  213|      0|                throw DBError.updateErr
  214|      0|            }
  215|      0|        } catch {
  216|      0|            throw DBError.updateErr
  217|      0|        }
  218|      0|    } // end markRead
  219|       |
  220|      0|    static func markAllRead(aRssLink: String) throws {
  221|      0|        guard let db = DB.shared.BBDB else {
  222|      0|            throw DBError.connectionErr
  223|      0|        }
  224|      0|        let query = table.filter(rssLink == aRssLink)
  225|      0|        do {
  226|      0|            if try db.run(query.update(
  227|      0|                isRead <- true
  228|      0|            )) > 0 {
  229|      0|
  230|      0|            } else {
  231|      0|                throw DBError.updateErr
  232|      0|            }
  233|      0|        } catch {
  234|      0|            throw DBError.updateErr
  235|      0|        }
  236|      0|    } // end markAllRead
  237|       |
  238|      0|    static func findAll() throws -> [T]? {
  239|      0|        guard let db = DB.shared.BBDB else {
  240|      0|            throw DBError.connectionErr
  241|      0|        }
  242|      0|        var arr = [T]()
  243|      0|        let items = try db.prepare(table)
  244|      0|        for i in items {
  245|      0|            arr.append(T(
  246|      0|                id: i[id],
  247|      0|                title: i[title],
  248|      0|                link: i[link],
  249|      0|                des: i[des],
  250|      0|                content: i[content],
  251|      0|                pubDate: i[pubDate],
  252|      0|                rssLink: i[rssLink],
  253|      0|                isRead: i[isRead]
  254|      0|            ))
  255|      0|        }
  256|      0|        return arr
  257|      0|    } // end findAll
  258|       |
  259|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/RSSReader/Parser/ParseStandXML.swift:
    1|       |//
    2|       |//  ParseStandXML.swift
    3|       |//  SA
    4|       |//
    5|       |//  Created by ming on 2019/8/28.
    6|       |//  Copyright © 2019 ming. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |public struct XMLNode {
   12|       |    public let name: String
   13|       |    public let attributes: [XMLTagAttribute]
   14|       |    public var value: String
   15|       |    public var subNodes: [XMLNode]
   16|       |}
   17|       |
   18|       |public class ParseStandXML {
   19|       |
   20|       |    private var tagNodes: [XMLTagNode]
   21|       |    private var nodeTree: XMLNode
   22|       |
   23|       |    enum state {
   24|       |        case normal
   25|       |        case start
   26|       |        case value
   27|       |        case end
   28|       |    }
   29|       |
   30|     20|    public init(input: String) {
   31|     20|        tagNodes = ParseStandXMLTags(input: input).parse()
   32|     20|        // ParseStandXMLTags.des(tagNodes: tagNodes)
   33|     20|        nodeTree = XMLNode(name: "root", attributes: [XMLTagAttribute](), value: "", subNodes: [XMLNode]())
   34|     20|
   35|     20|    }
   36|       |
   37|     18|    public func parse() -> XMLNode {
   38|     18|        nodeTree = recusiveParseTagNodes(parentNode: XMLNode(name: "root", attributes: [XMLTagAttribute](), value: "", subNodes: [XMLNode]()), tagNodes: tagNodes)
   39|     18|        return nodeTree
   40|     18|    } // end func
   41|       |
   42|  1.22k|    public func recusiveParseTagNodes(parentNode: XMLNode, tagNodes: [XMLTagNode]) -> XMLNode {
   43|  1.22k|        var pNode = parentNode
   44|  1.22k|        var currentState:state = .normal
   45|  1.22k|        var tagNodeArrs = [[XMLTagNode]]() // 一级 array 记录一组
   46|  1.22k|        var currentTagNodeArr = [XMLTagNode]() // 二级 array
   47|  1.22k|        var currentTagName = ""
   48|   117k|        for node in tagNodes {
   49|   117k|            if (node.type == .xml || node.type == .single) && currentState != .start {
   50|    386|                currentState = .normal
   51|    386|                currentTagNodeArr.append(node)
   52|    386|                // 添加到一级
   53|    386|                tagNodeArrs.append(currentTagNodeArr)
   54|    386|                currentTagNodeArr = [XMLTagNode]()
   55|    386|                continue
   56|   116k|            }
   57|   116k|            // 以下顺序不可变
   58|   116k|            // 当遇到.end 类型时将一组 XMLTagNode 加到 tagNodeArrs 里。然后重置。
   59|   116k|            if node.type == .end && node.name == currentTagName {
   60|  10.6k|                currentState = .end
   61|  10.6k|                currentTagNodeArr.append(node)
   62|  10.6k|                // 添加到一级
   63|  10.6k|                tagNodeArrs.append(currentTagNodeArr)
   64|  10.6k|                // 重置
   65|  10.6k|                currentTagNodeArr = [XMLTagNode]()
   66|  10.6k|                currentTagName = ""
   67|  10.6k|                continue
   68|   106k|            }
   69|   106k|            if currentState == .start {
   70|  95.5k|                currentTagNodeArr.append(node)
   71|  95.5k|                continue
   72|  95.5k|            }
   73|  10.6k|            if node.type == .start {
   74|  10.6k|                currentState = .start
   75|  10.6k|                currentTagNodeArr.append(node)
   76|  10.6k|                currentTagName = node.name
   77|  10.6k|                continue
   78|  10.6k|            }
   79|      0|
   80|  1.22k|        } // end for
   81|  1.22k|
   82|  11.0k|        for tagNodeArr in tagNodeArrs {
   83|  11.0k|            if tagNodeArr.count == 1 {
   84|    386|                // 只有一个的情况，即 xml 和 single
   85|    386|                let aTagNode = tagNodeArr[0]
   86|    386|                pNode.subNodes.append(tagNodeToNode(tagNode: aTagNode))
   87|  11.0k|            } else if tagNodeArr.count == 2 {
   88|    206|                // 2个的情况，就是比如 <p></p>
   89|    206|                let aTagNode = tagNodeArr[0] // 取 start 的信息
   90|    206|                pNode.subNodes.append(tagNodeToNode(tagNode: aTagNode))
   91|  11.0k|            } else if tagNodeArr.count > 2 {
   92|  10.4k|                // 大于2个的情况
   93|  10.4k|                let startTagNode = tagNodeArr[0]
   94|  10.4k|                var startNode = tagNodeToNode(tagNode: startTagNode)
   95|  10.4k|                let secondTagNode = tagNodeArr[1]
   96|  10.4k|
   97|  10.4k|                // 判断是否是 value 这种情况比如 <p>paragraph</p>
   98|  10.4k|                if secondTagNode.type == .value {
   99|  9.26k|                    // 有 value 的处理
  100|  9.26k|                    startNode.value = secondTagNode.value.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)
  101|  9.26k|                    pNode.subNodes.append(startNode)
  102|  10.4k|                } else {
  103|  1.20k|                    // 有子标签的情况
  104|  1.20k|                    // 递归得到结果
  105|  1.20k|                    var newTagNodeArr = tagNodeArr
  106|  1.20k|                    newTagNodeArr.remove(at: tagNodeArr.count - 1)
  107|  1.20k|                    newTagNodeArr.remove(at: 0)
  108|  1.20k|
  109|  1.20k|                    pNode.subNodes.append(recusiveParseTagNodes(parentNode: startNode, tagNodes: newTagNodeArr))
  110|  10.4k|                } // end else
  111|  10.4k|
  112|  11.0k|            } // end else if
  113|  11.0k|
  114|  11.0k|        } // end for
  115|  1.22k|
  116|  1.22k|        return pNode
  117|  1.22k|    }
  118|       |
  119|  11.0k|    private func tagNodeToNode(tagNode: XMLTagNode) -> XMLNode {
  120|  11.0k|        return XMLNode(name: tagNode.name, attributes: tagNode.attributes, value: tagNode.value, subNodes: [XMLNode]())
  121|  11.0k|    }
  122|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/RSSReader/Parser/ParseStandXMLTagTokens.swift:
    1|       |//
    2|       |//  ParseStandXML.swift
    3|       |//  SA
    4|       |//
    5|       |//  Created by ming on 2019/8/27.
    6|       |//  Copyright © 2019 ming. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |public enum XMLTagTokensType {
   12|       |    case tag
   13|       |    case value
   14|       |}
   15|       |
   16|       |public struct XMLTagTokens {
   17|       |    public let type: XMLTagTokensType
   18|       |    public let tokens: [Token]
   19|       |}
   20|       |
   21|       |public class ParseStandXMLTagTokens {
   22|       |
   23|       |    private enum State {
   24|       |        case normal
   25|       |        case startTag
   26|       |        case cdata
   27|       |    }
   28|       |
   29|       |    private var tokens: [Token]
   30|       |    private var allTagTokens: [XMLTagTokens]
   31|       |
   32|       |    private var currentIndex: Int
   33|       |    private var currentToken: Token
   34|       |    private var currentState: State
   35|       |    private var currentTokens: [Token]
   36|       |
   37|     20|    public init(input: String) {
   38|     20|        tokens = Lexer(input: input, type: .plain).allTkFast(operaters: "<>=\"/?![]")
   39|     20|
   40|     20|        allTagTokens = [XMLTagTokens]() // 第一步 Token 整理按照 tag、value 类型整理
   41|     20|
   42|     20|        currentIndex = 0
   43|     20|        currentToken = tokens[currentIndex]
   44|     20|        currentState = .normal
   45|     20|        currentTokens = [Token]()
   46|     20|    }
   47|       |
   48|       |    // 解析 driver
   49|     20|    public func parse() -> [XMLTagTokens] {
   50|     20|        parseNext()
   51|  3.98M|        while currentToken != .eof {
   52|  3.98M|            parseNext()
   53|  3.98M|        }
   54|     20|        return allTagTokens
   55|     20|    }
   56|       |
   57|       |    // 调试打印结果用
   58|      0|    static func des(allTagTokens: [XMLTagTokens]) {
   59|      0|        for tks in allTagTokens {
   60|      0|            print(tks)
   61|      0|            for tk in tks.tokens {
   62|      0|                print(tk)
   63|      0|            }
   64|      0|            print("\n")
   65|      0|        }
   66|      0|    }
   67|       |
   68|  3.98M|    private func parseNext() {
   69|  3.98M|        if currentToken == .newLine {
   70|  60.0k|            advanceTk()
   71|  60.0k|            return
   72|  3.92M|        }
   73|  3.92M|        // 处理 cdata 的情况
   74|  3.92M|        if currentState == .cdata {
   75|  2.90M|            if currentToken == .id("]") && peekTk() == .id("]") && peekTkStep(step: 2) == .id(">") {
   76|  3.98k|                if currentTokens.count > 0 {
   77|  3.98k|                    addTagTokens(type: .value) // 结束一组
   78|  3.98k|                }
   79|  3.98k|                currentState = .normal
   80|  3.98k|                advanceTk() // jump ]
   81|  3.98k|                advanceTk() // jump ]
   82|  3.98k|                advanceTk() // jump >
   83|  3.98k|                return
   84|  2.90M|            }
   85|  2.90M|            currentTokens.append(currentToken)
   86|  2.90M|            advanceTk()
   87|  2.90M|            return
   88|  2.90M|        }
   89|  1.01M|
   90|  1.01M|        // tag 的值 <a>value</a>
   91|  1.01M|        if currentState == .normal && currentToken != .id("<") {
   92|   916k|            currentTokens.append(currentToken)
   93|   916k|            advanceTk()
   94|   916k|            return
   95|   916k|        }
   96|  98.9k|
   97|  98.9k|        // <tagname ...> 和 <![CDATA[
   98|  98.9k|        if currentState == .normal && currentToken == .id("<") {
   99|  26.1k|            // <![CDATA[
  100|  26.1k|            if peekTk() == .id("!") && peekTkStep(step: 2) == .id("[") && peekTkStep(step: 3) == .id("CDATA") && peekTkStep(step: 4) == .id("[") {
  101|  3.98k|                currentState = .cdata
  102|  3.98k|                advanceTk() // jump <
  103|  3.98k|                advanceTk() // jump !
  104|  3.98k|                advanceTk() // jump [
  105|  3.98k|                advanceTk() // jump CDATA
  106|  3.98k|                advanceTk() // jump [
  107|  3.98k|                return
  108|  22.1k|            }
  109|  22.1k|
  110|  22.1k|            // <tagname …>
  111|  22.1k|            if currentTokens.count > 0 {
  112|  7.81k|                addTagTokens(type: .value) // 结束一组
  113|  22.1k|            }
  114|  22.1k|            currentState = .startTag
  115|  22.1k|            advanceTk()
  116|  22.1k|            return
  117|  72.8k|        }
  118|  72.8k|
  119|  72.8k|        if currentState == .startTag && currentToken != .id(">") {
  120|  50.6k|            currentTokens.append(currentToken)
  121|  50.6k|            advanceTk()
  122|  50.6k|            return
  123|  50.6k|        }
  124|  22.1k|
  125|  22.1k|        // <tagname ...>
  126|  22.1k|        if currentState == .startTag && currentToken == .id(">") {
  127|  22.1k|            currentState = .normal
  128|  22.1k|            addTagTokens(type: .tag) // 结束一组
  129|  22.1k|            advanceTk()
  130|  22.1k|            return
  131|  22.1k|        }
  132|      0|    }
  133|       |
  134|  33.9k|    private func addTagTokens(type: XMLTagTokensType) {
  135|  33.9k|        var isValid = false
  136|  3.87M|        for tk in currentTokens {
  137|  3.87M|            if tk == .space {
  138|   938k|
  139|  3.87M|            } else {
  140|  2.93M|                isValid = true
  141|  3.87M|            }
  142|  3.87M|        }
  143|  33.9k|        if isValid {
  144|  31.5k|            allTagTokens.append(XMLTagTokens(type: type, tokens: currentTokens))
  145|  33.9k|        }
  146|  33.9k|
  147|  33.9k|        currentTokens = [Token]()
  148|  33.9k|    }
  149|       |
  150|       |    // MARK: 辅助
  151|  32.8k|    private func peekTk() -> Token? {
  152|  32.8k|        return peekTkStep(step: 1)
  153|  32.8k|    }
  154|       |
  155|  49.1k|    private func peekTkStep(step: Int) -> Token? {
  156|  49.1k|        let peekIndex = currentIndex + step
  157|  49.1k|        guard peekIndex < tokens.count else {
  158|      0|            return nil
  159|  49.1k|        }
  160|  49.1k|        return tokens[peekIndex]
  161|  49.1k|    }
  162|       |
  163|  4.00M|    private func advanceTk() {
  164|  4.00M|        currentIndex += 1
  165|  4.00M|        guard currentIndex < tokens.count else {
  166|      0|            return
  167|  4.00M|        }
  168|  4.00M|        currentToken = tokens[currentIndex]
  169|  4.00M|    }
  170|       |
  171|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/RSSReader/Parser/ParseStandXMLTags.swift:
    1|       |//
    2|       |//  ParseStandXMLTags.swift
    3|       |//  SA
    4|       |//
    5|       |//  Created by ming on 2019/8/28.
    6|       |//  Copyright © 2019 ming. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |public enum XMLTagNodeType {
   12|       |    case xml
   13|       |    case single // 单个标签
   14|       |    case start  // 开标签 <p>
   15|       |    case value  // 标签的值 <p>value</p>
   16|       |    case end    // 闭合的标签 </p>
   17|       |}
   18|       |
   19|       |public struct XMLTagAttribute {
   20|       |    public let name: String
   21|       |    public let value: String
   22|       |}
   23|       |
   24|       |public struct XMLTagNode {
   25|       |    public let type: XMLTagNodeType
   26|       |    public let value: String // 标签值
   27|       |    public let name: String  // 标签名
   28|       |    public let attributes: [XMLTagAttribute] // 标签属性
   29|       |}
   30|       |
   31|       |public class ParseStandXMLTags {
   32|       |
   33|       |    private var allTagTokens: [XMLTagTokens]
   34|       |    private var allTagNodes: [XMLTagNode]
   35|       |
   36|       |    private enum State {
   37|       |        case startTagName
   38|       |        case startAttributeName
   39|       |        case startAttributeValue
   40|       |    }
   41|       |
   42|     20|    public init(input: String) {
   43|     20|        allTagTokens = ParseStandXMLTagTokens(input: input).parse()
   44|     20|        allTagNodes = [XMLTagNode]()
   45|     20|    }
   46|       |
   47|     20|    public func parse() -> [XMLTagNode] {
   48|  31.3k|        for tokens in allTagTokens {
   49|  31.3k|            //
   50|  31.3k|            parseTokens(tokens: tokens)
   51|  31.3k|        }
   52|     20|        return allTagNodes
   53|     20|    }
   54|       |
   55|      0|    static func des(tagNodes: [XMLTagNode]) {
   56|      0|        for tagNode in tagNodes {
   57|      0|            print("name:\(tagNode.name)")
   58|      0|            print("type:\(tagNode.type)")
   59|      0|            print("value:\(tagNode.value)")
   60|      0|            print("attribute:\(tagNode.attributes)")
   61|      0|            print("\n")
   62|      0|        }
   63|      0|    }
   64|       |
   65|  31.3k|    private func parseTokens(tokens: XMLTagTokens) {
   66|  31.3k|        // 处理 tag 类型
   67|  31.3k|        if tokens.type == .tag {
   68|  22.0k|            enum pTagState {
   69|  22.0k|                case start
   70|  22.0k|                case questionMark
   71|  22.0k|                case xml
   72|  22.0k|                case tagName
   73|  22.0k|                case attributeName
   74|  22.0k|                case equal
   75|  22.0k|                case attributeValue
   76|  22.0k|                case startForwardSlash
   77|  22.0k|                case endForwardSlash
   78|  22.0k|                case startDoubleQuotationMarks
   79|  22.0k|                case backSlash
   80|  22.0k|                case endDoubleQuotationMarks
   81|  22.0k|            }
   82|  22.0k|            var state:pTagState = .start
   83|  22.0k|            var attributes = [XMLTagAttribute]()
   84|  22.0k|            var nodeName = ""
   85|  22.0k|            var nodeType:XMLTagNodeType = .xml
   86|  22.0k|            var currentXMLTagAttributeName = ""
   87|  22.0k|            var currentXMLTagAttributeValue = ""
   88|  22.0k|
   89|  49.6k|            for token in tokens.tokens {
   90|  49.6k|                // 处理双引号字符串内的空格
   91|  49.6k|                if state != .startDoubleQuotationMarks && token == .space {
   92|  2.03k|                    continue
   93|  47.6k|                }
   94|  47.6k|
   95|  47.6k|                // 正常处理
   96|  47.6k|                if state == .start {
   97|  22.0k|                    if token.des() == "?" {
   98|     18|                        state = .questionMark
   99|     18|                        nodeType = .xml
  100|  22.0k|                    } else if token.des() == "/" {
  101|  10.7k|                        state = .startForwardSlash
  102|  10.7k|                        nodeType = .end
  103|  22.0k|                    } else {
  104|  11.2k|                        nodeName = token.des()
  105|  11.2k|                        nodeType = .start
  106|  11.2k|                        state = .tagName
  107|  22.0k|                    }
  108|  22.0k|                    continue
  109|  25.6k|                }
  110|  25.6k|                // /
  111|  25.6k|                if state == .startForwardSlash {
  112|  10.7k|                    nodeName = token.des()
  113|  10.7k|                    continue
  114|  14.8k|                }
  115|  14.8k|                // ?
  116|  14.8k|                if state == .questionMark {
  117|     18|                    if token.des() == "xml" {
  118|     18|                        state = .xml
  119|     18|                        nodeName = "xml"
  120|     18|                    }
  121|     18|                    continue
  122|  14.8k|                }
  123|  14.8k|                // xml
  124|  14.8k|                if state == .xml {
  125|     18|                    currentXMLTagAttributeName = token.des()
  126|     18|                    state = .attributeName
  127|     18|                    continue
  128|  14.8k|                }
  129|  14.8k|                // <tagname
  130|  14.8k|                if state == .tagName {
  131|  1.45k|                    currentXMLTagAttributeName = token.des()
  132|  1.45k|                    state = .attributeName
  133|  1.45k|                    // 兼容单个标签情况，比如<br/>
  134|  1.45k|                    if token.des() == "/" {
  135|      0|                        nodeType = .single
  136|  1.45k|                    }
  137|  1.45k|                    continue
  138|  13.3k|                }
  139|  13.3k|                // attributeName =
  140|  13.3k|                if state == .attributeName {
  141|  1.91k|                    if token.des() == "=" {
  142|  1.91k|                        state = .equal
  143|  1.91k|                    }
  144|  1.91k|                    continue
  145|  11.4k|                }
  146|  11.4k|                // =
  147|  11.4k|                if state == .equal {
  148|  1.91k|                    if token.des() == "\"" {
  149|  1.91k|                        state = .startDoubleQuotationMarks
  150|  1.91k|                    }
  151|  1.91k|                    continue
  152|  9.56k|                }
  153|  9.56k|                // "
  154|  9.56k|                if state == .startDoubleQuotationMarks {
  155|  8.66k|                    if token.des() == "\\" {
  156|      0|                        state = .backSlash
  157|  8.66k|                    } else if token.des() == "\"" {
  158|  1.91k|                        // 添加属性
  159|  1.91k|                        state = .endDoubleQuotationMarks
  160|  1.91k|                        attributes.append(XMLTagAttribute(name: currentXMLTagAttributeName, value: currentXMLTagAttributeValue))
  161|  1.91k|                        currentXMLTagAttributeName = ""
  162|  1.91k|                        currentXMLTagAttributeValue = ""
  163|  8.66k|                    } else {
  164|  6.75k|                        currentXMLTagAttributeValue.append(token.des())
  165|  8.66k|                    }
  166|  8.66k|                    continue
  167|  8.66k|                }
  168|    894|                // /
  169|    894|                if state == .backSlash {
  170|      0|                    state = .startDoubleQuotationMarks
  171|      0|                    continue
  172|    894|                }
  173|    894|                // "
  174|    894|                if state == .endDoubleQuotationMarks {
  175|    894|                    if token.des() == "/" {
  176|    434|                        state = .endForwardSlash
  177|    434|                        nodeType = .single
  178|    894|                    } else if token.des() == "?" {
  179|     18|
  180|    894|                    } else {
  181|    876|                        state = .attributeName
  182|    876|                        currentXMLTagAttributeName = token.des()
  183|    894|                    }
  184|    894|                    continue
  185|    894|                } // end if
  186|  22.0k|            } // end for
  187|  22.0k|
  188|  22.0k|            // 添加 Node
  189|  22.0k|            allTagNodes.append(XMLTagNode(type: nodeType, value: "", name: nodeName, attributes: attributes))
  190|  31.3k|        }
  191|  31.3k|
  192|  31.3k|        // 处理 value 类型
  193|  31.3k|        if tokens.type == .value {
  194|  9.35k|
  195|  9.35k|            var value = ""
  196|  9.35k|
  197|  3.39M|            for token in tokens.tokens {
  198|  3.39M|                value.append(token.des())
  199|  3.39M|            }
  200|  9.35k|            allTagNodes.append(XMLTagNode(type: .value, value: value, name: "", attributes: [XMLTagAttribute]()))
  201|  31.3k|        }
  202|  31.3k|
  203|  31.3k|    }
  204|       |
  205|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/RSSReader/RSSModel.swift:
    1|       |//
    2|       |//  RSSModel.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/31.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |struct RSSModel: Identifiable {
   11|     60|    var id = UUID()
   12|       |    var title = ""
   13|       |    var description = ""
   14|       |    var feedLink = ""
   15|       |    var siteLink = ""
   16|       |    var language = ""
   17|       |    var lastBuildDate = ""
   18|       |    var pubDate = ""
   19|     60|    var items = [RSSItemModel]()
   20|       |    var unReadCount = 0
   21|       |}
   22|       |
   23|       |struct RSSItemModel: Identifiable {
   24|    946|    var id = UUID()
   25|       |    var guid = ""
   26|       |    var title = ""
   27|       |    var description = ""
   28|       |    var link = ""
   29|       |    var pubDate = ""
   30|       |    var content = ""
   31|       |    var isRead = false
   32|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/RSSReader/RSSVM.swift:
    1|       |//
    2|       |//  RSSVM.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/31.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |import HTMLEntities
   10|       |
   11|       |final class RSSVM: ObservableObject {
   12|       |
   13|      2|    @Published private(set) var rssFeeds = [RSSModel]()
   14|      2|    @Published private(set) var unReadCountDic = [String: Int]()
   15|       |
   16|      2|    @Published private(set) var items = [RSSItemModel]()
   17|      2|    @Published private(set) var isReadDic = [String: Bool]()
   18|       |
   19|      0|    func markAllAsRead(rssLink: String) {
   20|      0|        for item in items {
   21|      0|            isReadDic[item.link] = true
   22|      0|        }
   23|      0|        do {
   24|      0|            _ = try RSSItemsDataHelper.markAllRead(aRssLink: rssLink)
   25|      0|            _ = try RSSFeedDataHelper.updateUnReadCount(rssLinkStr: rssLink, unReadCountInt: 0)
   26|      0|            _ = try RSSItemsDataHelper.deleteExpiredFeedItems(aRssLink: rssLink)
   27|      0|        } catch {}
   28|      0|        unReadCountDic[rssLink] = 0
   29|      0|    }
   30|       |
   31|      2|    func showRssFeeds() {
   32|      2|        do {
   33|      2|            if let feeds = try RSSFeedDataHelper.findAll() {
   34|      2|                var arr = [RSSModel]()
   35|     40|                for f in feeds {
   36|     40|                    var m = RSSModel()
   37|     40|                    m.title = f.title
   38|     40|                    m.siteLink = f.siteLink
   39|     40|                    m.feedLink = f.rssLink
   40|     40|                    m.unReadCount = f.unReadCount
   41|     40|                    m.description = f.des
   42|     40|                    arr.append(m)
   43|     40|                    unReadCountDic[f.rssLink] = f.unReadCount
   44|     40|                }
   45|      2|                rssFeeds = arr
   46|      2|            }
   47|      2|
   48|      2|        } catch {}
   49|      2|    }
   50|       |
   51|      0|    func showItems(rssLink: String) {
   52|      0|        do {
   53|      0|            let rssItems = try RSSItemsDataHelper.findRssLink(sRssLink: rssLink)
   54|      0|            var arr = [RSSItemModel]()
   55|      0|            for i in rssItems {
   56|      0|                var m = RSSItemModel()
   57|      0|                m.title = i.title
   58|      0|                m.description = i.des.htmlUnescape()
   59|      0|                m.link = i.link
   60|      0|                m.pubDate = i.pubDate
   61|      0|                m.content = i.content.htmlUnescape()
   62|      0|                m.isRead = i.isRead
   63|      0|                arr.append(m)
   64|      0|                isReadDic[i.link] = i.isRead
   65|      0|            }
   66|      0|            items = arr
   67|      0|        } catch {}
   68|      0|    }
   69|       |
   70|      0|    func readContent(linkStr: String, rssLinkStr: String) {
   71|      0|        isReadDic[linkStr] = true
   72|      0|        do {
   73|      0|            _ = try RSSItemsDataHelper.markRead(aLink: linkStr)
   74|      0|            let unReadCount = try RSSItemsDataHelper.findRssLinkUnreadCount(sRssLink: rssLinkStr)
   75|      0|            // 未读数存储更新
   76|      0|            _ = try RSSFeedDataHelper.updateUnReadCount(rssLinkStr: rssLinkStr, unReadCountInt: unReadCount)
   77|      0|            // 未读数内存更新
   78|      0|            unReadCountDic[rssLinkStr] = unReadCount
   79|      0|        } catch {}
   80|      0|    }
   81|       |
   82|     20|    static func handleFetchFeed(str: String, rssModel: RSSFeedModel) {
   83|     20|        var rss = RSSModel()
   84|     20|        let root = ParseStandXML(input: str).parse()
   85|     34|        for n in root.subNodes {
   86|     34|            // MARK: - feed 的情况
   87|     34|            if n.name == "feed" && n.subNodes.count > 0 {
   88|    284|                for n1 in n.subNodes {
   89|    284|                    if n1.name == "title" {
   90|      8|                        rss.title = n1.value
   91|    284|                    }
   92|    284|                    if n1.name == "subtitle" {
   93|      4|                        rss.description = n1.value
   94|    284|                    }
   95|    284|                    if n1.name == "id" {
   96|      8|                        rss.siteLink = n1.value
   97|    284|                    }
   98|    284|                    if n1.name == "updated" {
   99|      8|                        rss.pubDate = n1.value
  100|    284|                    }
  101|    284|                    if n1.name == "entry" {
  102|    226|                        var aItem = RSSItemModel()
  103|  1.51k|                        for n2 in n1.subNodes {
  104|  1.51k|                            if n2.name == "title" {
  105|    226|                                aItem.title = n2.value
  106|  1.51k|                            }
  107|  1.51k|                            if n2.name == "link" {
  108|    226|                                if n2.attributes.count > 0 {
  109|    356|                                    for a in n2.attributes {
  110|    356|                                        if a.name == "href" {
  111|    226|                                            aItem.link = a.value
  112|    356|                                        }
  113|    356|                                    }
  114|    226|                                } else {
  115|      0|                                    aItem.link = n2.value
  116|    226|                                }
  117|  1.51k|                            } // end name == link
  118|  1.51k|                            if n2.name == "published" {
  119|     30|                                aItem.pubDate = n2.value
  120|  1.51k|                            }
  121|  1.51k|                            if n2.name == "summary" {
  122|     30|                                aItem.description = n2.value
  123|  1.51k|                            }
  124|  1.51k|                            if n2.name.prefix(7) == "content" {
  125|    226|                                aItem.content = n2.value
  126|  1.51k|                            }
  127|  1.51k|                        } // end for n2
  128|    226|                        rss.items.append(aItem)
  129|    284|                    } // end name == entry
  130|    284|                } // end for n1
  131|     34|            } // end n name == rss
  132|     34|
  133|     34|            // MARK: - rss 的情况
  134|     34|            if n.name == "rss" && n.subNodes.count > 0 {
  135|     10|                for n1 in n.subNodes {
  136|     10|                    if n1.name == "channel" && n1.subNodes.count > 0 {
  137|    804|                        for n2 in n1.subNodes {
  138|    804|                            if n2.name == "title" {
  139|     10|                                rss.title = n2.value
  140|    804|                            }
  141|    804|                            if n2.name == "description" {
  142|     10|                                rss.description = n2.value
  143|    804|                            }
  144|    804|                            if n2.name == "link" {
  145|     10|                                rss.siteLink = n2.value
  146|    804|                            }
  147|    804|                            if n2.name == "language" {
  148|     10|                                rss.language = n2.value
  149|    804|                            }
  150|    804|                            if n2.name == "lastBuildDate" {
  151|      8|                                rss.lastBuildDate = n2.value
  152|    804|                            }
  153|    804|                            if n2.name == "pubDate" {
  154|      6|                                rss.pubDate = n2.value
  155|    804|                            }
  156|    804|
  157|    804|                            if n2.name == "item" {
  158|    720|                                var aItem = RSSItemModel()
  159|  8.15k|                                for n3 in n2.subNodes {
  160|  8.15k|                                    if n3.name == "guid" {
  161|    700|                                        aItem.guid = n3.value
  162|  8.15k|                                    }
  163|  8.15k|                                    if n3.name == "title" {
  164|    720|                                        aItem.title = n3.value
  165|  8.15k|                                    }
  166|  8.15k|                                    if n3.name == "description" {
  167|    720|                                        aItem.description = n3.value
  168|  8.15k|                                    }
  169|  8.15k|                                    if n3.name == "link" {
  170|    720|                                        aItem.link = n3.value
  171|  8.15k|                                    }
  172|  8.15k|                                    if n3.name == "pubDate" {
  173|    720|                                        aItem.pubDate = n3.value
  174|  8.15k|                                    }
  175|  8.15k|                                    if n3.name.prefix(7) == "content" {
  176|    680|                                        aItem.content = n3.value
  177|  8.15k|                                    }
  178|  8.15k|                                } // end for n3
  179|    720|                                rss.items.append(aItem)
  180|    804|                            }
  181|    804|                        } // end for n2
  182|     10|                    } // end if channel
  183|     10|                } // end for n1
  184|     34|            } // end if rss
  185|     34|        } // end n for
  186|     20|
  187|     20|        // for check
  188|     20|//        print(rss.title)
  189|     20|//        print(rss.siteLink)
  190|     20|//        print(rss.pubDate)
  191|     20|//        print(rss.items.count)
  192|     20|//        for a in rss.items {
  193|     20|//            print(a.title)
  194|     20|//            print(a.content)
  195|     20|//        }
  196|     20|
  197|     20|        // 数据库操作
  198|     20|        do {
  199|     20|            // 时间倒序
  200|     20|            let reversedRssItems = rss.items.reversed()
  201|     20|            // 添加新增 rss item
  202|    946|            for i in reversedRssItems {
  203|    946|                if let _ = try RSSItemsDataHelper.findLink(sLink: i.link) {
  204|    946|
  205|    946|                } else {
  206|      0|                    _ = try RSSItemsDataHelper.insert(i: RSSItemsDataHelper.T(
  207|      0|                        id: 0,
  208|      0|                        title: i.title,
  209|      0|                        link: i.link,
  210|      0|                        des: i.description,
  211|      0|                        content: i.content,
  212|      0|                        pubDate: i.pubDate,
  213|      0|                        rssLink: rssModel.feedLink,
  214|      0|                        isRead: false
  215|      0|                    ))
  216|    946|                }
  217|    946|            }
  218|     20|
  219|     20|            let unReadCount = try RSSItemsDataHelper.findRssLinkUnreadCount(sRssLink: rssModel.feedLink)
  220|     20|
  221|     20|            // 更新 rss 源的信息
  222|     20|            if let f = try RSSFeedDataHelper.find(sLink: rssModel.feedLink) {
  223|     18|                _ = try RSSFeedDataHelper.update(i: RSSFeedDataHelper.T(
  224|     18|                    title: rss.title,
  225|     18|                    rssLink: f.rssLink,
  226|     18|                    siteLink: f.siteLink,
  227|     18|                    des: rss.description.isEmpty ? f.des : rss.description,
  228|     18|                    unReadCount: unReadCount
  229|     18|                ))
  230|     20|            } else {
  231|      2|                _ = try RSSFeedDataHelper.insert(i: RSSFeedDataHelper.T(
  232|      2|                    title: rssModel.title,
  233|      2|                    rssLink: rssModel.feedLink,
  234|      2|                    siteLink: rssModel.siteLink,
  235|      2|                    des: rss.description.isEmpty ? rssModel.des : rss.description,
  236|      2|                    unReadCount: unReadCount
  237|      2|                ))
  238|     20|            }
  239|     20|            
  240|     20|            // 清理过多已读的 rss
  241|     20|            _ = try RSSItemsDataHelper.deleteExpiredFeedItems(aRssLink: rssModel.feedLink)
  242|     20|
  243|     20|        } catch {}
  244|     20|    }
  245|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/RSSReader/View/RSSItemContentView.swift:
    1|       |//
    2|       |//  RSSItemContentView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/31.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct RSSItemContentView: View {
   11|      0|    @EnvironmentObject var appVM: AppVM
   12|      0|    @EnvironmentObject var vm: RSSVM
   13|       |    var rssItemModel: RSSItemModel
   14|       |    var rssLink: String
   15|      0|    var body: some View {
   16|      0|        WebUIView(html:wrapperHtmlContent(content: "<h1><a href=\"\(rssItemModel.link.replacingOccurrences(of: "http://", with: "https://"))\">\(rssItemModel.title)</a></h1>" + (rssItemModel.content.isEmpty ? rssItemModel.description : rssItemModel.content) + "<p><a href=\"\(rssItemModel.link.replacingOccurrences(of: "http://", with: "https://"))\">阅读原文</a></p>"), baseURLStr: rssItemModel.link)
   17|      0|            .onAppear {
   18|      0|                vm.readContent(linkStr: rssItemModel.link, rssLinkStr: rssLink)
   19|      0|                appVM.updateWebLink(s: rssItemModel.link)
   20|      0|                appVM.rssUpdateNotis()
   21|      0|            }
   22|      0|            .frame(minWidth: SPC.detailMinWidth)
   23|      0|    }
   24|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/RSSReader/View/RSSItemsView.swift:
    1|       |//
    2|       |//  RSSItemsView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/31.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct RSSItemsView: View {
   11|     40|    @EnvironmentObject var appVM: AppVM
   12|     40|    @EnvironmentObject var vm: RSSVM
   13|       |    var rssLink: String
   14|       |
   15|      0|    var body: some View {
   16|      0|        VStack {
   17|      0|            HStack {
   18|      0|                Button {
   19|      0|                    vm.markAllAsRead(rssLink: rssLink)
   20|      0|                } label: {
   21|      0|                    Text("标记全部已读")
   22|      0|                }
   23|      0|                Spacer()
   24|      0|            }
   25|      0|            .padding(10)
   26|      0|            List {
   27|      0|                ForEach(vm.items) { item in
   28|      0|                    NavigationLink {
   29|      0|                        RSSItemContentView(rssItemModel: item, rssLink: rssLink)
   30|      0|                    } label: {
   31|      0|                        HStack {
   32|      0|                            Text(item.title)
   33|      0|                                .font(.headline)
   34|      0|                                .foregroundColor(vm.isReadDic[item.link] ?? false ? .secondary : .primary)
   35|      0|                            Spacer()
   36|      0|                            Text(howLongFromNow(timeStr:item.pubDate))
   37|      0|                                .font(.footnote)
   38|      0|                                .foregroundColor(.secondary)
   39|      0|                        }
   40|      0|                        .padding(EdgeInsets(top: 0, leading: 0, bottom: 10, trailing: 0))
   41|      0|                    } // end Navigation
   42|      0|
   43|      0|                } // end ForEach
   44|      0|            } //  end List
   45|      0|        }
   46|      0|        .onAppear {
   47|      0|            vm.showItems(rssLink: rssLink)
   48|      0|        }
   49|      0|        .onDisappear {
   50|      0|            appVM.updateWebLink(s: "")
   51|      0|        }
   52|      0|    }
   53|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/RSSReader/View/RSSListView.swift:
    1|       |//
    2|       |//  RSSListView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/31.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct RSSListView: View {
   11|       |    @StateObject var vm: RSSVM
   12|       |
   13|      4|    var body: some View {
   14|      4|        List {
   15|     40|            ForEach(vm.rssFeeds) { rss in
   16|     40|                NavigationLink {
   17|     40|                    RSSItemsView(rssLink: rss.feedLink)
   18|     40|                } label: {
   19|     40|                    VStack(alignment: .leading, spacing: 5) {
   20|     40|                        Text(rss.title)
   21|     40|                            .bold()
   22|     40|                        Text(rss.description)
   23|     40|                            .font(.footnote)
   24|     40|                            .foregroundColor(.secondary)
   25|     40|                    }
   26|     40|                    .padding(EdgeInsets(top: 0, leading: 0, bottom: 10, trailing: 0))
   27|     40|                    .badge(vm.unReadCountDic[rss.feedLink] ?? 0)
   28|     40|                }
   29|     40|
   30|     40|            }
   31|      4|        }
   32|      4|        .navigationTitle("👹 博客与资讯")
   33|      4|        .onAppear {
   34|      2|            vm.showRssFeeds()
   35|      2|        }
   36|      4|        .environmentObject(vm)
   37|      4|    }
   38|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/Guide/PlayArchitecture.swift:
    1|       |//
    2|       |//  PlayArchitecture.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/1/19.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |class PlayArchitecture {
   11|       |
   12|      0|    static func error() {
   13|      0|        enum E1: Error, LocalizedError {
   14|      0|            case c1
   15|      0|            case c2
   16|      0|            case c3
   17|      0|
   18|      0|            var errorDescription: String? {
   19|      0|                switch self {
   20|      0|                case .c1:
   21|      0|                    return "不是正数"
   22|      0|                case .c2:
   23|      0|                    return "百内"
   24|      0|                case .c3:
   25|      0|                    return "千内"
   26|      0|                }
   27|      0|            }
   28|      0|        }
   29|      0|
   30|      0|        func f1(i: Int) throws {
   31|      0|            guard i > 0 else {
   32|      0|                throw E1.c1
   33|      0|            }
   34|      0|
   35|      0|            guard i > 100 else {
   36|      0|                throw E1.c2
   37|      0|            }
   38|      0|
   39|      0|            guard i > 1000 else {
   40|      0|                throw E1.c3
   41|      0|            }
   42|      0|            print("对了 😜")
   43|      0|        }
   44|      0|
   45|      0|        do {
   46|      0|            try f1(i: 999)
   47|      0|        } catch {
   48|      0|            print(error.localizedDescription)
   49|      0|        }
   50|      0|    }
   51|       |
   52|      0|    static func codable() {
   53|      0|
   54|      0|        struct S1: Codable {
   55|      0|            var p1: String
   56|      0|            var p2: Int
   57|      0|        }
   58|      0|
   59|      0|        do {
   60|      0|            // encode
   61|      0|            let c1 = S1(p1: "one", p2: 1)
   62|      0|            let encoder = JSONEncoder()
   63|      0|            let d1 = try encoder.encode(c1)
   64|      0|            let s1 = String(decoding: d1, as: UTF8.self)
   65|      0|            print(s1) // {"p2":1,"p1":"one"}
   66|      0|
   67|      0|            // decode
   68|      0|            let decoder = JSONDecoder()
   69|      0|            let c2 = try decoder.decode(S1.self, from: d1)
   70|      0|            print(c2) // S1(p1: "one", p2: 1)
   71|      0|
   72|      0|        } catch {}
   73|      0|
   74|      0|    }
   75|       |
   76|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/Guide/PlayFoundation.swift:
    1|       |//
    2|       |//  PlayFoundation.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/1/17.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |import Contacts
   10|       |import SwiftUI
   11|       |import SwiftDate
   12|       |
   13|       |class PlayFoundation {
   14|       |
   15|       |    // UserDefault
   16|      0|    static func userDefaults() {
   17|      0|        enum UDKey {
   18|      0|            static let k1 = "token"
   19|      0|        }
   20|      0|        let ud = UserDefaults.standard
   21|      0|        ud.set("xxxxxx", forKey: UDKey.k1)
   22|      0|        let tk = ud.string(forKey: UDKey.k1)
   23|      0|        print(tk ?? "")
   24|      0|    }
   25|       |
   26|       |    // 随机
   27|      0|    static func random() {
   28|      0|        let ri = Int.random(in: 0..<10)
   29|      0|        print(ri) // 0到10随机数
   30|      0|        let a = [0, 1, 2, 3, 4, 5]
   31|      0|        print(a.randomElement() ?? 0) // 数组中随机取个数
   32|      0|        print(a.shuffled()) // 随机打乱数组顺序
   33|      0|    }
   34|       |
   35|       |    // 赋值时拷贝和写入时拷贝
   36|       |    // refer: https://aymanmoo.medium.com/copy-on-assignment-vs-copy-on-write-in-swift-c3016b343d06
   37|      0|    static func coaAndCow() {
   38|      0|        class C {
   39|      0|            var p: String
   40|      0|            init(_ s: String) {
   41|      0|                self.p = s
   42|      0|            }
   43|      0|        }
   44|      0|        struct S {
   45|      0|            var c: C
   46|      0|            init(_ s: String) {
   47|      0|                c = C(s)
   48|      0|            }
   49|      0|        }
   50|      0|
   51|      0|        // 赋值时拷贝
   52|      0|        var v1 = S("one")
   53|      0|        var v2 = v1
   54|      0|
   55|      0|        withUnsafePointer(to: &v1.c) {
   56|      0|            print("v1.c address \($0)")
   57|      0|            // v1.c address 0x00007ff7b4053810
   58|      0|        }
   59|      0|        withUnsafePointer(to: &v2.c) {
   60|      0|            print("v2.c address \($0)")
   61|      0|            // v2.c address 0x00007ff7b4053808
   62|      0|        }
   63|      0|
   64|      0|    }
   65|       |
   66|      0|    static func attributeString() -> [AttributedString] {
   67|      0|        var aStrs = [AttributedString]()
   68|      0|        var aStr1 = AttributedString("""
   69|      0|        标题
   70|      0|        正文内容，具体查看链接。
   71|      0|        这里摘出第一个重点，还要强调的内容。
   72|      0|        """)
   73|      0|        // 标题
   74|      0|        let title = aStr1.range(of: "标题")
   75|      0|        guard let title = title else {
   76|      0|            return aStrs
   77|      0|        }
   78|      0|
   79|      0|        var c1 = AttributeContainer() // 可复用容器
   80|      0|        c1.inlinePresentationIntent = .stronglyEmphasized
   81|      0|        c1.font = .largeTitle
   82|      0|        aStr1[title].setAttributes(c1)
   83|      0|
   84|      0|        // 链接
   85|      0|        let link = aStr1.range(of: "链接")
   86|      0|        guard let link = link else {
   87|      0|            return aStrs
   88|      0|        }
   89|      0|
   90|      0|        var c2 = AttributeContainer() // 链接
   91|      0|        c2.strokeColor = .blue
   92|      0|        c2.link = URL(string: "https://ming1016.github.io/")
   93|      0|        aStr1[link].setAttributes(c2.merging(c1)) // 合并 AttributeContainer
   94|      0|
   95|      0|        // Runs
   96|      0|        let i1 = aStr1.range(of: "重点")
   97|      0|        let i2 = aStr1.range(of: "强调")
   98|      0|        guard let i1 = i1, let i2 = i2 else {
   99|      0|            return aStrs
  100|      0|        }
  101|      0|
  102|      0|        var c3 = AttributeContainer()
  103|      0|        c3.foregroundColor = .yellow
  104|      0|        c3.inlinePresentationIntent = .stronglyEmphasized
  105|      0|        aStr1[i1].setAttributes(c3)
  106|      0|        aStr1[i2].setAttributes(c3)
  107|      0|
  108|      0|        for r in aStr1.runs {
  109|      0|            print("-------------")
  110|      0|            print(r.attributes)
  111|      0|        }
  112|      0|
  113|      0|        aStrs.append(aStr1)
  114|      0|
  115|      0|        // Markdown
  116|      0|        do {
  117|      0|            let aStr2 = try AttributedString(markdown: """
  118|      0|            内容[链接](https://ming1016.github.io/)。需要**强调**的内容。
  119|      0|            """)
  120|      0|
  121|      0|            aStrs.append(aStr2)
  122|      0|
  123|      0|        } catch {}
  124|      0|
  125|      0|        return aStrs
  126|      0|
  127|      0|    }
  128|       |
  129|      0|    static func scanner() {
  130|      0|        let s1 = """
  131|      0|one1,
  132|      0|two2,
  133|      0|three3.
  134|      0|"""
  135|      0|        let sn1 = Scanner(string: s1)
  136|      0|        while !sn1.isAtEnd {
  137|      0|            if let r1 = sn1.scanUpToCharacters(from: .newlines) {
  138|      0|                print(r1 as String)
  139|      0|            }
  140|      0|        }
  141|      0|        /// one1,
  142|      0|        /// two2,
  143|      0|        /// three3.
  144|      0|
  145|      0|        // 找出数字
  146|      0|        let sn2 = Scanner(string: s1)
  147|      0|        sn2.charactersToBeSkipped = CharacterSet.decimalDigits.inverted // 不是数字的就跳过
  148|      0|        var p: Int = 0
  149|      0|        while !sn2.isAtEnd {
  150|      0|            if sn2.scanInt(&p) {
  151|      0|                print(p)
  152|      0|            }
  153|      0|        }
  154|      0|        /// 1
  155|      0|        /// 2
  156|      0|        /// 3
  157|      0|
  158|      0|    }
  159|       |
  160|      0|    static func file() {
  161|      0|
  162|      0|        let path1 = "/Users/mingdai/Downloads/1.html"
  163|      0|        let path2 = "/Users/mingdai/Documents/GitHub/"
  164|      0|
  165|      0|        let u1 = URL(string: path1)
  166|      0|        do {
  167|      0|            // 写入
  168|      0|            let url1 = try FileManager.default.url(for: .itemReplacementDirectory, in: .userDomainMask, appropriateFor: u1, create: true) // 保证原子性安全保存
  169|      0|            print(url1)
  170|      0|
  171|      0|            // 读取
  172|      0|            let s1 = try String(contentsOfFile: path1, encoding: .utf8)
  173|      0|            print(s1)
  174|      0|
  175|      0|        } catch {}
  176|      0|
  177|      0|        // 检查路径是否可用
  178|      0|        let u2 = URL(fileURLWithPath:path2)
  179|      0|        do {
  180|      0|            let values = try u2.resourceValues(forKeys: [.volumeAvailableCapacityForImportantUsageKey])
  181|      0|            if let capacity = values.volumeAvailableCapacityForImportantUsage {
  182|      0|                print("可用: \(capacity)")
  183|      0|            } else {
  184|      0|                print("不可用")
  185|      0|            }
  186|      0|        } catch {
  187|      0|            print("错误: \(error.localizedDescription)")
  188|      0|        }
  189|      0|
  190|      0|        // 遍历路径下所有目录
  191|      0|        let u3 = URL(fileURLWithPath: FileManager.default.currentDirectoryPath)
  192|      0|        let fm = FileManager.default
  193|      0|        fm.enumerator(atPath: u3.path)?.forEach({ path in
  194|      0|            guard let path = path as? String else {
  195|      0|                return
  196|      0|            }
  197|      0|            let url = URL(fileURLWithPath: path, relativeTo: u3)
  198|      0|            print(url.lastPathComponent)
  199|      0|        })
  200|      0|
  201|      0|        // FileWrapper 的使用
  202|      0|        // 创建文件
  203|      0|        let f1 = FileWrapper(regularFileWithContents: Data("# 第 n 个文件\n ## 标题".utf8))
  204|      0|        f1.fileAttributes[FileAttributeKey.creationDate.rawValue] = Date()
  205|      0|        f1.fileAttributes[FileAttributeKey.modificationDate.rawValue] = Date()
  206|      0|        // 创建文件夹
  207|      0|        let folder1 = FileWrapper(directoryWithFileWrappers: [
  208|      0|            "file1.md": f1
  209|      0|        ])
  210|      0|        folder1.fileAttributes[FileAttributeKey.creationDate.rawValue] = Date()
  211|      0|        folder1.fileAttributes[FileAttributeKey.modificationDate.rawValue] = Date()
  212|      0|
  213|      0|        do {
  214|      0|            try folder1.write(
  215|      0|                to: URL(fileURLWithPath: FileManager.default.currentDirectoryPath).appendingPathComponent("NewFolder"),
  216|      0|                options: .atomic,
  217|      0|                originalContentsURL: nil
  218|      0|            )
  219|      0|        } catch {}
  220|      0|        print(FileManager.default.currentDirectoryPath)
  221|      0|    }
  222|       |
  223|      0|    static func date() {
  224|      0|        let now1 = Date()
  225|      0|
  226|      0|        // Date 转 时间戳
  227|      0|        let interval = now1.timeIntervalSince1970 // 时间戳
  228|      0|        let df = DateFormatter()
  229|      0|        df.dateFormat = "yyyy 年 MM 月 dd 日 HH:mm:ss"
  230|      0|        print("时间戳：\(Int(interval))") // 时间戳：1642399901
  231|      0|        print("格式化的时间：" + df.string(from: now1)) // 格式化的时间：2022 年 01 月 17 日 14:11:41
  232|      0|        df.dateStyle = .short
  233|      0|        print("short 样式时间：" + df.string(from: now1)) // short 样式时间：2022/1/17
  234|      0|        df.locale = Locale(identifier: "zh_Hans_CN")
  235|      0|        df.dateStyle = .full
  236|      0|        print("full 样式时间：" + df.string(from: now1)) // full 样式时间：2022年1月17日 星期一
  237|      0|
  238|      0|        // 时间戳转 Date
  239|      0|        let date = Date(timeIntervalSince1970: interval)
  240|      0|        print(date) // 2022-01-17 06:11:41 +0000
  241|      0|
  242|      0|        // 使用 SwiftDate 库
  243|      0|        let cn = Region(zone: Zones.asiaShanghai, locale: Locales.chineseChina)
  244|      0|        SwiftDate.defaultRegion = cn
  245|      0|        print("2008-02-14 23:12:14".toDate()?.year ?? "") // 2008
  246|      0|
  247|      0|        let d1 = "2022-01-17T23:20:35".toISODate(region: cn)
  248|      0|        guard let d1 = d1 else {
  249|      0|            return
  250|      0|        }
  251|      0|        print(d1.minute) // 20
  252|      0|        let d2 = d1 + 1.minutes
  253|      0|        print(d2.minute)
  254|      0|
  255|      0|        // 两个 DateInRegion 相差时间 interval
  256|      0|        let i1 = DateInRegion(Date(), region: cn) - d1
  257|      0|        let s1 = i1.toString {
  258|      0|            $0.maximumUnitCount = 4
  259|      0|            $0.allowedUnits = [.day, .hour, .minute]
  260|      0|            $0.collapsesLargestUnit = true
  261|      0|            $0.unitsStyle = .abbreviated
  262|      0|            $0.locale = Locales.chineseChina
  263|      0|        }
  264|      0|        print(s1) // 9小时45分钟
  265|      0|
  266|      0|    }
  267|       |
  268|      0|    static func formatter() {
  269|      0|
  270|      0|        // 计算两个时间之间相差多少时间，支持多种语言字符串
  271|      0|        let d1 = Date().timeIntervalSince1970 - 60 * 60 * 24
  272|      0|        let f1 = RelativeDateTimeFormatter()
  273|      0|        f1.dateTimeStyle = .named
  274|      0|        f1.formattingContext = .beginningOfSentence
  275|      0|        f1.locale = Locale(identifier: "zh_Hans_CN")
  276|      0|        let str1 = f1.localizedString(for: Date(timeIntervalSince1970: d1), relativeTo: Date())
  277|      0|        print(str1) // 昨天
  278|      0|
  279|      0|        // 简写
  280|      0|        let str2 = Date.now.addingTimeInterval(-(60 * 60 * 24))
  281|      0|            .formatted(.relative(presentation: .named))
  282|      0|        print(str2) // yesterday
  283|      0|
  284|      0|        // 描述多个事物
  285|      0|        let s1 = ListFormatter.localizedString(byJoining: ["冬天","春天","夏天","秋天"])
  286|      0|        print(s1)
  287|      0|
  288|      0|        // 名字
  289|      0|        let f2 = PersonNameComponentsFormatter()
  290|      0|        var nc1 = PersonNameComponents()
  291|      0|        nc1.familyName = "戴"
  292|      0|        nc1.givenName = "铭"
  293|      0|        nc1.nickname = "铭哥"
  294|      0|        print(f2.string(from: nc1)) // 戴铭
  295|      0|        f2.style = .short
  296|      0|        print(f2.string(from: nc1)) // 铭哥
  297|      0|        f2.style = .abbreviated
  298|      0|        print(f2.string(from: nc1)) // 戴
  299|      0|
  300|      0|        var nc2 = PersonNameComponents()
  301|      0|        nc2.familyName = "Dai"
  302|      0|        nc2.givenName = "Ming"
  303|      0|        nc2.nickname = "Starming"
  304|      0|        f2.style = .default
  305|      0|        print(f2.string(from: nc2)) // Ming Dai
  306|      0|        f2.style = .short
  307|      0|        print(f2.string(from: nc2)) // Starming
  308|      0|        f2.style = .abbreviated
  309|      0|        print(f2.string(from: nc2)) // MD
  310|      0|
  311|      0|        // 取出名
  312|      0|        let componets = f2.personNameComponents(from: "戴铭")
  313|      0|        print(componets?.givenName ?? "") // 铭
  314|      0|
  315|      0|        // 数字
  316|      0|        let f3 = NumberFormatter()
  317|      0|        f3.locale = Locale(identifier: "zh_Hans_CN")
  318|      0|        f3.numberStyle = .currency
  319|      0|        print(f3.string(from: 123456) ?? "") // ¥123,456.00
  320|      0|        f3.numberStyle = .percent
  321|      0|        print(f3.string(from: 123456) ?? "") // 12,345,600%
  322|      0|
  323|      0|        let n1 = 1.23456
  324|      0|        let n1Str = n1.formatted(.number.precision(.fractionLength(3)).rounded())
  325|      0|        print(n1Str) // 1.235
  326|      0|
  327|      0|        // 地址
  328|      0|        let f4 = CNPostalAddressFormatter()
  329|      0|        let address = CNMutablePostalAddress()
  330|      0|        address.street = "海淀区王庄路27号院4号楼4门301"
  331|      0|        address.postalCode = "100083"
  332|      0|        address.city = "北京"
  333|      0|        address.country = "中国"
  334|      0|        print(f4.string(from: address))
  335|      0|        /// 海淀区王庄路27号院4号楼4门301
  336|      0|        /// 北京 100083
  337|      0|        /// 中国
  338|      0|    }
  339|       |
  340|      0|    static func measurement() {
  341|      0|        // 参考：https://developer.apple.com/documentation/foundation/nsdimension
  342|      0|        let m1 = Measurement(value: 1, unit: UnitLength.kilometers)
  343|      0|        let m2 = m1.converted(to: .meters) // 千米转米
  344|      0|        print(m2) // 1000.0 m
  345|      0|        // 度量值转为本地化的值
  346|      0|        let mf = MeasurementFormatter()
  347|      0|        mf.locale = Locale(identifier: "zh_Hans_CN")
  348|      0|        print(mf.string(from: m1)) // 1公里
  349|      0|    }
  350|       |
  351|      0|    static func data() {
  352|      0|
  353|      0|        // 对数据的压缩
  354|      0|        let d1 = "看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？".data(using: .utf8)! as NSData
  355|      0|        print("ori \(d1.count) bytes")
  356|      0|        do {
  357|      0|            /// 压缩算法
  358|      0|            /// * lz4
  359|      0|            /// * lzma
  360|      0|            /// * zlib
  361|      0|            /// * lzfse
  362|      0|            let compressed = try d1.compressed(using: .zlib)
  363|      0|            print("comp \(compressed.count) bytes")
  364|      0|
  365|      0|            // 对数据解压
  366|      0|            let decomressed = try compressed.decompressed(using: .zlib)
  367|      0|            let deStr = String(data: decomressed as Data, encoding: .utf8)
  368|      0|            print(deStr ?? "")
  369|      0|        } catch {}
  370|      0|        /// ori 297 bytes
  371|      0|        /// comp 37 bytes
  372|      0|
  373|      0|    }
  374|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/Guide/PlayMacOS.swift:
    1|       |//
    2|       |//  PlayMacOS.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/1/21.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |class PlayMacOS {
   11|      0|    static func pasteboard() {
   12|      0|        // 读取剪贴板内容
   13|      0|        let s = NSPasteboard.general.string(forType: .string)
   14|      0|        guard let s = s else {
   15|      0|            return
   16|      0|        }
   17|      0|        print(s)
   18|      0|
   19|      0|        // 设置剪贴板内容
   20|      0|        let p = NSPasteboard.general
   21|      0|        p.declareTypes([.string], owner: nil)
   22|      0|        p.setString(s, forType: .string)
   23|      0|    }
   24|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/Guide/PlaySecurity.swift:
    1|       |//
    2|       |//  PlaySecurity.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/1/20.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |class PlaySecurity {
   11|       |
   12|      0|    static func keyChain() {
   13|      0|        let d1 = Data("keyChain github token".utf8)
   14|      0|        let service = "access-token"
   15|      0|        let account = "github"
   16|      0|        let q1 = [
   17|      0|            kSecValueData: d1,
   18|      0|            kSecClass: kSecClassGenericPassword,
   19|      0|            kSecAttrService: service,
   20|      0|            kSecAttrAccount: account
   21|      0|        ] as CFDictionary
   22|      0|
   23|      0|        // 添加一个 keychain
   24|      0|        let status = SecItemAdd(q1, nil)
   25|      0|
   26|      0|        // 如果已经添加过会抛出 -25299 错误代码，需要调用 SecItemUpdate 来进行更新
   27|      0|        if status == errSecDuplicateItem {
   28|      0|            let q2 = [
   29|      0|                kSecClass: kSecClassGenericPassword,
   30|      0|                kSecAttrService: service,
   31|      0|                kSecAttrAccount: account
   32|      0|            ] as CFDictionary
   33|      0|            let q3 = [
   34|      0|                kSecValueData: d1
   35|      0|            ] as CFDictionary
   36|      0|            SecItemUpdate(q2, q3)
   37|      0|        }
   38|      0|
   39|      0|        // 读取
   40|      0|        let q4 = [
   41|      0|            kSecAttrService: service,
   42|      0|            kSecAttrAccount: account,
   43|      0|            kSecClass: kSecClassGenericPassword,
   44|      0|            kSecReturnData: true
   45|      0|        ] as CFDictionary
   46|      0|
   47|      0|        var re: AnyObject?
   48|      0|        SecItemCopyMatching(q4, &re)
   49|      0|        guard let reData = re as? Data else { return }
   50|      0|        print(String(decoding: reData, as: UTF8.self)) // keyChain github token
   51|      0|
   52|      0|        // 删除
   53|      0|        let q5 = [
   54|      0|            kSecAttrService: service,
   55|      0|            kSecAttrAccount: account,
   56|      0|            kSecClass: kSecClassGenericPassword
   57|      0|        ] as CFDictionary
   58|      0|
   59|      0|        SecItemDelete(q5)
   60|      0|    }
   61|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/Guide/PlaySyntax.swift:
    1|       |//
    2|       |//  PlaySyntax.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/1/17.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |import SwiftUI
   10|       |
   11|       |extension URLSession {
   12|       |    func dataTaskWithResult(
   13|       |        with url: URL,
   14|       |        handler: @escaping (Result<Data, Error>) -> Void
   15|      0|    ) -> URLSessionDataTask {
   16|      0|        dataTask(with: url) { data, _, err in
   17|      0|            if let err = err {
   18|      0|                handler(.failure(err))
   19|      0|            } else {
   20|      0|                handler(.success(data ?? Data()))
   21|      0|            }
   22|      0|        }
   23|      0|    }
   24|       |}
   25|       |
   26|       |extension Array where Element == Int {
   27|       |    // 升序
   28|      0|    func intSortedASC() -> [Int] {
   29|      0|        return self.sorted(by: <)
  ------------------
  | Unexecuted instantiation: $sSa0026CGqBIcsIkBvasBitEfJFGboDEcSiRszlE12intSortedASCSaySiGyFSbSi_SitcSimcfu_
  ------------------
  | Unexecuted instantiation: $sSa0026CGqBIcsIkBvasBitEfJFGboDEcSiRszlE12intSortedASCSaySiGyFSbSi_SitcSimcfu_SbSi_Sitcfu0_
  ------------------
   30|      0|    }
   31|       |    // 降序
   32|      0|    func intSortedDESC() -> [Int] {
   33|      0|        return self.sorted(by: <)
  ------------------
  | Unexecuted instantiation: $sSa0026CGqBIcsIkBvasBitEfJFGboDEcSiRszlE13intSortedDESCSaySiGyFSbSi_SitcSimcfu_
  ------------------
  | Unexecuted instantiation: $sSa0026CGqBIcsIkBvasBitEfJFGboDEcSiRszlE13intSortedDESCSaySiGyFSbSi_SitcSimcfu_SbSi_Sitcfu0_
  ------------------
   34|      0|    }
   35|       |}
   36|       |
   37|       |protocol pc {
   38|       |    associatedtype T
   39|       |    mutating func add(_ p: T)
   40|       |}
   41|       |
   42|       |class PlaySyntax {
   43|       |    
   44|       |    // MARK: - Hashable
   45|      0|    static func hashable() {
   46|      0|        struct H: Hashable {
   47|      0|            var p1: String
   48|      0|            var p2: Int
   49|      0|            
   50|      0|            // 提供随机 seed
   51|      0|            func hash(into hasher: inout Hasher) {
   52|      0|                hasher.combine(p1)
   53|      0|            }
   54|      0|        }
   55|      0|        
   56|      0|        let h1 = H(p1: "one", p2: 1)
   57|      0|        let h2 = H(p1: "two", p2: 2)
   58|      0|        
   59|      0|        var hs1 = Hasher()
   60|      0|        hs1.combine(h1)
   61|      0|        hs1.combine(h2)
   62|      0|        print(h1.hashValue) // 7417088153212460033 随机值
   63|      0|        print(h2.hashValue) // -6972912482785541972 随机值
   64|      0|        print(hs1.finalize()) // 7955861102637572758 随机值
   65|      0|        print(h1.hashValue) // 7417088153212460033 和前面 h1 一样
   66|      0|        
   67|      0|        let h3 = H(p1: "one", p2: 1)
   68|      0|        print(h3.hashValue) // 7417088153212460033 和前面 h1 一样
   69|      0|        var hs2 = Hasher()
   70|      0|        hs2.combine(h3)
   71|      0|        hs2.combine(h2)
   72|      0|        print(hs2.finalize()) // 7955861102637572758 和前面 hs1 一样
   73|      0|    }
   74|       |    
   75|       |    // MARK: - @resultBuilder
   76|      0|    static func resultBuilder() {
   77|      0|        
   78|      0|        @resultBuilder
   79|      0|        struct RBS {
   80|      0|            // 基本闭包支持
   81|      0|            static func buildBlock(_ components: Int...) -> Int {
   82|      0|                components.reduce(0) { partialResult, i in
   83|      0|                    partialResult + i
   84|      0|                }
   85|      0|            }
   86|      0|            // 支持条件判断
   87|      0|            static func buildEither(first component: Int) -> Int {
   88|      0|                component
   89|      0|            }
   90|      0|            static func buildEither(second component: Int) -> Int {
   91|      0|                component
   92|      0|            }
   93|      0|            // 支持循环
   94|      0|            static func buildArray(_ components: [Int]) -> Int {
   95|      0|                components.reduce(0) { partialResult, i in
   96|      0|                    partialResult + i
   97|      0|                }
   98|      0|            }
   99|      0|        }
  100|      0|        
  101|      0|        let a = RBS.buildBlock(
  102|      0|            1,
  103|      0|            2,
  104|      0|            3
  105|      0|        )
  106|      0|        print(a) // 6
  107|      0|        
  108|      0|        // 应用到函数中
  109|      0|        @RBS func f1() -> Int {
  110|      0|            1
  111|      0|            2
  112|      0|            3
  113|      0|        }
  114|      0|        print(f1()) // 6
  115|      0|        
  116|      0|        // 设置了 buildEither 就可以在闭包中进行条件判断。
  117|      0|        @RBS func f2(stopAtThree: Bool) -> Int {
  118|      0|            1
  119|      0|            2
  120|      0|            3
  121|      0|            if stopAtThree == true {
  122|      0|                0
  123|      0|            } else {
  124|      0|                4
  125|      0|                5
  126|      0|                6
  127|      0|            }
  128|      0|        }
  129|      0|        print(f2(stopAtThree: false)) // 21
  130|      0|        
  131|      0|        // 设置了 buildArray 就可以在闭包内使用循环了
  132|      0|        @RBS func f3() -> Int {
  133|      0|            for i in 1...3 {
  134|      0|                i * 2
  135|      0|            }
  136|      0|        }
  137|      0|        print(f3()) // 12
  138|      0|        
  139|      0|    }
  140|       |    
  141|       |    // MARK: - @dynamicCallable 动态可调用类型
  142|      0|    static func dynamicCallable() {
  143|      0|        @dynamicCallable
  144|      0|        struct D {
  145|      0|            // 带参数说明
  146|      0|            func dynamicallyCall(withKeywordArguments args: KeyValuePairs<String, Int>) -> Int {
  147|      0|                let firstArg = args.first?.value ?? 0
  148|      0|                return firstArg * 2
  149|      0|            }
  150|      0|            
  151|      0|            // 无参数说明
  152|      0|            func dynamicallyCall(withArguments args: [String]) -> String {
  153|      0|                var firstArg = ""
  154|      0|                if args.count > 0 {
  155|      0|                    firstArg = args[0]
  156|      0|                }
  157|      0|                return "show \(firstArg)"
  158|      0|            }
  159|      0|        }
  160|      0|        
  161|      0|        let d = D()
  162|      0|        let i = d(numberIs: 2)
  163|      0|        print(i) // 4
  164|      0|        let s = d("hi")
  165|      0|        print(s) // show hi
  166|      0|    }
  167|       |    
  168|       |    // MARK: - @dynamicMemberLookup 动态成员查询
  169|      0|    static func dynamicMemberLookup() {
  170|      0|        @dynamicMemberLookup
  171|      0|        struct D {
  172|      0|            // 找字符串
  173|      0|            subscript(dynamicMember m: String) -> String {
  174|      0|                let p = ["one": "first", "two": "second"]
  175|      0|                return p[m, default: ""]
  176|      0|            }
  177|      0|            // 找整型
  178|      0|            subscript(dynamicMember m: String) -> Int {
  179|      0|                let p = ["one": 1, "two": 2]
  180|      0|                return p[m, default: 0]
  181|      0|            }
  182|      0|            // 找闭包
  183|      0|            subscript(dynamicMember m: String) -> (_ s: String) -> Void {
  184|      0|                return {
  185|      0|                    print("show \($0)")
  186|      0|                }
  187|      0|            }
  188|      0|            // 静态数组成员
  189|      0|            var p = ["This is a member"]
  190|      0|            // 动态数组成员
  191|      0|            subscript(dynamicMember m: String) -> [String] {
  192|      0|                return ["This is a dynamic member"]
  193|      0|            }
  194|      0|        }
  195|      0|        
  196|      0|        let d = D()
  197|      0|        let s1: String = d.one
  198|      0|        print(s1) // first
  199|      0|        let i1: Int = d.one
  200|      0|        print(i1) // 1
  201|      0|        d.show("something") // show something
  202|      0|        print(d.p) // ["This is a member"]
  203|      0|        let dynamicP:[String] = d.dp
  204|      0|        print(dynamicP) // ["This is a dynamic member"]
  205|      0|        
  206|      0|    }
  207|       |    
  208|       |    // MARK: - 函数
  209|      0|    static func function() {
  210|      0|        func f1(p: String = "p") -> String {
  211|      0|            "p is \(p)"
  212|      0|        }
  213|      0|
  214|      0|        // 函数作为参数
  215|      0|        func f2(fn: (String) -> String, p: String) -> String {
  216|      0|            return fn(p)
  217|      0|        }
  218|      0|
  219|      0|        print(f2(fn:f1, p: "d")) // p is d
  220|      0|
  221|      0|        // 函数作为返回值
  222|      0|        func f3(p: String) -> (String) -> String {
  223|      0|            return f1
  224|      0|        }
  225|      0|
  226|      0|        print(f3(p: "yes")("no")) // p is no
  227|      0|        
  228|      0|        // 函数中的多个变量参数
  229|      0|        func f4(s: String..., i: Int...) {
  230|      0|            print(s)
  231|      0|            print(i)
  232|      0|        }
  233|      0|        
  234|      0|        f4(s: "one", "two", "three", i: 1, 2, 3)
  235|      0|        /// ["one", "two", "three"]
  236|      0|        /// [1, 2, 3]
  237|      0|        
  238|      0|        // 嵌套函数可以重载，嵌套函数可以在声明函数之前调用他。
  239|      0|        func f5() {
  240|      0|            nf5()
  241|      0|            func nf5() {
  242|      0|                print("this is nested function")
  243|      0|            }
  244|      0|        }
  245|      0|        f5() // this is nested function
  246|      0|    }
  247|       |    
  248|       |    // MARK: - 方法
  249|       |    
  250|      0|    static func method() {
  251|      0|        enum E: String {
  252|      0|            case one, two, three
  253|      0|            func showRawValue() {
  254|      0|                print(rawValue)
  255|      0|            }
  256|      0|        }
  257|      0|
  258|      0|        let e = E.three
  259|      0|        e.showRawValue() // three
  260|      0|
  261|      0|        // 可变的实例方法，使用 mutating 标记
  262|      0|        struct S1 {
  263|      0|            var p: String
  264|      0|            mutating func addFullStopForP() {
  265|      0|                p += "."
  266|      0|            }
  267|      0|        }
  268|      0|        var s = S1(p: "hi")
  269|      0|        s.addFullStopForP()
  270|      0|        print(s.p)
  271|      0|
  272|      0|        // 类方法
  273|      0|        class C {
  274|      0|            class func cf() {
  275|      0|                print("类方法")
  276|      0|            }
  277|      0|        }
  278|      0|        
  279|      0|        // 静态下标
  280|      0|        struct S2 {
  281|      0|            static var sp = [String: Int]()
  282|      0|            
  283|      0|            static subscript(_ s: String, d: Int = 10) -> Int {
  284|      0|                get {
  285|      0|                    return sp[s] ?? d
  286|      0|                }
  287|      0|                set {
  288|      0|                    sp[s] = newValue
  289|      0|                }
  290|      0|            }
  291|      0|        }
  292|      0|        
  293|      0|        S2["key1"] = 1
  294|      0|        S2["key2"] = 2
  295|      0|        print(S2["key2"]) // 2
  296|      0|        print(S2["key3"]) // 10
  297|      0|        
  298|      0|        // callAsFunction()
  299|      0|        struct S3 {
  300|      0|            var p1: String
  301|      0|            
  302|      0|            func callAsFunction() -> String {
  303|      0|                return "show \(p1)"
  304|      0|            }
  305|      0|        }
  306|      0|        let s2 = S3(p1: "hi")
  307|      0|        print(s2()) // show hi
  308|      0|    }
  309|       |    
  310|       |    // MARK: - 属性
  311|      0|    static func property() {
  312|      0|        struct S {
  313|      0|            static let sp = "类型属性" // 类型属性通过类型本身访问，非实例访问
  314|      0|            var p1: String = ""
  315|      0|            var p2: Int = 1
  316|      0|            // cp 是计算属性
  317|      0|            var cp: Int {
  318|      0|                get {
  319|      0|                    return p2 * 2
  320|      0|                }
  321|      0|                set {
  322|      0|                    p2 = newValue + 2
  323|      0|                }
  324|      0|            }
  325|      0|            // 只有 getter 的是只读计算属性
  326|      0|            var rcp: Int {
  327|      0|                p2 * 4
  328|      0|            }
  329|      0|        }
  330|      0|        
  331|      0|        print(S.sp)
  332|      0|        print(S().cp) // 2
  333|      0|        var s = S()
  334|      0|        s.cp = 3
  335|      0|        print(s.p2) // 5
  336|      0|        print(S().rcp) // 4
  337|      0|        
  338|      0|        // 键路径表达式作为函数
  339|      0|        struct S2 {
  340|      0|            let p1: String
  341|      0|            let p2: Int
  342|      0|        }
  343|      0|        
  344|      0|        let s2 = S2(p1: "one", p2: 1)
  345|      0|        let s3 = S2(p1: "two", p2: 2)
  346|      0|        let a1 = [s2, s3]
  347|      0|        let a2 = a1.map(\.p1)
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc10PlaySyntaxC8propertyyyFZSSAcDyyFZ2S2L_Vcs7KeyPathCyAFSSGcfu_
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc10PlaySyntaxC8propertyyyFZSSAcDyyFZ2S2L_Vcs7KeyPathCyAFSSGcfu_SSAFcfu0_
  ------------------
  348|      0|        print(a2) // ["one", "two"]
  349|      0|        
  350|      0|    }
  351|       |
  352|       |    // MARK: - 泛型
  353|      0|    static func generics() {
  354|      0|        func fn<T>(p: T) -> [T] {
  355|      0|            var r = [T]()
  356|      0|            r.append(p)
  357|      0|            return r
  358|      0|        }
  359|      0|
  360|      0|        print(fn(p: "one"))
  361|      0|
  362|      0|        // 结构体
  363|      0|        struct S1<T> {
  364|      0|            var arr = [T]()
  365|      0|
  366|      0|            mutating func add(_ p: T) {
  367|      0|                arr.append(p)
  368|      0|            }
  369|      0|        }
  370|      0|
  371|      0|        var s1 = S1(arr: ["zero"])
  372|      0|        s1.add("one")
  373|      0|        s1.add("two")
  374|      0|        print(s1.arr) // ["zero", "one", "two"]
  375|      0|
  376|      0|        struct S2: pc {
  377|      0|            typealias T = String // 类型推导，可省略
  378|      0|            var strs = [String]()
  379|      0|            mutating func add(_ p: String) {
  380|      0|                strs.append(p)
  381|      0|            }
  382|      0|        }
  383|      0|
  384|      0|        // 泛型适用于嵌套类型
  385|      0|        struct S3<T> {
  386|      0|            struct S4 {
  387|      0|                var p: T
  388|      0|            }
  389|      0|
  390|      0|            var p1: T
  391|      0|            var p2: S4
  392|      0|        }
  393|      0|
  394|      0|        let s2 = S3(p1: 1, p2: S3.S4(p: 3))
  395|      0|        let s3 = S3(p1: "one", p2: S3.S4(p: "three"))
  396|      0|        print(s2,s3)
  397|      0|
  398|      0|    }
  399|       |
  400|       |    // MARK: - Result
  401|      0|    static func result() {
  402|      0|
  403|      0|        let url = URL(string: "https://ming1016.github.io/")!
  404|      0|
  405|      0|        // 以前网络请求
  406|      0|        let t1 = URLSession.shared.dataTask(with: url) {
  407|      0|            data, _, error in
  408|      0|            if let err = error {
  409|      0|                print(err)
  410|      0|            } else if let data = data {
  411|      0|                print(String(decoding: data, as: UTF8.self))
  412|      0|            }
  413|      0|        }
  414|      0|        t1.resume()
  415|      0|
  416|      0|        // 使用 Result 网络请求
  417|      0|        let t2 = URLSession.shared.dataTaskWithResult(with: url) { result in
  418|      0|            switch result {
  419|      0|            case .success(let data):
  420|      0|                print(String(decoding: data, as: UTF8.self))
  421|      0|            case .failure(let err):
  422|      0|                print(err)
  423|      0|            }
  424|      0|        }
  425|      0|        t2.resume()
  426|      0|    }
  427|       |
  428|       |    // MARK: - 数组
  429|      0|    static func array() {
  430|      0|        var a0: [Int] = [1, 10]
  431|      0|        a0.append(2)
  432|      0|        a0.remove(at: 0)
  433|      0|        print(a0) // [10, 2]
  434|      0|
  435|      0|        let a1 = ["one", "two", "three"]
  436|      0|        let a2 = ["three", "four"]
  437|      0|
  438|      0|        // 找两个集合的不同
  439|      0|        let dif = a1.difference(from: a2) // swift的 diffing 算法在这 http://www.xmailserver.org/diff2.pdf swift实现在  swift/stdlib/public/core/Diffing.swift
  440|      0|        for c in dif {
  441|      0|            switch c {
  442|      0|            case .remove(let o, let e, let a):
  443|      0|                print("offset:\(o), element:\(e), associatedWith:\(String(describing: a))")
  444|      0|            case .insert(let o, let e, let a):
  445|      0|                print("offset:\(o), element:\(e), associatedWith:\(String(describing: a))")
  446|      0|            }
  447|      0|        }
  448|      0|        /*
  449|      0|         remove offset:1, element:four, associatedWith:nil
  450|      0|         insert offset:0, element:one, associatedWith:nil
  451|      0|         insert offset:1, element:two, associatedWith:nil
  452|      0|         */
  453|      0|        let a3 = a2.applying(dif) ?? [] // 可以用于添加删除动画
  454|      0|        print(a3) // ["one", "two", "three"]
  455|      0|
  456|      0|        // 排序
  457|      0|        struct S1 {
  458|      0|            let n: Int
  459|      0|            var b = true
  460|      0|        }
  461|      0|
  462|      0|        let a4 = [
  463|      0|            S1(n: 1),
  464|      0|            S1(n: 10),
  465|      0|            S1(n: 3),
  466|      0|            S1(n: 2)
  467|      0|        ]
  468|      0|        let a5 = a4.sorted { i1, i2 in
  469|      0|            i1.n < i2.n
  470|      0|        }
  471|      0|        for n in a5 {
  472|      0|            print(n)
  473|      0|        }
  474|      0|        /// S1(n: 1)
  475|      0|        /// S1(n: 2)
  476|      0|        /// S1(n: 3)
  477|      0|        /// S1(n: 10)
  478|      0|
  479|      0|        let a6 = [1,10,4,7,2]
  480|      0|        print(a6.sorted(by: >)) // [10, 7, 4, 2, 1]
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc10PlaySyntaxC5arrayyyFZSbSi_SitcSimcfu0_
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc10PlaySyntaxC5arrayyyFZSbSi_SitcSimcfu0_SbSi_Sitcfu1_
  ------------------
  481|      0|
  482|      0|        print(a6.intSortedASC()) // 使用扩展增加自定义排序能力
  483|      0|
  484|      0|        // 第一个满足条件了就返回
  485|      0|        let a7 = a4.first {
  486|      0|            $0.n == 10
  487|      0|        }
  488|      0|        print(a7?.n ?? 0)
  489|      0|
  490|      0|        // 是否都满足了条件
  491|      0|        print(a4.allSatisfy { $0.n == 1 }) // false
  492|      0|        print(a4.allSatisfy(\.b)) // true
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc10PlaySyntaxC5arrayyyFZSbAcDyyFZ2S1L_Vcs7KeyPathCyAFSbGcfu3_
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc10PlaySyntaxC5arrayyyFZSbAcDyyFZ2S1L_Vcs7KeyPathCyAFSbGcfu3_SbAFcfu4_
  ------------------
  493|      0|
  494|      0|        // 找出最大的那个
  495|      0|        print(a4.max(by: { e1, e2 in
  496|      0|            e1.n < e2.n
  497|      0|        }) ?? S1(n: 0))
  498|      0|        // S1(n: 10, b: true)
  499|      0|
  500|      0|        // 看看是否包含某个元素
  501|      0|        print(a4.contains(where: {
  502|      0|            $0.n == 7
  503|      0|        }))
  504|      0|        // false
  505|      0|
  506|      0|        // 切片
  507|      0|        // 取前3个，并不是直接复制，对于大的数组有性能优势。
  508|      0|        print(a6[..<3]) // [1, 10, 4] 需要做越界检查
  509|      0|        print(a6.prefix(30)) // [1, 10, 4, 7, 2] 不需要做越界检查，也是切片，性能一样
  510|      0|
  511|      0|        // 去掉前3个
  512|      0|        print(a6.dropFirst(3)) // [7, 2]
  513|      0|
  514|      0|        // prefix(while:) 和 drop(while:) 方法，顺序遍历执行闭包里的逻辑判断，满足条件就返回，遇到不匹配就会停止遍历。prefix 返回满足条件的元素集合，drop 返回停止遍历之后那些元素集合。
  515|      0|        let a8 = [8, 9, 20, 1, 35, 3]
  516|      0|        let a9 = a8.prefix {
  517|      0|            $0 < 30
  518|      0|        }
  519|      0|        print(a9) // [8, 9, 20, 1]
  520|      0|        let a10 = a8.drop {
  521|      0|            $0 < 30
  522|      0|        }
  523|      0|        print(a10) // [35, 3]
  524|      0|        
  525|      0|        // 删除所有不满足条件的元素
  526|      0|        var a11 = [1, 3, 5, 12, 25]
  527|      0|        a11.removeAll { $0 < 10 } // 比 filter 更高效
  528|      0|        print(a11) // [12, 25]
  529|      0|        
  530|      0|        // 创建未初始化的数组
  531|      0|        let a12 = (0...4).map { _ in
  532|      0|            Int.random(in: 0...5)
  533|      0|        }
  534|      0|        print(a12) // [0, 3, 3, 2, 5] 随机
  535|      0|        
  536|      0|        // #if 用于后缀表达式
  537|      0|        let a13 = a11
  538|      0|        #if os(iOS)
  539|      0|            .count
  540|      0|        #else
  541|      0|            .reduce(0, +)
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc10PlaySyntaxC5arrayyyFZS2i_SitcSimcfu6_
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc10PlaySyntaxC5arrayyyFZS2i_SitcSimcfu6_S2i_Sitcfu7_
  ------------------
  542|      0|        #endif
  543|      0|        print(a13) //37
  544|      0|    }
  545|       |
  546|       |    // MARK: - Set
  547|      0|    static func set() {
  548|      0|        let s0: Set<Int> = [2, 4]
  549|      0|        let s1: Set = [2, 10, 6, 4, 8]
  550|      0|        let s2: Set = [7, 3, 5, 1, 9, 10]
  551|      0|
  552|      0|        let s3 = s1.union(s2) // 合集
  553|      0|        let s4 = s1.intersection(s2) // 交集
  554|      0|        let s5 = s1.subtracting(s2) // 非交集部分
  555|      0|        let s6 = s1.symmetricDifference(s2) // 非交集的合集
  556|      0|        print(s3) // [4, 2, 1, 7, 3, 10, 8, 9, 6, 5]
  557|      0|        print(s4) // [10]
  558|      0|        print(s5) // [8, 4, 2, 6]
  559|      0|        print(s6) // [9, 1, 3, 4, 5, 2, 6, 8, 7]
  560|      0|
  561|      0|        // s0 是否被 s1 包含
  562|      0|        print(s0.isSubset(of: s1)) // true
  563|      0|        // s1 是否包含了 s0
  564|      0|        print(s1.isSuperset(of: s0)) // true
  565|      0|
  566|      0|        let s7: Set = [3, 5]
  567|      0|        // s0 和 s7 是否有交集
  568|      0|        print(s0.isDisjoint(with: s7)) // true
  569|      0|
  570|      0|        // 可变 Set
  571|      0|        var s8: Set = ["one", "two"]
  572|      0|        s8.insert("three")
  573|      0|        s8.remove("one")
  574|      0|        print(s8) // ["two", "three"]
  575|      0|    }
  576|       |
  577|       |    // MARK: - 字典
  578|      0|    static func dictionary() {
  579|      0|        var d1 = [
  580|      0|            "k1": "v1",
  581|      0|            "k2": "v2"
  582|      0|        ]
  583|      0|        d1["k3"] = "v3"
  584|      0|        d1["k4"] = nil
  585|      0|
  586|      0|        print(d1) // ["k2": "v2", "k3": "v3", "k1": "v1"]
  587|      0|
  588|      0|        for (k, v) in d1 {
  589|      0|            print("key is \(k), value is \(v)")
  590|      0|        }
  591|      0|        /*
  592|      0|         key is k1, value is v1
  593|      0|         key is k2, value is v2
  594|      0|         key is k3, value is v3
  595|      0|         */
  596|      0|
  597|      0|        if d1.isEmpty == false {
  598|      0|            print(d1.count) // 3
  599|      0|        }
  600|      0|
  601|      0|        // mapValues
  602|      0|        let d2 = d1.mapValues {
  603|      0|            $0 + "_new"
  604|      0|        }
  605|      0|        print(d2) // ["k2": "v2_new", "k3": "v3_new", "k1": "v1_new"]
  606|      0|
  607|      0|        // 对字典的值或键进行分组
  608|      0|        let d3 = Dictionary(grouping: d1.values) {
  609|      0|            $0.count
  610|      0|        }
  611|      0|        print(d3) // [2: ["v1", "v2", "v3"]]
  612|      0|
  613|      0|        // 从字典中取值，如果键对应无值，则使用通过 default 指定的默认值
  614|      0|        d1["k5", default: "whatever"] += "."
  615|      0|        print(d1["k5"] ?? "") // whatever.
  616|      0|        let v1 = d1["k3", default: "whatever"]
  617|      0|        print(v1) // v3
  618|      0|        
  619|      0|        // compactMapValues() 对字典值进行转换和解包。可以解可选类型，并去掉 nil 值
  620|      0|        let d4 = [
  621|      0|            "k1": 1,
  622|      0|            "k2": 2,
  623|      0|            "k3": nil
  624|      0|        ]
  625|      0|        let d5 = d4.mapValues { $0 }
  626|      0|        let d6 = d4.compactMapValues{ $0 }
  627|      0|        print(d5)
  628|      0|        // ["k3": nil, "k1": Optional(1), "k2": Optional(2)]
  629|      0|        print(d6)
  630|      0|        // ["k1": 1, "k2": 2]
  631|      0|    }
  632|       |
  633|       |    // MARK: - 字符串
  634|      0|    static func string() {
  635|      0|        let s1 = "Hi! This is a string. Cool?"
  636|      0|
  637|      0|        /// 转义符 \n 表示换行。
  638|      0|        /// 其它转义字符有 \0 空字符)、\t 水平制表符 、\n 换行符、\r 回车符
  639|      0|        let s2 = "Hi!\nThis is a string. Cool?"
  640|      0|
  641|      0|        _ = s1 + s2
  642|      0|
  643|      0|        // 多行
  644|      0|        let s3 = """
  645|      0|        Hi!
  646|      0|        This is a string.
  647|      0|        Cool?
  648|      0|        """
  649|      0|
  650|      0|        // 长度
  651|      0|        print(s3.count)
  652|      0|        print(s3.isEmpty)
  653|      0|
  654|      0|        // 拼接
  655|      0|        print(s3 + "\nSure!")
  656|      0|
  657|      0|        // 字符串中插入变量
  658|      0|        let i = 1
  659|      0|        print("Today is good day, double \(i)\(i)!")
  660|      0|
  661|      0|        /// 遍历字符串
  662|      0|        /// 输出：
  663|      0|        /// o
  664|      0|        /// n
  665|      0|        /// e
  666|      0|        for c in "one" {
  667|      0|            print(c)
  668|      0|        }
  669|      0|
  670|      0|        // 查找
  671|      0|        print(s3.lowercased().contains("cool")) // true
  672|      0|
  673|      0|        // 替换
  674|      0|        let s4 = "one is two"
  675|      0|        let newS4 = s4.replacingOccurrences(of: "two", with: "one")
  676|      0|        print(newS4)
  677|      0|
  678|      0|        // 删除空格和换行
  679|      0|        let s5 = " Simple line. \n\n  "
  680|      0|        print(s5.trimmingCharacters(in: .whitespacesAndNewlines))
  681|      0|
  682|      0|        // 切割成数组
  683|      0|        let s6 = "one/two/three"
  684|      0|        let a1 = s6.components(separatedBy: "/") // 继承自 NSString 的接口
  685|      0|        print(a1) // ["one", "two", "three"]
  686|      0|
  687|      0|        let a2 = s6.split(separator: "/")
  688|      0|        print(a2) // ["one", "two", "three"] 属于切片，性能较 components 更好
  689|      0|
  690|      0|        // 判断是否是某种类型
  691|      0|        let c1: Character = "🤔"
  692|      0|        print(c1.isASCII) // false
  693|      0|        print(c1.isSymbol) // true
  694|      0|        print(c1.isLetter) // false
  695|      0|        print(c1.isNumber) // false
  696|      0|        print(c1.isUppercase) // false
  697|      0|
  698|      0|        // 字符串和 Data 互转
  699|      0|        let data = Data("hi".utf8)
  700|      0|        let s7 = String(decoding: data, as: UTF8.self)
  701|      0|        print(s7) // hi
  702|      0|
  703|      0|        // 字符串可以当作集合来用。
  704|      0|        let revered = s7.reversed()
  705|      0|        print(String(revered))
  706|      0|        
  707|      0|        // 原始字符串
  708|      0|        let s8 = #"\(s7)\#(s7) "one" and "two"\n. \#nThe second line."#
  709|      0|        print(s8)
  710|      0|        /// \(s7)hi "one" and "two"\n.
  711|      0|        /// The second line.
  712|      0|        
  713|      0|        // 原始字符串在正则使用效果更佳，反斜杠更少了。
  714|      0|        let s9 = "\\\\[A-Z]+[A-Za-z]+\\.[a-z]+"
  715|      0|        let s10 = #"\\[A-Z]+[A-Za-z]+\.[a-z]+"#
  716|      0|        print(s9) // \\[A-Z]+[A-Za-z]+\.[a-z]+
  717|      0|        print(s10) // \\[A-Z]+[A-Za-z]+\.[a-z]+
  718|      0|    } // end func string
  719|       |    
  720|       |    // MARK: - 数字
  721|      0|    static func number() {
  722|      0|        // Int
  723|      0|        let i1 = 100
  724|      0|        let i2 = 22
  725|      0|        print(i1 / i2) // 向下取整得 4
  726|      0|
  727|      0|        // Float
  728|      0|        let f1: Float = 100.0
  729|      0|        let f2: Float = 22.0
  730|      0|        print(f1 / f2) // 4.5454545
  731|      0|        
  732|      0|//        let f3: Float16 = 5.0 // macOS 还不能用
  733|      0|        let f4: Float32 = 5.0
  734|      0|        let f5: Float64 = 5.0
  735|      0|//        let f6: Float80 = 5.0
  736|      0|        print(f4, f5) // 5.0 5.0 5.0
  737|      0|
  738|      0|        // Double
  739|      0|        let d1: Double = 100.0
  740|      0|        let d2: Double = 22.0
  741|      0|        print(d1 / d2) // 4.545454545454546
  742|      0|
  743|      0|        // 字面量
  744|      0|        print(Int(0b10101)) // 0b 开头是二进制
  745|      0|        print(Int(0x00afff)) // 0x 开头是十六进制
  746|      0|        print(2.5e4) // 2.5x10^4 十进制用 e
  747|      0|        print(0xAp2) // 10*2^2  十六进制用 p
  748|      0|        print(2_000_000) // 2000000
  749|      0|        
  750|      0|        // isMultiple(of:) 方法检查一个数字是否是另一个数字的倍数
  751|      0|        let i3 = 36
  752|      0|        print(i3.isMultiple(of: 9)) // true
  753|      0|    }
  754|       |
  755|       |    // MARK: - 枚举
  756|      0|    static func `enum`() {
  757|      0|        enum E1:String, CaseIterable {
  758|      0|            case e1, e2 = "12"
  759|      0|        }
  760|      0|
  761|      0|        // 关联值
  762|      0|        enum E2 {
  763|      0|            case e1([String])
  764|      0|            case e2(Int)
  765|      0|        }
  766|      0|        let e1 = E2.e1(["one","two"])
  767|      0|        let e2 = E2.e2(3)
  768|      0|
  769|      0|        switch e1 {
  770|      0|        case .e1(let array):
  771|      0|            print(array)
  772|      0|        case .e2(let int):
  773|      0|            print(int)
  774|      0|        }
  775|      0|        print(e2)
  776|      0|
  777|      0|        // 原始值
  778|      0|        print(E1.e1.rawValue)
  779|      0|
  780|      0|        // 遵循 CaseIterable 协议可迭代
  781|      0|        for ie in E1.allCases {
  782|      0|            print("show \(ie)")
  783|      0|        }
  784|      0|
  785|      0|        // 递归枚举
  786|      0|        enum RE {
  787|      0|            case v(String)
  788|      0|            indirect case node(l:RE, r:RE)
  789|      0|        }
  790|      0|
  791|      0|        let lNode = RE.v("left")
  792|      0|        let rNode = RE.v("right")
  793|      0|        let pNode = RE.node(l: lNode, r: rNode)
  794|      0|
  795|      0|        switch pNode {
  796|      0|        case .v(let string):
  797|      0|            print(string)
  798|      0|        case .node(let l, let r):
  799|      0|            print(l,r)
  800|      0|            switch l {
  801|      0|            case .v(let string):
  802|      0|                print(string)
  803|      0|            case .node(let l, let r):
  804|      0|                print(l, r)
  805|      0|            }
  806|      0|            switch r {
  807|      0|            case .v(let string):
  808|      0|                print(string)
  809|      0|            case .node(let l, let r):
  810|      0|                print(l, r)
  811|      0|            }
  812|      0|        }
  813|      0|        
  814|      0|        // @unknown
  815|      0|        enum E3 {
  816|      0|            case e1, e2, e3
  817|      0|        }
  818|      0|        
  819|      0|        func fe1(e: E3) {
  820|      0|            switch e {
  821|      0|            case .e1:
  822|      0|                print("e1 ok")
  823|      0|            case .e2:
  824|      0|                print("e2 ok")
  825|      0|            case .e3:
  826|      0|                print("e3 ok")
  827|      0|            @unknown default:
  828|      0|                print("not ok")
  829|      0|            }
  830|      0|        }
  831|      0|        
  832|      0|        // Comparable 枚举比较
  833|      0|        enum E4: Comparable {
  834|      0|            case e1, e2
  835|      0|            case e3(i: Int)
  836|      0|            case e4
  837|      0|        }
  838|      0|        let e3 = E4.e4
  839|      0|        let e4 = E4.e3(i: 3)
  840|      0|        let e5 = E4.e3(i: 2)
  841|      0|        let e6 = E4.e1
  842|      0|        print(e3 > e4) // true
  843|      0|        let a1 = [e3, e4, e5, e6]
  844|      0|        let a2 = a1.sorted()
  845|      0|        for i in a2 {
  846|      0|            print(i.self)
  847|      0|        }
  848|      0|        /// e1
  849|      0|        /// e3(i: 2)
  850|      0|        /// e3(i: 3)
  851|      0|        /// e4
  852|      0|    }
  853|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/AnimateLayout.swift:
    1|       |//
    2|       |//  AnimateLayout.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/30.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct AnimateLayout: View {
   11|       |  @State var changeLayout: Bool = true
   12|      0|  @Namespace var namespace
   13|       |
   14|      0|  var body: some View {
   15|      0|    VStack(spacing: 30) {
   16|      0|      if changeLayout {
   17|      0|        HStack { items }
   18|      0|      } else {
   19|      0|        VStack { items }
   20|      0|      }
   21|      0|      Button("切换布局") {
   22|      0|        withAnimation { changeLayout.toggle() }
   23|      0|      }
   24|      0|    }
   25|      0|    .padding()
   26|      0|  }
   27|       |
   28|      0|  @ViewBuilder var items: some View {
   29|      0|    Text("one")
   30|      0|      .matchedGeometryEffect(id: "one", in: namespace)
   31|      0|    Text("Two")
   32|      0|      .matchedGeometryEffect(id: "Two", in: namespace)
   33|      0|    Text("Three")
   34|      0|      .matchedGeometryEffect(id: "Three", in: namespace)
   35|      0|  }
   36|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayButtonView.swift:
    1|       |//
    2|       |//  PlayButtonView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/14.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayButtonView: View {
   11|      0|    var asyncAction: () async -> Void = {
   12|      0|        do {
   13|      0|            try await Task.sleep(nanoseconds: 300_000_000)
   14|      0|        } catch {}
   15|      0|    }
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc14PlayButtonViewV11asyncActionyyYacvpfi
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc14PlayButtonViewV11asyncActionyyYacvpfiyyYacfU_
  ------------------
   16|       |    @State private var isFollowed: Bool = false
   17|      0|    var body: some View {
   18|      0|        VStack {
   19|      0|            // 常用方式
   20|      0|            Button {
   21|      0|                print("Clicked")
   22|      0|            } label: {
   23|      0|                Image(systemName: "ladybug.fill")
   24|      0|                Text("Report Bug")
   25|      0|            }
   26|      0|
   27|      0|            // 图标
   28|      0|            Button(systemIconName: "ladybug.fill") {
   29|      0|                print("bug")
   30|      0|            }
   31|      0|            .buttonStyle(.plain) // 无背景
   32|      0|            .simultaneousGesture(LongPressGesture().onEnded({ _ in
   33|      0|                print("长按") // macOS 暂不支持
   34|      0|            }))
   35|      0|            .simultaneousGesture(TapGesture().onEnded({ _ in
   36|      0|                print("短按") // macOS 暂不支持
   37|      0|            }))
   38|      0|            
   39|      0|            
   40|      0|            // iOS 15 修改器的使用。role 在 macOS 上暂不支持
   41|      0|            Button("要删除了", role: .destructive) {
   42|      0|                print("删除")
   43|      0|            }
   44|      0|            .tint(.purple)
   45|      0|            .controlSize(.large) // .regular 是默认大小
   46|      0|            .buttonStyle(.borderedProminent) // borderedProminent 可显示 tint 的设置。还有 bordered、plain 和 borderless 可选。
   47|      0|            .clipShape(RoundedRectangle(cornerRadius: 5))
   48|      0|            .accentColor(.pink)
   49|      0|            .buttonBorderShape(.automatic) // 会依据 controlSize 调整边框样式
   50|      0|            .background(.ultraThinMaterial, in: Capsule()) // 添加材质就像在视图和背景间加了个透明层达到模糊的效果。效果由高到底分别是.ultraThinMaterial、.thinMaterial、.regularMaterial、.thickMaterial、.ultraThickMaterial。
   51|      0|            
   52|      0|            // 风格化
   53|      0|            Button(action: {
   54|      0|                //
   55|      0|            }, label: {
   56|      0|                Text("风格化").font(.largeTitle)
   57|      0|            })
   58|      0|            .buttonStyle(PStarmingButtonStyle())
   59|      0|            
   60|      0|            
   61|      0|            // 自定义 Button
   62|      0|            PCustomButton("点一下触发") {
   63|      0|                print("Clicked!")
   64|      0|            }
   65|      0|            
   66|      0|            // 自定义 ButtonStyle
   67|      0|            Button {
   68|      0|                print("Double Clicked!")
   69|      0|            } label: {
   70|      0|                Text("点两下触发")
   71|      0|            }
   72|      0|            .buttonStyle(PCustomPrimitiveButtonStyle())
   73|      0|
   74|      0|            // 将 Text 视图加上另一个 Text 视图中，类型仍还是 Text。
   75|      0|            PCustomButton(Text("点我 ").underline() + Text("别犹豫").font(.title) + Text("🤫悄悄说声，有惊喜").font(.footnote).foregroundColor(.secondary)) {
   76|      0|                print("多 Text 组合标题按钮点击！")
   77|      0|            }
   78|      0|            
   79|      0|            // 异步按钮
   80|      0|            ButtonAsync {
   81|      0|                await asyncAction()
   82|      0|                isFollowed = true
   83|      0|            } label: {
   84|      0|                if isFollowed == true {
   85|      0|                    Text("已关注")
   86|      0|                } else {
   87|      0|                    Text("关注")
   88|      0|                }
   89|      0|            }
   90|      0|            .font(.largeTitle)
   91|      0|            .disabled(isFollowed)
   92|      0|            .buttonStyle(PCustomButtonStyle(backgroundColor: isFollowed == true ? .gray : .pink))
   93|      0|        }
   94|      0|        .padding()
   95|      0|        .background(Color.skeumorphismBG)
   96|      0|        
   97|      0|    }
   98|       |}
   99|       |
  100|       |// MARK: - 异步操作的按钮
  101|       |struct ButtonAsync<Label: View>: View {
  102|       |    var doAsync: () async -> Void
  103|       |    @ViewBuilder var label: () -> Label
  104|       |    @State private var isRunning = false // 避免连续点击造成重复执行事件
  105|       |    
  106|      0|    var body: some View {
  107|      0|        Button {
  108|      0|            isRunning = true
  109|      0|            Task {
  110|      0|                await doAsync()
  111|      0|                isRunning = false
  112|      0|            }
  113|      0|        } label: {
  114|      0|            label().opacity(isRunning == true ? 0 : 1)
  115|      0|            if isRunning == true {
  116|      0|                ProgressView()
  117|      0|            }
  118|      0|        }
  119|      0|        .disabled(isRunning)
  120|      0|
  121|      0|    }
  122|       |}
  123|       |
  124|       |// MARK: - 扩展 Button
  125|       |// 使用 SFSymbol 做图标
  126|       |extension Button where Label == Image {
  127|      0|    init(systemIconName: String, done: @escaping () -> Void) {
  128|      0|        self.init(action: done) {
  129|      0|            Image(systemName: systemIconName)
  130|      0|                .renderingMode(.original)
  131|      0|        }
  132|      0|    }
  133|       |}
  134|       |
  135|       |// MARK: - 自定义 Button
  136|       |struct PCustomButton: View {
  137|       |    let desTextView: Text
  138|       |    let act: () -> Void
  139|       |    
  140|      0|    init(_ des: LocalizedStringKey, act: @escaping () -> Void) {
  141|      0|        self.desTextView = Text(des)
  142|      0|        self.act = act
  143|      0|    }
  144|       |    
  145|      0|    var body: some View {
  146|      0|        Button {
  147|      0|            act()
  148|      0|        } label: {
  149|      0|            desTextView.bold()
  150|      0|        }
  151|      0|        .buttonStyle(.starming)
  152|      0|    }
  153|       |}
  154|       |
  155|       |extension PCustomButton {
  156|      0|    init(_ desTextView: Text, act: @escaping () -> Void) {
  157|      0|        self.desTextView = desTextView
  158|      0|        self.act = act
  159|      0|    }
  160|       |}
  161|       |
  162|       |// 点语法使用自定义样式
  163|       |extension ButtonStyle where Self == PCustomButtonStyle {
  164|      0|    static var starming: PCustomButtonStyle {
  165|      0|        PCustomButtonStyle(cornerRadius: 15)
  166|      0|    }
  167|       |}
  168|       |
  169|       |
  170|       |// MARK: - ButtonStyle
  171|       |struct PCustomButtonStyle: ButtonStyle {
  172|       |    var cornerRadius:Double = 10
  173|      0|    var backgroundColor: Color = .pink
  174|      0|    func makeBody(configuration: Configuration) -> some View {
  175|      0|        HStack {
  176|      0|            Spacer()
  177|      0|            configuration.label
  178|      0|            Spacer()
  179|      0|        }
  180|      0|        .padding()
  181|      0|        .background(
  182|      0|            RoundedRectangle(cornerRadius: cornerRadius, style: .continuous)
  183|      0|                .fill(backgroundColor)
  184|      0|                .shadow(color: configuration.isPressed ? .white : .black, radius: 1, x: 0, y: 1)
  185|      0|        )
  186|      0|        .opacity(configuration.isPressed ? 0.5 : 1)
  187|      0|        .scaleEffect(configuration.isPressed ? 0.99 : 1)
  188|      0|        
  189|      0|    }
  190|       |}
  191|       |
  192|       |// MARK: - PrimitiveButtonStyle
  193|       |struct PCustomPrimitiveButtonStyle: PrimitiveButtonStyle {
  194|      0|    func makeBody(configuration: Configuration) -> some View {
  195|      0|        // 双击触发
  196|      0|        configuration.label
  197|      0|            .onTapGesture(count: 2) {
  198|      0|                configuration.trigger()
  199|      0|            }
  200|      0|        // 手势识别
  201|      0|        Button(configuration)
  202|      0|            .gesture(
  203|      0|                LongPressGesture()
  204|      0|                    .onEnded({ _ in
  205|      0|                        configuration.trigger()
  206|      0|                    })
  207|      0|            )
  208|      0|    }
  209|       |}
  210|       |
  211|       |// MARK: - 风格化
  212|       |struct PStarmingButtonStyle: ButtonStyle {
  213|      0|    var backgroundColor = Color.skeumorphismBG
  214|      0|    func makeBody(configuration: Configuration) -> some View {
  215|      0|        HStack {
  216|      0|            Spacer()
  217|      0|            configuration.label
  218|      0|            Spacer()
  219|      0|        }
  220|      0|        .padding(20)
  221|      0|        .background(
  222|      0|            ZStack {
  223|      0|                RoundedRectangle(cornerRadius: 10, style: .continuous)
  224|      0|                    .shadow(color: .white, radius: configuration.isPressed ? 7 : 10, x: configuration.isPressed ? -5 : -10, y: configuration.isPressed ? -5 : -10)
  225|      0|                    .shadow(color: .black, radius: configuration.isPressed ? 7 : 10, x: configuration.isPressed ? 5 : 10, y: configuration.isPressed ? 5 : 10)
  226|      0|                    .blendMode(.overlay)
  227|      0|                RoundedRectangle(cornerRadius: 10, style: .continuous)
  228|      0|                    .fill(backgroundColor)
  229|      0|            }
  230|      0|        )
  231|      0|        .scaleEffect(configuration.isPressed ? 0.98 : 1)
  232|      0|    }
  233|       |}
  234|       |
  235|       |extension Color {
  236|       |    static let skeumorphismBG = Color(hex: "f0f0f3")
  237|       |}
  238|       |
  239|       |extension Color {
  240|      0|    init(hex: String) {
  241|      0|        var rgbValue: UInt64 = 0
  242|      0|        Scanner(string: hex).scanHexInt64(&rgbValue)
  243|      0|
  244|      0|        let r = (rgbValue & 0xff0000) >> 16
  245|      0|        let g = (rgbValue & 0xff00) >> 8
  246|      0|        let b = rgbValue & 0xff
  247|      0|
  248|      0|        self.init(red: Double(r) / 0xff, green: Double(g) / 0xff, blue: Double(b) / 0xff)
  249|      0|    }
  250|       |}
  251|       |
  252|       |
  253|       |
  254|       |
  255|       |
  256|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayControlGroupView.swift:
    1|       |//
    2|       |//  PlayControlGroupView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/23.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayControlGroupView: View {
   11|      0|    var body: some View {
   12|      0|        ControlGroup {
   13|      0|            Button {
   14|      0|                print("plus")
   15|      0|            } label: {
   16|      0|                Image(systemName: "plus")
   17|      0|            }
   18|      0|
   19|      0|            Button {
   20|      0|                print("minus")
   21|      0|            } label: {
   22|      0|                Image(systemName: "minus")
   23|      0|            }
   24|      0|        }
   25|      0|        .padding()
   26|      0|        .controlGroupStyle(.automatic) // .automatic 是默认样式，还有 .navigation
   27|      0|    }
   28|       |}
   29|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayFormView.swift:
    1|       |//
    2|       |//  PlayFormView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/22.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |import Combine
   10|       |
   11|       |struct PlayFormView: View {
   12|      0|    @EnvironmentObject var stVM: SettingsVM
   13|       |    @State private var isShowBadge: Bool = false
   14|      0|    var body: some View {
   15|      0|        Form {
   16|      0|            Section("设置") {
   17|      0|                Toggle(isOn: $isShowBadge) {
   18|      0|                    Text("是否显示 Badge")
   19|      0|                }
   20|      0|            }
   21|      0|        } // end Form
   22|      0|    }
   23|       |}
   24|       |
   25|       |// Form 的数据管理，使用 UserDefaults 进行存取
   26|       |final class SettingsVM: ObservableObject {
   27|       |    private enum K {
   28|       |        static let showBadge = "p_showBadge"
   29|       |        static let sizeMode = "p_sizeMode"
   30|       |    }
   31|       |    private let ud: UserDefaults
   32|       |    
   33|       |    enum SizeMode: String, CaseIterable {
   34|       |        case small, normal, big
   35|       |    }
   36|       |    
   37|      0|    init() {
   38|      0|        self.ud = UserDefaults.standard
   39|      0|        ud.register(defaults: [
   40|      0|            K.showBadge: true,
   41|      0|            K.sizeMode: SizeMode.normal
   42|      0|        ])
   43|      0|    }
   44|       |    
   45|       |    var isShowBadge: Bool {
   46|      0|        set {
   47|      0|            ud.set(newValue, forKey: K.showBadge)
   48|      0|        }
   49|      0|        get {
   50|      0|            ud.bool(forKey: K.showBadge)
   51|      0|        }
   52|       |    }
   53|       |    
   54|       |    var sizeMode: SizeMode {
   55|      0|        set {
   56|      0|            ud.set(newValue.rawValue, forKey: K.sizeMode)
   57|      0|        }
   58|      0|        get {
   59|      0|            ud.string(forKey: K.sizeMode).flatMap { SizeMode(rawValue: $0) } ?? .normal
   60|      0|        }
   61|       |    }
   62|       |}
   63|       |
   64|       |
   65|       |
   66|       |
   67|       |
   68|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayGroupBoxView.swift:
    1|       |//
    2|       |//  PlayGroupBoxView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/23.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayGroupBoxView: View {
   11|      0|    var body: some View {
   12|      0|        GroupBox {
   13|      0|            Text("这是 GroupBox 的内容")
   14|      0|        } label: {
   15|      0|            Label("标题一", systemImage: "t.square.fill")
   16|      0|        }
   17|      0|        .padding()
   18|      0|        
   19|      0|        GroupBox {
   20|      0|            Text("还是 GroupBox 的内容")
   21|      0|        } label: {
   22|      0|            Label("标题二", systemImage: "t.square.fill")
   23|      0|        }
   24|      0|        .padding()
   25|      0|        .groupBoxStyle(PCGroupBoxStyle())
   26|      0|
   27|      0|    }
   28|       |}
   29|       |
   30|       |struct PCGroupBoxStyle: GroupBoxStyle {
   31|      0|    func makeBody(configuration: Configuration) -> some View {
   32|      0|        VStack(alignment: .leading) {
   33|      0|            configuration.label
   34|      0|                .font(.title)
   35|      0|            configuration.content
   36|      0|        }
   37|      0|        .padding()
   38|      0|        .background(.pink)
   39|      0|        .clipShape(RoundedRectangle(cornerRadius: 8, style: .continuous))
   40|      0|    }
   41|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayImageView.swift:
    1|       |//
    2|       |//  PlayImageView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/25.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayImageView: View {
   11|      0|    var body: some View {
   12|      0|        Image("logo")
   13|      0|            .resizable()
   14|      0|            .frame(width: 100, height: 100)
   15|      0|        
   16|      0|        Image("logo")
   17|      0|            .resizable()
   18|      0|            .aspectRatio(contentMode: .fit)
   19|      0|            .frame(width: 50, height: 50)
   20|      0|            .clipShape(Circle())
   21|      0|            .overlay(
   22|      0|                Circle().stroke(.cyan, lineWidth: 4)
   23|      0|            )
   24|      0|            .shadow(radius: 10)
   25|      0|        
   26|      0|        // SF Symbols
   27|      0|        Image(systemName: "scissors")
   28|      0|            .imageScale(.large)
   29|      0|            .foregroundColor(.pink)
   30|      0|            .frame(width: 40, height: 40)
   31|      0|        
   32|      0|        // SF Symbols 多色时使用原色
   33|      0|        Image(systemName: "thermometer.sun.fill")
   34|      0|            .renderingMode(.original)
   35|      0|            .imageScale(.large)
   36|      0|    }
   37|       |}
   38|       |
   39|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayKeyboard.swift:
    1|       |//
    2|       |//  PlayKeyboard.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/3/2.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayKeyboard: View {
   11|      0|    var body: some View {
   12|      0|        Button(systemIconName: "camera.shutter.button") {
   13|      0|            print("按了回车键")
   14|      0|        }
   15|      0|        .keyboardShortcut(.defaultAction) // 回车
   16|      0|        
   17|      0|        Button("ESC", action: {
   18|      0|            print("按了 ESC")
   19|      0|        })
   20|      0|        .keyboardShortcut(.cancelAction) // ESC 键
   21|      0|        
   22|      0|        Button("CMD + p") {
   23|      0|            print("按了 CMD + p")
   24|      0|        }
   25|      0|        .keyboardShortcut("p")
   26|      0|        
   27|      0|        Button("SHIFT + p") {
   28|      0|            print("按了 SHIFT + p")
   29|      0|        }
   30|      0|        .keyboardShortcut("p", modifiers: [.shift])
   31|      0|        
   32|      0|    }
   33|       |}
   34|       |
   35|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayLabelView.swift:
    1|       |//
    2|       |//  PlayLabelView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/17.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayLabelView: View {
   11|      0|    var body: some View {
   12|      0|        VStack(spacing: 10) {
   13|      0|            Label("一个 Label", systemImage: "bolt.circle")
   14|      0|            
   15|      0|            Label("只显示 icon", systemImage: "heart.fill")
   16|      0|                .labelStyle(.iconOnly)
   17|      0|                .foregroundColor(.red)
   18|      0|            
   19|      0|            // 自建 Label
   20|      0|            Label {
   21|      0|                Text("自建 Label")
   22|      0|                    .foregroundColor(.orange)
   23|      0|                    .bold()
   24|      0|                    .font(.largeTitle)
   25|      0|                    .padding()
   26|      0|                    .background(.black.opacity(0.5))
   27|      0|                    .clipShape(Capsule())
   28|      0|                    .shadow(color: .black, radius: 1, x: 0, y: 2)
   29|      0|            } icon: {
   30|      0|                Image("p3")
   31|      0|                    .resizable()
   32|      0|                    .aspectRatio(contentMode: .fit)
   33|      0|                    .frame(width: 30)
   34|      0|                    .shadow(color: .black, radius: 1, x: 0, y: 2)
   35|      0|            }
   36|      0|
   37|      0|            
   38|      0|            // 自定义 LabelStyle
   39|      0|            Label("有边框的 Label", systemImage: "b.square.fill")
   40|      0|                .labelStyle(.border)
   41|      0|                
   42|      0|            Label("仅标题有边框", systemImage: "text.bubble")
   43|      0|                .labelStyle(.borderOnlyTitle)
   44|      0|            
   45|      0|            // 扩展的 Label
   46|      0|            Label("扩展的 Label", originalSystemImage: "cloud.sun.bolt.fill")
   47|      0|            
   48|      0|        } // end VStack
   49|      0|    } // end body
   50|       |}
   51|       |
   52|       |// 对 Label 做扩展
   53|       |extension Label where Title == Text, Icon == Image {
   54|      0|    init(_ title: LocalizedStringKey, originalSystemImage systemImageString: String) {
   55|      0|        self.init {
   56|      0|            Text(title)
   57|      0|        } icon: {
   58|      0|            Image(systemName: systemImageString)
   59|      0|                .renderingMode(.original) // 让 SFSymbol 显示本身的颜色
   60|      0|        }
   61|      0|
   62|      0|    }
   63|       |}
   64|       |
   65|       |// 添加自定义 LabelStyle，用来加上边框
   66|       |struct BorderLabelStyle: LabelStyle {
   67|      0|    func makeBody(configuration: Configuration) -> some View {
   68|      0|        Label(configuration)
   69|      0|            .padding()
   70|      0|            .overlay(RoundedRectangle(cornerRadius: 20)
   71|      0|                        .stroke(.purple, lineWidth: 4))
   72|      0|            .shadow(color: .black, radius: 4, x: 0, y: 5)
   73|      0|            .labelStyle(.automatic) // 样式擦除器，防止样式被 .iconOnly、.titleOnly 这样的 LabelStyle 擦除了样式。
   74|      0|    }
   75|       |}
   76|       |extension LabelStyle where Self == BorderLabelStyle {
   77|      0|    internal static var border: BorderLabelStyle {
   78|      0|        BorderLabelStyle()
   79|      0|    }
   80|       |}
   81|       |
   82|       |// 只给标题加边框
   83|       |struct BorderOnlyTitleLabelStyle: LabelStyle {
   84|      0|    func makeBody(configuration: Configuration) -> some View {
   85|      0|        HStack {
   86|      0|            configuration.icon
   87|      0|            configuration.title
   88|      0|                .padding()
   89|      0|                .overlay(RoundedRectangle(cornerRadius: 20)
   90|      0|                            .stroke(.pink, lineWidth: 4))
   91|      0|                .shadow(color: .black, radius: 1, x: 0, y: 1)
   92|      0|                .labelStyle(.automatic)
   93|      0|        }
   94|      0|    }
   95|       |}
   96|       |extension LabelStyle where Self == BorderOnlyTitleLabelStyle {
   97|      0|    internal static var borderOnlyTitle: BorderOnlyTitleLabelStyle {
   98|      0|        BorderOnlyTitleLabelStyle()
   99|      0|    }
  100|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayLazyVGridAndLazyHGridView.swift:
    1|       |//
    2|       |//  PlayLazyVGridAndLazyHGridView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/25.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayLazyVGridAndLazyHGridView: View {
   11|      0|    @State private var colors: [String:Color] = [
   12|      0|        "red" : .red,
   13|      0|        "orange" : .orange,
   14|      0|        "yellow" : .yellow,
   15|      0|        "green" : .green,
   16|      0|        "mint" : .mint,
   17|      0|        "teal" : .teal,
   18|      0|        "cyan" : .cyan,
   19|      0|        "blue" : .blue,
   20|      0|        "indigo" : .indigo,
   21|      0|        "purple" : .purple,
   22|      0|        "pink" : .pink,
   23|      0|        "brown" : .brown,
   24|      0|        "gray" : .gray,
   25|      0|        "black" : .black
   26|      0|    ]
   27|       |    
   28|      0|    var body: some View {
   29|      0|        ScrollView {
   30|      0|            LazyVGrid(columns: [
   31|      0|                GridItem(.adaptive(minimum: 50), spacing: 10)
   32|      0|            ], pinnedViews: [.sectionHeaders]) {
   33|      0|                Section(header:
   34|      0|                            Text("🎨调色板")
   35|      0|                            .font(.title)
   36|      0|                            .frame(maxWidth: .infinity, maxHeight: .infinity)
   37|      0|                                .background(RoundedRectangle(cornerRadius: 0)
   38|      0|                                                .fill(.black.opacity(0.1)))
   39|      0|                ) {
   40|      0|                    ForEach(Array(colors.keys), id: \.self) { k in
   41|      0|                        colors[k].frame(height:Double(Int.random(in: 50...150)))
   42|      0|                            .overlay(
   43|      0|                                Text(k)
   44|      0|                            )
   45|      0|                            .shadow(color: .black, radius: 2, x: 0, y: 2)
   46|      0|                    }
   47|      0|                }
   48|      0|            }
   49|      0|            .padding()
   50|      0|            
   51|      0|            LazyVGrid(columns: [
   52|      0|                GridItem(.adaptive(minimum: 20), spacing: 10)
   53|      0|            ]) {
   54|      0|                Section(header: Text("图标集").font(.title)) {
   55|      0|                    ForEach(1...30, id: \.self) { i in
   56|      0|                        Image("p\(i)")
   57|      0|                            .resizable()
   58|      0|                            .aspectRatio(contentMode: .fit)
   59|      0|                            .shadow(color: .black, radius: 2, x: 0, y: 2)
   60|      0|                    }
   61|      0|                }
   62|      0|            }
   63|      0|            .padding()
   64|      0|        }
   65|      0|    }
   66|       |}
   67|       |
   68|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayLazyVStackAndLazyHStackView.swift:
    1|       |//
    2|       |//  PlayLazyVStackAndLazyHStackView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/25.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayLazyVStackAndLazyHStackView: View {
   11|      0|    var body: some View {
   12|      0|        ScrollView {
   13|      0|            LazyVStack {
   14|      0|                ForEach(1...300, id: \.self) { i in
   15|      0|                    PLHSRowView(i: i)
   16|      0|                }
   17|      0|            }
   18|      0|        }
   19|      0|    }
   20|       |}
   21|       |
   22|       |struct PLHSRowView: View {
   23|       |    let i: Int
   24|      0|    var body: some View {
   25|      0|        Text("第 \(i) 个")
   26|      0|    }
   27|      0|    init(i: Int) {
   28|      0|        print("第 \(i) 个初始化了") // 用来查看什么时候创建的。
   29|      0|        self.i = i
   30|      0|    }
   31|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayLinkView.swift:
    1|       |//
    2|       |//  PlayLinkView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/16.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayLinkView: View {
   11|      0|    @Environment(\.openURL) var openURL
   12|      0|    var aStr: AttributedString {
   13|      0|        var a = AttributedString("戴铭的博客")
   14|      0|        a.link = URL(string: "https://ming1016.github.io/")
   15|      0|        return a
   16|      0|    }
   17|      0|    var body: some View {
   18|      0|        VStack {
   19|      0|            // 普通
   20|      0|            Link("前往 www.starming.com", destination: URL(string: "http://www.starming.com")!)
   21|      0|                .buttonStyle(.borderedProminent)
   22|      0|            Link(destination: URL(string: "https://twitter.com/daiming_cn")!) {
   23|      0|                Label("My Twitter", systemImage: "message.circle.fill")
   24|      0|            }
   25|      0|            .onOpenURL { url in
   26|      0|                print(url.absoluteString)
   27|      0|            }
   28|      0|            
   29|      0|            // AttributedString 链接
   30|      0|            Text(aStr)
   31|      0|            
   32|      0|            // markdown 链接
   33|      0|            Text("[Go Ming's GitHub](https://github.com/ming1016)")
   34|      0|            
   35|      0|            // 控件使用 OpenURL
   36|      0|            Link("小册子源码", destination: URL(string: "https://github.com/KwaiAppTeam/SwiftPamphletApp")!)
   37|      0|                .environment(\.openURL, OpenURLAction { url in
   38|      0|                    return .systemAction
   39|      0|                    /// return .handled 不会返回系统打开浏览器动作，只会处理 return 前的事件。
   40|      0|                    /// .discard 和 .handled 类似。
   41|      0|                    /// .systemAction(URL(string: "https://www.anotherurl.com")!) 可以返回另外一个 url 来替代指定的url
   42|      0|                })
   43|      0|            
   44|      0|            // 扩展 View 后更简洁的使用 OpenURL
   45|      0|            Link("戴铭的微博", destination: URL(string: "https://weibo.com/allstarming")!)
   46|      0|                .goOpenURL { url in
   47|      0|                    print(url.absoluteString)
   48|      0|                    return .systemAction
   49|      0|                }
   50|      0|            
   51|      0|            // 根据内容返回不同链接
   52|      0|            Text("戴铭博客有好几个，存在[GitHub Page](github)、[自建服务器](starming)和[知乎](zhihu)上")
   53|      0|                .environment(\.openURL, OpenURLAction { url in
   54|      0|                    switch url.absoluteString {
   55|      0|                    case "github":
   56|      0|                        return .systemAction(URL(string: "https://ming1016.github.io/")!)
   57|      0|                    case "starming":
   58|      0|                        return .systemAction(URL(string: "http://www.starming.com")!)
   59|      0|                    case "zhihu":
   60|      0|                        return .systemAction(URL(string: "https://www.zhihu.com/people/starming/posts")!)
   61|      0|                    default:
   62|      0|                        return .handled
   63|      0|                    }
   64|      0|                })
   65|      0|        } // end VStack
   66|      0|        .padding()
   67|      0|        
   68|      0|    }
   69|       |    
   70|       |    // View 支持 openURL 的能力
   71|      0|    func goUrl(_ url: URL, done: @escaping (_ accepted: Bool) -> Void) {
   72|      0|        openURL(url, completion: done)
   73|      0|    }
   74|       |}
   75|       |
   76|       |// 为 View 扩展一个 OpenURL 方法
   77|       |extension View {
   78|      0|    func goOpenURL(done: @escaping (URL) -> OpenURLAction.Result) -> some View {
   79|      0|        environment(\.openURL, OpenURLAction(handler: done))
   80|      0|    }
   81|       |}
   82|       |
   83|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayListView.swift:
    1|       |//
    2|       |//  PlayListView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/22.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayListView: View {
   11|      0|    @StateObject var l: PLVM = PLVM()
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc12PlayListViewV2_l33_74934A1DA7CBF5357AF3886606B04002LL7SwiftUI11StateObjectVyAA4PLVMCGvpfi
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc12PlayListViewV2_l33_74934A1DA7CBF5357AF3886606B04002LL7SwiftUI11StateObjectVyAA4PLVMCGvpfiAJycfu_AJycfu0_
  ------------------
   12|       |    @State private var s: String = ""
   13|       |    
   14|      0|    var outlineModel = [
   15|      0|        POutlineModel(title: "文件夹一", iconName: "folder.fill", children: [
   16|      0|            POutlineModel(title: "个人", iconName: "person.crop.circle.fill"),
   17|      0|            POutlineModel(title: "群组", iconName: "person.2.circle.fill"),
   18|      0|            POutlineModel(title: "加好友", iconName: "person.badge.plus")
   19|      0|        ]),
   20|      0|        POutlineModel(title: "文件夹二", iconName: "folder.fill", children: [
   21|      0|            POutlineModel(title: "晴天", iconName: "sun.max.fill"),
   22|      0|            POutlineModel(title: "夜间", iconName: "moon.fill"),
   23|      0|            POutlineModel(title: "雨天", iconName: "cloud.rain.fill", children: [
   24|      0|                POutlineModel(title: "雷加雨", iconName: "cloud.bolt.rain.fill"),
   25|      0|                POutlineModel(title: "太阳雨", iconName: "cloud.sun.rain.fill")
   26|      0|            ])
   27|      0|        ]),
   28|      0|        POutlineModel(title: "文件夹三", iconName: "folder.fill", children: [
   29|      0|            POutlineModel(title: "电话", iconName: "phone"),
   30|      0|            POutlineModel(title: "拍照", iconName: "camera.circle.fill"),
   31|      0|            POutlineModel(title: "提醒", iconName: "bell")
   32|      0|        ])
   33|      0|    ]
   34|       |    
   35|      0|    var body: some View {
   36|      0|        HStack {
   37|      0|            // List 通过$语法可以将集合的元素转换成可绑定的值
   38|      0|            List {
   39|      0|                ForEach($l.ls) { $d in
   40|      0|                    PRowView(s: d.s, i: d.i)
   41|      0|                        .listRowInsets(EdgeInsets(top: 5, leading: 15, bottom: 5, trailing: 15))
   42|      0|                        .listRowBackground(Color.black.opacity(0.2))
   43|      0|                }
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc12PlayListViewV4bodyQrvg7SwiftUI05TupleC0VyAE0C0PAEE8onChange2of7performQrqd___yqd__ctSQRd__lFQOyAiEE10searchable4text9placement6promptQrAE7BindingVySSG_AE20SearchFieldPlacementVAE4TextVSgtFQOyAiEE11refreshable6actionQryyYaYbc_tFQOyAE0B0Vys5NeverOAE7ForEachVyARySayAA7PLModelVGG10Foundation4UUIDVAiEE17listRowBackgroundyQrqd__SgAeHRd__lFQOyAiEE13listRowInsetsyQrAE10EdgeInsetsVSgFQOyAA04PRowC0V_Qo__AE5ColorVQo_GG_Qo__Qo__SSQo__AE7DividerVAiEE7paddingyQrAE4EdgeO3SetV_12CoreGraphics7CGFloatVSgtFQOyAE6VStackVyAGyAA07PCustombC0VyA7_A19_G_AE6ButtonVyAWGtGG_Qo_A30_A0_yA2_AE12OutlineGroupVySayAA13POutlineModelVGA11_AE5LabelVyAwE5ImageVGA60_AE15DisclosureGroupVyA60_AE23OutlineSubgroupChildrenVGGGA30_AiEEA31_yQrA35__A39_tFQOyA41_yAGyAW_AA09PCOutlinebC0VyA55_A60_GtGG_Qo_A30_A41_yAGyAW_A66_AWA0_yA2_A4_yA55_A11_AE7SectionVyA60_A66_AE05EmptyC0VGGGtGGtGyXEfU_A24_yXEfU_A23_ARyA6_Gcfu_
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc12PlayListViewV4bodyQrvg7SwiftUI05TupleC0VyAE0C0PAEE8onChange2of7performQrqd___yqd__ctSQRd__lFQOyAiEE10searchable4text9placement6promptQrAE7BindingVySSG_AE20SearchFieldPlacementVAE4TextVSgtFQOyAiEE11refreshable6actionQryyYaYbc_tFQOyAE0B0Vys5NeverOAE7ForEachVyARySayAA7PLModelVGG10Foundation4UUIDVAiEE17listRowBackgroundyQrqd__SgAeHRd__lFQOyAiEE13listRowInsetsyQrAE10EdgeInsetsVSgFQOyAA04PRowC0V_Qo__AE5ColorVQo_GG_Qo__Qo__SSQo__AE7DividerVAiEE7paddingyQrAE4EdgeO3SetV_12CoreGraphics7CGFloatVSgtFQOyAE6VStackVyAGyAA07PCustombC0VyA7_A19_G_AE6ButtonVyAWGtGG_Qo_A30_A0_yA2_AE12OutlineGroupVySayAA13POutlineModelVGA11_AE5LabelVyAwE5ImageVGA60_AE15DisclosureGroupVyA60_AE23OutlineSubgroupChildrenVGGGA30_AiEEA31_yQrA35__A39_tFQOyA41_yAGyAW_AA09PCOutlinebC0VyA55_A60_GtGG_Qo_A30_A41_yAGyAW_A66_AWA0_yA2_A4_yA55_A11_AE7SectionVyA60_A66_AE05EmptyC0VGGGtGGtGyXEfU_A24_yXEfU_A23_ARyA6_Gcfu_A23_A84_cfU_
  ------------------
   44|      0|            }
   45|      0|            .refreshable {
   46|      0|                // 下拉刷新
   47|      0|            }
   48|      0|            .searchable(text: $s) // 搜索
   49|      0|            .onChange(of: s) { newValue in
   50|      0|                print("搜索关键字：\(s)")
   51|      0|            }
   52|      0|            
   53|      0|            Divider()
   54|      0|            
   55|      0|            // 自定义 List
   56|      0|            VStack {
   57|      0|                PCustomListView($l.ls) { $d in
   58|      0|                    PRowView(s: d.s, i: d.i)
   59|      0|                }
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc12PlayListViewV4bodyQrvg7SwiftUI05TupleC0VyAE0C0PAEE8onChange2of7performQrqd___yqd__ctSQRd__lFQOyAiEE10searchable4text9placement6promptQrAE7BindingVySSG_AE20SearchFieldPlacementVAE4TextVSgtFQOyAiEE11refreshable6actionQryyYaYbc_tFQOyAE0B0Vys5NeverOAE7ForEachVyARySayAA7PLModelVGG10Foundation4UUIDVAiEE17listRowBackgroundyQrqd__SgAeHRd__lFQOyAiEE13listRowInsetsyQrAE10EdgeInsetsVSgFQOyAA04PRowC0V_Qo__AE5ColorVQo_GG_Qo__Qo__SSQo__AE7DividerVAiEE7paddingyQrAE4EdgeO3SetV_12CoreGraphics7CGFloatVSgtFQOyAE6VStackVyAGyAA07PCustombC0VyA7_A19_G_AE6ButtonVyAWGtGG_Qo_A30_A0_yA2_AE12OutlineGroupVySayAA13POutlineModelVGA11_AE5LabelVyAwE5ImageVGA60_AE15DisclosureGroupVyA60_AE23OutlineSubgroupChildrenVGGGA30_AiEEA31_yQrA35__A39_tFQOyA41_yAGyAW_AA09PCOutlinebC0VyA55_A60_GtGG_Qo_A30_A41_yAGyAW_A66_AWA0_yA2_A4_yA55_A11_AE7SectionVyA60_A66_AE05EmptyC0VGGGtGGtGyXEfU_A48_yXEfU2_A19_ARyA6_Gcfu_
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc12PlayListViewV4bodyQrvg7SwiftUI05TupleC0VyAE0C0PAEE8onChange2of7performQrqd___yqd__ctSQRd__lFQOyAiEE10searchable4text9placement6promptQrAE7BindingVySSG_AE20SearchFieldPlacementVAE4TextVSgtFQOyAiEE11refreshable6actionQryyYaYbc_tFQOyAE0B0Vys5NeverOAE7ForEachVyARySayAA7PLModelVGG10Foundation4UUIDVAiEE17listRowBackgroundyQrqd__SgAeHRd__lFQOyAiEE13listRowInsetsyQrAE10EdgeInsetsVSgFQOyAA04PRowC0V_Qo__AE5ColorVQo_GG_Qo__Qo__SSQo__AE7DividerVAiEE7paddingyQrAE4EdgeO3SetV_12CoreGraphics7CGFloatVSgtFQOyAE6VStackVyAGyAA07PCustombC0VyA7_A19_G_AE6ButtonVyAWGtGG_Qo_A30_A0_yA2_AE12OutlineGroupVySayAA13POutlineModelVGA11_AE5LabelVyAwE5ImageVGA60_AE15DisclosureGroupVyA60_AE23OutlineSubgroupChildrenVGGGA30_AiEEA31_yQrA35__A39_tFQOyA41_yAGyAW_AA09PCOutlinebC0VyA55_A60_GtGG_Qo_A30_A41_yAGyAW_A66_AWA0_yA2_A4_yA55_A11_AE7SectionVyA60_A66_AE05EmptyC0VGGGtGGtGyXEfU_A48_yXEfU2_A19_ARyA6_Gcfu_A19_A84_cfU_
  ------------------
   60|      0|                // 添加数据
   61|      0|                Button {
   62|      0|                    l.ls.append(PLModel(s: "More", i: 0))
   63|      0|                } label: {
   64|      0|                    Text("添加")
   65|      0|                }
   66|      0|            }
   67|      0|            .padding()
   68|      0|            
   69|      0|            Divider()
   70|      0|            
   71|      0|            // 使用大纲
   72|      0|            List(outlineModel, children: \.children) { i in
   73|      0|                Label(i.title, systemImage: i.iconName)
   74|      0|            }
   75|      0|            
   76|      0|            Divider()
   77|      0|            
   78|      0|            // 自定义大纲视图
   79|      0|            VStack {
   80|      0|                Text("可点击标题展开")
   81|      0|                    .font(.headline)
   82|      0|                PCOutlineListView(d: outlineModel, c: \.children) { i in
   83|      0|                    Label(i.title, systemImage: i.iconName)
   84|      0|                }
   85|      0|            }
   86|      0|            .padding()
   87|      0|            
   88|      0|            Divider()
   89|      0|            
   90|      0|            // 使用 OutlineGroup 实现大纲视图
   91|      0|            VStack {
   92|      0|                Text("OutlineGroup 实现大纲")
   93|      0|                
   94|      0|                OutlineGroup(outlineModel, children: \.children) { i in
   95|      0|                    Label(i.title, systemImage: i.iconName)
   96|      0|                }
   97|      0|                
   98|      0|                // OutlineGroup 和 List 结合
   99|      0|                Text("OutlineGroup 和 List 结合")
  100|      0|                List {
  101|      0|                    ForEach(outlineModel) { s in
  102|      0|                        Section {
  103|      0|                            OutlineGroup(s.children ?? [], children: \.children) { i in
  104|      0|                                Label(i.title, systemImage: i.iconName)
  105|      0|                            }
  106|      0|                        } header: {
  107|      0|                            Label(s.title, systemImage: s.iconName)
  108|      0|                        }
  109|      0|
  110|      0|                    } // end ForEach
  111|      0|                } // end List
  112|      0|            } // end VStack
  113|      0|        } // end HStack
  114|      0|    } // end body
  115|       |}
  116|       |
  117|       |// MARK: - 自定义大纲视图
  118|       |struct PCOutlineListView<D, Content>: View where D: RandomAccessCollection, D.Element: Identifiable, Content: View {
  119|       |    private let v: PCOutlineView<D, Content>
  120|       |    
  121|      0|    init(d: D, c: KeyPath<D.Element, D?>, content: @escaping (D.Element) -> Content) {
  122|      0|        self.v = PCOutlineView(d: d, c: c, content: content)
  123|      0|    }
  124|       |    
  125|      0|    var body: some View {
  126|      0|        List {
  127|      0|            v
  128|      0|        }
  129|      0|    }
  130|       |}
  131|       |
  132|       |struct PCOutlineView<D, Content>: View where D: RandomAccessCollection, D.Element: Identifiable, Content: View {
  133|       |    let d: D
  134|       |    let c: KeyPath<D.Element, D?>
  135|       |    let content: (D.Element) -> Content
  136|       |    @State var isExpanded = true // 控制初始是否展开的状态
  137|       |    
  138|      0|    var body: some View {
  139|      0|        ForEach(d) { i in
  140|      0|            if let sub = i[keyPath: c] {
  141|      0|                PCDisclosureGroup(content: PCOutlineView(d: sub, c: c, content: content), label: content(i))
  142|      0|            } else {
  143|      0|                content(i)
  144|      0|            } // end if
  145|      0|        } // end ForEach
  146|      0|    } // end body
  147|       |}
  148|       |
  149|       |struct PCDisclosureGroup<C, L>: View where C: View, L: View {
  150|       |    @State var isExpanded = false
  151|       |    var content: C
  152|       |    var label: L
  153|      0|    var body: some View {
  154|      0|        DisclosureGroup(isExpanded: $isExpanded) {
  155|      0|            content
  156|      0|        } label: {
  157|      0|            Button {
  158|      0|                isExpanded.toggle()
  159|      0|            } label: {
  160|      0|                label
  161|      0|            }
  162|      0|            .buttonStyle(.plain)
  163|      0|        }
  164|      0|    }
  165|       |}
  166|       |
  167|       |// MARK: - 大纲模式数据模型
  168|       |struct POutlineModel: Hashable, Identifiable {
  169|      0|    var id = UUID()
  170|       |    var title: String
  171|       |    var iconName: String
  172|       |    var children: [POutlineModel]?
  173|       |}
  174|       |
  175|       |// MARK: - List 的抽象，数据兼容任何集合类型
  176|       |struct PCustomListView<D: RandomAccessCollection & MutableCollection & RangeReplaceableCollection, Content: View>: View where D.Element: Identifiable {
  177|       |    @Binding var data: D
  178|       |    var content: (Binding<D.Element>) -> Content
  179|       |    
  180|      0|    init(_ data: Binding<D>, content: @escaping (Binding<D.Element>) -> Content) {
  181|      0|        self._data = data
  182|      0|        self.content = content
  183|      0|    }
  184|       |    
  185|      0|    var body: some View {
  186|      0|        List {
  187|      0|            Section {
  188|      0|                ForEach($data, content: content)
  189|      0|                    .onMove { indexSet, offset in
  190|      0|                        data.move(fromOffsets: indexSet, toOffset: offset)
  191|      0|                    }
  192|      0|                    .onDelete { indexSet in
  193|      0|                        data.remove(atOffsets: indexSet) // macOS 暂不支持
  194|      0|                    }
  195|      0|            } header: {
  196|      0|                Text("第一栏，共 \(data.count) 项")
  197|      0|            } footer: {
  198|      0|                Text("The End")
  199|      0|            }
  200|      0|        }
  201|      0|        .listStyle(.plain) // 有.automatic、.inset、.plain、sidebar，macOS 暂不支持的有.grouped 和 .insetGrouped
  202|      0|    }
  203|       |}
  204|       |
  205|       |// MARK: - Cell 视图
  206|       |struct PRowView: View {
  207|       |    var s: String
  208|       |    var i: Int
  209|      0|    var body: some View {
  210|      0|        HStack {
  211|      0|            Text("\(i)：")
  212|      0|            Text(s)
  213|      0|        }
  214|      0|    }
  215|       |}
  216|       |
  217|       |// MARK: - 数据模型设计
  218|       |struct PLModel: Hashable, Identifiable {
  219|      0|    let id = UUID()
  220|       |    var s: String
  221|       |    var i: Int
  222|       |}
  223|       |
  224|       |final class PLVM: ObservableObject {
  225|       |    @Published var ls: [PLModel]
  226|      0|    init() {
  227|      0|        ls = [PLModel]()
  228|      0|        for i in 0...20 {
  229|      0|            ls.append(PLModel(s: "\(i)", i: i))
  230|      0|        }
  231|      0|    }
  232|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayNavigationView.swift:
    1|       |//
    2|       |//  PlayNavigationView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/24.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayNavigationView: View {
   11|      0|    let lData = 1...10
   12|      0|    var body: some View {
   13|      0|        NavigationView {
   14|      0|            ZStack {
   15|      0|                LinearGradient(colors: [.pink, .orange], startPoint: .topLeading, endPoint: .bottomTrailing)
   16|      0|                    .ignoresSafeArea()
   17|      0|                
   18|      0|                List(lData, id: \.self) { i in
   19|      0|                    NavigationLink {
   20|      0|                        PNavDetailView(contentStr: "\(i)")
   21|      0|                    } label: {
   22|      0|                        Text("\(i)")
   23|      0|                    }
   24|      0|                }
   25|      0|            }
   26|      0|            
   27|      0|            ZStack {
   28|      0|                LinearGradient(colors: [.mint, .yellow], startPoint: .topLeading, endPoint: .bottomTrailing)
   29|      0|                    .ignoresSafeArea()
   30|      0|                
   31|      0|                VStack {
   32|      0|                    Text("一个 NavigationView 的示例")
   33|      0|                        .bold()
   34|      0|                        .font(.largeTitle)
   35|      0|                        .shadow(color: .white, radius: 9, x: 0, y: 0)
   36|      0|                        .scaleEffect(2)
   37|      0|                }
   38|      0|            }
   39|      0|            .safeAreaInset(edge: .bottom) {
   40|      0|                HStack {
   41|      0|                    Button("bottom1") {}
   42|      0|                    .font(.headline)
   43|      0|                    Button("bottom2") {}
   44|      0|                    Button("bottom3") {}
   45|      0|                    Spacer()
   46|      0|                }
   47|      0|                .padding(5)
   48|      0|                .background(LinearGradient(colors: [.purple, .blue], startPoint: .topLeading, endPoint: .bottomTrailing))
   49|      0|            }
   50|      0|        }
   51|      0|        .foregroundColor(.white)
   52|      0|        .navigationTitle("数字列表")
   53|      0|        .toolbar {
   54|      0|            // placement 共有 keyboard、destructiveAction、cancellationAction、confirmationAction、status、primaryAction、navigation、principal、automatic 这些
   55|      0|            ToolbarItem(placement: .primaryAction) {
   56|      0|                Button("primaryAction") {}
   57|      0|                .background(.ultraThinMaterial)
   58|      0|                .font(.headline)
   59|      0|            }
   60|      0|            // 通过 ToolbarItemGroup 可以简化相同位置 ToolbarItem 的编写。
   61|      0|            ToolbarItemGroup(placement: .navigation) {
   62|      0|                Button("返回") {}
   63|      0|                Button("前进") {}
   64|      0|            }
   65|      0|            PCToolbar(doDestruct: {
   66|      0|                print("删除了")
   67|      0|            }, doCancel: {
   68|      0|                print("取消了")
   69|      0|            }, doConfirm: {
   70|      0|                print("确认了")
   71|      0|            })
   72|      0|            ToolbarItem(placement: .status) {
   73|      0|                Button("status") {}
   74|      0|            }
   75|      0|            ToolbarItem(placement: .principal) {
   76|      0|                Button("principal") {
   77|      0|                    
   78|      0|                }
   79|      0|            }
   80|      0|            ToolbarItem(placement: .keyboard) {
   81|      0|                Button("Touch Bar Button") {}
   82|      0|            }
   83|      0|        } // end toolbar
   84|      0|    }
   85|       |}
   86|       |
   87|       |// MARK: - NavigationView 的目的页面
   88|       |struct PNavDetailView: View {
   89|      0|    @Environment(\.presentationMode) var pMode: Binding<PresentationMode>
   90|       |    var contentStr: String
   91|      0|    var body: some View {
   92|      0|        ZStack {
   93|      0|            LinearGradient(colors: [.purple, .blue], startPoint: .topLeading, endPoint: .bottomTrailing)
   94|      0|                .ignoresSafeArea()
   95|      0|            VStack {
   96|      0|                Text(contentStr)
   97|      0|                Button("返回") {
   98|      0|                    pMode.wrappedValue.dismiss()
   99|      0|                }
  100|      0|            }
  101|      0|        } // end ZStack
  102|      0|    } // end body
  103|       |}
  104|       |
  105|       |// MARK: - 自定义 toolbar
  106|       |// 通过 ToolbarContent 创建可重复使用的 toolbar 组
  107|       |struct PCToolbar: ToolbarContent {
  108|       |    let doDestruct: () -> Void
  109|       |    let doCancel: () -> Void
  110|       |    let doConfirm: () -> Void
  111|       |    
  112|      0|    var body: some ToolbarContent {
  113|      0|        ToolbarItem(placement: .destructiveAction) {
  114|      0|            Button("删除", action: doDestruct)
  115|      0|        }
  116|      0|        ToolbarItem(placement: .cancellationAction) {
  117|      0|            Button("取消", action: doCancel)
  118|      0|        }
  119|      0|        ToolbarItem(placement: .confirmationAction) {
  120|      0|            Button("确定", action: doConfirm)
  121|      0|        }
  122|      0|    }
  123|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayPickerView.swift:
    1|       |//
    2|       |//  PlayPickerView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/3/2.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayPickerView: View {
   11|       |    @State private var select = 1
   12|      0|    @State private var color = Color.red.opacity(0.3)
   13|       |    
   14|      0|    var dateFt: DateFormatter {
   15|      0|        let ft = DateFormatter()
   16|      0|        ft.dateStyle = .long
   17|      0|        return ft
   18|      0|    }
   19|      0|    @State private var date = Date()
   20|       |    
   21|      0|    var body: some View {
   22|      0|        
   23|      0|        // 默认是下拉的风格
   24|      0|        Form {
   25|      0|            Section("选区") {
   26|      0|                Picker("选一个", selection: $select) {
   27|      0|                    Text("1")
   28|      0|                        .tag(1)
   29|      0|                    Text("2")
   30|      0|                        .tag(2)
   31|      0|                }
   32|      0|            }
   33|      0|        }
   34|      0|        .padding()
   35|      0|        
   36|      0|        // Segment 风格，
   37|      0|        Picker("选一个", selection: $select) {
   38|      0|            Text("one")
   39|      0|                .tag(1)
   40|      0|            Text("two")
   41|      0|                .tag(2)
   42|      0|        }
   43|      0|        .pickerStyle(SegmentedPickerStyle())
   44|      0|        .padding()
   45|      0|        
   46|      0|        // 颜色选择器
   47|      0|        ColorPicker("选一个颜色", selection: $color, supportsOpacity: false)
   48|      0|            .padding()
   49|      0|        
   50|      0|        RoundedRectangle(cornerRadius: 8)
   51|      0|            .fill(color)
   52|      0|            .frame(width: 50, height: 50)
   53|      0|        
   54|      0|        // 时间选择器
   55|      0|        VStack {
   56|      0|            DatePicker(selection: $date, in: ...Date(), displayedComponents: .date) {
   57|      0|                Text("选时间")
   58|      0|            }
   59|      0|            
   60|      0|            DatePicker("选时间", selection: $date)
   61|      0|                .datePickerStyle(GraphicalDatePickerStyle())
   62|      0|                .frame(maxHeight: 400)
   63|      0|            
   64|      0|            Text("时间：\(date, formatter: dateFt)")
   65|      0|        }
   66|      0|        .padding()
   67|      0|    }
   68|       |}
   69|       |
   70|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayProgressView.swift:
    1|       |//
    2|       |//  PlayProgressView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/25.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayProgressView: View {
   11|       |    @State private var v: CGFloat = 0.0
   12|      0|    var body: some View {
   13|      0|        VStack {
   14|      0|            // 默认旋转
   15|      0|            ProgressView()
   16|      0|            
   17|      0|            // 有进度条
   18|      0|            ProgressView(value: v / 100)
   19|      0|                .tint(.yellow)
   20|      0|            
   21|      0|            ProgressView(value: v / 100) {
   22|      0|                Image(systemName: "music.note.tv")
   23|      0|            }
   24|      0|            .progressViewStyle(CircularProgressViewStyle(tint: .pink))
   25|      0|            
   26|      0|            // 自定义样式
   27|      0|            ProgressView(value: v / 100)
   28|      0|                .padding(.vertical)
   29|      0|                .progressViewStyle(PCProgressStyle1(borderWidth: 3))
   30|      0|            
   31|      0|            ProgressView(value: v / 100)
   32|      0|                .progressViewStyle(PCProgressStyle2())
   33|      0|                .frame(height:200)
   34|      0|            
   35|      0|            Slider(value: $v, in: 0...100, step: 1)
   36|      0|        }
   37|      0|        .padding(20)
   38|      0|    }
   39|       |}
   40|       |
   41|       |// 自定义 Progress 样式
   42|       |struct PCProgressStyle1: ProgressViewStyle {
   43|      0|    var lg = LinearGradient(colors: [.purple, .black, .blue], startPoint: .topLeading, endPoint: .bottomTrailing)
   44|       |    var borderWidth: Double = 2
   45|       |    
   46|      0|    func makeBody(configuration: Configuration) -> some View {
   47|      0|        let fc = configuration.fractionCompleted ?? 0
   48|      0|        
   49|      0|        return VStack {
   50|      0|            ZStack(alignment: .topLeading) {
   51|      0|                GeometryReader { g in
   52|      0|                    Rectangle()
   53|      0|                        .fill(lg)
   54|      0|                        .frame(maxWidth: g.size.width * CGFloat(fc))
   55|      0|                }
   56|      0|            }
   57|      0|            .frame(height: 20)
   58|      0|            .cornerRadius(10)
   59|      0|            .overlay(
   60|      0|                RoundedRectangle(cornerRadius: 10)
   61|      0|                    .stroke(lg, lineWidth: borderWidth)
   62|      0|            )
   63|      0|            // end ZStack
   64|      0|        } // end VStack
   65|      0|    }
   66|       |}
   67|       |
   68|       |struct PCProgressStyle2: ProgressViewStyle {
   69|      0|    var lg = LinearGradient(colors: [.orange, .yellow, .green, .blue, .purple], startPoint: .topLeading, endPoint: .bottomTrailing)
   70|       |    
   71|       |    var borderWidth: Double = 20
   72|       |    
   73|      0|    func makeBody(configuration: Configuration) -> some View {
   74|      0|        let fc = configuration.fractionCompleted ?? 0
   75|      0|        
   76|      0|        func strokeStyle(_ g: GeometryProxy) -> StrokeStyle {
   77|      0|            StrokeStyle(lineWidth: 0.1 * min(g.size.width, g.size.height), lineCap: .round)
   78|      0|        }
   79|      0|        
   80|      0|        return VStack {
   81|      0|            GeometryReader { g in
   82|      0|                ZStack {
   83|      0|                    Group {
   84|      0|                        Circle()
   85|      0|                            .trim(from: 0, to: 1)
   86|      0|                            .stroke(lg, style: strokeStyle(g))
   87|      0|                            .padding(borderWidth)
   88|      0|                            .opacity(0.2)
   89|      0|                        Circle()
   90|      0|                            .trim(from: 0, to: fc)
   91|      0|                            .stroke(lg, style: strokeStyle(g))
   92|      0|                            .padding(borderWidth)
   93|      0|                    }
   94|      0|                    .rotationEffect(.degrees(90 + 360 * 0.5), anchor: .center)
   95|      0|                    .offset(x: 0, y: 0.1 * min(g.size.width, g.size.height))
   96|      0|                }
   97|      0|                
   98|      0|                Text("读取 \(Int(fc * 100)) %")
   99|      0|                    .bold()
  100|      0|                    .font(.headline)
  101|      0|            }
  102|      0|            // end ZStack
  103|      0|        } // end VStack
  104|      0|    }
  105|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayScrollView.swift:
    1|       |//
    2|       |//  PlayScrollView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/28.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayScrollView: View {
   11|      0|    @State private var scrollOffset: CGFloat = .zero
   12|       |    
   13|      0|    var infoView: some View {
   14|      0|        GeometryReader { g in
   15|      0|            Text("移动了 \(Double(scrollOffset).formatted(.number.precision(.fractionLength(1)).rounded()))")
   16|      0|                .padding()
   17|      0|        }
   18|      0|    }
   19|       |    
   20|      0|    var body: some View {
   21|      0|        // 标准用法
   22|      0|        ScrollViewReader { s in
   23|      0|            ScrollView {
   24|      0|                ForEach(0..<300) { i in
   25|      0|                    Text("\(i)")
   26|      0|                        .id(i)
   27|      0|                }
   28|      0|            }
   29|      0|            Button("跳到150") {
   30|      0|                withAnimation {
   31|      0|                    s.scrollTo(150, anchor: .top)
   32|      0|                }
   33|      0|            } // end Button
   34|      0|        } // end ScrollViewReader
   35|      0|        
   36|      0|        // 自定义的 ScrollView 透出 offset 供使用
   37|      0|        ZStack {
   38|      0|            PCScrollView {
   39|      0|                ForEach(0..<100) { i in
   40|      0|                    Text("\(i)")
   41|      0|                }
   42|      0|            } whenMoved: { d in
   43|      0|                scrollOffset = d
   44|      0|            }
   45|      0|            infoView
   46|      0|            
   47|      0|        } // end ZStack
   48|      0|    } // end body
   49|       |}
   50|       |
   51|       |// MARK: - 自定义 ScrollView
   52|       |struct PCScrollView<C: View>: View {
   53|       |    let c: () -> C
   54|       |    let whenMoved: (CGFloat) -> Void
   55|       |    
   56|      0|    init(@ViewBuilder c: @escaping () -> C, whenMoved: @escaping (CGFloat) -> Void) {
   57|      0|        self.c = c
   58|      0|        self.whenMoved = whenMoved
   59|      0|    }
   60|       |    
   61|      0|    var offsetReader: some View {
   62|      0|        GeometryReader { g in
   63|      0|            Color.clear
   64|      0|                .preference(key: OffsetPreferenceKey.self, value: g.frame(in: .named("frameLayer")).minY)
   65|      0|        }
   66|      0|        .frame(height:0)
   67|      0|    }
   68|       |    
   69|      0|    var body: some View {
   70|      0|        ScrollView {
   71|      0|            offsetReader
   72|      0|            c()
   73|      0|                .padding(.top, -8)
   74|      0|        }
   75|      0|        .coordinateSpace(name: "frameLayer")
   76|      0|        .onPreferenceChange(OffsetPreferenceKey.self, perform: whenMoved)
   77|      0|    } // end body
   78|       |}
   79|       |
   80|       |private struct OffsetPreferenceKey: PreferenceKey {
   81|       |  static var defaultValue: CGFloat = .zero
   82|      0|  static func reduce(value: inout CGFloat, nextValue: () -> CGFloat) {}
   83|       |}
   84|       |
   85|       |
   86|       |
   87|       |
   88|       |
   89|       |
   90|       |
   91|       |
   92|       |
   93|       |
   94|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlaySliderView.swift:
    1|       |//
    2|       |//  PlaySliderView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/3/2.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlaySliderView: View {
   11|       |    @State var count: Double = 0
   12|      0|    var body: some View {
   13|      0|        Slider(value: $count, in: 0...100)
   14|      0|            .padding()
   15|      0|        Text("\(Int(count))")
   16|      0|    }
   17|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayStackView.swift:
    1|       |//
    2|       |//  PlayStackView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/22.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayStackView: View {
   11|      0|    var body: some View {
   12|      0|        // 默认是 VStack 竖排
   13|      0|        
   14|      0|        // 横排
   15|      0|        HStack {
   16|      0|            Text("左")
   17|      0|            Spacer()
   18|      0|            Text("右")
   19|      0|        }
   20|      0|        .padding()
   21|      0|        
   22|      0|        // Z 轴排
   23|      0|        ZStack(alignment: .top) {
   24|      0|            Image("logo")
   25|      0|            Text("戴铭的开发小册子")
   26|      0|                .font(.title)
   27|      0|                .bold()
   28|      0|                .foregroundColor(.white)
   29|      0|                .shadow(color: .black, radius: 1, x: 0, y: 2)
   30|      0|                .padding()
   31|      0|        }
   32|      0|        
   33|      0|        Color.cyan
   34|      0|            .cornerRadius(10)
   35|      0|            .frame(width: 100, height: 100)
   36|      0|            .overlay(
   37|      0|                Text("一段文字")
   38|      0|            )
   39|      0|    }
   40|       |}
   41|       |
   42|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayStepperView.swift:
    1|       |//
    2|       |//  PlayStepperView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/3/2.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayStepperView: View {
   11|       |    @State private var count: Int = 0
   12|      0|    var body: some View {
   13|      0|        Stepper(value: $count, step: 2) {
   14|      0|            Text("共\(count)")
   15|      0|        } onEditingChanged: { b in
   16|      0|            print(b)
   17|      0|        } // end Stepper
   18|      0|        
   19|      0|    }
   20|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlaySuperposedLayerView.swift:
    1|       |//
    2|       |//  PlaySuperposedLayerView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/28.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlaySuperposedLayerView: View {
   11|      0|    @StateObject var hudVM = PHUDVM()
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc23PlaySuperposedLayerViewV6_hudVM33_00B483A15BCE4E8EDCC59673AED99C5ALL7SwiftUI11StateObjectVyAA6PHUDVMCGvpfi
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc23PlaySuperposedLayerViewV6_hudVM33_00B483A15BCE4E8EDCC59673AED99C5ALL7SwiftUI11StateObjectVyAA6PHUDVMCGvpfiAJycfu_AJycfu0_
  ------------------
   12|       |    @State private var isShow = false
   13|       |    @State private var isShowAlert = false
   14|       |    @State private var isShowConfirmationDialog = false
   15|       |    @State private var isShowPopover = false
   16|       |    
   17|      0|    var body: some View {
   18|      0|        VStack {
   19|      0|            List {
   20|      0|                ForEach(0..<100) { i in
   21|      0|                    Text("\(i)")
   22|      0|                        .contextMenu {
   23|      0|                            // 在 macOS 上右键会出现的菜单
   24|      0|                            Button {
   25|      0|                                print("\(i) is clicked")
   26|      0|                            } label: {
   27|      0|                                Text("Click \(i)")
   28|      0|                            }
   29|      0|                        }
   30|      0|                }
   31|      0|            }
   32|      0|            .navigationTitle("列表")
   33|      0|            .toolbar {
   34|      0|                ToolbarItemGroup(placement: .automatic) {
   35|      0|                    Button("查看 Sheet") {
   36|      0|                        isShow = true
   37|      0|                    }
   38|      0|                    
   39|      0|                    Button("查看 Alert") {
   40|      0|                        isShowAlert = true
   41|      0|                    }
   42|      0|                    
   43|      0|                    Button("查看 confirmationDialog", role: .destructive) {
   44|      0|                        isShowConfirmationDialog = true
   45|      0|                    }
   46|      0|                    
   47|      0|                    // Popover 样式默认是弹出窗口置于按钮上方，指向底部。
   48|      0|                    Button("查看 Popover") {
   49|      0|                        isShowPopover = true
   50|      0|                    }
   51|      0|                    .popover(isPresented: $isShowPopover, attachmentAnchor: .point(.trailing), arrowEdge: .trailing) {
   52|      0|                        Text("Popover 的内容")
   53|      0|                            .padding()
   54|      0|                    }
   55|      0|                    
   56|      0|                } // end ToolbarItemGroup
   57|      0|            } // end toolbar
   58|      0|            .alert(isPresented: $isShowAlert) {
   59|      0|                Alert(title: Text("弹框标题"), message: Text("弹框内容"))
   60|      0|            }
   61|      0|            .sheet(isPresented: $isShow) {
   62|      0|                print("dismiss")
   63|      0|            } content: {
   64|      0|                VStack {
   65|      0|                    Label("Sheet", systemImage: "brain.head.profile")
   66|      0|                    Button("关闭") {
   67|      0|                        isShow = false
   68|      0|                    }
   69|      0|                }
   70|      0|                .padding(20)
   71|      0|            }
   72|      0|            .confirmationDialog("确定删除？", isPresented: $isShowConfirmationDialog, titleVisibility: .hidden) {
   73|      0|                Button("确定") {
   74|      0|                    // do good thing
   75|      0|                }
   76|      0|                .keyboardShortcut(.defaultAction) // 使用 keyboardShortcut 可以设置成为默认选项样式
   77|      0|                
   78|      0|                Button("不不", role: .cancel) {
   79|      0|                    // good choice
   80|      0|                }
   81|      0|                
   82|      0|            } message: {
   83|      0|                Text("这个东西还有点重要哦")
   84|      0|            }
   85|      0|            
   86|      0|            Button {
   87|      0|                hudVM.show(title: "您有一条新的短消息", systemImage: "ellipsis.bubble")
   88|      0|            } label: {
   89|      0|                Label("查看 HUD", systemImage: "switch.2")
   90|      0|            }
   91|      0|            .padding()
   92|      0|        }
   93|      0|        .environmentObject(hudVM)
   94|      0|        .hud(isShow: $hudVM.isShow) {
   95|      0|            Label(hudVM.title, systemImage: hudVM.systemImage)
   96|      0|        }
   97|      0|    }
   98|       |}
   99|       |
  100|       |// MARK: - 供全局使用的 HUD
  101|       |final class PHUDVM: ObservableObject {
  102|       |    @Published var isShow: Bool = false
  103|       |    var title: String = ""
  104|       |    var systemImage: String = ""
  105|       |    
  106|      0|    func show(title: String, systemImage: String) {
  107|      0|        self.title = title
  108|      0|        self.systemImage = systemImage
  109|      0|        withAnimation {
  110|      0|            isShow = true
  111|      0|        }
  112|      0|    }
  113|       |}
  114|       |
  115|       |// MARK: - 扩展 View 使其能够有 HUD 的能力
  116|       |extension View {
  117|       |    func hud<V: View>(
  118|       |        isShow: Binding<Bool>,
  119|       |        @ViewBuilder v: () -> V
  120|      0|    ) -> some View {
  121|      0|        ZStack(alignment: .top) {
  122|      0|            self
  123|      0|            
  124|      0|            if isShow.wrappedValue == true {
  125|      0|                PHUD(v: v)
  126|      0|                    .transition(AnyTransition.move(edge: .top).combined(with: .opacity))
  127|      0|                    .onAppear {
  128|      0|                        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
  129|      0|                            withAnimation {
  130|      0|                                isShow.wrappedValue = false
  131|      0|                            }
  132|      0|                        }
  133|      0|                    }
  134|      0|                    .zIndex(1)
  135|      0|                    .padding()
  136|      0|            }
  137|      0|        }
  138|      0|    }
  139|       |}
  140|       |
  141|       |// MARK: - 自定义 HUD
  142|       |struct PHUD<V: View>: View {
  143|       |    @ViewBuilder let v: V
  144|       |    
  145|      0|    var body: some View {
  146|      0|        v
  147|      0|            .padding()
  148|      0|            .foregroundColor(.black)
  149|      0|            .background(
  150|      0|                Capsule()
  151|      0|                    .foregroundColor(.white)
  152|      0|                    .shadow(color: .black.opacity(0.2), radius: 12, x: 0, y: 5)
  153|      0|            )
  154|      0|    }
  155|       |}
  156|       |
  157|       |
  158|       |
  159|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayTabView.swift:
    1|       |//
    2|       |//  PlayTabView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/3/1.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayTabView: View {
   11|       |    @State private var selection = 0
   12|       |    
   13|      0|    var body: some View {
   14|      0|        
   15|      0|        ZStack(alignment: .bottom) {
   16|      0|            TabView(selection: $selection) {
   17|      0|                Text("one")
   18|      0|                    .tabItem {
   19|      0|                        Text("首页")
   20|      0|                            .hidden()
   21|      0|                    }
   22|      0|                    .tag(0)
   23|      0|                Text("two")
   24|      0|                    .tabItem {
   25|      0|                        Text("二栏")
   26|      0|                    }
   27|      0|                    .tag(1)
   28|      0|                Text("three")
   29|      0|                    .tabItem {
   30|      0|                        Text("三栏")
   31|      0|                    }
   32|      0|                    .tag(2)
   33|      0|                Text("four")
   34|      0|                    .tag(3)
   35|      0|                Text("five")
   36|      0|                    .tag(4)
   37|      0|                Text("six")
   38|      0|                    .tag(5)
   39|      0|                Text("seven")
   40|      0|                    .tag(6)
   41|      0|                Text("eight")
   42|      0|                    .tag(7)
   43|      0|                Text("nine")
   44|      0|                    .tag(8)
   45|      0|                Text("ten")
   46|      0|                    .tag(9)
   47|      0|            } // end TabView
   48|      0|            
   49|      0|            
   50|      0|            HStack {
   51|      0|                Button("上一页") {
   52|      0|                    if selection > 0 {
   53|      0|                        selection -= 1
   54|      0|                    }
   55|      0|                }
   56|      0|                .keyboardShortcut(.cancelAction)
   57|      0|                Button("下一页") {
   58|      0|                    if selection < 9 {
   59|      0|                        selection += 1
   60|      0|                    }
   61|      0|                }
   62|      0|                .keyboardShortcut(.defaultAction)
   63|      0|                // end Button
   64|      0|            } // end HStack
   65|      0|            .padding()
   66|      0|        }
   67|      0|    }
   68|       |}
   69|       |
   70|       |
   71|       |
   72|       |
   73|       |
   74|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayTextEditorView.swift:
    1|       |//
    2|       |//  PlayTextEditView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/18.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |import CodeEditorView
   10|       |
   11|       |struct PlayTextEditorView: View {
   12|       |    // for TextEditor
   13|       |    @State private var txt: String = "一段可编辑文字...\n"
   14|       |    @State private var count: Int = 0
   15|       |    
   16|       |    // for CodeEditorView
   17|      0|    @Environment(\.colorScheme) private var colorScheme: ColorScheme
   18|      0|    @State private var codeMessages: Set<Located<Message>> = Set ()
   19|      0|    @SceneStorage("editLocation") private var editLocation: CodeEditor.Location = CodeEditor.Location()
   20|      0|    var body: some View {
   21|      0|        
   22|      0|        // 使用 SwiftUI 自带 TextEditor
   23|      0|        TextEditor(text: $txt)
   24|      0|            .font(.title)
   25|      0|            .lineSpacing(10)
   26|      0|            .disableAutocorrection(true)
   27|      0|            .padding()
   28|      0|            .onChange(of: txt) { newValue in
   29|      0|                count = txt.count
   30|      0|            }
   31|      0|        Text("字数：\(count)")
   32|      0|            .foregroundColor(.secondary)
   33|      0|            .font(.footnote)
   34|      0|        
   35|      0|        // 使用的 CodeEditorView 显示和编辑代码高亮的代码，还有 minimap
   36|      0|        CodeEditor(text: .constant("""
   37|      0|static func number() {
   38|      0|    // Int
   39|      0|    let i1 = 100
   40|      0|    let i2 = 22
   41|      0|    print(i1 / i2) // 向下取整得 4
   42|      0|
   43|      0|    // Float
   44|      0|    let f1: Float = 100.0
   45|      0|    let f2: Float = 22.0
   46|      0|    print(f1 / f2) // 4.5454545
   47|      0|    
   48|      0|    let f4: Float32 = 5.0
   49|      0|    let f5: Float64 = 5.0
   50|      0|    print(f4, f5) // 5.0 5.0 5.0
   51|      0|
   52|      0|    // Double
   53|      0|    let d1: Double = 100.0
   54|      0|    let d2: Double = 22.0
   55|      0|    print(d1 / d2) // 4.545454545454546
   56|      0|
   57|      0|    // 字面量
   58|      0|    print(Int(0b10101)) // 0b 开头是二进制
   59|      0|    print(Int(0x00afff)) // 0x 开头是十六进制
   60|      0|    print(2.5e4) // 2.5x10^4 十进制用 e
   61|      0|    print(0xAp2) // 10*2^2  十六进制用 p
   62|      0|    print(2_000_000) // 2000000
   63|      0|    
   64|      0|    // isMultiple(of:) 方法检查一个数字是否是另一个数字的倍数
   65|      0|    let i3 = 36
   66|      0|    print(i3.isMultiple(of: 9)) // true
   67|      0|}
   68|      0|"""),
   69|      0|                   messages: $codeMessages,
   70|      0|                   language: .swift,
   71|      0|                   layout: CodeEditor.LayoutConfiguration(showMinimap: true)
   72|      0|        )
   73|      0|            .environment(\.codeEditorTheme, colorScheme == .dark ? Theme.defaultDark : Theme.defaultLight)
   74|      0|        
   75|      0|        // 包装的 NSTextView
   76|      0|        HSplitView {
   77|      0|            PNSTextView(text: .constant("左边写...\n"), onDidChange: { (s, i) in
   78|      0|                print("Typing \(i) times.")
   79|      0|            })
   80|      0|                .padding()
   81|      0|            PNSTextView(text: .constant("右边写...\n"))
   82|      0|                .padding()
   83|      0|        } // end HSplitView
   84|      0|    } // end body
   85|       |}
   86|       |
   87|       |// MARK: - 自己包装 NSTextView
   88|       |struct PNSTextView: NSViewRepresentable {
   89|       |    @Binding var text: String
   90|      0|    var onBeginEditing: () -> Void = {}
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc11PNSTextViewV14onBeginEditingyycvpfi
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc11PNSTextViewV14onBeginEditingyycvpfiyycfU_
  ------------------
   91|      0|    var onCommit: () -> Void = {}
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc11PNSTextViewV8onCommityycvpfi
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc11PNSTextViewV8onCommityycvpfiyycfU_
  ------------------
   92|      0|    var onDidChange: (String, Int) -> Void = { _,_  in }
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc11PNSTextViewV11onDidChangeyySS_Sitcvpfi
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc11PNSTextViewV11onDidChangeyySS_SitcvpfiySS_SitcfU_
  ------------------
   93|       |    
   94|       |    // 返回要包装的 NSView
   95|      0|    func makeNSView(context: Context) -> PNSTextConfiguredView {
   96|      0|        let t = PNSTextConfiguredView(text: text)
   97|      0|        t.delegate = context.coordinator
   98|      0|        return t
   99|      0|    }
  100|       |    
  101|      0|    func updateNSView(_ view: PNSTextConfiguredView, context: Context) {
  102|      0|        view.text = text
  103|      0|        view.selectedRanges = context.coordinator.sRanges
  104|      0|    }
  105|       |    
  106|       |    // 回调
  107|      0|    func makeCoordinator() -> TextViewDelegate {
  108|      0|        TextViewDelegate(self)
  109|      0|    }
  110|       |}
  111|       |
  112|       |// 处理 delegate 回调
  113|       |extension PNSTextView {
  114|       |    class TextViewDelegate: NSObject, NSTextViewDelegate {
  115|       |        var tView: PNSTextView
  116|      0|        var sRanges: [NSValue] = []
  117|       |        var typeCount: Int = 0
  118|       |        
  119|      0|        init(_ v: PNSTextView) {
  120|      0|            self.tView = v
  121|      0|        }
  122|       |        // 开始编辑
  123|      0|        func textDidBeginEditing(_ notification: Notification) {
  124|      0|            guard let textView = notification.object as? NSTextView else {
  125|      0|                return
  126|      0|            }
  127|      0|            self.tView.text = textView.string
  128|      0|            self.tView.onBeginEditing()
  129|      0|        }
  130|       |        // 每次敲字
  131|      0|        func textDidChange(_ notification: Notification) {
  132|      0|            guard let textView = notification.object as? NSTextView else {
  133|      0|                return
  134|      0|            }
  135|      0|            typeCount += 1
  136|      0|            self.tView.text = textView.string
  137|      0|            self.sRanges = textView.selectedRanges
  138|      0|            self.tView.onDidChange(textView.string, typeCount)
  139|      0|        }
  140|       |        // 提交
  141|      0|        func textDidEndEditing(_ notification: Notification) {
  142|      0|            guard let textView = notification.object as? NSTextView else {
  143|      0|                return
  144|      0|            }
  145|      0|            self.tView.text = textView.string
  146|      0|            self.tView.onCommit()
  147|      0|        }
  148|       |    }
  149|       |}
  150|       |
  151|       |// 配置 NSTextView
  152|       |final class PNSTextConfiguredView: NSView {
  153|       |    weak var delegate: NSTextViewDelegate?
  154|       |    
  155|      0|    private lazy var tv: NSTextView = {
  156|      0|        let contentSize = sv.contentSize
  157|      0|        let textStorage = NSTextStorage()
  158|      0|        
  159|      0|        let layoutManager = NSLayoutManager()
  160|      0|        textStorage.addLayoutManager(layoutManager)
  161|      0|        
  162|      0|        let textContainer = NSTextContainer(containerSize: sv.frame.size)
  163|      0|        textContainer.widthTracksTextView = true
  164|      0|        textContainer.containerSize = NSSize(
  165|      0|            width: contentSize.width,
  166|      0|            height: CGFloat.greatestFiniteMagnitude
  167|      0|        )
  168|      0|        
  169|      0|        layoutManager.addTextContainer(textContainer)
  170|      0|        
  171|      0|        let t = NSTextView(frame: .zero, textContainer: textContainer)
  172|      0|        t.delegate = self.delegate
  173|      0|        t.isEditable = true
  174|      0|        t.allowsUndo = true
  175|      0|        
  176|      0|        t.font = .systemFont(ofSize: 24)
  177|      0|        t.textColor = NSColor.labelColor
  178|      0|        t.drawsBackground = true
  179|      0|        t.backgroundColor = NSColor.textBackgroundColor
  180|      0|        
  181|      0|        t.maxSize = NSSize(width: CGFloat.greatestFiniteMagnitude, height: CGFloat.greatestFiniteMagnitude)
  182|      0|        t.minSize = NSSize(width: 0, height: contentSize.height)
  183|      0|        t.autoresizingMask = .width
  184|      0|
  185|      0|        t.isHorizontallyResizable = false
  186|      0|        t.isVerticallyResizable   = true
  187|      0|        
  188|      0|        return t
  189|      0|    }()
  190|       |    
  191|      0|    private lazy var sv: NSScrollView = {
  192|      0|        let s = NSScrollView()
  193|      0|        s.drawsBackground = true
  194|      0|        s.borderType = .noBorder
  195|      0|        s.hasVerticalScroller = true
  196|      0|        s.hasHorizontalRuler = false
  197|      0|        s.translatesAutoresizingMaskIntoConstraints = false
  198|      0|        s.autoresizingMask = [.width, .height]
  199|      0|        return s
  200|      0|    }()
  201|       |    
  202|       |    var text: String {
  203|      0|        didSet {
  204|      0|            tv.string = text
  205|      0|        }
  206|       |    }
  207|       |    
  208|      0|    var selectedRanges: [NSValue] = [] {
  209|      0|        didSet {
  210|      0|            guard selectedRanges.count > 0 else {
  211|      0|                return
  212|      0|            }
  213|      0|            tv.selectedRanges = selectedRanges
  214|      0|        }
  215|       |    }
  216|       |
  217|      0|    required init?(coder: NSCoder) {
  218|      0|        fatalError("Error coder")
  219|      0|    }
  220|       |    
  221|      0|    init(text: String) {
  222|      0|        self.text = text
  223|      0|        super.init(frame: .zero)
  224|      0|    }
  225|       |    
  226|      0|    override func viewWillDraw() {
  227|      0|        super.viewWillDraw()
  228|      0|        sv.translatesAutoresizingMaskIntoConstraints = false
  229|      0|        addSubview(sv)
  230|      0|        NSLayoutConstraint.activate([
  231|      0|            sv.topAnchor.constraint(equalTo: topAnchor),
  232|      0|            sv.trailingAnchor.constraint(equalTo: trailingAnchor),
  233|      0|            sv.bottomAnchor.constraint(equalTo: bottomAnchor),
  234|      0|            sv.leadingAnchor.constraint(equalTo: leadingAnchor)
  235|      0|        ])
  236|      0|        sv.documentView = tv
  237|      0|    } // end viewWillDraw
  238|       |
  239|       |}
  240|       |
  241|       |
  242|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayTextFieldView.swift:
    1|       |//
    2|       |//  PlayTextFieldView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/18.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayTextFieldView: View {
   11|       |    @State private var t = "Starming"
   12|       |    @State private var showT = ""
   13|       |    @State private var isEditing = false
   14|       |    var placeholder = "输入些文字..."
   15|       |    
   16|      0|    @FocusState private var isFocus: Bool
   17|       |    
   18|      0|    var body: some View {
   19|      0|        VStack {
   20|      0|            TextField(placeholder, text: $t)
   21|      0|            
   22|      0|            // 样式设置
   23|      0|            TextField(placeholder, text: $t)
   24|      0|                .padding(10)
   25|      0|                .textFieldStyle(.roundedBorder) // textFieldStyle 有三个预置值 automatic、plain 和 roundedBorder。
   26|      0|                .multilineTextAlignment(.leading) // 对齐方式
   27|      0|                .font(.system(size: 14, weight: .heavy, design: .rounded))
   28|      0|                .border(.teal, width: 4)
   29|      0|                .background(.white)
   30|      0|                .foregroundColor(.brown)
   31|      0|                .textCase(.uppercase)
   32|      0|
   33|      0|            // 多视图组合
   34|      0|            HStack {
   35|      0|                Image(systemName: "lock.circle")
   36|      0|                    .foregroundColor(.gray).font(.headline)
   37|      0|                TextField(placeholder, text: $t)
   38|      0|                    .textFieldStyle(.plain)
   39|      0|                    .submitLabel(.done)
   40|      0|                    .onSubmit {
   41|      0|                        showT = t
   42|      0|                        isFocus = true
   43|      0|                    }
   44|      0|                    .onChange(of: t) { newValue in
   45|      0|                        t = String(newValue.prefix(20)) // 限制字数
   46|      0|                    }
   47|      0|                Image(systemName: "eye.slash")
   48|      0|                    .foregroundColor(.gray)
   49|      0|                    .font(.headline)
   50|      0|            }
   51|      0|            .padding()
   52|      0|            .overlay(
   53|      0|                RoundedRectangle(cornerRadius: 8)
   54|      0|                    .stroke(.gray, lineWidth: 1)
   55|      0|            )
   56|      0|            .padding(.horizontal)
   57|      0|
   58|      0|            Text(showT)
   59|      0|
   60|      0|
   61|      0|            // 自定义 textFieldStyle 样式
   62|      0|            TextField(placeholder, text: $t)
   63|      0|                .textFieldStyle(PClearTextStyle())
   64|      0|                .focused($isFocus)
   65|      0|        }
   66|      0|        .padding()
   67|      0|    } // end body
   68|       |}
   69|       |
   70|       |struct PClearTextStyle: TextFieldStyle {
   71|       |    @ViewBuilder
   72|      0|    func _body(configuration: TextField<_Label>) -> some View {
   73|      0|        let mirror = Mirror(reflecting: configuration)
   74|      0|        let bindingText: Binding<String> = mirror.descendant("_text") as! Binding<String>
   75|      0|        configuration
   76|      0|            .overlay(alignment: .trailing) {
   77|      0|                Button(action: {
   78|      0|                    bindingText.wrappedValue = ""
   79|      0|                }, label: {
   80|      0|                    Image(systemName: "clear")
   81|      0|                })
   82|      0|            }
   83|      0|        
   84|      0|        let text: String = mirror.descendant("_text", "_value") as! String
   85|      0|        configuration
   86|      0|            .padding()
   87|      0|            .background(
   88|      0|                RoundedRectangle(cornerRadius: 16)
   89|      0|                    .strokeBorder(text.count > 10 ? .pink : .gray, lineWidth: 4)
   90|      0|            )
   91|      0|    } // end func
   92|       |}
   93|       |
   94|       |
   95|       |
   96|       |
   97|       |
   98|       |
   99|       |
  100|       |
  101|       |
  102|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayTextView.swift:
    1|       |//
    2|       |//  File.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/29.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |// MARK: - Text
   11|       |struct PlayTextView: View {
   12|       |    let manyString = "这是一段长文。总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么吧。"
   13|      0|    var body: some View {
   14|      0|        ScrollView {
   15|      0|            Group {
   16|      0|                Text("大标题").font(.largeTitle)
   17|      0|                Text("说点啥呢？")
   18|      0|                    .tracking(30) // 字间距
   19|      0|                    .kerning(30) // 尾部留白
   20|      0|                Text("划重点")
   21|      0|                    .underline()
   22|      0|                    .foregroundColor(.yellow)
   23|      0|                    .fontWeight(.heavy)
   24|      0|                Text("可旋转的文字")
   25|      0|                    .rotationEffect(.degrees(45))
   26|      0|                    .fixedSize()
   27|      0|                    .frame(width: 20, height: 80)
   28|      0|                Text("自定义系统字体大小")
   29|      0|                    .font(.system(size: 30))
   30|      0|                Text("使用指定的字体")
   31|      0|                    .font(.custom("Georgia", size: 24))
   32|      0|            }
   33|      0|            Group {
   34|      0|                Text("有阴影")
   35|      0|                    .font(.largeTitle)
   36|      0|                    .foregroundColor(.orange)
   37|      0|                    .bold()
   38|      0|                    .italic()
   39|      0|                    .shadow(color: .black, radius: 1, x: 0, y: 2)
   40|      0|                Text("Gradient Background")
   41|      0|                    .font(.largeTitle)
   42|      0|                    .padding()
   43|      0|                    .foregroundColor(.white)
   44|      0|                    .background(LinearGradient(gradient: Gradient(colors: [.white, .black, .red]), startPoint: .top, endPoint: .bottom))
   45|      0|                    .cornerRadius(10)
   46|      0|                Text("Gradient Background")
   47|      0|                    .padding(5)
   48|      0|                    .foregroundColor(.white)
   49|      0|                    .background(LinearGradient(gradient: Gradient(colors: [.white, .black, .purple]), startPoint: .leading, endPoint: .trailing))
   50|      0|                    .cornerRadius(10)
   51|      0|                ZStack {
   52|      0|                    Text("渐变透明材质风格")
   53|      0|                        .padding()
   54|      0|                        .background(
   55|      0|                            .regularMaterial,
   56|      0|                            in: RoundedRectangle(cornerRadius: 10, style: .continuous)
   57|      0|                        )
   58|      0|                        .shadow(radius: 10)
   59|      0|                        .padding()
   60|      0|                        .font(.largeTitle.weight(.black))
   61|      0|                }
   62|      0|                .frame(width: 300, height: 200)
   63|      0|                .background(
   64|      0|                    LinearGradient(colors: [.yellow, .pink], startPoint: .topLeading, endPoint: .bottomTrailing)
   65|      0|                )
   66|      0|                Text("Angular Gradient Background")
   67|      0|                    .padding()
   68|      0|                    .background(AngularGradient(colors: [.red, .yellow, .green, .blue, .purple, .red], center: .center))
   69|      0|                    .cornerRadius(20)
   70|      0|                Text("带背景图片的")
   71|      0|                    .padding()
   72|      0|                    .font(.largeTitle)
   73|      0|                    .foregroundColor(.white)
   74|      0|                    .background {
   75|      0|                        Rectangle()
   76|      0|                            .fill(Color(.black))
   77|      0|                            .cornerRadius(10)
   78|      0|                        Image("logo")
   79|      0|                            .resizable()
   80|      0|                            .frame(width: 100, height: 100)
   81|      0|                    }
   82|      0|                    .frame(width: 200, height: 100)
   83|      0|            }
   84|      0|
   85|      0|            Group {
   86|      0|                // 设置 lineLimit 表示最多支持行数，依据情况依然有会被减少显示行数
   87|      0|                Text(manyString)
   88|      0|                    .lineLimit(3) // 对行的限制，如果多余设定行数，尾部会显示...
   89|      0|                    .lineSpacing(10) // 行间距
   90|      0|                    .multilineTextAlignment(.leading) // 对齐
   91|      0|                
   92|      0|                // 使用 fixedSize 就可以在任何时候完整显示
   93|      0|                Text(manyString)
   94|      0|                    .fixedSize(horizontal: false, vertical: true)
   95|      0|                
   96|      0|            }
   97|      0|            
   98|      0|            // 使用 AttributeString
   99|      0|            PTextViewAttribute()
  100|      0|                .padding()
  101|      0|
  102|      0|            // 使用 Markdown
  103|      0|            PTextViewMarkdown()
  104|      0|                .padding()
  105|      0|//                .inlineOnlyPreservingWhitespace
  106|      0|            
  107|      0|            // 时间
  108|      0|            PTextViewDate()
  109|      0|            
  110|      0|            // 插值
  111|      0|            PTextViewInterpolation()
  112|      0|        }
  113|      0|
  114|      0|    }
  115|       |}
  116|       |
  117|       |
  118|       |
  119|       |// MARK: - Markdown
  120|       |struct PTextViewMarkdown: View {
  121|      0|    let mdaStr: AttributedString = {
  122|      0|        
  123|      0|        var mda = AttributedString(localized: "这是一个 **Attribute** ~string~")
  124|      0|        
  125|      0|        /// 自定义的属性语法是^[string](key：value)
  126|      0|        mda = AttributedString(localized: "^[这是](p2:'one')^[一](p3:{k1:1,k2:2})个 **Attribute** ~string~", including: \.newScope)
  127|      0|        print(mda)
  128|      0|        /// 这是 {
  129|      0|        ///     NSLanguage = en
  130|      0|        ///     p2 = one
  131|      0|        /// }
  132|      0|        /// 一 {
  133|      0|        ///     NSLanguage = en
  134|      0|        ///     p3 = P3(k1: 1, k2: 2)
  135|      0|        /// }
  136|      0|        /// 个  {
  137|      0|        ///     NSLanguage = en
  138|      0|        /// }
  139|      0|        /// Attribute {
  140|      0|        ///     NSLanguage = en
  141|      0|        ///     NSInlinePresentationIntent = NSInlinePresentationIntent(rawValue: 2)
  142|      0|        /// }
  143|      0|        ///   {
  144|      0|        ///     NSLanguage = en
  145|      0|        /// }
  146|      0|        /// string {
  147|      0|        ///     NSInlinePresentationIntent = NSInlinePresentationIntent(rawValue: 32)
  148|      0|        ///     NSLanguage = en
  149|      0|        /// }
  150|      0|        
  151|      0|        // 从文件中读取 Markdown 内容
  152|      0|        let mdUrl = Bundle.main.url(forResource: "1", withExtension: "md")!
  153|      0|        mda = try! AttributedString(contentsOf: mdUrl,options: AttributedString.MarkdownParsingOptions(interpretedSyntax: .inlineOnlyPreservingWhitespace), baseURL: nil) // .inlineOnlyPreservingWhitespace 支持 markdown 文件的换行
  154|      0|        
  155|      0|        // Markdown 已转换成 AtrributedString 结构。
  156|      0|        for r in mda.runs {
  157|      0|            if let ipi = r.inlinePresentationIntent {
  158|      0|                switch ipi {
  159|      0|                case .lineBreak:
  160|      0|                    print("paragrahp")
  161|      0|                case .code:
  162|      0|                    print("this is code")
  163|      0|                default:
  164|      0|                    break
  165|      0|                }
  166|      0|            }
  167|      0|            if let pi = r.presentationIntent {
  168|      0|                for c in pi.components {
  169|      0|                    switch c.kind {
  170|      0|                    case .paragraph:
  171|      0|                        print("this is paragraph")
  172|      0|                    case .codeBlock(let lang):
  173|      0|                        print("this is \(lang ?? "") code")
  174|      0|                    case .header(let level):
  175|      0|                        print("this is \(level) level")
  176|      0|                    default:
  177|      0|                        break
  178|      0|                    }
  179|      0|                }
  180|      0|            }
  181|      0|        }
  182|      0|        
  183|      0|        return mda
  184|      0|    }()
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc17PTextViewMarkdownV6mdaStr10Foundation16AttributedStringVvpfi
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc17PTextViewMarkdownV6mdaStr10Foundation16AttributedStringVvpfiAGyXEfU_
  ------------------
  185|      0|    var body: some View {
  186|      0|        Text(mdaStr)
  187|      0|    }
  188|       |}
  189|       |
  190|       |// MARK: - AttributedString
  191|       |struct PTextViewAttribute: View {
  192|      0|    let aStr: AttributedString = {
  193|      0|        var a1 = AttributedString("这是一个 ")
  194|      0|        var c1 = AttributeContainer()
  195|      0|        c1.font = .footnote
  196|      0|        c1.foregroundColor = .secondary
  197|      0|        a1.setAttributes(c1)
  198|      0|        
  199|      0|        var a2 = AttributedString("Attribute ")
  200|      0|        var c2 = AttributeContainer()
  201|      0|        c2.font = .title
  202|      0|        a2.setAttributes(c2)
  203|      0|        
  204|      0|        var a3 = AttributedString("String ")
  205|      0|        var c3 = AttributeContainer()
  206|      0|        c3.baselineOffset = 10
  207|      0|        c3.appKit.foregroundColor = .yellow // 仅在 macOS 里显示的颜色
  208|      0|        c3.swiftUI.foregroundColor = .secondary
  209|      0|        c3.font = .footnote
  210|      0|        a3.setAttributes(c3)
  211|      0|        // a3 使用自定义属性
  212|      0|        a3.p1 = "This is a custom property."
  213|      0|        
  214|      0|        // formatter 的支持
  215|      0|        var a4 = Date.now.formatted(.dateTime
  216|      0|                                        .hour()
  217|      0|                                        .minute()
  218|      0|                                        .weekday()
  219|      0|                                        .attributed
  220|      0|        )
  221|      0|        
  222|      0|        let c4AMPM = AttributeContainer().dateField(.amPM)
  223|      0|        let c4AMPMColor = AttributeContainer().foregroundColor(.green)
  224|      0|        
  225|      0|        a4.replaceAttributes(c4AMPM, with: c4AMPMColor)
  226|      0|        let c4Week = AttributeContainer().dateField(.weekday)
  227|      0|        let c4WeekColor = AttributeContainer().foregroundColor(.purple)
  228|      0|        a4.replaceAttributes(c4Week, with: c4WeekColor)
  229|      0|        
  230|      0|        a1.append(a2)
  231|      0|        a1.append(a3)
  232|      0|        a1.append(a4)
  233|      0|        
  234|      0|        
  235|      0|        
  236|      0|        // Runs 视图
  237|      0|        for r in a1.runs {
  238|      0|            print(r)
  239|      0|        }
  240|      0|        /// 这是一个  {
  241|      0|        ///     SwiftUI.Font = Font(provider: SwiftUI.(unknown context at $7ff91d4a5e90).FontBox<SwiftUI.Font.(unknown context at $7ff91d4ad5d8).TextStyleProvider>)
  242|      0|        ///     SwiftUI.ForegroundColor = secondary
  243|      0|        /// }
  244|      0|        /// Attribute  {
  245|      0|        ///     SwiftUI.Font = Font(provider: SwiftUI.(unknown context at $7ff91d4a5e90).FontBox<SwiftUI.Font.(unknown context at $7ff91d4ad5d8).TextStyleProvider>)
  246|      0|        /// }
  247|      0|        /// String  {
  248|      0|        ///     SwiftUI.ForegroundColor = secondary
  249|      0|        ///     SwiftUI.BaselineOffset = 10.0
  250|      0|        ///     NSColor = sRGB IEC61966-2.1 colorspace 1 1 0 1
  251|      0|        ///     SwiftUI.Font = Font(provider: SwiftUI.(unknown context at $7ff91d4a5e90).FontBox<SwiftUI.Font.(unknown context at $7ff91d4ad5d8).TextStyleProvider>)
  252|      0|        ///     p1 = This is a custom property.
  253|      0|        /// }
  254|      0|        /// Tue {
  255|      0|        ///     SwiftUI.ForegroundColor = purple
  256|      0|        /// }
  257|      0|        ///   {
  258|      0|        /// }
  259|      0|        /// 5 {
  260|      0|        ///     Foundation.DateFormatField = hour
  261|      0|        /// }
  262|      0|        /// : {
  263|      0|        /// }
  264|      0|        /// 16 {
  265|      0|        ///     Foundation.DateFormatField = minute
  266|      0|        /// }
  267|      0|        ///   {
  268|      0|        /// }
  269|      0|        /// PM {
  270|      0|        ///     SwiftUI.ForegroundColor = green
  271|      0|        /// }
  272|      0|        
  273|      0|        return a1
  274|      0|    }()
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc18PTextViewAttributeV4aStr10Foundation16AttributedStringVvpfi
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc18PTextViewAttributeV4aStr10Foundation16AttributedStringVvpfiAGyXEfU_
  ------------------
  275|      0|    var body: some View {
  276|      0|        Text(aStr)
  277|      0|    }
  278|       |}
  279|       |
  280|       |// MARK: - 自定 AttributedString 属性
  281|       |struct PAKP1: AttributedStringKey {
  282|       |    typealias Value = String
  283|       |    static var name: String = "p1"
  284|       |    
  285|       |    
  286|       |}
  287|       |struct PAKP2: CodableAttributedStringKey, MarkdownDecodableAttributedStringKey {
  288|       |    public enum P2: String, Codable {
  289|       |        case one, two, three
  290|       |    }
  291|       |
  292|       |    static var name: String = "p2"
  293|       |    typealias Value = P2
  294|       |}
  295|       |struct PAKP3: CodableAttributedStringKey, MarkdownDecodableAttributedStringKey {
  296|       |    public struct P3: Codable, Hashable {
  297|       |        let k1: Int
  298|       |        let k2: Int
  299|       |    }
  300|       |    typealias Value = P3
  301|       |    static var name: String = "p3"
  302|       |}
  303|       |extension AttributeScopes {
  304|       |    public struct NewScope: AttributeScope {
  305|       |        let p1: PAKP1
  306|       |        let p2: PAKP2
  307|       |        let p3: PAKP3
  308|       |    }
  309|      0|    var newScope: NewScope.Type {
  310|      0|        NewScope.self
  311|      0|    }
  312|       |}
  313|       |
  314|       |extension AttributeDynamicLookup{
  315|      0|    subscript<T>(dynamicMember keyPath:KeyPath<AttributeScopes.NewScope,T>) -> T where T:AttributedStringKey {
  316|      0|        self[T.self]
  317|      0|    }
  318|       |}
  319|       |
  320|       |// MARK: - 时间
  321|       |struct PTextViewDate: View {
  322|      0|    let date: Date = Date()
  323|      0|    let df: DateFormatter = {
  324|      0|        let df = DateFormatter()
  325|      0|        df.dateStyle = .long
  326|      0|        df.timeStyle = .short
  327|      0|        return df
  328|      0|    }()
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc13PTextViewDateV2dfSo15NSDateFormatterCvpfi
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc13PTextViewDateV2dfSo15NSDateFormatterCvpfiAFyXEfU_
  ------------------
  329|      0|    var dv: String {
  330|      0|        return df.string(from: date)
  331|      0|    }
  332|      0|    var body: some View {
  333|      0|        HStack {
  334|      0|            Text(dv)
  335|      0|        }
  336|      0|        .environment(\.locale, Locale(identifier: "zh_cn"))
  337|      0|    }
  338|       |}
  339|       |
  340|       |// MARK: - 插值
  341|       |struct PTextViewInterpolation: View {
  342|      0|    let nf: NumberFormatter = {
  343|      0|        let f = NumberFormatter()
  344|      0|        f.numberStyle = .currencyPlural
  345|      0|        return f
  346|      0|    }()
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc22PTextViewInterpolationV2nfSo17NSNumberFormatterCvpfi
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc22PTextViewInterpolationV2nfSo17NSNumberFormatterCvpfiAFyXEfU_
  ------------------
  347|      0|    var body: some View {
  348|      0|        VStack {
  349|      0|            Text("数字格式化：\(99.9, specifier: "%.3f")")
  350|      0|            Text("💰： \(999 as NSNumber, formatter: nf)")
  351|      0|            Text("图文： \(Image(systemName: "sun.min"))")
  352|      0|                .environment(\.locale, Locale(identifier: "zh_cn"))
  353|      0|            Text("数组（自定义插值支持类型）： \(["one", "two"])")
  354|      0|            Text("红字：\(red: "变红了")，带图标的字：\(sun: "天晴")")
  355|      0|        }
  356|      0|    }
  357|       |}
  358|       |
  359|       |// 扩展 LocalizedStringKey.StringInterpolation 自定义插值
  360|       |extension LocalizedStringKey.StringInterpolation {
  361|       |    // 特定类型处理
  362|      0|    mutating func appendInterpolation(_ value: [String]) {
  363|      0|        for s in value {
  364|      0|            appendLiteral(s + "")
  365|      0|            appendInterpolation(Text(s + " ").bold().foregroundColor(.secondary))
  366|      0|        }
  367|      0|    }
  368|       |    
  369|       |    // 实现不同情况处理，可以简化设置修改器设置
  370|      0|    mutating func appendInterpolation(red value: LocalizedStringKey) {
  371|      0|        appendInterpolation(Text(value).bold().foregroundColor(.red))
  372|      0|    }
  373|      0|    mutating func appendInterpolation(sun value: String) {
  374|      0|        appendInterpolation(Image(systemName: "sun.max.fill"))
  375|      0|        appendLiteral(value)
  376|      0|    }
  377|       |}
  378|       |
  379|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/ViewComponent/PlayToggleView.swift:
    1|       |//
    2|       |//  PlayToggleView.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/2/22.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayToggleView: View {
   11|       |    @State private var isEnable = false
   12|      0|    var body: some View {
   13|      0|        // 普通样式
   14|      0|        Toggle(isOn: $isEnable) {
   15|      0|            Text("\(isEnable ? "开了" : "关了")")
   16|      0|        }
   17|      0|        .padding()
   18|      0|        
   19|      0|        // 按钮样式
   20|      0|        Toggle(isOn: $isEnable) {
   21|      0|            Label("\(isEnable ? "打开了" : "关闭了")", systemImage: "cloud.moon")
   22|      0|        }
   23|      0|        .padding()
   24|      0|        .tint(.pink)
   25|      0|        .controlSize(.large)
   26|      0|        .toggleStyle(.button)
   27|      0|        
   28|      0|        // Switch 样式
   29|      0|        Toggle(isOn: $isEnable) {
   30|      0|            Text("\(isEnable ? "开了" : "关了")")
   31|      0|        }
   32|      0|        .toggleStyle(SwitchToggleStyle(tint: .orange))
   33|      0|        .padding()
   34|      0|        
   35|      0|        // 自定义样式
   36|      0|        Toggle(isOn: $isEnable) {
   37|      0|            Text(isEnable ? "录音中" : "已静音")
   38|      0|        }
   39|      0|        .toggleStyle(PCToggleStyle())
   40|      0|        
   41|      0|    }
   42|       |}
   43|       |
   44|       |// MARK: - 自定义样式
   45|       |struct PCToggleStyle: ToggleStyle {
   46|      0|    func makeBody(configuration: Configuration) -> some View {
   47|      0|        return HStack {
   48|      0|            configuration.label
   49|      0|            Image(systemName: configuration.isOn ? "mic.square.fill" : "mic.slash.circle.fill")
   50|      0|                .renderingMode(.original)
   51|      0|                .resizable()
   52|      0|                .frame(width: 30, height: 30)
   53|      0|                .onTapGesture {
   54|      0|                    configuration.isOn.toggle()
   55|      0|                }
   56|      0|        }
   57|      0|    }
   58|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/Vision/PlayAnimation.swift:
    1|       |//
    2|       |//  PlayAnimation.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/3/2.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayAnimation: View {
   11|       |    @State private var isChange = false
   12|      0|    private var anis:[String: Animation] = [
   13|      0|        "p1": .default,
   14|      0|        "p2": .linear(duration: 1),
   15|      0|        "p3": .interpolatingSpring(stiffness: 5, damping: 3),
   16|      0|        "p4": .easeInOut(duration: 1),
   17|      0|        "p5": .easeIn(duration: 1),
   18|      0|        "p6": .easeOut(duration: 1),
   19|      0|        "p7": .interactiveSpring(response: 3, dampingFraction: 2, blendDuration: 1),
   20|      0|        "p8": .spring(),
   21|      0|        "p9": .default.repeatCount(3)
   22|      0|    ]
   23|       |    @State private var selection = 1
   24|       |    
   25|      0|    var body: some View {
   26|      0|        // animation 隐式动画和 withAnimation 显示动画
   27|      0|        Text(isChange ? "另一种状态" : "一种状态")
   28|      0|            .font(.headline)
   29|      0|            .padding()
   30|      0|            .animation(.easeInOut, value: isChange) // 受限的隐式动画，只绑定某个值。
   31|      0|            .onTapGesture {
   32|      0|                // 使用 withAnimation 就是显式动画，效果等同 withTransaction(Transaction(animation: .default))
   33|      0|                withAnimation {
   34|      0|                    isChange.toggle()
   35|      0|                }
   36|      0|
   37|      0|                // 设置 Transaction。和隐式动画共存时，优先执行 withAnimation 或 Transaction。
   38|      0|                var t = Transaction(animation: .linear(duration: 2))
   39|      0|                t.disablesAnimations = true // 用来禁用隐式动画
   40|      0|                withTransaction(t) {
   41|      0|                    isChange.toggle()
   42|      0|                }
   43|      0|            } // end onTapGesture
   44|      0|        
   45|      0|        LazyVGrid(columns: [GridItem(.adaptive(minimum: isChange ? 60 : 30), spacing: 60)]) {
   46|      0|            ForEach(Array(anis.keys), id: \.self) { s in
   47|      0|                Image(s)
   48|      0|                    .resizable()
   49|      0|                    .scaledToFit()
   50|      0|                    .animation(anis[s], value: isChange)
   51|      0|                    .scaleEffect()
   52|      0|            }
   53|      0|        }
   54|      0|        .padding()
   55|      0|        Button {
   56|      0|            isChange.toggle()
   57|      0|        } label: {
   58|      0|            Image(systemName: isChange ? "pause.fill" : "play.fill")
   59|      0|                .renderingMode(.original)
   60|      0|        }
   61|      0|        
   62|      0|        // matchedGeometryEffect 的使用
   63|      0|        VStack {
   64|      0|            Text("后台")
   65|      0|                .font(.headline)
   66|      0|            placeStayView
   67|      0|            Text("前台")
   68|      0|                .font(.headline)
   69|      0|            placeShowView
   70|      0|        }
   71|      0|        .padding(50)
   72|      0|        
   73|      0|        // 通过使用相同 matchedGeometryEffect 的 id，绑定两个元素变化。
   74|      0|        HStack {
   75|      0|            if isChange {
   76|      0|                Rectangle()
   77|      0|                    .fill(.pink)
   78|      0|                    .matchedGeometryEffect(id: "g1", in: mgeStore)
   79|      0|                    .frame(width: 100, height: 100)
   80|      0|            }
   81|      0|            Spacer()
   82|      0|            Button("转换") {
   83|      0|                withAnimation(.linear(duration: 2.0)) {
   84|      0|                    isChange.toggle()
   85|      0|                }
   86|      0|            }
   87|      0|            Spacer()
   88|      0|            if !isChange {
   89|      0|                Circle()
   90|      0|                    .fill(.orange)
   91|      0|                    .matchedGeometryEffect(id: "g1", in: mgeStore)
   92|      0|                    .frame(width: 70, height: 70)
   93|      0|            }
   94|      0|            HStack {
   95|      0|                Image("p1")
   96|      0|                    .resizable()
   97|      0|                    .scaledToFit()
   98|      0|                    .frame(width: 50, height: 50)
   99|      0|                if !isChange {
  100|      0|                    Image("p19")
  101|      0|                        .resizable()
  102|      0|                        .scaledToFit()
  103|      0|                        .frame(width: 50, height: 50)
  104|      0|                        .matchedGeometryEffect(id: "g1", in: mgeStore)
  105|      0|                }
  106|      0|                Image("p1")
  107|      0|                    .resizable()
  108|      0|                    .scaledToFit()
  109|      0|                    .frame(width: 50, height: 50)
  110|      0|            }
  111|      0|        }
  112|      0|        .padding()
  113|      0|        
  114|      0|        // 使用 isSource，作为移动到相同 matchedGeometryEffect id 的方法。
  115|      0|        HStack {
  116|      0|            Image("p19")
  117|      0|                .resizable()
  118|      0|                .scaledToFit()
  119|      0|                .frame(width: isChange ? 100 : 50, height: isChange ? 100 : 50)
  120|      0|                .matchedGeometryEffect(id: isChange ? "g2" : "", in: mgeStore, isSource: false)
  121|      0|            
  122|      0|            Image("p19")
  123|      0|                .resizable()
  124|      0|                .scaledToFit()
  125|      0|                .frame(width: 100, height: 100)
  126|      0|                .matchedGeometryEffect(id: "g2", in: mgeStore)
  127|      0|                .opacity(0)
  128|      0|        }
  129|      0|        
  130|      0|        
  131|      0|        
  132|      0|        // 点击跟随的效果
  133|      0|        HStack {
  134|      0|            ForEach(Array(1...4), id: \.self) { i in
  135|      0|                Image("p\(i)")
  136|      0|                    .resizable()
  137|      0|                    .scaledToFit()
  138|      0|                    .frame(width: i == selection ? 200 : 50)
  139|      0|                    .matchedGeometryEffect(id: "h\(i)", in: mgeStore)
  140|      0|                    .onTapGesture {
  141|      0|                        withAnimation {
  142|      0|                            selection = i
  143|      0|                        }
  144|      0|                    }
  145|      0|                    .shadow(color: .black, radius: 3, x: 2, y: 3)
  146|      0|            }
  147|      0|        }
  148|      0|        .background(
  149|      0|            RoundedRectangle(cornerRadius: 8).fill(.pink)
  150|      0|                .matchedGeometryEffect(id: "h\(selection)", in: mgeStore, isSource: false)
  151|      0|        )
  152|      0|        
  153|      0|        // matchedGeometryEffect 还可以应用到 List 中，通过 Array enumerated 获得 index 作为 matchedGeometryEffect 的 id。右侧固定按钮可以直接让对应 id 的视图滚动到固定按钮的位置
  154|      0|        
  155|      0|        
  156|      0|        // TimelineView
  157|      0|        TimelineView(.periodic(from: .now, by: 1)) { t in
  158|      0|            Text("\(t.date)")
  159|      0|            HStack(spacing: 20) {
  160|      0|                let e = "p\(Int.random(in: 1...30))"
  161|      0|                Image(e)
  162|      0|                    .resizable()
  163|      0|                    .scaledToFit()
  164|      0|                    .frame(height: 40)
  165|      0|                    .animation(.default.repeatCount(3), value: e)
  166|      0|                
  167|      0|                TimelineSubView(date: t.date) // 需要传入 timeline 的时间给子视图才能够起作用。
  168|      0|                    
  169|      0|            }
  170|      0|            .padding()
  171|      0|        }
  172|      0|        
  173|      0|        // matchedGeometryEffect
  174|      0|
  175|      0|        /// TimelineScheduler 的使用，TimelineScheduler 有以下类型
  176|      0|        /// .animation：制定更新的频率，可以控制暂停
  177|      0|        /// .everyMinute：每分钟更新一次
  178|      0|        /// .explicit：所有要更新的放到一个数组里
  179|      0|        /// .periodic：设置开始时间和更新频率
  180|      0|        /// 也可以自定义 TimelineScheduler
  181|      0|        TimelineView(.everySecond) { t in
  182|      0|            let e = "p\(Int.random(in: 1...30))"
  183|      0|            Image(e)
  184|      0|                .resizable()
  185|      0|                .scaledToFit()
  186|      0|                .frame(height: 40)
  187|      0|        }
  188|      0|        
  189|      0|        // 自定义的 TimelineScheduler
  190|      0|        TimelineView(.everyLoop(timeOffsets: [0.2, 0.7, 1, 0.5, 2])) { t in
  191|      0|            TimelineSubView(date: t.date)
  192|      0|        }
  193|      0|    }
  194|       |    
  195|       |    // MARK: - TimelineSubView
  196|       |    struct TimelineSubView: View {
  197|       |        let date : Date
  198|       |        @State private var s = "let's go"
  199|       |        // 顺序从数组中取值，取完再重头开始
  200|       |        @State private var idx: Int = 1
  201|      0|        func advanceIndex(count: Int) {
  202|      0|            idx = (idx + 1) % count
  203|      0|            if idx == 0 { idx = 1 }
  204|      0|        }
  205|       |        
  206|      0|        var body: some View {
  207|      0|            HStack(spacing: 20) {
  208|      0|                Image("p\(idx)")
  209|      0|                    .resizable()
  210|      0|                    .scaledToFit()
  211|      0|                    .frame(height: 40)
  212|      0|                    .animation(.easeIn(duration: 1), value: date)
  213|      0|                    .onChange(of: date) { newValue in
  214|      0|                        advanceIndex(count: 30)
  215|      0|                        s = "\(date.hour):\(date.minute):\(date.second)"
  216|      0|                    }
  217|      0|                    .onAppear {
  218|      0|                        advanceIndex(count: 30)
  219|      0|                    }
  220|      0|                    
  221|      0|                Text(s)
  222|      0|            }
  223|      0|        }
  224|       |    }
  225|       |    
  226|       |    // MARK: - 用 matchedGeometryEffect 做动画
  227|       |    /// matchedGeometryEffect 可以无缝的将一个图像变成另外一个图像。
  228|      0|    @State private var placeStayItems = ["p1", "p2", "p3", "p4"]
  229|      0|    @State private var placeShowItems: [String] = []
  230|       |    
  231|      0|    @Namespace private var mgeStore
  232|       |    
  233|      0|    private var placeStayView: some View {
  234|      0|        LazyVGrid(columns: [GridItem(.adaptive(minimum: 30), spacing: 10)]) {
  235|      0|            ForEach(placeStayItems, id: \.self) { s in
  236|      0|                Image(s)
  237|      0|                    .resizable()
  238|      0|                    .scaledToFit()
  239|      0|                    .matchedGeometryEffect(id: s, in: mgeStore)
  240|      0|                    .onTapGesture {
  241|      0|                        withAnimation {
  242|      0|                            placeStayItems.removeAll { $0 == s }
  243|      0|                            placeShowItems.append(s)
  244|      0|                        }
  245|      0|                    }
  246|      0|                    .shadow(color: .black, radius: 2, x: 2, y: 4)
  247|      0|            } // end ForEach
  248|      0|        } // end LazyVGrid
  249|      0|    } // private var placeStayView
  250|       |    
  251|      0|    private var placeShowView: some View {
  252|      0|        LazyVGrid(columns: [GridItem(.adaptive(minimum: 150), spacing: 10)]) {
  253|      0|            ForEach(placeShowItems, id: \.self) { s in
  254|      0|                Image(s)
  255|      0|                    .resizable()
  256|      0|                    .scaledToFit()
  257|      0|                    .matchedGeometryEffect(id: s, in: mgeStore)
  258|      0|                    .onTapGesture {
  259|      0|                        withAnimation {
  260|      0|                            placeShowItems.removeAll { $0 == s }
  261|      0|                            placeStayItems.append(s)
  262|      0|                        }
  263|      0|                    }
  264|      0|                    .shadow(color: .black, radius: 2, x: 0, y: 2)
  265|      0|                    .shadow(color: .white, radius: 5, x: 0, y: 2)
  266|      0|            } // end ForEach
  267|      0|        } // end LazyVGrid
  268|      0|    } // end private var placeShowView
  269|       |    
  270|       |} // end struct PlayAnimation
  271|       |
  272|       |// MARK: - 扩展 TimelineSchedule
  273|       |extension TimelineSchedule where Self == PeriodicTimelineSchedule {
  274|       |    static var everySecond: PeriodicTimelineSchedule {
  275|      0|        get {
  276|      0|            .init(from: .now, by: 1)
  277|      0|        }
  278|       |    }
  279|       |}
  280|       |
  281|       |// MARK: - 自定义一个 TimelineSchedule
  282|       |// timeOffsets 用完，就会再重头重新再来一遍
  283|       |struct PCLoopTimelineSchedule: TimelineSchedule {
  284|       |    let timeOffsets: [TimeInterval]
  285|       |    
  286|      0|    func entries(from startDate: Date, mode: TimelineScheduleMode) -> Entries {
  287|      0|        Entries(last: startDate, offsets: timeOffsets)
  288|      0|    }
  289|       |    
  290|       |    struct Entries: Sequence, IteratorProtocol {
  291|       |        var last: Date
  292|       |        let offsets: [TimeInterval]
  293|       |        var idx: Int = -1
  294|      0|        mutating func next() -> Date? {
  295|      0|            idx = (idx + 1) % offsets.count
  296|      0|            last = last.addingTimeInterval(offsets[idx])
  297|      0|            return last
  298|      0|        }
  299|       |    } // end Struct Entries
  300|       |}
  301|       |
  302|       |// 为自定义的 PCLoopTimelineSchedule 做一个 TimelineSchedule 的扩展函数，方便使用
  303|       |extension TimelineSchedule where Self == PCLoopTimelineSchedule {
  304|      0|    static func everyLoop(timeOffsets: [TimeInterval]) -> PCLoopTimelineSchedule {
  305|      0|        .init(timeOffsets: timeOffsets)
  306|      0|    }
  307|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/Vision/PlayCanvas.swift:
    1|       |//
    2|       |//  PlayCanvas.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/3/4.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayCanvas: View {
   11|      0|    let colors: [Color] = [.purple, .blue, .yellow, .pink]
   12|       |    
   13|      0|    var body: some View {
   14|      0|        
   15|      0|        // 画路径
   16|      0|        PCCanvasPathView(t: .rounded)
   17|      0|        PCCanvasPathView(t: .ellipse)
   18|      0|        PCCanvasPathView(t: .circle)
   19|      0|
   20|      0|        // 图片和文字
   21|      0|        PCCanvasImageAndText(text: "Starming", colors: [.purple, .pink])
   22|      0|
   23|      0|        // Symbol，在 Canvas 里引用 SwiftUI 视图
   24|      0|        Canvas { c, s in
   25|      0|            let c0 = c.resolveSymbol(id: 0)!
   26|      0|            let c1 = c.resolveSymbol(id: 1)!
   27|      0|            let c2 = c.resolveSymbol(id: 2)!
   28|      0|            let c3 = c.resolveSymbol(id: 3)!
   29|      0|
   30|      0|            c.draw(c0, at: .init(x: 10, y: 10), anchor: .topLeading)
   31|      0|            c.draw(c1, at: .init(x: 30, y: 20), anchor: .topLeading)
   32|      0|            c.draw(c2, at: .init(x: 50, y: 30), anchor: .topLeading)
   33|      0|            c.draw(c3, at: .init(x: 70, y: 40), anchor: .topLeading)
   34|      0|
   35|      0|        } symbols: {
   36|      0|            ForEach(Array(colors.enumerated()), id: \.0) { i, c in
   37|      0|                Circle()
   38|      0|                    .fill(c)
   39|      0|                    .frame(width: 100, height: 100)
   40|      0|                    .tag(i)
   41|      0|            }
   42|      0|        }
   43|      0|
   44|      0|        // Symbol 动画和 SwiftUI 视图一样，不会受影响
   45|      0|        Canvas { c, s in
   46|      0|            let sb = c.resolveSymbol(id: 0)!
   47|      0|            c.draw(sb, at: CGPoint(x: s.width / 2, y: s.height /  2), anchor: .center)
   48|      0|
   49|      0|        } symbols: {
   50|      0|            PCForSymbolView()
   51|      0|                .tag(0)
   52|      0|        }
   53|      0|    } // end var body
   54|       |}
   55|       |
   56|       |// MARK: - 给 Symbol 用的视图
   57|       |struct PCForSymbolView: View {
   58|       |    @State private var change = true
   59|      0|    var body: some View {
   60|      0|        Image(systemName: "star.fill")
   61|      0|            .renderingMode(.original)
   62|      0|            .font(.largeTitle)
   63|      0|            .rotationEffect(.degrees(change ? 0 : 72))
   64|      0|            .onAppear {
   65|      0|                withAnimation(.linear(duration: 1.0).repeatForever(autoreverses: false)) {
   66|      0|                    change.toggle()
   67|      0|                }
   68|      0|            }
   69|      0|    }
   70|       |}
   71|       |
   72|       |// MARK: - 图片和文字
   73|       |struct PCCanvasImageAndText: View {
   74|       |    let text: String
   75|       |    let colors: [Color]
   76|       |    var fontSize: Double = 42
   77|       |    
   78|      0|    var body: some View {
   79|      0|        Canvas { context, size in
   80|      0|            let midPoint = CGPoint(x: size.width / 2, y: size.height / 2)
   81|      0|            let font = Font.system(size: fontSize)
   82|      0|            var resolved = context.resolve(Text(text).font(font))
   83|      0|            
   84|      0|            let start = CGPoint(x: (size.width - resolved.measure(in: size).width) / 2.0, y: 0)
   85|      0|            let end = CGPoint(x: size.width - start.x, y: 0)
   86|      0|            
   87|      0|            resolved.shading = .linearGradient(Gradient(colors: colors), startPoint: start, endPoint: end)
   88|      0|            context.draw(resolved, at: midPoint, anchor: .center)
   89|      0|            
   90|      0|        }
   91|      0|    }
   92|       |}
   93|       |
   94|       |// MARK: - Path
   95|       |struct PCCanvasPathView: View {
   96|       |    enum PathType {
   97|       |        case rounded, ellipse, casual, circle
   98|       |    }
   99|       |    let t: PathType
  100|       |    
  101|      0|    var body: some View {
  102|      0|        Canvas { context, size in
  103|      0|            
  104|      0|            conf(context: &context, size: size, type: t)
  105|      0|        } // end Canvas
  106|      0|    }
  107|       |    
  108|      0|    func conf( context: inout GraphicsContext, size: CGSize, type: PathType) {
  109|      0|        let rect = CGRect(origin: .zero, size: size).insetBy(dx: 25, dy: 25)
  110|      0|        var path = Path()
  111|      0|        switch type {
  112|      0|        case .rounded:
  113|      0|            path = Path(roundedRect: rect, cornerRadius: 35.0)
  114|      0|        case .ellipse:
  115|      0|            let cgPath = CGPath(ellipseIn: rect, transform: nil)
  116|      0|            path = Path(cgPath)
  117|      0|        case .casual:
  118|      0|            path = Path {
  119|      0|                let points: [CGPoint] = [
  120|      0|                    .init(x: 10, y: 10),
  121|      0|                    .init(x: 0, y: 50),
  122|      0|                    .init(x: 100, y: 100),
  123|      0|                    .init(x: 100, y: 0),
  124|      0|                ]
  125|      0|                $0.move(to: .zero)
  126|      0|                $0.addLines(points)
  127|      0|            }
  128|      0|        case .circle:
  129|      0|            path = Circle().path(in: rect)
  130|      0|        }
  131|      0|        
  132|      0|        
  133|      0|        let gradient = Gradient(colors: [.purple, .pink])
  134|      0|        let from = rect.origin
  135|      0|        let to = CGPoint(x: rect.width, y: rect.height + from.y)
  136|      0|        
  137|      0|        // Stroke path
  138|      0|        context.stroke(path, with: .color(.blue), lineWidth: 25)
  139|      0|        context.fill(path, with: .linearGradient(gradient, startPoint: from, endPoint: to))
  140|      0|    }
  141|       |}
  142|       |
  143|       |
  144|       |
  145|       |
  146|       |
  147|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/Vision/PlayColor.swift:
    1|       |//
    2|       |//  PlayColor.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/3/2.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayColor: View {
   11|      0|    var body: some View {
   12|      0|        ZStack {
   13|      0|            Color.black.edgesIgnoringSafeArea(.all) // Color 也是一个 View
   14|      0|            
   15|      0|            VStack(spacing: 10) {
   16|      0|                Text("这是一个适配了暗黑的文字颜色")
   17|      0|                    .foregroundColor(light: .purple, dark: .pink)
   18|      0|                    .background(Color(nsColor: .quaternaryLabelColor)) // 使用以前 NSColor
   19|      0|                
   20|      0|                Text("自定义颜色")
   21|      0|                    .foregroundColor(Color(red: 0, green: 0, blue: 100))
   22|      0|            }
   23|      0|            .padding()
   24|      0|            
   25|      0|        }
   26|      0|    }
   27|       |}
   28|       |
   29|       |// MARK: - 暗黑适配颜色
   30|       |struct PCColorModifier: ViewModifier {
   31|      0|    @Environment(\.colorScheme) private var colorScheme
   32|       |    var light: Color
   33|       |    var dark: Color
   34|       |    
   35|      0|    private var adaptColor: Color {
   36|      0|        switch colorScheme {
   37|      0|        case .light:
   38|      0|            return light
   39|      0|        case .dark:
   40|      0|            return dark
   41|      0|        @unknown default:
   42|      0|            return light
   43|      0|        }
   44|      0|    }
   45|       |    
   46|      0|    func body(content: Content) -> some View {
   47|      0|        content.foregroundColor(adaptColor)
   48|      0|    }
   49|       |}
   50|       |
   51|       |extension View {
   52|      0|    func foregroundColor(light: Color, dark: Color) -> some View {
   53|      0|        modifier(PCColorModifier(light: light, dark: dark))
   54|      0|    }
   55|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/Resource/Play/SwiftUI/Vision/PlayEffect.swift:
    1|       |//
    2|       |//  PlayEffect.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2022/3/2.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |struct PlayEffect: View {
   11|       |    @State private var isHover = false
   12|       |    
   13|      0|    var body: some View {
   14|      0|        ZStack {
   15|      0|            LinearGradient(colors: [.purple, .black, .pink], startPoint: .top, endPoint: .bottom).ignoresSafeArea()
   16|      0|            
   17|      0|            VStack(spacing: 20) {
   18|      0|                
   19|      0|                // 材质
   20|      0|                Text("材质效果")
   21|      0|                    .font(.system(size:30))
   22|      0|                    .padding(isHover ? 40 : 30)
   23|      0|                    .background(.regularMaterial, in: RoundedRectangle(cornerRadius: 8, style: .continuous))
   24|      0|                    .onHover { b in
   25|      0|                        withAnimation {
   26|      0|                            isHover = b
   27|      0|                        }
   28|      0|                    }
   29|      0|                
   30|      0|                // 模糊
   31|      0|                Text("模糊效果")
   32|      0|                    .font(.system(size: 30))
   33|      0|                    .padding(30)
   34|      0|                    .background {
   35|      0|                        Color.black.blur(radius: 8, opaque: false)
   36|      0|                    }
   37|      0|                
   38|      0|                // 选择
   39|      0|                Text("3D 旋转")
   40|      0|                    .font(.largeTitle)
   41|      0|                    .rotation3DEffect(Angle(degrees: 45), axis: (x: 0, y: 20, z: 0))
   42|      0|                    .scaleEffect(1.5)
   43|      0|                    .blendMode(.hardLight)
   44|      0|                    .blur(radius: 3)
   45|      0|                
   46|      0|            }
   47|      0|                
   48|      0|        }
   49|      0|    }
   50|       |}
   51|       |
   52|       |
   53|       |
   54|       |
   55|       |
   56|       |
   57|       |
   58|       |
   59|       |
   60|       |
   61|       |
   62|       |
   63|       |
   64|       |

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/SPSidebar.swift:
    1|       |//
    2|       |//  SPSidebar.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/12/31.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |
   10|       |// MARK: - Sidebar
   11|       |struct SPSidebar: View {
   12|     94|    @EnvironmentObject var appVM: AppVM
   13|     84|    var body: some View {
   14|     84|        List {
   15|     84|            Section("新动态") {
   16|     84|                NavigationLink {
   17|     84|                    RSSListView(vm: RSSVM())
   18|     84|                } label: {
   19|     84|                    SideBarLabel(title: "博客|资讯", imageName: "p21")
   20|     84|                        .badge(appVM.rssCountNotis)
   21|     84|                }
   22|     84|                
   23|     84|                NavigationLink {
   24|     84|                    DataSortingListView()
   25|     84|                } label: {
   26|     84|                    SideBarLabel(title: "资料整理", imageName: "p11")
   27|     84|                }
   28|     84|            }
   29|     84|            Section("Github") {
   30|     84|
   31|     84|                if SPC.gitHubAccessToken.isEmpty == false {
   32|      0|                    NavigationLink {
   33|      0|                        ExploreRepoListView(showAsGroup: false)
   34|      0|                    } label: {
   35|      0|                        SideBarLabel(title: "库动态", imageName: "p6")
   36|      0|                            .badge(appVM.expCountNotis)
   37|      0|
   38|      0|                    } // end NavigationLink
   39|      0|                    
   40|      0|                    NavigationLink(destination: ActiveDeveloperListView(vm: IssueVM(repoName: SPC.pamphletIssueRepoName, issueNumber: 30))) {
   41|      0|                        SideBarLabel(title: "开发者", imageName: "p5")
   42|      0|                            .badge(appVM.devsCountNotis)
   43|      0|                    } // end NavigationLink
   44|      0|
   45|    168|                } // end if
   46|    168|                
   47|    168|                NavigationLink {
   48|     84|                    ExploreRepoListView(showAsGroup: true)
   49|     84|                } label: {
   50|     84|                    SideBarLabel(title: "探索库", imageName: "p24")
   51|     84|                } // end NavigationLink
   52|    168|                
   53|    168|                NavigationLink {
   54|     84|                    ExploreRepoListView(showAsGroup: true, isArchive: true)
   55|     84|                } label: {
   56|     84|                    SideBarLabel(title: "库存档", imageName: "p25")
   57|     84|                }
   58|    168|                
   59|    168|            } // end Section
   60|     84|
   61|     84|            Section("Swift指南") {
   62|     84|                NavigationLink(destination: IssuesListFromCustomView(vm: IssueVM(guideName:"guide-syntax"))) {
   63|     84|                    SideBarLabel(title: "语法速查", imageName: "p23")
   64|     84|                }
   65|     84|
   66|     84|                NavigationLink(destination: IssuesListFromCustomView(vm: IssueVM(guideName:"guide-features"))) {
   67|     84|                    SideBarLabel(title: "特性", imageName: "p10")
   68|     84|                }
   69|     84|
   70|     84|                NavigationLink(destination: IssuesListFromCustomView(vm: IssueVM(guideName:"guide-subject"))) {
   71|     84|                    SideBarLabel(title: "专题", imageName: "p12")
   72|     84|                }
   73|     84|            }
   74|     84|            Section("库使用指南") {
   75|     84|                NavigationLink(destination: IssuesListFromCustomView(vm: IssueVM(guideName:"lib-SwiftUI"))) {
   76|     84|                    SideBarLabel(title: "SwiftUI", imageName: "p3")
   77|     84|                }
   78|     84|                
   79|     84|                NavigationLink(destination: IssuesListFromCustomView(vm: IssueVM(guideName:"lib-Combine"))) {
   80|     84|                    SideBarLabel(title: "Combine", imageName: "p19")
   81|     84|                }
   82|     84|
   83|     84|                NavigationLink(destination: IssuesListFromCustomView(vm: IssueVM(guideName:"lib-Concurrency"))) {
   84|     84|                    SideBarLabel(title: "Concurrency", imageName: "p1")
   85|     84|                }
   86|     84|                
   87|     84|            }
   88|     84|
   89|     84|//            Section("个人") {
   90|     84|//                /// isExpanded 来控制是否展开
   91|     84|//                /// 详细查看WWDC：[WWDC 2020: Stacks, Grids, and Outlines in SwiftUI](https://developer.apple.com/videos/play/wwdc2020/10031/)
   92|     84|//                DisclosureGroup(content: {
   93|     84|//                    Text("待建设")
   94|     84|//                }, label: {
   95|     84|//                    Label("我的", systemImage: "person")
   96|     84|//                })
   97|     84|//            }
   98|     84|
   99|     84|        }
  100|     84|        .listStyle(SidebarListStyle())
  101|     84|        .frame(minWidth: 160)
  102|     84|        .toolbar {
  103|     84|//            ToolbarItem {
  104|     84|//                Menu {
  105|     84|//                    Text("Ops！发现这里了")
  106|     84|//                    Text("彩蛋下个版本见")
  107|     84|//                    Text("隐藏彩蛋1")
  108|     84|//                    Text("隐藏彩蛋2")
  109|     84|//                } label: {
  110|     84|//                    Label("Label", systemImage: "slider.horizontal.3")
  111|     84|//                }
  112|     84|//            }
  113|     84|        }
  114|     84|        // end List
  115|     84|
  116|     84|        // MARK: - Mine
  117|     84|//        Spacer()
  118|     84|//        Mine()
  119|     84|    }
  120|       |}
  121|       |
  122|       |struct Mine: View {
  123|      0|    var body: some View {
  124|      0|        HStack {
  125|      0|            Label("我的", systemImage: "person")
  126|      0|            Spacer()
  127|      0|        }
  128|      0|        .padding(20)
  129|      0|
  130|      0|    }
  131|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/SwiftPamphletAppApp.swift:
    1|       |//
    2|       |//  SwiftPamphletAppApp.swift
    3|       |//  SwiftPamphletApp
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/17.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |import Combine
   10|       |import InstrProfiling
   11|       |
   12|       |@main
   13|       |struct SwiftPamphletAppApp: App {
   14|       |
   15|      2|    @NSApplicationDelegateAdaptor(AppDelegate.self) var appDelegate
   16|      2|    var body: some Scene {
   17|      2|        WindowGroup {
   18|      2|            SwiftPamphletApp()
   19|      2|//            Demo()
   20|      2|        }
   21|      2|        .windowToolbarStyle(UnifiedWindowToolbarStyle(showsTitle: true)) // 用来控制是否展示标题
   22|      2|    }
   23|       |}
   24|       |
   25|       |struct Demo: View {
   26|      0|    var body: some View {
   27|      0|        Group {
   28|      0|//            V()
   29|      0|//            PlayTextView()
   30|      0|//            PlayLinkView()
   31|      0|//            PlayLabelView()
   32|      0|//            PlayTextEditorView()
   33|      0|//            PlayTextFieldView()
   34|      0|//            PlayButtonView()
   35|      0|//            PlayStackView()
   36|      0|//            PlayFormView()
   37|      0|//            PlayToggleView()
   38|      0|//            PlayListView()
   39|      0|//            PlayControlGroupView()
   40|      0|//            PlayGroupBoxView()
   41|      0|//            PlayNavigationView()
   42|      0|//            PlayLazyVStackAndLazyHStackView()
   43|      0|//            PlayProgressView()
   44|      0|//            PlayImageView()
   45|      0|//            PlayLazyVGridAndLazyHGridView()
   46|      0|//            PlayScrollView()
   47|      0|//            PlaySuperposedLayerView()
   48|      0|//            PlayTabView()
   49|      0|//            PlayPickerView()
   50|      0|//            PlaySliderView()
   51|      0|//            PlayColor()
   52|      0|//            PlayEffect()
   53|      0|//            PlayKeyboard()
   54|      0|            PlayAnimation()
   55|      0|//            PlayCanvas()
   56|      0|            
   57|      0|        }
   58|      0|        .frame(minWidth:300, maxWidth: .infinity, minHeight: 550, maxHeight: .infinity)
   59|      0|        .onAppear {
   60|      0|
   61|      0|        }
   62|      0|    }
   63|       |}
   64|       |
   65|       |struct V: View {
   66|       |    
   67|      0|    @StateObject var appVM = AppVM()
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc1VV6_appVM33_63F5B9A24833CE686F2E00621CD2738DLL7SwiftUI11StateObjectVyAA03AppB0CGvpfi
  ------------------
  | Unexecuted instantiation: $s0026CGqBIcsIkBvasBitEfJFGboDEc1VV6_appVM33_63F5B9A24833CE686F2E00621CD2738DLL7SwiftUI11StateObjectVyAA03AppB0CGvpfiAJycfu_AJycfu0_
  ------------------
   68|       |    @State var isEnterFullScreen: Bool = false // 全屏控制
   69|      0|    var body: some View {
   70|      0|        Button {
   71|      0|            isEnterFullScreen.toggle()
   72|      0|            appVM.fullScreen(isEnter: isEnterFullScreen)
   73|      0|        } label: {
   74|      0|            Image(systemName: isEnterFullScreen == true ? "arrow.down.right.and.arrow.up.left" : "arrow.up.left.and.arrow.down.right")
   75|      0|        }
   76|      0|    }
   77|       |}
   78|       |
   79|       |struct SwiftPamphletApp: View {
   80|       |    
   81|      4|    @StateObject var appVM = AppVM()
  ------------------
  | $s0026CGqBIcsIkBvasBitEfJFGboDEc16SwiftPamphletAppV6_appVM33_63F5B9A24833CE686F2E00621CD2738DLL0A2UI11StateObjectVyAA0cE0CGvpfi:
  |   81|      2|    @StateObject var appVM = AppVM()
  ------------------
  | $s0026CGqBIcsIkBvasBitEfJFGboDEc16SwiftPamphletAppV6_appVM33_63F5B9A24833CE686F2E00621CD2738DLL0A2UI11StateObjectVyAA0cE0CGvpfiAJycfu_AJycfu0_:
  |   81|      2|    @StateObject var appVM = AppVM()
  ------------------
   82|      2|    @State var sb = Set<AnyCancellable>()
   83|       |    @State var alertMsg = ""
   84|       |
   85|      2|    let timerForDevs = Timer.publish(every: SPC.timerForDevsSec, on: .main, in: .common).autoconnect()
   86|      2|    let timerForExp = Timer.publish(every: SPC.timerForExpSec, on: .main, in: .common).autoconnect()
   87|      2|    let timerForRss = Timer.publish(every: SPC.timerForRssSec, on: .main, in: .common).autoconnect()
   88|     94|    var body: some View {
   89|     94|        NavigationView {
   90|     94|            SPSidebar()
   91|     94|                .onAppear(perform: {
   92|      2|                    appVM.onAppearEvent()
   93|      2|                    appVM.rssFetch()
   94|      2|                })
   95|     94|                .onReceive(timerForDevs, perform: { _ in
   96|      0|                    if SPC.gitHubAccessToken.isEmpty == false {
   97|      0|                        if let userName = appVM.timeForDevsEvent() {
   98|      0|                            let vm = UserVM(userName: userName)
   99|      0|                            vm.doing(.notiEvent)
  100|      0|                        }
  101|      0|                    }
  102|      0|                })
  103|     94|                .onReceive(timerForExp) { _ in
  104|      0|                    if SPC.gitHubAccessToken.isEmpty == false {
  105|      0|                        appVM.timeForExpEvent()
  106|      0|                    }
  107|      0|                }
  108|     94|                .onReceive(timerForRss) { _ in
  109|      0|                    appVM.rssFetch()
  110|      0|                }
  111|     94|            IssuesListFromCustomView(vm: IssueVM(guideName:"guide-syntax"))
  112|     94|                .frame(minWidth:60)
  113|     94|            IntroView()
  114|     94|            NavView()
  115|     94|
  116|     94|        } // end NavigationView
  117|     94|        .frame(minHeight: 650)
  118|     94|        .navigationTitle("戴铭的开发小册子")
  119|     94|        .navigationSubtitle(appVM.alertMsg)
  120|     94|        .toolbar {
  121|     94|            ToolbarItem(placement: ToolbarItemPlacement.navigation) {
  122|     94|                Button {
  123|      0|                    appVM.toggleSidebar()
  124|     94|                } label: {
  125|     94|                    Label("Sidebar", systemImage: "sidebar.left")
  126|     94|                }
  127|     94|            }
  128|     94|
  129|     94|            ToolbarItemGroup(placement: ToolbarItemPlacement.automatic) {
  130|     94|                // 博客链接用浏览器打开，还有共享菜单进行分享用
  131|     94|                if !appVM.webLinkStr.isEmpty {
  132|     46|                    ShareView(s: appVM.webLinkStr)
  133|     46|                    Button {
  134|      0|                        gotoWebBrowser(urlStr: appVM.webLinkStr)
  135|     46|                    } label: {
  136|     46|                        Label("Browser", systemImage: "safari")
  137|     46|                        Text("用浏览器打开")
  138|     46|                    } // end Button
  139|    188|                } // end if
  140|    188|                
  141|    188|                Button {
  142|      0|                    appVM.toggleLastView()
  143|     94|                } label: {
  144|     94|                    Label("LastView", systemImage: "sidebar.right")
  145|     94|                } // end Button
  146|    188|
  147|    188|            } // end ToolbarItemGroup
  148|     94|        } // end .toolbar
  149|     94|        .environmentObject(appVM)
  150|     94|    }
  151|       |}
  152|       |
  153|       |// MARK: - UnCat
  154|       |protocol Jsonable : Identifiable, Decodable, Hashable {}
  155|       |
  156|       |class AppDelegate: NSObject, NSApplicationDelegate {
  157|       |    var window: NSWindow!
  158|       |    var op: String?
  159|       |    
  160|      2|    func applicationDidFinishLaunching(_ notification: Notification) {
  161|      2|        print("-- AppDelegate Section --")
  162|      2|
  163|      2|        
  164|      2|//        AutoTask.buildContentMarkdownFile()
  165|      2|        
  166|      2|//        PlaySecurity.keyChain()
  167|      2|
  168|      2|//        PlayArchitecture.error()
  169|      2|//        PlayArchitecture.codable()
  170|      2|
  171|      2|//        PlaySyntax.hashable()
  172|      2|//        PlaySyntax.resultBuilder()
  173|      2|//        PlaySyntax.dynamicCallable()
  174|      2|//        PlaySyntax.dynamicMemberLookup()
  175|      2|//        PlaySyntax.function()
  176|      2|//        PlaySyntax.method()
  177|      2|//        PlaySyntax.property()
  178|      2|//        PlaySyntax.generics()
  179|      2|//        PlaySyntax.result()
  180|      2|//        PlaySyntax.string()
  181|      2|//        PlaySyntax.array()
  182|      2|//        PlaySyntax.set()
  183|      2|//        PlaySyntax.dictionary()
  184|      2|//        PlaySyntax.enum()
  185|      2|//        PlaySyntax.number()
  186|      2|
  187|      2|//        PlayFoundation.userDefaults()
  188|      2|//        PlayFoundation.random()
  189|      2|//        PlayFoundation.data()
  190|      2|//        PlayFoundation.date()
  191|      2|//        PlayFoundation.formatter()
  192|      2|//        PlayFoundation.measurement()
  193|      2|//        PlayFoundation.file()
  194|      2|//        PlayFoundation.scanner()
  195|      2|//        let _ = PlayFoundation.attributeString()
  196|      2|//        PlayFoundation.coaAndCow()
  197|      2|
  198|      2|//        self.window.makeKey()
  199|      2|    }
  200|       |    
  201|      2|    func applicationWillTerminate(_ notification: Notification) {
  202|      2|        codeCoverageProfrawDump()
  203|      2|    }
  204|       |    
  205|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/SwiftPamphletAppConfig.swift:
    1|       |//
    2|       |//  SwiftPamphletAppConfig.swift
    3|       |//  PresentSwiftUI
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/17.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |struct SPC {
   11|       |    static let gitHubAccessToken = "" // 在这里写上 Github 的access token。在 https://github.com/settings/tokens 申请你的access token。
   12|       |    static let detailMinWidth: CGFloat = 550
   13|       |    static let githubHost = "https://github.com/"
   14|       |    static let pamphletIssueRepoName = "KwaiAppTeam/SwiftPamphletApp"
   15|       |
   16|       |    static let timerForDevsSec: Double = 160
   17|       |    static let timerForExpSec: Double = 125
   18|       |    static let timerForRssSec: Double = 60 * 60
   19|       |
   20|       |    static let unreadMagicNumber = 99999
   21|       |
   22|      0|    static func loadCustomIssues(jsonFileName: String) -> [CustomIssuesModel] {
   23|      0|        let lc: [CustomIssuesModel] = loadBundleJSONFile(jsonFileName + ".json")
   24|      0|        return lc
   25|      0|    }
   26|       |
   27|      0|    static func activeDevelopers() -> [SPActiveDevelopersModel] {
   28|      0|        let ad: [SPActiveDevelopersModel] = loadBundleJSONFile("developers.json")
   29|      0|        return ad
   30|      0|    }
   31|       |
   32|      0|    static func repos() -> [SPReposModel] {
   33|      0|        let re: [SPReposModel] = loadBundleJSONFile("repos.json")
   34|      0|        return re
   35|      0|    }
   36|       |
   37|      2|    static func rssFeed() -> [RSSFeedModel] {
   38|      2|        let re: [RSSFeedModel] = loadBundleJSONFile("rssfeed.json")
   39|      2|        return re
   40|      2|    }
   41|       |
   42|     72|    static func rssStyle() -> String {
   43|     72|        let data = loadBundleData("css_cn.html")
   44|     72|        return String(data: data, encoding: .utf8) ?? ""
   45|     72|    }
   46|       |    
   47|     72|    static func rssFooterJS() -> String {
   48|     72|        let data = loadBundleData("footer_js.html")
   49|     72|        return String(data: data, encoding: .utf8) ?? ""
   50|     72|    }
   51|       |
   52|      0|    static func outputRepo() {
   53|      0|        let re = repos()
   54|      0|        for r in re {
   55|      0|            print("#### \(r.name)")
   56|      0|            for ar in r.repos {
   57|      0|                let arr = ar.id.components(separatedBy: "/")
   58|      0|                print("* \(arr[1])：\(ar.des ?? "") (https://github.com/\(ar.id))")
   59|      0|            }
   60|      0|        }
   61|      0|    }
   62|       |}
   63|       |
   64|       |struct SPActiveDevelopersModel: Jsonable {
   65|       |    var id: Int64
   66|       |    var name: String
   67|       |    var users: [ADeveloperModel]
   68|       |}
   69|       |
   70|       |struct ADeveloperModel: Jsonable {
   71|       |    var id: String
   72|       |    var des: String?
   73|       |}
   74|       |
   75|       |struct SPReposModel: Jsonable {
   76|       |    var id: Int64
   77|       |    var name: String
   78|       |    var repos: [ARepoModel]
   79|       |}
   80|       |
   81|       |struct ARepoModel: Jsonable {
   82|       |    var id: String
   83|       |    var des: String?
   84|       |}
   85|       |
   86|       |struct RSSFeedModel: Jsonable {
   87|       |    var id: Int64
   88|       |    var title: String
   89|       |    var des: String
   90|       |    var siteLink: String
   91|       |    var feedLink: String
   92|       |}

/Users/automan/source/SwiftPamphletApp/SwiftPamphletApp/ViewComponet/ViewComponet.swift:
    1|       |//
    2|       |//  ViewComponet.swift
    3|       |//  PresentSwiftUI
    4|       |//
    5|       |//  Created by Ming Dai on 2021/11/17.
    6|       |//
    7|       |
    8|       |import SwiftUI
    9|       |import WebKit
   10|       |import MarkdownUI
   11|       |
   12|       |// MARK: - 大纲
   13|       |struct SPOutlineListView<D, Content>: View where D: RandomAccessCollection, D.Element: Identifiable, Content: View {
   14|       |    private let v: SPOutlineView<D, Content>
   15|       |    
   16|      0|    init(d: D, c: KeyPath<D.Element, D?>, content: @escaping (D.Element) -> Content) {
   17|      0|        self.v = SPOutlineView(d: d, c: c, content: content)
   18|      0|    }
   19|       |    
   20|      0|    var body: some View {
   21|      0|        List {
   22|      0|            v
   23|      0|        }
   24|      0|    }
   25|       |}
   26|       |
   27|       |struct SPOutlineView<D, Content>: View where D: RandomAccessCollection, D.Element: Identifiable, Content: View {
   28|       |    let d: D
   29|       |    let c: KeyPath<D.Element, D?>
   30|       |    let content: (D.Element) -> Content
   31|       |    @State var isExpanded = true // 控制初始是否展开的状态
   32|       |    
   33|      0|    var body: some View {
   34|      0|        ForEach(d) { i in
   35|      0|            if let sub = i[keyPath: c] {
   36|      0|                SPDisclosureGroup(content: SPOutlineView(d: sub, c: c, content: content), label: content(i))
   37|      0|            } else {
   38|      0|                content(i)
   39|      0|            } // end if
   40|      0|        } // end ForEach
   41|      0|    } // end body
   42|       |}
   43|       |
   44|       |struct SPDisclosureGroup<C, L>: View where C: View, L: View {
   45|       |    @State var isExpanded = false
   46|       |    var content: C
   47|       |    var label: L
   48|      0|    var body: some View {
   49|      0|        DisclosureGroup(isExpanded: $isExpanded) {
   50|      0|            content
   51|      0|        } label: {
   52|      0|            Button {
   53|      0|                isExpanded.toggle()
   54|      0|            } label: {
   55|      0|                label
   56|      0|            }
   57|      0|            .buttonStyle(.plain)
   58|      0|        }
   59|      0|    }
   60|       |}
   61|       |
   62|       |// MARK: - 简化大纲
   63|       |struct DisclosureGroupLikeButton<C, L>: View where C: View, L: View {
   64|       |    @State var isExpanded = false
   65|       |    var content: () -> C
   66|       |    var label: () -> L
   67|      0|    var body: some View {
   68|      0|        DisclosureGroup(isExpanded: $isExpanded, content: content) {
   69|      0|            HStack {
   70|      0|                Button(action: {
   71|      0|                    isExpanded.toggle()
   72|      0|                }, label: label)
   73|      0|                    .buttonStyle(.plain)
   74|      0|            }
   75|      0|        }
   76|      0|    }
   77|       |}
   78|       |
   79|       |// MARK: - Sidebar Label
   80|       |struct SideBarLabel: View {
   81|       |    var title: String
   82|       |    var imageName: String
   83|     56|    var body: some View {
   84|     56|        HStack {
   85|     56|            Image(imageName)
   86|     56|                .resizable()
   87|     56|                .aspectRatio(contentMode: .fit)
   88|     56|                .frame(width: 30)
   89|     56|            Text(title)
   90|     56|        }
   91|     56|    }
   92|       |}
   93|       |
   94|       |// MARK: - MarkdownUI
   95|       |struct MarkdownView: View {
   96|       |    var s: String
   97|      2|    var body: some View {
   98|      2|        Markdown(s)
   99|      2|            .markdownStyle(MarkdownStyle(font:.title3))
  100|      2|    }
  101|       |}
  102|       |
  103|       |// MARK: - 共享菜单
  104|       |struct ShareView: View {
  105|       |    var s: String
  106|     18|    var body: some View {
  107|     18|        Menu {
  108|     18|            Button {
  109|      0|                let p = NSPasteboard.general
  110|      0|                p.declareTypes([.string], owner: nil)
  111|      0|                p.setString(s, forType: .string)
  112|     18|            } label: {
  113|     18|                Image(systemName: "doc.on.doc")
  114|     18|                Text("拷贝链接")
  115|     18|            }
  116|     18|            Divider()
  117|     18|            ForEach(NSSharingService.sharingServices(forItems: [""]), id: \.title) { item in
  118|      0|                Button {
  119|      0|                    item.perform(withItems: [s])
  120|      0|                } label: {
  121|      0|                    Image(nsImage: item.image)
  122|      0|                    Text(item.title)
  123|      0|                }
  124|      0|            }
  125|     18|        } label: {
  126|     18|            Image(systemName: "square.and.arrow.up")
  127|     18|            Text("分享")
  128|     18|        }
  129|     18|    }
  130|       |}
  131|       |
  132|       |// MARK: - WebView
  133|       |struct WebView: NSViewRepresentable {
  134|       |    let urlStr: String
  135|       |
  136|      0|    func makeNSView(context: Context) -> some WKWebView {
  137|      0|        return WKWebView()
  138|      0|    }
  139|       |
  140|      0|    func updateNSView(_ nsView: NSViewType, context: Context) {
  141|      0|        let r = URLRequest(url: URL(string: urlStr)!)
  142|      0|        nsView.load(r)
  143|      0|    }
  144|       |}
  145|       |
  146|       |struct WebUIView: NSViewRepresentable {
  147|       |    let html: String
  148|       |    let baseURLStr: String
  149|       |
  150|     18|    func makeNSView(context: Context) -> some WKWebView {
  151|     18|        return WKWebView()
  152|     18|    }
  153|       |
  154|     24|    func updateNSView(_ nsView: NSViewType, context: Context) {
  155|     24|        let host = URL(string: baseURLStr)?.host ?? ""
  156|     24|        nsView.loadHTMLString(html, baseURL: URL(string: "https://\(host)"))
  157|     24|    }
  158|       |}
  159|       |
  160|       |// MARK: - Time
  161|       |struct GitHubApiTimeView: View {
  162|       |    var timeStr: String
  163|       |    var isUnread = false
  164|      0|    var body: some View {
  165|      0|        HStack {
  166|      0|            Text(howLongFromNow(timeStr:timeStr))
  167|      0|            if isUnread == true {
  168|      0|                Image(systemName: "envelope.badge")
  169|      0|            }
  170|      0|        }
  171|      0|        .font(.system(.footnote))
  172|      0|        .foregroundColor(.secondary)
  173|      0|
  174|      0|    }
  175|       |}
  176|       |
  177|       |/// 列表加按钮性能问题，需观察官方后面是否解决
  178|       |/// https://twitter.com/fcbunn/status/1259078251340800000
  179|       |struct FixAwfulPerformanceStyle: ButtonStyle {
  180|      0|    func makeBody(configuration: Self.Configuration) -> some View {
  181|      0|        configuration.label
  182|      0|            .font(.body)
  183|      0|            .padding(EdgeInsets.init(top: 2, leading: 6, bottom: 2, trailing: 6))
  184|      0|            .foregroundColor(configuration.isPressed ? Color(nsColor: NSColor.selectedControlTextColor) : Color(nsColor: NSColor.controlTextColor))
  185|      0|            .background(configuration.isPressed ? Color(nsColor: NSColor.selectedControlColor) : Color(nsColor: NSColor.controlBackgroundColor))
  186|      0|            .overlay(RoundedRectangle(cornerRadius: 6.0).stroke(Color(nsColor: NSColor.lightGray), lineWidth: 0.5))
  187|      0|            .clipShape(RoundedRectangle(cornerRadius: 6.0))
  188|      0|            .shadow(color: Color.gray, radius: 0.5, x: 0, y: 0.5)
  189|      0|    }
  190|       |}
  191|       |
  192|       |// MARK: - 图片
  193|       |struct AsyncImageWithPlaceholder: View {
  194|       |    enum Size {
  195|       |        case tinySize, smallSize,normalSize, bigSize
  196|       |
  197|      0|        var v: CGFloat {
  198|      0|            switch self {
  199|      0|            case .tinySize:
  200|      0|                return 20
  201|      0|            case .smallSize:
  202|      0|                return 40
  203|      0|            case .normalSize:
  204|      0|                return 60
  205|      0|            case .bigSize:
  206|      0|                return 100
  207|      0|            }
  208|      0|        }
  209|       |    }
  210|       |    var size: Size
  211|       |    var url: String
  212|      0|    var body: some View {
  213|      0|        AsyncImage(url: URL(string: url), content: { image in
  214|      0|            image
  215|      0|                .resizable()
  216|      0|                .aspectRatio(contentMode: .fit)
  217|      0|                .frame(width: size.v, height: size.v)
  218|      0|                .cornerRadius(5)
  219|      0|        },
  220|      0|        placeholder: {
  221|      0|            Image(systemName: "person")
  222|      0|                .frame(width: size.v, height: size.v)
  223|      0|        })
  224|      0|    }
  225|       |}
  226|       |
  227|       |// MARK: - 跳到 Github 网站
  228|       |struct ButtonGoGitHubWeb: View {
  229|       |    var url: String
  230|       |    var text: String
  231|       |    var ignoreHost: Bool = false
  232|       |    var bold: Bool = false
  233|      0|    var body: some View {
  234|      0|        Button {
  235|      0|            if ignoreHost == true {
  236|      0|                gotoWebBrowser(urlStr: SPC.githubHost + url)
  237|      0|            } else {
  238|      0|                gotoWebBrowser(urlStr: url)
  239|      0|            }
  240|      0|        } label: {
  241|      0|            if bold == true {
  242|      0|                Text(text).bold()
  243|      0|            } else {
  244|      0|                Text(text)
  245|      0|            }
  246|      0|
  247|      0|        }.buttonStyle(FixAwfulPerformanceStyle())
  248|      0|    }
  249|       |}

